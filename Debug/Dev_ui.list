
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010018  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08010218  08010218  00020218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106e8  080106e8  0003028c  2**0
                  CONTENTS
  4 .ARM          00000008  080106e8  080106e8  000206e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106f0  080106f0  0003028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106f0  080106f0  000206f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106f4  080106f4  000206f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  080106f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f8e8  2000028c  08010984  0003028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fb74  08010984  0003fb74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ba2  00000000  00000000  000302ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049a9  00000000  00000000  00059e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020f8  00000000  00000000  0005e808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ee0  00000000  00000000  00060900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005c2f  00000000  00000000  000627e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ad52  00000000  00000000  0006840f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001187be  00000000  00000000  00083161  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019b91f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097d8  00000000  00000000  0019b99c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000028c 	.word	0x2000028c
 800021c:	00000000 	.word	0x00000000
 8000220:	08010200 	.word	0x08010200

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000290 	.word	0x20000290
 800023c:	08010200 	.word	0x08010200

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <SMLCD_InitGPIO>:
}
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 80005f4:	2200      	movs	r2, #0
 80005f6:	2102      	movs	r1, #2
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <SMLCD_InitGPIO+0x1c>)
 80005fa:	f005 f81d 	bl	8005638 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <SMLCD_InitGPIO+0x20>)
 8000604:	f005 f818 	bl	8005638 <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40022400 	.word	0x40022400
 8000610:	40021000 	.word	0x40021000

08000614 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <SMLCD_Init+0x14>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f882 	bl	8000728 <SMLCD_Orientation>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20007b10 	.word	0x20007b10

0800062c <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	SMLCD_SCS_H;
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <SMLCD_Clear+0x34>)
 8000636:	f004 ffff 	bl	8005638 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <SMLCD_Clear+0x38>)
 8000642:	f007 f889 	bl	8007758 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	2201      	movs	r2, #1
 800064a:	2100      	movs	r1, #0
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <SMLCD_Clear+0x38>)
 800064e:	f007 f883 	bl	8007758 <HAL_SPI_Transmit>
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 8000652:	2200      	movs	r2, #0
 8000654:	2110      	movs	r1, #16
 8000656:	4802      	ldr	r0, [pc, #8]	; (8000660 <SMLCD_Clear+0x34>)
 8000658:	f004 ffee 	bl	8005638 <HAL_GPIO_WritePin>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	2000aa8c 	.word	0x2000aa8c

08000668 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	af00      	add	r7, sp, #0
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#else

	register uint8_t *ptr = vRAM;
 800066c:	4d29      	ldr	r5, [pc, #164]	; (8000714 <SMLCD_Flush+0xac>)

	SMLCD_SCS_H;
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	4829      	ldr	r0, [pc, #164]	; (8000718 <SMLCD_Flush+0xb0>)
 8000674:	f004 ffe0 	bl	8005638 <HAL_GPIO_WritePin>
	// Send "Write Line" command
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	2201      	movs	r2, #1
 800067c:	2188      	movs	r1, #136	; 0x88
 800067e:	4827      	ldr	r0, [pc, #156]	; (800071c <SMLCD_Flush+0xb4>)
 8000680:	f007 f86a 	bl	8007758 <HAL_SPI_Transmit>

	// This variable declared as 32-bit to improve performance on on 32-bit MCU
	// it can be changed to 8 or 16 bit
	register uint32_t line;

	if (lcd_orientation & (LCD_ORIENT_180 | LCD_ORIENT_CW)) {
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <SMLCD_Flush+0xb8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	f003 030a 	and.w	r3, r3, #10
 800068c:	2b00      	cmp	r3, #0
 800068e:	d01b      	beq.n	80006c8 <SMLCD_Flush+0x60>
		// Inverted lines order (e.g. 240th line from vRAM will come as 1st to the screen)
		line = SCR_H;
 8000690:	24f0      	movs	r4, #240	; 0xf0
		while (line-- > 0) {
 8000692:	e014      	b.n	80006be <SMLCD_Flush+0x56>
			// Send: line number -> line data -> trailer byte
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, LUT_LINE[line], 1, 100);
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <SMLCD_Flush+0xbc>)
 8000696:	5d1b      	ldrb	r3, [r3, r4]
 8000698:	4619      	mov	r1, r3
 800069a:	2364      	movs	r3, #100	; 0x64
 800069c:	2201      	movs	r2, #1
 800069e:	481f      	ldr	r0, [pc, #124]	; (800071c <SMLCD_Flush+0xb4>)
 80006a0:	f007 f85a 	bl	8007758 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2232      	movs	r2, #50	; 0x32
 80006a8:	4629      	mov	r1, r5
 80006aa:	481c      	ldr	r0, [pc, #112]	; (800071c <SMLCD_Flush+0xb4>)
 80006ac:	f007 f854 	bl	8007758 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	2100      	movs	r1, #0
 80006b6:	4819      	ldr	r0, [pc, #100]	; (800071c <SMLCD_Flush+0xb4>)
 80006b8:	f007 f84e 	bl	8007758 <HAL_SPI_Transmit>
			//SPI_SendRecv(&SMLCD_SPI_PORT, LUT_LINE[line]);
			//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
			//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			ptr += SCR_W >> 3;
 80006bc:	3532      	adds	r5, #50	; 0x32
		while (line-- > 0) {
 80006be:	4623      	mov	r3, r4
 80006c0:	1e5c      	subs	r4, r3, #1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1e6      	bne.n	8000694 <SMLCD_Flush+0x2c>
 80006c6:	e018      	b.n	80006fa <SMLCD_Flush+0x92>
		}
	} else {
		// Normal lines order
		line = 0;
 80006c8:	2400      	movs	r4, #0
		do {
			// Send: line number -> line data -> trailer byte
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, LUT_LINE[line], 1, 100);
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <SMLCD_Flush+0xbc>)
 80006cc:	5d1b      	ldrb	r3, [r3, r4]
 80006ce:	4619      	mov	r1, r3
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	2201      	movs	r2, #1
 80006d4:	4811      	ldr	r0, [pc, #68]	; (800071c <SMLCD_Flush+0xb4>)
 80006d6:	f007 f83f 	bl	8007758 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	2232      	movs	r2, #50	; 0x32
 80006de:	4629      	mov	r1, r5
 80006e0:	480e      	ldr	r0, [pc, #56]	; (800071c <SMLCD_Flush+0xb4>)
 80006e2:	f007 f839 	bl	8007758 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	2201      	movs	r2, #1
 80006ea:	2100      	movs	r1, #0
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <SMLCD_Flush+0xb4>)
 80006ee:	f007 f833 	bl	8007758 <HAL_SPI_Transmit>
			//SPI_SendRecv(&SMLCD_SPI_PORT, LUT_LINE[line]);
			//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
			//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			ptr += SCR_W >> 3;
 80006f2:	3532      	adds	r5, #50	; 0x32
		} while (++line < SCR_H);
 80006f4:	3401      	adds	r4, #1
 80006f6:	2cef      	cmp	r4, #239	; 0xef
 80006f8:	d9e7      	bls.n	80006ca <SMLCD_Flush+0x62>
		} while (line++ < SCR_H);
	}
#endif // SMLCD_FLUSH_LUT

	// One more trailer after last string has been transmitted
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	4806      	ldr	r0, [pc, #24]	; (800071c <SMLCD_Flush+0xb4>)
 8000702:	f007 f829 	bl	8007758 <HAL_SPI_Transmit>
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <SMLCD_Flush+0xb0>)
 800070c:	f004 ff94 	bl	8005638 <HAL_GPIO_WritePin>

#endif
}
 8000710:	bf00      	nop
 8000712:	bdb0      	pop	{r4, r5, r7, pc}
 8000714:	200002a8 	.word	0x200002a8
 8000718:	40021000 	.word	0x40021000
 800071c:	2000aa8c 	.word	0x2000aa8c
 8000720:	20000000 	.word	0x20000000
 8000724:	08010294 	.word	0x08010294

08000728 <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 0306 	and.w	r3, r3, #6
 8000738:	2b00      	cmp	r3, #0
 800073a:	d007      	beq.n	800074c <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SMLCD_Orientation+0x44>)
 800073e:	22f0      	movs	r2, #240	; 0xf0
 8000740:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <SMLCD_Orientation+0x48>)
 8000744:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	e006      	b.n	800075a <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <SMLCD_Orientation+0x44>)
 800074e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000752:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SMLCD_Orientation+0x48>)
 8000756:	22f0      	movs	r2, #240	; 0xf0
 8000758:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <SMLCD_Orientation+0x4c>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	7013      	strb	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20007b12 	.word	0x20007b12
 8000770:	20007b14 	.word	0x20007b14
 8000774:	20000000 	.word	0x20000000

08000778 <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 8000778:	b4b0      	push	{r4, r5, r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
	int x=0;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	//memset(vRAM, 0xFFFFFFFF, sizeof(vRAM) >> 2);
#else
	register uint32_t *ptr = (uint32_t *)vRAM;
 8000782:	4c0f      	ldr	r4, [pc, #60]	; (80007c0 <LCD_Clear+0x48>)
	register uint32_t i = sizeof(vRAM) >> 2;
 8000784:	f640 35b8 	movw	r5, #3000	; 0xbb8

	while (i--) {
 8000788:	e010      	b.n	80007ac <LCD_Clear+0x34>
		if(x){
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d007      	beq.n	80007a0 <LCD_Clear+0x28>
			*ptr++ = 0xFFFFFFFF;
 8000790:	4623      	mov	r3, r4
 8000792:	1d1c      	adds	r4, r3, #4
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	601a      	str	r2, [r3, #0]
			x=0;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	e005      	b.n	80007ac <LCD_Clear+0x34>
		}
		else{
			*ptr++ = 0x0;
 80007a0:	4623      	mov	r3, r4
 80007a2:	1d1c      	adds	r4, r3, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
			x=1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
	while (i--) {
 80007ac:	462b      	mov	r3, r5
 80007ae:	1e5d      	subs	r5, r3, #1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1ea      	bne.n	800078a <LCD_Clear+0x12>
		}
	}
#endif
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bcb0      	pop	{r4, r5, r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	200002a8 	.word	0x200002a8

080007c4 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 80007c4:	b4b0      	push	{r4, r5, r7}
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 80007cc:	4928      	ldr	r1, [pc, #160]	; (8000870 <LCD_Pixel+0xac>)
 80007ce:	7809      	ldrb	r1, [r1, #0]
 80007d0:	2904      	cmp	r1, #4
 80007d2:	d009      	beq.n	80007e8 <LCD_Pixel+0x24>
 80007d4:	2908      	cmp	r1, #8
 80007d6:	d002      	beq.n	80007de <LCD_Pixel+0x1a>
 80007d8:	2902      	cmp	r1, #2
 80007da:	d00d      	beq.n	80007f8 <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80007dc:	e010      	b.n	8000800 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80007de:	f240 118f 	movw	r1, #399	; 0x18f
 80007e2:	1ac9      	subs	r1, r1, r3
 80007e4:	460b      	mov	r3, r1
			break;
 80007e6:	e00b      	b.n	8000800 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80007e8:	4053      	eors	r3, r2
 80007ea:	405a      	eors	r2, r3
 80007ec:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80007ee:	f240 118f 	movw	r1, #399	; 0x18f
 80007f2:	1ac9      	subs	r1, r1, r3
 80007f4:	460b      	mov	r3, r1
			break;
 80007f6:	e003      	b.n	8000800 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80007f8:	4053      	eors	r3, r2
 80007fa:	405a      	eors	r2, r3
 80007fc:	4053      	eors	r3, r2
			break;
 80007fe:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 8000800:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000804:	fb01 f202 	mul.w	r2, r1, r2
 8000808:	441a      	add	r2, r3
 800080a:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 800080c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000810:	4294      	cmp	r4, r2
 8000812:	d829      	bhi.n	8000868 <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <LCD_Pixel+0xb0>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d002      	beq.n	800082a <LCD_Pixel+0x66>
 8000824:	2b02      	cmp	r3, #2
 8000826:	d00a      	beq.n	800083e <LCD_Pixel+0x7a>
 8000828:	e013      	b.n	8000852 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <LCD_Pixel+0xb4>)
 800082c:	5d1a      	ldrb	r2, [r3, r4]
 800082e:	4629      	mov	r1, r5
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <LCD_Pixel+0xb8>)
 8000832:	5c5b      	ldrb	r3, [r3, r1]
 8000834:	4313      	orrs	r3, r2
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <LCD_Pixel+0xb4>)
 800083a:	551a      	strb	r2, [r3, r4]
			break;
 800083c:	e015      	b.n	800086a <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <LCD_Pixel+0xb4>)
 8000840:	5d1a      	ldrb	r2, [r3, r4]
 8000842:	4629      	mov	r1, r5
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <LCD_Pixel+0xb8>)
 8000846:	5c5b      	ldrb	r3, [r3, r1]
 8000848:	4053      	eors	r3, r2
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <LCD_Pixel+0xb4>)
 800084e:	551a      	strb	r2, [r3, r4]
			break;
 8000850:	e00b      	b.n	800086a <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <LCD_Pixel+0xb4>)
 8000854:	5d1a      	ldrb	r2, [r3, r4]
 8000856:	4629      	mov	r1, r5
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <LCD_Pixel+0xbc>)
 800085a:	5c5b      	ldrb	r3, [r3, r1]
 800085c:	4013      	ands	r3, r2
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <LCD_Pixel+0xb4>)
 8000862:	551a      	strb	r2, [r3, r4]
			break;
 8000864:	bf00      	nop
 8000866:	e000      	b.n	800086a <LCD_Pixel+0xa6>
		return;
 8000868:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 800086a:	46bd      	mov	sp, r7
 800086c:	bcb0      	pop	{r4, r5, r7}
 800086e:	4770      	bx	lr
 8000870:	20000000 	.word	0x20000000
 8000874:	20007b10 	.word	0x20007b10
 8000878:	200002a8 	.word	0x200002a8
 800087c:	0801028c 	.word	0x0801028c
 8000880:	08010284 	.word	0x08010284

08000884 <LCD_Circle>:

// Draw circle
// input:
//   Xc, Yc - coordinates of the center of the circle
//   R - circle radius
void LCD_Circle(int16_t Xc, int16_t Yc, uint16_t R) {
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	80bb      	strh	r3, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	807b      	strh	r3, [r7, #2]
	int16_t err = 1 - R;
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	f1c3 0301 	rsb	r3, r3, #1
 800089c:	b29b      	uxth	r3, r3
 800089e:	82fb      	strh	r3, [r7, #22]
	int16_t dx  = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	82bb      	strh	r3, [r7, #20]
	int16_t dy  = -2 * R;
 80008a4:	887b      	ldrh	r3, [r7, #2]
 80008a6:	461a      	mov	r2, r3
 80008a8:	03d2      	lsls	r2, r2, #15
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	827b      	strh	r3, [r7, #18]
	int16_t x   = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	823b      	strh	r3, [r7, #16]
	int16_t y   = R;
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	81fb      	strh	r3, [r7, #14]

	register int16_t sh = scr_height;
 80008ba:	4b8c      	ldr	r3, [pc, #560]	; (8000aec <LCD_Circle+0x268>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	b21e      	sxth	r6, r3
	register int16_t sw = scr_width;
 80008c0:	4b8b      	ldr	r3, [pc, #556]	; (8000af0 <LCD_Circle+0x26c>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	b21d      	sxth	r5, r3
	register int16_t tt;

	// Vertical and horizontal points
	if (Xc + R < sw) LCD_Pixel(Xc + R, Yc);
 80008c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	4413      	add	r3, r2
 80008ce:	462a      	mov	r2, r5
 80008d0:	4293      	cmp	r3, r2
 80008d2:	da0a      	bge.n	80008ea <LCD_Circle+0x66>
 80008d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	4413      	add	r3, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4610      	mov	r0, r2
 80008e6:	f7ff ff6d 	bl	80007c4 <LCD_Pixel>
	if (Xc - R > -1) LCD_Pixel(Xc - R, Yc);
 80008ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008ee:	887b      	ldrh	r3, [r7, #2]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db0a      	blt.n	800090c <LCD_Circle+0x88>
 80008f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000904:	4619      	mov	r1, r3
 8000906:	4610      	mov	r0, r2
 8000908:	f7ff ff5c 	bl	80007c4 <LCD_Pixel>
	if (Yc + R < sh) LCD_Pixel(Xc, Yc + R);
 800090c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	4413      	add	r3, r2
 8000914:	4632      	mov	r2, r6
 8000916:	4293      	cmp	r3, r2
 8000918:	da08      	bge.n	800092c <LCD_Circle+0xa8>
 800091a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800091e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000922:	887b      	ldrh	r3, [r7, #2]
 8000924:	4413      	add	r3, r2
 8000926:	4619      	mov	r1, r3
 8000928:	f7ff ff4c 	bl	80007c4 <LCD_Pixel>
	if (Yc - R > -1) LCD_Pixel(Xc, Yc - R);
 800092c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	f2c0 80ce 	blt.w	8000ad6 <LCD_Circle+0x252>
 800093a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800093e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	4619      	mov	r1, r3
 8000948:	f7ff ff3c 	bl	80007c4 <LCD_Pixel>

	while (x < y) {
 800094c:	e0c3      	b.n	8000ad6 <LCD_Circle+0x252>
		if (err >= 0) {
 800094e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0e      	blt.n	8000974 <LCD_Circle+0xf0>
			dy  += 2;
 8000956:	8a7b      	ldrh	r3, [r7, #18]
 8000958:	3302      	adds	r3, #2
 800095a:	b29b      	uxth	r3, r3
 800095c:	827b      	strh	r3, [r7, #18]
			err += dy;
 800095e:	8afa      	ldrh	r2, [r7, #22]
 8000960:	8a7b      	ldrh	r3, [r7, #18]
 8000962:	4413      	add	r3, r2
 8000964:	b29b      	uxth	r3, r3
 8000966:	82fb      	strh	r3, [r7, #22]
			y--;
 8000968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800096c:	b29b      	uxth	r3, r3
 800096e:	3b01      	subs	r3, #1
 8000970:	b29b      	uxth	r3, r3
 8000972:	81fb      	strh	r3, [r7, #14]
		}
		dx  += 2;
 8000974:	8abb      	ldrh	r3, [r7, #20]
 8000976:	3302      	adds	r3, #2
 8000978:	b29b      	uxth	r3, r3
 800097a:	82bb      	strh	r3, [r7, #20]
		err += dx + 1;
 800097c:	8aba      	ldrh	r2, [r7, #20]
 800097e:	8afb      	ldrh	r3, [r7, #22]
 8000980:	4413      	add	r3, r2
 8000982:	b29b      	uxth	r3, r3
 8000984:	3301      	adds	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	82fb      	strh	r3, [r7, #22]
		x++;
 800098a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800098e:	b29b      	uxth	r3, r3
 8000990:	3301      	adds	r3, #1
 8000992:	b29b      	uxth	r3, r3
 8000994:	823b      	strh	r3, [r7, #16]

		// Draw pixels of eight octants
		tt = Xc + x;
 8000996:	88fa      	ldrh	r2, [r7, #6]
 8000998:	8a3b      	ldrh	r3, [r7, #16]
 800099a:	4413      	add	r3, r2
 800099c:	b29b      	uxth	r3, r3
 800099e:	b21c      	sxth	r4, r3
		if (tt < sw) {
 80009a0:	42ac      	cmp	r4, r5
 80009a2:	da20      	bge.n	80009e6 <LCD_Circle+0x162>
			if (Yc + y < sh) LCD_Pixel(tt, Yc + y);
 80009a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009ac:	4413      	add	r3, r2
 80009ae:	4632      	mov	r2, r6
 80009b0:	4293      	cmp	r3, r2
 80009b2:	da08      	bge.n	80009c6 <LCD_Circle+0x142>
 80009b4:	4620      	mov	r0, r4
 80009b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009be:	4413      	add	r3, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff feff 	bl	80007c4 <LCD_Pixel>
			if (Yc - y > -1) LCD_Pixel(tt, Yc - y);
 80009c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db08      	blt.n	80009e6 <LCD_Circle+0x162>
 80009d4:	4620      	mov	r0, r4
 80009d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	f7ff feef 	bl	80007c4 <LCD_Pixel>
		}
		tt = Xc - x;
 80009e6:	88fa      	ldrh	r2, [r7, #6]
 80009e8:	8a3b      	ldrh	r3, [r7, #16]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	b21c      	sxth	r4, r3
		if (tt > -1) {
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	db20      	blt.n	8000a36 <LCD_Circle+0x1b2>
			if (Yc + y < sh) LCD_Pixel(tt, Yc + y);
 80009f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009fc:	4413      	add	r3, r2
 80009fe:	4632      	mov	r2, r6
 8000a00:	4293      	cmp	r3, r2
 8000a02:	da08      	bge.n	8000a16 <LCD_Circle+0x192>
 8000a04:	4620      	mov	r0, r4
 8000a06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	f7ff fed7 	bl	80007c4 <LCD_Pixel>
			if (Yc - y > -1) LCD_Pixel(tt, Yc - y);
 8000a16:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db08      	blt.n	8000a36 <LCD_Circle+0x1b2>
 8000a24:	4620      	mov	r0, r4
 8000a26:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	4619      	mov	r1, r3
 8000a32:	f7ff fec7 	bl	80007c4 <LCD_Pixel>
		}
		tt = Xc + y;
 8000a36:	88fa      	ldrh	r2, [r7, #6]
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b21c      	sxth	r4, r3
		if (tt < sw) {
 8000a40:	42ac      	cmp	r4, r5
 8000a42:	da20      	bge.n	8000a86 <LCD_Circle+0x202>
			if (Yc + x < sh) LCD_Pixel(tt, Yc + x);
 8000a44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4632      	mov	r2, r6
 8000a50:	4293      	cmp	r3, r2
 8000a52:	da08      	bge.n	8000a66 <LCD_Circle+0x1e2>
 8000a54:	4620      	mov	r0, r4
 8000a56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	f7ff feaf 	bl	80007c4 <LCD_Pixel>
			if (Yc - x > -1) LCD_Pixel(tt, Yc - x);
 8000a66:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db08      	blt.n	8000a86 <LCD_Circle+0x202>
 8000a74:	4620      	mov	r0, r4
 8000a76:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	4619      	mov	r1, r3
 8000a82:	f7ff fe9f 	bl	80007c4 <LCD_Pixel>
		}
		tt = Xc - y;
 8000a86:	88fa      	ldrh	r2, [r7, #6]
 8000a88:	89fb      	ldrh	r3, [r7, #14]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b21c      	sxth	r4, r3
		if (tt > -1) {
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	db20      	blt.n	8000ad6 <LCD_Circle+0x252>
			if (Yc + x < sh) LCD_Pixel(tt, Yc + x);
 8000a94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4632      	mov	r2, r6
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	da08      	bge.n	8000ab6 <LCD_Circle+0x232>
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000aaa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f7ff fe87 	bl	80007c4 <LCD_Pixel>
			if (Yc - x > -1) LCD_Pixel(tt, Yc - x);
 8000ab6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000aba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db08      	blt.n	8000ad6 <LCD_Circle+0x252>
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000aca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f7ff fe77 	bl	80007c4 <LCD_Pixel>
	while (x < y) {
 8000ad6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	f6ff af35 	blt.w	800094e <LCD_Circle+0xca>
		}
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aec:	20007b14 	.word	0x20007b14
 8000af0:	20007b12 	.word	0x20007b12

08000af4 <SMLCD_Enable>:


// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 8000af8:	2201      	movs	r2, #1
 8000afa:	2102      	movs	r1, #2
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <SMLCD_Enable+0x14>)
 8000afe:	f004 fd9b 	bl	8005638 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40022400 	.word	0x40022400

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b098      	sub	sp, #96	; 0x60
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b12:	f003 f8ea 	bl	8003cea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b16:	f000 f969 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1a:	f000 ff9d 	bl	8001a58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1e:	f000 ff59 	bl	80019d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b22:	f000 fa0b 	bl	8000f3c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b26:	f000 fae7 	bl	80010f8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000b2a:	f000 fb61 	bl	80011f0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000b2e:	f000 fbf7 	bl	8001320 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b32:	f000 fc35 	bl	80013a0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000b36:	f000 fc73 	bl	8001420 <MX_I2C3_Init>
  MX_I2C4_Init();
 8000b3a:	f000 fcb1 	bl	80014a0 <MX_I2C4_Init>
  MX_RTC_Init();
 8000b3e:	f000 fcef 	bl	8001520 <MX_RTC_Init>
  MX_SPI4_Init();
 8000b42:	f000 fd13 	bl	800156c <MX_SPI4_Init>
  MX_SPI5_Init();
 8000b46:	f000 fd4f 	bl	80015e8 <MX_SPI5_Init>
  MX_TIM4_Init();
 8000b4a:	f000 fd8b 	bl	8001664 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b4e:	f000 fe01 	bl	8001754 <MX_TIM5_Init>
  MX_UART4_Init();
 8000b52:	f000 fe81 	bl	8001858 <MX_UART4_Init>
  MX_UART5_Init();
 8000b56:	f000 feaf 	bl	80018b8 <MX_UART5_Init>
  MX_UART7_Init();
 8000b5a:	f000 fedd 	bl	8001918 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b5e:	f000 ff0b 	bl	8001978 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8000b62:	f001 f919 	bl	8001d98 <outputGPIOBufInitialization>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8000b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b6a:	4982      	ldr	r1, [pc, #520]	; (8000d74 <main+0x268>)
 8000b6c:	4882      	ldr	r0, [pc, #520]	; (8000d78 <main+0x26c>)
 8000b6e:	f003 fa91 	bl	8004094 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8000b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b76:	4981      	ldr	r1, [pc, #516]	; (8000d7c <main+0x270>)
 8000b78:	4881      	ldr	r0, [pc, #516]	; (8000d80 <main+0x274>)
 8000b7a:	f003 fa8b 	bl	8004094 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8000b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b82:	4980      	ldr	r1, [pc, #512]	; (8000d84 <main+0x278>)
 8000b84:	4880      	ldr	r0, [pc, #512]	; (8000d88 <main+0x27c>)
 8000b86:	f003 fa85 	bl	8004094 <HAL_ADC_Start_DMA>
//    HAL_Delay(1);
//    HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
//    HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Clear, 1, 100);
//    HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
//    HAL_Delay(1);
   int x=1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
//    HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOH,FRONT_LED_CTRL_Pin,GPIO_PIN_SET);
//    HAL_Delay(5000);


  configureLEDDriver();
 8000b8e:	f001 fa8d 	bl	80020ac <configureLEDDriver>
    setErrorLED(4,OFF);
 8000b92:	4b7e      	ldr	r3, [pc, #504]	; (8000d8c <main+0x280>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4619      	mov	r1, r3
 8000b98:	2004      	movs	r0, #4
 8000b9a:	f001 fb13 	bl	80021c4 <setErrorLED>
    HAL_Delay(1000);
 8000b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba2:	f003 f8cf 	bl	8003d44 <HAL_Delay>
    setErrorLED(7,OFF);
 8000ba6:	4b79      	ldr	r3, [pc, #484]	; (8000d8c <main+0x280>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	2007      	movs	r0, #7
 8000bae:	f001 fb09 	bl	80021c4 <setErrorLED>
    setErrorLED(8,ON);
 8000bb2:	4b77      	ldr	r3, [pc, #476]	; (8000d90 <main+0x284>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2008      	movs	r0, #8
 8000bba:	f001 fb03 	bl	80021c4 <setErrorLED>
    HAL_Delay(1000);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc2:	f003 f8bf 	bl	8003d44 <HAL_Delay>
    setErrorLED(8,OFF);
 8000bc6:	4b71      	ldr	r3, [pc, #452]	; (8000d8c <main+0x280>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2008      	movs	r0, #8
 8000bce:	f001 faf9 	bl	80021c4 <setErrorLED>
    setErrorLED(9,ON);
 8000bd2:	4b6f      	ldr	r3, [pc, #444]	; (8000d90 <main+0x284>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	2009      	movs	r0, #9
 8000bda:	f001 faf3 	bl	80021c4 <setErrorLED>
    HAL_Delay(1000);
 8000bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be2:	f003 f8af 	bl	8003d44 <HAL_Delay>
    setErrorLED(8,ON);
 8000be6:	4b6a      	ldr	r3, [pc, #424]	; (8000d90 <main+0x284>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	2008      	movs	r0, #8
 8000bee:	f001 fae9 	bl	80021c4 <setErrorLED>
    setErrorLED(9,ON);
 8000bf2:	4b67      	ldr	r3, [pc, #412]	; (8000d90 <main+0x284>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2009      	movs	r0, #9
 8000bfa:	f001 fae3 	bl	80021c4 <setErrorLED>
    HAL_Delay(1000);
 8000bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c02:	f003 f89f 	bl	8003d44 <HAL_Delay>
    setErrorLED(9,OFF);
 8000c06:	4b61      	ldr	r3, [pc, #388]	; (8000d8c <main+0x280>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2009      	movs	r0, #9
 8000c0e:	f001 fad9 	bl	80021c4 <setErrorLED>

	SMLCD_InitGPIO();
 8000c12:	f7ff fced 	bl	80005f0 <SMLCD_InitGPIO>
	SMLCD_Init();
 8000c16:	f7ff fcfd 	bl	8000614 <SMLCD_Init>
	SMLCD_Enable();
 8000c1a:	f7ff ff6b 	bl	8000af4 <SMLCD_Enable>
	SMLCD_Clear();
 8000c1e:	f7ff fd05 	bl	800062c <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
#if (ORI == 0)
	ori = LCD_ORIENT_NORMAL;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
#elif (ORI == 2)
	ori = LCD_ORIENT_CW;
#else
	ori = LCD_ORIENT_CCW;
#endif
	SMLCD_Orientation(ori);
 8000c28:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fd7b 	bl	8000728 <SMLCD_Orientation>


	// Clear video buffer
	LCD_Clear();
 8000c32:	f7ff fda1 	bl	8000778 <LCD_Clear>


	LCD_PixelMode = LCD_PSET;
 8000c36:	4b57      	ldr	r3, [pc, #348]	; (8000d94 <main+0x288>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
//	LCD_PixelMode = LCD_PRES;
//	LCD_PixelMode = LCD_PINV;

	//SMLCD_Clear();
	SMLCD_Flush();
 8000c3c:	f7ff fd14 	bl	8000668 <SMLCD_Flush>
	if (scr_width > scr_height) {
 8000c40:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <main+0x28c>)
 8000c42:	881a      	ldrh	r2, [r3, #0]
 8000c44:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <main+0x290>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d907      	bls.n	8000c5c <main+0x150>
		j = scr_height / 2;
 8000c4c:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <main+0x290>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	085b      	lsrs	r3, r3, #1
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b52      	ldr	r3, [pc, #328]	; (8000da0 <main+0x294>)
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e006      	b.n	8000c6a <main+0x15e>
	} else {
		j = scr_width / 2;
 8000c5c:	4b4e      	ldr	r3, [pc, #312]	; (8000d98 <main+0x28c>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	085b      	lsrs	r3, r3, #1
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <main+0x294>)
 8000c68:	601a      	str	r2, [r3, #0]
	}
	for (i = 4; i < j; i += 4) {
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	; (8000da4 <main+0x298>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e018      	b.n	8000ca4 <main+0x198>
		LCD_Circle((scr_width / 2) - 1, (scr_height / 2) - 1, i);
 8000c72:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <main+0x28c>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	b218      	sxth	r0, r3
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <main+0x290>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	085b      	lsrs	r3, r3, #1
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b219      	sxth	r1, r3
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <main+0x298>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f7ff fdf5 	bl	8000884 <LCD_Circle>
	for (i = 4; i < j; i += 4) {
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <main+0x298>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <main+0x298>)
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <main+0x298>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <main+0x294>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3e0      	bcc.n	8000c72 <main+0x166>
	}
	SMLCD_Flush();
 8000cb0:	f7ff fcda 	bl	8000668 <SMLCD_Flush>
	HAL_Delay(100);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f003 f845 	bl	8003d44 <HAL_Delay>
  //  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cba:	f009 f87b 	bl	8009db4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8000cbe:	4a3a      	ldr	r2, [pc, #232]	; (8000da8 <main+0x29c>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	483a      	ldr	r0, [pc, #232]	; (8000dac <main+0x2a0>)
 8000cc4:	f009 f8e0 	bl	8009e88 <osThreadNew>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <main+0x2a4>)
 8000ccc:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8000cce:	4a39      	ldr	r2, [pc, #228]	; (8000db4 <main+0x2a8>)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4839      	ldr	r0, [pc, #228]	; (8000db8 <main+0x2ac>)
 8000cd4:	f009 f8d8 	bl	8009e88 <osThreadNew>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <main+0x2b0>)
 8000cdc:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8000cde:	4a38      	ldr	r2, [pc, #224]	; (8000dc0 <main+0x2b4>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4838      	ldr	r0, [pc, #224]	; (8000dc4 <main+0x2b8>)
 8000ce4:	f009 f8d0 	bl	8009e88 <osThreadNew>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <main+0x2bc>)
 8000cec:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8000cee:	4a37      	ldr	r2, [pc, #220]	; (8000dcc <main+0x2c0>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4837      	ldr	r0, [pc, #220]	; (8000dd0 <main+0x2c4>)
 8000cf4:	f009 f8c8 	bl	8009e88 <osThreadNew>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <main+0x2c8>)
 8000cfc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cfe:	f009 f88d 	bl	8009e1c <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f003 f81d 	bl	8003d44 <HAL_Delay>
	  if (!x) {
 8000d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d118      	bne.n	8000d42 <main+0x236>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d16:	4830      	ldr	r0, [pc, #192]	; (8000dd8 <main+0x2cc>)
 8000d18:	f004 fc8e 	bl	8005638 <HAL_GPIO_WritePin>
		  x=1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	65fb      	str	r3, [r7, #92]	; 0x5c

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2110      	movs	r1, #16
 8000d24:	482d      	ldr	r0, [pc, #180]	; (8000ddc <main+0x2d0>)
 8000d26:	f004 fc87 	bl	8005638 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	492c      	ldr	r1, [pc, #176]	; (8000de0 <main+0x2d4>)
 8000d30:	482c      	ldr	r0, [pc, #176]	; (8000de4 <main+0x2d8>)
 8000d32:	f006 fd11 	bl	8007758 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4828      	ldr	r0, [pc, #160]	; (8000ddc <main+0x2d0>)
 8000d3c:	f004 fc7c 	bl	8005638 <HAL_GPIO_WritePin>
 8000d40:	e7df      	b.n	8000d02 <main+0x1f6>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d48:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <main+0x2cc>)
 8000d4a:	f004 fc75 	bl	8005638 <HAL_GPIO_WritePin>
		  x=0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	65fb      	str	r3, [r7, #92]	; 0x5c
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2110      	movs	r1, #16
 8000d56:	4821      	ldr	r0, [pc, #132]	; (8000ddc <main+0x2d0>)
 8000d58:	f004 fc6e 	bl	8005638 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4921      	ldr	r1, [pc, #132]	; (8000de8 <main+0x2dc>)
 8000d62:	4820      	ldr	r0, [pc, #128]	; (8000de4 <main+0x2d8>)
 8000d64:	f006 fcf8 	bl	8007758 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <main+0x2d0>)
 8000d6e:	f004 fc63 	bl	8005638 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000d72:	e7c6      	b.n	8000d02 <main+0x1f6>
 8000d74:	20008268 	.word	0x20008268
 8000d78:	2000a9f8 	.word	0x2000a9f8
 8000d7c:	2000d314 	.word	0x2000d314
 8000d80:	20007ce0 	.word	0x20007ce0
 8000d84:	2000ab80 	.word	0x2000ab80
 8000d88:	2000aa44 	.word	0x2000aa44
 8000d8c:	20003190 	.word	0x20003190
 8000d90:	200000a4 	.word	0x200000a4
 8000d94:	20007b10 	.word	0x20007b10
 8000d98:	20007b12 	.word	0x20007b12
 8000d9c:	20007b14 	.word	0x20007b14
 8000da0:	2000318c 	.word	0x2000318c
 8000da4:	20003188 	.word	0x20003188
 8000da8:	08010384 	.word	0x08010384
 8000dac:	08002c85 	.word	0x08002c85
 8000db0:	2000d310 	.word	0x2000d310
 8000db4:	080103a8 	.word	0x080103a8
 8000db8:	08002ca5 	.word	0x08002ca5
 8000dbc:	2000fae8 	.word	0x2000fae8
 8000dc0:	080103cc 	.word	0x080103cc
 8000dc4:	08002d25 	.word	0x08002d25
 8000dc8:	2000fae4 	.word	0x2000fae4
 8000dcc:	080103f0 	.word	0x080103f0
 8000dd0:	08002db5 	.word	0x08002db5
 8000dd4:	2000aa40 	.word	0x2000aa40
 8000dd8:	40022000 	.word	0x40022000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	200000a6 	.word	0x200000a6
 8000de4:	2000aa8c 	.word	0x2000aa8c
 8000de8:	200000a8 	.word	0x200000a8

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0b8      	sub	sp, #224	; 0xe0
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000df6:	2234      	movs	r2, #52	; 0x34
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00b fd93 	bl	800c926 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2290      	movs	r2, #144	; 0x90
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00b fd84 	bl	800c926 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e1e:	f005 fa79 	bl	8006314 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e22:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <SystemClock_Config+0x144>)
 8000e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e26:	4a42      	ldr	r2, [pc, #264]	; (8000f30 <SystemClock_Config+0x144>)
 8000e28:	f023 0318 	bic.w	r3, r3, #24
 8000e2c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <SystemClock_Config+0x144>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a3f      	ldr	r2, [pc, #252]	; (8000f30 <SystemClock_Config+0x144>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <SystemClock_Config+0x144>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e46:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <SystemClock_Config+0x148>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e4e:	4a39      	ldr	r2, [pc, #228]	; (8000f34 <SystemClock_Config+0x148>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <SystemClock_Config+0x148>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e62:	2305      	movs	r3, #5
 8000e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000e84:	230f      	movs	r3, #15
 8000e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000e8a:	2390      	movs	r3, #144	; 0x90
 8000e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e96:	2305      	movs	r3, #5
 8000e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 fa47 	bl	8006334 <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eac:	f002 f82a 	bl	8002f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ece:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ed2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f005 fcd9 	bl	8006890 <HAL_RCC_ClockConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000ee4:	f002 f80e 	bl	8002f04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <SystemClock_Config+0x14c>)
 8000eea:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 febd 	bl	8006c98 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000f24:	f001 ffee 	bl	8002f04 <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	37e0      	adds	r7, #224	; 0xe0
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000
 8000f38:	0023d620 	.word	0x0023d620

08000f3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f4e:	4b67      	ldr	r3, [pc, #412]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f50:	4a67      	ldr	r2, [pc, #412]	; (80010f0 <MX_ADC1_Init+0x1b4>)
 8000f52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f54:	4b65      	ldr	r3, [pc, #404]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5c:	4b63      	ldr	r3, [pc, #396]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f62:	4b62      	ldr	r3, [pc, #392]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f68:	4b60      	ldr	r3, [pc, #384]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6e:	4b5f      	ldr	r3, [pc, #380]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7c:	4b5b      	ldr	r3, [pc, #364]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f7e:	4a5d      	ldr	r2, [pc, #372]	; (80010f4 <MX_ADC1_Init+0x1b8>)
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8000f88:	4b58      	ldr	r3, [pc, #352]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f8a:	220b      	movs	r2, #11
 8000f8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f96:	4b55      	ldr	r3, [pc, #340]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9c:	4853      	ldr	r0, [pc, #332]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000f9e:	f002 fef3 	bl	8003d88 <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fa8:	f001 ffac 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fac:	2303      	movs	r3, #3
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	484b      	ldr	r0, [pc, #300]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000fbe:	f003 f9bf 	bl	8004340 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fc8:	f001 ff9c 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4844      	ldr	r0, [pc, #272]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000fda:	f003 f9b1 	bl	8004340 <HAL_ADC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fe4:	f001 ff8e 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fec:	2303      	movs	r3, #3
 8000fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	483d      	ldr	r0, [pc, #244]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8000ff6:	f003 f9a3 	bl	8004340 <HAL_ADC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001000:	f001 ff80 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001004:	2306      	movs	r3, #6
 8001006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001008:	2304      	movs	r3, #4
 800100a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4836      	ldr	r0, [pc, #216]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8001012:	f003 f995 	bl	8004340 <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800101c:	f001 ff72 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001020:	2307      	movs	r3, #7
 8001022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001024:	2305      	movs	r3, #5
 8001026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	482f      	ldr	r0, [pc, #188]	; (80010ec <MX_ADC1_Init+0x1b0>)
 800102e:	f003 f987 	bl	8004340 <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001038:	f001 ff64 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800103c:	2308      	movs	r3, #8
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001040:	2306      	movs	r3, #6
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4828      	ldr	r0, [pc, #160]	; (80010ec <MX_ADC1_Init+0x1b0>)
 800104a:	f003 f979 	bl	8004340 <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001054:	f001 ff56 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001058:	2309      	movs	r3, #9
 800105a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800105c:	2307      	movs	r3, #7
 800105e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8001066:	f003 f96b 	bl	8004340 <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001070:	f001 ff48 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001074:	230a      	movs	r3, #10
 8001076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001078:	2308      	movs	r3, #8
 800107a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <MX_ADC1_Init+0x1b0>)
 8001082:	f003 f95d 	bl	8004340 <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800108c:	f001 ff3a 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001090:	230b      	movs	r3, #11
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001094:	2309      	movs	r3, #9
 8001096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <MX_ADC1_Init+0x1b0>)
 800109e:	f003 f94f 	bl	8004340 <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80010a8:	f001 ff2c 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010ac:	230c      	movs	r3, #12
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80010b0:	230a      	movs	r3, #10
 80010b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <MX_ADC1_Init+0x1b0>)
 80010ba:	f003 f941 	bl	8004340 <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80010c4:	f001 ff1e 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010c8:	230d      	movs	r3, #13
 80010ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80010cc:	230b      	movs	r3, #11
 80010ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_ADC1_Init+0x1b0>)
 80010d6:	f003 f933 	bl	8004340 <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80010e0:	f001 ff10 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000a9f8 	.word	0x2000a9f8
 80010f0:	40012000 	.word	0x40012000
 80010f4:	0f000001 	.word	0x0f000001

080010f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <MX_ADC2_Init+0xec>)
 800110c:	4a36      	ldr	r2, [pc, #216]	; (80011e8 <MX_ADC2_Init+0xf0>)
 800110e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <MX_ADC2_Init+0xec>)
 8001112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001116:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <MX_ADC2_Init+0xec>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800111e:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <MX_ADC2_Init+0xec>)
 8001120:	2201      	movs	r2, #1
 8001122:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001124:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <MX_ADC2_Init+0xec>)
 8001126:	2201      	movs	r2, #1
 8001128:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <MX_ADC2_Init+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_ADC2_Init+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_ADC2_Init+0xec>)
 800113a:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <MX_ADC2_Init+0xf4>)
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_ADC2_Init+0xec>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_ADC2_Init+0xec>)
 8001146:	2204      	movs	r2, #4
 8001148:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_ADC2_Init+0xec>)
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_ADC2_Init+0xec>)
 8001154:	2201      	movs	r2, #1
 8001156:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001158:	4822      	ldr	r0, [pc, #136]	; (80011e4 <MX_ADC2_Init+0xec>)
 800115a:	f002 fe15 	bl	8003d88 <HAL_ADC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001164:	f001 fece 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001168:	2300      	movs	r3, #0
 800116a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2301      	movs	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001170:	2307      	movs	r3, #7
 8001172:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	481a      	ldr	r0, [pc, #104]	; (80011e4 <MX_ADC2_Init+0xec>)
 800117a:	f003 f8e1 	bl	8004340 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001184:	f001 febe 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001188:	2301      	movs	r3, #1
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800118c:	2302      	movs	r3, #2
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_ADC2_Init+0xec>)
 8001196:	f003 f8d3 	bl	8004340 <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80011a0:	f001 feb0 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011a4:	230e      	movs	r3, #14
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011a8:	2303      	movs	r3, #3
 80011aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_ADC2_Init+0xec>)
 80011b2:	f003 f8c5 	bl	8004340 <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80011bc:	f001 fea2 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011c0:	230f      	movs	r3, #15
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_ADC2_Init+0xec>)
 80011ce:	f003 f8b7 	bl	8004340 <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80011d8:	f001 fe94 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20007ce0 	.word	0x20007ce0
 80011e8:	40012100 	.word	0x40012100
 80011ec:	0f000001 	.word	0x0f000001

080011f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001202:	4b44      	ldr	r3, [pc, #272]	; (8001314 <MX_ADC3_Init+0x124>)
 8001204:	4a44      	ldr	r2, [pc, #272]	; (8001318 <MX_ADC3_Init+0x128>)
 8001206:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <MX_ADC3_Init+0x124>)
 800120a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800120e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001210:	4b40      	ldr	r3, [pc, #256]	; (8001314 <MX_ADC3_Init+0x124>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <MX_ADC3_Init+0x124>)
 8001218:	2201      	movs	r2, #1
 800121a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800121c:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <MX_ADC3_Init+0x124>)
 800121e:	2201      	movs	r2, #1
 8001220:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <MX_ADC3_Init+0x124>)
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800122a:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <MX_ADC3_Init+0x124>)
 800122c:	2200      	movs	r2, #0
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <MX_ADC3_Init+0x124>)
 8001232:	4a3a      	ldr	r2, [pc, #232]	; (800131c <MX_ADC3_Init+0x12c>)
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <MX_ADC3_Init+0x124>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <MX_ADC3_Init+0x124>)
 800123e:	2206      	movs	r2, #6
 8001240:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <MX_ADC3_Init+0x124>)
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <MX_ADC3_Init+0x124>)
 800124c:	2201      	movs	r2, #1
 800124e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001250:	4830      	ldr	r0, [pc, #192]	; (8001314 <MX_ADC3_Init+0x124>)
 8001252:	f002 fd99 	bl	8003d88 <HAL_ADC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800125c:	f001 fe52 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001260:	2302      	movs	r3, #2
 8001262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001264:	2301      	movs	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001268:	2307      	movs	r3, #7
 800126a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4828      	ldr	r0, [pc, #160]	; (8001314 <MX_ADC3_Init+0x124>)
 8001272:	f003 f865 	bl	8004340 <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800127c:	f001 fe42 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001280:	2304      	movs	r3, #4
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001284:	2302      	movs	r3, #2
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4821      	ldr	r0, [pc, #132]	; (8001314 <MX_ADC3_Init+0x124>)
 800128e:	f003 f857 	bl	8004340 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8001298:	f001 fe34 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800129c:	2305      	movs	r3, #5
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012a0:	2303      	movs	r3, #3
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	481a      	ldr	r0, [pc, #104]	; (8001314 <MX_ADC3_Init+0x124>)
 80012aa:	f003 f849 	bl	8004340 <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80012b4:	f001 fe26 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012b8:	2306      	movs	r3, #6
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012bc:	2304      	movs	r3, #4
 80012be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4813      	ldr	r0, [pc, #76]	; (8001314 <MX_ADC3_Init+0x124>)
 80012c6:	f003 f83b 	bl	8004340 <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80012d0:	f001 fe18 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012d4:	2307      	movs	r3, #7
 80012d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012d8:	2305      	movs	r3, #5
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_ADC3_Init+0x124>)
 80012e2:	f003 f82d 	bl	8004340 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80012ec:	f001 fe0a 	bl	8002f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012f4:	2306      	movs	r3, #6
 80012f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_ADC3_Init+0x124>)
 80012fe:	f003 f81f 	bl	8004340 <HAL_ADC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8001308:	f001 fdfc 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000aa44 	.word	0x2000aa44
 8001318:	40012200 	.word	0x40012200
 800131c:	0f000001 	.word	0x0f000001

08001320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_I2C1_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <MX_I2C1_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_I2C1_Init+0x74>)
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <MX_I2C1_Init+0x7c>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_I2C1_Init+0x74>)
 8001338:	2201      	movs	r2, #1
 800133a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_I2C1_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_I2C1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <MX_I2C1_Init+0x74>)
 800135c:	f004 f9a0 	bl	80056a0 <HAL_I2C_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001366:	f001 fdcd 	bl	8002f04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_I2C1_Init+0x74>)
 800136e:	f004 fdf1 	bl	8005f54 <HAL_I2CEx_ConfigAnalogFilter>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001378:	f001 fdc4 	bl	8002f04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_I2C1_Init+0x74>)
 8001380:	f004 fe33 	bl	8005fea <HAL_I2CEx_ConfigDigitalFilter>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800138a:	f001 fdbb 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20007d28 	.word	0x20007d28
 8001398:	40005400 	.word	0x40005400
 800139c:	007074af 	.word	0x007074af

080013a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_I2C2_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_I2C2_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_I2C2_Init+0x74>)
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <MX_I2C2_Init+0x7c>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_I2C2_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_I2C2_Init+0x74>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_I2C2_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_I2C2_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C2_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C2_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C2_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <MX_I2C2_Init+0x74>)
 80013dc:	f004 f960 	bl	80056a0 <HAL_I2C_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013e6:	f001 fd8d 	bl	8002f04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <MX_I2C2_Init+0x74>)
 80013ee:	f004 fdb1 	bl	8005f54 <HAL_I2CEx_ConfigAnalogFilter>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013f8:	f001 fd84 	bl	8002f04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_I2C2_Init+0x74>)
 8001400:	f004 fdf3 	bl	8005fea <HAL_I2CEx_ConfigDigitalFilter>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800140a:	f001 fd7b 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20008178 	.word	0x20008178
 8001418:	40005800 	.word	0x40005800
 800141c:	007074af 	.word	0x007074af

08001420 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_I2C3_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_I2C3_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x007074AF;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_I2C3_Init+0x74>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <MX_I2C3_Init+0x7c>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_I2C3_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_I2C3_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_I2C3_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_I2C3_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C3_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_I2C3_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C3_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <MX_I2C3_Init+0x74>)
 800145c:	f004 f920 	bl	80056a0 <HAL_I2C_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001466:	f001 fd4d 	bl	8002f04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <MX_I2C3_Init+0x74>)
 800146e:	f004 fd71 	bl	8005f54 <HAL_I2CEx_ConfigAnalogFilter>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001478:	f001 fd44 	bl	8002f04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_I2C3_Init+0x74>)
 8001480:	f004 fdb3 	bl	8005fea <HAL_I2CEx_ConfigDigitalFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800148a:	f001 fd3b 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20007b18 	.word	0x20007b18
 8001498:	40005c00 	.word	0x40005c00
 800149c:	007074af 	.word	0x007074af

080014a0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_I2C4_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <MX_I2C4_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_I2C4_Init+0x74>)
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <MX_I2C4_Init+0x7c>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_I2C4_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_I2C4_Init+0x74>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_I2C4_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_I2C4_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C4_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C4_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C4_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <MX_I2C4_Init+0x74>)
 80014dc:	f004 f8e0 	bl	80056a0 <HAL_I2C_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80014e6:	f001 fd0d 	bl	8002f04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <MX_I2C4_Init+0x74>)
 80014ee:	f004 fd31 	bl	8005f54 <HAL_I2CEx_ConfigAnalogFilter>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f001 fd04 	bl	8002f04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_I2C4_Init+0x74>)
 8001500:	f004 fd73 	bl	8005fea <HAL_I2CEx_ConfigDigitalFilter>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800150a:	f001 fcfb 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20007b64 	.word	0x20007b64
 8001518:	40006000 	.word	0x40006000
 800151c:	007074af 	.word	0x007074af

08001520 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_RTC_Init+0x44>)
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <MX_RTC_Init+0x48>)
 8001528:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_RTC_Init+0x44>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_RTC_Init+0x44>)
 8001532:	227f      	movs	r2, #127	; 0x7f
 8001534:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_RTC_Init+0x44>)
 8001538:	22ff      	movs	r2, #255	; 0xff
 800153a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_RTC_Init+0x44>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_RTC_Init+0x44>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_RTC_Init+0x44>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_RTC_Init+0x44>)
 8001550:	f005 ffc8 	bl	80074e4 <HAL_RTC_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800155a:	f001 fcd3 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000ab60 	.word	0x2000ab60
 8001568:	40002800 	.word	0x40002800

0800156c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_SPI4_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_SPI4_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_SPI4_Init+0x74>)
 8001578:	f44f 7282 	mov.w	r2, #260	; 0x104
 800157c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_SPI4_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI4_Init+0x74>)
 8001586:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800158a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI4_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_SPI4_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI4_Init+0x74>)
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI4_Init+0x74>)
 80015a2:	2208      	movs	r2, #8
 80015a4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI4_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI4_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_SPI4_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI4_Init+0x74>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_SPI4_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI4_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_SPI4_Init+0x74>)
 80015cc:	f006 f832 	bl	8007634 <HAL_SPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f001 fc95 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000aa8c 	.word	0x2000aa8c
 80015e4:	40013400 	.word	0x40013400

080015e8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_SPI5_Init+0x74>)
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <MX_SPI5_Init+0x78>)
 80015f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_SPI5_Init+0x74>)
 80015f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_SPI5_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_SPI5_Init+0x74>)
 8001602:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001606:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_SPI5_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <MX_SPI5_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_SPI5_Init+0x74>)
 8001616:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800161a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_SPI5_Init+0x74>)
 800161e:	2218      	movs	r2, #24
 8001620:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_SPI5_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_SPI5_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_SPI5_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_SPI5_Init+0x74>)
 8001636:	2207      	movs	r2, #7
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <MX_SPI5_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_SPI5_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_SPI5_Init+0x74>)
 8001648:	f005 fff4 	bl	8007634 <HAL_SPI_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001652:	f001 fc57 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20007c30 	.word	0x20007c30
 8001660:	40015000 	.word	0x40015000

08001664 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <MX_TIM4_Init+0xe8>)
 8001698:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <MX_TIM4_Init+0xec>)
 800169a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <MX_TIM4_Init+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <MX_TIM4_Init+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <MX_TIM4_Init+0xe8>)
 80016aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <MX_TIM4_Init+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <MX_TIM4_Init+0xe8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016bc:	4823      	ldr	r0, [pc, #140]	; (800174c <MX_TIM4_Init+0xe8>)
 80016be:	f006 fbed 	bl	8007e9c <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80016c8:	f001 fc1c 	bl	8002f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d6:	4619      	mov	r1, r3
 80016d8:	481c      	ldr	r0, [pc, #112]	; (800174c <MX_TIM4_Init+0xe8>)
 80016da:	f006 fea1 	bl	8008420 <HAL_TIM_ConfigClockSource>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80016e4:	f001 fc0e 	bl	8002f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <MX_TIM4_Init+0xe8>)
 80016ea:	f006 fc2d 	bl	8007f48 <HAL_TIM_PWM_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80016f4:	f001 fc06 	bl	8002f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_TIM4_Init+0xe8>)
 8001708:	f007 fb04 	bl	8008d14 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001712:	f001 fbf7 	bl	8002f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001716:	2360      	movs	r3, #96	; 0x60
 8001718:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM4_Init+0xe8>)
 800172e:	f006 fd5f 	bl	80081f0 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001738:	f001 fbe4 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM4_Init+0xe8>)
 800173e:	f001 ffdd 	bl	80036fc <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3738      	adds	r7, #56	; 0x38
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20007c94 	.word	0x20007c94
 8001750:	40000800 	.word	0x40000800

08001754 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <MX_TIM5_Init+0xfc>)
 8001788:	4a32      	ldr	r2, [pc, #200]	; (8001854 <MX_TIM5_Init+0x100>)
 800178a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <MX_TIM5_Init+0xfc>)
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <MX_TIM5_Init+0xfc>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <MX_TIM5_Init+0xfc>)
 800179a:	f04f 32ff 	mov.w	r2, #4294967295
 800179e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <MX_TIM5_Init+0xfc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <MX_TIM5_Init+0xfc>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017ac:	4828      	ldr	r0, [pc, #160]	; (8001850 <MX_TIM5_Init+0xfc>)
 80017ae:	f006 fb75 	bl	8007e9c <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80017b8:	f001 fba4 	bl	8002f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c6:	4619      	mov	r1, r3
 80017c8:	4821      	ldr	r0, [pc, #132]	; (8001850 <MX_TIM5_Init+0xfc>)
 80017ca:	f006 fe29 	bl	8008420 <HAL_TIM_ConfigClockSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80017d4:	f001 fb96 	bl	8002f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017d8:	481d      	ldr	r0, [pc, #116]	; (8001850 <MX_TIM5_Init+0xfc>)
 80017da:	f006 fbb5 	bl	8007f48 <HAL_TIM_PWM_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80017e4:	f001 fb8e 	bl	8002f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4816      	ldr	r0, [pc, #88]	; (8001850 <MX_TIM5_Init+0xfc>)
 80017f8:	f007 fa8c 	bl	8008d14 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001802:	f001 fb7f 	bl	8002f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001806:	2360      	movs	r3, #96	; 0x60
 8001808:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <MX_TIM5_Init+0xfc>)
 800181e:	f006 fce7 	bl	80081f0 <HAL_TIM_PWM_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001828:	f001 fb6c 	bl	8002f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	2204      	movs	r2, #4
 8001830:	4619      	mov	r1, r3
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <MX_TIM5_Init+0xfc>)
 8001834:	f006 fcdc 	bl	80081f0 <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800183e:	f001 fb61 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <MX_TIM5_Init+0xfc>)
 8001844:	f001 ff5a 	bl	80036fc <HAL_TIM_MspPostInit>

}
 8001848:	bf00      	nop
 800184a:	3738      	adds	r7, #56	; 0x38
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20008228 	.word	0x20008228
 8001854:	40000c00 	.word	0x40000c00

08001858 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_UART4_Init+0x58>)
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MX_UART4_Init+0x5c>)
 8001860:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_UART4_Init+0x58>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_UART4_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_UART4_Init+0x58>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_UART4_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_UART4_Init+0x58>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_UART4_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_UART4_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_UART4_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_UART4_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_UART4_Init+0x58>)
 800189c:	f007 fae6 	bl	8008e6c <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80018a6:	f001 fb2d 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000d290 	.word	0x2000d290
 80018b4:	40004c00 	.word	0x40004c00

080018b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_UART5_Init+0x58>)
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <MX_UART5_Init+0x5c>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_UART5_Init+0x58>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_UART5_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_UART5_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_UART5_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_UART5_Init+0x58>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_UART5_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_UART5_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_UART5_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_UART5_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_UART5_Init+0x58>)
 80018fc:	f007 fab6 	bl	8008e6c <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001906:	f001 fafd 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000a978 	.word	0x2000a978
 8001914:	40005000 	.word	0x40005000

08001918 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_UART7_Init+0x58>)
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <MX_UART7_Init+0x5c>)
 8001920:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <MX_UART7_Init+0x58>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_UART7_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_UART7_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_UART7_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_UART7_Init+0x58>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_UART7_Init+0x58>)
 8001944:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001948:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_UART7_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <MX_UART7_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_UART7_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <MX_UART7_Init+0x58>)
 800195e:	f007 fa85 	bl	8008e6c <HAL_UART_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8001968:	f001 facc 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20007bb0 	.word	0x20007bb0
 8001974:	40007800 	.word	0x40007800

08001978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001986:	2206      	movs	r2, #6
 8001988:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198c:	2202      	movs	r2, #2
 800198e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001998:	2202      	movs	r2, #2
 800199a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019bc:	f004 fb61 	bl	8006082 <HAL_PCD_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019c6:	f001 fa9d 	bl	8002f04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20007d74 	.word	0x20007d74

080019d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <MX_DMA_Init+0x80>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <MX_DMA_Init+0x80>)
 80019e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_DMA_Init+0x80>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_DMA_Init+0x80>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <MX_DMA_Init+0x80>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_DMA_Init+0x80>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	200b      	movs	r0, #11
 8001a10:	f003 f81e 	bl	8004a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a14:	200b      	movs	r0, #11
 8001a16:	f003 f837 	bl	8004a88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	2038      	movs	r0, #56	; 0x38
 8001a20:	f003 f816 	bl	8004a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a24:	2038      	movs	r0, #56	; 0x38
 8001a26:	f003 f82f 	bl	8004a88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	2039      	movs	r0, #57	; 0x39
 8001a30:	f003 f80e 	bl	8004a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a34:	2039      	movs	r0, #57	; 0x39
 8001a36:	f003 f827 	bl	8004a88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	203a      	movs	r0, #58	; 0x3a
 8001a40:	f003 f806 	bl	8004a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a44:	203a      	movs	r0, #58	; 0x3a
 8001a46:	f003 f81f 	bl	8004a88 <HAL_NVIC_EnableIRQ>

}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b090      	sub	sp, #64	; 0x40
 8001a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6e:	4bb0      	ldr	r3, [pc, #704]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4aaf      	ldr	r2, [pc, #700]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001a74:	f043 0310 	orr.w	r3, r3, #16
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4bad      	ldr	r3, [pc, #692]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a86:	4baa      	ldr	r3, [pc, #680]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4aa9      	ldr	r2, [pc, #676]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4ba7      	ldr	r3, [pc, #668]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4ba4      	ldr	r3, [pc, #656]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4aa3      	ldr	r2, [pc, #652]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4ba1      	ldr	r3, [pc, #644]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	4b9e      	ldr	r3, [pc, #632]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a9d      	ldr	r2, [pc, #628]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b9b      	ldr	r3, [pc, #620]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b98      	ldr	r3, [pc, #608]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a97      	ldr	r2, [pc, #604]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b95      	ldr	r3, [pc, #596]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ae6:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a91      	ldr	r2, [pc, #580]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001afe:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a8b      	ldr	r2, [pc, #556]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b16:	4b86      	ldr	r3, [pc, #536]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a85      	ldr	r2, [pc, #532]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a7f      	ldr	r2, [pc, #508]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b7d      	ldr	r3, [pc, #500]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b46:	4b7a      	ldr	r3, [pc, #488]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a79      	ldr	r2, [pc, #484]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b77      	ldr	r3, [pc, #476]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b5e:	4b74      	ldr	r3, [pc, #464]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a73      	ldr	r2, [pc, #460]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b71      	ldr	r3, [pc, #452]	; (8001d30 <MX_GPIO_Init+0x2d8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2110      	movs	r1, #16
 8001b7a:	486e      	ldr	r0, [pc, #440]	; (8001d34 <MX_GPIO_Init+0x2dc>)
 8001b7c:	f003 fd5c 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8001b80:	2200      	movs	r2, #0
 8001b82:	f244 012f 	movw	r1, #16431	; 0x402f
 8001b86:	486c      	ldr	r0, [pc, #432]	; (8001d38 <MX_GPIO_Init+0x2e0>)
 8001b88:	f003 fd56 	bl	8005638 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f241 1150 	movw	r1, #4432	; 0x1150
 8001b92:	486a      	ldr	r0, [pc, #424]	; (8001d3c <MX_GPIO_Init+0x2e4>)
 8001b94:	f003 fd50 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	4868      	ldr	r0, [pc, #416]	; (8001d40 <MX_GPIO_Init+0x2e8>)
 8001b9e:	f003 fd4b 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f243 013c 	movw	r1, #12348	; 0x303c
 8001ba8:	4866      	ldr	r0, [pc, #408]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001baa:	f003 fd45 	bl	8005638 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f241 0104 	movw	r1, #4100	; 0x1004
 8001bb4:	4864      	ldr	r0, [pc, #400]	; (8001d48 <MX_GPIO_Init+0x2f0>)
 8001bb6:	f003 fd3f 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001bc0:	4862      	ldr	r0, [pc, #392]	; (8001d4c <MX_GPIO_Init+0x2f4>)
 8001bc2:	f003 fd39 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	211b      	movs	r1, #27
 8001bca:	4861      	ldr	r0, [pc, #388]	; (8001d50 <MX_GPIO_Init+0x2f8>)
 8001bcc:	f003 fd34 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	4853      	ldr	r0, [pc, #332]	; (8001d34 <MX_GPIO_Init+0x2dc>)
 8001be8:	f003 fb64 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8001bec:	2308      	movs	r3, #8
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	484d      	ldr	r0, [pc, #308]	; (8001d34 <MX_GPIO_Init+0x2dc>)
 8001c00:	f003 fb58 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8001c04:	f244 032f 	movw	r3, #16431	; 0x402f
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4846      	ldr	r0, [pc, #280]	; (8001d38 <MX_GPIO_Init+0x2e0>)
 8001c1e:	f003 fb49 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c32:	4619      	mov	r1, r3
 8001c34:	4845      	ldr	r0, [pc, #276]	; (8001d4c <MX_GPIO_Init+0x2f4>)
 8001c36:	f003 fb3d 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8001c3a:	f241 1350 	movw	r3, #4432	; 0x1150
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c50:	4619      	mov	r1, r3
 8001c52:	483a      	ldr	r0, [pc, #232]	; (8001d3c <MX_GPIO_Init+0x2e4>)
 8001c54:	f003 fb2e 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin;
 8001c58:	23e0      	movs	r3, #224	; 0xe0
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c5c:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <MX_GPIO_Init+0x2fc>)
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4835      	ldr	r0, [pc, #212]	; (8001d40 <MX_GPIO_Init+0x2e8>)
 8001c6c:	f003 fb22 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8001c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c76:	2300      	movs	r3, #0
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c82:	4619      	mov	r1, r3
 8001c84:	4834      	ldr	r0, [pc, #208]	; (8001d58 <MX_GPIO_Init+0x300>)
 8001c86:	f003 fb15 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACK_BTN_Pin */
  GPIO_InitStruct.Pin = BACK_BTN_Pin;
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <MX_GPIO_Init+0x304>)
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BACK_BTN_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4828      	ldr	r0, [pc, #160]	; (8001d40 <MX_GPIO_Init+0x2e8>)
 8001c9e:	f003 fb09 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8001ca2:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482a      	ldr	r0, [pc, #168]	; (8001d60 <MX_GPIO_Init+0x308>)
 8001cb8:	f003 fafc 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481b      	ldr	r0, [pc, #108]	; (8001d40 <MX_GPIO_Init+0x2e8>)
 8001cd4:	f003 faee 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8001cd8:	f243 033c 	movw	r3, #12348	; 0x303c
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4814      	ldr	r0, [pc, #80]	; (8001d44 <MX_GPIO_Init+0x2ec>)
 8001cf2:	f003 fadf 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8001cf6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480e      	ldr	r0, [pc, #56]	; (8001d48 <MX_GPIO_Init+0x2f0>)
 8001d10:	f003 fad0 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8001d14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	e01a      	b.n	8001d64 <MX_GPIO_Init+0x30c>
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	40022800 	.word	0x40022800
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40021c00 	.word	0x40021c00
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40022400 	.word	0x40022400
 8001d54:	10110000 	.word	0x10110000
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	10210000 	.word	0x10210000
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	480a      	ldr	r0, [pc, #40]	; (8001d90 <MX_GPIO_Init+0x338>)
 8001d66:	f003 faa5 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8001d6a:	231b      	movs	r3, #27
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4804      	ldr	r0, [pc, #16]	; (8001d94 <MX_GPIO_Init+0x33c>)
 8001d82:	f003 fa97 	bl	80052b4 <HAL_GPIO_Init>

}
 8001d86:	bf00      	nop
 8001d88:	3740      	adds	r7, #64	; 0x40
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40022400 	.word	0x40022400

08001d98 <outputGPIOBufInitialization>:

/* USER CODE BEGIN 4 */
void outputGPIOBufInitialization(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8001d9c:	220e      	movs	r2, #14
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <outputGPIOBufInitialization+0x14>)
 8001da2:	f00a fdc0 	bl	800c926 <memset>
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000ab50 	.word	0x2000ab50

08001db0 <uartTransmitChar>:
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}

void uartTransmitChar(char *message, int uart){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0b6      	sub	sp, #216	; 0xd8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00b fbcf 	bl	800d564 <siprintf>
 8001dc6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	if (uart == 7){
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b07      	cmp	r3, #7
 8001dce:	d108      	bne.n	8001de2 <uartTransmitChar+0x32>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8001dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f107 010c 	add.w	r1, r7, #12
 8001dda:	2364      	movs	r3, #100	; 0x64
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <uartTransmitChar+0x3c>)
 8001dde:	f007 f893 	bl	8008f08 <HAL_UART_Transmit>
	}
}
 8001de2:	bf00      	nop
 8001de4:	37d8      	adds	r7, #216	; 0xd8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20007bb0 	.word	0x20007bb0

08001df0 <uartTransmitInt>:
void uartTransmitInt(uint16_t *number, int uart){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b098      	sub	sp, #96	; 0x60
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4909      	ldr	r1, [pc, #36]	; (8001e28 <uartTransmitInt+0x38>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00b fbae 	bl	800d564 <siprintf>
 8001e08:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	d107      	bne.n	8001e20 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8001e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f107 010c 	add.w	r1, r7, #12
 8001e18:	2364      	movs	r3, #100	; 0x64
 8001e1a:	4804      	ldr	r0, [pc, #16]	; (8001e2c <uartTransmitInt+0x3c>)
 8001e1c:	f007 f874 	bl	8008f08 <HAL_UART_Transmit>
	}

}
 8001e20:	bf00      	nop
 8001e22:	3760      	adds	r7, #96	; 0x60
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	0801024c 	.word	0x0801024c
 8001e2c:	20007bb0 	.word	0x20007bb0

08001e30 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60ba      	str	r2, [r7, #8]
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8001e42:	4a4f      	ldr	r2, [pc, #316]	; (8001f80 <readI2CRegister+0x150>)
 8001e44:	7bbb      	ldrb	r3, [r7, #14]
 8001e46:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10c      	bne.n	8001e68 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	b299      	uxth	r1, r3
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	4a49      	ldr	r2, [pc, #292]	; (8001f80 <readI2CRegister+0x150>)
 8001e5c:	4849      	ldr	r0, [pc, #292]	; (8001f84 <readI2CRegister+0x154>)
 8001e5e:	f003 fcaf 	bl	80057c0 <HAL_I2C_Master_Transmit>
 8001e62:	4603      	mov	r3, r0
 8001e64:	75fb      	strb	r3, [r7, #23]
 8001e66:	e02e      	b.n	8001ec6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d10c      	bne.n	8001e88 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	b299      	uxth	r1, r3
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	4a41      	ldr	r2, [pc, #260]	; (8001f80 <readI2CRegister+0x150>)
 8001e7c:	4842      	ldr	r0, [pc, #264]	; (8001f88 <readI2CRegister+0x158>)
 8001e7e:	f003 fc9f 	bl	80057c0 <HAL_I2C_Master_Transmit>
 8001e82:	4603      	mov	r3, r0
 8001e84:	75fb      	strb	r3, [r7, #23]
 8001e86:	e01e      	b.n	8001ec6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d10c      	bne.n	8001ea8 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	b299      	uxth	r1, r3
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <readI2CRegister+0x150>)
 8001e9c:	483b      	ldr	r0, [pc, #236]	; (8001f8c <readI2CRegister+0x15c>)
 8001e9e:	f003 fc8f 	bl	80057c0 <HAL_I2C_Master_Transmit>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	75fb      	strb	r3, [r7, #23]
 8001ea6:	e00e      	b.n	8001ec6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d10b      	bne.n	8001ec6 <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <readI2CRegister+0x150>)
 8001ebc:	4834      	ldr	r0, [pc, #208]	; (8001f90 <readI2CRegister+0x160>)
 8001ebe:	f003 fc7f 	bl	80057c0 <HAL_I2C_Master_Transmit>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <readI2CRegister+0xa0>
	          return 0xfe;
 8001ecc:	23fe      	movs	r3, #254	; 0xfe
 8001ece:	e052      	b.n	8001f76 <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10e      	bne.n	8001ef4 <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <readI2CRegister+0x150>)
 8001ee8:	4826      	ldr	r0, [pc, #152]	; (8001f84 <readI2CRegister+0x154>)
 8001eea:	f003 fd5d 	bl	80059a8 <HAL_I2C_Master_Receive>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
 8001ef2:	e034      	b.n	8001f5e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d10e      	bne.n	8001f18 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	b299      	uxth	r1, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <readI2CRegister+0x150>)
 8001f0c:	481e      	ldr	r0, [pc, #120]	; (8001f88 <readI2CRegister+0x158>)
 8001f0e:	f003 fd4b 	bl	80059a8 <HAL_I2C_Master_Receive>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75fb      	strb	r3, [r7, #23]
 8001f16:	e022      	b.n	8001f5e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d10e      	bne.n	8001f3c <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	b299      	uxth	r1, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <readI2CRegister+0x150>)
 8001f30:	4816      	ldr	r0, [pc, #88]	; (8001f8c <readI2CRegister+0x15c>)
 8001f32:	f003 fd39 	bl	80059a8 <HAL_I2C_Master_Receive>
 8001f36:	4603      	mov	r3, r0
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e010      	b.n	8001f5e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d10d      	bne.n	8001f5e <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	b299      	uxth	r1, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <readI2CRegister+0x150>)
 8001f54:	480e      	ldr	r0, [pc, #56]	; (8001f90 <readI2CRegister+0x160>)
 8001f56:	f003 fd27 	bl	80059a8 <HAL_I2C_Master_Receive>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <readI2CRegister+0x138>
		          return 0xfe;
 8001f64:	23fe      	movs	r3, #254	; 0xfe
 8001f66:	e006      	b.n	8001f76 <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <readI2CRegister+0x150>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2107      	movs	r1, #7
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff3e 	bl	8001df0 <uartTransmitInt>
			  return buf;
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <readI2CRegister+0x150>)
		  }
}
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20003194 	.word	0x20003194
 8001f84:	20007d28 	.word	0x20007d28
 8001f88:	20008178 	.word	0x20008178
 8001f8c:	20007b18 	.word	0x20007b18
 8001f90:	20007b64 	.word	0x20007b64

08001f94 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	; 0x38
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb2:	e00d      	b.n	8001fd0 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	441a      	add	r2, r3
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	3301      	adds	r3, #1
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d9ee      	bls.n	8001fb4 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d112      	bne.n	8002002 <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b298      	uxth	r0, r3
 8001fe8:	f107 0214 	add.w	r2, r7, #20
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4829      	ldr	r0, [pc, #164]	; (800209c <writeI2CRegister+0x108>)
 8001ff6:	f003 fbe3 	bl	80057c0 <HAL_I2C_Master_Transmit>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002000:	e040      	b.n	8002084 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002004:	2b02      	cmp	r3, #2
 8002006:	d112      	bne.n	800202e <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	b299      	uxth	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	b29b      	uxth	r3, r3
 8002010:	3301      	adds	r3, #1
 8002012:	b298      	uxth	r0, r3
 8002014:	f107 0214 	add.w	r2, r7, #20
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4603      	mov	r3, r0
 8002020:	481f      	ldr	r0, [pc, #124]	; (80020a0 <writeI2CRegister+0x10c>)
 8002022:	f003 fbcd 	bl	80057c0 <HAL_I2C_Master_Transmit>
 8002026:	4603      	mov	r3, r0
 8002028:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800202c:	e02a      	b.n	8002084 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 800202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002030:	2b03      	cmp	r3, #3
 8002032:	d112      	bne.n	800205a <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	b299      	uxth	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	b29b      	uxth	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	b298      	uxth	r0, r3
 8002040:	f107 0214 	add.w	r2, r7, #20
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	4603      	mov	r3, r0
 800204c:	4815      	ldr	r0, [pc, #84]	; (80020a4 <writeI2CRegister+0x110>)
 800204e:	f003 fbb7 	bl	80057c0 <HAL_I2C_Master_Transmit>
 8002052:	4603      	mov	r3, r0
 8002054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002058:	e014      	b.n	8002084 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	2b04      	cmp	r3, #4
 800205e:	d111      	bne.n	8002084 <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	b299      	uxth	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	b29b      	uxth	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	b298      	uxth	r0, r3
 800206c:	f107 0214 	add.w	r2, r7, #20
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4603      	mov	r3, r0
 8002078:	480b      	ldr	r0, [pc, #44]	; (80020a8 <writeI2CRegister+0x114>)
 800207a:	f003 fba1 	bl	80057c0 <HAL_I2C_Master_Transmit>
 800207e:	4603      	mov	r3, r0
 8002080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 8002084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <writeI2CRegister+0xfc>
	  	          return 0;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8002090:	2301      	movs	r3, #1
	  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20007d28 	.word	0x20007d28
 80020a0:	20008178 	.word	0x20008178
 80020a4:	20007b18 	.word	0x20007b18
 80020a8:	20007b64 	.word	0x20007b64

080020ac <configureLEDDriver>:
void configureLEDDriver(){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 80020b2:	2301      	movs	r3, #1
 80020b4:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <configureLEDDriver+0x110>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 80020bc:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <configureLEDDriver+0x114>)
 80020be:	7818      	ldrb	r0, [r3, #0]
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <configureLEDDriver+0x114>)
 80020c2:	7999      	ldrb	r1, [r3, #6]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <configureLEDDriver+0x114>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2301      	movs	r3, #1
 80020d0:	f7ff ff60 	bl	8001f94 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <configureLEDDriver+0x114>)
 80020d6:	7818      	ldrb	r0, [r3, #0]
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <configureLEDDriver+0x114>)
 80020da:	7999      	ldrb	r1, [r3, #6]
 80020dc:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <configureLEDDriver+0x114>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f7ff fea5 	bl	8001e30 <readI2CRegister>
 80020e6:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2107      	movs	r1, #7
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fe7e 	bl	8001df0 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <configureLEDDriver+0x114>)
 80020f6:	7818      	ldrb	r0, [r3, #0]
 80020f8:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <configureLEDDriver+0x114>)
 80020fa:	7859      	ldrb	r1, [r3, #1]
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <configureLEDDriver+0x114>)
 80020fe:	79db      	ldrb	r3, [r3, #7]
 8002100:	461a      	mov	r2, r3
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <configureLEDDriver+0x114>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	f7ff ff43 	bl	8001f94 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <configureLEDDriver+0x114>)
 8002110:	7818      	ldrb	r0, [r3, #0]
 8002112:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <configureLEDDriver+0x114>)
 8002114:	7899      	ldrb	r1, [r3, #2]
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <configureLEDDriver+0x114>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2301      	movs	r3, #1
 800211e:	4a27      	ldr	r2, [pc, #156]	; (80021bc <configureLEDDriver+0x110>)
 8002120:	f7ff ff38 	bl	8001f94 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <configureLEDDriver+0x114>)
 8002126:	7818      	ldrb	r0, [r3, #0]
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <configureLEDDriver+0x114>)
 800212a:	78d9      	ldrb	r1, [r3, #3]
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <configureLEDDriver+0x114>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	4a21      	ldr	r2, [pc, #132]	; (80021bc <configureLEDDriver+0x110>)
 8002136:	f7ff ff2d 	bl	8001f94 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <configureLEDDriver+0x114>)
 800213c:	7818      	ldrb	r0, [r3, #0]
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <configureLEDDriver+0x114>)
 8002140:	7919      	ldrb	r1, [r3, #4]
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <configureLEDDriver+0x114>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2301      	movs	r3, #1
 800214a:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <configureLEDDriver+0x110>)
 800214c:	f7ff ff22 	bl	8001f94 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <configureLEDDriver+0x114>)
 8002152:	7818      	ldrb	r0, [r3, #0]
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <configureLEDDriver+0x114>)
 8002156:	7959      	ldrb	r1, [r3, #5]
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <configureLEDDriver+0x114>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2301      	movs	r3, #1
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <configureLEDDriver+0x110>)
 8002162:	f7ff ff17 	bl	8001f94 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <configureLEDDriver+0x114>)
 8002168:	7818      	ldrb	r0, [r3, #0]
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <configureLEDDriver+0x114>)
 800216c:	7a19      	ldrb	r1, [r3, #8]
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <configureLEDDriver+0x114>)
 8002170:	7adb      	ldrb	r3, [r3, #11]
 8002172:	461a      	mov	r2, r3
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <configureLEDDriver+0x114>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	f7ff ff0a 	bl	8001f94 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <configureLEDDriver+0x114>)
 8002182:	7818      	ldrb	r0, [r3, #0]
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <configureLEDDriver+0x114>)
 8002186:	7a59      	ldrb	r1, [r3, #9]
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <configureLEDDriver+0x114>)
 800218a:	7adb      	ldrb	r3, [r3, #11]
 800218c:	461a      	mov	r2, r3
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <configureLEDDriver+0x114>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2301      	movs	r3, #1
 8002196:	f7ff fefd 	bl	8001f94 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <configureLEDDriver+0x114>)
 800219c:	7818      	ldrb	r0, [r3, #0]
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <configureLEDDriver+0x114>)
 80021a0:	7a99      	ldrb	r1, [r3, #10]
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <configureLEDDriver+0x114>)
 80021a4:	7adb      	ldrb	r3, [r3, #11]
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <configureLEDDriver+0x114>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	f7ff fef0 	bl	8001f94 <writeI2CRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200031a8 	.word	0x200031a8
 80021c0:	20000004 	.word	0x20000004

080021c4 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80021d0:	2301      	movs	r3, #1
 80021d2:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80021d4:	2304      	movs	r3, #4
 80021d6:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80021d8:	2310      	movs	r3, #16
 80021da:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80021dc:	2340      	movs	r3, #64	; 0x40
 80021de:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80021e0:	2302      	movs	r3, #2
 80021e2:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 80021e4:	2308      	movs	r3, #8
 80021e6:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 80021e8:	2320      	movs	r3, #32
 80021ea:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	dc05      	bgt.n	8002202 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 80021f6:	4b80      	ldr	r3, [pc, #512]	; (80023f8 <setErrorLED+0x234>)
 80021f8:	789b      	ldrb	r3, [r3, #2]
 80021fa:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	e019      	b.n	8002236 <setErrorLED+0x72>
	}
	else if(led <8){
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b07      	cmp	r3, #7
 8002206:	dc06      	bgt.n	8002216 <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8002208:	4b7b      	ldr	r3, [pc, #492]	; (80023f8 <setErrorLED+0x234>)
 800220a:	78db      	ldrb	r3, [r3, #3]
 800220c:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3b04      	subs	r3, #4
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	e00f      	b.n	8002236 <setErrorLED+0x72>
	}
	else if(led <12){
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0b      	cmp	r3, #11
 800221a:	dc06      	bgt.n	800222a <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 800221c:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <setErrorLED+0x234>)
 800221e:	791b      	ldrb	r3, [r3, #4]
 8002220:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3b08      	subs	r3, #8
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	e005      	b.n	8002236 <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 800222a:	4b73      	ldr	r3, [pc, #460]	; (80023f8 <setErrorLED+0x234>)
 800222c:	795b      	ldrb	r3, [r3, #5]
 800222e:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b0c      	subs	r3, #12
 8002234:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8002236:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <setErrorLED+0x234>)
 8002238:	7818      	ldrb	r0, [r3, #0]
 800223a:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <setErrorLED+0x234>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	7ef9      	ldrb	r1, [r7, #27]
 8002240:	2201      	movs	r2, #1
 8002242:	f7ff fdf5 	bl	8001e30 <readI2CRegister>
 8002246:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b03      	cmp	r3, #3
 800224c:	f200 80bd 	bhi.w	80023ca <setErrorLED+0x206>
 8002250:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <setErrorLED+0x94>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	08002269 	.word	0x08002269
 800225c:	080022cf 	.word	0x080022cf
 8002260:	08002335 	.word	0x08002335
 8002264:	08002365 	.word	0x08002365

	case 0:
		if(change){
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d012      	beq.n	8002294 <setErrorLED+0xd0>
			if(led == 8){
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d107      	bne.n	8002284 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	7dbb      	ldrb	r3, [r7, #22]
 800227a:	4313      	orrs	r3, r2
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8002282:	e0a2      	b.n	80023ca <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	7ebb      	ldrb	r3, [r7, #26]
 800228a:	4313      	orrs	r3, r2
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	701a      	strb	r2, [r3, #0]
		break;
 8002292:	e09a      	b.n	80023ca <setErrorLED+0x206>
			if(led == 8){
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d10c      	bne.n	80022b4 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b25a      	sxtb	r2, r3
 80022a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	701a      	strb	r2, [r3, #0]
		break;
 80022b2:	e08a      	b.n	80023ca <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b25a      	sxtb	r2, r3
 80022ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80022be:	43db      	mvns	r3, r3
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	4013      	ands	r3, r2
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	701a      	strb	r2, [r3, #0]
		break;
 80022cc:	e07d      	b.n	80023ca <setErrorLED+0x206>

	case 1:
		if(change){
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <setErrorLED+0x136>
			if(led == 9){
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b09      	cmp	r3, #9
 80022d8:	d107      	bne.n	80022ea <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	7d7b      	ldrb	r3, [r7, #21]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 80022e8:	e06f      	b.n	80023ca <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	7e7b      	ldrb	r3, [r7, #25]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	701a      	strb	r2, [r3, #0]
		break;
 80022f8:	e067      	b.n	80023ca <setErrorLED+0x206>
			if(led == 9){
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	d10c      	bne.n	800231a <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b25a      	sxtb	r2, r3
 8002306:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800230a:	43db      	mvns	r3, r3
 800230c:	b25b      	sxtb	r3, r3
 800230e:	4013      	ands	r3, r2
 8002310:	b25b      	sxtb	r3, r3
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	701a      	strb	r2, [r3, #0]
		break;
 8002318:	e057      	b.n	80023ca <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b25a      	sxtb	r2, r3
 8002320:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002324:	43db      	mvns	r3, r3
 8002326:	b25b      	sxtb	r3, r3
 8002328:	4013      	ands	r3, r2
 800232a:	b25b      	sxtb	r3, r3
 800232c:	b2da      	uxtb	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	701a      	strb	r2, [r3, #0]
		break;
 8002332:	e04a      	b.n	80023ca <setErrorLED+0x206>

	case 2:
		if(change){
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	7e3b      	ldrb	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8002348:	e03f      	b.n	80023ca <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b25a      	sxtb	r2, r3
 8002350:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	b25b      	sxtb	r3, r3
 8002358:	4013      	ands	r3, r2
 800235a:	b25b      	sxtb	r3, r3
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	701a      	strb	r2, [r3, #0]
		break;
 8002362:	e032      	b.n	80023ca <setErrorLED+0x206>

	case 3:
		if(change){
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d012      	beq.n	8002390 <setErrorLED+0x1cc>
			if(led == 7){
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b07      	cmp	r3, #7
 800236e:	d107      	bne.n	8002380 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	4313      	orrs	r3, r2
 8002378:	b2da      	uxtb	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 800237e:	e023      	b.n	80023c8 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	4313      	orrs	r3, r2
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	701a      	strb	r2, [r3, #0]
		break;
 800238e:	e01b      	b.n	80023c8 <setErrorLED+0x204>
			if(led == 7){
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b07      	cmp	r3, #7
 8002394:	d10c      	bne.n	80023b0 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b25a      	sxtb	r2, r3
 800239c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	4013      	ands	r3, r2
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	701a      	strb	r2, [r3, #0]
		break;
 80023ae:	e00b      	b.n	80023c8 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b25a      	sxtb	r2, r3
 80023b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	4013      	ands	r3, r2
 80023c0:	b25b      	sxtb	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]
		break;
 80023c8:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <setErrorLED+0x234>)
 80023cc:	7818      	ldrb	r0, [r3, #0]
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <setErrorLED+0x234>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	7ef9      	ldrb	r1, [r7, #27]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2301      	movs	r3, #1
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	f7ff fddb 	bl	8001f94 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <setErrorLED+0x234>)
 80023e0:	7818      	ldrb	r0, [r3, #0]
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <setErrorLED+0x234>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	7ef9      	ldrb	r1, [r7, #27]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f7ff fd21 	bl	8001e30 <readI2CRegister>
 80023ee:	60f8      	str	r0, [r7, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000004 	.word	0x20000004

080023fc <getADCValues>:


float* getADCValues(){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b09e      	sub	sp, #120	; 0x78
 8002400:	af00      	add	r7, sp, #0
	static float adcValues[20];
	int avgADCCounterValues[20];
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2250      	movs	r2, #80	; 0x50
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f00a fa8c 	bl	800c926 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	int adc1DataRepeat=22;
 800240e:	2316      	movs	r3, #22
 8002410:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8002412:	2308      	movs	r3, #8
 8002414:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8002416:	230c      	movs	r3, #12
 8002418:	663b      	str	r3, [r7, #96]	; 0x60
	for(adcChannelCounter=0;adcChannelCounter<20;adcChannelCounter++){
 800241a:	2300      	movs	r3, #0
 800241c:	677b      	str	r3, [r7, #116]	; 0x74
 800241e:	e171      	b.n	8002704 <getADCValues+0x308>
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8002420:	4b97      	ldr	r3, [pc, #604]	; (8002680 <getADCValues+0x284>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002426:	429a      	cmp	r2, r3
 8002428:	d009      	beq.n	800243e <getADCValues+0x42>
 800242a:	4b95      	ldr	r3, [pc, #596]	; (8002680 <getADCValues+0x284>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002430:	429a      	cmp	r2, r3
 8002432:	d004      	beq.n	800243e <getADCValues+0x42>
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <getADCValues+0x284>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800243a:	429a      	cmp	r2, r3
 800243c:	d102      	bne.n	8002444 <getADCValues+0x48>
			adcIndex=0;
 800243e:	2300      	movs	r3, #0
 8002440:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002442:	e071      	b.n	8002528 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8002444:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <getADCValues+0x284>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800244a:	429a      	cmp	r2, r3
 800244c:	d009      	beq.n	8002462 <getADCValues+0x66>
 800244e:	4b8c      	ldr	r3, [pc, #560]	; (8002680 <getADCValues+0x284>)
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002454:	429a      	cmp	r2, r3
 8002456:	d004      	beq.n	8002462 <getADCValues+0x66>
 8002458:	4b89      	ldr	r3, [pc, #548]	; (8002680 <getADCValues+0x284>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800245e:	429a      	cmp	r2, r3
 8002460:	d102      	bne.n	8002468 <getADCValues+0x6c>
			adcIndex=2;
 8002462:	2302      	movs	r3, #2
 8002464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002466:	e05f      	b.n	8002528 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8002468:	4b85      	ldr	r3, [pc, #532]	; (8002680 <getADCValues+0x284>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800246e:	429a      	cmp	r2, r3
 8002470:	d009      	beq.n	8002486 <getADCValues+0x8a>
 8002472:	4b83      	ldr	r3, [pc, #524]	; (8002680 <getADCValues+0x284>)
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002478:	429a      	cmp	r2, r3
 800247a:	d004      	beq.n	8002486 <getADCValues+0x8a>
 800247c:	4b80      	ldr	r3, [pc, #512]	; (8002680 <getADCValues+0x284>)
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002482:	429a      	cmp	r2, r3
 8002484:	d102      	bne.n	800248c <getADCValues+0x90>
			adcIndex=4;
 8002486:	2304      	movs	r3, #4
 8002488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800248a:	e04d      	b.n	8002528 <getADCValues+0x12c>
		}
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 800248c:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <getADCValues+0x284>)
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002492:	429a      	cmp	r2, r3
 8002494:	d009      	beq.n	80024aa <getADCValues+0xae>
 8002496:	4b7a      	ldr	r3, [pc, #488]	; (8002680 <getADCValues+0x284>)
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800249c:	429a      	cmp	r2, r3
 800249e:	d004      	beq.n	80024aa <getADCValues+0xae>
 80024a0:	4b77      	ldr	r3, [pc, #476]	; (8002680 <getADCValues+0x284>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d102      	bne.n	80024b0 <getADCValues+0xb4>
			adcIndex=6;
 80024aa:	2306      	movs	r3, #6
 80024ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024ae:	e03b      	b.n	8002528 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 80024b0:	4b73      	ldr	r3, [pc, #460]	; (8002680 <getADCValues+0x284>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d004      	beq.n	80024c4 <getADCValues+0xc8>
 80024ba:	4b71      	ldr	r3, [pc, #452]	; (8002680 <getADCValues+0x284>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d102      	bne.n	80024ca <getADCValues+0xce>
			adcIndex=8;
 80024c4:	2308      	movs	r3, #8
 80024c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024c8:	e02e      	b.n	8002528 <getADCValues+0x12c>
		}
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <getADCValues+0x284>)
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d004      	beq.n	80024de <getADCValues+0xe2>
 80024d4:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <getADCValues+0x284>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024da:	429a      	cmp	r2, r3
 80024dc:	d102      	bne.n	80024e4 <getADCValues+0xe8>
			adcIndex=10;
 80024de:	230a      	movs	r3, #10
 80024e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024e2:	e021      	b.n	8002528 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc9){
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <getADCValues+0x284>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d102      	bne.n	80024f4 <getADCValues+0xf8>
			adcIndex=12;
 80024ee:	230c      	movs	r3, #12
 80024f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024f2:	e019      	b.n	8002528 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc10){
 80024f4:	4b62      	ldr	r3, [pc, #392]	; (8002680 <getADCValues+0x284>)
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d102      	bne.n	8002504 <getADCValues+0x108>
			adcIndex=14;
 80024fe:	230e      	movs	r3, #14
 8002500:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002502:	e011      	b.n	8002528 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc11){
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <getADCValues+0x284>)
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800250a:	429a      	cmp	r2, r3
 800250c:	d102      	bne.n	8002514 <getADCValues+0x118>
			adcIndex=16;
 800250e:	2310      	movs	r3, #16
 8002510:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002512:	e009      	b.n	8002528 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc12){
 8002514:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <getADCValues+0x284>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800251a:	429a      	cmp	r2, r3
 800251c:	d102      	bne.n	8002524 <getADCValues+0x128>
			adcIndex=18;
 800251e:	2312      	movs	r3, #18
 8002520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002522:	e001      	b.n	8002528 <getADCValues+0x12c>
		}
		else{
			adcIndex=20;
 8002524:	2314      	movs	r3, #20
 8002526:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8002528:	4b55      	ldr	r3, [pc, #340]	; (8002680 <getADCValues+0x284>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800252e:	429a      	cmp	r2, r3
 8002530:	d00e      	beq.n	8002550 <getADCValues+0x154>
 8002532:	4b53      	ldr	r3, [pc, #332]	; (8002680 <getADCValues+0x284>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002538:	429a      	cmp	r2, r3
 800253a:	d009      	beq.n	8002550 <getADCValues+0x154>
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <getADCValues+0x284>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002542:	429a      	cmp	r2, r3
 8002544:	d004      	beq.n	8002550 <getADCValues+0x154>
 8002546:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <getADCValues+0x284>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800254c:	429a      	cmp	r2, r3
 800254e:	d13a      	bne.n	80025c6 <getADCValues+0x1ca>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8002550:	2300      	movs	r3, #0
 8002552:	673b      	str	r3, [r7, #112]	; 0x70
 8002554:	e033      	b.n	80025be <getADCValues+0x1c2>
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 8002556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002558:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002560:	4413      	add	r3, r2
 8002562:	657b      	str	r3, [r7, #84]	; 0x54
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8002564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800256c:	4413      	add	r3, r2
 800256e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002572:	4944      	ldr	r1, [pc, #272]	; (8002684 <getADCValues+0x288>)
 8002574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002576:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800257a:	441a      	add	r2, r3
 800257c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002584:	440b      	add	r3, r1
 8002586:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 800258a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800258c:	2b13      	cmp	r3, #19
 800258e:	d113      	bne.n	80025b8 <getADCValues+0x1bc>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8002590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002598:	4413      	add	r3, r2
 800259a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800259e:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <getADCValues+0x28c>)
 80025a0:	fb82 1203 	smull	r1, r2, r2, r3
 80025a4:	10d2      	asrs	r2, r2, #3
 80025a6:	17db      	asrs	r3, r3, #31
 80025a8:	1ad2      	subs	r2, r2, r3
 80025aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80025b2:	440b      	add	r3, r1
 80025b4:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80025b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ba:	3301      	adds	r3, #1
 80025bc:	673b      	str	r3, [r7, #112]	; 0x70
 80025be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c0:	2b13      	cmp	r3, #19
 80025c2:	ddc8      	ble.n	8002556 <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80025c4:	e09b      	b.n	80026fe <getADCValues+0x302>
				}
			}
		}
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <getADCValues+0x284>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d018      	beq.n	8002602 <getADCValues+0x206>
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <getADCValues+0x284>)
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d013      	beq.n	8002602 <getADCValues+0x206>
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <getADCValues+0x284>)
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d00e      	beq.n	8002602 <getADCValues+0x206>
 80025e4:	4b26      	ldr	r3, [pc, #152]	; (8002680 <getADCValues+0x284>)
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d009      	beq.n	8002602 <getADCValues+0x206>
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <getADCValues+0x284>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d004      	beq.n	8002602 <getADCValues+0x206>
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <getADCValues+0x284>)
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025fe:	429a      	cmp	r2, r3
 8002600:	d13a      	bne.n	8002678 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8002602:	2300      	movs	r3, #0
 8002604:	673b      	str	r3, [r7, #112]	; 0x70
 8002606:	e033      	b.n	8002670 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8002608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800260a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002612:	4413      	add	r3, r2
 8002614:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8002616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800261e:	4413      	add	r3, r2
 8002620:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002624:	4919      	ldr	r1, [pc, #100]	; (800268c <getADCValues+0x290>)
 8002626:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002628:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800262c:	441a      	add	r2, r3
 800262e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002636:	440b      	add	r3, r1
 8002638:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 800263c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263e:	2b13      	cmp	r3, #19
 8002640:	d113      	bne.n	800266a <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8002642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800264a:	4413      	add	r3, r2
 800264c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <getADCValues+0x28c>)
 8002652:	fb82 1203 	smull	r1, r2, r2, r3
 8002656:	10d2      	asrs	r2, r2, #3
 8002658:	17db      	asrs	r3, r3, #31
 800265a:	1ad2      	subs	r2, r2, r3
 800265c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002664:	440b      	add	r3, r1
 8002666:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800266a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266c:	3301      	adds	r3, #1
 800266e:	673b      	str	r3, [r7, #112]	; 0x70
 8002670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002672:	2b13      	cmp	r3, #19
 8002674:	ddc8      	ble.n	8002608 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8002676:	e042      	b.n	80026fe <getADCValues+0x302>
				}
			}
		}
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8002678:	2300      	movs	r3, #0
 800267a:	673b      	str	r3, [r7, #112]	; 0x70
 800267c:	e03c      	b.n	80026f8 <getADCValues+0x2fc>
 800267e:	bf00      	nop
 8002680:	20000044 	.word	0x20000044
 8002684:	2000d314 	.word	0x2000d314
 8002688:	66666667 	.word	0x66666667
 800268c:	2000ab80 	.word	0x2000ab80
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8002690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002692:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800269a:	4413      	add	r3, r2
 800269c:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 800269e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80026a6:	4413      	add	r3, r2
 80026a8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80026ac:	49c9      	ldr	r1, [pc, #804]	; (80029d4 <getADCValues+0x5d8>)
 80026ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026b0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80026b4:	441a      	add	r2, r3
 80026b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80026be:	440b      	add	r3, r1
 80026c0:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80026c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c6:	2b13      	cmp	r3, #19
 80026c8:	d113      	bne.n	80026f2 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80026ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80026d2:	4413      	add	r3, r2
 80026d4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80026d8:	4abf      	ldr	r2, [pc, #764]	; (80029d8 <getADCValues+0x5dc>)
 80026da:	fb82 1203 	smull	r1, r2, r2, r3
 80026de:	10d2      	asrs	r2, r2, #3
 80026e0:	17db      	asrs	r3, r3, #31
 80026e2:	1ad2      	subs	r2, r2, r3
 80026e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80026ec:	440b      	add	r3, r1
 80026ee:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80026f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f4:	3301      	adds	r3, #1
 80026f6:	673b      	str	r3, [r7, #112]	; 0x70
 80026f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026fa:	2b13      	cmp	r3, #19
 80026fc:	ddc8      	ble.n	8002690 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<20;adcChannelCounter++){
 80026fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002700:	3301      	adds	r3, #1
 8002702:	677b      	str	r3, [r7, #116]	; 0x74
 8002704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002706:	2b13      	cmp	r3, #19
 8002708:	f77f ae8a 	ble.w	8002420 <getADCValues+0x24>
				}
			}
		}
	}
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800270c:	4bb3      	ldr	r3, [pc, #716]	; (80029dc <getADCValues+0x5e0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002716:	4413      	add	r3, r2
 8002718:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002724:	4bad      	ldr	r3, [pc, #692]	; (80029dc <getADCValues+0x5e0>)
 8002726:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800272a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272e:	4bab      	ldr	r3, [pc, #684]	; (80029dc <getADCValues+0x5e0>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273a:	4ba8      	ldr	r3, [pc, #672]	; (80029dc <getADCValues+0x5e0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	4aa7      	ldr	r2, [pc, #668]	; (80029e0 <getADCValues+0x5e4>)
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800274c:	4ba3      	ldr	r3, [pc, #652]	; (80029dc <getADCValues+0x5e0>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002756:	4413      	add	r3, r2
 8002758:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002764:	4b9d      	ldr	r3, [pc, #628]	; (80029dc <getADCValues+0x5e0>)
 8002766:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800276a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276e:	4b9b      	ldr	r3, [pc, #620]	; (80029dc <getADCValues+0x5e0>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277a:	4b98      	ldr	r3, [pc, #608]	; (80029dc <getADCValues+0x5e0>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	4a97      	ldr	r2, [pc, #604]	; (80029e0 <getADCValues+0x5e4>)
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800278c:	4b93      	ldr	r3, [pc, #588]	; (80029dc <getADCValues+0x5e0>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002796:	4413      	add	r3, r2
 8002798:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800279c:	ee07 3a90 	vmov	s15, r3
 80027a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a4:	4b8d      	ldr	r3, [pc, #564]	; (80029dc <getADCValues+0x5e0>)
 80027a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ae:	4b8b      	ldr	r3, [pc, #556]	; (80029dc <getADCValues+0x5e0>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ba:	4b88      	ldr	r3, [pc, #544]	; (80029dc <getADCValues+0x5e0>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	4a87      	ldr	r2, [pc, #540]	; (80029e0 <getADCValues+0x5e4>)
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80027cc:	4b83      	ldr	r3, [pc, #524]	; (80029dc <getADCValues+0x5e0>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80027d6:	4413      	add	r3, r2
 80027d8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e4:	4b7d      	ldr	r3, [pc, #500]	; (80029dc <getADCValues+0x5e0>)
 80027e6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ee:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <getADCValues+0x5e0>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fa:	4b78      	ldr	r3, [pc, #480]	; (80029dc <getADCValues+0x5e0>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	4a77      	ldr	r2, [pc, #476]	; (80029e0 <getADCValues+0x5e4>)
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800280c:	4b73      	ldr	r3, [pc, #460]	; (80029dc <getADCValues+0x5e0>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002816:	4413      	add	r3, r2
 8002818:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002824:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <getADCValues+0x5e0>)
 8002826:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800282a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282e:	4b6b      	ldr	r3, [pc, #428]	; (80029dc <getADCValues+0x5e0>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283a:	4b68      	ldr	r3, [pc, #416]	; (80029dc <getADCValues+0x5e0>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	4a67      	ldr	r2, [pc, #412]	; (80029e0 <getADCValues+0x5e4>)
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800284c:	4b63      	ldr	r3, [pc, #396]	; (80029dc <getADCValues+0x5e0>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002856:	4413      	add	r3, r2
 8002858:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002864:	4b5d      	ldr	r3, [pc, #372]	; (80029dc <getADCValues+0x5e0>)
 8002866:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800286a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <getADCValues+0x5e0>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <getADCValues+0x5e0>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <getADCValues+0x5e4>)
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800288c:	4b53      	ldr	r3, [pc, #332]	; (80029dc <getADCValues+0x5e0>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002896:	4413      	add	r3, r2
 8002898:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028a4:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <getADCValues+0x5e0>)
 80028a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80028aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ae:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <getADCValues+0x5e0>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ba:	4b48      	ldr	r3, [pc, #288]	; (80029dc <getADCValues+0x5e0>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <getADCValues+0x5e4>)
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <getADCValues+0x5e0>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80028d6:	4413      	add	r3, r2
 80028d8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e4:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <getADCValues+0x5e0>)
 80028e6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80028ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <getADCValues+0x5e0>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <getADCValues+0x5e0>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <getADCValues+0x5e4>)
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800290c:	4b33      	ldr	r3, [pc, #204]	; (80029dc <getADCValues+0x5e0>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002916:	4413      	add	r3, r2
 8002918:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <getADCValues+0x5e0>)
 8002926:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800292a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <getADCValues+0x5e0>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <getADCValues+0x5e0>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <getADCValues+0x5e4>)
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <getADCValues+0x5e0>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002956:	4413      	add	r3, r2
 8002958:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800295c:	ee07 3a90 	vmov	s15, r3
 8002960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <getADCValues+0x5e0>)
 8002966:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800296a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <getADCValues+0x5e0>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <getADCValues+0x5e0>)
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <getADCValues+0x5e4>)
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <getADCValues+0x5e0>)
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002996:	4413      	add	r3, r2
 8002998:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a4:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <getADCValues+0x5e0>)
 80029a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80029aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <getADCValues+0x5e0>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <getADCValues+0x5e0>)
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <getADCValues+0x5e4>)
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <getADCValues+0x5e0>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	e007      	b.n	80029e4 <getADCValues+0x5e8>
 80029d4:	20008268 	.word	0x20008268
 80029d8:	66666667 	.word	0x66666667
 80029dc:	20000044 	.word	0x20000044
 80029e0:	200031ac 	.word	0x200031ac
 80029e4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80029e8:	4413      	add	r3, r2
 80029ea:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f6:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <getADCValues+0x86c>)
 80029f8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80029fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a00:	4b99      	ldr	r3, [pc, #612]	; (8002c68 <getADCValues+0x86c>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0c:	4b96      	ldr	r3, [pc, #600]	; (8002c68 <getADCValues+0x86c>)
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a14:	4a95      	ldr	r2, [pc, #596]	; (8002c6c <getADCValues+0x870>)
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002a1e:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <getADCValues+0x86c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002a28:	4413      	add	r3, r2
 8002a2a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a36:	4b8c      	ldr	r3, [pc, #560]	; (8002c68 <getADCValues+0x86c>)
 8002a38:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a40:	4b89      	ldr	r3, [pc, #548]	; (8002c68 <getADCValues+0x86c>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	4b86      	ldr	r3, [pc, #536]	; (8002c68 <getADCValues+0x86c>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a54:	4a85      	ldr	r2, [pc, #532]	; (8002c6c <getADCValues+0x870>)
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002a5e:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <getADCValues+0x86c>)
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002a68:	4413      	add	r3, r2
 8002a6a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a76:	4b7c      	ldr	r3, [pc, #496]	; (8002c68 <getADCValues+0x86c>)
 8002a78:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a80:	4b79      	ldr	r3, [pc, #484]	; (8002c68 <getADCValues+0x86c>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a8c:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <getADCValues+0x86c>)
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a94:	4a75      	ldr	r2, [pc, #468]	; (8002c6c <getADCValues+0x870>)
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002a9e:	4b72      	ldr	r3, [pc, #456]	; (8002c68 <getADCValues+0x86c>)
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab6:	4b6c      	ldr	r3, [pc, #432]	; (8002c68 <getADCValues+0x86c>)
 8002ab8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac0:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <getADCValues+0x86c>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002acc:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <getADCValues+0x86c>)
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad4:	4a65      	ldr	r2, [pc, #404]	; (8002c6c <getADCValues+0x870>)
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002ade:	4b62      	ldr	r3, [pc, #392]	; (8002c68 <getADCValues+0x86c>)
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002ae8:	4413      	add	r3, r2
 8002aea:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af6:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <getADCValues+0x86c>)
 8002af8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <getADCValues+0x86c>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <getADCValues+0x86c>)
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b14:	4a55      	ldr	r2, [pc, #340]	; (8002c6c <getADCValues+0x870>)
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002b1e:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <getADCValues+0x86c>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002b28:	4413      	add	r3, r2
 8002b2a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b36:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <getADCValues+0x86c>)
 8002b38:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b40:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <getADCValues+0x86c>)
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b4c:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <getADCValues+0x86c>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b54:	4a45      	ldr	r2, [pc, #276]	; (8002c6c <getADCValues+0x870>)
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002b5e:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <getADCValues+0x86c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002b68:	4413      	add	r3, r2
 8002b6a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b76:	4b3c      	ldr	r3, [pc, #240]	; (8002c68 <getADCValues+0x86c>)
 8002b78:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b80:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <getADCValues+0x86c>)
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <getADCValues+0x86c>)
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b94:	4a35      	ldr	r2, [pc, #212]	; (8002c6c <getADCValues+0x870>)
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002b9e:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <getADCValues+0x86c>)
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002ba8:	4413      	add	r3, r2
 8002baa:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <getADCValues+0x86c>)
 8002bb8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <getADCValues+0x86c>)
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	ee07 3a90 	vmov	s15, r3
 8002bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bcc:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <getADCValues+0x86c>)
 8002bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd4:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <getADCValues+0x870>)
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <getADCValues+0x86c>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002be8:	4413      	add	r3, r2
 8002bea:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <getADCValues+0x86c>)
 8002bf8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <getADCValues+0x86c>)
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	ee07 3a90 	vmov	s15, r3
 8002c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <getADCValues+0x86c>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <getADCValues+0x870>)
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <getADCValues+0x86c>)
 8002c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002c28:	4413      	add	r3, r2
 8002c2a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <getADCValues+0x86c>)
 8002c38:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <getADCValues+0x86c>)
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <getADCValues+0x86c>)
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c54:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <getADCValues+0x870>)
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8002c5e:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <getADCValues+0x870>)
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3778      	adds	r7, #120	; 0x78
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000044 	.word	0x20000044
 8002c6c:	200031ac 	.word	0x200031ac

08002c70 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8002c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c90:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <startHeartbeat+0x1c>)
 8002c92:	f002 fcea 	bl	800566a <HAL_GPIO_TogglePin>
	  osDelay(500);
 8002c96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c9a:	f007 f99b 	bl	8009fd4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8002c9e:	e7f5      	b.n	8002c8c <startHeartbeat+0x8>
 8002ca0:	40022000 	.word	0x40022000

08002ca4 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 8002cac:	2203      	movs	r2, #3
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4815      	ldr	r0, [pc, #84]	; (8002d08 <startADCRead+0x64>)
 8002cb2:	f009 fe38 	bl	800c926 <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8002cb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4813      	ldr	r0, [pc, #76]	; (8002d0c <startADCRead+0x68>)
 8002cbe:	f009 fe32 	bl	800c926 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 8002cc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4811      	ldr	r0, [pc, #68]	; (8002d10 <startADCRead+0x6c>)
 8002cca:	f009 fe2c 	bl	800c926 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 8002cce:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	480f      	ldr	r0, [pc, #60]	; (8002d14 <startADCRead+0x70>)
 8002cd6:	f009 fe26 	bl	800c926 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	490b      	ldr	r1, [pc, #44]	; (8002d0c <startADCRead+0x68>)
 8002ce0:	480d      	ldr	r0, [pc, #52]	; (8002d18 <startADCRead+0x74>)
 8002ce2:	f001 f9d7 	bl	8004094 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4909      	ldr	r1, [pc, #36]	; (8002d10 <startADCRead+0x6c>)
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <startADCRead+0x78>)
 8002cee:	f001 f9d1 	bl	8004094 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4907      	ldr	r1, [pc, #28]	; (8002d14 <startADCRead+0x70>)
 8002cf8:	4809      	ldr	r0, [pc, #36]	; (8002d20 <startADCRead+0x7c>)
 8002cfa:	f001 f9cb 	bl	8004094 <HAL_ADC_Start_DMA>
    osDelay(1000);
 8002cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d02:	f007 f967 	bl	8009fd4 <osDelay>
  {
 8002d06:	e7d1      	b.n	8002cac <startADCRead+0x8>
 8002d08:	20008224 	.word	0x20008224
 8002d0c:	20008268 	.word	0x20008268
 8002d10:	2000d314 	.word	0x2000d314
 8002d14:	2000ab80 	.word	0x2000ab80
 8002d18:	2000a9f8 	.word	0x2000a9f8
 8002d1c:	20007ce0 	.word	0x20007ce0
 8002d20:	2000aa44 	.word	0x2000aa44

08002d24 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
	 static uint16_t LCD_Blink_White = 0b0001100000000000;
	 static uint16_t LCD_Blink_Black = 0b0001000000000000;
	 int x = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
	  	  setOutputGPIOState(outputGPIOs.out1V8_2,x);
	  	  setOutputGPIOState(outputGPIOs.out1V8_3,!x);
	  	  setOutputGPIOState(outputGPIOs.odOut_0,x);
	  	  setOutputGPIOState(outputGPIOs.odOut_1,!x); */

	  	  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <GetDaScreenBlink+0x80>)
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <GetDaScreenBlink+0x80>)
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <GetDaScreenBlink+0x80>)
 8002d3e:	789b      	ldrb	r3, [r3, #2]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <GetDaScreenBlink+0x30>
	  		  adcValues = getADCValues();
 8002d48:	f7ff fb58 	bl	80023fc <getADCValues>
 8002d4c:	6138      	str	r0, [r7, #16]
	  		  float *adcValues1 = adcValues+1;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	3304      	adds	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
	  		 // uartTransmitFloat(adcValues,7);
	  	  }
	 	  if (!x) {
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10e      	bne.n	8002d78 <GetDaScreenBlink+0x54>
	 		  //HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
	 		  x=1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]

	 		  uartTransmitChar("hello\r\n",7);
 8002d5e:	2107      	movs	r1, #7
 8002d60:	4811      	ldr	r0, [pc, #68]	; (8002da8 <GetDaScreenBlink+0x84>)
 8002d62:	f7ff f825 	bl	8001db0 <uartTransmitChar>
	 		  HAL_GPIO_TogglePin(LCD_SS_GPIO_Port,LCD_SS_Pin);
 8002d66:	2110      	movs	r1, #16
 8002d68:	4810      	ldr	r0, [pc, #64]	; (8002dac <GetDaScreenBlink+0x88>)
 8002d6a:	f002 fc7e 	bl	800566a <HAL_GPIO_TogglePin>
	 		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
	 		  HAL_GPIO_TogglePin(LCD_SS_GPIO_Port,LCD_SS_Pin);
 8002d6e:	2110      	movs	r1, #16
 8002d70:	480e      	ldr	r0, [pc, #56]	; (8002dac <GetDaScreenBlink+0x88>)
 8002d72:	f002 fc7a 	bl	800566a <HAL_GPIO_TogglePin>
 8002d76:	e00f      	b.n	8002d98 <GetDaScreenBlink+0x74>
	 	  }
	 	  else{
	 		  //HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
	 		  x=0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
	 		  uartTransmitChar("here\r\n",7);
 8002d7c:	2107      	movs	r1, #7
 8002d7e:	480c      	ldr	r0, [pc, #48]	; (8002db0 <GetDaScreenBlink+0x8c>)
 8002d80:	f7ff f816 	bl	8001db0 <uartTransmitChar>
	 		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002d84:	2201      	movs	r2, #1
 8002d86:	2110      	movs	r1, #16
 8002d88:	4808      	ldr	r0, [pc, #32]	; (8002dac <GetDaScreenBlink+0x88>)
 8002d8a:	f002 fc55 	bl	8005638 <HAL_GPIO_WritePin>
	 		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
	 		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2110      	movs	r1, #16
 8002d92:	4806      	ldr	r0, [pc, #24]	; (8002dac <GetDaScreenBlink+0x88>)
 8002d94:	f002 fc50 	bl	8005638 <HAL_GPIO_WritePin>
	 	  }
	 	  osDelay(400);
 8002d98:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d9c:	f007 f91a 	bl	8009fd4 <osDelay>
	  	  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8002da0:	e7c6      	b.n	8002d30 <GetDaScreenBlink+0xc>
 8002da2:	bf00      	nop
 8002da4:	20008224 	.word	0x20008224
 8002da8:	0801025c 	.word	0x0801025c
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08010264 	.word	0x08010264

08002db4 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8002dbc:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <startGpioInputRead+0x114>)
 8002dbe:	681c      	ldr	r4, [r3, #0]
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	4842      	ldr	r0, [pc, #264]	; (8002ecc <startGpioInputRead+0x118>)
 8002dc4:	f002 fc20 	bl	8005608 <HAL_GPIO_ReadPin>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002dce:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <startGpioInputRead+0x114>)
 8002dd2:	685c      	ldr	r4, [r3, #4]
 8002dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd8:	483e      	ldr	r0, [pc, #248]	; (8002ed4 <startGpioInputRead+0x120>)
 8002dda:	f002 fc15 	bl	8005608 <HAL_GPIO_ReadPin>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002de4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <startGpioInputRead+0x114>)
 8002de8:	689c      	ldr	r4, [r3, #8]
 8002dea:	2110      	movs	r1, #16
 8002dec:	483a      	ldr	r0, [pc, #232]	; (8002ed8 <startGpioInputRead+0x124>)
 8002dee:	f002 fc0b 	bl	8005608 <HAL_GPIO_ReadPin>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002df8:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8002dfa:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <startGpioInputRead+0x114>)
 8002dfc:	68dc      	ldr	r4, [r3, #12]
 8002dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e02:	4835      	ldr	r0, [pc, #212]	; (8002ed8 <startGpioInputRead+0x124>)
 8002e04:	f002 fc00 	bl	8005608 <HAL_GPIO_ReadPin>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002e0e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8002e10:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <startGpioInputRead+0x114>)
 8002e12:	691c      	ldr	r4, [r3, #16]
 8002e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e18:	482f      	ldr	r0, [pc, #188]	; (8002ed8 <startGpioInputRead+0x124>)
 8002e1a:	f002 fbf5 	bl	8005608 <HAL_GPIO_ReadPin>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002e24:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 8002e26:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <startGpioInputRead+0x114>)
 8002e28:	695c      	ldr	r4, [r3, #20]
 8002e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e2e:	482a      	ldr	r0, [pc, #168]	; (8002ed8 <startGpioInputRead+0x124>)
 8002e30:	f002 fbea 	bl	8005608 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002e3a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8002e3c:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <startGpioInputRead+0x114>)
 8002e3e:	699c      	ldr	r4, [r3, #24]
 8002e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e44:	4824      	ldr	r0, [pc, #144]	; (8002ed8 <startGpioInputRead+0x124>)
 8002e46:	f002 fbdf 	bl	8005608 <HAL_GPIO_ReadPin>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002e50:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 8002e52:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <startGpioInputRead+0x114>)
 8002e54:	69dc      	ldr	r4, [r3, #28]
 8002e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e5a:	481f      	ldr	r0, [pc, #124]	; (8002ed8 <startGpioInputRead+0x124>)
 8002e5c:	f002 fbd4 	bl	8005608 <HAL_GPIO_ReadPin>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002e66:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <startGpioInputRead+0x114>)
 8002e6a:	6a1c      	ldr	r4, [r3, #32]
 8002e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e70:	4819      	ldr	r0, [pc, #100]	; (8002ed8 <startGpioInputRead+0x124>)
 8002e72:	f002 fbc9 	bl	8005608 <HAL_GPIO_ReadPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002e7c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <startGpioInputRead+0x114>)
 8002e80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e86:	4814      	ldr	r0, [pc, #80]	; (8002ed8 <startGpioInputRead+0x124>)
 8002e88:	f002 fbbe 	bl	8005608 <HAL_GPIO_ReadPin>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002e92:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <startGpioInputRead+0x114>)
 8002e96:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002e98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e9c:	480e      	ldr	r0, [pc, #56]	; (8002ed8 <startGpioInputRead+0x124>)
 8002e9e:	f002 fbb3 	bl	8005608 <HAL_GPIO_ReadPin>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002ea8:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <startGpioInputRead+0x114>)
 8002eac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002eae:	2108      	movs	r1, #8
 8002eb0:	480a      	ldr	r0, [pc, #40]	; (8002edc <startGpioInputRead+0x128>)
 8002eb2:	f002 fba9 	bl	8005608 <HAL_GPIO_ReadPin>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <startGpioInputRead+0x11c>)
 8002ebc:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8002ebe:	f240 30b6 	movw	r0, #950	; 0x3b6
 8002ec2:	f007 f887 	bl	8009fd4 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8002ec6:	e779      	b.n	8002dbc <startGpioInputRead+0x8>
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	20007cd4 	.word	0x20007cd4
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ef2:	f000 ff07 	bl	8003d04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40001000 	.word	0x40001000

08002f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f0a:	e7fe      	b.n	8002f0a <Error_Handler+0x6>

08002f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	210f      	movs	r1, #15
 8002f46:	f06f 0001 	mvn.w	r0, #1
 8002f4a:	f001 fd81 	bl	8004a50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b094      	sub	sp, #80	; 0x50
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a91      	ldr	r2, [pc, #580]	; (80031c0 <HAL_ADC_MspInit+0x264>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	f040 808c 	bne.w	8003098 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f80:	4b90      	ldr	r3, [pc, #576]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	4a8f      	ldr	r2, [pc, #572]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8c:	4b8d      	ldr	r3, [pc, #564]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f98:	4b8a      	ldr	r3, [pc, #552]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	4a89      	ldr	r2, [pc, #548]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002f9e:	f043 0304 	orr.w	r3, r3, #4
 8002fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa4:	4b87      	ldr	r3, [pc, #540]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb0:	4b84      	ldr	r3, [pc, #528]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4a83      	ldr	r2, [pc, #524]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbc:	4b81      	ldr	r3, [pc, #516]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	4a7d      	ldr	r2, [pc, #500]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd4:	4b7b      	ldr	r3, [pc, #492]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4875      	ldr	r0, [pc, #468]	; (80031c8 <HAL_ADC_MspInit+0x26c>)
 8002ff4:	f002 f95e 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8002ff8:	23f8      	movs	r3, #248	; 0xf8
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003008:	4619      	mov	r1, r3
 800300a:	4870      	ldr	r0, [pc, #448]	; (80031cc <HAL_ADC_MspInit+0x270>)
 800300c:	f002 f952 	bl	80052b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8003010:	2303      	movs	r3, #3
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003014:	2303      	movs	r3, #3
 8003016:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003020:	4619      	mov	r1, r3
 8003022:	486b      	ldr	r0, [pc, #428]	; (80031d0 <HAL_ADC_MspInit+0x274>)
 8003024:	f002 f946 	bl	80052b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003028:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 800302a:	4a6b      	ldr	r2, [pc, #428]	; (80031d8 <HAL_ADC_MspInit+0x27c>)
 800302c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800302e:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003034:	4b67      	ldr	r3, [pc, #412]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800303a:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003040:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 8003042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003046:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003048:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 800304a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800304e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003050:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 8003052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003056:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003058:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 8003060:	2200      	movs	r2, #0
 8003062:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003064:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 8003066:	2200      	movs	r2, #0
 8003068:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800306a:	485a      	ldr	r0, [pc, #360]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 800306c:	f001 fd1a 	bl	8004aa4 <HAL_DMA_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8003076:	f7ff ff45 	bl	8002f04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a55      	ldr	r2, [pc, #340]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
 8003080:	4a54      	ldr	r2, [pc, #336]	; (80031d4 <HAL_ADC_MspInit+0x278>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2105      	movs	r1, #5
 800308a:	2012      	movs	r0, #18
 800308c:	f001 fce0 	bl	8004a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003090:	2012      	movs	r0, #18
 8003092:	f001 fcf9 	bl	8004a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003096:	e13a      	b.n	800330e <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a4f      	ldr	r2, [pc, #316]	; (80031dc <HAL_ADC_MspInit+0x280>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	f040 80a2 	bne.w	80031e8 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80030a4:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	4a46      	ldr	r2, [pc, #280]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ae:	6453      	str	r3, [r2, #68]	; 0x44
 80030b0:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030bc:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4a40      	ldr	r2, [pc, #256]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6313      	str	r3, [r2, #48]	; 0x30
 80030c8:	4b3e      	ldr	r3, [pc, #248]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d4:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6313      	str	r3, [r2, #48]	; 0x30
 80030e0:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	623b      	str	r3, [r7, #32]
 80030ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ec:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	6313      	str	r3, [r2, #48]	; 0x30
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_ADC_MspInit+0x268>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8003104:	233f      	movs	r3, #63	; 0x3f
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003108:	2303      	movs	r3, #3
 800310a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003110:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003114:	4619      	mov	r1, r3
 8003116:	482c      	ldr	r0, [pc, #176]	; (80031c8 <HAL_ADC_MspInit+0x26c>)
 8003118:	f002 f8cc 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 800311c:	237b      	movs	r3, #123	; 0x7b
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003120:	2303      	movs	r3, #3
 8003122:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003128:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800312c:	4619      	mov	r1, r3
 800312e:	4827      	ldr	r0, [pc, #156]	; (80031cc <HAL_ADC_MspInit+0x270>)
 8003130:	f002 f8c0 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8003134:	2302      	movs	r3, #2
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003138:	2303      	movs	r3, #3
 800313a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8003140:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003144:	4619      	mov	r1, r3
 8003146:	4822      	ldr	r0, [pc, #136]	; (80031d0 <HAL_ADC_MspInit+0x274>)
 8003148:	f002 f8b4 	bl	80052b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 800314e:	4a25      	ldr	r2, [pc, #148]	; (80031e4 <HAL_ADC_MspInit+0x288>)
 8003150:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 8003154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003158:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800315a:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 8003168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800316c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 8003170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003174:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 8003178:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800317c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 8003180:	2200      	movs	r2, #0
 8003182:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 8003186:	2200      	movs	r2, #0
 8003188:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 800318c:	2200      	movs	r2, #0
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003190:	4813      	ldr	r0, [pc, #76]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 8003192:	f001 fc87 	bl	8004aa4 <HAL_DMA_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 800319c:	f7ff feb2 	bl	8002f04 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
 80031a6:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <HAL_ADC_MspInit+0x284>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2105      	movs	r1, #5
 80031b0:	2012      	movs	r0, #18
 80031b2:	f001 fc4d 	bl	8004a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80031b6:	2012      	movs	r0, #18
 80031b8:	f001 fc66 	bl	8004a88 <HAL_NVIC_EnableIRQ>
}
 80031bc:	e0a7      	b.n	800330e <HAL_ADC_MspInit+0x3b2>
 80031be:	bf00      	nop
 80031c0:	40012000 	.word	0x40012000
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020400 	.word	0x40020400
 80031d4:	2000aaf0 	.word	0x2000aaf0
 80031d8:	40026410 	.word	0x40026410
 80031dc:	40012100 	.word	0x40012100
 80031e0:	2000fa24 	.word	0x2000fa24
 80031e4:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a4a      	ldr	r2, [pc, #296]	; (8003318 <HAL_ADC_MspInit+0x3bc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f040 808d 	bne.w	800330e <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80031f4:	4b49      	ldr	r3, [pc, #292]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 80031fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	4a42      	ldr	r2, [pc, #264]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 8003212:	f043 0320 	orr.w	r3, r3, #32
 8003216:	6313      	str	r3, [r2, #48]	; 0x30
 8003218:	4b40      	ldr	r3, [pc, #256]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003224:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	4a3c      	ldr	r2, [pc, #240]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6313      	str	r3, [r2, #48]	; 0x30
 8003230:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	4b37      	ldr	r3, [pc, #220]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	4a36      	ldr	r2, [pc, #216]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6313      	str	r3, [r2, #48]	; 0x30
 8003248:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_ADC_MspInit+0x3c0>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8003254:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800325a:	2303      	movs	r3, #3
 800325c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003266:	4619      	mov	r1, r3
 8003268:	482d      	ldr	r0, [pc, #180]	; (8003320 <HAL_ADC_MspInit+0x3c4>)
 800326a:	f002 f823 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 800326e:	230f      	movs	r3, #15
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003272:	2303      	movs	r3, #3
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800327e:	4619      	mov	r1, r3
 8003280:	4828      	ldr	r0, [pc, #160]	; (8003324 <HAL_ADC_MspInit+0x3c8>)
 8003282:	f002 f817 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8003286:	230c      	movs	r3, #12
 8003288:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800328a:	2303      	movs	r3, #3
 800328c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003296:	4619      	mov	r1, r3
 8003298:	4823      	ldr	r0, [pc, #140]	; (8003328 <HAL_ADC_MspInit+0x3cc>)
 800329a:	f002 f80b 	bl	80052b4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <HAL_ADC_MspInit+0x3d4>)
 80032a2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032aa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ac:	4b1f      	ldr	r3, [pc, #124]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b2:	4b1e      	ldr	r3, [pc, #120]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032be:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032c6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032ce:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80032d0:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032de:	2200      	movs	r2, #0
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80032e2:	4812      	ldr	r0, [pc, #72]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032e4:	f001 fbde 	bl	8004aa4 <HAL_DMA_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 80032ee:	f7ff fe09 	bl	8002f04 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a0d      	ldr	r2, [pc, #52]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
 80032f8:	4a0c      	ldr	r2, [pc, #48]	; (800332c <HAL_ADC_MspInit+0x3d0>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80032fe:	2200      	movs	r2, #0
 8003300:	2105      	movs	r1, #5
 8003302:	2012      	movs	r0, #18
 8003304:	f001 fba4 	bl	8004a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003308:	2012      	movs	r0, #18
 800330a:	f001 fbbd 	bl	8004a88 <HAL_NVIC_EnableIRQ>
}
 800330e:	bf00      	nop
 8003310:	3750      	adds	r7, #80	; 0x50
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40012200 	.word	0x40012200
 800331c:	40023800 	.word	0x40023800
 8003320:	40021400 	.word	0x40021400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020000 	.word	0x40020000
 800332c:	200081c4 	.word	0x200081c4
 8003330:	40026428 	.word	0x40026428

08003334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b090      	sub	sp, #64	; 0x40
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6c      	ldr	r2, [pc, #432]	; (8003504 <HAL_I2C_MspInit+0x1d0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d129      	bne.n	80033aa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a6b      	ldr	r2, [pc, #428]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b69      	ldr	r3, [pc, #420]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 800336e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003374:	2312      	movs	r3, #18
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003378:	2301      	movs	r3, #1
 800337a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337c:	2303      	movs	r3, #3
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003380:	2304      	movs	r3, #4
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003388:	4619      	mov	r1, r3
 800338a:	4860      	ldr	r0, [pc, #384]	; (800350c <HAL_I2C_MspInit+0x1d8>)
 800338c:	f001 ff92 	bl	80052b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003390:	4b5d      	ldr	r3, [pc, #372]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4a5c      	ldr	r2, [pc, #368]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003396:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800339a:	6413      	str	r3, [r2, #64]	; 0x40
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80033a8:	e0a7      	b.n	80034fa <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a58      	ldr	r2, [pc, #352]	; (8003510 <HAL_I2C_MspInit+0x1dc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d128      	bne.n	8003406 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80033b4:	4b54      	ldr	r3, [pc, #336]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	4a53      	ldr	r2, [pc, #332]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80033ba:	f043 0320 	orr.w	r3, r3, #32
 80033be:	6313      	str	r3, [r2, #48]	; 0x30
 80033c0:	4b51      	ldr	r3, [pc, #324]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 80033cc:	2303      	movs	r3, #3
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033d0:	2312      	movs	r3, #18
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033d4:	2301      	movs	r3, #1
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80033dc:	2304      	movs	r3, #4
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e4:	4619      	mov	r1, r3
 80033e6:	484b      	ldr	r0, [pc, #300]	; (8003514 <HAL_I2C_MspInit+0x1e0>)
 80033e8:	f001 ff64 	bl	80052b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033ec:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	4a45      	ldr	r2, [pc, #276]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80033f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033f6:	6413      	str	r3, [r2, #64]	; 0x40
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	69fb      	ldr	r3, [r7, #28]
}
 8003404:	e079      	b.n	80034fa <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a43      	ldr	r2, [pc, #268]	; (8003518 <HAL_I2C_MspInit+0x1e4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d146      	bne.n	800349e <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003410:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4a3c      	ldr	r2, [pc, #240]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	6313      	str	r3, [r2, #48]	; 0x30
 800341c:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	4a36      	ldr	r2, [pc, #216]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6313      	str	r3, [r2, #48]	; 0x30
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8003440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003446:	2312      	movs	r3, #18
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800344a:	2301      	movs	r3, #1
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344e:	2303      	movs	r3, #3
 8003450:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003452:	2304      	movs	r3, #4
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8003456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345a:	4619      	mov	r1, r3
 800345c:	482f      	ldr	r0, [pc, #188]	; (800351c <HAL_I2C_MspInit+0x1e8>)
 800345e:	f001 ff29 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8003462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003468:	2312      	movs	r3, #18
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346c:	2301      	movs	r3, #1
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003470:	2303      	movs	r3, #3
 8003472:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003474:	2304      	movs	r3, #4
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8003478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347c:	4619      	mov	r1, r3
 800347e:	4828      	ldr	r0, [pc, #160]	; (8003520 <HAL_I2C_MspInit+0x1ec>)
 8003480:	f001 ff18 	bl	80052b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 800348a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800348e:	6413      	str	r3, [r2, #64]	; 0x40
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	693b      	ldr	r3, [r7, #16]
}
 800349c:	e02d      	b.n	80034fa <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a20      	ldr	r2, [pc, #128]	; (8003524 <HAL_I2C_MspInit+0x1f0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d128      	bne.n	80034fa <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034a8:	4b17      	ldr	r3, [pc, #92]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	4a16      	ldr	r2, [pc, #88]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80034ae:	f043 0320 	orr.w	r3, r3, #32
 80034b2:	6313      	str	r3, [r2, #48]	; 0x30
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 80034c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034c6:	2312      	movs	r3, #18
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80034d2:	2304      	movs	r3, #4
 80034d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034da:	4619      	mov	r1, r3
 80034dc:	480d      	ldr	r0, [pc, #52]	; (8003514 <HAL_I2C_MspInit+0x1e0>)
 80034de:	f001 fee9 	bl	80052b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a08      	ldr	r2, [pc, #32]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80034e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_I2C_MspInit+0x1d4>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
}
 80034fa:	bf00      	nop
 80034fc:	3740      	adds	r7, #64	; 0x40
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40005400 	.word	0x40005400
 8003508:	40023800 	.word	0x40023800
 800350c:	40020400 	.word	0x40020400
 8003510:	40005800 	.word	0x40005800
 8003514:	40021400 	.word	0x40021400
 8003518:	40005c00 	.word	0x40005c00
 800351c:	40020800 	.word	0x40020800
 8003520:	40020000 	.word	0x40020000
 8003524:	40006000 	.word	0x40006000

08003528 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_RTC_MspInit+0x2c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d105      	bne.n	8003546 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_RTC_MspInit+0x30>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	4a06      	ldr	r2, [pc, #24]	; (8003558 <HAL_RTC_MspInit+0x30>)
 8003540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003544:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40002800 	.word	0x40002800
 8003558:	40023800 	.word	0x40023800

0800355c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a40      	ldr	r2, [pc, #256]	; (800367c <HAL_SPI_MspInit+0x120>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d130      	bne.n	80035e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800357e:	4b40      	ldr	r3, [pc, #256]	; (8003680 <HAL_SPI_MspInit+0x124>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a3f      	ldr	r2, [pc, #252]	; (8003680 <HAL_SPI_MspInit+0x124>)
 8003584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <HAL_SPI_MspInit+0x124>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003596:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_SPI_MspInit+0x124>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a39      	ldr	r2, [pc, #228]	; (8003680 <HAL_SPI_MspInit+0x124>)
 800359c:	f043 0310 	orr.w	r3, r3, #16
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_SPI_MspInit+0x124>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80035ae:	2364      	movs	r3, #100	; 0x64
 80035b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ba:	2303      	movs	r3, #3
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80035be:	2305      	movs	r3, #5
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035c2:	f107 031c 	add.w	r3, r7, #28
 80035c6:	4619      	mov	r1, r3
 80035c8:	482e      	ldr	r0, [pc, #184]	; (8003684 <HAL_SPI_MspInit+0x128>)
 80035ca:	f001 fe73 	bl	80052b4 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2105      	movs	r1, #5
 80035d2:	2054      	movs	r0, #84	; 0x54
 80035d4:	f001 fa3c 	bl	8004a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80035d8:	2054      	movs	r0, #84	; 0x54
 80035da:	f001 fa55 	bl	8004a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80035de:	e049      	b.n	8003674 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_SPI_MspInit+0x12c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d144      	bne.n	8003674 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_SPI_MspInit+0x124>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a24      	ldr	r2, [pc, #144]	; (8003680 <HAL_SPI_MspInit+0x124>)
 80035f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_SPI_MspInit+0x124>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <HAL_SPI_MspInit+0x124>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_SPI_MspInit+0x124>)
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <HAL_SPI_MspInit+0x124>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_SPI_MspInit+0x124>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_SPI_MspInit+0x124>)
 8003620:	f043 0320 	orr.w	r3, r3, #32
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_SPI_MspInit+0x124>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8003632:	23e0      	movs	r3, #224	; 0xe0
 8003634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363e:	2303      	movs	r3, #3
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003642:	2305      	movs	r3, #5
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003646:	f107 031c 	add.w	r3, r7, #28
 800364a:	4619      	mov	r1, r3
 800364c:	480f      	ldr	r0, [pc, #60]	; (800368c <HAL_SPI_MspInit+0x130>)
 800364e:	f001 fe31 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8003652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003660:	2303      	movs	r3, #3
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003664:	2305      	movs	r3, #5
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	4619      	mov	r1, r3
 800366e:	4808      	ldr	r0, [pc, #32]	; (8003690 <HAL_SPI_MspInit+0x134>)
 8003670:	f001 fe20 	bl	80052b4 <HAL_GPIO_Init>
}
 8003674:	bf00      	nop
 8003676:	3730      	adds	r7, #48	; 0x30
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40013400 	.word	0x40013400
 8003680:	40023800 	.word	0x40023800
 8003684:	40021000 	.word	0x40021000
 8003688:	40015000 	.word	0x40015000
 800368c:	40021c00 	.word	0x40021c00
 8003690:	40021400 	.word	0x40021400

08003694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <HAL_TIM_Base_MspInit+0x5c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10c      	bne.n	80036c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036a6:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <HAL_TIM_Base_MspInit+0x60>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <HAL_TIM_Base_MspInit+0x60>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_TIM_Base_MspInit+0x60>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80036be:	e010      	b.n	80036e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <HAL_TIM_Base_MspInit+0x64>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10b      	bne.n	80036e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_TIM_Base_MspInit+0x60>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <HAL_TIM_Base_MspInit+0x60>)
 80036d0:	f043 0308 	orr.w	r3, r3, #8
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <HAL_TIM_Base_MspInit+0x60>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40000c00 	.word	0x40000c00

080036fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <HAL_TIM_MspPostInit+0xa8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d11c      	bne.n	8003758 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_TIM_MspPostInit+0xac>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <HAL_TIM_MspPostInit+0xac>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_TIM_MspPostInit+0xac>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8003736:	2340      	movs	r3, #64	; 0x40
 8003738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373a:	2302      	movs	r3, #2
 800373c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003742:	2300      	movs	r3, #0
 8003744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003746:	2302      	movs	r3, #2
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 800374a:	f107 0314 	add.w	r3, r7, #20
 800374e:	4619      	mov	r1, r3
 8003750:	4816      	ldr	r0, [pc, #88]	; (80037ac <HAL_TIM_MspPostInit+0xb0>)
 8003752:	f001 fdaf 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003756:	e021      	b.n	800379c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <HAL_TIM_MspPostInit+0xb4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d11c      	bne.n	800379c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_TIM_MspPostInit+0xac>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <HAL_TIM_MspPostInit+0xac>)
 8003768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_TIM_MspPostInit+0xac>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 800377a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800377e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800378c:	2302      	movs	r3, #2
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4619      	mov	r1, r3
 8003796:	4807      	ldr	r0, [pc, #28]	; (80037b4 <HAL_TIM_MspPostInit+0xb8>)
 8003798:	f001 fd8c 	bl	80052b4 <HAL_GPIO_Init>
}
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40000800 	.word	0x40000800
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020400 	.word	0x40020400
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40021c00 	.word	0x40021c00

080037b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08e      	sub	sp, #56	; 0x38
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6c      	ldr	r2, [pc, #432]	; (8003988 <HAL_UART_MspInit+0x1d0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d129      	bne.n	800382e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037da:	4b6c      	ldr	r3, [pc, #432]	; (800398c <HAL_UART_MspInit+0x1d4>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a6b      	ldr	r2, [pc, #428]	; (800398c <HAL_UART_MspInit+0x1d4>)
 80037e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b69      	ldr	r3, [pc, #420]	; (800398c <HAL_UART_MspInit+0x1d4>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f2:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_UART_MspInit+0x1d4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_UART_MspInit+0x1d4>)
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_UART_MspInit+0x1d4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 800380a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003818:	2303      	movs	r3, #3
 800381a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800381c:	2308      	movs	r3, #8
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003824:	4619      	mov	r1, r3
 8003826:	485a      	ldr	r0, [pc, #360]	; (8003990 <HAL_UART_MspInit+0x1d8>)
 8003828:	f001 fd44 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800382c:	e0a7      	b.n	800397e <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a58      	ldr	r2, [pc, #352]	; (8003994 <HAL_UART_MspInit+0x1dc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d174      	bne.n	8003922 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003838:	4b54      	ldr	r3, [pc, #336]	; (800398c <HAL_UART_MspInit+0x1d4>)
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	4a53      	ldr	r2, [pc, #332]	; (800398c <HAL_UART_MspInit+0x1d4>)
 800383e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003842:	6413      	str	r3, [r2, #64]	; 0x40
 8003844:	4b51      	ldr	r3, [pc, #324]	; (800398c <HAL_UART_MspInit+0x1d4>)
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003850:	4b4e      	ldr	r3, [pc, #312]	; (800398c <HAL_UART_MspInit+0x1d4>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4a4d      	ldr	r2, [pc, #308]	; (800398c <HAL_UART_MspInit+0x1d4>)
 8003856:	f043 0304 	orr.w	r3, r3, #4
 800385a:	6313      	str	r3, [r2, #48]	; 0x30
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <HAL_UART_MspInit+0x1d4>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003868:	4b48      	ldr	r3, [pc, #288]	; (800398c <HAL_UART_MspInit+0x1d4>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	4a47      	ldr	r2, [pc, #284]	; (800398c <HAL_UART_MspInit+0x1d4>)
 800386e:	f043 0308 	orr.w	r3, r3, #8
 8003872:	6313      	str	r3, [r2, #48]	; 0x30
 8003874:	4b45      	ldr	r3, [pc, #276]	; (800398c <HAL_UART_MspInit+0x1d4>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8003880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388e:	2303      	movs	r3, #3
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003892:	2308      	movs	r3, #8
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8003896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389a:	4619      	mov	r1, r3
 800389c:	483c      	ldr	r0, [pc, #240]	; (8003990 <HAL_UART_MspInit+0x1d8>)
 800389e:	f001 fd09 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 80038a2:	2304      	movs	r3, #4
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ae:	2303      	movs	r3, #3
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80038b2:	2308      	movs	r3, #8
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 80038b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ba:	4619      	mov	r1, r3
 80038bc:	4836      	ldr	r0, [pc, #216]	; (8003998 <HAL_UART_MspInit+0x1e0>)
 80038be:	f001 fcf9 	bl	80052b4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80038c2:	4b36      	ldr	r3, [pc, #216]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038c4:	4a36      	ldr	r2, [pc, #216]	; (80039a0 <HAL_UART_MspInit+0x1e8>)
 80038c6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80038c8:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038ce:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038ea:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038f8:	4b28      	ldr	r3, [pc, #160]	; (800399c <HAL_UART_MspInit+0x1e4>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_UART_MspInit+0x1e4>)
 8003900:	2200      	movs	r2, #0
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003904:	4825      	ldr	r0, [pc, #148]	; (800399c <HAL_UART_MspInit+0x1e4>)
 8003906:	f001 f8cd 	bl	8004aa4 <HAL_DMA_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003910:	f7ff faf8 	bl	8002f04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a21      	ldr	r2, [pc, #132]	; (800399c <HAL_UART_MspInit+0x1e4>)
 8003918:	66da      	str	r2, [r3, #108]	; 0x6c
 800391a:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_UART_MspInit+0x1e4>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003920:	e02d      	b.n	800397e <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1f      	ldr	r2, [pc, #124]	; (80039a4 <HAL_UART_MspInit+0x1ec>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d128      	bne.n	800397e <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <HAL_UART_MspInit+0x1d4>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	4a16      	ldr	r2, [pc, #88]	; (800398c <HAL_UART_MspInit+0x1d4>)
 8003932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003936:	6413      	str	r3, [r2, #64]	; 0x40
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <HAL_UART_MspInit+0x1d4>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_UART_MspInit+0x1d4>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	4a10      	ldr	r2, [pc, #64]	; (800398c <HAL_UART_MspInit+0x1d4>)
 800394a:	f043 0310 	orr.w	r3, r3, #16
 800394e:	6313      	str	r3, [r2, #48]	; 0x30
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HAL_UART_MspInit+0x1d4>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 800395c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	2302      	movs	r3, #2
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396a:	2303      	movs	r3, #3
 800396c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800396e:	2308      	movs	r3, #8
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003976:	4619      	mov	r1, r3
 8003978:	480b      	ldr	r0, [pc, #44]	; (80039a8 <HAL_UART_MspInit+0x1f0>)
 800397a:	f001 fc9b 	bl	80052b4 <HAL_GPIO_Init>
}
 800397e:	bf00      	nop
 8003980:	3738      	adds	r7, #56	; 0x38
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40004c00 	.word	0x40004c00
 800398c:	40023800 	.word	0x40023800
 8003990:	40020800 	.word	0x40020800
 8003994:	40005000 	.word	0x40005000
 8003998:	40020c00 	.word	0x40020c00
 800399c:	2000fa84 	.word	0x2000fa84
 80039a0:	40026010 	.word	0x40026010
 80039a4:	40007800 	.word	0x40007800
 80039a8:	40021000 	.word	0x40021000

080039ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039cc:	d134      	bne.n	8003a38 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ce:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
 80039da:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80039e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80039ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039f8:	230a      	movs	r3, #10
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4619      	mov	r1, r3
 8003a02:	4810      	ldr	r0, [pc, #64]	; (8003a44 <HAL_PCD_MspInit+0x98>)
 8003a04:	f001 fc56 	bl	80052b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 8003a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a12:	6353      	str	r3, [r2, #52]	; 0x34
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	4a06      	ldr	r2, [pc, #24]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 8003a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <HAL_PCD_MspInit+0x94>)
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003a38:	bf00      	nop
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40020000 	.word	0x40020000

08003a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	; 0x30
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	2036      	movs	r0, #54	; 0x36
 8003a5e:	f000 fff7 	bl	8004a50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a62:	2036      	movs	r0, #54	; 0x36
 8003a64:	f001 f810 	bl	8004a88 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <HAL_InitTick+0xa0>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_InitTick+0xa0>)
 8003a6e:	f043 0310 	orr.w	r3, r3, #16
 8003a72:	6413      	str	r3, [r2, #64]	; 0x40
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_InitTick+0xa0>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a80:	f107 0210 	add.w	r2, r7, #16
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 f8d2 	bl	8006c34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a90:	f003 f8a8 	bl	8006be4 <HAL_RCC_GetPCLK1Freq>
 8003a94:	4603      	mov	r3, r0
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <HAL_InitTick+0xa4>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0c9b      	lsrs	r3, r3, #18
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_InitTick+0xa8>)
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <HAL_InitTick+0xac>)
 8003aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_InitTick+0xa8>)
 8003ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ab4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <HAL_InitTick+0xa8>)
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <HAL_InitTick+0xa8>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_InitTick+0xa8>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003ac8:	4809      	ldr	r0, [pc, #36]	; (8003af0 <HAL_InitTick+0xa8>)
 8003aca:	f004 f9e7 	bl	8007e9c <HAL_TIM_Base_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003ad4:	4806      	ldr	r0, [pc, #24]	; (8003af0 <HAL_InitTick+0xa8>)
 8003ad6:	f004 fa0d 	bl	8007ef4 <HAL_TIM_Base_Start_IT>
 8003ada:	4603      	mov	r3, r0
 8003adc:	e000      	b.n	8003ae0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3730      	adds	r7, #48	; 0x30
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	431bde83 	.word	0x431bde83
 8003af0:	2000faec 	.word	0x2000faec
 8003af4:	40001000 	.word	0x40001000

08003af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003afc:	e7fe      	b.n	8003afc <NMI_Handler+0x4>

08003afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b02:	e7fe      	b.n	8003b02 <HardFault_Handler+0x4>

08003b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b08:	e7fe      	b.n	8003b08 <MemManage_Handler+0x4>

08003b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b0e:	e7fe      	b.n	8003b0e <BusFault_Handler+0x4>

08003b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b14:	e7fe      	b.n	8003b14 <UsageFault_Handler+0x4>

08003b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <DMA1_Stream0_IRQHandler+0x10>)
 8003b2a:	f001 f95b 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2000fa84 	.word	0x2000fa84

08003b38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b3c:	4805      	ldr	r0, [pc, #20]	; (8003b54 <ADC_IRQHandler+0x1c>)
 8003b3e:	f000 f967 	bl	8003e10 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003b42:	4805      	ldr	r0, [pc, #20]	; (8003b58 <ADC_IRQHandler+0x20>)
 8003b44:	f000 f964 	bl	8003e10 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8003b48:	4804      	ldr	r0, [pc, #16]	; (8003b5c <ADC_IRQHandler+0x24>)
 8003b4a:	f000 f961 	bl	8003e10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000a9f8 	.word	0x2000a9f8
 8003b58:	20007ce0 	.word	0x20007ce0
 8003b5c:	2000aa44 	.word	0x2000aa44

08003b60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <TIM6_DAC_IRQHandler+0x10>)
 8003b66:	f004 fa24 	bl	8007fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000faec 	.word	0x2000faec

08003b74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b78:	4805      	ldr	r0, [pc, #20]	; (8003b90 <DMA2_Stream0_IRQHandler+0x1c>)
 8003b7a:	f001 f933 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 8003b7e:	4805      	ldr	r0, [pc, #20]	; (8003b94 <DMA2_Stream0_IRQHandler+0x20>)
 8003b80:	f000 fb76 	bl	8004270 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <DMA2_Stream0_IRQHandler+0x24>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000aaf0 	.word	0x2000aaf0
 8003b94:	2000a9f8 	.word	0x2000a9f8
 8003b98:	20008224 	.word	0x20008224

08003b9c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003ba0:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <DMA2_Stream1_IRQHandler+0x1c>)
 8003ba2:	f001 f91f 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8003ba6:	4805      	ldr	r0, [pc, #20]	; (8003bbc <DMA2_Stream1_IRQHandler+0x20>)
 8003ba8:	f000 fb62 	bl	8004270 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <DMA2_Stream1_IRQHandler+0x24>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200081c4 	.word	0x200081c4
 8003bbc:	2000aa44 	.word	0x2000aa44
 8003bc0:	20008224 	.word	0x20008224

08003bc4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003bc8:	4805      	ldr	r0, [pc, #20]	; (8003be0 <DMA2_Stream2_IRQHandler+0x1c>)
 8003bca:	f001 f90b 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8003bce:	4805      	ldr	r0, [pc, #20]	; (8003be4 <DMA2_Stream2_IRQHandler+0x20>)
 8003bd0:	f000 fb4e 	bl	8004270 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <DMA2_Stream2_IRQHandler+0x24>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000fa24 	.word	0x2000fa24
 8003be4:	20007ce0 	.word	0x20007ce0
 8003be8:	20008224 	.word	0x20008224

08003bec <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003bf0:	4802      	ldr	r0, [pc, #8]	; (8003bfc <SPI4_IRQHandler+0x10>)
 8003bf2:	f003 ff17 	bl	8007a24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000aa8c 	.word	0x2000aa8c

08003c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <_sbrk+0x5c>)
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <_sbrk+0x60>)
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <_sbrk+0x64>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <_sbrk+0x64>)
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <_sbrk+0x68>)
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <_sbrk+0x64>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d207      	bcs.n	8003c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c30:	f008 fe44 	bl	800c8bc <__errno>
 8003c34:	4602      	mov	r2, r0
 8003c36:	230c      	movs	r3, #12
 8003c38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e009      	b.n	8003c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <_sbrk+0x64>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <_sbrk+0x64>)
 8003c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20080000 	.word	0x20080000
 8003c60:	00000400 	.word	0x00000400
 8003c64:	200031fc 	.word	0x200031fc
 8003c68:	2000fb78 	.word	0x2000fb78

08003c6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <SystemInit+0x28>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <SystemInit+0x28>)
 8003c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <SystemInit+0x28>)
 8003c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c86:	609a      	str	r2, [r3, #8]
#endif
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c9e:	e003      	b.n	8003ca8 <LoopCopyDataInit>

08003ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ca6:	3104      	adds	r1, #4

08003ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003cb0:	d3f6      	bcc.n	8003ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cb4:	e002      	b.n	8003cbc <LoopFillZerobss>

08003cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cb8:	f842 3b04 	str.w	r3, [r2], #4

08003cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cc0:	d3f9      	bcc.n	8003cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cc2:	f7ff ffd3 	bl	8003c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cc6:	f008 fdff 	bl	800c8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cca:	f7fc ff1f 	bl	8000b0c <main>
  bx  lr    
 8003cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003cd0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003cd4:	080106f8 	.word	0x080106f8
  ldr  r0, =_sdata
 8003cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cdc:	2000028c 	.word	0x2000028c
  ldr  r2, =_sbss
 8003ce0:	2000028c 	.word	0x2000028c
  ldr  r3, = _ebss
 8003ce4:	2000fb74 	.word	0x2000fb74

08003ce8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ce8:	e7fe      	b.n	8003ce8 <CAN1_RX0_IRQHandler>

08003cea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cee:	2003      	movs	r0, #3
 8003cf0:	f000 fea3 	bl	8004a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7ff fea7 	bl	8003a48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003cfa:	f7ff f907 	bl	8002f0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_IncTick+0x20>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_IncTick+0x24>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <HAL_IncTick+0x24>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	200000b4 	.word	0x200000b4
 8003d28:	2000fb2c 	.word	0x2000fb2c

08003d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <HAL_GetTick+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000fb2c 	.word	0x2000fb2c

08003d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d4c:	f7ff ffee 	bl	8003d2c <HAL_GetTick>
 8003d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d005      	beq.n	8003d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_Delay+0x40>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d6a:	bf00      	nop
 8003d6c:	f7ff ffde 	bl	8003d2c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d8f7      	bhi.n	8003d6c <HAL_Delay+0x28>
  {
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200000b4 	.word	0x200000b4

08003d88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e031      	b.n	8003e02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff f8d8 	bl	8002f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d116      	bne.n	8003df4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_ADC_Init+0x84>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fbfc 	bl	80045d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
 8003df2:	e001      	b.n	8003df8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	ffffeefd 	.word	0xffffeefd

08003e10 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d049      	beq.n	8003ee6 <HAL_ADC_IRQHandler+0xd6>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d046      	beq.n	8003ee6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d12b      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d127      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d006      	beq.n	8003ea2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d119      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0220 	bic.w	r2, r2, #32
 8003eb0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fe feca 	bl	8002c70 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0212 	mvn.w	r2, #18
 8003ee4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d057      	beq.n	8003fc8 <HAL_ADC_IRQHandler+0x1b8>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d054      	beq.n	8003fc8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d139      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d12b      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d124      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11d      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d119      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f043 0201 	orr.w	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fc87 	bl	80048cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 020c 	mvn.w	r2, #12
 8003fc6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d017      	beq.n	800402a <HAL_ADC_IRQHandler+0x21a>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d014      	beq.n	800402a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d10d      	bne.n	800402a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f97c 	bl	8004318 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0201 	mvn.w	r2, #1
 8004028:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b20      	cmp	r3, #32
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800404a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_ADC_IRQHandler+0x27a>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d012      	beq.n	800408a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f043 0202 	orr.w	r2, r3, #2
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0220 	mvn.w	r2, #32
 8004078:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f956 	bl	800432c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0220 	mvn.w	r2, #32
 8004088:	601a      	str	r2, [r3, #0]
  }
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_Start_DMA+0x1e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0c7      	b.n	8004242 <HAL_ADC_Start_DMA+0x1ae>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d018      	beq.n	80040fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80040d8:	4b5c      	ldr	r3, [pc, #368]	; (800424c <HAL_ADC_Start_DMA+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5c      	ldr	r2, [pc, #368]	; (8004250 <HAL_ADC_Start_DMA+0x1bc>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0c9a      	lsrs	r2, r3, #18
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80040ec:	e002      	b.n	80040f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f9      	bne.n	80040ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	f040 809b 	bne.w	8004240 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <HAL_ADC_Start_DMA+0x1c0>)
 8004110:	4013      	ands	r3, r2
 8004112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004130:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d106      	bne.n	8004154 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f023 0206 	bic.w	r2, r3, #6
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
 8004152:	e002      	b.n	800415a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <HAL_ADC_Start_DMA+0x1c4>)
 8004168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	4a3b      	ldr	r2, [pc, #236]	; (800425c <HAL_ADC_Start_DMA+0x1c8>)
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	4a3a      	ldr	r2, [pc, #232]	; (8004260 <HAL_ADC_Start_DMA+0x1cc>)
 8004178:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004182:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004192:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	334c      	adds	r3, #76	; 0x4c
 80041ae:	4619      	mov	r1, r3
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f000 fd24 	bl	8004c00 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_ADC_Start_DMA+0x1d0>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10f      	bne.n	80041e4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d136      	bne.n	8004240 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041e0:	609a      	str	r2, [r3, #8]
 80041e2:	e02d      	b.n	8004240 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <HAL_ADC_Start_DMA+0x1d4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10e      	bne.n	800420c <HAL_ADC_Start_DMA+0x178>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800420a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_ADC_Start_DMA+0x1d0>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d113      	bne.n	8004240 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <HAL_ADC_Start_DMA+0x1d8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10e      	bne.n	8004240 <HAL_ADC_Start_DMA+0x1ac>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800423e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200000ac 	.word	0x200000ac
 8004250:	431bde83 	.word	0x431bde83
 8004254:	fffff8fe 	.word	0xfffff8fe
 8004258:	080047c9 	.word	0x080047c9
 800425c:	08004883 	.word	0x08004883
 8004260:	0800489f 	.word	0x0800489f
 8004264:	40012300 	.word	0x40012300
 8004268:	40012000 	.word	0x40012000
 800426c:	40012200 	.word	0x40012200

08004270 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_ADC_Stop_DMA+0x1a>
 8004286:	2302      	movs	r3, #2
 8004288:	e036      	b.n	80042f8 <HAL_ADC_Stop_DMA+0x88>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11e      	bne.n	80042ee <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042be:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fcfb 	bl	8004cc0 <HAL_DMA_Abort>
 80042ca:	4603      	mov	r3, r0
 80042cc:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80042dc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e2:	4b07      	ldr	r3, [pc, #28]	; (8004300 <HAL_ADC_Stop_DMA+0x90>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	ffffeefe 	.word	0xffffeefe

08004304 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_ADC_ConfigChannel+0x1c>
 8004358:	2302      	movs	r3, #2
 800435a:	e12a      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x272>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b09      	cmp	r3, #9
 800436a:	d93a      	bls.n	80043e2 <HAL_ADC_ConfigChannel+0xa2>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004374:	d035      	beq.n	80043e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68d9      	ldr	r1, [r3, #12]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	4613      	mov	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4413      	add	r3, r2
 800438a:	3b1e      	subs	r3, #30
 800438c:	2207      	movs	r2, #7
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43da      	mvns	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	400a      	ands	r2, r1
 800439a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a87      	ldr	r2, [pc, #540]	; (80045c0 <HAL_ADC_ConfigChannel+0x280>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10a      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	061a      	lsls	r2, r3, #24
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043ba:	e035      	b.n	8004428 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68d9      	ldr	r1, [r3, #12]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	4618      	mov	r0, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4403      	add	r3, r0
 80043d4:	3b1e      	subs	r3, #30
 80043d6:	409a      	lsls	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043e0:	e022      	b.n	8004428 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6919      	ldr	r1, [r3, #16]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	2207      	movs	r2, #7
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43da      	mvns	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	400a      	ands	r2, r1
 8004404:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6919      	ldr	r1, [r3, #16]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	4618      	mov	r0, r3
 8004418:	4603      	mov	r3, r0
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4403      	add	r3, r0
 800441e:	409a      	lsls	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b06      	cmp	r3, #6
 800442e:	d824      	bhi.n	800447a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	3b05      	subs	r3, #5
 8004442:	221f      	movs	r2, #31
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43da      	mvns	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	400a      	ands	r2, r1
 8004450:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	4618      	mov	r0, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	3b05      	subs	r3, #5
 800446c:	fa00 f203 	lsl.w	r2, r0, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	635a      	str	r2, [r3, #52]	; 0x34
 8004478:	e04c      	b.n	8004514 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b0c      	cmp	r3, #12
 8004480:	d824      	bhi.n	80044cc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	3b23      	subs	r3, #35	; 0x23
 8004494:	221f      	movs	r2, #31
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43da      	mvns	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	400a      	ands	r2, r1
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	4618      	mov	r0, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	3b23      	subs	r3, #35	; 0x23
 80044be:	fa00 f203 	lsl.w	r2, r0, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30
 80044ca:	e023      	b.n	8004514 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	3b41      	subs	r3, #65	; 0x41
 80044de:	221f      	movs	r2, #31
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43da      	mvns	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	400a      	ands	r2, r1
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	3b41      	subs	r3, #65	; 0x41
 8004508:	fa00 f203 	lsl.w	r2, r0, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_ADC_ConfigChannel+0x284>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10a      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x1f4>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004526:	d105      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_ADC_ConfigChannel+0x288>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <HAL_ADC_ConfigChannel+0x288>)
 800452e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004532:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <HAL_ADC_ConfigChannel+0x284>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d109      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x212>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b12      	cmp	r3, #18
 8004544:	d105      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_ADC_ConfigChannel+0x288>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <HAL_ADC_ConfigChannel+0x288>)
 800454c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004550:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_ADC_ConfigChannel+0x284>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d125      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x268>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <HAL_ADC_ConfigChannel+0x280>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <HAL_ADC_ConfigChannel+0x22e>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b11      	cmp	r3, #17
 800456c:	d11c      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <HAL_ADC_ConfigChannel+0x288>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <HAL_ADC_ConfigChannel+0x288>)
 8004574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004578:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a10      	ldr	r2, [pc, #64]	; (80045c0 <HAL_ADC_ConfigChannel+0x280>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d111      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_ADC_ConfigChannel+0x28c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <HAL_ADC_ConfigChannel+0x290>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0c9a      	lsrs	r2, r3, #18
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800459a:	e002      	b.n	80045a2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3b01      	subs	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f9      	bne.n	800459c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	10000012 	.word	0x10000012
 80045c4:	40012000 	.word	0x40012000
 80045c8:	40012300 	.word	0x40012300
 80045cc:	200000ac 	.word	0x200000ac
 80045d0:	431bde83 	.word	0x431bde83

080045d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80045dc:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <ADC_Init+0x1ec>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a77      	ldr	r2, [pc, #476]	; (80047c0 <ADC_Init+0x1ec>)
 80045e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80045e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80045e8:	4b75      	ldr	r3, [pc, #468]	; (80047c0 <ADC_Init+0x1ec>)
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4973      	ldr	r1, [pc, #460]	; (80047c0 <ADC_Init+0x1ec>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	021a      	lsls	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6899      	ldr	r1, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	4a58      	ldr	r2, [pc, #352]	; (80047c4 <ADC_Init+0x1f0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d022      	beq.n	80046ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6899      	ldr	r1, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6899      	ldr	r1, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	e00f      	b.n	80046ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0202 	bic.w	r2, r2, #2
 80046dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6899      	ldr	r1, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	005a      	lsls	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800471a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	3b01      	subs	r3, #1
 8004728:	035a      	lsls	r2, r3, #13
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	e007      	b.n	8004744 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004742:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	3b01      	subs	r3, #1
 8004760:	051a      	lsls	r2, r3, #20
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004786:	025a      	lsls	r2, r3, #9
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	029a      	lsls	r2, r3, #10
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40012300 	.word	0x40012300
 80047c4:	0f000001 	.word	0x0f000001

080047c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d13c      	bne.n	800485c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d12b      	bne.n	8004854 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	d127      	bne.n	8004854 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800480e:	2b00      	cmp	r3, #0
 8004810:	d006      	beq.n	8004820 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800481c:	2b00      	cmp	r3, #0
 800481e:	d119      	bne.n	8004854 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0220 	bic.w	r2, r2, #32
 800482e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7fe fa0b 	bl	8002c70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800485a:	e00e      	b.n	800487a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff fd5f 	bl	800432c <HAL_ADC_ErrorCallback>
}
 800486e:	e004      	b.n	800487a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff fd37 	bl	8004304 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2240      	movs	r2, #64	; 0x40
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	f043 0204 	orr.w	r2, r3, #4
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff fd34 	bl	800432c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <__NVIC_SetPriorityGrouping+0x40>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048fc:	4013      	ands	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <__NVIC_SetPriorityGrouping+0x44>)
 800490a:	4313      	orrs	r3, r2
 800490c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800490e:	4a04      	ldr	r2, [pc, #16]	; (8004920 <__NVIC_SetPriorityGrouping+0x40>)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	60d3      	str	r3, [r2, #12]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00
 8004924:	05fa0000 	.word	0x05fa0000

08004928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <__NVIC_GetPriorityGrouping+0x18>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	f003 0307 	and.w	r3, r3, #7
}
 8004936:	4618      	mov	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	2b00      	cmp	r3, #0
 8004954:	db0b      	blt.n	800496e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	f003 021f 	and.w	r2, r3, #31
 800495c:	4907      	ldr	r1, [pc, #28]	; (800497c <__NVIC_EnableIRQ+0x38>)
 800495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2001      	movs	r0, #1
 8004966:	fa00 f202 	lsl.w	r2, r0, r2
 800496a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	e000e100 	.word	0xe000e100

08004980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004990:	2b00      	cmp	r3, #0
 8004992:	db0a      	blt.n	80049aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	490c      	ldr	r1, [pc, #48]	; (80049cc <__NVIC_SetPriority+0x4c>)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	0112      	lsls	r2, r2, #4
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	440b      	add	r3, r1
 80049a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049a8:	e00a      	b.n	80049c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4908      	ldr	r1, [pc, #32]	; (80049d0 <__NVIC_SetPriority+0x50>)
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	3b04      	subs	r3, #4
 80049b8:	0112      	lsls	r2, r2, #4
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	440b      	add	r3, r1
 80049be:	761a      	strb	r2, [r3, #24]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	e000e100 	.word	0xe000e100
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f1c3 0307 	rsb	r3, r3, #7
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	bf28      	it	cs
 80049f2:	2304      	movcs	r3, #4
 80049f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d902      	bls.n	8004a04 <NVIC_EncodePriority+0x30>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	3b03      	subs	r3, #3
 8004a02:	e000      	b.n	8004a06 <NVIC_EncodePriority+0x32>
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a08:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43da      	mvns	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	401a      	ands	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	43d9      	mvns	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a2c:	4313      	orrs	r3, r2
         );
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3724      	adds	r7, #36	; 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff ff4c 	bl	80048e0 <__NVIC_SetPriorityGrouping>
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a62:	f7ff ff61 	bl	8004928 <__NVIC_GetPriorityGrouping>
 8004a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	6978      	ldr	r0, [r7, #20]
 8004a6e:	f7ff ffb1 	bl	80049d4 <NVIC_EncodePriority>
 8004a72:	4602      	mov	r2, r0
 8004a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff ff80 	bl	8004980 <__NVIC_SetPriority>
}
 8004a80:	bf00      	nop
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff ff54 	bl	8004944 <__NVIC_EnableIRQ>
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ab0:	f7ff f93c 	bl	8003d2c <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e099      	b.n	8004bf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ae0:	e00f      	b.n	8004b02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ae2:	f7ff f923 	bl	8003d2c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d908      	bls.n	8004b02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2203      	movs	r2, #3
 8004afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e078      	b.n	8004bf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e8      	bne.n	8004ae2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <HAL_DMA_Init+0x158>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d107      	bne.n	8004b6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	4313      	orrs	r3, r2
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0307 	bic.w	r3, r3, #7
 8004b82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d117      	bne.n	8004bc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fb09 	bl	80051c0 <DMA_CheckFifoParam>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2240      	movs	r2, #64	; 0x40
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e016      	b.n	8004bf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fac0 	bl	8005154 <DMA_CalcBaseAndBitshift>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bdc:	223f      	movs	r2, #63	; 0x3f
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	e010803f 	.word	0xe010803f

08004c00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_DMA_Start_IT+0x26>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e048      	b.n	8004cb8 <HAL_DMA_Start_IT+0xb8>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d137      	bne.n	8004caa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fa52 	bl	80050f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	223f      	movs	r2, #63	; 0x3f
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0216 	orr.w	r2, r2, #22
 8004c6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c7e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0208 	orr.w	r2, r2, #8
 8004c96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e005      	b.n	8004cb6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cce:	f7ff f82d 	bl	8003d2c <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d008      	beq.n	8004cf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2280      	movs	r2, #128	; 0x80
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e052      	b.n	8004d98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0216 	bic.w	r2, r2, #22
 8004d00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <HAL_DMA_Abort+0x62>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0208 	bic.w	r2, r2, #8
 8004d30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d42:	e013      	b.n	8004d6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d44:	f7fe fff2 	bl	8003d2c <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d90c      	bls.n	8004d6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e015      	b.n	8004d98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e4      	bne.n	8004d44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	223f      	movs	r2, #63	; 0x3f
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d004      	beq.n	8004dbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e00c      	b.n	8004dd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2205      	movs	r2, #5
 8004dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004df0:	4b92      	ldr	r3, [pc, #584]	; (800503c <HAL_DMA_IRQHandler+0x258>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a92      	ldr	r2, [pc, #584]	; (8005040 <HAL_DMA_IRQHandler+0x25c>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0a9b      	lsrs	r3, r3, #10
 8004dfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0e:	2208      	movs	r2, #8
 8004e10:	409a      	lsls	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01a      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0204 	bic.w	r2, r2, #4
 8004e36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	f043 0201 	orr.w	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	2201      	movs	r2, #1
 8004e56:	409a      	lsls	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	2201      	movs	r2, #1
 8004e74:	409a      	lsls	r2, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	f043 0202 	orr.w	r2, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d012      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f043 0204 	orr.w	r2, r3, #4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d043      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d03c      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	2210      	movs	r2, #16
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d018      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d108      	bne.n	8004f14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d024      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
 8004f12:	e01f      	b.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01b      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
 8004f24:	e016      	b.n	8004f54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0208 	bic.w	r2, r2, #8
 8004f42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	2220      	movs	r2, #32
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 808e 	beq.w	8005082 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8086 	beq.w	8005082 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d136      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0216 	bic.w	r2, r2, #22
 8004f9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <HAL_DMA_IRQHandler+0x1da>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0208 	bic.w	r2, r2, #8
 8004fcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	223f      	movs	r2, #63	; 0x3f
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d07d      	beq.n	80050ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
        }
        return;
 8004ffa:	e078      	b.n	80050ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01c      	beq.n	8005044 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	2b00      	cmp	r3, #0
 800501e:	d030      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
 8005028:	e02b      	b.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d027      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
 800503a:	e022      	b.n	8005082 <HAL_DMA_IRQHandler+0x29e>
 800503c:	200000ac 	.word	0x200000ac
 8005040:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10f      	bne.n	8005072 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0210 	bic.w	r2, r2, #16
 8005060:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	2b00      	cmp	r3, #0
 8005088:	d032      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d022      	beq.n	80050dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2205      	movs	r2, #5
 800509a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d307      	bcc.n	80050ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f2      	bne.n	80050ae <HAL_DMA_IRQHandler+0x2ca>
 80050c8:	e000      	b.n	80050cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80050ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	4798      	blx	r3
 80050ec:	e000      	b.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80050ee:	bf00      	nop
    }
  }
}
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005114:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d108      	bne.n	8005138 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005136:	e007      	b.n	8005148 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	3b10      	subs	r3, #16
 8005164:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <DMA_CalcBaseAndBitshift+0x60>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d908      	bls.n	8005194 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <DMA_CalcBaseAndBitshift+0x68>)
 800518a:	4013      	ands	r3, r2
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	659a      	str	r2, [r3, #88]	; 0x58
 8005192:	e006      	b.n	80051a2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	4b08      	ldr	r3, [pc, #32]	; (80051bc <DMA_CalcBaseAndBitshift+0x68>)
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	aaaaaaab 	.word	0xaaaaaaab
 80051b8:	0801042c 	.word	0x0801042c
 80051bc:	fffffc00 	.word	0xfffffc00

080051c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11f      	bne.n	800521a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d855      	bhi.n	800528c <DMA_CheckFifoParam+0xcc>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <DMA_CheckFifoParam+0x28>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	0800520b 	.word	0x0800520b
 80051f0:	080051f9 	.word	0x080051f9
 80051f4:	0800528d 	.word	0x0800528d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d045      	beq.n	8005290 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005208:	e042      	b.n	8005290 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005212:	d13f      	bne.n	8005294 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005218:	e03c      	b.n	8005294 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	d121      	bne.n	8005268 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d836      	bhi.n	8005298 <DMA_CheckFifoParam+0xd8>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <DMA_CheckFifoParam+0x70>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005241 	.word	0x08005241
 8005234:	08005247 	.word	0x08005247
 8005238:	08005241 	.word	0x08005241
 800523c:	08005259 	.word	0x08005259
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
      break;
 8005244:	e02f      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d024      	beq.n	800529c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005256:	e021      	b.n	800529c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005260:	d11e      	bne.n	80052a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005266:	e01b      	b.n	80052a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d902      	bls.n	8005274 <DMA_CheckFifoParam+0xb4>
 800526e:	2b03      	cmp	r3, #3
 8005270:	d003      	beq.n	800527a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005272:	e018      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
      break;
 8005278:	e015      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      break;
 800528a:	e00b      	b.n	80052a4 <DMA_CheckFifoParam+0xe4>
      break;
 800528c:	bf00      	nop
 800528e:	e00a      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 8005290:	bf00      	nop
 8005292:	e008      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 8005294:	bf00      	nop
 8005296:	e006      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 8005298:	bf00      	nop
 800529a:	e004      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 800529c:	bf00      	nop
 800529e:	e002      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80052a0:	bf00      	nop
 80052a2:	e000      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 80052a4:	bf00      	nop
    }
  } 
  
  return status; 
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e175      	b.n	80055c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052d4:	2201      	movs	r2, #1
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4013      	ands	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	f040 8164 	bne.w	80055ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d00b      	beq.n	8005312 <HAL_GPIO_Init+0x5e>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d007      	beq.n	8005312 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005306:	2b11      	cmp	r3, #17
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b12      	cmp	r3, #18
 8005310:	d130      	bne.n	8005374 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	2203      	movs	r2, #3
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005348:	2201      	movs	r2, #1
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 0201 	and.w	r2, r3, #1
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	2203      	movs	r2, #3
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_Init+0x100>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b12      	cmp	r3, #18
 80053b2:	d123      	bne.n	80053fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	08da      	lsrs	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3208      	adds	r2, #8
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	220f      	movs	r2, #15
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	08da      	lsrs	r2, r3, #3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3208      	adds	r2, #8
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2203      	movs	r2, #3
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0203 	and.w	r2, r3, #3
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80be 	beq.w	80055ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543e:	4b65      	ldr	r3, [pc, #404]	; (80055d4 <HAL_GPIO_Init+0x320>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	4a64      	ldr	r2, [pc, #400]	; (80055d4 <HAL_GPIO_Init+0x320>)
 8005444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005448:	6453      	str	r3, [r2, #68]	; 0x44
 800544a:	4b62      	ldr	r3, [pc, #392]	; (80055d4 <HAL_GPIO_Init+0x320>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005456:	4a60      	ldr	r2, [pc, #384]	; (80055d8 <HAL_GPIO_Init+0x324>)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	3302      	adds	r3, #2
 800545e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005462:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	220f      	movs	r2, #15
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43db      	mvns	r3, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4013      	ands	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a57      	ldr	r2, [pc, #348]	; (80055dc <HAL_GPIO_Init+0x328>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d037      	beq.n	80054f2 <HAL_GPIO_Init+0x23e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a56      	ldr	r2, [pc, #344]	; (80055e0 <HAL_GPIO_Init+0x32c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d031      	beq.n	80054ee <HAL_GPIO_Init+0x23a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a55      	ldr	r2, [pc, #340]	; (80055e4 <HAL_GPIO_Init+0x330>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02b      	beq.n	80054ea <HAL_GPIO_Init+0x236>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a54      	ldr	r2, [pc, #336]	; (80055e8 <HAL_GPIO_Init+0x334>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d025      	beq.n	80054e6 <HAL_GPIO_Init+0x232>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a53      	ldr	r2, [pc, #332]	; (80055ec <HAL_GPIO_Init+0x338>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01f      	beq.n	80054e2 <HAL_GPIO_Init+0x22e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a52      	ldr	r2, [pc, #328]	; (80055f0 <HAL_GPIO_Init+0x33c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d019      	beq.n	80054de <HAL_GPIO_Init+0x22a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a51      	ldr	r2, [pc, #324]	; (80055f4 <HAL_GPIO_Init+0x340>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_GPIO_Init+0x226>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a50      	ldr	r2, [pc, #320]	; (80055f8 <HAL_GPIO_Init+0x344>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00d      	beq.n	80054d6 <HAL_GPIO_Init+0x222>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a4f      	ldr	r2, [pc, #316]	; (80055fc <HAL_GPIO_Init+0x348>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d007      	beq.n	80054d2 <HAL_GPIO_Init+0x21e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a4e      	ldr	r2, [pc, #312]	; (8005600 <HAL_GPIO_Init+0x34c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d101      	bne.n	80054ce <HAL_GPIO_Init+0x21a>
 80054ca:	2309      	movs	r3, #9
 80054cc:	e012      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054ce:	230a      	movs	r3, #10
 80054d0:	e010      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054d2:	2308      	movs	r3, #8
 80054d4:	e00e      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054d6:	2307      	movs	r3, #7
 80054d8:	e00c      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054da:	2306      	movs	r3, #6
 80054dc:	e00a      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054de:	2305      	movs	r3, #5
 80054e0:	e008      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054e2:	2304      	movs	r3, #4
 80054e4:	e006      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054e6:	2303      	movs	r3, #3
 80054e8:	e004      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e002      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_GPIO_Init+0x240>
 80054f2:	2300      	movs	r3, #0
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	f002 0203 	and.w	r2, r2, #3
 80054fa:	0092      	lsls	r2, r2, #2
 80054fc:	4093      	lsls	r3, r2
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4313      	orrs	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005504:	4934      	ldr	r1, [pc, #208]	; (80055d8 <HAL_GPIO_Init+0x324>)
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	089b      	lsrs	r3, r3, #2
 800550a:	3302      	adds	r3, #2
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005512:	4b3c      	ldr	r3, [pc, #240]	; (8005604 <HAL_GPIO_Init+0x350>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005536:	4a33      	ldr	r2, [pc, #204]	; (8005604 <HAL_GPIO_Init+0x350>)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800553c:	4b31      	ldr	r3, [pc, #196]	; (8005604 <HAL_GPIO_Init+0x350>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005560:	4a28      	ldr	r2, [pc, #160]	; (8005604 <HAL_GPIO_Init+0x350>)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005566:	4b27      	ldr	r3, [pc, #156]	; (8005604 <HAL_GPIO_Init+0x350>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	43db      	mvns	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800558a:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_GPIO_Init+0x350>)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <HAL_GPIO_Init+0x350>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055b4:	4a13      	ldr	r2, [pc, #76]	; (8005604 <HAL_GPIO_Init+0x350>)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3301      	adds	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b0f      	cmp	r3, #15
 80055c4:	f67f ae86 	bls.w	80052d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055c8:	bf00      	nop
 80055ca:	3724      	adds	r7, #36	; 0x24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40013800 	.word	0x40013800
 80055dc:	40020000 	.word	0x40020000
 80055e0:	40020400 	.word	0x40020400
 80055e4:	40020800 	.word	0x40020800
 80055e8:	40020c00 	.word	0x40020c00
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40021400 	.word	0x40021400
 80055f4:	40021800 	.word	0x40021800
 80055f8:	40021c00 	.word	0x40021c00
 80055fc:	40022000 	.word	0x40022000
 8005600:	40022400 	.word	0x40022400
 8005604:	40013c00 	.word	0x40013c00

08005608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	887b      	ldrh	r3, [r7, #2]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
 8005624:	e001      	b.n	800562a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
 8005644:	4613      	mov	r3, r2
 8005646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005648:	787b      	ldrb	r3, [r7, #1]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800564e:	887a      	ldrh	r2, [r7, #2]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005654:	e003      	b.n	800565e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	041a      	lsls	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	619a      	str	r2, [r3, #24]
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005682:	887b      	ldrh	r3, [r7, #2]
 8005684:	041a      	lsls	r2, r3, #16
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800568a:	e002      	b.n	8005692 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800568c:	887a      	ldrh	r2, [r7, #2]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	619a      	str	r2, [r3, #24]
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e07f      	b.n	80057b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fd fe34 	bl	8003334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005700:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d107      	bne.n	800571a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005716:	609a      	str	r2, [r3, #8]
 8005718:	e006      	b.n	8005728 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005726:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d104      	bne.n	800573a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005738:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6859      	ldr	r1, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <HAL_I2C_Init+0x11c>)
 8005746:	430b      	orrs	r3, r1
 8005748:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005758:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	ea42 0103 	orr.w	r1, r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69d9      	ldr	r1, [r3, #28]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	02008000 	.word	0x02008000

080057c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	607a      	str	r2, [r7, #4]
 80057ca:	461a      	mov	r2, r3
 80057cc:	460b      	mov	r3, r1
 80057ce:	817b      	strh	r3, [r7, #10]
 80057d0:	4613      	mov	r3, r2
 80057d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b20      	cmp	r3, #32
 80057de:	f040 80da 	bne.w	8005996 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_I2C_Master_Transmit+0x30>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e0d3      	b.n	8005998 <HAL_I2C_Master_Transmit+0x1d8>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057f8:	f7fe fa98 	bl	8003d2c <HAL_GetTick>
 80057fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	2319      	movs	r3, #25
 8005804:	2201      	movs	r2, #1
 8005806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f9e6 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e0be      	b.n	8005998 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2221      	movs	r2, #33	; 0x21
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2210      	movs	r2, #16
 8005826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	893a      	ldrh	r2, [r7, #8]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2bff      	cmp	r3, #255	; 0xff
 800584a:	d90e      	bls.n	800586a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	22ff      	movs	r2, #255	; 0xff
 8005850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005856:	b2da      	uxtb	r2, r3
 8005858:	8979      	ldrh	r1, [r7, #10]
 800585a:	4b51      	ldr	r3, [pc, #324]	; (80059a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fb48 	bl	8005ef8 <I2C_TransferConfig>
 8005868:	e06c      	b.n	8005944 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005878:	b2da      	uxtb	r2, r3
 800587a:	8979      	ldrh	r1, [r7, #10]
 800587c:	4b48      	ldr	r3, [pc, #288]	; (80059a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fb37 	bl	8005ef8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800588a:	e05b      	b.n	8005944 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	6a39      	ldr	r1, [r7, #32]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f9e3 	bl	8005c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e07b      	b.n	8005998 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d034      	beq.n	8005944 <HAL_I2C_Master_Transmit+0x184>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d130      	bne.n	8005944 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2200      	movs	r2, #0
 80058ea:	2180      	movs	r1, #128	; 0x80
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f975 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e04d      	b.n	8005998 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2bff      	cmp	r3, #255	; 0xff
 8005904:	d90e      	bls.n	8005924 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	22ff      	movs	r2, #255	; 0xff
 800590a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005910:	b2da      	uxtb	r2, r3
 8005912:	8979      	ldrh	r1, [r7, #10]
 8005914:	2300      	movs	r3, #0
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 faeb 	bl	8005ef8 <I2C_TransferConfig>
 8005922:	e00f      	b.n	8005944 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005932:	b2da      	uxtb	r2, r3
 8005934:	8979      	ldrh	r1, [r7, #10]
 8005936:	2300      	movs	r3, #0
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fada 	bl	8005ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d19e      	bne.n	800588c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	6a39      	ldr	r1, [r7, #32]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f9c2 	bl	8005cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e01a      	b.n	8005998 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2220      	movs	r2, #32
 8005968:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8005976:	400b      	ands	r3, r1
 8005978:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	80002000 	.word	0x80002000
 80059a4:	fe00e800 	.word	0xfe00e800

080059a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	461a      	mov	r2, r3
 80059b4:	460b      	mov	r3, r1
 80059b6:	817b      	strh	r3, [r7, #10]
 80059b8:	4613      	mov	r3, r2
 80059ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	f040 80db 	bne.w	8005b80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_I2C_Master_Receive+0x30>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e0d4      	b.n	8005b82 <HAL_I2C_Master_Receive+0x1da>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059e0:	f7fe f9a4 	bl	8003d2c <HAL_GetTick>
 80059e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2319      	movs	r3, #25
 80059ec:	2201      	movs	r2, #1
 80059ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f8f2 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0bf      	b.n	8005b82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2222      	movs	r2, #34	; 0x22
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	893a      	ldrh	r2, [r7, #8]
 8005a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2bff      	cmp	r3, #255	; 0xff
 8005a32:	d90e      	bls.n	8005a52 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	8979      	ldrh	r1, [r7, #10]
 8005a42:	4b52      	ldr	r3, [pc, #328]	; (8005b8c <HAL_I2C_Master_Receive+0x1e4>)
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fa54 	bl	8005ef8 <I2C_TransferConfig>
 8005a50:	e06d      	b.n	8005b2e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	8979      	ldrh	r1, [r7, #10]
 8005a64:	4b49      	ldr	r3, [pc, #292]	; (8005b8c <HAL_I2C_Master_Receive+0x1e4>)
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fa43 	bl	8005ef8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005a72:	e05c      	b.n	8005b2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	6a39      	ldr	r1, [r7, #32]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f96b 	bl	8005d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e07c      	b.n	8005b82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d034      	beq.n	8005b2e <HAL_I2C_Master_Receive+0x186>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d130      	bne.n	8005b2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2180      	movs	r1, #128	; 0x80
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f880 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e04d      	b.n	8005b82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2bff      	cmp	r3, #255	; 0xff
 8005aee:	d90e      	bls.n	8005b0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	22ff      	movs	r2, #255	; 0xff
 8005af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	8979      	ldrh	r1, [r7, #10]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f9f6 	bl	8005ef8 <I2C_TransferConfig>
 8005b0c:	e00f      	b.n	8005b2e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	8979      	ldrh	r1, [r7, #10]
 8005b20:	2300      	movs	r3, #0
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f9e5 	bl	8005ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d19d      	bne.n	8005a74 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	6a39      	ldr	r1, [r7, #32]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f8cd 	bl	8005cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e01a      	b.n	8005b82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2220      	movs	r2, #32
 8005b52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6859      	ldr	r1, [r3, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <HAL_I2C_Master_Receive+0x1e8>)
 8005b60:	400b      	ands	r3, r1
 8005b62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	80002400 	.word	0x80002400
 8005b90:	fe00e800 	.word	0xfe00e800

08005b94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d103      	bne.n	8005bb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d007      	beq.n	8005bd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	619a      	str	r2, [r3, #24]
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bec:	e022      	b.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d01e      	beq.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf6:	f7fe f899 	bl	8003d2c <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d302      	bcc.n	8005c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d113      	bne.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c10:	f043 0220 	orr.w	r2, r3, #32
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e00f      	b.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	bf0c      	ite	eq
 8005c44:	2301      	moveq	r3, #1
 8005c46:	2300      	movne	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d0cd      	beq.n	8005bee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c68:	e02c      	b.n	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f8dc 	bl	8005e2c <I2C_IsAcknowledgeFailed>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e02a      	b.n	8005cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d01e      	beq.n	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fe f851 	bl	8003d2c <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d113      	bne.n	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	f043 0220 	orr.w	r2, r3, #32
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e007      	b.n	8005cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d1cb      	bne.n	8005c6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce8:	e028      	b.n	8005d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f89c 	bl	8005e2c <I2C_IsAcknowledgeFailed>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e026      	b.n	8005d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfe:	f7fe f815 	bl	8003d2c <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d302      	bcc.n	8005d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d113      	bne.n	8005d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e007      	b.n	8005d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d1cf      	bne.n	8005cea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d60:	e055      	b.n	8005e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f860 	bl	8005e2c <I2C_IsAcknowledgeFailed>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e053      	b.n	8005e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d129      	bne.n	8005dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d105      	bne.n	8005d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e03f      	b.n	8005e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2220      	movs	r2, #32
 8005da4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005db2:	400b      	ands	r3, r1
 8005db4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e022      	b.n	8005e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd8:	f7fd ffa8 	bl	8003d2c <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d302      	bcc.n	8005dee <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e007      	b.n	8005e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d1a2      	bne.n	8005d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	fe00e800 	.word	0xfe00e800

08005e2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d151      	bne.n	8005eea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e46:	e022      	b.n	8005e8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d01e      	beq.n	8005e8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e50:	f7fd ff6c 	bl	8003d2c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d302      	bcc.n	8005e66 <I2C_IsAcknowledgeFailed+0x3a>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d113      	bne.n	8005e8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	f043 0220 	orr.w	r2, r3, #32
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e02e      	b.n	8005eec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d1d5      	bne.n	8005e48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff fe71 	bl	8005b94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6859      	ldr	r1, [r3, #4]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <I2C_IsAcknowledgeFailed+0xc8>)
 8005ebe:	400b      	ands	r3, r1
 8005ec0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	f043 0204 	orr.w	r2, r3, #4
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	fe00e800 	.word	0xfe00e800

08005ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	817b      	strh	r3, [r7, #10]
 8005f06:	4613      	mov	r3, r2
 8005f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	0d5b      	lsrs	r3, r3, #21
 8005f14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f18:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <I2C_TransferConfig+0x58>)
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	ea02 0103 	and.w	r1, r2, r3
 8005f22:	897b      	ldrh	r3, [r7, #10]
 8005f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f28:	7a7b      	ldrb	r3, [r7, #9]
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	03ff63ff 	.word	0x03ff63ff

08005f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d138      	bne.n	8005fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e032      	b.n	8005fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2224      	movs	r2, #36	; 0x24
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6819      	ldr	r1, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d139      	bne.n	8006074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800600a:	2302      	movs	r3, #2
 800600c:	e033      	b.n	8006076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2224      	movs	r2, #36	; 0x24
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800603c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	e000      	b.n	8006076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006074:	2302      	movs	r3, #2
  }
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006084:	b08f      	sub	sp, #60	; 0x3c
 8006086:	af0a      	add	r7, sp, #40	; 0x28
 8006088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e116      	b.n	80062c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fd fc7c 	bl	80039ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2203      	movs	r2, #3
 80060b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f003 fc0e 	bl	80098f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	687e      	ldr	r6, [r7, #4]
 80060e0:	466d      	mov	r5, sp
 80060e2:	f106 0410 	add.w	r4, r6, #16
 80060e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80060f6:	1d33      	adds	r3, r6, #4
 80060f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060fa:	6838      	ldr	r0, [r7, #0]
 80060fc:	f003 fba2 	bl	8009844 <USB_CoreInit>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e0d7      	b.n	80062c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2100      	movs	r1, #0
 8006118:	4618      	mov	r0, r3
 800611a:	f003 fbfc 	bl	8009916 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
 8006122:	e04a      	b.n	80061ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	333d      	adds	r3, #61	; 0x3d
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	333c      	adds	r3, #60	; 0x3c
 8006148:	7bfa      	ldrb	r2, [r7, #15]
 800614a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	b298      	uxth	r0, r3
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	3342      	adds	r3, #66	; 0x42
 8006160:	4602      	mov	r2, r0
 8006162:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006164:	7bfa      	ldrb	r2, [r7, #15]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	333f      	adds	r3, #63	; 0x3f
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006178:	7bfa      	ldrb	r2, [r7, #15]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	3344      	adds	r3, #68	; 0x44
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800618c:	7bfa      	ldrb	r2, [r7, #15]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	3348      	adds	r3, #72	; 0x48
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061a0:	7bfa      	ldrb	r2, [r7, #15]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	3350      	adds	r3, #80	; 0x50
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	3301      	adds	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d3af      	bcc.n	8006124 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061c4:	2300      	movs	r3, #0
 80061c6:	73fb      	strb	r3, [r7, #15]
 80061c8:	e044      	b.n	8006254 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061ca:	7bfa      	ldrb	r2, [r7, #15]
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80061dc:	2200      	movs	r2, #0
 80061de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061e0:	7bfa      	ldrb	r2, [r7, #15]
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	1a9b      	subs	r3, r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80061f2:	7bfa      	ldrb	r2, [r7, #15]
 80061f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061f6:	7bfa      	ldrb	r2, [r7, #15]
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800620c:	7bfa      	ldrb	r2, [r7, #15]
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006222:	7bfa      	ldrb	r2, [r7, #15]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006238:	7bfa      	ldrb	r2, [r7, #15]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	3301      	adds	r3, #1
 8006252:	73fb      	strb	r3, [r7, #15]
 8006254:	7bfa      	ldrb	r2, [r7, #15]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d3b5      	bcc.n	80061ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	687e      	ldr	r6, [r7, #4]
 8006266:	466d      	mov	r5, sp
 8006268:	f106 0410 	add.w	r4, r6, #16
 800626c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800626e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006274:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006278:	e885 0003 	stmia.w	r5, {r0, r1}
 800627c:	1d33      	adds	r3, r6, #4
 800627e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006280:	6838      	ldr	r0, [r7, #0]
 8006282:	f003 fb73 	bl	800996c <USB_DevInit>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e014      	b.n	80062c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d102      	bne.n	80062b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f80b 	bl	80062cc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f003 fd25 	bl	8009d0a <USB_DevDisconnect>

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080062cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_PCDEx_ActivateLPM+0x44>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	10000003 	.word	0x10000003

08006314 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a04      	ldr	r2, [pc, #16]	; (8006330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800631e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006322:	6013      	str	r3, [r2, #0]
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40007000 	.word	0x40007000

08006334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800633c:	2300      	movs	r3, #0
 800633e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e29b      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8087 	beq.w	8006466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006358:	4b96      	ldr	r3, [pc, #600]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 030c 	and.w	r3, r3, #12
 8006360:	2b04      	cmp	r3, #4
 8006362:	d00c      	beq.n	800637e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006364:	4b93      	ldr	r3, [pc, #588]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b08      	cmp	r3, #8
 800636e:	d112      	bne.n	8006396 <HAL_RCC_OscConfig+0x62>
 8006370:	4b90      	ldr	r3, [pc, #576]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800637c:	d10b      	bne.n	8006396 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637e:	4b8d      	ldr	r3, [pc, #564]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06c      	beq.n	8006464 <HAL_RCC_OscConfig+0x130>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d168      	bne.n	8006464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e275      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639e:	d106      	bne.n	80063ae <HAL_RCC_OscConfig+0x7a>
 80063a0:	4b84      	ldr	r3, [pc, #528]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a83      	ldr	r2, [pc, #524]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	e02e      	b.n	800640c <HAL_RCC_OscConfig+0xd8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x9c>
 80063b6:	4b7f      	ldr	r3, [pc, #508]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7e      	ldr	r2, [pc, #504]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4b7c      	ldr	r3, [pc, #496]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a7b      	ldr	r2, [pc, #492]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e01d      	b.n	800640c <HAL_RCC_OscConfig+0xd8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0xc0>
 80063da:	4b76      	ldr	r3, [pc, #472]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a75      	ldr	r2, [pc, #468]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b73      	ldr	r3, [pc, #460]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a72      	ldr	r2, [pc, #456]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e00b      	b.n	800640c <HAL_RCC_OscConfig+0xd8>
 80063f4:	4b6f      	ldr	r3, [pc, #444]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6e      	ldr	r2, [pc, #440]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80063fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4b6c      	ldr	r3, [pc, #432]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a6b      	ldr	r2, [pc, #428]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800640a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d013      	beq.n	800643c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fd fc8a 	bl	8003d2c <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fd fc86 	bl	8003d2c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	; 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e229      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642e:	4b61      	ldr	r3, [pc, #388]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0xe8>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fd fc76 	bl	8003d2c <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7fd fc72 	bl	8003d2c <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	; 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e215      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006456:	4b57      	ldr	r3, [pc, #348]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x110>
 8006462:	e000      	b.n	8006466 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d069      	beq.n	8006546 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006472:	4b50      	ldr	r3, [pc, #320]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800647e:	4b4d      	ldr	r3, [pc, #308]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 030c 	and.w	r3, r3, #12
 8006486:	2b08      	cmp	r3, #8
 8006488:	d11c      	bne.n	80064c4 <HAL_RCC_OscConfig+0x190>
 800648a:	4b4a      	ldr	r3, [pc, #296]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d116      	bne.n	80064c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006496:	4b47      	ldr	r3, [pc, #284]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_RCC_OscConfig+0x17a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d001      	beq.n	80064ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e1e9      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ae:	4b41      	ldr	r3, [pc, #260]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	493d      	ldr	r1, [pc, #244]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c2:	e040      	b.n	8006546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d023      	beq.n	8006514 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064cc:	4b39      	ldr	r3, [pc, #228]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a38      	ldr	r2, [pc, #224]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d8:	f7fd fc28 	bl	8003d2c <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064e0:	f7fd fc24 	bl	8003d2c <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e1c7      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f2:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064fe:	4b2d      	ldr	r3, [pc, #180]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4929      	ldr	r1, [pc, #164]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 800650e:	4313      	orrs	r3, r2
 8006510:	600b      	str	r3, [r1, #0]
 8006512:	e018      	b.n	8006546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006514:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a26      	ldr	r2, [pc, #152]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 800651a:	f023 0301 	bic.w	r3, r3, #1
 800651e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fd fc04 	bl	8003d2c <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006528:	f7fd fc00 	bl	8003d2c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e1a3      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800653a:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d038      	beq.n	80065c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d019      	beq.n	800658e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800655a:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 800655c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655e:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006560:	f043 0301 	orr.w	r3, r3, #1
 8006564:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006566:	f7fd fbe1 	bl	8003d2c <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800656e:	f7fd fbdd 	bl	8003d2c <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e180      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x23a>
 800658c:	e01a      	b.n	80065c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006592:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <HAL_RCC_OscConfig+0x280>)
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800659a:	f7fd fbc7 	bl	8003d2c <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a0:	e00a      	b.n	80065b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a2:	f7fd fbc3 	bl	8003d2c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d903      	bls.n	80065b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e166      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
 80065b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b8:	4b92      	ldr	r3, [pc, #584]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80065ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ee      	bne.n	80065a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80a4 	beq.w	800671a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d2:	4b8c      	ldr	r3, [pc, #560]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10d      	bne.n	80065fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	4b89      	ldr	r3, [pc, #548]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	4a88      	ldr	r2, [pc, #544]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80065e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ea:	4b86      	ldr	r3, [pc, #536]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f6:	2301      	movs	r3, #1
 80065f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065fa:	4b83      	ldr	r3, [pc, #524]	; (8006808 <HAL_RCC_OscConfig+0x4d4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006602:	2b00      	cmp	r3, #0
 8006604:	d118      	bne.n	8006638 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006606:	4b80      	ldr	r3, [pc, #512]	; (8006808 <HAL_RCC_OscConfig+0x4d4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a7f      	ldr	r2, [pc, #508]	; (8006808 <HAL_RCC_OscConfig+0x4d4>)
 800660c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006612:	f7fd fb8b 	bl	8003d2c <HAL_GetTick>
 8006616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661a:	f7fd fb87 	bl	8003d2c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b64      	cmp	r3, #100	; 0x64
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e12a      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800662c:	4b76      	ldr	r3, [pc, #472]	; (8006808 <HAL_RCC_OscConfig+0x4d4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d106      	bne.n	800664e <HAL_RCC_OscConfig+0x31a>
 8006640:	4b70      	ldr	r3, [pc, #448]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006644:	4a6f      	ldr	r2, [pc, #444]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	6713      	str	r3, [r2, #112]	; 0x70
 800664c:	e02d      	b.n	80066aa <HAL_RCC_OscConfig+0x376>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10c      	bne.n	8006670 <HAL_RCC_OscConfig+0x33c>
 8006656:	4b6b      	ldr	r3, [pc, #428]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	4a6a      	ldr	r2, [pc, #424]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	6713      	str	r3, [r2, #112]	; 0x70
 8006662:	4b68      	ldr	r3, [pc, #416]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006666:	4a67      	ldr	r2, [pc, #412]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006668:	f023 0304 	bic.w	r3, r3, #4
 800666c:	6713      	str	r3, [r2, #112]	; 0x70
 800666e:	e01c      	b.n	80066aa <HAL_RCC_OscConfig+0x376>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b05      	cmp	r3, #5
 8006676:	d10c      	bne.n	8006692 <HAL_RCC_OscConfig+0x35e>
 8006678:	4b62      	ldr	r3, [pc, #392]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 800667a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667c:	4a61      	ldr	r2, [pc, #388]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	6713      	str	r3, [r2, #112]	; 0x70
 8006684:	4b5f      	ldr	r3, [pc, #380]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006688:	4a5e      	ldr	r2, [pc, #376]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6713      	str	r3, [r2, #112]	; 0x70
 8006690:	e00b      	b.n	80066aa <HAL_RCC_OscConfig+0x376>
 8006692:	4b5c      	ldr	r3, [pc, #368]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	4a5b      	ldr	r2, [pc, #364]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	6713      	str	r3, [r2, #112]	; 0x70
 800669e:	4b59      	ldr	r3, [pc, #356]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	4a58      	ldr	r2, [pc, #352]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80066a4:	f023 0304 	bic.w	r3, r3, #4
 80066a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d015      	beq.n	80066de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b2:	f7fd fb3b 	bl	8003d2c <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fd fb37 	bl	8003d2c <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0d8      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d0:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ee      	beq.n	80066ba <HAL_RCC_OscConfig+0x386>
 80066dc:	e014      	b.n	8006708 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066de:	f7fd fb25 	bl	8003d2c <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e4:	e00a      	b.n	80066fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fd fb21 	bl	8003d2c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e0c2      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fc:	4b41      	ldr	r3, [pc, #260]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ee      	bne.n	80066e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d105      	bne.n	800671a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800670e:	4b3d      	ldr	r3, [pc, #244]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	4a3c      	ldr	r2, [pc, #240]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80ae 	beq.w	8006880 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006724:	4b37      	ldr	r3, [pc, #220]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 030c 	and.w	r3, r3, #12
 800672c:	2b08      	cmp	r3, #8
 800672e:	d06d      	beq.n	800680c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d14b      	bne.n	80067d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006738:	4b32      	ldr	r3, [pc, #200]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a31      	ldr	r2, [pc, #196]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 800673e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006744:	f7fd faf2 	bl	8003d2c <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800674c:	f7fd faee 	bl	8003d2c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e091      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675e:	4b29      	ldr	r3, [pc, #164]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f0      	bne.n	800674c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69da      	ldr	r2, [r3, #28]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	019b      	lsls	r3, r3, #6
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	3b01      	subs	r3, #1
 8006784:	041b      	lsls	r3, r3, #16
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	061b      	lsls	r3, r3, #24
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	071b      	lsls	r3, r3, #28
 8006796:	491b      	ldr	r1, [pc, #108]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 8006798:	4313      	orrs	r3, r2
 800679a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800679c:	4b19      	ldr	r3, [pc, #100]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a18      	ldr	r2, [pc, #96]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80067a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fd fac0 	bl	8003d2c <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b0:	f7fd fabc 	bl	8003d2c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e05f      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c2:	4b10      	ldr	r3, [pc, #64]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0x47c>
 80067ce:	e057      	b.n	8006880 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a0b      	ldr	r2, [pc, #44]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80067d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7fd faa6 	bl	8003d2c <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e4:	f7fd faa2 	bl	8003d2c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e045      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f6:	4b03      	ldr	r3, [pc, #12]	; (8006804 <HAL_RCC_OscConfig+0x4d0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x4b0>
 8006802:	e03d      	b.n	8006880 <HAL_RCC_OscConfig+0x54c>
 8006804:	40023800 	.word	0x40023800
 8006808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800680c:	4b1f      	ldr	r3, [pc, #124]	; (800688c <HAL_RCC_OscConfig+0x558>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d030      	beq.n	800687c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d129      	bne.n	800687c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006832:	429a      	cmp	r2, r3
 8006834:	d122      	bne.n	800687c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800683c:	4013      	ands	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006842:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006844:	4293      	cmp	r3, r2
 8006846:	d119      	bne.n	800687c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	3b01      	subs	r3, #1
 8006856:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006858:	429a      	cmp	r2, r3
 800685a:	d10f      	bne.n	800687c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006866:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006868:	429a      	cmp	r2, r3
 800686a:	d107      	bne.n	800687c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800

08006890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0d0      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068a8:	4b6a      	ldr	r3, [pc, #424]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d910      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b67      	ldr	r3, [pc, #412]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 020f 	bic.w	r2, r3, #15
 80068be:	4965      	ldr	r1, [pc, #404]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c6:	4b63      	ldr	r3, [pc, #396]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0b8      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f0:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	4a58      	ldr	r2, [pc, #352]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 80068f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006908:	4b53      	ldr	r3, [pc, #332]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4a52      	ldr	r2, [pc, #328]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 800690e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006912:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006914:	4b50      	ldr	r3, [pc, #320]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	494d      	ldr	r1, [pc, #308]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006922:	4313      	orrs	r3, r2
 8006924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d040      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d107      	bne.n	800694a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693a:	4b47      	ldr	r3, [pc, #284]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d115      	bne.n	8006972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e07f      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006952:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e073      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006962:	4b3d      	ldr	r3, [pc, #244]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e06b      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006972:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f023 0203 	bic.w	r2, r3, #3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4936      	ldr	r1, [pc, #216]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006980:	4313      	orrs	r3, r2
 8006982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006984:	f7fd f9d2 	bl	8003d2c <HAL_GetTick>
 8006988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698c:	f7fd f9ce 	bl	8003d2c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	; 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e053      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 020c 	and.w	r2, r3, #12
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d1eb      	bne.n	800698c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b4:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d210      	bcs.n	80069e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 020f 	bic.w	r2, r3, #15
 80069ca:	4922      	ldr	r1, [pc, #136]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e032      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f0:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4916      	ldr	r1, [pc, #88]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	490e      	ldr	r1, [pc, #56]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a22:	f000 f821 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8006a26:	4601      	mov	r1, r0
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <HAL_RCC_ClockConfig+0x1cc>)
 8006a34:	5cd3      	ldrb	r3, [r2, r3]
 8006a36:	fa21 f303 	lsr.w	r3, r1, r3
 8006a3a:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <HAL_RCC_ClockConfig+0x1d0>)
 8006a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCC_ClockConfig+0x1d4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd f800 	bl	8003a48 <HAL_InitTick>

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40023c00 	.word	0x40023c00
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	08010414 	.word	0x08010414
 8006a60:	200000ac 	.word	0x200000ac
 8006a64:	200000b0 	.word	0x200000b0

08006a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	2300      	movs	r3, #0
 8006a78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a7e:	4b50      	ldr	r3, [pc, #320]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 030c 	and.w	r3, r3, #12
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d007      	beq.n	8006a9a <HAL_RCC_GetSysClockFreq+0x32>
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d008      	beq.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x38>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f040 808d 	bne.w	8006bae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a94:	4b4b      	ldr	r3, [pc, #300]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006a96:	60bb      	str	r3, [r7, #8]
      break;
 8006a98:	e08c      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a9a:	4b4b      	ldr	r3, [pc, #300]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a9c:	60bb      	str	r3, [r7, #8]
      break;
 8006a9e:	e089      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006aa0:	4b47      	ldr	r3, [pc, #284]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aa8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006aaa:	4b45      	ldr	r3, [pc, #276]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d023      	beq.n	8006afe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ab6:	4b42      	ldr	r3, [pc, #264]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	099b      	lsrs	r3, r3, #6
 8006abc:	f04f 0400 	mov.w	r4, #0
 8006ac0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	ea03 0501 	and.w	r5, r3, r1
 8006acc:	ea04 0602 	and.w	r6, r4, r2
 8006ad0:	4a3d      	ldr	r2, [pc, #244]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ad2:	fb02 f106 	mul.w	r1, r2, r6
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	fb02 f205 	mul.w	r2, r2, r5
 8006adc:	440a      	add	r2, r1
 8006ade:	493a      	ldr	r1, [pc, #232]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ae0:	fba5 0101 	umull	r0, r1, r5, r1
 8006ae4:	1853      	adds	r3, r2, r1
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f04f 0400 	mov.w	r4, #0
 8006aee:	461a      	mov	r2, r3
 8006af0:	4623      	mov	r3, r4
 8006af2:	f7f9 fbfd 	bl	80002f0 <__aeabi_uldivmod>
 8006af6:	4603      	mov	r3, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e049      	b.n	8006b92 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006afe:	4b30      	ldr	r3, [pc, #192]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	099b      	lsrs	r3, r3, #6
 8006b04:	f04f 0400 	mov.w	r4, #0
 8006b08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	ea03 0501 	and.w	r5, r3, r1
 8006b14:	ea04 0602 	and.w	r6, r4, r2
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4632      	mov	r2, r6
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	f04f 0400 	mov.w	r4, #0
 8006b24:	0154      	lsls	r4, r2, #5
 8006b26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b2a:	014b      	lsls	r3, r1, #5
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4622      	mov	r2, r4
 8006b30:	1b49      	subs	r1, r1, r5
 8006b32:	eb62 0206 	sbc.w	r2, r2, r6
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	f04f 0400 	mov.w	r4, #0
 8006b3e:	0194      	lsls	r4, r2, #6
 8006b40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006b44:	018b      	lsls	r3, r1, #6
 8006b46:	1a5b      	subs	r3, r3, r1
 8006b48:	eb64 0402 	sbc.w	r4, r4, r2
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	00e2      	lsls	r2, r4, #3
 8006b56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b5a:	00d9      	lsls	r1, r3, #3
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4614      	mov	r4, r2
 8006b60:	195b      	adds	r3, r3, r5
 8006b62:	eb44 0406 	adc.w	r4, r4, r6
 8006b66:	f04f 0100 	mov.w	r1, #0
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	02a2      	lsls	r2, r4, #10
 8006b70:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006b74:	0299      	lsls	r1, r3, #10
 8006b76:	460b      	mov	r3, r1
 8006b78:	4614      	mov	r4, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f04f 0400 	mov.w	r4, #0
 8006b84:	461a      	mov	r2, r3
 8006b86:	4623      	mov	r3, r4
 8006b88:	f7f9 fbb2 	bl	80002f0 <__aeabi_uldivmod>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006b92:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	0c1b      	lsrs	r3, r3, #16
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006baa:	60bb      	str	r3, [r7, #8]
      break;
 8006bac:	e002      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006bb0:	60bb      	str	r3, [r7, #8]
      break;
 8006bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	00f42400 	.word	0x00f42400
 8006bc8:	017d7840 	.word	0x017d7840

08006bcc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd0:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	200000ac 	.word	0x200000ac

08006be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006be8:	f7ff fff0 	bl	8006bcc <HAL_RCC_GetHCLKFreq>
 8006bec:	4601      	mov	r1, r0
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	0a9b      	lsrs	r3, r3, #10
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	4a03      	ldr	r2, [pc, #12]	; (8006c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bfa:	5cd3      	ldrb	r3, [r2, r3]
 8006bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40023800 	.word	0x40023800
 8006c08:	08010424 	.word	0x08010424

08006c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c10:	f7ff ffdc 	bl	8006bcc <HAL_RCC_GetHCLKFreq>
 8006c14:	4601      	mov	r1, r0
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	0b5b      	lsrs	r3, r3, #13
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	4a03      	ldr	r2, [pc, #12]	; (8006c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c22:	5cd3      	ldrb	r3, [r2, r3]
 8006c24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	08010424 	.word	0x08010424

08006c34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	220f      	movs	r2, #15
 8006c42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c44:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <HAL_RCC_GetClockConfig+0x5c>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f003 0203 	and.w	r2, r3, #3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c50:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <HAL_RCC_GetClockConfig+0x5c>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c5c:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <HAL_RCC_GetClockConfig+0x5c>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006c68:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_RCC_GetClockConfig+0x5c>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	08db      	lsrs	r3, r3, #3
 8006c6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c76:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <HAL_RCC_GetClockConfig+0x60>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 020f 	and.w	r2, r3, #15
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	601a      	str	r2, [r3, #0]
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40023800 	.word	0x40023800
 8006c94:	40023c00 	.word	0x40023c00

08006c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d012      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cc0:	4b69      	ldr	r3, [pc, #420]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4a68      	ldr	r2, [pc, #416]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006cca:	6093      	str	r3, [r2, #8]
 8006ccc:	4b66      	ldr	r3, [pc, #408]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd4:	4964      	ldr	r1, [pc, #400]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d017      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cf2:	4b5d      	ldr	r3, [pc, #372]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d00:	4959      	ldr	r1, [pc, #356]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d10:	d101      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d017      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d2e:	4b4e      	ldr	r3, [pc, #312]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	494a      	ldr	r1, [pc, #296]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 808b 	beq.w	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d7c:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	4a39      	ldr	r2, [pc, #228]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d86:	6413      	str	r3, [r2, #64]	; 0x40
 8006d88:	4b37      	ldr	r3, [pc, #220]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d94:	4b35      	ldr	r3, [pc, #212]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a34      	ldr	r2, [pc, #208]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da0:	f7fc ffc4 	bl	8003d2c <HAL_GetTick>
 8006da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006da8:	f7fc ffc0 	bl	8003d2c <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b64      	cmp	r3, #100	; 0x64
 8006db4:	d901      	bls.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e38d      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006dba:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f0      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dc6:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d035      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d02e      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006de4:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dee:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfe:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006e06:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e0c:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d114      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fc ff88 	bl	8003d2c <HAL_GetTick>
 8006e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1e:	e00a      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e20:	f7fc ff84 	bl	8003d2c <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e34f      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ee      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d111      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e5e:	400b      	ands	r3, r1
 8006e60:	4901      	ldr	r1, [pc, #4]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]
 8006e66:	e00b      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40007000 	.word	0x40007000
 8006e70:	0ffffcff 	.word	0x0ffffcff
 8006e74:	4bb3      	ldr	r3, [pc, #716]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4ab2      	ldr	r2, [pc, #712]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e7e:	6093      	str	r3, [r2, #8]
 8006e80:	4bb0      	ldr	r3, [pc, #704]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8c:	49ad      	ldr	r1, [pc, #692]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d010      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9e:	4ba9      	ldr	r3, [pc, #676]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea4:	4aa7      	ldr	r2, [pc, #668]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006eae:	4ba5      	ldr	r3, [pc, #660]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	49a2      	ldr	r1, [pc, #648]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ecc:	4b9d      	ldr	r3, [pc, #628]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eda:	499a      	ldr	r1, [pc, #616]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006eee:	4b95      	ldr	r3, [pc, #596]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006efc:	4991      	ldr	r1, [pc, #580]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f10:	4b8c      	ldr	r3, [pc, #560]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1e:	4989      	ldr	r1, [pc, #548]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f32:	4b84      	ldr	r3, [pc, #528]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f40:	4980      	ldr	r1, [pc, #512]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f54:	4b7b      	ldr	r3, [pc, #492]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5a:	f023 0203 	bic.w	r2, r3, #3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	4978      	ldr	r1, [pc, #480]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f76:	4b73      	ldr	r3, [pc, #460]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7c:	f023 020c 	bic.w	r2, r3, #12
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f84:	496f      	ldr	r1, [pc, #444]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f98:	4b6a      	ldr	r3, [pc, #424]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	4967      	ldr	r1, [pc, #412]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fba:	4b62      	ldr	r3, [pc, #392]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	495e      	ldr	r1, [pc, #376]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fdc:	4b59      	ldr	r3, [pc, #356]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	4956      	ldr	r1, [pc, #344]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006ffe:	4b51      	ldr	r3, [pc, #324]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007004:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	494d      	ldr	r1, [pc, #308]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007020:	4b48      	ldr	r3, [pc, #288]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702e:	4945      	ldr	r1, [pc, #276]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007042:	4b40      	ldr	r3, [pc, #256]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007050:	493c      	ldr	r1, [pc, #240]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007064:	4b37      	ldr	r3, [pc, #220]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007072:	4934      	ldr	r1, [pc, #208]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d011      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007086:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007094:	492b      	ldr	r1, [pc, #172]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070a4:	d101      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80070b6:	2301      	movs	r3, #1
 80070b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070c6:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d4:	491b      	ldr	r1, [pc, #108]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80070e8:	4b16      	ldr	r3, [pc, #88]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f8:	4912      	ldr	r1, [pc, #72]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711c:	4909      	ldr	r1, [pc, #36]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00f      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007136:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007142:	bf00      	nop
 8007144:	40023800 	.word	0x40023800
 8007148:	4985      	ldr	r1, [pc, #532]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800715c:	4b80      	ldr	r3, [pc, #512]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800715e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800716c:	497c      	ldr	r1, [pc, #496]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800716e:	4313      	orrs	r3, r2
 8007170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d005      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007182:	f040 80d6 	bne.w	8007332 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007186:	4b76      	ldr	r3, [pc, #472]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a75      	ldr	r2, [pc, #468]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800718c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fc fdcb 	bl	8003d2c <HAL_GetTick>
 8007196:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007198:	e008      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800719a:	f7fc fdc7 	bl	8003d2c <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b64      	cmp	r3, #100	; 0x64
 80071a6:	d901      	bls.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e194      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071ac:	4b6c      	ldr	r3, [pc, #432]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1f0      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d021      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d11d      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071cc:	4b64      	ldr	r3, [pc, #400]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071da:	4b61      	ldr	r3, [pc, #388]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e0:	0e1b      	lsrs	r3, r3, #24
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	019a      	lsls	r2, r3, #6
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	431a      	orrs	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	061b      	lsls	r3, r3, #24
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	071b      	lsls	r3, r3, #28
 8007200:	4957      	ldr	r1, [pc, #348]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721c:	d00a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007226:	2b00      	cmp	r3, #0
 8007228:	d02e      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007232:	d129      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007234:	4b4a      	ldr	r3, [pc, #296]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007242:	4b47      	ldr	r3, [pc, #284]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007248:	0f1b      	lsrs	r3, r3, #28
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	019a      	lsls	r2, r3, #6
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	061b      	lsls	r3, r3, #24
 8007262:	431a      	orrs	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	071b      	lsls	r3, r3, #28
 8007268:	493d      	ldr	r1, [pc, #244]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007270:	4b3b      	ldr	r3, [pc, #236]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007276:	f023 021f 	bic.w	r2, r3, #31
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	3b01      	subs	r3, #1
 8007280:	4937      	ldr	r1, [pc, #220]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01d      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007294:	4b32      	ldr	r3, [pc, #200]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800729a:	0e1b      	lsrs	r3, r3, #24
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072a2:	4b2f      	ldr	r3, [pc, #188]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a8:	0f1b      	lsrs	r3, r3, #28
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	019a      	lsls	r2, r3, #6
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	431a      	orrs	r2, r3
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	431a      	orrs	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	071b      	lsls	r3, r3, #28
 80072c8:	4925      	ldr	r1, [pc, #148]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d011      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	019a      	lsls	r2, r3, #6
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	041b      	lsls	r3, r3, #16
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	061b      	lsls	r3, r3, #24
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	071b      	lsls	r3, r3, #28
 80072f8:	4919      	ldr	r1, [pc, #100]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007300:	4b17      	ldr	r3, [pc, #92]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a16      	ldr	r2, [pc, #88]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800730a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800730c:	f7fc fd0e 	bl	8003d2c <HAL_GetTick>
 8007310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007314:	f7fc fd0a 	bl	8003d2c <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b64      	cmp	r3, #100	; 0x64
 8007320:	d901      	bls.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e0d7      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0f0      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b01      	cmp	r3, #1
 8007336:	f040 80cd 	bne.w	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a08      	ldr	r2, [pc, #32]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007346:	f7fc fcf1 	bl	8003d2c <HAL_GetTick>
 800734a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800734c:	e00a      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800734e:	f7fc fced 	bl	8003d2c <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b64      	cmp	r3, #100	; 0x64
 800735a:	d903      	bls.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e0ba      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007360:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007364:	4b5e      	ldr	r3, [pc, #376]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800736c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007370:	d0ed      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800738e:	2b00      	cmp	r3, #0
 8007390:	d02e      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d12a      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800739a:	4b51      	ldr	r3, [pc, #324]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a0:	0c1b      	lsrs	r3, r3, #16
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073a8:	4b4d      	ldr	r3, [pc, #308]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	0f1b      	lsrs	r3, r3, #28
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	019a      	lsls	r2, r3, #6
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	061b      	lsls	r3, r3, #24
 80073c8:	431a      	orrs	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	071b      	lsls	r3, r3, #28
 80073ce:	4944      	ldr	r1, [pc, #272]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80073d6:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	3b01      	subs	r3, #1
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	493d      	ldr	r1, [pc, #244]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d022      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007404:	d11d      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007406:	4b36      	ldr	r3, [pc, #216]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740c:	0e1b      	lsrs	r3, r3, #24
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007414:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741a:	0f1b      	lsrs	r3, r3, #28
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	019a      	lsls	r2, r3, #6
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	431a      	orrs	r2, r3
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	061b      	lsls	r3, r3, #24
 8007434:	431a      	orrs	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	071b      	lsls	r3, r3, #28
 800743a:	4929      	ldr	r1, [pc, #164]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d028      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007454:	0e1b      	lsrs	r3, r3, #24
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800745c:	4b20      	ldr	r3, [pc, #128]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007462:	0c1b      	lsrs	r3, r3, #16
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	019a      	lsls	r2, r3, #6
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	041b      	lsls	r3, r3, #16
 8007474:	431a      	orrs	r2, r3
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	061b      	lsls	r3, r3, #24
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	071b      	lsls	r3, r3, #28
 8007482:	4917      	ldr	r1, [pc, #92]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800748c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4911      	ldr	r1, [pc, #68]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a0e      	ldr	r2, [pc, #56]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ac:	f7fc fc3e 	bl	8003d2c <HAL_GetTick>
 80074b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074b4:	f7fc fc3a 	bl	8003d2c <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b64      	cmp	r3, #100	; 0x64
 80074c0:	d901      	bls.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e007      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074c6:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d2:	d1ef      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40023800 	.word	0x40023800

080074e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e06b      	b.n	80075ce <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7f5b      	ldrb	r3, [r3, #29]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fc f80e 	bl	8003528 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	22ca      	movs	r2, #202	; 0xca
 8007518:	625a      	str	r2, [r3, #36]	; 0x24
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2253      	movs	r2, #83	; 0x53
 8007520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f85a 	bl	80075dc <RTC_EnterInitMode>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	22ff      	movs	r2, #255	; 0xff
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2204      	movs	r2, #4
 800753a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e046      	b.n	80075ce <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6899      	ldr	r1, [r3, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <HAL_RTC_Init+0xf4>)
 800754c:	400b      	ands	r3, r1
 800754e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6899      	ldr	r1, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	68d2      	ldr	r2, [r2, #12]
 8007576:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6919      	ldr	r1, [r3, #16]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	041a      	lsls	r2, r3, #16
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800759a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0208 	bic.w	r2, r2, #8
 80075aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	22ff      	movs	r2, #255	; 0xff
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80075cc:	2300      	movs	r3, #0
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	ff8fffbf 	.word	0xff8fffbf

080075dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d119      	bne.n	800762a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f04f 32ff 	mov.w	r2, #4294967295
 80075fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007600:	f7fc fb94 	bl	8003d2c <HAL_GetTick>
 8007604:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007606:	e009      	b.n	800761c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007608:	f7fc fb90 	bl	8003d2c <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007616:	d901      	bls.n	800761c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e007      	b.n	800762c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0ee      	beq.n	8007608 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e084      	b.n	8007750 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fb ff7b 	bl	800355c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2202      	movs	r2, #2
 800766a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800767c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007686:	d902      	bls.n	800768e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e002      	b.n	8007694 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800768e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007692:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800769c:	d007      	beq.n	80076ae <HAL_SPI_Init+0x7a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076a6:	d002      	beq.n	80076ae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076be:	d903      	bls.n	80076c8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30
 80076c6:	e002      	b.n	80076ce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	ea42 0103 	orr.w	r1, r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	f003 0204 	and.w	r2, r3, #4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	ea42 0103 	orr.w	r1, r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	430a      	orrs	r2, r1
 800772e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69da      	ldr	r2, [r3, #28]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800773e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	4613      	mov	r3, r2
 8007766:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_SPI_Transmit+0x22>
 8007776:	2302      	movs	r3, #2
 8007778:	e150      	b.n	8007a1c <HAL_SPI_Transmit+0x2c4>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007782:	f7fc fad3 	bl	8003d2c <HAL_GetTick>
 8007786:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d002      	beq.n	800779e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007798:	2302      	movs	r3, #2
 800779a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800779c:	e135      	b.n	8007a0a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_SPI_Transmit+0x52>
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077ae:	e12c      	b.n	8007a0a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2203      	movs	r2, #3
 80077b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	88fa      	ldrh	r2, [r7, #6]
 80077c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	88fa      	ldrh	r2, [r7, #6]
 80077ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fa:	d107      	bne.n	800780c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800780a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b40      	cmp	r3, #64	; 0x40
 8007818:	d007      	beq.n	800782a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007832:	d94b      	bls.n	80078cc <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <HAL_SPI_Transmit+0xea>
 800783c:	8afb      	ldrh	r3, [r7, #22]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d13e      	bne.n	80078c0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	881a      	ldrh	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007866:	e02b      	b.n	80078c0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d112      	bne.n	800789c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	881a      	ldrh	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	1c9a      	adds	r2, r3, #2
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	87da      	strh	r2, [r3, #62]	; 0x3e
 800789a:	e011      	b.n	80078c0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800789c:	f7fc fa46 	bl	8003d2c <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d803      	bhi.n	80078b4 <HAL_SPI_Transmit+0x15c>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d102      	bne.n	80078ba <HAL_SPI_Transmit+0x162>
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078be:	e0a4      	b.n	8007a0a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1ce      	bne.n	8007868 <HAL_SPI_Transmit+0x110>
 80078ca:	e07c      	b.n	80079c6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <HAL_SPI_Transmit+0x182>
 80078d4:	8afb      	ldrh	r3, [r7, #22]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d170      	bne.n	80079bc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d912      	bls.n	800790a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	881a      	ldrh	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	1c9a      	adds	r2, r3, #2
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b02      	subs	r3, #2
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007908:	e058      	b.n	80079bc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007930:	e044      	b.n	80079bc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b02      	cmp	r3, #2
 800793e:	d12b      	bne.n	8007998 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b01      	cmp	r3, #1
 8007948:	d912      	bls.n	8007970 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	881a      	ldrh	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	1c9a      	adds	r2, r3, #2
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b02      	subs	r3, #2
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800796e:	e025      	b.n	80079bc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	330c      	adds	r3, #12
 800797a:	7812      	ldrb	r2, [r2, #0]
 800797c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007996:	e011      	b.n	80079bc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007998:	f7fc f9c8 	bl	8003d2c <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d803      	bhi.n	80079b0 <HAL_SPI_Transmit+0x258>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d102      	bne.n	80079b6 <HAL_SPI_Transmit+0x25e>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d102      	bne.n	80079bc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079ba:	e026      	b.n	8007a0a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1b5      	bne.n	8007932 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 fa20 	bl	8007e10 <SPI_EndRxTxTransaction>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2220      	movs	r2, #32
 80079da:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	77fb      	strb	r3, [r7, #31]
 8007a06:	e000      	b.n	8007a0a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	099b      	lsrs	r3, r3, #6
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10f      	bne.n	8007a68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	099b      	lsrs	r3, r3, #6
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
    return;
 8007a66:	e0d8      	b.n	8007c1a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <HAL_SPI_IRQHandler+0x66>
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	09db      	lsrs	r3, r3, #7
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	4798      	blx	r3
    return;
 8007a88:	e0c7      	b.n	8007c1a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10c      	bne.n	8007ab0 <HAL_SPI_IRQHandler+0x8c>
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	099b      	lsrs	r3, r3, #6
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <HAL_SPI_IRQHandler+0x8c>
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	0a1b      	lsrs	r3, r3, #8
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80b5 	beq.w	8007c1a <HAL_SPI_IRQHandler+0x1f6>
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80ae 	beq.w	8007c1a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	099b      	lsrs	r3, r3, #6
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d023      	beq.n	8007b12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d011      	beq.n	8007afa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ada:	f043 0204 	orr.w	r2, r3, #4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	e00b      	b.n	8007b12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	693b      	ldr	r3, [r7, #16]
        return;
 8007b10:	e083      	b.n	8007c1a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d014      	beq.n	8007b48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b22:	f043 0201 	orr.w	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00c      	beq.n	8007b6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b58:	f043 0208 	orr.w	r2, r3, #8
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b60:	2300      	movs	r3, #0
 8007b62:	60bb      	str	r3, [r7, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d050      	beq.n	8007c18 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <HAL_SPI_IRQHandler+0x17e>
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d034      	beq.n	8007c0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 0203 	bic.w	r2, r2, #3
 8007bb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d011      	beq.n	8007bde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbe:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <HAL_SPI_IRQHandler+0x1fc>)
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fd f8ea 	bl	8004da0 <HAL_DMA_Abort_IT>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d016      	beq.n	8007c14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bea:	4a0d      	ldr	r2, [pc, #52]	; (8007c20 <HAL_SPI_IRQHandler+0x1fc>)
 8007bec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fd f8d4 	bl	8004da0 <HAL_DMA_Abort_IT>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007c0a:	e003      	b.n	8007c14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f809 	bl	8007c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c12:	e000      	b.n	8007c16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007c14:	bf00      	nop
    return;
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
  }
}
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	08007c39 	.word	0x08007c39

08007c24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff ffe5 	bl	8007c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	603b      	str	r3, [r7, #0]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c72:	e04c      	b.n	8007d0e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	d048      	beq.n	8007d0e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007c7c:	f7fc f856 	bl	8003d2c <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d902      	bls.n	8007c92 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d13d      	bne.n	8007d0e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007caa:	d111      	bne.n	8007cd0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb4:	d004      	beq.n	8007cc0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cbe:	d107      	bne.n	8007cd0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd8:	d10f      	bne.n	8007cfa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e00f      	b.n	8007d2e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4013      	ands	r3, r2
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	bf0c      	ite	eq
 8007d1e:	2301      	moveq	r3, #1
 8007d20:	2300      	movne	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d1a3      	bne.n	8007c74 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d44:	e057      	b.n	8007df6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d4c:	d106      	bne.n	8007d5c <SPI_WaitFifoStateUntilTimeout+0x26>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d103      	bne.n	8007d5c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d048      	beq.n	8007df6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007d64:	f7fb ffe2 	bl	8003d2c <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d902      	bls.n	8007d7a <SPI_WaitFifoStateUntilTimeout+0x44>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d13d      	bne.n	8007df6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d92:	d111      	bne.n	8007db8 <SPI_WaitFifoStateUntilTimeout+0x82>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9c:	d004      	beq.n	8007da8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da6:	d107      	bne.n	8007db8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007db6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc0:	d10f      	bne.n	8007de2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007de0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e008      	b.n	8007e08 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d19f      	bne.n	8007d46 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff ff84 	bl	8007d36 <SPI_WaitFifoStateUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d007      	beq.n	8007e44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e38:	f043 0220 	orr.w	r2, r3, #32
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e027      	b.n	8007e94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff ff07 	bl	8007c62 <SPI_WaitFlagStateUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5e:	f043 0220 	orr.w	r2, r3, #32
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e014      	b.n	8007e94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff ff5d 	bl	8007d36 <SPI_WaitFifoStateUntilTimeout>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e86:	f043 0220 	orr.w	r2, r3, #32
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e000      	b.n	8007e94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e01d      	b.n	8007eea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fb fbe6 	bl	8003694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f000 fb82 	bl	80085e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <HAL_TIM_Base_Start_IT+0x50>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b06      	cmp	r3, #6
 8007f1c:	d00b      	beq.n	8007f36 <HAL_TIM_Base_Start_IT+0x42>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f24:	d007      	beq.n	8007f36 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0201 	orr.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	00010007 	.word	0x00010007

08007f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e01d      	b.n	8007f96 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f815 	bl	8007f9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f000 fb2c 	bl	80085e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d122      	bne.n	800800e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d11b      	bne.n	800800e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f06f 0202 	mvn.w	r2, #2
 8007fde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fad7 	bl	80085a8 <HAL_TIM_IC_CaptureCallback>
 8007ffa:	e005      	b.n	8008008 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fac9 	bl	8008594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fada 	bl	80085bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b04      	cmp	r3, #4
 800801a:	d122      	bne.n	8008062 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b04      	cmp	r3, #4
 8008028:	d11b      	bne.n	8008062 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f06f 0204 	mvn.w	r2, #4
 8008032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 faad 	bl	80085a8 <HAL_TIM_IC_CaptureCallback>
 800804e:	e005      	b.n	800805c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fa9f 	bl	8008594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fab0 	bl	80085bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b08      	cmp	r3, #8
 800806e:	d122      	bne.n	80080b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b08      	cmp	r3, #8
 800807c:	d11b      	bne.n	80080b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f06f 0208 	mvn.w	r2, #8
 8008086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2204      	movs	r2, #4
 800808c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	f003 0303 	and.w	r3, r3, #3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fa83 	bl	80085a8 <HAL_TIM_IC_CaptureCallback>
 80080a2:	e005      	b.n	80080b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa75 	bl	8008594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa86 	bl	80085bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b10      	cmp	r3, #16
 80080c2:	d122      	bne.n	800810a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d11b      	bne.n	800810a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f06f 0210 	mvn.w	r2, #16
 80080da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2208      	movs	r2, #8
 80080e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fa59 	bl	80085a8 <HAL_TIM_IC_CaptureCallback>
 80080f6:	e005      	b.n	8008104 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fa4b 	bl	8008594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa5c 	bl	80085bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b01      	cmp	r3, #1
 8008116:	d10e      	bne.n	8008136 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b01      	cmp	r3, #1
 8008124:	d107      	bne.n	8008136 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f06f 0201 	mvn.w	r2, #1
 800812e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7fa fed5 	bl	8002ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008140:	2b80      	cmp	r3, #128	; 0x80
 8008142:	d10e      	bne.n	8008162 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d107      	bne.n	8008162 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800815a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fe71 	bl	8008e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008170:	d10e      	bne.n	8008190 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817c:	2b80      	cmp	r3, #128	; 0x80
 800817e:	d107      	bne.n	8008190 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fe64 	bl	8008e58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819a:	2b40      	cmp	r3, #64	; 0x40
 800819c:	d10e      	bne.n	80081bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d107      	bne.n	80081bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa0a 	bl	80085d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	d10e      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d107      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0220 	mvn.w	r2, #32
 80081e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fe24 	bl	8008e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008202:	2b01      	cmp	r3, #1
 8008204:	d101      	bne.n	800820a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008206:	2302      	movs	r3, #2
 8008208:	e105      	b.n	8008416 <HAL_TIM_PWM_ConfigChannel+0x226>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2202      	movs	r2, #2
 8008216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b14      	cmp	r3, #20
 800821e:	f200 80f0 	bhi.w	8008402 <HAL_TIM_PWM_ConfigChannel+0x212>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	0800827d 	.word	0x0800827d
 800822c:	08008403 	.word	0x08008403
 8008230:	08008403 	.word	0x08008403
 8008234:	08008403 	.word	0x08008403
 8008238:	080082bd 	.word	0x080082bd
 800823c:	08008403 	.word	0x08008403
 8008240:	08008403 	.word	0x08008403
 8008244:	08008403 	.word	0x08008403
 8008248:	080082ff 	.word	0x080082ff
 800824c:	08008403 	.word	0x08008403
 8008250:	08008403 	.word	0x08008403
 8008254:	08008403 	.word	0x08008403
 8008258:	0800833f 	.word	0x0800833f
 800825c:	08008403 	.word	0x08008403
 8008260:	08008403 	.word	0x08008403
 8008264:	08008403 	.word	0x08008403
 8008268:	08008381 	.word	0x08008381
 800826c:	08008403 	.word	0x08008403
 8008270:	08008403 	.word	0x08008403
 8008274:	08008403 	.word	0x08008403
 8008278:	080083c1 	.word	0x080083c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fa4e 	bl	8008724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0208 	orr.w	r2, r2, #8
 8008296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0204 	bic.w	r2, r2, #4
 80082a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6999      	ldr	r1, [r3, #24]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	619a      	str	r2, [r3, #24]
      break;
 80082ba:	e0a3      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 faa0 	bl	8008808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6999      	ldr	r1, [r3, #24]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	021a      	lsls	r2, r3, #8
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	619a      	str	r2, [r3, #24]
      break;
 80082fc:	e082      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68b9      	ldr	r1, [r7, #8]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 faf7 	bl	80088f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69da      	ldr	r2, [r3, #28]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f042 0208 	orr.w	r2, r2, #8
 8008318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69da      	ldr	r2, [r3, #28]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0204 	bic.w	r2, r2, #4
 8008328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69d9      	ldr	r1, [r3, #28]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	61da      	str	r2, [r3, #28]
      break;
 800833c:	e062      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fb4d 	bl	80089e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69d9      	ldr	r1, [r3, #28]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	021a      	lsls	r2, r3, #8
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	61da      	str	r2, [r3, #28]
      break;
 800837e:	e041      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fb84 	bl	8008a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0208 	orr.w	r2, r2, #8
 800839a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0204 	bic.w	r2, r2, #4
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691a      	ldr	r2, [r3, #16]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083be:	e021      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68b9      	ldr	r1, [r7, #8]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fbb6 	bl	8008b38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	021a      	lsls	r2, r3, #8
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008400:	e000      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8008402:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_TIM_ConfigClockSource+0x18>
 8008434:	2302      	movs	r3, #2
 8008436:	e0a6      	b.n	8008586 <HAL_TIM_ConfigClockSource+0x166>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4b4f      	ldr	r3, [pc, #316]	; (8008590 <HAL_TIM_ConfigClockSource+0x170>)
 8008454:	4013      	ands	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800845e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b40      	cmp	r3, #64	; 0x40
 800846e:	d067      	beq.n	8008540 <HAL_TIM_ConfigClockSource+0x120>
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d80b      	bhi.n	800848c <HAL_TIM_ConfigClockSource+0x6c>
 8008474:	2b10      	cmp	r3, #16
 8008476:	d073      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x140>
 8008478:	2b10      	cmp	r3, #16
 800847a:	d802      	bhi.n	8008482 <HAL_TIM_ConfigClockSource+0x62>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d06f      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008480:	e078      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008482:	2b20      	cmp	r3, #32
 8008484:	d06c      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x140>
 8008486:	2b30      	cmp	r3, #48	; 0x30
 8008488:	d06a      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800848a:	e073      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800848c:	2b70      	cmp	r3, #112	; 0x70
 800848e:	d00d      	beq.n	80084ac <HAL_TIM_ConfigClockSource+0x8c>
 8008490:	2b70      	cmp	r3, #112	; 0x70
 8008492:	d804      	bhi.n	800849e <HAL_TIM_ConfigClockSource+0x7e>
 8008494:	2b50      	cmp	r3, #80	; 0x50
 8008496:	d033      	beq.n	8008500 <HAL_TIM_ConfigClockSource+0xe0>
 8008498:	2b60      	cmp	r3, #96	; 0x60
 800849a:	d041      	beq.n	8008520 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800849c:	e06a      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800849e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a2:	d066      	beq.n	8008572 <HAL_TIM_ConfigClockSource+0x152>
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a8:	d017      	beq.n	80084da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80084aa:	e063      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	6899      	ldr	r1, [r3, #8]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f000 fc0a 	bl	8008cd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	609a      	str	r2, [r3, #8]
      break;
 80084d8:	e04c      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	6899      	ldr	r1, [r3, #8]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f000 fbf3 	bl	8008cd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084fc:	609a      	str	r2, [r3, #8]
      break;
 80084fe:	e039      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	6859      	ldr	r1, [r3, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	461a      	mov	r2, r3
 800850e:	f000 fb67 	bl	8008be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2150      	movs	r1, #80	; 0x50
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fbc0 	bl	8008c9e <TIM_ITRx_SetConfig>
      break;
 800851e:	e029      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	6859      	ldr	r1, [r3, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	461a      	mov	r2, r3
 800852e:	f000 fb86 	bl	8008c3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2160      	movs	r1, #96	; 0x60
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fbb0 	bl	8008c9e <TIM_ITRx_SetConfig>
      break;
 800853e:	e019      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	6859      	ldr	r1, [r3, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	461a      	mov	r2, r3
 800854e:	f000 fb47 	bl	8008be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2140      	movs	r1, #64	; 0x40
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fba0 	bl	8008c9e <TIM_ITRx_SetConfig>
      break;
 800855e:	e009      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f000 fb97 	bl	8008c9e <TIM_ITRx_SetConfig>
      break;
 8008570:	e000      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008572:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	fffeff88 	.word	0xfffeff88

08008594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a40      	ldr	r2, [pc, #256]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d013      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008602:	d00f      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a3d      	ldr	r2, [pc, #244]	; (80086fc <TIM_Base_SetConfig+0x118>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d00b      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a3c      	ldr	r2, [pc, #240]	; (8008700 <TIM_Base_SetConfig+0x11c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d007      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a3b      	ldr	r2, [pc, #236]	; (8008704 <TIM_Base_SetConfig+0x120>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d003      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a3a      	ldr	r2, [pc, #232]	; (8008708 <TIM_Base_SetConfig+0x124>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d108      	bne.n	8008636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2f      	ldr	r2, [pc, #188]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d02b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008644:	d027      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2c      	ldr	r2, [pc, #176]	; (80086fc <TIM_Base_SetConfig+0x118>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d023      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2b      	ldr	r2, [pc, #172]	; (8008700 <TIM_Base_SetConfig+0x11c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01f      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a2a      	ldr	r2, [pc, #168]	; (8008704 <TIM_Base_SetConfig+0x120>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d01b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a29      	ldr	r2, [pc, #164]	; (8008708 <TIM_Base_SetConfig+0x124>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d017      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a28      	ldr	r2, [pc, #160]	; (800870c <TIM_Base_SetConfig+0x128>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d013      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a27      	ldr	r2, [pc, #156]	; (8008710 <TIM_Base_SetConfig+0x12c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00f      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a26      	ldr	r2, [pc, #152]	; (8008714 <TIM_Base_SetConfig+0x130>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a25      	ldr	r2, [pc, #148]	; (8008718 <TIM_Base_SetConfig+0x134>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d007      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a24      	ldr	r2, [pc, #144]	; (800871c <TIM_Base_SetConfig+0x138>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d003      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a23      	ldr	r2, [pc, #140]	; (8008720 <TIM_Base_SetConfig+0x13c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d108      	bne.n	80086a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d003      	beq.n	80086dc <TIM_Base_SetConfig+0xf8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a0c      	ldr	r2, [pc, #48]	; (8008708 <TIM_Base_SetConfig+0x124>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d103      	bne.n	80086e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	691a      	ldr	r2, [r3, #16]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	615a      	str	r2, [r3, #20]
}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40010000 	.word	0x40010000
 80086fc:	40000400 	.word	0x40000400
 8008700:	40000800 	.word	0x40000800
 8008704:	40000c00 	.word	0x40000c00
 8008708:	40010400 	.word	0x40010400
 800870c:	40014000 	.word	0x40014000
 8008710:	40014400 	.word	0x40014400
 8008714:	40014800 	.word	0x40014800
 8008718:	40001800 	.word	0x40001800
 800871c:	40001c00 	.word	0x40001c00
 8008720:	40002000 	.word	0x40002000

08008724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	f023 0201 	bic.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4b2b      	ldr	r3, [pc, #172]	; (80087fc <TIM_OC1_SetConfig+0xd8>)
 8008750:	4013      	ands	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0303 	bic.w	r3, r3, #3
 800875a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f023 0302 	bic.w	r3, r3, #2
 800876c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a21      	ldr	r2, [pc, #132]	; (8008800 <TIM_OC1_SetConfig+0xdc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_OC1_SetConfig+0x64>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a20      	ldr	r2, [pc, #128]	; (8008804 <TIM_OC1_SetConfig+0xe0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d10c      	bne.n	80087a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f023 0308 	bic.w	r3, r3, #8
 800878e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	4313      	orrs	r3, r2
 8008798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f023 0304 	bic.w	r3, r3, #4
 80087a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a16      	ldr	r2, [pc, #88]	; (8008800 <TIM_OC1_SetConfig+0xdc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <TIM_OC1_SetConfig+0x8e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a15      	ldr	r2, [pc, #84]	; (8008804 <TIM_OC1_SetConfig+0xe0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d111      	bne.n	80087d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	621a      	str	r2, [r3, #32]
}
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	fffeff8f 	.word	0xfffeff8f
 8008800:	40010000 	.word	0x40010000
 8008804:	40010400 	.word	0x40010400

08008808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f023 0210 	bic.w	r2, r3, #16
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4b2e      	ldr	r3, [pc, #184]	; (80088ec <TIM_OC2_SetConfig+0xe4>)
 8008834:	4013      	ands	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f023 0320 	bic.w	r3, r3, #32
 8008852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a23      	ldr	r2, [pc, #140]	; (80088f0 <TIM_OC2_SetConfig+0xe8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_OC2_SetConfig+0x68>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a22      	ldr	r2, [pc, #136]	; (80088f4 <TIM_OC2_SetConfig+0xec>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d10d      	bne.n	800888c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a18      	ldr	r2, [pc, #96]	; (80088f0 <TIM_OC2_SetConfig+0xe8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d003      	beq.n	800889c <TIM_OC2_SetConfig+0x94>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a17      	ldr	r2, [pc, #92]	; (80088f4 <TIM_OC2_SetConfig+0xec>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d113      	bne.n	80088c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	621a      	str	r2, [r3, #32]
}
 80088de:	bf00      	nop
 80088e0:	371c      	adds	r7, #28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	feff8fff 	.word	0xfeff8fff
 80088f0:	40010000 	.word	0x40010000
 80088f4:	40010400 	.word	0x40010400

080088f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4b2d      	ldr	r3, [pc, #180]	; (80089d8 <TIM_OC3_SetConfig+0xe0>)
 8008924:	4013      	ands	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0303 	bic.w	r3, r3, #3
 800892e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a22      	ldr	r2, [pc, #136]	; (80089dc <TIM_OC3_SetConfig+0xe4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_OC3_SetConfig+0x66>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a21      	ldr	r2, [pc, #132]	; (80089e0 <TIM_OC3_SetConfig+0xe8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d10d      	bne.n	800897a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a17      	ldr	r2, [pc, #92]	; (80089dc <TIM_OC3_SetConfig+0xe4>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d003      	beq.n	800898a <TIM_OC3_SetConfig+0x92>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a16      	ldr	r2, [pc, #88]	; (80089e0 <TIM_OC3_SetConfig+0xe8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d113      	bne.n	80089b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	621a      	str	r2, [r3, #32]
}
 80089cc:	bf00      	nop
 80089ce:	371c      	adds	r7, #28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	fffeff8f 	.word	0xfffeff8f
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40010400 	.word	0x40010400

080089e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4b1e      	ldr	r3, [pc, #120]	; (8008a88 <TIM_OC4_SetConfig+0xa4>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	031b      	lsls	r3, r3, #12
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a13      	ldr	r2, [pc, #76]	; (8008a8c <TIM_OC4_SetConfig+0xa8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d003      	beq.n	8008a4c <TIM_OC4_SetConfig+0x68>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a12      	ldr	r2, [pc, #72]	; (8008a90 <TIM_OC4_SetConfig+0xac>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d109      	bne.n	8008a60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	019b      	lsls	r3, r3, #6
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	621a      	str	r2, [r3, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	feff8fff 	.word	0xfeff8fff
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40010400 	.word	0x40010400

08008a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <TIM_OC5_SetConfig+0x98>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	041b      	lsls	r3, r3, #16
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a12      	ldr	r2, [pc, #72]	; (8008b30 <TIM_OC5_SetConfig+0x9c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d003      	beq.n	8008af2 <TIM_OC5_SetConfig+0x5e>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a11      	ldr	r2, [pc, #68]	; (8008b34 <TIM_OC5_SetConfig+0xa0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d109      	bne.n	8008b06 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	621a      	str	r2, [r3, #32]
}
 8008b20:	bf00      	nop
 8008b22:	371c      	adds	r7, #28
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	fffeff8f 	.word	0xfffeff8f
 8008b30:	40010000 	.word	0x40010000
 8008b34:	40010400 	.word	0x40010400

08008b38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <TIM_OC6_SetConfig+0x9c>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	051b      	lsls	r3, r3, #20
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a13      	ldr	r2, [pc, #76]	; (8008bd8 <TIM_OC6_SetConfig+0xa0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_OC6_SetConfig+0x60>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a12      	ldr	r2, [pc, #72]	; (8008bdc <TIM_OC6_SetConfig+0xa4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d109      	bne.n	8008bac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	029b      	lsls	r3, r3, #10
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	621a      	str	r2, [r3, #32]
}
 8008bc6:	bf00      	nop
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	feff8fff 	.word	0xfeff8fff
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	40010400 	.word	0x40010400

08008be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	f023 0201 	bic.w	r2, r3, #1
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f023 030a 	bic.w	r3, r3, #10
 8008c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	621a      	str	r2, [r3, #32]
}
 8008c32:	bf00      	nop
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b087      	sub	sp, #28
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	f023 0210 	bic.w	r2, r3, #16
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	031b      	lsls	r3, r3, #12
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	621a      	str	r2, [r3, #32]
}
 8008c92:	bf00      	nop
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	f043 0307 	orr.w	r3, r3, #7
 8008cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	609a      	str	r2, [r3, #8]
}
 8008cc8:	bf00      	nop
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	021a      	lsls	r2, r3, #8
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	609a      	str	r2, [r3, #8]
}
 8008d08:	bf00      	nop
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e06d      	b.n	8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a30      	ldr	r2, [pc, #192]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d004      	beq.n	8008d60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a2f      	ldr	r2, [pc, #188]	; (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d108      	bne.n	8008d72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a20      	ldr	r2, [pc, #128]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d022      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9e:	d01d      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a1d      	ldr	r2, [pc, #116]	; (8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d018      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a1c      	ldr	r2, [pc, #112]	; (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d013      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a1a      	ldr	r2, [pc, #104]	; (8008e24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00e      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d009      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a16      	ldr	r2, [pc, #88]	; (8008e28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d004      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a15      	ldr	r2, [pc, #84]	; (8008e2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d10c      	bne.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008de2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	40010000 	.word	0x40010000
 8008e18:	40010400 	.word	0x40010400
 8008e1c:	40000400 	.word	0x40000400
 8008e20:	40000800 	.word	0x40000800
 8008e24:	40000c00 	.word	0x40000c00
 8008e28:	40014000 	.word	0x40014000
 8008e2c:	40001800 	.word	0x40001800

08008e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e040      	b.n	8008f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7fa fc92 	bl	80037b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2224      	movs	r2, #36	; 0x24
 8008e98:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f8be 	bl	800902c <UART_SetConfig>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e022      	b.n	8008f00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fb5c 	bl	8009580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fbe3 	bl	80096c4 <UART_CheckIdleState>
 8008efe:	4603      	mov	r3, r0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08a      	sub	sp, #40	; 0x28
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	4613      	mov	r3, r2
 8008f16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d17f      	bne.n	8009020 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <HAL_UART_Transmit+0x24>
 8008f26:	88fb      	ldrh	r3, [r7, #6]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e078      	b.n	8009022 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_UART_Transmit+0x36>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e071      	b.n	8009022 <HAL_UART_Transmit+0x11a>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2221      	movs	r2, #33	; 0x21
 8008f50:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008f52:	f7fa feeb 	bl	8003d2c <HAL_GetTick>
 8008f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	88fa      	ldrh	r2, [r7, #6]
 8008f5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	88fa      	ldrh	r2, [r7, #6]
 8008f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f70:	d108      	bne.n	8008f84 <HAL_UART_Transmit+0x7c>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	61bb      	str	r3, [r7, #24]
 8008f82:	e003      	b.n	8008f8c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008f94:	e02c      	b.n	8008ff0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2180      	movs	r1, #128	; 0x80
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 fbd4 	bl	800974e <UART_WaitOnFlagUntilTimeout>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e038      	b.n	8009022 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10b      	bne.n	8008fce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	3302      	adds	r3, #2
 8008fca:	61bb      	str	r3, [r7, #24]
 8008fcc:	e007      	b.n	8008fde <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	781a      	ldrb	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1cc      	bne.n	8008f96 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2200      	movs	r2, #0
 8009004:	2140      	movs	r1, #64	; 0x40
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fba1 	bl	800974e <UART_WaitOnFlagUntilTimeout>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e005      	b.n	8009022 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2220      	movs	r2, #32
 800901a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	e000      	b.n	8009022 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009020:	2302      	movs	r3, #2
  }
}
 8009022:	4618      	mov	r0, r3
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009034:	2300      	movs	r3, #0
 8009036:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	4313      	orrs	r3, r2
 8009052:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4bb1      	ldr	r3, [pc, #708]	; (8009320 <UART_SetConfig+0x2f4>)
 800905c:	4013      	ands	r3, r2
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	6812      	ldr	r2, [r2, #0]
 8009062:	6939      	ldr	r1, [r7, #16]
 8009064:	430b      	orrs	r3, r1
 8009066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	430a      	orrs	r2, r1
 80090a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a9f      	ldr	r2, [pc, #636]	; (8009324 <UART_SetConfig+0x2f8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d121      	bne.n	80090f0 <UART_SetConfig+0xc4>
 80090ac:	4b9e      	ldr	r3, [pc, #632]	; (8009328 <UART_SetConfig+0x2fc>)
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d816      	bhi.n	80090e8 <UART_SetConfig+0xbc>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <UART_SetConfig+0x94>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	080090d1 	.word	0x080090d1
 80090c4:	080090dd 	.word	0x080090dd
 80090c8:	080090d7 	.word	0x080090d7
 80090cc:	080090e3 	.word	0x080090e3
 80090d0:	2301      	movs	r3, #1
 80090d2:	77fb      	strb	r3, [r7, #31]
 80090d4:	e151      	b.n	800937a <UART_SetConfig+0x34e>
 80090d6:	2302      	movs	r3, #2
 80090d8:	77fb      	strb	r3, [r7, #31]
 80090da:	e14e      	b.n	800937a <UART_SetConfig+0x34e>
 80090dc:	2304      	movs	r3, #4
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e14b      	b.n	800937a <UART_SetConfig+0x34e>
 80090e2:	2308      	movs	r3, #8
 80090e4:	77fb      	strb	r3, [r7, #31]
 80090e6:	e148      	b.n	800937a <UART_SetConfig+0x34e>
 80090e8:	2310      	movs	r3, #16
 80090ea:	77fb      	strb	r3, [r7, #31]
 80090ec:	bf00      	nop
 80090ee:	e144      	b.n	800937a <UART_SetConfig+0x34e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a8d      	ldr	r2, [pc, #564]	; (800932c <UART_SetConfig+0x300>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d134      	bne.n	8009164 <UART_SetConfig+0x138>
 80090fa:	4b8b      	ldr	r3, [pc, #556]	; (8009328 <UART_SetConfig+0x2fc>)
 80090fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009100:	f003 030c 	and.w	r3, r3, #12
 8009104:	2b0c      	cmp	r3, #12
 8009106:	d829      	bhi.n	800915c <UART_SetConfig+0x130>
 8009108:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <UART_SetConfig+0xe4>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	08009145 	.word	0x08009145
 8009114:	0800915d 	.word	0x0800915d
 8009118:	0800915d 	.word	0x0800915d
 800911c:	0800915d 	.word	0x0800915d
 8009120:	08009151 	.word	0x08009151
 8009124:	0800915d 	.word	0x0800915d
 8009128:	0800915d 	.word	0x0800915d
 800912c:	0800915d 	.word	0x0800915d
 8009130:	0800914b 	.word	0x0800914b
 8009134:	0800915d 	.word	0x0800915d
 8009138:	0800915d 	.word	0x0800915d
 800913c:	0800915d 	.word	0x0800915d
 8009140:	08009157 	.word	0x08009157
 8009144:	2300      	movs	r3, #0
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	e117      	b.n	800937a <UART_SetConfig+0x34e>
 800914a:	2302      	movs	r3, #2
 800914c:	77fb      	strb	r3, [r7, #31]
 800914e:	e114      	b.n	800937a <UART_SetConfig+0x34e>
 8009150:	2304      	movs	r3, #4
 8009152:	77fb      	strb	r3, [r7, #31]
 8009154:	e111      	b.n	800937a <UART_SetConfig+0x34e>
 8009156:	2308      	movs	r3, #8
 8009158:	77fb      	strb	r3, [r7, #31]
 800915a:	e10e      	b.n	800937a <UART_SetConfig+0x34e>
 800915c:	2310      	movs	r3, #16
 800915e:	77fb      	strb	r3, [r7, #31]
 8009160:	bf00      	nop
 8009162:	e10a      	b.n	800937a <UART_SetConfig+0x34e>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a71      	ldr	r2, [pc, #452]	; (8009330 <UART_SetConfig+0x304>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d120      	bne.n	80091b0 <UART_SetConfig+0x184>
 800916e:	4b6e      	ldr	r3, [pc, #440]	; (8009328 <UART_SetConfig+0x2fc>)
 8009170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009174:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009178:	2b10      	cmp	r3, #16
 800917a:	d00f      	beq.n	800919c <UART_SetConfig+0x170>
 800917c:	2b10      	cmp	r3, #16
 800917e:	d802      	bhi.n	8009186 <UART_SetConfig+0x15a>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <UART_SetConfig+0x164>
 8009184:	e010      	b.n	80091a8 <UART_SetConfig+0x17c>
 8009186:	2b20      	cmp	r3, #32
 8009188:	d005      	beq.n	8009196 <UART_SetConfig+0x16a>
 800918a:	2b30      	cmp	r3, #48	; 0x30
 800918c:	d009      	beq.n	80091a2 <UART_SetConfig+0x176>
 800918e:	e00b      	b.n	80091a8 <UART_SetConfig+0x17c>
 8009190:	2300      	movs	r3, #0
 8009192:	77fb      	strb	r3, [r7, #31]
 8009194:	e0f1      	b.n	800937a <UART_SetConfig+0x34e>
 8009196:	2302      	movs	r3, #2
 8009198:	77fb      	strb	r3, [r7, #31]
 800919a:	e0ee      	b.n	800937a <UART_SetConfig+0x34e>
 800919c:	2304      	movs	r3, #4
 800919e:	77fb      	strb	r3, [r7, #31]
 80091a0:	e0eb      	b.n	800937a <UART_SetConfig+0x34e>
 80091a2:	2308      	movs	r3, #8
 80091a4:	77fb      	strb	r3, [r7, #31]
 80091a6:	e0e8      	b.n	800937a <UART_SetConfig+0x34e>
 80091a8:	2310      	movs	r3, #16
 80091aa:	77fb      	strb	r3, [r7, #31]
 80091ac:	bf00      	nop
 80091ae:	e0e4      	b.n	800937a <UART_SetConfig+0x34e>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a5f      	ldr	r2, [pc, #380]	; (8009334 <UART_SetConfig+0x308>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d120      	bne.n	80091fc <UART_SetConfig+0x1d0>
 80091ba:	4b5b      	ldr	r3, [pc, #364]	; (8009328 <UART_SetConfig+0x2fc>)
 80091bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091c4:	2b40      	cmp	r3, #64	; 0x40
 80091c6:	d00f      	beq.n	80091e8 <UART_SetConfig+0x1bc>
 80091c8:	2b40      	cmp	r3, #64	; 0x40
 80091ca:	d802      	bhi.n	80091d2 <UART_SetConfig+0x1a6>
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d005      	beq.n	80091dc <UART_SetConfig+0x1b0>
 80091d0:	e010      	b.n	80091f4 <UART_SetConfig+0x1c8>
 80091d2:	2b80      	cmp	r3, #128	; 0x80
 80091d4:	d005      	beq.n	80091e2 <UART_SetConfig+0x1b6>
 80091d6:	2bc0      	cmp	r3, #192	; 0xc0
 80091d8:	d009      	beq.n	80091ee <UART_SetConfig+0x1c2>
 80091da:	e00b      	b.n	80091f4 <UART_SetConfig+0x1c8>
 80091dc:	2300      	movs	r3, #0
 80091de:	77fb      	strb	r3, [r7, #31]
 80091e0:	e0cb      	b.n	800937a <UART_SetConfig+0x34e>
 80091e2:	2302      	movs	r3, #2
 80091e4:	77fb      	strb	r3, [r7, #31]
 80091e6:	e0c8      	b.n	800937a <UART_SetConfig+0x34e>
 80091e8:	2304      	movs	r3, #4
 80091ea:	77fb      	strb	r3, [r7, #31]
 80091ec:	e0c5      	b.n	800937a <UART_SetConfig+0x34e>
 80091ee:	2308      	movs	r3, #8
 80091f0:	77fb      	strb	r3, [r7, #31]
 80091f2:	e0c2      	b.n	800937a <UART_SetConfig+0x34e>
 80091f4:	2310      	movs	r3, #16
 80091f6:	77fb      	strb	r3, [r7, #31]
 80091f8:	bf00      	nop
 80091fa:	e0be      	b.n	800937a <UART_SetConfig+0x34e>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a4d      	ldr	r2, [pc, #308]	; (8009338 <UART_SetConfig+0x30c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d124      	bne.n	8009250 <UART_SetConfig+0x224>
 8009206:	4b48      	ldr	r3, [pc, #288]	; (8009328 <UART_SetConfig+0x2fc>)
 8009208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009214:	d012      	beq.n	800923c <UART_SetConfig+0x210>
 8009216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921a:	d802      	bhi.n	8009222 <UART_SetConfig+0x1f6>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <UART_SetConfig+0x204>
 8009220:	e012      	b.n	8009248 <UART_SetConfig+0x21c>
 8009222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009226:	d006      	beq.n	8009236 <UART_SetConfig+0x20a>
 8009228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800922c:	d009      	beq.n	8009242 <UART_SetConfig+0x216>
 800922e:	e00b      	b.n	8009248 <UART_SetConfig+0x21c>
 8009230:	2300      	movs	r3, #0
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e0a1      	b.n	800937a <UART_SetConfig+0x34e>
 8009236:	2302      	movs	r3, #2
 8009238:	77fb      	strb	r3, [r7, #31]
 800923a:	e09e      	b.n	800937a <UART_SetConfig+0x34e>
 800923c:	2304      	movs	r3, #4
 800923e:	77fb      	strb	r3, [r7, #31]
 8009240:	e09b      	b.n	800937a <UART_SetConfig+0x34e>
 8009242:	2308      	movs	r3, #8
 8009244:	77fb      	strb	r3, [r7, #31]
 8009246:	e098      	b.n	800937a <UART_SetConfig+0x34e>
 8009248:	2310      	movs	r3, #16
 800924a:	77fb      	strb	r3, [r7, #31]
 800924c:	bf00      	nop
 800924e:	e094      	b.n	800937a <UART_SetConfig+0x34e>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a39      	ldr	r2, [pc, #228]	; (800933c <UART_SetConfig+0x310>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d124      	bne.n	80092a4 <UART_SetConfig+0x278>
 800925a:	4b33      	ldr	r3, [pc, #204]	; (8009328 <UART_SetConfig+0x2fc>)
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009268:	d012      	beq.n	8009290 <UART_SetConfig+0x264>
 800926a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800926e:	d802      	bhi.n	8009276 <UART_SetConfig+0x24a>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d007      	beq.n	8009284 <UART_SetConfig+0x258>
 8009274:	e012      	b.n	800929c <UART_SetConfig+0x270>
 8009276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800927a:	d006      	beq.n	800928a <UART_SetConfig+0x25e>
 800927c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009280:	d009      	beq.n	8009296 <UART_SetConfig+0x26a>
 8009282:	e00b      	b.n	800929c <UART_SetConfig+0x270>
 8009284:	2301      	movs	r3, #1
 8009286:	77fb      	strb	r3, [r7, #31]
 8009288:	e077      	b.n	800937a <UART_SetConfig+0x34e>
 800928a:	2302      	movs	r3, #2
 800928c:	77fb      	strb	r3, [r7, #31]
 800928e:	e074      	b.n	800937a <UART_SetConfig+0x34e>
 8009290:	2304      	movs	r3, #4
 8009292:	77fb      	strb	r3, [r7, #31]
 8009294:	e071      	b.n	800937a <UART_SetConfig+0x34e>
 8009296:	2308      	movs	r3, #8
 8009298:	77fb      	strb	r3, [r7, #31]
 800929a:	e06e      	b.n	800937a <UART_SetConfig+0x34e>
 800929c:	2310      	movs	r3, #16
 800929e:	77fb      	strb	r3, [r7, #31]
 80092a0:	bf00      	nop
 80092a2:	e06a      	b.n	800937a <UART_SetConfig+0x34e>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a25      	ldr	r2, [pc, #148]	; (8009340 <UART_SetConfig+0x314>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d124      	bne.n	80092f8 <UART_SetConfig+0x2cc>
 80092ae:	4b1e      	ldr	r3, [pc, #120]	; (8009328 <UART_SetConfig+0x2fc>)
 80092b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80092b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092bc:	d012      	beq.n	80092e4 <UART_SetConfig+0x2b8>
 80092be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c2:	d802      	bhi.n	80092ca <UART_SetConfig+0x29e>
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d007      	beq.n	80092d8 <UART_SetConfig+0x2ac>
 80092c8:	e012      	b.n	80092f0 <UART_SetConfig+0x2c4>
 80092ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ce:	d006      	beq.n	80092de <UART_SetConfig+0x2b2>
 80092d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092d4:	d009      	beq.n	80092ea <UART_SetConfig+0x2be>
 80092d6:	e00b      	b.n	80092f0 <UART_SetConfig+0x2c4>
 80092d8:	2300      	movs	r3, #0
 80092da:	77fb      	strb	r3, [r7, #31]
 80092dc:	e04d      	b.n	800937a <UART_SetConfig+0x34e>
 80092de:	2302      	movs	r3, #2
 80092e0:	77fb      	strb	r3, [r7, #31]
 80092e2:	e04a      	b.n	800937a <UART_SetConfig+0x34e>
 80092e4:	2304      	movs	r3, #4
 80092e6:	77fb      	strb	r3, [r7, #31]
 80092e8:	e047      	b.n	800937a <UART_SetConfig+0x34e>
 80092ea:	2308      	movs	r3, #8
 80092ec:	77fb      	strb	r3, [r7, #31]
 80092ee:	e044      	b.n	800937a <UART_SetConfig+0x34e>
 80092f0:	2310      	movs	r3, #16
 80092f2:	77fb      	strb	r3, [r7, #31]
 80092f4:	bf00      	nop
 80092f6:	e040      	b.n	800937a <UART_SetConfig+0x34e>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a11      	ldr	r2, [pc, #68]	; (8009344 <UART_SetConfig+0x318>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d139      	bne.n	8009376 <UART_SetConfig+0x34a>
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <UART_SetConfig+0x2fc>)
 8009304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800930c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009310:	d027      	beq.n	8009362 <UART_SetConfig+0x336>
 8009312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009316:	d817      	bhi.n	8009348 <UART_SetConfig+0x31c>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01c      	beq.n	8009356 <UART_SetConfig+0x32a>
 800931c:	e027      	b.n	800936e <UART_SetConfig+0x342>
 800931e:	bf00      	nop
 8009320:	efff69f3 	.word	0xefff69f3
 8009324:	40011000 	.word	0x40011000
 8009328:	40023800 	.word	0x40023800
 800932c:	40004400 	.word	0x40004400
 8009330:	40004800 	.word	0x40004800
 8009334:	40004c00 	.word	0x40004c00
 8009338:	40005000 	.word	0x40005000
 800933c:	40011400 	.word	0x40011400
 8009340:	40007800 	.word	0x40007800
 8009344:	40007c00 	.word	0x40007c00
 8009348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800934c:	d006      	beq.n	800935c <UART_SetConfig+0x330>
 800934e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009352:	d009      	beq.n	8009368 <UART_SetConfig+0x33c>
 8009354:	e00b      	b.n	800936e <UART_SetConfig+0x342>
 8009356:	2300      	movs	r3, #0
 8009358:	77fb      	strb	r3, [r7, #31]
 800935a:	e00e      	b.n	800937a <UART_SetConfig+0x34e>
 800935c:	2302      	movs	r3, #2
 800935e:	77fb      	strb	r3, [r7, #31]
 8009360:	e00b      	b.n	800937a <UART_SetConfig+0x34e>
 8009362:	2304      	movs	r3, #4
 8009364:	77fb      	strb	r3, [r7, #31]
 8009366:	e008      	b.n	800937a <UART_SetConfig+0x34e>
 8009368:	2308      	movs	r3, #8
 800936a:	77fb      	strb	r3, [r7, #31]
 800936c:	e005      	b.n	800937a <UART_SetConfig+0x34e>
 800936e:	2310      	movs	r3, #16
 8009370:	77fb      	strb	r3, [r7, #31]
 8009372:	bf00      	nop
 8009374:	e001      	b.n	800937a <UART_SetConfig+0x34e>
 8009376:	2310      	movs	r3, #16
 8009378:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009382:	d17f      	bne.n	8009484 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009384:	7ffb      	ldrb	r3, [r7, #31]
 8009386:	2b08      	cmp	r3, #8
 8009388:	d85c      	bhi.n	8009444 <UART_SetConfig+0x418>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <UART_SetConfig+0x364>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093b5 	.word	0x080093b5
 8009394:	080093d5 	.word	0x080093d5
 8009398:	080093f5 	.word	0x080093f5
 800939c:	08009445 	.word	0x08009445
 80093a0:	0800940d 	.word	0x0800940d
 80093a4:	08009445 	.word	0x08009445
 80093a8:	08009445 	.word	0x08009445
 80093ac:	08009445 	.word	0x08009445
 80093b0:	0800942d 	.word	0x0800942d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093b4:	f7fd fc16 	bl	8006be4 <HAL_RCC_GetPCLK1Freq>
 80093b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	005a      	lsls	r2, r3, #1
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	085b      	lsrs	r3, r3, #1
 80093c4:	441a      	add	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	61bb      	str	r3, [r7, #24]
        break;
 80093d2:	e03a      	b.n	800944a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093d4:	f7fd fc1a 	bl	8006c0c <HAL_RCC_GetPCLK2Freq>
 80093d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	005a      	lsls	r2, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	085b      	lsrs	r3, r3, #1
 80093e4:	441a      	add	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	61bb      	str	r3, [r7, #24]
        break;
 80093f2:	e02a      	b.n	800944a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	085a      	lsrs	r2, r3, #1
 80093fa:	4b5f      	ldr	r3, [pc, #380]	; (8009578 <UART_SetConfig+0x54c>)
 80093fc:	4413      	add	r3, r2
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6852      	ldr	r2, [r2, #4]
 8009402:	fbb3 f3f2 	udiv	r3, r3, r2
 8009406:	b29b      	uxth	r3, r3
 8009408:	61bb      	str	r3, [r7, #24]
        break;
 800940a:	e01e      	b.n	800944a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800940c:	f7fd fb2c 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8009410:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	005a      	lsls	r2, r3, #1
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	085b      	lsrs	r3, r3, #1
 800941c:	441a      	add	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	fbb2 f3f3 	udiv	r3, r2, r3
 8009426:	b29b      	uxth	r3, r3
 8009428:	61bb      	str	r3, [r7, #24]
        break;
 800942a:	e00e      	b.n	800944a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	085b      	lsrs	r3, r3, #1
 8009432:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	fbb2 f3f3 	udiv	r3, r2, r3
 800943e:	b29b      	uxth	r3, r3
 8009440:	61bb      	str	r3, [r7, #24]
        break;
 8009442:	e002      	b.n	800944a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
        break;
 8009448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	2b0f      	cmp	r3, #15
 800944e:	d916      	bls.n	800947e <UART_SetConfig+0x452>
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009456:	d212      	bcs.n	800947e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	b29b      	uxth	r3, r3
 800945c:	f023 030f 	bic.w	r3, r3, #15
 8009460:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	085b      	lsrs	r3, r3, #1
 8009466:	b29b      	uxth	r3, r3
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	b29a      	uxth	r2, r3
 800946e:	897b      	ldrh	r3, [r7, #10]
 8009470:	4313      	orrs	r3, r2
 8009472:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	897a      	ldrh	r2, [r7, #10]
 800947a:	60da      	str	r2, [r3, #12]
 800947c:	e070      	b.n	8009560 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	75fb      	strb	r3, [r7, #23]
 8009482:	e06d      	b.n	8009560 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009484:	7ffb      	ldrb	r3, [r7, #31]
 8009486:	2b08      	cmp	r3, #8
 8009488:	d859      	bhi.n	800953e <UART_SetConfig+0x512>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <UART_SetConfig+0x464>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094d3 	.word	0x080094d3
 8009498:	080094f1 	.word	0x080094f1
 800949c:	0800953f 	.word	0x0800953f
 80094a0:	08009509 	.word	0x08009509
 80094a4:	0800953f 	.word	0x0800953f
 80094a8:	0800953f 	.word	0x0800953f
 80094ac:	0800953f 	.word	0x0800953f
 80094b0:	08009527 	.word	0x08009527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b4:	f7fd fb96 	bl	8006be4 <HAL_RCC_GetPCLK1Freq>
 80094b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	085a      	lsrs	r2, r3, #1
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	441a      	add	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	61bb      	str	r3, [r7, #24]
        break;
 80094d0:	e038      	b.n	8009544 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094d2:	f7fd fb9b 	bl	8006c0c <HAL_RCC_GetPCLK2Freq>
 80094d6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	085a      	lsrs	r2, r3, #1
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	441a      	add	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	61bb      	str	r3, [r7, #24]
        break;
 80094ee:	e029      	b.n	8009544 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	085a      	lsrs	r2, r3, #1
 80094f6:	4b21      	ldr	r3, [pc, #132]	; (800957c <UART_SetConfig+0x550>)
 80094f8:	4413      	add	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6852      	ldr	r2, [r2, #4]
 80094fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009502:	b29b      	uxth	r3, r3
 8009504:	61bb      	str	r3, [r7, #24]
        break;
 8009506:	e01d      	b.n	8009544 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009508:	f7fd faae 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 800950c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	085a      	lsrs	r2, r3, #1
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	441a      	add	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009520:	b29b      	uxth	r3, r3
 8009522:	61bb      	str	r3, [r7, #24]
        break;
 8009524:	e00e      	b.n	8009544 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	085b      	lsrs	r3, r3, #1
 800952c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	fbb2 f3f3 	udiv	r3, r2, r3
 8009538:	b29b      	uxth	r3, r3
 800953a:	61bb      	str	r3, [r7, #24]
        break;
 800953c:	e002      	b.n	8009544 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	75fb      	strb	r3, [r7, #23]
        break;
 8009542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	2b0f      	cmp	r3, #15
 8009548:	d908      	bls.n	800955c <UART_SetConfig+0x530>
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009550:	d204      	bcs.n	800955c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	60da      	str	r2, [r3, #12]
 800955a:	e001      	b.n	8009560 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800956c:	7dfb      	ldrb	r3, [r7, #23]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3720      	adds	r7, #32
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	01e84800 	.word	0x01e84800
 800957c:	00f42400 	.word	0x00f42400

08009580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00a      	beq.n	8009632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00a      	beq.n	8009654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01a      	beq.n	8009696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800967e:	d10a      	bne.n	8009696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80096d2:	f7fa fb2b 	bl	8003d2c <HAL_GetTick>
 80096d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0308 	and.w	r3, r3, #8
 80096e2:	2b08      	cmp	r3, #8
 80096e4:	d10e      	bne.n	8009704 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f82a 	bl	800974e <UART_WaitOnFlagUntilTimeout>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e020      	b.n	8009746 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b04      	cmp	r3, #4
 8009710:	d10e      	bne.n	8009730 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009712:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f814 	bl	800974e <UART_WaitOnFlagUntilTimeout>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e00a      	b.n	8009746 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2220      	movs	r2, #32
 8009734:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	603b      	str	r3, [r7, #0]
 800975a:	4613      	mov	r3, r2
 800975c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800975e:	e05d      	b.n	800981c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009766:	d059      	beq.n	800981c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009768:	f7fa fae0 	bl	8003d2c <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	429a      	cmp	r2, r3
 8009776:	d302      	bcc.n	800977e <UART_WaitOnFlagUntilTimeout+0x30>
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d11b      	bne.n	80097b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800978c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0201 	bic.w	r2, r2, #1
 800979c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2220      	movs	r2, #32
 80097a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2220      	movs	r2, #32
 80097a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e042      	b.n	800983c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d02b      	beq.n	800981c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097d2:	d123      	bne.n	800981c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097dc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0201 	bic.w	r2, r2, #1
 80097fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2220      	movs	r2, #32
 8009802:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2220      	movs	r2, #32
 8009808:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e00f      	b.n	800983c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69da      	ldr	r2, [r3, #28]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	4013      	ands	r3, r2
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	429a      	cmp	r2, r3
 800982a:	bf0c      	ite	eq
 800982c:	2301      	moveq	r3, #1
 800982e:	2300      	movne	r3, #0
 8009830:	b2db      	uxtb	r3, r3
 8009832:	461a      	mov	r2, r3
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	429a      	cmp	r2, r3
 8009838:	d092      	beq.n	8009760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009844:	b084      	sub	sp, #16
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	f107 001c 	add.w	r0, r7, #28
 8009852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	2b01      	cmp	r3, #1
 800985a:	d120      	bne.n	800989e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	4b20      	ldr	r3, [pc, #128]	; (80098f0 <USB_CoreInit+0xac>)
 800986e:	4013      	ands	r3, r2
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009882:	2b01      	cmp	r3, #1
 8009884:	d105      	bne.n	8009892 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa52 	bl	8009d3c <USB_CoreReset>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]
 800989c:	e010      	b.n	80098c0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa46 	bl	8009d3c <USB_CoreReset>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d10b      	bne.n	80098de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f043 0206 	orr.w	r2, r3, #6
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f043 0220 	orr.w	r2, r3, #32
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098ea:	b004      	add	sp, #16
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	ffbdffbf 	.word	0xffbdffbf

080098f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f023 0201 	bic.w	r2, r3, #1
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d106      	bne.n	8009942 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60da      	str	r2, [r3, #12]
 8009940:	e00b      	b.n	800995a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009942:	78fb      	ldrb	r3, [r7, #3]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d106      	bne.n	8009956 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60da      	str	r2, [r3, #12]
 8009954:	e001      	b.n	800995a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e003      	b.n	8009962 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800995a:	2032      	movs	r0, #50	; 0x32
 800995c:	f7fa f9f2 	bl	8003d44 <HAL_Delay>

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800996c:	b084      	sub	sp, #16
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800997a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009986:	2300      	movs	r3, #0
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	e009      	b.n	80099a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3340      	adds	r3, #64	; 0x40
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	2200      	movs	r2, #0
 8009998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b0e      	cmp	r3, #14
 80099a4:	d9f2      	bls.n	800998c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11c      	bne.n	80099e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099ba:	f043 0302 	orr.w	r3, r3, #2
 80099be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	e005      	b.n	80099f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099f8:	461a      	mov	r2, r3
 80099fa:	2300      	movs	r3, #0
 80099fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a04:	4619      	mov	r1, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	680b      	ldr	r3, [r1, #0]
 8009a10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d10c      	bne.n	8009a32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a1e:	2100      	movs	r1, #0
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f959 	bl	8009cd8 <USB_SetDevSpeed>
 8009a26:	e018      	b.n	8009a5a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a28:	2101      	movs	r1, #1
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f954 	bl	8009cd8 <USB_SetDevSpeed>
 8009a30:	e013      	b.n	8009a5a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d10c      	bne.n	8009a52 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d104      	bne.n	8009a48 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a3e:	2100      	movs	r1, #0
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f949 	bl	8009cd8 <USB_SetDevSpeed>
 8009a46:	e008      	b.n	8009a5a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a48:	2101      	movs	r1, #1
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f944 	bl	8009cd8 <USB_SetDevSpeed>
 8009a50:	e003      	b.n	8009a5a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a52:	2103      	movs	r1, #3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f93f 	bl	8009cd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a5a:	2110      	movs	r1, #16
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f8f3 	bl	8009c48 <USB_FlushTxFifo>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f911 	bl	8009c94 <USB_FlushRxFifo>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a82:	461a      	mov	r2, r3
 8009a84:	2300      	movs	r3, #0
 8009a86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2300      	movs	r3, #0
 8009a92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	613b      	str	r3, [r7, #16]
 8009aa4:	e043      	b.n	8009b2e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009abc:	d118      	bne.n	8009af0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	e013      	b.n	8009b02 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	e008      	b.n	8009b02 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afc:	461a      	mov	r2, r3
 8009afe:	2300      	movs	r3, #0
 8009b00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0e:	461a      	mov	r2, r3
 8009b10:	2300      	movs	r3, #0
 8009b12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b20:	461a      	mov	r2, r3
 8009b22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	613b      	str	r3, [r7, #16]
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d3b7      	bcc.n	8009aa6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b36:	2300      	movs	r3, #0
 8009b38:	613b      	str	r3, [r7, #16]
 8009b3a:	e043      	b.n	8009bc4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b52:	d118      	bne.n	8009b86 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10a      	bne.n	8009b70 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b66:	461a      	mov	r2, r3
 8009b68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	e013      	b.n	8009b98 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	e008      	b.n	8009b98 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b92:	461a      	mov	r2, r3
 8009b94:	2300      	movs	r3, #0
 8009b96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	613b      	str	r3, [r7, #16]
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d3b7      	bcc.n	8009b3c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009bec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d105      	bne.n	8009c00 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	f043 0210 	orr.w	r2, r3, #16
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <USB_DevInit+0x2d4>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d005      	beq.n	8009c1e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	f043 0208 	orr.w	r2, r3, #8
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d105      	bne.n	8009c30 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <USB_DevInit+0x2d8>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c3c:	b004      	add	sp, #16
 8009c3e:	4770      	bx	lr
 8009c40:	803c3800 	.word	0x803c3800
 8009c44:	40000004 	.word	0x40000004

08009c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	019b      	lsls	r3, r3, #6
 8009c5a:	f043 0220 	orr.w	r2, r3, #32
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <USB_FlushTxFifo+0x48>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d901      	bls.n	8009c74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e006      	b.n	8009c82 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b20      	cmp	r3, #32
 8009c7e:	d0f0      	beq.n	8009c62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	00030d40 	.word	0x00030d40

08009c94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2210      	movs	r2, #16
 8009ca4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4a09      	ldr	r2, [pc, #36]	; (8009cd4 <USB_FlushRxFifo+0x40>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d901      	bls.n	8009cb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e006      	b.n	8009cc6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	f003 0310 	and.w	r3, r3, #16
 8009cc0:	2b10      	cmp	r3, #16
 8009cc2:	d0f0      	beq.n	8009ca6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	00030d40 	.word	0x00030d40

08009cd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	68f9      	ldr	r1, [r7, #12]
 8009cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009d2a:	2003      	movs	r0, #3
 8009d2c:	f7fa f80a 	bl	8003d44 <HAL_Delay>

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4a13      	ldr	r2, [pc, #76]	; (8009da0 <USB_CoreReset+0x64>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d901      	bls.n	8009d5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e01b      	b.n	8009d92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	daf2      	bge.n	8009d48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	f043 0201 	orr.w	r2, r3, #1
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3301      	adds	r3, #1
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4a09      	ldr	r2, [pc, #36]	; (8009da0 <USB_CoreReset+0x64>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d901      	bls.n	8009d84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e006      	b.n	8009d92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d0f0      	beq.n	8009d72 <USB_CoreReset+0x36>

  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	00030d40 	.word	0x00030d40

08009da4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009da4:	b480      	push	{r7}
 8009da6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009da8:	bf00      	nop
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dba:	f3ef 8305 	mrs	r3, IPSR
 8009dbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10f      	bne.n	8009de6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dca:	607b      	str	r3, [r7, #4]
  return(result);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d105      	bne.n	8009dde <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8009dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <osKernelInitialize+0x3a>
 8009dde:	4b0e      	ldr	r3, [pc, #56]	; (8009e18 <osKernelInitialize+0x64>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d103      	bne.n	8009dee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009de6:	f06f 0305 	mvn.w	r3, #5
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e00c      	b.n	8009e08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009dee:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <osKernelInitialize+0x64>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009df6:	4b08      	ldr	r3, [pc, #32]	; (8009e18 <osKernelInitialize+0x64>)
 8009df8:	2201      	movs	r2, #1
 8009dfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e002      	b.n	8009e08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009e02:	f04f 33ff 	mov.w	r3, #4294967295
 8009e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e08:	68fb      	ldr	r3, [r7, #12]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20003200 	.word	0x20003200

08009e1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e22:	f3ef 8305 	mrs	r3, IPSR
 8009e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10f      	bne.n	8009e4e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e32:	607b      	str	r3, [r7, #4]
  return(result);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d105      	bne.n	8009e46 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8009e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d007      	beq.n	8009e56 <osKernelStart+0x3a>
 8009e46:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <osKernelStart+0x68>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d103      	bne.n	8009e56 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009e4e:	f06f 0305 	mvn.w	r3, #5
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	e010      	b.n	8009e78 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e56:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <osKernelStart+0x68>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d109      	bne.n	8009e72 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e5e:	f7ff ffa1 	bl	8009da4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e62:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <osKernelStart+0x68>)
 8009e64:	2202      	movs	r2, #2
 8009e66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e68:	f001 f89c 	bl	800afa4 <vTaskStartScheduler>
      stat = osOK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	e002      	b.n	8009e78 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009e72:	f04f 33ff 	mov.w	r3, #4294967295
 8009e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e78:	68fb      	ldr	r3, [r7, #12]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20003200 	.word	0x20003200

08009e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b090      	sub	sp, #64	; 0x40
 8009e8c:	af04      	add	r7, sp, #16
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e94:	2300      	movs	r3, #0
 8009e96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e98:	f3ef 8305 	mrs	r3, IPSR
 8009e9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e9e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 808f 	bne.w	8009fc4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d105      	bne.n	8009ebe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8009eb6:	617b      	str	r3, [r7, #20]
  return(result);
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <osThreadNew+0x3e>
 8009ebe:	4b44      	ldr	r3, [pc, #272]	; (8009fd0 <osThreadNew+0x148>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d07e      	beq.n	8009fc4 <osThreadNew+0x13c>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d07b      	beq.n	8009fc4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009ecc:	2380      	movs	r3, #128	; 0x80
 8009ece:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009ed0:	2318      	movs	r3, #24
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8009edc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d045      	beq.n	8009f70 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <osThreadNew+0x6a>
        name = attr->name;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d008      	beq.n	8009f18 <osThreadNew+0x90>
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	2b38      	cmp	r3, #56	; 0x38
 8009f0a:	d805      	bhi.n	8009f18 <osThreadNew+0x90>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <osThreadNew+0x94>
        return (NULL);
 8009f18:	2300      	movs	r3, #0
 8009f1a:	e054      	b.n	8009fc6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	089b      	lsrs	r3, r3, #2
 8009f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00e      	beq.n	8009f52 <osThreadNew+0xca>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	2b5b      	cmp	r3, #91	; 0x5b
 8009f3a:	d90a      	bls.n	8009f52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d006      	beq.n	8009f52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <osThreadNew+0xca>
        mem = 1;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	623b      	str	r3, [r7, #32]
 8009f50:	e010      	b.n	8009f74 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10c      	bne.n	8009f74 <osThreadNew+0xec>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d108      	bne.n	8009f74 <osThreadNew+0xec>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d104      	bne.n	8009f74 <osThreadNew+0xec>
          mem = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	623b      	str	r3, [r7, #32]
 8009f6e:	e001      	b.n	8009f74 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d110      	bne.n	8009f9c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f82:	9202      	str	r2, [sp, #8]
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 fe2b 	bl	800abec <xTaskCreateStatic>
 8009f96:	4603      	mov	r3, r0
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	e013      	b.n	8009fc4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d110      	bne.n	8009fc4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	f107 0310 	add.w	r3, r7, #16
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fe79 	bl	800acac <xTaskCreate>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d001      	beq.n	8009fc4 <osThreadNew+0x13c>
          hTask = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009fc4:	693b      	ldr	r3, [r7, #16]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3730      	adds	r7, #48	; 0x30
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20003200 	.word	0x20003200

08009fd4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fdc:	f3ef 8305 	mrs	r3, IPSR
 8009fe0:	613b      	str	r3, [r7, #16]
  return(result);
 8009fe2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10f      	bne.n	800a008 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fec:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d105      	bne.n	800a000 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d007      	beq.n	800a010 <osDelay+0x3c>
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <osDelay+0x58>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b02      	cmp	r3, #2
 800a006:	d103      	bne.n	800a010 <osDelay+0x3c>
    stat = osErrorISR;
 800a008:	f06f 0305 	mvn.w	r3, #5
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	e007      	b.n	800a020 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a010:	2300      	movs	r3, #0
 800a012:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 ff8c 	bl	800af38 <vTaskDelay>
    }
  }

  return (stat);
 800a020:	697b      	ldr	r3, [r7, #20]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20003200 	.word	0x20003200

0800a030 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4a07      	ldr	r2, [pc, #28]	; (800a05c <vApplicationGetIdleTaskMemory+0x2c>)
 800a040:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	4a06      	ldr	r2, [pc, #24]	; (800a060 <vApplicationGetIdleTaskMemory+0x30>)
 800a046:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2280      	movs	r2, #128	; 0x80
 800a04c:	601a      	str	r2, [r3, #0]
}
 800a04e:	bf00      	nop
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	20003204 	.word	0x20003204
 800a060:	20003260 	.word	0x20003260

0800a064 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4a07      	ldr	r2, [pc, #28]	; (800a090 <vApplicationGetTimerTaskMemory+0x2c>)
 800a074:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	4a06      	ldr	r2, [pc, #24]	; (800a094 <vApplicationGetTimerTaskMemory+0x30>)
 800a07a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	20003460 	.word	0x20003460
 800a094:	200034bc 	.word	0x200034bc

0800a098 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f103 0208 	add.w	r2, r3, #8
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f103 0208 	add.w	r2, r3, #8
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f103 0208 	add.w	r2, r3, #8
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b085      	sub	sp, #20
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d103      	bne.n	800a15a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	e00c      	b.n	800a174 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3308      	adds	r3, #8
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	e002      	b.n	800a168 <vListInsert+0x2e>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	429a      	cmp	r2, r3
 800a172:	d2f6      	bcs.n	800a162 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	601a      	str	r2, [r3, #0]
}
 800a1a0:	bf00      	nop
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	6892      	ldr	r2, [r2, #8]
 800a1c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	6852      	ldr	r2, [r2, #4]
 800a1cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d103      	bne.n	800a1e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	1e5a      	subs	r2, r3, #1
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	b672      	cpsid	i
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	b662      	cpsie	i
 800a228:	60bb      	str	r3, [r7, #8]
 800a22a:	e7fe      	b.n	800a22a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800a22c:	f002 f844 	bl	800c2b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a238:	68f9      	ldr	r1, [r7, #12]
 800a23a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a23c:	fb01 f303 	mul.w	r3, r1, r3
 800a240:	441a      	add	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25c:	3b01      	subs	r3, #1
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a262:	fb01 f303 	mul.w	r3, r1, r3
 800a266:	441a      	add	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	22ff      	movs	r2, #255	; 0xff
 800a270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	22ff      	movs	r2, #255	; 0xff
 800a278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d114      	bne.n	800a2ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01a      	beq.n	800a2c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3310      	adds	r3, #16
 800a28e:	4618      	mov	r0, r3
 800a290:	f001 f916 	bl	800b4c0 <xTaskRemoveFromEventList>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d012      	beq.n	800a2c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <xQueueGenericReset+0xd0>)
 800a29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	e009      	b.n	800a2c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3310      	adds	r3, #16
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fef1 	bl	800a098 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3324      	adds	r3, #36	; 0x24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff feec 	bl	800a098 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2c0:	f002 f82c 	bl	800c31c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2c4:	2301      	movs	r3, #1
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	e000ed04 	.word	0xe000ed04

0800a2d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08e      	sub	sp, #56	; 0x38
 800a2d8:	af02      	add	r7, sp, #8
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10b      	bne.n	800a300 <xQueueGenericCreateStatic+0x2c>
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	b672      	cpsid	i
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	b662      	cpsie	i
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2fe:	e7fe      	b.n	800a2fe <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10b      	bne.n	800a31e <xQueueGenericCreateStatic+0x4a>
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	b672      	cpsid	i
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	b662      	cpsie	i
 800a31a:	627b      	str	r3, [r7, #36]	; 0x24
 800a31c:	e7fe      	b.n	800a31c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <xQueueGenericCreateStatic+0x56>
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <xQueueGenericCreateStatic+0x5a>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <xQueueGenericCreateStatic+0x5c>
 800a32e:	2300      	movs	r3, #0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10b      	bne.n	800a34c <xQueueGenericCreateStatic+0x78>
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	b672      	cpsid	i
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	b662      	cpsie	i
 800a348:	623b      	str	r3, [r7, #32]
 800a34a:	e7fe      	b.n	800a34a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d102      	bne.n	800a358 <xQueueGenericCreateStatic+0x84>
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <xQueueGenericCreateStatic+0x88>
 800a358:	2301      	movs	r3, #1
 800a35a:	e000      	b.n	800a35e <xQueueGenericCreateStatic+0x8a>
 800a35c:	2300      	movs	r3, #0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10b      	bne.n	800a37a <xQueueGenericCreateStatic+0xa6>
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	b672      	cpsid	i
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	b662      	cpsie	i
 800a376:	61fb      	str	r3, [r7, #28]
 800a378:	e7fe      	b.n	800a378 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a37a:	2350      	movs	r3, #80	; 0x50
 800a37c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2b50      	cmp	r3, #80	; 0x50
 800a382:	d00b      	beq.n	800a39c <xQueueGenericCreateStatic+0xc8>
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	b672      	cpsid	i
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	b662      	cpsie	i
 800a398:	61bb      	str	r3, [r7, #24]
 800a39a:	e7fe      	b.n	800a39a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a39c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00d      	beq.n	800a3c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f805 	bl	800a3ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3730      	adds	r7, #48	; 0x30
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	60f8      	str	r0, [r7, #12]
 800a3d6:	60b9      	str	r1, [r7, #8]
 800a3d8:	607a      	str	r2, [r7, #4]
 800a3da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d103      	bne.n	800a3ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	e002      	b.n	800a3f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	69b8      	ldr	r0, [r7, #24]
 800a400:	f7ff fefe 	bl	800a200 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	78fa      	ldrb	r2, [r7, #3]
 800a408:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a40c:	bf00      	nop
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08e      	sub	sp, #56	; 0x38
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a422:	2300      	movs	r3, #0
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10b      	bne.n	800a448 <xQueueGenericSend+0x34>
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	b672      	cpsid	i
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	b662      	cpsie	i
 800a444:	62bb      	str	r3, [r7, #40]	; 0x28
 800a446:	e7fe      	b.n	800a446 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d103      	bne.n	800a456 <xQueueGenericSend+0x42>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <xQueueGenericSend+0x46>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <xQueueGenericSend+0x48>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10b      	bne.n	800a478 <xQueueGenericSend+0x64>
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	b672      	cpsid	i
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	b662      	cpsie	i
 800a474:	627b      	str	r3, [r7, #36]	; 0x24
 800a476:	e7fe      	b.n	800a476 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d103      	bne.n	800a486 <xQueueGenericSend+0x72>
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a482:	2b01      	cmp	r3, #1
 800a484:	d101      	bne.n	800a48a <xQueueGenericSend+0x76>
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <xQueueGenericSend+0x78>
 800a48a:	2300      	movs	r3, #0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10b      	bne.n	800a4a8 <xQueueGenericSend+0x94>
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	b672      	cpsid	i
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	b662      	cpsie	i
 800a4a4:	623b      	str	r3, [r7, #32]
 800a4a6:	e7fe      	b.n	800a4a6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4a8:	f001 f9c8 	bl	800b83c <xTaskGetSchedulerState>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d102      	bne.n	800a4b8 <xQueueGenericSend+0xa4>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <xQueueGenericSend+0xa8>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e000      	b.n	800a4be <xQueueGenericSend+0xaa>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10b      	bne.n	800a4da <xQueueGenericSend+0xc6>
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	b672      	cpsid	i
 800a4c8:	f383 8811 	msr	BASEPRI, r3
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	b662      	cpsie	i
 800a4d6:	61fb      	str	r3, [r7, #28]
 800a4d8:	e7fe      	b.n	800a4d8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4da:	f001 feed 	bl	800c2b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d302      	bcc.n	800a4f0 <xQueueGenericSend+0xdc>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d129      	bne.n	800a544 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	68b9      	ldr	r1, [r7, #8]
 800a4f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4f6:	f000 fa0d 	bl	800a914 <prvCopyDataToQueue>
 800a4fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	2b00      	cmp	r3, #0
 800a502:	d010      	beq.n	800a526 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	3324      	adds	r3, #36	; 0x24
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 ffd9 	bl	800b4c0 <xTaskRemoveFromEventList>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d013      	beq.n	800a53c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a514:	4b3f      	ldr	r3, [pc, #252]	; (800a614 <xQueueGenericSend+0x200>)
 800a516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	e00a      	b.n	800a53c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d007      	beq.n	800a53c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a52c:	4b39      	ldr	r3, [pc, #228]	; (800a614 <xQueueGenericSend+0x200>)
 800a52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a53c:	f001 feee 	bl	800c31c <vPortExitCritical>
				return pdPASS;
 800a540:	2301      	movs	r3, #1
 800a542:	e063      	b.n	800a60c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d103      	bne.n	800a552 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a54a:	f001 fee7 	bl	800c31c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	e05c      	b.n	800a60c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a554:	2b00      	cmp	r3, #0
 800a556:	d106      	bne.n	800a566 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a558:	f107 0314 	add.w	r3, r7, #20
 800a55c:	4618      	mov	r0, r3
 800a55e:	f001 f813 	bl	800b588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a562:	2301      	movs	r3, #1
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a566:	f001 fed9 	bl	800c31c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a56a:	f000 fd83 	bl	800b074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a56e:	f001 fea3 	bl	800c2b8 <vPortEnterCritical>
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a578:	b25b      	sxtb	r3, r3
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d103      	bne.n	800a588 <xQueueGenericSend+0x174>
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a58e:	b25b      	sxtb	r3, r3
 800a590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a594:	d103      	bne.n	800a59e <xQueueGenericSend+0x18a>
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a59e:	f001 febd 	bl	800c31c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5a2:	1d3a      	adds	r2, r7, #4
 800a5a4:	f107 0314 	add.w	r3, r7, #20
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f001 f802 	bl	800b5b4 <xTaskCheckForTimeOut>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d124      	bne.n	800a600 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5b8:	f000 faa4 	bl	800ab04 <prvIsQueueFull>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d018      	beq.n	800a5f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	3310      	adds	r3, #16
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 ff26 	bl	800b41c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5d2:	f000 fa2f 	bl	800aa34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5d6:	f000 fd5b 	bl	800b090 <xTaskResumeAll>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f47f af7c 	bne.w	800a4da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a5e2:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <xQueueGenericSend+0x200>)
 800a5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	e772      	b.n	800a4da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f6:	f000 fa1d 	bl	800aa34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5fa:	f000 fd49 	bl	800b090 <xTaskResumeAll>
 800a5fe:	e76c      	b.n	800a4da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a602:	f000 fa17 	bl	800aa34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a606:	f000 fd43 	bl	800b090 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a60a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3738      	adds	r7, #56	; 0x38
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08e      	sub	sp, #56	; 0x38
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10b      	bne.n	800a648 <xQueueGenericSendFromISR+0x30>
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	b672      	cpsid	i
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	b662      	cpsie	i
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
 800a646:	e7fe      	b.n	800a646 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d103      	bne.n	800a656 <xQueueGenericSendFromISR+0x3e>
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <xQueueGenericSendFromISR+0x42>
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <xQueueGenericSendFromISR+0x44>
 800a65a:	2300      	movs	r3, #0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10b      	bne.n	800a678 <xQueueGenericSendFromISR+0x60>
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	b672      	cpsid	i
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	b662      	cpsie	i
 800a674:	623b      	str	r3, [r7, #32]
 800a676:	e7fe      	b.n	800a676 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d103      	bne.n	800a686 <xQueueGenericSendFromISR+0x6e>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <xQueueGenericSendFromISR+0x72>
 800a686:	2301      	movs	r3, #1
 800a688:	e000      	b.n	800a68c <xQueueGenericSendFromISR+0x74>
 800a68a:	2300      	movs	r3, #0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10b      	bne.n	800a6a8 <xQueueGenericSendFromISR+0x90>
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	b672      	cpsid	i
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	b662      	cpsie	i
 800a6a4:	61fb      	str	r3, [r7, #28]
 800a6a6:	e7fe      	b.n	800a6a6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6a8:	f001 fee6 	bl	800c478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	b672      	cpsid	i
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	b662      	cpsie	i
 800a6c4:	61ba      	str	r2, [r7, #24]
 800a6c6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d302      	bcc.n	800a6de <xQueueGenericSendFromISR+0xc6>
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d12c      	bne.n	800a738 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	68b9      	ldr	r1, [r7, #8]
 800a6ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ee:	f000 f911 	bl	800a914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6f2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d112      	bne.n	800a722 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d016      	beq.n	800a732 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a706:	3324      	adds	r3, #36	; 0x24
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fed9 	bl	800b4c0 <xTaskRemoveFromEventList>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00e      	beq.n	800a732 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00b      	beq.n	800a732 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	e007      	b.n	800a732 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a722:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a726:	3301      	adds	r3, #1
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	b25a      	sxtb	r2, r3
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a732:	2301      	movs	r3, #1
 800a734:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a736:	e001      	b.n	800a73c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a738:	2300      	movs	r3, #0
 800a73a:	637b      	str	r3, [r7, #52]	; 0x34
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3738      	adds	r7, #56	; 0x38
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08c      	sub	sp, #48	; 0x30
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a75c:	2300      	movs	r3, #0
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10b      	bne.n	800a782 <xQueueReceive+0x32>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76e:	b672      	cpsid	i
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	b662      	cpsie	i
 800a77e:	623b      	str	r3, [r7, #32]
 800a780:	e7fe      	b.n	800a780 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d103      	bne.n	800a790 <xQueueReceive+0x40>
 800a788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <xQueueReceive+0x44>
 800a790:	2301      	movs	r3, #1
 800a792:	e000      	b.n	800a796 <xQueueReceive+0x46>
 800a794:	2300      	movs	r3, #0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10b      	bne.n	800a7b2 <xQueueReceive+0x62>
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	b672      	cpsid	i
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	b662      	cpsie	i
 800a7ae:	61fb      	str	r3, [r7, #28]
 800a7b0:	e7fe      	b.n	800a7b0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7b2:	f001 f843 	bl	800b83c <xTaskGetSchedulerState>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d102      	bne.n	800a7c2 <xQueueReceive+0x72>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <xQueueReceive+0x76>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e000      	b.n	800a7c8 <xQueueReceive+0x78>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10b      	bne.n	800a7e4 <xQueueReceive+0x94>
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	b672      	cpsid	i
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	b662      	cpsie	i
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	e7fe      	b.n	800a7e2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7e4:	f001 fd68 	bl	800c2b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d01f      	beq.n	800a834 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7f8:	f000 f8f6 	bl	800a9e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	1e5a      	subs	r2, r3, #1
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00f      	beq.n	800a82c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	3310      	adds	r3, #16
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fe55 	bl	800b4c0 <xTaskRemoveFromEventList>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d007      	beq.n	800a82c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a81c:	4b3c      	ldr	r3, [pc, #240]	; (800a910 <xQueueReceive+0x1c0>)
 800a81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a82c:	f001 fd76 	bl	800c31c <vPortExitCritical>
				return pdPASS;
 800a830:	2301      	movs	r3, #1
 800a832:	e069      	b.n	800a908 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d103      	bne.n	800a842 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a83a:	f001 fd6f 	bl	800c31c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a83e:	2300      	movs	r3, #0
 800a840:	e062      	b.n	800a908 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a848:	f107 0310 	add.w	r3, r7, #16
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 fe9b 	bl	800b588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a852:	2301      	movs	r3, #1
 800a854:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a856:	f001 fd61 	bl	800c31c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a85a:	f000 fc0b 	bl	800b074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a85e:	f001 fd2b 	bl	800c2b8 <vPortEnterCritical>
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a868:	b25b      	sxtb	r3, r3
 800a86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86e:	d103      	bne.n	800a878 <xQueueReceive+0x128>
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	2200      	movs	r2, #0
 800a874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a87e:	b25b      	sxtb	r3, r3
 800a880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a884:	d103      	bne.n	800a88e <xQueueReceive+0x13e>
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a88e:	f001 fd45 	bl	800c31c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a892:	1d3a      	adds	r2, r7, #4
 800a894:	f107 0310 	add.w	r3, r7, #16
 800a898:	4611      	mov	r1, r2
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fe8a 	bl	800b5b4 <xTaskCheckForTimeOut>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d123      	bne.n	800a8ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8a8:	f000 f916 	bl	800aad8 <prvIsQueueEmpty>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d017      	beq.n	800a8e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b4:	3324      	adds	r3, #36	; 0x24
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fdae 	bl	800b41c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8c2:	f000 f8b7 	bl	800aa34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8c6:	f000 fbe3 	bl	800b090 <xTaskResumeAll>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d189      	bne.n	800a7e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a8d0:	4b0f      	ldr	r3, [pc, #60]	; (800a910 <xQueueReceive+0x1c0>)
 800a8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	e780      	b.n	800a7e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e4:	f000 f8a6 	bl	800aa34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8e8:	f000 fbd2 	bl	800b090 <xTaskResumeAll>
 800a8ec:	e77a      	b.n	800a7e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8f0:	f000 f8a0 	bl	800aa34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8f4:	f000 fbcc 	bl	800b090 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fa:	f000 f8ed 	bl	800aad8 <prvIsQueueEmpty>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	f43f af6f 	beq.w	800a7e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a906:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3730      	adds	r7, #48	; 0x30
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	e000ed04 	.word	0xe000ed04

0800a914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a920:	2300      	movs	r3, #0
 800a922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10d      	bne.n	800a94e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d14d      	bne.n	800a9d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 ff9a 	bl	800b878 <xTaskPriorityDisinherit>
 800a944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	609a      	str	r2, [r3, #8]
 800a94c:	e043      	b.n	800a9d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d119      	bne.n	800a988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6858      	ldr	r0, [r3, #4]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95c:	461a      	mov	r2, r3
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	f001 ffd6 	bl	800c910 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96c:	441a      	add	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d32b      	bcc.n	800a9d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	605a      	str	r2, [r3, #4]
 800a986:	e026      	b.n	800a9d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	68d8      	ldr	r0, [r3, #12]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	461a      	mov	r2, r3
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	f001 ffbc 	bl	800c910 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a0:	425b      	negs	r3, r3
 800a9a2:	441a      	add	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	68da      	ldr	r2, [r3, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d207      	bcs.n	800a9c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	689a      	ldr	r2, [r3, #8]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9bc:	425b      	negs	r3, r3
 800a9be:	441a      	add	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d105      	bne.n	800a9d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a9de:	697b      	ldr	r3, [r7, #20]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3718      	adds	r7, #24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d018      	beq.n	800aa2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	68da      	ldr	r2, [r3, #12]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa02:	441a      	add	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68da      	ldr	r2, [r3, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d303      	bcc.n	800aa1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68d9      	ldr	r1, [r3, #12]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa24:	461a      	mov	r2, r3
 800aa26:	6838      	ldr	r0, [r7, #0]
 800aa28:	f001 ff72 	bl	800c910 <memcpy>
	}
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa3c:	f001 fc3c 	bl	800c2b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa48:	e011      	b.n	800aa6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d012      	beq.n	800aa78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3324      	adds	r3, #36	; 0x24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 fd32 	bl	800b4c0 <xTaskRemoveFromEventList>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d001      	beq.n	800aa66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa62:	f000 fe0b 	bl	800b67c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dce9      	bgt.n	800aa4a <prvUnlockQueue+0x16>
 800aa76:	e000      	b.n	800aa7a <prvUnlockQueue+0x46>
					break;
 800aa78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	22ff      	movs	r2, #255	; 0xff
 800aa7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa82:	f001 fc4b 	bl	800c31c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa86:	f001 fc17 	bl	800c2b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa92:	e011      	b.n	800aab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d012      	beq.n	800aac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	3310      	adds	r3, #16
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fd0d 	bl	800b4c0 <xTaskRemoveFromEventList>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aaac:	f000 fde6 	bl	800b67c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dce9      	bgt.n	800aa94 <prvUnlockQueue+0x60>
 800aac0:	e000      	b.n	800aac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	22ff      	movs	r2, #255	; 0xff
 800aac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aacc:	f001 fc26 	bl	800c31c <vPortExitCritical>
}
 800aad0:	bf00      	nop
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aae0:	f001 fbea 	bl	800c2b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d102      	bne.n	800aaf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aaec:	2301      	movs	r3, #1
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	e001      	b.n	800aaf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaf6:	f001 fc11 	bl	800c31c <vPortExitCritical>

	return xReturn;
 800aafa:	68fb      	ldr	r3, [r7, #12]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab0c:	f001 fbd4 	bl	800c2b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d102      	bne.n	800ab22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	e001      	b.n	800ab26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab26:	f001 fbf9 	bl	800c31c <vPortExitCritical>

	return xReturn;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	e014      	b.n	800ab6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab44:	4a0e      	ldr	r2, [pc, #56]	; (800ab80 <vQueueAddToRegistry+0x4c>)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10b      	bne.n	800ab68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab50:	490b      	ldr	r1, [pc, #44]	; (800ab80 <vQueueAddToRegistry+0x4c>)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab5a:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <vQueueAddToRegistry+0x4c>)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	4413      	add	r3, r2
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab66:	e005      	b.n	800ab74 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b07      	cmp	r3, #7
 800ab72:	d9e7      	bls.n	800ab44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab74:	bf00      	nop
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	2000fb30 	.word	0x2000fb30

0800ab84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab94:	f001 fb90 	bl	800c2b8 <vPortEnterCritical>
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab9e:	b25b      	sxtb	r3, r3
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba4:	d103      	bne.n	800abae <vQueueWaitForMessageRestricted+0x2a>
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abb4:	b25b      	sxtb	r3, r3
 800abb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abba:	d103      	bne.n	800abc4 <vQueueWaitForMessageRestricted+0x40>
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abc4:	f001 fbaa 	bl	800c31c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	3324      	adds	r3, #36	; 0x24
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fc45 	bl	800b468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800abde:	6978      	ldr	r0, [r7, #20]
 800abe0:	f7ff ff28 	bl	800aa34 <prvUnlockQueue>
	}
 800abe4:	bf00      	nop
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08e      	sub	sp, #56	; 0x38
 800abf0:	af04      	add	r7, sp, #16
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10b      	bne.n	800ac18 <xTaskCreateStatic+0x2c>
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	b672      	cpsid	i
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	b662      	cpsie	i
 800ac14:	623b      	str	r3, [r7, #32]
 800ac16:	e7fe      	b.n	800ac16 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800ac18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10b      	bne.n	800ac36 <xTaskCreateStatic+0x4a>
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	b672      	cpsid	i
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	b662      	cpsie	i
 800ac32:	61fb      	str	r3, [r7, #28]
 800ac34:	e7fe      	b.n	800ac34 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac36:	235c      	movs	r3, #92	; 0x5c
 800ac38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	2b5c      	cmp	r3, #92	; 0x5c
 800ac3e:	d00b      	beq.n	800ac58 <xTaskCreateStatic+0x6c>
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	b672      	cpsid	i
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	b662      	cpsie	i
 800ac54:	61bb      	str	r3, [r7, #24]
 800ac56:	e7fe      	b.n	800ac56 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01e      	beq.n	800ac9e <xTaskCreateStatic+0xb2>
 800ac60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d01b      	beq.n	800ac9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac6e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac78:	2300      	movs	r3, #0
 800ac7a:	9303      	str	r3, [sp, #12]
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	9302      	str	r3, [sp, #8]
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	9301      	str	r3, [sp, #4]
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 f850 	bl	800ad36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac98:	f000 f8de 	bl	800ae58 <prvAddNewTaskToReadyList>
 800ac9c:	e001      	b.n	800aca2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aca2:	697b      	ldr	r3, [r7, #20]
	}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3728      	adds	r7, #40	; 0x28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acac:	b580      	push	{r7, lr}
 800acae:	b08c      	sub	sp, #48	; 0x30
 800acb0:	af04      	add	r7, sp, #16
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	4613      	mov	r3, r2
 800acba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800acbc:	88fb      	ldrh	r3, [r7, #6]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f001 fc1b 	bl	800c4fc <pvPortMalloc>
 800acc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00e      	beq.n	800acec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800acce:	205c      	movs	r0, #92	; 0x5c
 800acd0:	f001 fc14 	bl	800c4fc <pvPortMalloc>
 800acd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	631a      	str	r2, [r3, #48]	; 0x30
 800ace2:	e005      	b.n	800acf0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ace4:	6978      	ldr	r0, [r7, #20]
 800ace6:	f001 fcd1 	bl	800c68c <vPortFree>
 800acea:	e001      	b.n	800acf0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800acec:	2300      	movs	r3, #0
 800acee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d017      	beq.n	800ad26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acfe:	88fa      	ldrh	r2, [r7, #6]
 800ad00:	2300      	movs	r3, #0
 800ad02:	9303      	str	r3, [sp, #12]
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	9302      	str	r3, [sp, #8]
 800ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0a:	9301      	str	r3, [sp, #4]
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f80e 	bl	800ad36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad1a:	69f8      	ldr	r0, [r7, #28]
 800ad1c:	f000 f89c 	bl	800ae58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad20:	2301      	movs	r3, #1
 800ad22:	61bb      	str	r3, [r7, #24]
 800ad24:	e002      	b.n	800ad2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad26:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
	}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3720      	adds	r7, #32
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b088      	sub	sp, #32
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	607a      	str	r2, [r7, #4]
 800ad42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	21a5      	movs	r1, #165	; 0xa5
 800ad50:	f001 fde9 	bl	800c926 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad58:	6879      	ldr	r1, [r7, #4]
 800ad5a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ad5e:	440b      	add	r3, r1
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	f023 0307 	bic.w	r3, r3, #7
 800ad6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	f003 0307 	and.w	r3, r3, #7
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00b      	beq.n	800ad90 <prvInitialiseNewTask+0x5a>
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	b672      	cpsid	i
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	b662      	cpsie	i
 800ad8c:	617b      	str	r3, [r7, #20]
 800ad8e:	e7fe      	b.n	800ad8e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d01f      	beq.n	800add6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
 800ad9a:	e012      	b.n	800adc2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	7819      	ldrb	r1, [r3, #0]
 800ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	4413      	add	r3, r2
 800adaa:	3334      	adds	r3, #52	; 0x34
 800adac:	460a      	mov	r2, r1
 800adae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	4413      	add	r3, r2
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d006      	beq.n	800adca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	3301      	adds	r3, #1
 800adc0:	61fb      	str	r3, [r7, #28]
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	2b0f      	cmp	r3, #15
 800adc6:	d9e9      	bls.n	800ad9c <prvInitialiseNewTask+0x66>
 800adc8:	e000      	b.n	800adcc <prvInitialiseNewTask+0x96>
			{
				break;
 800adca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800add4:	e003      	b.n	800adde <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	2200      	movs	r2, #0
 800adda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	2b37      	cmp	r3, #55	; 0x37
 800ade2:	d901      	bls.n	800ade8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ade4:	2337      	movs	r3, #55	; 0x37
 800ade6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	2200      	movs	r2, #0
 800adf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	3304      	adds	r3, #4
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff f96a 	bl	800a0d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae06:	3318      	adds	r3, #24
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff f965 	bl	800a0d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	2200      	movs	r2, #0
 800ae28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	68f9      	ldr	r1, [r7, #12]
 800ae36:	69b8      	ldr	r0, [r7, #24]
 800ae38:	f001 f936 	bl	800c0a8 <pxPortInitialiseStack>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae4e:	bf00      	nop
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae60:	f001 fa2a 	bl	800c2b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae64:	4b2d      	ldr	r3, [pc, #180]	; (800af1c <prvAddNewTaskToReadyList+0xc4>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	4a2c      	ldr	r2, [pc, #176]	; (800af1c <prvAddNewTaskToReadyList+0xc4>)
 800ae6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae6e:	4b2c      	ldr	r3, [pc, #176]	; (800af20 <prvAddNewTaskToReadyList+0xc8>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d109      	bne.n	800ae8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae76:	4a2a      	ldr	r2, [pc, #168]	; (800af20 <prvAddNewTaskToReadyList+0xc8>)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae7c:	4b27      	ldr	r3, [pc, #156]	; (800af1c <prvAddNewTaskToReadyList+0xc4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d110      	bne.n	800aea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae84:	f000 fc1e 	bl	800b6c4 <prvInitialiseTaskLists>
 800ae88:	e00d      	b.n	800aea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae8a:	4b26      	ldr	r3, [pc, #152]	; (800af24 <prvAddNewTaskToReadyList+0xcc>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d109      	bne.n	800aea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae92:	4b23      	ldr	r3, [pc, #140]	; (800af20 <prvAddNewTaskToReadyList+0xc8>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d802      	bhi.n	800aea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aea0:	4a1f      	ldr	r2, [pc, #124]	; (800af20 <prvAddNewTaskToReadyList+0xc8>)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aea6:	4b20      	ldr	r3, [pc, #128]	; (800af28 <prvAddNewTaskToReadyList+0xd0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	4a1e      	ldr	r2, [pc, #120]	; (800af28 <prvAddNewTaskToReadyList+0xd0>)
 800aeae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aeb0:	4b1d      	ldr	r3, [pc, #116]	; (800af28 <prvAddNewTaskToReadyList+0xd0>)
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aebc:	4b1b      	ldr	r3, [pc, #108]	; (800af2c <prvAddNewTaskToReadyList+0xd4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d903      	bls.n	800aecc <prvAddNewTaskToReadyList+0x74>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec8:	4a18      	ldr	r2, [pc, #96]	; (800af2c <prvAddNewTaskToReadyList+0xd4>)
 800aeca:	6013      	str	r3, [r2, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4a15      	ldr	r2, [pc, #84]	; (800af30 <prvAddNewTaskToReadyList+0xd8>)
 800aeda:	441a      	add	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3304      	adds	r3, #4
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f7ff f905 	bl	800a0f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aee8:	f001 fa18 	bl	800c31c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aeec:	4b0d      	ldr	r3, [pc, #52]	; (800af24 <prvAddNewTaskToReadyList+0xcc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00e      	beq.n	800af12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aef4:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <prvAddNewTaskToReadyList+0xc8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefe:	429a      	cmp	r2, r3
 800af00:	d207      	bcs.n	800af12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af02:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <prvAddNewTaskToReadyList+0xdc>)
 800af04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20003d90 	.word	0x20003d90
 800af20:	200038bc 	.word	0x200038bc
 800af24:	20003d9c 	.word	0x20003d9c
 800af28:	20003dac 	.word	0x20003dac
 800af2c:	20003d98 	.word	0x20003d98
 800af30:	200038c0 	.word	0x200038c0
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d018      	beq.n	800af7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af4a:	4b14      	ldr	r3, [pc, #80]	; (800af9c <vTaskDelay+0x64>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00b      	beq.n	800af6a <vTaskDelay+0x32>
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	b672      	cpsid	i
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	b662      	cpsie	i
 800af66:	60bb      	str	r3, [r7, #8]
 800af68:	e7fe      	b.n	800af68 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800af6a:	f000 f883 	bl	800b074 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fcf1 	bl	800b958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af76:	f000 f88b 	bl	800b090 <xTaskResumeAll>
 800af7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d107      	bne.n	800af92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800af82:	4b07      	ldr	r3, [pc, #28]	; (800afa0 <vTaskDelay+0x68>)
 800af84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20003db8 	.word	0x20003db8
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08a      	sub	sp, #40	; 0x28
 800afa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800afae:	2300      	movs	r3, #0
 800afb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800afb2:	463a      	mov	r2, r7
 800afb4:	1d39      	adds	r1, r7, #4
 800afb6:	f107 0308 	add.w	r3, r7, #8
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff f838 	bl	800a030 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	9202      	str	r2, [sp, #8]
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	2300      	movs	r3, #0
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	2300      	movs	r3, #0
 800afd0:	460a      	mov	r2, r1
 800afd2:	4922      	ldr	r1, [pc, #136]	; (800b05c <vTaskStartScheduler+0xb8>)
 800afd4:	4822      	ldr	r0, [pc, #136]	; (800b060 <vTaskStartScheduler+0xbc>)
 800afd6:	f7ff fe09 	bl	800abec <xTaskCreateStatic>
 800afda:	4602      	mov	r2, r0
 800afdc:	4b21      	ldr	r3, [pc, #132]	; (800b064 <vTaskStartScheduler+0xc0>)
 800afde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afe0:	4b20      	ldr	r3, [pc, #128]	; (800b064 <vTaskStartScheduler+0xc0>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afe8:	2301      	movs	r3, #1
 800afea:	617b      	str	r3, [r7, #20]
 800afec:	e001      	b.n	800aff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afee:	2300      	movs	r3, #0
 800aff0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d102      	bne.n	800affe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aff8:	f000 fd02 	bl	800ba00 <xTimerCreateTimerTask>
 800affc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d117      	bne.n	800b034 <vTaskStartScheduler+0x90>
 800b004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b008:	b672      	cpsid	i
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	b662      	cpsie	i
 800b018:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b01a:	4b13      	ldr	r3, [pc, #76]	; (800b068 <vTaskStartScheduler+0xc4>)
 800b01c:	f04f 32ff 	mov.w	r2, #4294967295
 800b020:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b022:	4b12      	ldr	r3, [pc, #72]	; (800b06c <vTaskStartScheduler+0xc8>)
 800b024:	2201      	movs	r2, #1
 800b026:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b028:	4b11      	ldr	r3, [pc, #68]	; (800b070 <vTaskStartScheduler+0xcc>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b02e:	f001 f8c7 	bl	800c1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b032:	e00f      	b.n	800b054 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03a:	d10b      	bne.n	800b054 <vTaskStartScheduler+0xb0>
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	b672      	cpsid	i
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	b662      	cpsie	i
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	e7fe      	b.n	800b052 <vTaskStartScheduler+0xae>
}
 800b054:	bf00      	nop
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	0801026c 	.word	0x0801026c
 800b060:	0800b695 	.word	0x0800b695
 800b064:	20003db4 	.word	0x20003db4
 800b068:	20003db0 	.word	0x20003db0
 800b06c:	20003d9c 	.word	0x20003d9c
 800b070:	20003d94 	.word	0x20003d94

0800b074 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b078:	4b04      	ldr	r3, [pc, #16]	; (800b08c <vTaskSuspendAll+0x18>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	4a03      	ldr	r2, [pc, #12]	; (800b08c <vTaskSuspendAll+0x18>)
 800b080:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b082:	bf00      	nop
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	20003db8 	.word	0x20003db8

0800b090 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b096:	2300      	movs	r3, #0
 800b098:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b09a:	2300      	movs	r3, #0
 800b09c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b09e:	4b42      	ldr	r3, [pc, #264]	; (800b1a8 <xTaskResumeAll+0x118>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10b      	bne.n	800b0be <xTaskResumeAll+0x2e>
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	b672      	cpsid	i
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	b662      	cpsie	i
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	e7fe      	b.n	800b0bc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0be:	f001 f8fb 	bl	800c2b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0c2:	4b39      	ldr	r3, [pc, #228]	; (800b1a8 <xTaskResumeAll+0x118>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	4a37      	ldr	r2, [pc, #220]	; (800b1a8 <xTaskResumeAll+0x118>)
 800b0ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0cc:	4b36      	ldr	r3, [pc, #216]	; (800b1a8 <xTaskResumeAll+0x118>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d162      	bne.n	800b19a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0d4:	4b35      	ldr	r3, [pc, #212]	; (800b1ac <xTaskResumeAll+0x11c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d05e      	beq.n	800b19a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0dc:	e02f      	b.n	800b13e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0de:	4b34      	ldr	r3, [pc, #208]	; (800b1b0 <xTaskResumeAll+0x120>)
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3318      	adds	r3, #24
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff f85e 	bl	800a1ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff f859 	bl	800a1ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fe:	4b2d      	ldr	r3, [pc, #180]	; (800b1b4 <xTaskResumeAll+0x124>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d903      	bls.n	800b10e <xTaskResumeAll+0x7e>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	4a2a      	ldr	r2, [pc, #168]	; (800b1b4 <xTaskResumeAll+0x124>)
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b112:	4613      	mov	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4a27      	ldr	r2, [pc, #156]	; (800b1b8 <xTaskResumeAll+0x128>)
 800b11c:	441a      	add	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3304      	adds	r3, #4
 800b122:	4619      	mov	r1, r3
 800b124:	4610      	mov	r0, r2
 800b126:	f7fe ffe4 	bl	800a0f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12e:	4b23      	ldr	r3, [pc, #140]	; (800b1bc <xTaskResumeAll+0x12c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b134:	429a      	cmp	r2, r3
 800b136:	d302      	bcc.n	800b13e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b138:	4b21      	ldr	r3, [pc, #132]	; (800b1c0 <xTaskResumeAll+0x130>)
 800b13a:	2201      	movs	r2, #1
 800b13c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b13e:	4b1c      	ldr	r3, [pc, #112]	; (800b1b0 <xTaskResumeAll+0x120>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1cb      	bne.n	800b0de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b14c:	f000 fb56 	bl	800b7fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b150:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <xTaskResumeAll+0x134>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d010      	beq.n	800b17e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b15c:	f000 f846 	bl	800b1ec <xTaskIncrementTick>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b166:	4b16      	ldr	r3, [pc, #88]	; (800b1c0 <xTaskResumeAll+0x130>)
 800b168:	2201      	movs	r2, #1
 800b16a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3b01      	subs	r3, #1
 800b170:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1f1      	bne.n	800b15c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b178:	4b12      	ldr	r3, [pc, #72]	; (800b1c4 <xTaskResumeAll+0x134>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b17e:	4b10      	ldr	r3, [pc, #64]	; (800b1c0 <xTaskResumeAll+0x130>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d009      	beq.n	800b19a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b186:	2301      	movs	r3, #1
 800b188:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b18a:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <xTaskResumeAll+0x138>)
 800b18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b190:	601a      	str	r2, [r3, #0]
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b19a:	f001 f8bf 	bl	800c31c <vPortExitCritical>

	return xAlreadyYielded;
 800b19e:	68bb      	ldr	r3, [r7, #8]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20003db8 	.word	0x20003db8
 800b1ac:	20003d90 	.word	0x20003d90
 800b1b0:	20003d50 	.word	0x20003d50
 800b1b4:	20003d98 	.word	0x20003d98
 800b1b8:	200038c0 	.word	0x200038c0
 800b1bc:	200038bc 	.word	0x200038bc
 800b1c0:	20003da4 	.word	0x20003da4
 800b1c4:	20003da0 	.word	0x20003da0
 800b1c8:	e000ed04 	.word	0xe000ed04

0800b1cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1d2:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <xTaskGetTickCount+0x1c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1d8:	687b      	ldr	r3, [r7, #4]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	20003d94 	.word	0x20003d94

0800b1ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1f6:	4b4f      	ldr	r3, [pc, #316]	; (800b334 <xTaskIncrementTick+0x148>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f040 808a 	bne.w	800b314 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b200:	4b4d      	ldr	r3, [pc, #308]	; (800b338 <xTaskIncrementTick+0x14c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3301      	adds	r3, #1
 800b206:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b208:	4a4b      	ldr	r2, [pc, #300]	; (800b338 <xTaskIncrementTick+0x14c>)
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d121      	bne.n	800b258 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b214:	4b49      	ldr	r3, [pc, #292]	; (800b33c <xTaskIncrementTick+0x150>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00b      	beq.n	800b236 <xTaskIncrementTick+0x4a>
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	b672      	cpsid	i
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	b662      	cpsie	i
 800b232:	603b      	str	r3, [r7, #0]
 800b234:	e7fe      	b.n	800b234 <xTaskIncrementTick+0x48>
 800b236:	4b41      	ldr	r3, [pc, #260]	; (800b33c <xTaskIncrementTick+0x150>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	4b40      	ldr	r3, [pc, #256]	; (800b340 <xTaskIncrementTick+0x154>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a3e      	ldr	r2, [pc, #248]	; (800b33c <xTaskIncrementTick+0x150>)
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	4a3e      	ldr	r2, [pc, #248]	; (800b340 <xTaskIncrementTick+0x154>)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	4b3e      	ldr	r3, [pc, #248]	; (800b344 <xTaskIncrementTick+0x158>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3301      	adds	r3, #1
 800b250:	4a3c      	ldr	r2, [pc, #240]	; (800b344 <xTaskIncrementTick+0x158>)
 800b252:	6013      	str	r3, [r2, #0]
 800b254:	f000 fad2 	bl	800b7fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b258:	4b3b      	ldr	r3, [pc, #236]	; (800b348 <xTaskIncrementTick+0x15c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d349      	bcc.n	800b2f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b262:	4b36      	ldr	r3, [pc, #216]	; (800b33c <xTaskIncrementTick+0x150>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d104      	bne.n	800b276 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b26c:	4b36      	ldr	r3, [pc, #216]	; (800b348 <xTaskIncrementTick+0x15c>)
 800b26e:	f04f 32ff 	mov.w	r2, #4294967295
 800b272:	601a      	str	r2, [r3, #0]
					break;
 800b274:	e03f      	b.n	800b2f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b276:	4b31      	ldr	r3, [pc, #196]	; (800b33c <xTaskIncrementTick+0x150>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d203      	bcs.n	800b296 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b28e:	4a2e      	ldr	r2, [pc, #184]	; (800b348 <xTaskIncrementTick+0x15c>)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b294:	e02f      	b.n	800b2f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	3304      	adds	r3, #4
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe ff86 	bl	800a1ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d004      	beq.n	800b2b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	3318      	adds	r3, #24
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe ff7d 	bl	800a1ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b6:	4b25      	ldr	r3, [pc, #148]	; (800b34c <xTaskIncrementTick+0x160>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d903      	bls.n	800b2c6 <xTaskIncrementTick+0xda>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c2:	4a22      	ldr	r2, [pc, #136]	; (800b34c <xTaskIncrementTick+0x160>)
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4a1f      	ldr	r2, [pc, #124]	; (800b350 <xTaskIncrementTick+0x164>)
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4610      	mov	r0, r2
 800b2de:	f7fe ff08 	bl	800a0f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e6:	4b1b      	ldr	r3, [pc, #108]	; (800b354 <xTaskIncrementTick+0x168>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d3b8      	bcc.n	800b262 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2f4:	e7b5      	b.n	800b262 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2f6:	4b17      	ldr	r3, [pc, #92]	; (800b354 <xTaskIncrementTick+0x168>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	4914      	ldr	r1, [pc, #80]	; (800b350 <xTaskIncrementTick+0x164>)
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	440b      	add	r3, r1
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d907      	bls.n	800b31e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b30e:	2301      	movs	r3, #1
 800b310:	617b      	str	r3, [r7, #20]
 800b312:	e004      	b.n	800b31e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b314:	4b10      	ldr	r3, [pc, #64]	; (800b358 <xTaskIncrementTick+0x16c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3301      	adds	r3, #1
 800b31a:	4a0f      	ldr	r2, [pc, #60]	; (800b358 <xTaskIncrementTick+0x16c>)
 800b31c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b31e:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <xTaskIncrementTick+0x170>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b326:	2301      	movs	r3, #1
 800b328:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b32a:	697b      	ldr	r3, [r7, #20]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20003db8 	.word	0x20003db8
 800b338:	20003d94 	.word	0x20003d94
 800b33c:	20003d48 	.word	0x20003d48
 800b340:	20003d4c 	.word	0x20003d4c
 800b344:	20003da8 	.word	0x20003da8
 800b348:	20003db0 	.word	0x20003db0
 800b34c:	20003d98 	.word	0x20003d98
 800b350:	200038c0 	.word	0x200038c0
 800b354:	200038bc 	.word	0x200038bc
 800b358:	20003da0 	.word	0x20003da0
 800b35c:	20003da4 	.word	0x20003da4

0800b360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b366:	4b28      	ldr	r3, [pc, #160]	; (800b408 <vTaskSwitchContext+0xa8>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b36e:	4b27      	ldr	r3, [pc, #156]	; (800b40c <vTaskSwitchContext+0xac>)
 800b370:	2201      	movs	r2, #1
 800b372:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b374:	e042      	b.n	800b3fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b376:	4b25      	ldr	r3, [pc, #148]	; (800b40c <vTaskSwitchContext+0xac>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b37c:	4b24      	ldr	r3, [pc, #144]	; (800b410 <vTaskSwitchContext+0xb0>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	e011      	b.n	800b3a8 <vTaskSwitchContext+0x48>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10b      	bne.n	800b3a2 <vTaskSwitchContext+0x42>
 800b38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38e:	b672      	cpsid	i
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	b662      	cpsie	i
 800b39e:	607b      	str	r3, [r7, #4]
 800b3a0:	e7fe      	b.n	800b3a0 <vTaskSwitchContext+0x40>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	491a      	ldr	r1, [pc, #104]	; (800b414 <vTaskSwitchContext+0xb4>)
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	440b      	add	r3, r1
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d0e3      	beq.n	800b384 <vTaskSwitchContext+0x24>
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4413      	add	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4a13      	ldr	r2, [pc, #76]	; (800b414 <vTaskSwitchContext+0xb4>)
 800b3c8:	4413      	add	r3, r2
 800b3ca:	60bb      	str	r3, [r7, #8]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	605a      	str	r2, [r3, #4]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	3308      	adds	r3, #8
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d104      	bne.n	800b3ec <vTaskSwitchContext+0x8c>
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	605a      	str	r2, [r3, #4]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	4a09      	ldr	r2, [pc, #36]	; (800b418 <vTaskSwitchContext+0xb8>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	4a06      	ldr	r2, [pc, #24]	; (800b410 <vTaskSwitchContext+0xb0>)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6013      	str	r3, [r2, #0]
}
 800b3fc:	bf00      	nop
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	20003db8 	.word	0x20003db8
 800b40c:	20003da4 	.word	0x20003da4
 800b410:	20003d98 	.word	0x20003d98
 800b414:	200038c0 	.word	0x200038c0
 800b418:	200038bc 	.word	0x200038bc

0800b41c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10b      	bne.n	800b444 <vTaskPlaceOnEventList+0x28>
 800b42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b430:	b672      	cpsid	i
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	b662      	cpsie	i
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	e7fe      	b.n	800b442 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b444:	4b07      	ldr	r3, [pc, #28]	; (800b464 <vTaskPlaceOnEventList+0x48>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3318      	adds	r3, #24
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7fe fe74 	bl	800a13a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b452:	2101      	movs	r1, #1
 800b454:	6838      	ldr	r0, [r7, #0]
 800b456:	f000 fa7f 	bl	800b958 <prvAddCurrentTaskToDelayedList>
}
 800b45a:	bf00      	nop
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	200038bc 	.word	0x200038bc

0800b468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <vTaskPlaceOnEventListRestricted+0x2a>
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	b672      	cpsid	i
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	b662      	cpsie	i
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	e7fe      	b.n	800b490 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b492:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <vTaskPlaceOnEventListRestricted+0x54>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3318      	adds	r3, #24
 800b498:	4619      	mov	r1, r3
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7fe fe29 	bl	800a0f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	68b8      	ldr	r0, [r7, #8]
 800b4b0:	f000 fa52 	bl	800b958 <prvAddCurrentTaskToDelayedList>
	}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	200038bc 	.word	0x200038bc

0800b4c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <xTaskRemoveFromEventList+0x2e>
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	b672      	cpsid	i
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	b662      	cpsie	i
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	e7fe      	b.n	800b4ec <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	3318      	adds	r3, #24
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fe fe5a 	bl	800a1ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4f8:	4b1d      	ldr	r3, [pc, #116]	; (800b570 <xTaskRemoveFromEventList+0xb0>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d11d      	bne.n	800b53c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	3304      	adds	r3, #4
 800b504:	4618      	mov	r0, r3
 800b506:	f7fe fe51 	bl	800a1ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50e:	4b19      	ldr	r3, [pc, #100]	; (800b574 <xTaskRemoveFromEventList+0xb4>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d903      	bls.n	800b51e <xTaskRemoveFromEventList+0x5e>
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51a:	4a16      	ldr	r2, [pc, #88]	; (800b574 <xTaskRemoveFromEventList+0xb4>)
 800b51c:	6013      	str	r3, [r2, #0]
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b522:	4613      	mov	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4a13      	ldr	r2, [pc, #76]	; (800b578 <xTaskRemoveFromEventList+0xb8>)
 800b52c:	441a      	add	r2, r3
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	3304      	adds	r3, #4
 800b532:	4619      	mov	r1, r3
 800b534:	4610      	mov	r0, r2
 800b536:	f7fe fddc 	bl	800a0f2 <vListInsertEnd>
 800b53a:	e005      	b.n	800b548 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	3318      	adds	r3, #24
 800b540:	4619      	mov	r1, r3
 800b542:	480e      	ldr	r0, [pc, #56]	; (800b57c <xTaskRemoveFromEventList+0xbc>)
 800b544:	f7fe fdd5 	bl	800a0f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54c:	4b0c      	ldr	r3, [pc, #48]	; (800b580 <xTaskRemoveFromEventList+0xc0>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b552:	429a      	cmp	r2, r3
 800b554:	d905      	bls.n	800b562 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b556:	2301      	movs	r3, #1
 800b558:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b55a:	4b0a      	ldr	r3, [pc, #40]	; (800b584 <xTaskRemoveFromEventList+0xc4>)
 800b55c:	2201      	movs	r2, #1
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	e001      	b.n	800b566 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b562:	2300      	movs	r3, #0
 800b564:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b566:	697b      	ldr	r3, [r7, #20]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20003db8 	.word	0x20003db8
 800b574:	20003d98 	.word	0x20003d98
 800b578:	200038c0 	.word	0x200038c0
 800b57c:	20003d50 	.word	0x20003d50
 800b580:	200038bc 	.word	0x200038bc
 800b584:	20003da4 	.word	0x20003da4

0800b588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b590:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <vTaskInternalSetTimeOutState+0x24>)
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b598:	4b05      	ldr	r3, [pc, #20]	; (800b5b0 <vTaskInternalSetTimeOutState+0x28>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	605a      	str	r2, [r3, #4]
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	20003da8 	.word	0x20003da8
 800b5b0:	20003d94 	.word	0x20003d94

0800b5b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b088      	sub	sp, #32
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <xTaskCheckForTimeOut+0x28>
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	b672      	cpsid	i
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	b662      	cpsie	i
 800b5d8:	613b      	str	r3, [r7, #16]
 800b5da:	e7fe      	b.n	800b5da <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10b      	bne.n	800b5fa <xTaskCheckForTimeOut+0x46>
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	b672      	cpsid	i
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	b662      	cpsie	i
 800b5f6:	60fb      	str	r3, [r7, #12]
 800b5f8:	e7fe      	b.n	800b5f8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b5fa:	f000 fe5d 	bl	800c2b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5fe:	4b1d      	ldr	r3, [pc, #116]	; (800b674 <xTaskCheckForTimeOut+0xc0>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b616:	d102      	bne.n	800b61e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b618:	2300      	movs	r3, #0
 800b61a:	61fb      	str	r3, [r7, #28]
 800b61c:	e023      	b.n	800b666 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	4b15      	ldr	r3, [pc, #84]	; (800b678 <xTaskCheckForTimeOut+0xc4>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	429a      	cmp	r2, r3
 800b628:	d007      	beq.n	800b63a <xTaskCheckForTimeOut+0x86>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	429a      	cmp	r2, r3
 800b632:	d302      	bcc.n	800b63a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b634:	2301      	movs	r3, #1
 800b636:	61fb      	str	r3, [r7, #28]
 800b638:	e015      	b.n	800b666 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	429a      	cmp	r2, r3
 800b642:	d20b      	bcs.n	800b65c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	1ad2      	subs	r2, r2, r3
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7ff ff99 	bl	800b588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]
 800b65a:	e004      	b.n	800b666 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2200      	movs	r2, #0
 800b660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b662:	2301      	movs	r3, #1
 800b664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b666:	f000 fe59 	bl	800c31c <vPortExitCritical>

	return xReturn;
 800b66a:	69fb      	ldr	r3, [r7, #28]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3720      	adds	r7, #32
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20003d94 	.word	0x20003d94
 800b678:	20003da8 	.word	0x20003da8

0800b67c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b67c:	b480      	push	{r7}
 800b67e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b680:	4b03      	ldr	r3, [pc, #12]	; (800b690 <vTaskMissedYield+0x14>)
 800b682:	2201      	movs	r2, #1
 800b684:	601a      	str	r2, [r3, #0]
}
 800b686:	bf00      	nop
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr
 800b690:	20003da4 	.word	0x20003da4

0800b694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b69c:	f000 f852 	bl	800b744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6a0:	4b06      	ldr	r3, [pc, #24]	; (800b6bc <prvIdleTask+0x28>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d9f9      	bls.n	800b69c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6a8:	4b05      	ldr	r3, [pc, #20]	; (800b6c0 <prvIdleTask+0x2c>)
 800b6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6b8:	e7f0      	b.n	800b69c <prvIdleTask+0x8>
 800b6ba:	bf00      	nop
 800b6bc:	200038c0 	.word	0x200038c0
 800b6c0:	e000ed04 	.word	0xe000ed04

0800b6c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	607b      	str	r3, [r7, #4]
 800b6ce:	e00c      	b.n	800b6ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4a12      	ldr	r2, [pc, #72]	; (800b724 <prvInitialiseTaskLists+0x60>)
 800b6dc:	4413      	add	r3, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fe fcda 	bl	800a098 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	607b      	str	r3, [r7, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b37      	cmp	r3, #55	; 0x37
 800b6ee:	d9ef      	bls.n	800b6d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6f0:	480d      	ldr	r0, [pc, #52]	; (800b728 <prvInitialiseTaskLists+0x64>)
 800b6f2:	f7fe fcd1 	bl	800a098 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6f6:	480d      	ldr	r0, [pc, #52]	; (800b72c <prvInitialiseTaskLists+0x68>)
 800b6f8:	f7fe fcce 	bl	800a098 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6fc:	480c      	ldr	r0, [pc, #48]	; (800b730 <prvInitialiseTaskLists+0x6c>)
 800b6fe:	f7fe fccb 	bl	800a098 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b702:	480c      	ldr	r0, [pc, #48]	; (800b734 <prvInitialiseTaskLists+0x70>)
 800b704:	f7fe fcc8 	bl	800a098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b708:	480b      	ldr	r0, [pc, #44]	; (800b738 <prvInitialiseTaskLists+0x74>)
 800b70a:	f7fe fcc5 	bl	800a098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b70e:	4b0b      	ldr	r3, [pc, #44]	; (800b73c <prvInitialiseTaskLists+0x78>)
 800b710:	4a05      	ldr	r2, [pc, #20]	; (800b728 <prvInitialiseTaskLists+0x64>)
 800b712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b714:	4b0a      	ldr	r3, [pc, #40]	; (800b740 <prvInitialiseTaskLists+0x7c>)
 800b716:	4a05      	ldr	r2, [pc, #20]	; (800b72c <prvInitialiseTaskLists+0x68>)
 800b718:	601a      	str	r2, [r3, #0]
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	200038c0 	.word	0x200038c0
 800b728:	20003d20 	.word	0x20003d20
 800b72c:	20003d34 	.word	0x20003d34
 800b730:	20003d50 	.word	0x20003d50
 800b734:	20003d64 	.word	0x20003d64
 800b738:	20003d7c 	.word	0x20003d7c
 800b73c:	20003d48 	.word	0x20003d48
 800b740:	20003d4c 	.word	0x20003d4c

0800b744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b74a:	e019      	b.n	800b780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b74c:	f000 fdb4 	bl	800c2b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b750:	4b0f      	ldr	r3, [pc, #60]	; (800b790 <prvCheckTasksWaitingTermination+0x4c>)
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3304      	adds	r3, #4
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe fd25 	bl	800a1ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b762:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <prvCheckTasksWaitingTermination+0x50>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3b01      	subs	r3, #1
 800b768:	4a0a      	ldr	r2, [pc, #40]	; (800b794 <prvCheckTasksWaitingTermination+0x50>)
 800b76a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b76c:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <prvCheckTasksWaitingTermination+0x54>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3b01      	subs	r3, #1
 800b772:	4a09      	ldr	r2, [pc, #36]	; (800b798 <prvCheckTasksWaitingTermination+0x54>)
 800b774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b776:	f000 fdd1 	bl	800c31c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f80e 	bl	800b79c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b780:	4b05      	ldr	r3, [pc, #20]	; (800b798 <prvCheckTasksWaitingTermination+0x54>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e1      	bne.n	800b74c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b788:	bf00      	nop
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	20003d64 	.word	0x20003d64
 800b794:	20003d90 	.word	0x20003d90
 800b798:	20003d78 	.word	0x20003d78

0800b79c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d108      	bne.n	800b7c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 ff6a 	bl	800c68c <vPortFree>
				vPortFree( pxTCB );
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 ff67 	bl	800c68c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7be:	e019      	b.n	800b7f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d103      	bne.n	800b7d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 ff5e 	bl	800c68c <vPortFree>
	}
 800b7d0:	e010      	b.n	800b7f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d00b      	beq.n	800b7f4 <prvDeleteTCB+0x58>
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	b672      	cpsid	i
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	b662      	cpsie	i
 800b7f0:	60fb      	str	r3, [r7, #12]
 800b7f2:	e7fe      	b.n	800b7f2 <prvDeleteTCB+0x56>
	}
 800b7f4:	bf00      	nop
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b802:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <prvResetNextTaskUnblockTime+0x38>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d104      	bne.n	800b816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b80c:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <prvResetNextTaskUnblockTime+0x3c>)
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295
 800b812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b814:	e008      	b.n	800b828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b816:	4b07      	ldr	r3, [pc, #28]	; (800b834 <prvResetNextTaskUnblockTime+0x38>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	4a04      	ldr	r2, [pc, #16]	; (800b838 <prvResetNextTaskUnblockTime+0x3c>)
 800b826:	6013      	str	r3, [r2, #0]
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	20003d48 	.word	0x20003d48
 800b838:	20003db0 	.word	0x20003db0

0800b83c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b842:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <xTaskGetSchedulerState+0x34>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b84a:	2301      	movs	r3, #1
 800b84c:	607b      	str	r3, [r7, #4]
 800b84e:	e008      	b.n	800b862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b850:	4b08      	ldr	r3, [pc, #32]	; (800b874 <xTaskGetSchedulerState+0x38>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d102      	bne.n	800b85e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b858:	2302      	movs	r3, #2
 800b85a:	607b      	str	r3, [r7, #4]
 800b85c:	e001      	b.n	800b862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b85e:	2300      	movs	r3, #0
 800b860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b862:	687b      	ldr	r3, [r7, #4]
	}
 800b864:	4618      	mov	r0, r3
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	20003d9c 	.word	0x20003d9c
 800b874:	20003db8 	.word	0x20003db8

0800b878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b884:	2300      	movs	r3, #0
 800b886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d058      	beq.n	800b940 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b88e:	4b2f      	ldr	r3, [pc, #188]	; (800b94c <xTaskPriorityDisinherit+0xd4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	429a      	cmp	r2, r3
 800b896:	d00b      	beq.n	800b8b0 <xTaskPriorityDisinherit+0x38>
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	b672      	cpsid	i
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	b662      	cpsie	i
 800b8ac:	60fb      	str	r3, [r7, #12]
 800b8ae:	e7fe      	b.n	800b8ae <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10b      	bne.n	800b8d0 <xTaskPriorityDisinherit+0x58>
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	b672      	cpsid	i
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	b662      	cpsie	i
 800b8cc:	60bb      	str	r3, [r7, #8]
 800b8ce:	e7fe      	b.n	800b8ce <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d4:	1e5a      	subs	r2, r3, #1
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d02c      	beq.n	800b940 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d128      	bne.n	800b940 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fc5a 	bl	800a1ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b904:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b910:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <xTaskPriorityDisinherit+0xd8>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d903      	bls.n	800b920 <xTaskPriorityDisinherit+0xa8>
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	4a0c      	ldr	r2, [pc, #48]	; (800b950 <xTaskPriorityDisinherit+0xd8>)
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b924:	4613      	mov	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4a09      	ldr	r2, [pc, #36]	; (800b954 <xTaskPriorityDisinherit+0xdc>)
 800b92e:	441a      	add	r2, r3
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	3304      	adds	r3, #4
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7fe fbdb 	bl	800a0f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b940:	697b      	ldr	r3, [r7, #20]
	}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	200038bc 	.word	0x200038bc
 800b950:	20003d98 	.word	0x20003d98
 800b954:	200038c0 	.word	0x200038c0

0800b958 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b962:	4b21      	ldr	r3, [pc, #132]	; (800b9e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b968:	4b20      	ldr	r3, [pc, #128]	; (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fc1c 	bl	800a1ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97a:	d10a      	bne.n	800b992 <prvAddCurrentTaskToDelayedList+0x3a>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d007      	beq.n	800b992 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b982:	4b1a      	ldr	r3, [pc, #104]	; (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3304      	adds	r3, #4
 800b988:	4619      	mov	r1, r3
 800b98a:	4819      	ldr	r0, [pc, #100]	; (800b9f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b98c:	f7fe fbb1 	bl	800a0f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b990:	e026      	b.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4413      	add	r3, r2
 800b998:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b99a:	4b14      	ldr	r3, [pc, #80]	; (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d209      	bcs.n	800b9be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9aa:	4b12      	ldr	r3, [pc, #72]	; (800b9f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	f7fe fbbf 	bl	800a13a <vListInsert>
}
 800b9bc:	e010      	b.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9be:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	f7fe fbb5 	bl	800a13a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d202      	bcs.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9da:	4a08      	ldr	r2, [pc, #32]	; (800b9fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	6013      	str	r3, [r2, #0]
}
 800b9e0:	bf00      	nop
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20003d94 	.word	0x20003d94
 800b9ec:	200038bc 	.word	0x200038bc
 800b9f0:	20003d7c 	.word	0x20003d7c
 800b9f4:	20003d4c 	.word	0x20003d4c
 800b9f8:	20003d48 	.word	0x20003d48
 800b9fc:	20003db0 	.word	0x20003db0

0800ba00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b08a      	sub	sp, #40	; 0x28
 800ba04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba0a:	f000 fb0d 	bl	800c028 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba0e:	4b1d      	ldr	r3, [pc, #116]	; (800ba84 <xTimerCreateTimerTask+0x84>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d021      	beq.n	800ba5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba1e:	1d3a      	adds	r2, r7, #4
 800ba20:	f107 0108 	add.w	r1, r7, #8
 800ba24:	f107 030c 	add.w	r3, r7, #12
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe fb1b 	bl	800a064 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	9202      	str	r2, [sp, #8]
 800ba36:	9301      	str	r3, [sp, #4]
 800ba38:	2302      	movs	r3, #2
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	460a      	mov	r2, r1
 800ba40:	4911      	ldr	r1, [pc, #68]	; (800ba88 <xTimerCreateTimerTask+0x88>)
 800ba42:	4812      	ldr	r0, [pc, #72]	; (800ba8c <xTimerCreateTimerTask+0x8c>)
 800ba44:	f7ff f8d2 	bl	800abec <xTaskCreateStatic>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	4b11      	ldr	r3, [pc, #68]	; (800ba90 <xTimerCreateTimerTask+0x90>)
 800ba4c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba4e:	4b10      	ldr	r3, [pc, #64]	; (800ba90 <xTimerCreateTimerTask+0x90>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba56:	2301      	movs	r3, #1
 800ba58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10b      	bne.n	800ba78 <xTimerCreateTimerTask+0x78>
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	b672      	cpsid	i
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	b662      	cpsie	i
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	e7fe      	b.n	800ba76 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800ba78:	697b      	ldr	r3, [r7, #20]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20003dec 	.word	0x20003dec
 800ba88:	08010274 	.word	0x08010274
 800ba8c:	0800bbcd 	.word	0x0800bbcd
 800ba90:	20003df0 	.word	0x20003df0

0800ba94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08a      	sub	sp, #40	; 0x28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10b      	bne.n	800bac4 <xTimerGenericCommand+0x30>
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	b672      	cpsid	i
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	b662      	cpsie	i
 800bac0:	623b      	str	r3, [r7, #32]
 800bac2:	e7fe      	b.n	800bac2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bac4:	4b19      	ldr	r3, [pc, #100]	; (800bb2c <xTimerGenericCommand+0x98>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d02a      	beq.n	800bb22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b05      	cmp	r3, #5
 800badc:	dc18      	bgt.n	800bb10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bade:	f7ff fead 	bl	800b83c <xTaskGetSchedulerState>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d109      	bne.n	800bafc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bae8:	4b10      	ldr	r3, [pc, #64]	; (800bb2c <xTimerGenericCommand+0x98>)
 800baea:	6818      	ldr	r0, [r3, #0]
 800baec:	f107 0110 	add.w	r1, r7, #16
 800baf0:	2300      	movs	r3, #0
 800baf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baf4:	f7fe fc8e 	bl	800a414 <xQueueGenericSend>
 800baf8:	6278      	str	r0, [r7, #36]	; 0x24
 800bafa:	e012      	b.n	800bb22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bafc:	4b0b      	ldr	r3, [pc, #44]	; (800bb2c <xTimerGenericCommand+0x98>)
 800bafe:	6818      	ldr	r0, [r3, #0]
 800bb00:	f107 0110 	add.w	r1, r7, #16
 800bb04:	2300      	movs	r3, #0
 800bb06:	2200      	movs	r2, #0
 800bb08:	f7fe fc84 	bl	800a414 <xQueueGenericSend>
 800bb0c:	6278      	str	r0, [r7, #36]	; 0x24
 800bb0e:	e008      	b.n	800bb22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb10:	4b06      	ldr	r3, [pc, #24]	; (800bb2c <xTimerGenericCommand+0x98>)
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	f107 0110 	add.w	r1, r7, #16
 800bb18:	2300      	movs	r3, #0
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	f7fe fd7c 	bl	800a618 <xQueueGenericSendFromISR>
 800bb20:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3728      	adds	r7, #40	; 0x28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	20003dec 	.word	0x20003dec

0800bb30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af02      	add	r7, sp, #8
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb3a:	4b23      	ldr	r3, [pc, #140]	; (800bbc8 <prvProcessExpiredTimer+0x98>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe fb2f 	bl	800a1ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d023      	beq.n	800bba4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	699a      	ldr	r2, [r3, #24]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	18d1      	adds	r1, r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	6978      	ldr	r0, [r7, #20]
 800bb6a:	f000 f8d3 	bl	800bd14 <prvInsertTimerInActiveList>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d020      	beq.n	800bbb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb74:	2300      	movs	r3, #0
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	6978      	ldr	r0, [r7, #20]
 800bb80:	f7ff ff88 	bl	800ba94 <xTimerGenericCommand>
 800bb84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d114      	bne.n	800bbb6 <prvProcessExpiredTimer+0x86>
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	b672      	cpsid	i
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	b662      	cpsie	i
 800bba0:	60fb      	str	r3, [r7, #12]
 800bba2:	e7fe      	b.n	800bba2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbaa:	f023 0301 	bic.w	r3, r3, #1
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	6978      	ldr	r0, [r7, #20]
 800bbbc:	4798      	blx	r3
}
 800bbbe:	bf00      	nop
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20003de4 	.word	0x20003de4

0800bbcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbd4:	f107 0308 	add.w	r3, r7, #8
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 f857 	bl	800bc8c <prvGetNextExpireTime>
 800bbde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f803 	bl	800bbf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbea:	f000 f8d5 	bl	800bd98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbee:	e7f1      	b.n	800bbd4 <prvTimerTask+0x8>

0800bbf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbfa:	f7ff fa3b 	bl	800b074 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbfe:	f107 0308 	add.w	r3, r7, #8
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 f866 	bl	800bcd4 <prvSampleTimeNow>
 800bc08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d130      	bne.n	800bc72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10a      	bne.n	800bc2c <prvProcessTimerOrBlockTask+0x3c>
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d806      	bhi.n	800bc2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc1e:	f7ff fa37 	bl	800b090 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc22:	68f9      	ldr	r1, [r7, #12]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff ff83 	bl	800bb30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc2a:	e024      	b.n	800bc76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d008      	beq.n	800bc44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc32:	4b13      	ldr	r3, [pc, #76]	; (800bc80 <prvProcessTimerOrBlockTask+0x90>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d101      	bne.n	800bc40 <prvProcessTimerOrBlockTask+0x50>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e000      	b.n	800bc42 <prvProcessTimerOrBlockTask+0x52>
 800bc40:	2300      	movs	r3, #0
 800bc42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc44:	4b0f      	ldr	r3, [pc, #60]	; (800bc84 <prvProcessTimerOrBlockTask+0x94>)
 800bc46:	6818      	ldr	r0, [r3, #0]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	4619      	mov	r1, r3
 800bc52:	f7fe ff97 	bl	800ab84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc56:	f7ff fa1b 	bl	800b090 <xTaskResumeAll>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10a      	bne.n	800bc76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc60:	4b09      	ldr	r3, [pc, #36]	; (800bc88 <prvProcessTimerOrBlockTask+0x98>)
 800bc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc66:	601a      	str	r2, [r3, #0]
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	f3bf 8f6f 	isb	sy
}
 800bc70:	e001      	b.n	800bc76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc72:	f7ff fa0d 	bl	800b090 <xTaskResumeAll>
}
 800bc76:	bf00      	nop
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	20003de8 	.word	0x20003de8
 800bc84:	20003dec 	.word	0x20003dec
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc94:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <prvGetNextExpireTime+0x44>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <prvGetNextExpireTime+0x16>
 800bc9e:	2201      	movs	r2, #1
 800bca0:	e000      	b.n	800bca4 <prvGetNextExpireTime+0x18>
 800bca2:	2200      	movs	r2, #0
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d105      	bne.n	800bcbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcb0:	4b07      	ldr	r3, [pc, #28]	; (800bcd0 <prvGetNextExpireTime+0x44>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	60fb      	str	r3, [r7, #12]
 800bcba:	e001      	b.n	800bcc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	20003de4 	.word	0x20003de4

0800bcd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcdc:	f7ff fa76 	bl	800b1cc <xTaskGetTickCount>
 800bce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bce2:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <prvSampleTimeNow+0x3c>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d205      	bcs.n	800bcf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcec:	f000 f936 	bl	800bf5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	e002      	b.n	800bcfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcfe:	4a04      	ldr	r2, [pc, #16]	; (800bd10 <prvSampleTimeNow+0x3c>)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd04:	68fb      	ldr	r3, [r7, #12]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	20003df4 	.word	0x20003df4

0800bd14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d812      	bhi.n	800bd60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	1ad2      	subs	r2, r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d302      	bcc.n	800bd4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	e01b      	b.n	800bd86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd4e:	4b10      	ldr	r3, [pc, #64]	; (800bd90 <prvInsertTimerInActiveList+0x7c>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3304      	adds	r3, #4
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f7fe f9ee 	bl	800a13a <vListInsert>
 800bd5e:	e012      	b.n	800bd86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d206      	bcs.n	800bd76 <prvInsertTimerInActiveList+0x62>
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d302      	bcc.n	800bd76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd70:	2301      	movs	r3, #1
 800bd72:	617b      	str	r3, [r7, #20]
 800bd74:	e007      	b.n	800bd86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd76:	4b07      	ldr	r3, [pc, #28]	; (800bd94 <prvInsertTimerInActiveList+0x80>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4610      	mov	r0, r2
 800bd82:	f7fe f9da 	bl	800a13a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd86:	697b      	ldr	r3, [r7, #20]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	20003de8 	.word	0x20003de8
 800bd94:	20003de4 	.word	0x20003de4

0800bd98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08e      	sub	sp, #56	; 0x38
 800bd9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd9e:	e0cc      	b.n	800bf3a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	da19      	bge.n	800bdda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bda6:	1d3b      	adds	r3, r7, #4
 800bda8:	3304      	adds	r3, #4
 800bdaa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10b      	bne.n	800bdca <prvProcessReceivedCommands+0x32>
 800bdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb6:	b672      	cpsid	i
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	b662      	cpsie	i
 800bdc6:	61fb      	str	r3, [r7, #28]
 800bdc8:	e7fe      	b.n	800bdc8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd0:	6850      	ldr	r0, [r2, #4]
 800bdd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd4:	6892      	ldr	r2, [r2, #8]
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f2c0 80ab 	blt.w	800bf38 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d004      	beq.n	800bdf8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe f9da 	bl	800a1ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdf8:	463b      	mov	r3, r7
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff ff6a 	bl	800bcd4 <prvSampleTimeNow>
 800be00:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2b09      	cmp	r3, #9
 800be06:	f200 8098 	bhi.w	800bf3a <prvProcessReceivedCommands+0x1a2>
 800be0a:	a201      	add	r2, pc, #4	; (adr r2, 800be10 <prvProcessReceivedCommands+0x78>)
 800be0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be10:	0800be39 	.word	0x0800be39
 800be14:	0800be39 	.word	0x0800be39
 800be18:	0800be39 	.word	0x0800be39
 800be1c:	0800beaf 	.word	0x0800beaf
 800be20:	0800bec3 	.word	0x0800bec3
 800be24:	0800bf0f 	.word	0x0800bf0f
 800be28:	0800be39 	.word	0x0800be39
 800be2c:	0800be39 	.word	0x0800be39
 800be30:	0800beaf 	.word	0x0800beaf
 800be34:	0800bec3 	.word	0x0800bec3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be3e:	f043 0301 	orr.w	r3, r3, #1
 800be42:	b2da      	uxtb	r2, r3
 800be44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	18d1      	adds	r1, r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be58:	f7ff ff5c 	bl	800bd14 <prvInsertTimerInActiveList>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d06b      	beq.n	800bf3a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be70:	f003 0304 	and.w	r3, r3, #4
 800be74:	2b00      	cmp	r3, #0
 800be76:	d060      	beq.n	800bf3a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	441a      	add	r2, r3
 800be80:	2300      	movs	r3, #0
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	2300      	movs	r3, #0
 800be86:	2100      	movs	r1, #0
 800be88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be8a:	f7ff fe03 	bl	800ba94 <xTimerGenericCommand>
 800be8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d151      	bne.n	800bf3a <prvProcessReceivedCommands+0x1a2>
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	b672      	cpsid	i
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	b662      	cpsie	i
 800beaa:	61bb      	str	r3, [r7, #24]
 800beac:	e7fe      	b.n	800beac <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beb4:	f023 0301 	bic.w	r3, r3, #1
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bec0:	e03b      	b.n	800bf3a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bec8:	f043 0301 	orr.w	r3, r3, #1
 800becc:	b2da      	uxtb	r2, r3
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10b      	bne.n	800befa <prvProcessReceivedCommands+0x162>
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	b672      	cpsid	i
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	b662      	cpsie	i
 800bef6:	617b      	str	r3, [r7, #20]
 800bef8:	e7fe      	b.n	800bef8 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	699a      	ldr	r2, [r3, #24]
 800befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf00:	18d1      	adds	r1, r2, r3
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf08:	f7ff ff04 	bl	800bd14 <prvInsertTimerInActiveList>
					break;
 800bf0c:	e015      	b.n	800bf3a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf14:	f003 0302 	and.w	r3, r3, #2
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d103      	bne.n	800bf24 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bf1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf1e:	f000 fbb5 	bl	800c68c <vPortFree>
 800bf22:	e00a      	b.n	800bf3a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf2a:	f023 0301 	bic.w	r3, r3, #1
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf36:	e000      	b.n	800bf3a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bf38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf3a:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <prvProcessReceivedCommands+0x1c0>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	1d39      	adds	r1, r7, #4
 800bf40:	2200      	movs	r2, #0
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe fc04 	bl	800a750 <xQueueReceive>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f47f af28 	bne.w	800bda0 <prvProcessReceivedCommands+0x8>
	}
}
 800bf50:	bf00      	nop
 800bf52:	3730      	adds	r7, #48	; 0x30
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	20003dec 	.word	0x20003dec

0800bf5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b088      	sub	sp, #32
 800bf60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf62:	e049      	b.n	800bff8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf64:	4b2e      	ldr	r3, [pc, #184]	; (800c020 <prvSwitchTimerLists+0xc4>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf6e:	4b2c      	ldr	r3, [pc, #176]	; (800c020 <prvSwitchTimerLists+0xc4>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fe f915 	bl	800a1ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf90:	f003 0304 	and.w	r3, r3, #4
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d02f      	beq.n	800bff8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d90e      	bls.n	800bfc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfb6:	4b1a      	ldr	r3, [pc, #104]	; (800c020 <prvSwitchTimerLists+0xc4>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	f7fe f8ba 	bl	800a13a <vListInsert>
 800bfc6:	e017      	b.n	800bff8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff fd5e 	bl	800ba94 <xTimerGenericCommand>
 800bfd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10b      	bne.n	800bff8 <prvSwitchTimerLists+0x9c>
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	b672      	cpsid	i
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	b662      	cpsie	i
 800bff4:	603b      	str	r3, [r7, #0]
 800bff6:	e7fe      	b.n	800bff6 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bff8:	4b09      	ldr	r3, [pc, #36]	; (800c020 <prvSwitchTimerLists+0xc4>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1b0      	bne.n	800bf64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c002:	4b07      	ldr	r3, [pc, #28]	; (800c020 <prvSwitchTimerLists+0xc4>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c008:	4b06      	ldr	r3, [pc, #24]	; (800c024 <prvSwitchTimerLists+0xc8>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a04      	ldr	r2, [pc, #16]	; (800c020 <prvSwitchTimerLists+0xc4>)
 800c00e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c010:	4a04      	ldr	r2, [pc, #16]	; (800c024 <prvSwitchTimerLists+0xc8>)
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	6013      	str	r3, [r2, #0]
}
 800c016:	bf00      	nop
 800c018:	3718      	adds	r7, #24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20003de4 	.word	0x20003de4
 800c024:	20003de8 	.word	0x20003de8

0800c028 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c02e:	f000 f943 	bl	800c2b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c032:	4b15      	ldr	r3, [pc, #84]	; (800c088 <prvCheckForValidListAndQueue+0x60>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d120      	bne.n	800c07c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c03a:	4814      	ldr	r0, [pc, #80]	; (800c08c <prvCheckForValidListAndQueue+0x64>)
 800c03c:	f7fe f82c 	bl	800a098 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c040:	4813      	ldr	r0, [pc, #76]	; (800c090 <prvCheckForValidListAndQueue+0x68>)
 800c042:	f7fe f829 	bl	800a098 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c046:	4b13      	ldr	r3, [pc, #76]	; (800c094 <prvCheckForValidListAndQueue+0x6c>)
 800c048:	4a10      	ldr	r2, [pc, #64]	; (800c08c <prvCheckForValidListAndQueue+0x64>)
 800c04a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c04c:	4b12      	ldr	r3, [pc, #72]	; (800c098 <prvCheckForValidListAndQueue+0x70>)
 800c04e:	4a10      	ldr	r2, [pc, #64]	; (800c090 <prvCheckForValidListAndQueue+0x68>)
 800c050:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c052:	2300      	movs	r3, #0
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	4b11      	ldr	r3, [pc, #68]	; (800c09c <prvCheckForValidListAndQueue+0x74>)
 800c058:	4a11      	ldr	r2, [pc, #68]	; (800c0a0 <prvCheckForValidListAndQueue+0x78>)
 800c05a:	2110      	movs	r1, #16
 800c05c:	200a      	movs	r0, #10
 800c05e:	f7fe f939 	bl	800a2d4 <xQueueGenericCreateStatic>
 800c062:	4602      	mov	r2, r0
 800c064:	4b08      	ldr	r3, [pc, #32]	; (800c088 <prvCheckForValidListAndQueue+0x60>)
 800c066:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c068:	4b07      	ldr	r3, [pc, #28]	; (800c088 <prvCheckForValidListAndQueue+0x60>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d005      	beq.n	800c07c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <prvCheckForValidListAndQueue+0x60>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	490b      	ldr	r1, [pc, #44]	; (800c0a4 <prvCheckForValidListAndQueue+0x7c>)
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fd5c 	bl	800ab34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c07c:	f000 f94e 	bl	800c31c <vPortExitCritical>
}
 800c080:	bf00      	nop
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20003dec 	.word	0x20003dec
 800c08c:	20003dbc 	.word	0x20003dbc
 800c090:	20003dd0 	.word	0x20003dd0
 800c094:	20003de4 	.word	0x20003de4
 800c098:	20003de8 	.word	0x20003de8
 800c09c:	20003e98 	.word	0x20003e98
 800c0a0:	20003df8 	.word	0x20003df8
 800c0a4:	0801027c 	.word	0x0801027c

0800c0a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3b04      	subs	r3, #4
 800c0b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3b04      	subs	r3, #4
 800c0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	f023 0201 	bic.w	r2, r3, #1
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3b04      	subs	r3, #4
 800c0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0d8:	4a0c      	ldr	r2, [pc, #48]	; (800c10c <pxPortInitialiseStack+0x64>)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3b14      	subs	r3, #20
 800c0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3b04      	subs	r3, #4
 800c0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f06f 0202 	mvn.w	r2, #2
 800c0f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3b20      	subs	r3, #32
 800c0fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	0800c111 	.word	0x0800c111

0800c110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c11a:	4b13      	ldr	r3, [pc, #76]	; (800c168 <prvTaskExitError+0x58>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c122:	d00b      	beq.n	800c13c <prvTaskExitError+0x2c>
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	b672      	cpsid	i
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	b662      	cpsie	i
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	e7fe      	b.n	800c13a <prvTaskExitError+0x2a>
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	b672      	cpsid	i
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	b662      	cpsie	i
 800c150:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c152:	bf00      	nop
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d0fc      	beq.n	800c154 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c15a:	bf00      	nop
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	200000b8 	.word	0x200000b8
 800c16c:	00000000 	.word	0x00000000

0800c170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c170:	4b07      	ldr	r3, [pc, #28]	; (800c190 <pxCurrentTCBConst2>)
 800c172:	6819      	ldr	r1, [r3, #0]
 800c174:	6808      	ldr	r0, [r1, #0]
 800c176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17a:	f380 8809 	msr	PSP, r0
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f04f 0000 	mov.w	r0, #0
 800c186:	f380 8811 	msr	BASEPRI, r0
 800c18a:	4770      	bx	lr
 800c18c:	f3af 8000 	nop.w

0800c190 <pxCurrentTCBConst2>:
 800c190:	200038bc 	.word	0x200038bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop

0800c198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c198:	4808      	ldr	r0, [pc, #32]	; (800c1bc <prvPortStartFirstTask+0x24>)
 800c19a:	6800      	ldr	r0, [r0, #0]
 800c19c:	6800      	ldr	r0, [r0, #0]
 800c19e:	f380 8808 	msr	MSP, r0
 800c1a2:	f04f 0000 	mov.w	r0, #0
 800c1a6:	f380 8814 	msr	CONTROL, r0
 800c1aa:	b662      	cpsie	i
 800c1ac:	b661      	cpsie	f
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	df00      	svc	0
 800c1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ba:	bf00      	nop
 800c1bc:	e000ed08 	.word	0xe000ed08

0800c1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1c6:	4b36      	ldr	r3, [pc, #216]	; (800c2a0 <xPortStartScheduler+0xe0>)
 800c1c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	22ff      	movs	r2, #255	; 0xff
 800c1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	4b2e      	ldr	r3, [pc, #184]	; (800c2a4 <xPortStartScheduler+0xe4>)
 800c1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1ee:	4b2e      	ldr	r3, [pc, #184]	; (800c2a8 <xPortStartScheduler+0xe8>)
 800c1f0:	2207      	movs	r2, #7
 800c1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1f4:	e009      	b.n	800c20a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c1f6:	4b2c      	ldr	r3, [pc, #176]	; (800c2a8 <xPortStartScheduler+0xe8>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	4a2a      	ldr	r2, [pc, #168]	; (800c2a8 <xPortStartScheduler+0xe8>)
 800c1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	b2db      	uxtb	r3, r3
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	b2db      	uxtb	r3, r3
 800c208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c20a:	78fb      	ldrb	r3, [r7, #3]
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c212:	2b80      	cmp	r3, #128	; 0x80
 800c214:	d0ef      	beq.n	800c1f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c216:	4b24      	ldr	r3, [pc, #144]	; (800c2a8 <xPortStartScheduler+0xe8>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f1c3 0307 	rsb	r3, r3, #7
 800c21e:	2b04      	cmp	r3, #4
 800c220:	d00b      	beq.n	800c23a <xPortStartScheduler+0x7a>
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	b672      	cpsid	i
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	b662      	cpsie	i
 800c236:	60bb      	str	r3, [r7, #8]
 800c238:	e7fe      	b.n	800c238 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c23a:	4b1b      	ldr	r3, [pc, #108]	; (800c2a8 <xPortStartScheduler+0xe8>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	021b      	lsls	r3, r3, #8
 800c240:	4a19      	ldr	r2, [pc, #100]	; (800c2a8 <xPortStartScheduler+0xe8>)
 800c242:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c244:	4b18      	ldr	r3, [pc, #96]	; (800c2a8 <xPortStartScheduler+0xe8>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c24c:	4a16      	ldr	r2, [pc, #88]	; (800c2a8 <xPortStartScheduler+0xe8>)
 800c24e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	b2da      	uxtb	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c258:	4b14      	ldr	r3, [pc, #80]	; (800c2ac <xPortStartScheduler+0xec>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a13      	ldr	r2, [pc, #76]	; (800c2ac <xPortStartScheduler+0xec>)
 800c25e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c262:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c264:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <xPortStartScheduler+0xec>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a10      	ldr	r2, [pc, #64]	; (800c2ac <xPortStartScheduler+0xec>)
 800c26a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c26e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c270:	f000 f8d4 	bl	800c41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c274:	4b0e      	ldr	r3, [pc, #56]	; (800c2b0 <xPortStartScheduler+0xf0>)
 800c276:	2200      	movs	r2, #0
 800c278:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c27a:	f000 f8f3 	bl	800c464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c27e:	4b0d      	ldr	r3, [pc, #52]	; (800c2b4 <xPortStartScheduler+0xf4>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a0c      	ldr	r2, [pc, #48]	; (800c2b4 <xPortStartScheduler+0xf4>)
 800c284:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c288:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c28a:	f7ff ff85 	bl	800c198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c28e:	f7ff f867 	bl	800b360 <vTaskSwitchContext>
	prvTaskExitError();
 800c292:	f7ff ff3d 	bl	800c110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	e000e400 	.word	0xe000e400
 800c2a4:	20003ee8 	.word	0x20003ee8
 800c2a8:	20003eec 	.word	0x20003eec
 800c2ac:	e000ed20 	.word	0xe000ed20
 800c2b0:	200000b8 	.word	0x200000b8
 800c2b4:	e000ef34 	.word	0xe000ef34

0800c2b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	b672      	cpsid	i
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	b662      	cpsie	i
 800c2d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2d4:	4b0f      	ldr	r3, [pc, #60]	; (800c314 <vPortEnterCritical+0x5c>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	4a0e      	ldr	r2, [pc, #56]	; (800c314 <vPortEnterCritical+0x5c>)
 800c2dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2de:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <vPortEnterCritical+0x5c>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d110      	bne.n	800c308 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <vPortEnterCritical+0x60>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <vPortEnterCritical+0x50>
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	b672      	cpsid	i
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	b662      	cpsie	i
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	e7fe      	b.n	800c306 <vPortEnterCritical+0x4e>
	}
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	200000b8 	.word	0x200000b8
 800c318:	e000ed04 	.word	0xe000ed04

0800c31c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c322:	4b12      	ldr	r3, [pc, #72]	; (800c36c <vPortExitCritical+0x50>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10b      	bne.n	800c342 <vPortExitCritical+0x26>
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	b672      	cpsid	i
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	b662      	cpsie	i
 800c33e:	607b      	str	r3, [r7, #4]
 800c340:	e7fe      	b.n	800c340 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800c342:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <vPortExitCritical+0x50>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3b01      	subs	r3, #1
 800c348:	4a08      	ldr	r2, [pc, #32]	; (800c36c <vPortExitCritical+0x50>)
 800c34a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c34c:	4b07      	ldr	r3, [pc, #28]	; (800c36c <vPortExitCritical+0x50>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d104      	bne.n	800c35e <vPortExitCritical+0x42>
 800c354:	2300      	movs	r3, #0
 800c356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c35e:	bf00      	nop
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	200000b8 	.word	0x200000b8

0800c370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c370:	f3ef 8009 	mrs	r0, PSP
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	4b15      	ldr	r3, [pc, #84]	; (800c3d0 <pxCurrentTCBConst>)
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	f01e 0f10 	tst.w	lr, #16
 800c380:	bf08      	it	eq
 800c382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	6010      	str	r0, [r2, #0]
 800c38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c394:	b672      	cpsid	i
 800c396:	f380 8811 	msr	BASEPRI, r0
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	b662      	cpsie	i
 800c3a4:	f7fe ffdc 	bl	800b360 <vTaskSwitchContext>
 800c3a8:	f04f 0000 	mov.w	r0, #0
 800c3ac:	f380 8811 	msr	BASEPRI, r0
 800c3b0:	bc09      	pop	{r0, r3}
 800c3b2:	6819      	ldr	r1, [r3, #0]
 800c3b4:	6808      	ldr	r0, [r1, #0]
 800c3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ba:	f01e 0f10 	tst.w	lr, #16
 800c3be:	bf08      	it	eq
 800c3c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3c4:	f380 8809 	msr	PSP, r0
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop

0800c3d0 <pxCurrentTCBConst>:
 800c3d0:	200038bc 	.word	0x200038bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop

0800c3d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	b672      	cpsid	i
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	b662      	cpsie	i
 800c3f2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3f4:	f7fe fefa 	bl	800b1ec <xTaskIncrementTick>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3fe:	4b06      	ldr	r3, [pc, #24]	; (800c418 <SysTick_Handler+0x40>)
 800c400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	2300      	movs	r3, #0
 800c408:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c41c:	b480      	push	{r7}
 800c41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c420:	4b0b      	ldr	r3, [pc, #44]	; (800c450 <vPortSetupTimerInterrupt+0x34>)
 800c422:	2200      	movs	r2, #0
 800c424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c426:	4b0b      	ldr	r3, [pc, #44]	; (800c454 <vPortSetupTimerInterrupt+0x38>)
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c42c:	4b0a      	ldr	r3, [pc, #40]	; (800c458 <vPortSetupTimerInterrupt+0x3c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a0a      	ldr	r2, [pc, #40]	; (800c45c <vPortSetupTimerInterrupt+0x40>)
 800c432:	fba2 2303 	umull	r2, r3, r2, r3
 800c436:	099b      	lsrs	r3, r3, #6
 800c438:	4a09      	ldr	r2, [pc, #36]	; (800c460 <vPortSetupTimerInterrupt+0x44>)
 800c43a:	3b01      	subs	r3, #1
 800c43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c43e:	4b04      	ldr	r3, [pc, #16]	; (800c450 <vPortSetupTimerInterrupt+0x34>)
 800c440:	2207      	movs	r2, #7
 800c442:	601a      	str	r2, [r3, #0]
}
 800c444:	bf00      	nop
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	e000e010 	.word	0xe000e010
 800c454:	e000e018 	.word	0xe000e018
 800c458:	200000ac 	.word	0x200000ac
 800c45c:	10624dd3 	.word	0x10624dd3
 800c460:	e000e014 	.word	0xe000e014

0800c464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c474 <vPortEnableVFP+0x10>
 800c468:	6801      	ldr	r1, [r0, #0]
 800c46a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c46e:	6001      	str	r1, [r0, #0]
 800c470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c472:	bf00      	nop
 800c474:	e000ed88 	.word	0xe000ed88

0800c478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c47e:	f3ef 8305 	mrs	r3, IPSR
 800c482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b0f      	cmp	r3, #15
 800c488:	d915      	bls.n	800c4b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c48a:	4a18      	ldr	r2, [pc, #96]	; (800c4ec <vPortValidateInterruptPriority+0x74>)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	4413      	add	r3, r2
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c494:	4b16      	ldr	r3, [pc, #88]	; (800c4f0 <vPortValidateInterruptPriority+0x78>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	7afa      	ldrb	r2, [r7, #11]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d20b      	bcs.n	800c4b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	b672      	cpsid	i
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	b662      	cpsie	i
 800c4b2:	607b      	str	r3, [r7, #4]
 800c4b4:	e7fe      	b.n	800c4b4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <vPortValidateInterruptPriority+0x7c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4be:	4b0e      	ldr	r3, [pc, #56]	; (800c4f8 <vPortValidateInterruptPriority+0x80>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d90b      	bls.n	800c4de <vPortValidateInterruptPriority+0x66>
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	b672      	cpsid	i
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	b662      	cpsie	i
 800c4da:	603b      	str	r3, [r7, #0]
 800c4dc:	e7fe      	b.n	800c4dc <vPortValidateInterruptPriority+0x64>
	}
 800c4de:	bf00      	nop
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	e000e3f0 	.word	0xe000e3f0
 800c4f0:	20003ee8 	.word	0x20003ee8
 800c4f4:	e000ed0c 	.word	0xe000ed0c
 800c4f8:	20003eec 	.word	0x20003eec

0800c4fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	; 0x28
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c504:	2300      	movs	r3, #0
 800c506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c508:	f7fe fdb4 	bl	800b074 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c50c:	4b5a      	ldr	r3, [pc, #360]	; (800c678 <pvPortMalloc+0x17c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c514:	f000 f916 	bl	800c744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c518:	4b58      	ldr	r3, [pc, #352]	; (800c67c <pvPortMalloc+0x180>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4013      	ands	r3, r2
 800c520:	2b00      	cmp	r3, #0
 800c522:	f040 8090 	bne.w	800c646 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d01e      	beq.n	800c56a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c52c:	2208      	movs	r2, #8
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4413      	add	r3, r2
 800c532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f003 0307 	and.w	r3, r3, #7
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d015      	beq.n	800c56a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f023 0307 	bic.w	r3, r3, #7
 800c544:	3308      	adds	r3, #8
 800c546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <pvPortMalloc+0x6e>
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	b672      	cpsid	i
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	b662      	cpsie	i
 800c566:	617b      	str	r3, [r7, #20]
 800c568:	e7fe      	b.n	800c568 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d06a      	beq.n	800c646 <pvPortMalloc+0x14a>
 800c570:	4b43      	ldr	r3, [pc, #268]	; (800c680 <pvPortMalloc+0x184>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	429a      	cmp	r2, r3
 800c578:	d865      	bhi.n	800c646 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c57a:	4b42      	ldr	r3, [pc, #264]	; (800c684 <pvPortMalloc+0x188>)
 800c57c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c57e:	4b41      	ldr	r3, [pc, #260]	; (800c684 <pvPortMalloc+0x188>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c584:	e004      	b.n	800c590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	d903      	bls.n	800c5a2 <pvPortMalloc+0xa6>
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1f1      	bne.n	800c586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5a2:	4b35      	ldr	r3, [pc, #212]	; (800c678 <pvPortMalloc+0x17c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d04c      	beq.n	800c646 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2208      	movs	r2, #8
 800c5b2:	4413      	add	r3, r2
 800c5b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	1ad2      	subs	r2, r2, r3
 800c5c6:	2308      	movs	r3, #8
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d920      	bls.n	800c610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	f003 0307 	and.w	r3, r3, #7
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00b      	beq.n	800c5f8 <pvPortMalloc+0xfc>
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	b672      	cpsid	i
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	b662      	cpsie	i
 800c5f4:	613b      	str	r3, [r7, #16]
 800c5f6:	e7fe      	b.n	800c5f6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	1ad2      	subs	r2, r2, r3
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c60a:	69b8      	ldr	r0, [r7, #24]
 800c60c:	f000 f8fc 	bl	800c808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c610:	4b1b      	ldr	r3, [pc, #108]	; (800c680 <pvPortMalloc+0x184>)
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	4a19      	ldr	r2, [pc, #100]	; (800c680 <pvPortMalloc+0x184>)
 800c61c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c61e:	4b18      	ldr	r3, [pc, #96]	; (800c680 <pvPortMalloc+0x184>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	4b19      	ldr	r3, [pc, #100]	; (800c688 <pvPortMalloc+0x18c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	429a      	cmp	r2, r3
 800c628:	d203      	bcs.n	800c632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c62a:	4b15      	ldr	r3, [pc, #84]	; (800c680 <pvPortMalloc+0x184>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a16      	ldr	r2, [pc, #88]	; (800c688 <pvPortMalloc+0x18c>)
 800c630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	4b11      	ldr	r3, [pc, #68]	; (800c67c <pvPortMalloc+0x180>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	431a      	orrs	r2, r3
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c642:	2200      	movs	r2, #0
 800c644:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c646:	f7fe fd23 	bl	800b090 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	f003 0307 	and.w	r3, r3, #7
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00b      	beq.n	800c66c <pvPortMalloc+0x170>
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	b672      	cpsid	i
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	b662      	cpsie	i
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	e7fe      	b.n	800c66a <pvPortMalloc+0x16e>
	return pvReturn;
 800c66c:	69fb      	ldr	r3, [r7, #28]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3728      	adds	r7, #40	; 0x28
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20007af8 	.word	0x20007af8
 800c67c:	20007b04 	.word	0x20007b04
 800c680:	20007afc 	.word	0x20007afc
 800c684:	20007af0 	.word	0x20007af0
 800c688:	20007b00 	.word	0x20007b00

0800c68c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b086      	sub	sp, #24
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d04a      	beq.n	800c734 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c69e:	2308      	movs	r3, #8
 800c6a0:	425b      	negs	r3, r3
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	4b22      	ldr	r3, [pc, #136]	; (800c73c <vPortFree+0xb0>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10b      	bne.n	800c6d2 <vPortFree+0x46>
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	b672      	cpsid	i
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	b662      	cpsie	i
 800c6ce:	60fb      	str	r3, [r7, #12]
 800c6d0:	e7fe      	b.n	800c6d0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00b      	beq.n	800c6f2 <vPortFree+0x66>
 800c6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6de:	b672      	cpsid	i
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	b662      	cpsie	i
 800c6ee:	60bb      	str	r3, [r7, #8]
 800c6f0:	e7fe      	b.n	800c6f0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	4b11      	ldr	r3, [pc, #68]	; (800c73c <vPortFree+0xb0>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d019      	beq.n	800c734 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d115      	bne.n	800c734 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <vPortFree+0xb0>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	43db      	mvns	r3, r3
 800c712:	401a      	ands	r2, r3
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c718:	f7fe fcac 	bl	800b074 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	4b07      	ldr	r3, [pc, #28]	; (800c740 <vPortFree+0xb4>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4413      	add	r3, r2
 800c726:	4a06      	ldr	r2, [pc, #24]	; (800c740 <vPortFree+0xb4>)
 800c728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c72a:	6938      	ldr	r0, [r7, #16]
 800c72c:	f000 f86c 	bl	800c808 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c730:	f7fe fcae 	bl	800b090 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c734:	bf00      	nop
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	20007b04 	.word	0x20007b04
 800c740:	20007afc 	.word	0x20007afc

0800c744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c74a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c74e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c750:	4b27      	ldr	r3, [pc, #156]	; (800c7f0 <prvHeapInit+0xac>)
 800c752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f003 0307 	and.w	r3, r3, #7
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00c      	beq.n	800c778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3307      	adds	r3, #7
 800c762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	4a1f      	ldr	r2, [pc, #124]	; (800c7f0 <prvHeapInit+0xac>)
 800c774:	4413      	add	r3, r2
 800c776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c77c:	4a1d      	ldr	r2, [pc, #116]	; (800c7f4 <prvHeapInit+0xb0>)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c782:	4b1c      	ldr	r3, [pc, #112]	; (800c7f4 <prvHeapInit+0xb0>)
 800c784:	2200      	movs	r2, #0
 800c786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	4413      	add	r3, r2
 800c78e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c790:	2208      	movs	r2, #8
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	1a9b      	subs	r3, r3, r2
 800c796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f023 0307 	bic.w	r3, r3, #7
 800c79e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4a15      	ldr	r2, [pc, #84]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7a6:	4b14      	ldr	r3, [pc, #80]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7ae:	4b12      	ldr	r3, [pc, #72]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7c4:	4b0c      	ldr	r3, [pc, #48]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4a0a      	ldr	r2, [pc, #40]	; (800c7fc <prvHeapInit+0xb8>)
 800c7d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	4a09      	ldr	r2, [pc, #36]	; (800c800 <prvHeapInit+0xbc>)
 800c7da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7dc:	4b09      	ldr	r3, [pc, #36]	; (800c804 <prvHeapInit+0xc0>)
 800c7de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7e2:	601a      	str	r2, [r3, #0]
}
 800c7e4:	bf00      	nop
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	20003ef0 	.word	0x20003ef0
 800c7f4:	20007af0 	.word	0x20007af0
 800c7f8:	20007af8 	.word	0x20007af8
 800c7fc:	20007b00 	.word	0x20007b00
 800c800:	20007afc 	.word	0x20007afc
 800c804:	20007b04 	.word	0x20007b04

0800c808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c810:	4b28      	ldr	r3, [pc, #160]	; (800c8b4 <prvInsertBlockIntoFreeList+0xac>)
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	e002      	b.n	800c81c <prvInsertBlockIntoFreeList+0x14>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	429a      	cmp	r2, r3
 800c824:	d8f7      	bhi.n	800c816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	4413      	add	r3, r2
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	429a      	cmp	r2, r3
 800c836:	d108      	bne.n	800c84a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	441a      	add	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	441a      	add	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d118      	bne.n	800c890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	4b15      	ldr	r3, [pc, #84]	; (800c8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d00d      	beq.n	800c886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	441a      	add	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	e008      	b.n	800c898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c886:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	e003      	b.n	800c898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d002      	beq.n	800c8a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8a6:	bf00      	nop
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	20007af0 	.word	0x20007af0
 800c8b8:	20007af8 	.word	0x20007af8

0800c8bc <__errno>:
 800c8bc:	4b01      	ldr	r3, [pc, #4]	; (800c8c4 <__errno+0x8>)
 800c8be:	6818      	ldr	r0, [r3, #0]
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	200000bc 	.word	0x200000bc

0800c8c8 <__libc_init_array>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	4e0d      	ldr	r6, [pc, #52]	; (800c900 <__libc_init_array+0x38>)
 800c8cc:	4c0d      	ldr	r4, [pc, #52]	; (800c904 <__libc_init_array+0x3c>)
 800c8ce:	1ba4      	subs	r4, r4, r6
 800c8d0:	10a4      	asrs	r4, r4, #2
 800c8d2:	2500      	movs	r5, #0
 800c8d4:	42a5      	cmp	r5, r4
 800c8d6:	d109      	bne.n	800c8ec <__libc_init_array+0x24>
 800c8d8:	4e0b      	ldr	r6, [pc, #44]	; (800c908 <__libc_init_array+0x40>)
 800c8da:	4c0c      	ldr	r4, [pc, #48]	; (800c90c <__libc_init_array+0x44>)
 800c8dc:	f003 fc90 	bl	8010200 <_init>
 800c8e0:	1ba4      	subs	r4, r4, r6
 800c8e2:	10a4      	asrs	r4, r4, #2
 800c8e4:	2500      	movs	r5, #0
 800c8e6:	42a5      	cmp	r5, r4
 800c8e8:	d105      	bne.n	800c8f6 <__libc_init_array+0x2e>
 800c8ea:	bd70      	pop	{r4, r5, r6, pc}
 800c8ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8f0:	4798      	blx	r3
 800c8f2:	3501      	adds	r5, #1
 800c8f4:	e7ee      	b.n	800c8d4 <__libc_init_array+0xc>
 800c8f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8fa:	4798      	blx	r3
 800c8fc:	3501      	adds	r5, #1
 800c8fe:	e7f2      	b.n	800c8e6 <__libc_init_array+0x1e>
 800c900:	080106f0 	.word	0x080106f0
 800c904:	080106f0 	.word	0x080106f0
 800c908:	080106f0 	.word	0x080106f0
 800c90c:	080106f4 	.word	0x080106f4

0800c910 <memcpy>:
 800c910:	b510      	push	{r4, lr}
 800c912:	1e43      	subs	r3, r0, #1
 800c914:	440a      	add	r2, r1
 800c916:	4291      	cmp	r1, r2
 800c918:	d100      	bne.n	800c91c <memcpy+0xc>
 800c91a:	bd10      	pop	{r4, pc}
 800c91c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c920:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c924:	e7f7      	b.n	800c916 <memcpy+0x6>

0800c926 <memset>:
 800c926:	4402      	add	r2, r0
 800c928:	4603      	mov	r3, r0
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d100      	bne.n	800c930 <memset+0xa>
 800c92e:	4770      	bx	lr
 800c930:	f803 1b01 	strb.w	r1, [r3], #1
 800c934:	e7f9      	b.n	800c92a <memset+0x4>

0800c936 <__cvt>:
 800c936:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c938:	ed2d 8b02 	vpush	{d8}
 800c93c:	eeb0 8b40 	vmov.f64	d8, d0
 800c940:	b085      	sub	sp, #20
 800c942:	4617      	mov	r7, r2
 800c944:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c946:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c948:	ee18 2a90 	vmov	r2, s17
 800c94c:	f025 0520 	bic.w	r5, r5, #32
 800c950:	2a00      	cmp	r2, #0
 800c952:	bfb6      	itet	lt
 800c954:	222d      	movlt	r2, #45	; 0x2d
 800c956:	2200      	movge	r2, #0
 800c958:	eeb1 8b40 	vneglt.f64	d8, d0
 800c95c:	2d46      	cmp	r5, #70	; 0x46
 800c95e:	460c      	mov	r4, r1
 800c960:	701a      	strb	r2, [r3, #0]
 800c962:	d004      	beq.n	800c96e <__cvt+0x38>
 800c964:	2d45      	cmp	r5, #69	; 0x45
 800c966:	d100      	bne.n	800c96a <__cvt+0x34>
 800c968:	3401      	adds	r4, #1
 800c96a:	2102      	movs	r1, #2
 800c96c:	e000      	b.n	800c970 <__cvt+0x3a>
 800c96e:	2103      	movs	r1, #3
 800c970:	ab03      	add	r3, sp, #12
 800c972:	9301      	str	r3, [sp, #4]
 800c974:	ab02      	add	r3, sp, #8
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	4622      	mov	r2, r4
 800c97a:	4633      	mov	r3, r6
 800c97c:	eeb0 0b48 	vmov.f64	d0, d8
 800c980:	f001 fd1e 	bl	800e3c0 <_dtoa_r>
 800c984:	2d47      	cmp	r5, #71	; 0x47
 800c986:	d101      	bne.n	800c98c <__cvt+0x56>
 800c988:	07fb      	lsls	r3, r7, #31
 800c98a:	d51e      	bpl.n	800c9ca <__cvt+0x94>
 800c98c:	2d46      	cmp	r5, #70	; 0x46
 800c98e:	eb00 0304 	add.w	r3, r0, r4
 800c992:	d10c      	bne.n	800c9ae <__cvt+0x78>
 800c994:	7802      	ldrb	r2, [r0, #0]
 800c996:	2a30      	cmp	r2, #48	; 0x30
 800c998:	d107      	bne.n	800c9aa <__cvt+0x74>
 800c99a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a2:	bf1c      	itt	ne
 800c9a4:	f1c4 0401 	rsbne	r4, r4, #1
 800c9a8:	6034      	strne	r4, [r6, #0]
 800c9aa:	6832      	ldr	r2, [r6, #0]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b6:	d007      	beq.n	800c9c8 <__cvt+0x92>
 800c9b8:	2130      	movs	r1, #48	; 0x30
 800c9ba:	9a03      	ldr	r2, [sp, #12]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d204      	bcs.n	800c9ca <__cvt+0x94>
 800c9c0:	1c54      	adds	r4, r2, #1
 800c9c2:	9403      	str	r4, [sp, #12]
 800c9c4:	7011      	strb	r1, [r2, #0]
 800c9c6:	e7f8      	b.n	800c9ba <__cvt+0x84>
 800c9c8:	9303      	str	r3, [sp, #12]
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9ce:	1a1b      	subs	r3, r3, r0
 800c9d0:	6013      	str	r3, [r2, #0]
 800c9d2:	b005      	add	sp, #20
 800c9d4:	ecbd 8b02 	vpop	{d8}
 800c9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9da <__exponent>:
 800c9da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	4604      	mov	r4, r0
 800c9e0:	bfba      	itte	lt
 800c9e2:	4249      	neglt	r1, r1
 800c9e4:	232d      	movlt	r3, #45	; 0x2d
 800c9e6:	232b      	movge	r3, #43	; 0x2b
 800c9e8:	2909      	cmp	r1, #9
 800c9ea:	f804 2b02 	strb.w	r2, [r4], #2
 800c9ee:	7043      	strb	r3, [r0, #1]
 800c9f0:	dd20      	ble.n	800ca34 <__exponent+0x5a>
 800c9f2:	f10d 0307 	add.w	r3, sp, #7
 800c9f6:	461f      	mov	r7, r3
 800c9f8:	260a      	movs	r6, #10
 800c9fa:	fb91 f5f6 	sdiv	r5, r1, r6
 800c9fe:	fb06 1115 	mls	r1, r6, r5, r1
 800ca02:	3130      	adds	r1, #48	; 0x30
 800ca04:	2d09      	cmp	r5, #9
 800ca06:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca0a:	f103 32ff 	add.w	r2, r3, #4294967295
 800ca0e:	4629      	mov	r1, r5
 800ca10:	dc09      	bgt.n	800ca26 <__exponent+0x4c>
 800ca12:	3130      	adds	r1, #48	; 0x30
 800ca14:	3b02      	subs	r3, #2
 800ca16:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ca1a:	42bb      	cmp	r3, r7
 800ca1c:	4622      	mov	r2, r4
 800ca1e:	d304      	bcc.n	800ca2a <__exponent+0x50>
 800ca20:	1a10      	subs	r0, r2, r0
 800ca22:	b003      	add	sp, #12
 800ca24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca26:	4613      	mov	r3, r2
 800ca28:	e7e7      	b.n	800c9fa <__exponent+0x20>
 800ca2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca2e:	f804 2b01 	strb.w	r2, [r4], #1
 800ca32:	e7f2      	b.n	800ca1a <__exponent+0x40>
 800ca34:	2330      	movs	r3, #48	; 0x30
 800ca36:	4419      	add	r1, r3
 800ca38:	7083      	strb	r3, [r0, #2]
 800ca3a:	1d02      	adds	r2, r0, #4
 800ca3c:	70c1      	strb	r1, [r0, #3]
 800ca3e:	e7ef      	b.n	800ca20 <__exponent+0x46>

0800ca40 <_printf_float>:
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	b08d      	sub	sp, #52	; 0x34
 800ca46:	460c      	mov	r4, r1
 800ca48:	4616      	mov	r6, r2
 800ca4a:	461f      	mov	r7, r3
 800ca4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ca50:	4605      	mov	r5, r0
 800ca52:	f002 fd2d 	bl	800f4b0 <_localeconv_r>
 800ca56:	f8d0 b000 	ldr.w	fp, [r0]
 800ca5a:	4658      	mov	r0, fp
 800ca5c:	f7f3 fbf0 	bl	8000240 <strlen>
 800ca60:	2300      	movs	r3, #0
 800ca62:	930a      	str	r3, [sp, #40]	; 0x28
 800ca64:	f8d8 3000 	ldr.w	r3, [r8]
 800ca68:	9005      	str	r0, [sp, #20]
 800ca6a:	3307      	adds	r3, #7
 800ca6c:	f023 0307 	bic.w	r3, r3, #7
 800ca70:	f103 0108 	add.w	r1, r3, #8
 800ca74:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ca78:	6822      	ldr	r2, [r4, #0]
 800ca7a:	f8c8 1000 	str.w	r1, [r8]
 800ca7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca82:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ca86:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800cd10 <_printf_float+0x2d0>
 800ca8a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ca8e:	eeb0 6bc0 	vabs.f64	d6, d0
 800ca92:	eeb4 6b47 	vcmp.f64	d6, d7
 800ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9a:	dd24      	ble.n	800cae6 <_printf_float+0xa6>
 800ca9c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800caa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa4:	d502      	bpl.n	800caac <_printf_float+0x6c>
 800caa6:	232d      	movs	r3, #45	; 0x2d
 800caa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caac:	499a      	ldr	r1, [pc, #616]	; (800cd18 <_printf_float+0x2d8>)
 800caae:	4b9b      	ldr	r3, [pc, #620]	; (800cd1c <_printf_float+0x2dc>)
 800cab0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cab4:	bf8c      	ite	hi
 800cab6:	4688      	movhi	r8, r1
 800cab8:	4698      	movls	r8, r3
 800caba:	f022 0204 	bic.w	r2, r2, #4
 800cabe:	2303      	movs	r3, #3
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	6022      	str	r2, [r4, #0]
 800cac4:	f04f 0a00 	mov.w	sl, #0
 800cac8:	9700      	str	r7, [sp, #0]
 800caca:	4633      	mov	r3, r6
 800cacc:	aa0b      	add	r2, sp, #44	; 0x2c
 800cace:	4621      	mov	r1, r4
 800cad0:	4628      	mov	r0, r5
 800cad2:	f000 f9e1 	bl	800ce98 <_printf_common>
 800cad6:	3001      	adds	r0, #1
 800cad8:	f040 8089 	bne.w	800cbee <_printf_float+0x1ae>
 800cadc:	f04f 30ff 	mov.w	r0, #4294967295
 800cae0:	b00d      	add	sp, #52	; 0x34
 800cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae6:	eeb4 0b40 	vcmp.f64	d0, d0
 800caea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caee:	d702      	bvc.n	800caf6 <_printf_float+0xb6>
 800caf0:	498b      	ldr	r1, [pc, #556]	; (800cd20 <_printf_float+0x2e0>)
 800caf2:	4b8c      	ldr	r3, [pc, #560]	; (800cd24 <_printf_float+0x2e4>)
 800caf4:	e7dc      	b.n	800cab0 <_printf_float+0x70>
 800caf6:	6861      	ldr	r1, [r4, #4]
 800caf8:	1c4b      	adds	r3, r1, #1
 800cafa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cafe:	ab0a      	add	r3, sp, #40	; 0x28
 800cb00:	a809      	add	r0, sp, #36	; 0x24
 800cb02:	d13b      	bne.n	800cb7c <_printf_float+0x13c>
 800cb04:	2106      	movs	r1, #6
 800cb06:	6061      	str	r1, [r4, #4]
 800cb08:	f04f 0c00 	mov.w	ip, #0
 800cb0c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800cb10:	e9cd 0900 	strd	r0, r9, [sp]
 800cb14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb18:	6022      	str	r2, [r4, #0]
 800cb1a:	6861      	ldr	r1, [r4, #4]
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	f7ff ff0a 	bl	800c936 <__cvt>
 800cb22:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800cb26:	2b47      	cmp	r3, #71	; 0x47
 800cb28:	4680      	mov	r8, r0
 800cb2a:	d109      	bne.n	800cb40 <_printf_float+0x100>
 800cb2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2e:	1cd8      	adds	r0, r3, #3
 800cb30:	db02      	blt.n	800cb38 <_printf_float+0xf8>
 800cb32:	6862      	ldr	r2, [r4, #4]
 800cb34:	4293      	cmp	r3, r2
 800cb36:	dd47      	ble.n	800cbc8 <_printf_float+0x188>
 800cb38:	f1a9 0902 	sub.w	r9, r9, #2
 800cb3c:	fa5f f989 	uxtb.w	r9, r9
 800cb40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cb44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb46:	d824      	bhi.n	800cb92 <_printf_float+0x152>
 800cb48:	3901      	subs	r1, #1
 800cb4a:	464a      	mov	r2, r9
 800cb4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb50:	9109      	str	r1, [sp, #36]	; 0x24
 800cb52:	f7ff ff42 	bl	800c9da <__exponent>
 800cb56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb58:	1813      	adds	r3, r2, r0
 800cb5a:	2a01      	cmp	r2, #1
 800cb5c:	4682      	mov	sl, r0
 800cb5e:	6123      	str	r3, [r4, #16]
 800cb60:	dc02      	bgt.n	800cb68 <_printf_float+0x128>
 800cb62:	6822      	ldr	r2, [r4, #0]
 800cb64:	07d1      	lsls	r1, r2, #31
 800cb66:	d501      	bpl.n	800cb6c <_printf_float+0x12c>
 800cb68:	3301      	adds	r3, #1
 800cb6a:	6123      	str	r3, [r4, #16]
 800cb6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d0a9      	beq.n	800cac8 <_printf_float+0x88>
 800cb74:	232d      	movs	r3, #45	; 0x2d
 800cb76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb7a:	e7a5      	b.n	800cac8 <_printf_float+0x88>
 800cb7c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800cb80:	f000 8178 	beq.w	800ce74 <_printf_float+0x434>
 800cb84:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cb88:	d1be      	bne.n	800cb08 <_printf_float+0xc8>
 800cb8a:	2900      	cmp	r1, #0
 800cb8c:	d1bc      	bne.n	800cb08 <_printf_float+0xc8>
 800cb8e:	2101      	movs	r1, #1
 800cb90:	e7b9      	b.n	800cb06 <_printf_float+0xc6>
 800cb92:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cb96:	d119      	bne.n	800cbcc <_printf_float+0x18c>
 800cb98:	2900      	cmp	r1, #0
 800cb9a:	6863      	ldr	r3, [r4, #4]
 800cb9c:	dd0c      	ble.n	800cbb8 <_printf_float+0x178>
 800cb9e:	6121      	str	r1, [r4, #16]
 800cba0:	b913      	cbnz	r3, 800cba8 <_printf_float+0x168>
 800cba2:	6822      	ldr	r2, [r4, #0]
 800cba4:	07d2      	lsls	r2, r2, #31
 800cba6:	d502      	bpl.n	800cbae <_printf_float+0x16e>
 800cba8:	3301      	adds	r3, #1
 800cbaa:	440b      	add	r3, r1
 800cbac:	6123      	str	r3, [r4, #16]
 800cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb0:	65a3      	str	r3, [r4, #88]	; 0x58
 800cbb2:	f04f 0a00 	mov.w	sl, #0
 800cbb6:	e7d9      	b.n	800cb6c <_printf_float+0x12c>
 800cbb8:	b913      	cbnz	r3, 800cbc0 <_printf_float+0x180>
 800cbba:	6822      	ldr	r2, [r4, #0]
 800cbbc:	07d0      	lsls	r0, r2, #31
 800cbbe:	d501      	bpl.n	800cbc4 <_printf_float+0x184>
 800cbc0:	3302      	adds	r3, #2
 800cbc2:	e7f3      	b.n	800cbac <_printf_float+0x16c>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e7f1      	b.n	800cbac <_printf_float+0x16c>
 800cbc8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cbcc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	db05      	blt.n	800cbe0 <_printf_float+0x1a0>
 800cbd4:	6822      	ldr	r2, [r4, #0]
 800cbd6:	6123      	str	r3, [r4, #16]
 800cbd8:	07d1      	lsls	r1, r2, #31
 800cbda:	d5e8      	bpl.n	800cbae <_printf_float+0x16e>
 800cbdc:	3301      	adds	r3, #1
 800cbde:	e7e5      	b.n	800cbac <_printf_float+0x16c>
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	bfd4      	ite	le
 800cbe4:	f1c3 0302 	rsble	r3, r3, #2
 800cbe8:	2301      	movgt	r3, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	e7de      	b.n	800cbac <_printf_float+0x16c>
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	055a      	lsls	r2, r3, #21
 800cbf2:	d407      	bmi.n	800cc04 <_printf_float+0x1c4>
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	4642      	mov	r2, r8
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	47b8      	blx	r7
 800cbfe:	3001      	adds	r0, #1
 800cc00:	d12a      	bne.n	800cc58 <_printf_float+0x218>
 800cc02:	e76b      	b.n	800cadc <_printf_float+0x9c>
 800cc04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cc08:	f240 80de 	bls.w	800cdc8 <_printf_float+0x388>
 800cc0c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cc10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc18:	d133      	bne.n	800cc82 <_printf_float+0x242>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4a42      	ldr	r2, [pc, #264]	; (800cd28 <_printf_float+0x2e8>)
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b8      	blx	r7
 800cc24:	3001      	adds	r0, #1
 800cc26:	f43f af59 	beq.w	800cadc <_printf_float+0x9c>
 800cc2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	db02      	blt.n	800cc38 <_printf_float+0x1f8>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	07d8      	lsls	r0, r3, #31
 800cc36:	d50f      	bpl.n	800cc58 <_printf_float+0x218>
 800cc38:	9b05      	ldr	r3, [sp, #20]
 800cc3a:	465a      	mov	r2, fp
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b8      	blx	r7
 800cc42:	3001      	adds	r0, #1
 800cc44:	f43f af4a 	beq.w	800cadc <_printf_float+0x9c>
 800cc48:	f04f 0800 	mov.w	r8, #0
 800cc4c:	f104 091a 	add.w	r9, r4, #26
 800cc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc52:	3b01      	subs	r3, #1
 800cc54:	4543      	cmp	r3, r8
 800cc56:	dc09      	bgt.n	800cc6c <_printf_float+0x22c>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	079b      	lsls	r3, r3, #30
 800cc5c:	f100 8105 	bmi.w	800ce6a <_printf_float+0x42a>
 800cc60:	68e0      	ldr	r0, [r4, #12]
 800cc62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc64:	4298      	cmp	r0, r3
 800cc66:	bfb8      	it	lt
 800cc68:	4618      	movlt	r0, r3
 800cc6a:	e739      	b.n	800cae0 <_printf_float+0xa0>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	464a      	mov	r2, r9
 800cc70:	4631      	mov	r1, r6
 800cc72:	4628      	mov	r0, r5
 800cc74:	47b8      	blx	r7
 800cc76:	3001      	adds	r0, #1
 800cc78:	f43f af30 	beq.w	800cadc <_printf_float+0x9c>
 800cc7c:	f108 0801 	add.w	r8, r8, #1
 800cc80:	e7e6      	b.n	800cc50 <_printf_float+0x210>
 800cc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dc2b      	bgt.n	800cce0 <_printf_float+0x2a0>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	4a27      	ldr	r2, [pc, #156]	; (800cd28 <_printf_float+0x2e8>)
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4628      	mov	r0, r5
 800cc90:	47b8      	blx	r7
 800cc92:	3001      	adds	r0, #1
 800cc94:	f43f af22 	beq.w	800cadc <_printf_float+0x9c>
 800cc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9a:	b923      	cbnz	r3, 800cca6 <_printf_float+0x266>
 800cc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc9e:	b913      	cbnz	r3, 800cca6 <_printf_float+0x266>
 800cca0:	6823      	ldr	r3, [r4, #0]
 800cca2:	07d9      	lsls	r1, r3, #31
 800cca4:	d5d8      	bpl.n	800cc58 <_printf_float+0x218>
 800cca6:	9b05      	ldr	r3, [sp, #20]
 800cca8:	465a      	mov	r2, fp
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4628      	mov	r0, r5
 800ccae:	47b8      	blx	r7
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	f43f af13 	beq.w	800cadc <_printf_float+0x9c>
 800ccb6:	f04f 0900 	mov.w	r9, #0
 800ccba:	f104 0a1a 	add.w	sl, r4, #26
 800ccbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc0:	425b      	negs	r3, r3
 800ccc2:	454b      	cmp	r3, r9
 800ccc4:	dc01      	bgt.n	800ccca <_printf_float+0x28a>
 800ccc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc8:	e795      	b.n	800cbf6 <_printf_float+0x1b6>
 800ccca:	2301      	movs	r3, #1
 800cccc:	4652      	mov	r2, sl
 800ccce:	4631      	mov	r1, r6
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	47b8      	blx	r7
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	f43f af01 	beq.w	800cadc <_printf_float+0x9c>
 800ccda:	f109 0901 	add.w	r9, r9, #1
 800ccde:	e7ee      	b.n	800ccbe <_printf_float+0x27e>
 800cce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cce4:	429a      	cmp	r2, r3
 800cce6:	bfa8      	it	ge
 800cce8:	461a      	movge	r2, r3
 800ccea:	2a00      	cmp	r2, #0
 800ccec:	4691      	mov	r9, r2
 800ccee:	dd07      	ble.n	800cd00 <_printf_float+0x2c0>
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4642      	mov	r2, r8
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	47b8      	blx	r7
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	f43f aeee 	beq.w	800cadc <_printf_float+0x9c>
 800cd00:	f104 031a 	add.w	r3, r4, #26
 800cd04:	f04f 0a00 	mov.w	sl, #0
 800cd08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd0c:	9307      	str	r3, [sp, #28]
 800cd0e:	e017      	b.n	800cd40 <_printf_float+0x300>
 800cd10:	ffffffff 	.word	0xffffffff
 800cd14:	7fefffff 	.word	0x7fefffff
 800cd18:	08010438 	.word	0x08010438
 800cd1c:	08010434 	.word	0x08010434
 800cd20:	08010440 	.word	0x08010440
 800cd24:	0801043c 	.word	0x0801043c
 800cd28:	08010444 	.word	0x08010444
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	9a07      	ldr	r2, [sp, #28]
 800cd30:	4631      	mov	r1, r6
 800cd32:	4628      	mov	r0, r5
 800cd34:	47b8      	blx	r7
 800cd36:	3001      	adds	r0, #1
 800cd38:	f43f aed0 	beq.w	800cadc <_printf_float+0x9c>
 800cd3c:	f10a 0a01 	add.w	sl, sl, #1
 800cd40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd42:	9306      	str	r3, [sp, #24]
 800cd44:	eba3 0309 	sub.w	r3, r3, r9
 800cd48:	4553      	cmp	r3, sl
 800cd4a:	dcef      	bgt.n	800cd2c <_printf_float+0x2ec>
 800cd4c:	9b06      	ldr	r3, [sp, #24]
 800cd4e:	4498      	add	r8, r3
 800cd50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd54:	429a      	cmp	r2, r3
 800cd56:	db15      	blt.n	800cd84 <_printf_float+0x344>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	07da      	lsls	r2, r3, #31
 800cd5c:	d412      	bmi.n	800cd84 <_printf_float+0x344>
 800cd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd60:	9a06      	ldr	r2, [sp, #24]
 800cd62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd64:	1a9a      	subs	r2, r3, r2
 800cd66:	eba3 0a01 	sub.w	sl, r3, r1
 800cd6a:	4592      	cmp	sl, r2
 800cd6c:	bfa8      	it	ge
 800cd6e:	4692      	movge	sl, r2
 800cd70:	f1ba 0f00 	cmp.w	sl, #0
 800cd74:	dc0e      	bgt.n	800cd94 <_printf_float+0x354>
 800cd76:	f04f 0800 	mov.w	r8, #0
 800cd7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd7e:	f104 091a 	add.w	r9, r4, #26
 800cd82:	e019      	b.n	800cdb8 <_printf_float+0x378>
 800cd84:	9b05      	ldr	r3, [sp, #20]
 800cd86:	465a      	mov	r2, fp
 800cd88:	4631      	mov	r1, r6
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b8      	blx	r7
 800cd8e:	3001      	adds	r0, #1
 800cd90:	d1e5      	bne.n	800cd5e <_printf_float+0x31e>
 800cd92:	e6a3      	b.n	800cadc <_printf_float+0x9c>
 800cd94:	4653      	mov	r3, sl
 800cd96:	4642      	mov	r2, r8
 800cd98:	4631      	mov	r1, r6
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	47b8      	blx	r7
 800cd9e:	3001      	adds	r0, #1
 800cda0:	d1e9      	bne.n	800cd76 <_printf_float+0x336>
 800cda2:	e69b      	b.n	800cadc <_printf_float+0x9c>
 800cda4:	2301      	movs	r3, #1
 800cda6:	464a      	mov	r2, r9
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4628      	mov	r0, r5
 800cdac:	47b8      	blx	r7
 800cdae:	3001      	adds	r0, #1
 800cdb0:	f43f ae94 	beq.w	800cadc <_printf_float+0x9c>
 800cdb4:	f108 0801 	add.w	r8, r8, #1
 800cdb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdbc:	1a9b      	subs	r3, r3, r2
 800cdbe:	eba3 030a 	sub.w	r3, r3, sl
 800cdc2:	4543      	cmp	r3, r8
 800cdc4:	dcee      	bgt.n	800cda4 <_printf_float+0x364>
 800cdc6:	e747      	b.n	800cc58 <_printf_float+0x218>
 800cdc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdca:	2a01      	cmp	r2, #1
 800cdcc:	dc01      	bgt.n	800cdd2 <_printf_float+0x392>
 800cdce:	07db      	lsls	r3, r3, #31
 800cdd0:	d539      	bpl.n	800ce46 <_printf_float+0x406>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	4642      	mov	r2, r8
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	4628      	mov	r0, r5
 800cdda:	47b8      	blx	r7
 800cddc:	3001      	adds	r0, #1
 800cdde:	f43f ae7d 	beq.w	800cadc <_printf_float+0x9c>
 800cde2:	9b05      	ldr	r3, [sp, #20]
 800cde4:	465a      	mov	r2, fp
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b8      	blx	r7
 800cdec:	3001      	adds	r0, #1
 800cdee:	f108 0801 	add.w	r8, r8, #1
 800cdf2:	f43f ae73 	beq.w	800cadc <_printf_float+0x9c>
 800cdf6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cdfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce04:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce08:	d018      	beq.n	800ce3c <_printf_float+0x3fc>
 800ce0a:	4642      	mov	r2, r8
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	4628      	mov	r0, r5
 800ce10:	47b8      	blx	r7
 800ce12:	3001      	adds	r0, #1
 800ce14:	d10e      	bne.n	800ce34 <_printf_float+0x3f4>
 800ce16:	e661      	b.n	800cadc <_printf_float+0x9c>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	464a      	mov	r2, r9
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	4628      	mov	r0, r5
 800ce20:	47b8      	blx	r7
 800ce22:	3001      	adds	r0, #1
 800ce24:	f43f ae5a 	beq.w	800cadc <_printf_float+0x9c>
 800ce28:	f108 0801 	add.w	r8, r8, #1
 800ce2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	4543      	cmp	r3, r8
 800ce32:	dcf1      	bgt.n	800ce18 <_printf_float+0x3d8>
 800ce34:	4653      	mov	r3, sl
 800ce36:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce3a:	e6dd      	b.n	800cbf8 <_printf_float+0x1b8>
 800ce3c:	f04f 0800 	mov.w	r8, #0
 800ce40:	f104 091a 	add.w	r9, r4, #26
 800ce44:	e7f2      	b.n	800ce2c <_printf_float+0x3ec>
 800ce46:	2301      	movs	r3, #1
 800ce48:	e7df      	b.n	800ce0a <_printf_float+0x3ca>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	464a      	mov	r2, r9
 800ce4e:	4631      	mov	r1, r6
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b8      	blx	r7
 800ce54:	3001      	adds	r0, #1
 800ce56:	f43f ae41 	beq.w	800cadc <_printf_float+0x9c>
 800ce5a:	f108 0801 	add.w	r8, r8, #1
 800ce5e:	68e3      	ldr	r3, [r4, #12]
 800ce60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce62:	1a9b      	subs	r3, r3, r2
 800ce64:	4543      	cmp	r3, r8
 800ce66:	dcf0      	bgt.n	800ce4a <_printf_float+0x40a>
 800ce68:	e6fa      	b.n	800cc60 <_printf_float+0x220>
 800ce6a:	f04f 0800 	mov.w	r8, #0
 800ce6e:	f104 0919 	add.w	r9, r4, #25
 800ce72:	e7f4      	b.n	800ce5e <_printf_float+0x41e>
 800ce74:	2900      	cmp	r1, #0
 800ce76:	f43f ae8a 	beq.w	800cb8e <_printf_float+0x14e>
 800ce7a:	f04f 0c00 	mov.w	ip, #0
 800ce7e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800ce82:	e9cd 0900 	strd	r0, r9, [sp]
 800ce86:	6022      	str	r2, [r4, #0]
 800ce88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	f7ff fd52 	bl	800c936 <__cvt>
 800ce92:	4680      	mov	r8, r0
 800ce94:	e64a      	b.n	800cb2c <_printf_float+0xec>
 800ce96:	bf00      	nop

0800ce98 <_printf_common>:
 800ce98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce9c:	4691      	mov	r9, r2
 800ce9e:	461f      	mov	r7, r3
 800cea0:	688a      	ldr	r2, [r1, #8]
 800cea2:	690b      	ldr	r3, [r1, #16]
 800cea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	bfb8      	it	lt
 800ceac:	4613      	movlt	r3, r2
 800ceae:	f8c9 3000 	str.w	r3, [r9]
 800ceb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	460c      	mov	r4, r1
 800ceba:	b112      	cbz	r2, 800cec2 <_printf_common+0x2a>
 800cebc:	3301      	adds	r3, #1
 800cebe:	f8c9 3000 	str.w	r3, [r9]
 800cec2:	6823      	ldr	r3, [r4, #0]
 800cec4:	0699      	lsls	r1, r3, #26
 800cec6:	bf42      	ittt	mi
 800cec8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cecc:	3302      	addmi	r3, #2
 800cece:	f8c9 3000 	strmi.w	r3, [r9]
 800ced2:	6825      	ldr	r5, [r4, #0]
 800ced4:	f015 0506 	ands.w	r5, r5, #6
 800ced8:	d107      	bne.n	800ceea <_printf_common+0x52>
 800ceda:	f104 0a19 	add.w	sl, r4, #25
 800cede:	68e3      	ldr	r3, [r4, #12]
 800cee0:	f8d9 2000 	ldr.w	r2, [r9]
 800cee4:	1a9b      	subs	r3, r3, r2
 800cee6:	42ab      	cmp	r3, r5
 800cee8:	dc28      	bgt.n	800cf3c <_printf_common+0xa4>
 800ceea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ceee:	6822      	ldr	r2, [r4, #0]
 800cef0:	3300      	adds	r3, #0
 800cef2:	bf18      	it	ne
 800cef4:	2301      	movne	r3, #1
 800cef6:	0692      	lsls	r2, r2, #26
 800cef8:	d42d      	bmi.n	800cf56 <_printf_common+0xbe>
 800cefa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cefe:	4639      	mov	r1, r7
 800cf00:	4630      	mov	r0, r6
 800cf02:	47c0      	blx	r8
 800cf04:	3001      	adds	r0, #1
 800cf06:	d020      	beq.n	800cf4a <_printf_common+0xb2>
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	68e5      	ldr	r5, [r4, #12]
 800cf0c:	f8d9 2000 	ldr.w	r2, [r9]
 800cf10:	f003 0306 	and.w	r3, r3, #6
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	bf08      	it	eq
 800cf18:	1aad      	subeq	r5, r5, r2
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	6922      	ldr	r2, [r4, #16]
 800cf1e:	bf0c      	ite	eq
 800cf20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf24:	2500      	movne	r5, #0
 800cf26:	4293      	cmp	r3, r2
 800cf28:	bfc4      	itt	gt
 800cf2a:	1a9b      	subgt	r3, r3, r2
 800cf2c:	18ed      	addgt	r5, r5, r3
 800cf2e:	f04f 0900 	mov.w	r9, #0
 800cf32:	341a      	adds	r4, #26
 800cf34:	454d      	cmp	r5, r9
 800cf36:	d11a      	bne.n	800cf6e <_printf_common+0xd6>
 800cf38:	2000      	movs	r0, #0
 800cf3a:	e008      	b.n	800cf4e <_printf_common+0xb6>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	4652      	mov	r2, sl
 800cf40:	4639      	mov	r1, r7
 800cf42:	4630      	mov	r0, r6
 800cf44:	47c0      	blx	r8
 800cf46:	3001      	adds	r0, #1
 800cf48:	d103      	bne.n	800cf52 <_printf_common+0xba>
 800cf4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf52:	3501      	adds	r5, #1
 800cf54:	e7c3      	b.n	800cede <_printf_common+0x46>
 800cf56:	18e1      	adds	r1, r4, r3
 800cf58:	1c5a      	adds	r2, r3, #1
 800cf5a:	2030      	movs	r0, #48	; 0x30
 800cf5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf60:	4422      	add	r2, r4
 800cf62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf6a:	3302      	adds	r3, #2
 800cf6c:	e7c5      	b.n	800cefa <_printf_common+0x62>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	4622      	mov	r2, r4
 800cf72:	4639      	mov	r1, r7
 800cf74:	4630      	mov	r0, r6
 800cf76:	47c0      	blx	r8
 800cf78:	3001      	adds	r0, #1
 800cf7a:	d0e6      	beq.n	800cf4a <_printf_common+0xb2>
 800cf7c:	f109 0901 	add.w	r9, r9, #1
 800cf80:	e7d8      	b.n	800cf34 <_printf_common+0x9c>
	...

0800cf84 <_printf_i>:
 800cf84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	7e09      	ldrb	r1, [r1, #24]
 800cf90:	b085      	sub	sp, #20
 800cf92:	296e      	cmp	r1, #110	; 0x6e
 800cf94:	4617      	mov	r7, r2
 800cf96:	4606      	mov	r6, r0
 800cf98:	4698      	mov	r8, r3
 800cf9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf9c:	f000 80b3 	beq.w	800d106 <_printf_i+0x182>
 800cfa0:	d822      	bhi.n	800cfe8 <_printf_i+0x64>
 800cfa2:	2963      	cmp	r1, #99	; 0x63
 800cfa4:	d036      	beq.n	800d014 <_printf_i+0x90>
 800cfa6:	d80a      	bhi.n	800cfbe <_printf_i+0x3a>
 800cfa8:	2900      	cmp	r1, #0
 800cfaa:	f000 80b9 	beq.w	800d120 <_printf_i+0x19c>
 800cfae:	2958      	cmp	r1, #88	; 0x58
 800cfb0:	f000 8083 	beq.w	800d0ba <_printf_i+0x136>
 800cfb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cfbc:	e032      	b.n	800d024 <_printf_i+0xa0>
 800cfbe:	2964      	cmp	r1, #100	; 0x64
 800cfc0:	d001      	beq.n	800cfc6 <_printf_i+0x42>
 800cfc2:	2969      	cmp	r1, #105	; 0x69
 800cfc4:	d1f6      	bne.n	800cfb4 <_printf_i+0x30>
 800cfc6:	6820      	ldr	r0, [r4, #0]
 800cfc8:	6813      	ldr	r3, [r2, #0]
 800cfca:	0605      	lsls	r5, r0, #24
 800cfcc:	f103 0104 	add.w	r1, r3, #4
 800cfd0:	d52a      	bpl.n	800d028 <_printf_i+0xa4>
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6011      	str	r1, [r2, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	da03      	bge.n	800cfe2 <_printf_i+0x5e>
 800cfda:	222d      	movs	r2, #45	; 0x2d
 800cfdc:	425b      	negs	r3, r3
 800cfde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cfe2:	486f      	ldr	r0, [pc, #444]	; (800d1a0 <_printf_i+0x21c>)
 800cfe4:	220a      	movs	r2, #10
 800cfe6:	e039      	b.n	800d05c <_printf_i+0xd8>
 800cfe8:	2973      	cmp	r1, #115	; 0x73
 800cfea:	f000 809d 	beq.w	800d128 <_printf_i+0x1a4>
 800cfee:	d808      	bhi.n	800d002 <_printf_i+0x7e>
 800cff0:	296f      	cmp	r1, #111	; 0x6f
 800cff2:	d020      	beq.n	800d036 <_printf_i+0xb2>
 800cff4:	2970      	cmp	r1, #112	; 0x70
 800cff6:	d1dd      	bne.n	800cfb4 <_printf_i+0x30>
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	f043 0320 	orr.w	r3, r3, #32
 800cffe:	6023      	str	r3, [r4, #0]
 800d000:	e003      	b.n	800d00a <_printf_i+0x86>
 800d002:	2975      	cmp	r1, #117	; 0x75
 800d004:	d017      	beq.n	800d036 <_printf_i+0xb2>
 800d006:	2978      	cmp	r1, #120	; 0x78
 800d008:	d1d4      	bne.n	800cfb4 <_printf_i+0x30>
 800d00a:	2378      	movs	r3, #120	; 0x78
 800d00c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d010:	4864      	ldr	r0, [pc, #400]	; (800d1a4 <_printf_i+0x220>)
 800d012:	e055      	b.n	800d0c0 <_printf_i+0x13c>
 800d014:	6813      	ldr	r3, [r2, #0]
 800d016:	1d19      	adds	r1, r3, #4
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	6011      	str	r1, [r2, #0]
 800d01c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d024:	2301      	movs	r3, #1
 800d026:	e08c      	b.n	800d142 <_printf_i+0x1be>
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	6011      	str	r1, [r2, #0]
 800d02c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d030:	bf18      	it	ne
 800d032:	b21b      	sxthne	r3, r3
 800d034:	e7cf      	b.n	800cfd6 <_printf_i+0x52>
 800d036:	6813      	ldr	r3, [r2, #0]
 800d038:	6825      	ldr	r5, [r4, #0]
 800d03a:	1d18      	adds	r0, r3, #4
 800d03c:	6010      	str	r0, [r2, #0]
 800d03e:	0628      	lsls	r0, r5, #24
 800d040:	d501      	bpl.n	800d046 <_printf_i+0xc2>
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	e002      	b.n	800d04c <_printf_i+0xc8>
 800d046:	0668      	lsls	r0, r5, #25
 800d048:	d5fb      	bpl.n	800d042 <_printf_i+0xbe>
 800d04a:	881b      	ldrh	r3, [r3, #0]
 800d04c:	4854      	ldr	r0, [pc, #336]	; (800d1a0 <_printf_i+0x21c>)
 800d04e:	296f      	cmp	r1, #111	; 0x6f
 800d050:	bf14      	ite	ne
 800d052:	220a      	movne	r2, #10
 800d054:	2208      	moveq	r2, #8
 800d056:	2100      	movs	r1, #0
 800d058:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d05c:	6865      	ldr	r5, [r4, #4]
 800d05e:	60a5      	str	r5, [r4, #8]
 800d060:	2d00      	cmp	r5, #0
 800d062:	f2c0 8095 	blt.w	800d190 <_printf_i+0x20c>
 800d066:	6821      	ldr	r1, [r4, #0]
 800d068:	f021 0104 	bic.w	r1, r1, #4
 800d06c:	6021      	str	r1, [r4, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d13d      	bne.n	800d0ee <_printf_i+0x16a>
 800d072:	2d00      	cmp	r5, #0
 800d074:	f040 808e 	bne.w	800d194 <_printf_i+0x210>
 800d078:	4665      	mov	r5, ip
 800d07a:	2a08      	cmp	r2, #8
 800d07c:	d10b      	bne.n	800d096 <_printf_i+0x112>
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	07db      	lsls	r3, r3, #31
 800d082:	d508      	bpl.n	800d096 <_printf_i+0x112>
 800d084:	6923      	ldr	r3, [r4, #16]
 800d086:	6862      	ldr	r2, [r4, #4]
 800d088:	429a      	cmp	r2, r3
 800d08a:	bfde      	ittt	le
 800d08c:	2330      	movle	r3, #48	; 0x30
 800d08e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d092:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d096:	ebac 0305 	sub.w	r3, ip, r5
 800d09a:	6123      	str	r3, [r4, #16]
 800d09c:	f8cd 8000 	str.w	r8, [sp]
 800d0a0:	463b      	mov	r3, r7
 800d0a2:	aa03      	add	r2, sp, #12
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	f7ff fef6 	bl	800ce98 <_printf_common>
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d14d      	bne.n	800d14c <_printf_i+0x1c8>
 800d0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b4:	b005      	add	sp, #20
 800d0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0ba:	4839      	ldr	r0, [pc, #228]	; (800d1a0 <_printf_i+0x21c>)
 800d0bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d0c0:	6813      	ldr	r3, [r2, #0]
 800d0c2:	6821      	ldr	r1, [r4, #0]
 800d0c4:	1d1d      	adds	r5, r3, #4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6015      	str	r5, [r2, #0]
 800d0ca:	060a      	lsls	r2, r1, #24
 800d0cc:	d50b      	bpl.n	800d0e6 <_printf_i+0x162>
 800d0ce:	07ca      	lsls	r2, r1, #31
 800d0d0:	bf44      	itt	mi
 800d0d2:	f041 0120 	orrmi.w	r1, r1, #32
 800d0d6:	6021      	strmi	r1, [r4, #0]
 800d0d8:	b91b      	cbnz	r3, 800d0e2 <_printf_i+0x15e>
 800d0da:	6822      	ldr	r2, [r4, #0]
 800d0dc:	f022 0220 	bic.w	r2, r2, #32
 800d0e0:	6022      	str	r2, [r4, #0]
 800d0e2:	2210      	movs	r2, #16
 800d0e4:	e7b7      	b.n	800d056 <_printf_i+0xd2>
 800d0e6:	064d      	lsls	r5, r1, #25
 800d0e8:	bf48      	it	mi
 800d0ea:	b29b      	uxthmi	r3, r3
 800d0ec:	e7ef      	b.n	800d0ce <_printf_i+0x14a>
 800d0ee:	4665      	mov	r5, ip
 800d0f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0f4:	fb02 3311 	mls	r3, r2, r1, r3
 800d0f8:	5cc3      	ldrb	r3, [r0, r3]
 800d0fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d0fe:	460b      	mov	r3, r1
 800d100:	2900      	cmp	r1, #0
 800d102:	d1f5      	bne.n	800d0f0 <_printf_i+0x16c>
 800d104:	e7b9      	b.n	800d07a <_printf_i+0xf6>
 800d106:	6813      	ldr	r3, [r2, #0]
 800d108:	6825      	ldr	r5, [r4, #0]
 800d10a:	6961      	ldr	r1, [r4, #20]
 800d10c:	1d18      	adds	r0, r3, #4
 800d10e:	6010      	str	r0, [r2, #0]
 800d110:	0628      	lsls	r0, r5, #24
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	d501      	bpl.n	800d11a <_printf_i+0x196>
 800d116:	6019      	str	r1, [r3, #0]
 800d118:	e002      	b.n	800d120 <_printf_i+0x19c>
 800d11a:	066a      	lsls	r2, r5, #25
 800d11c:	d5fb      	bpl.n	800d116 <_printf_i+0x192>
 800d11e:	8019      	strh	r1, [r3, #0]
 800d120:	2300      	movs	r3, #0
 800d122:	6123      	str	r3, [r4, #16]
 800d124:	4665      	mov	r5, ip
 800d126:	e7b9      	b.n	800d09c <_printf_i+0x118>
 800d128:	6813      	ldr	r3, [r2, #0]
 800d12a:	1d19      	adds	r1, r3, #4
 800d12c:	6011      	str	r1, [r2, #0]
 800d12e:	681d      	ldr	r5, [r3, #0]
 800d130:	6862      	ldr	r2, [r4, #4]
 800d132:	2100      	movs	r1, #0
 800d134:	4628      	mov	r0, r5
 800d136:	f7f3 f88b 	bl	8000250 <memchr>
 800d13a:	b108      	cbz	r0, 800d140 <_printf_i+0x1bc>
 800d13c:	1b40      	subs	r0, r0, r5
 800d13e:	6060      	str	r0, [r4, #4]
 800d140:	6863      	ldr	r3, [r4, #4]
 800d142:	6123      	str	r3, [r4, #16]
 800d144:	2300      	movs	r3, #0
 800d146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d14a:	e7a7      	b.n	800d09c <_printf_i+0x118>
 800d14c:	6923      	ldr	r3, [r4, #16]
 800d14e:	462a      	mov	r2, r5
 800d150:	4639      	mov	r1, r7
 800d152:	4630      	mov	r0, r6
 800d154:	47c0      	blx	r8
 800d156:	3001      	adds	r0, #1
 800d158:	d0aa      	beq.n	800d0b0 <_printf_i+0x12c>
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	079b      	lsls	r3, r3, #30
 800d15e:	d413      	bmi.n	800d188 <_printf_i+0x204>
 800d160:	68e0      	ldr	r0, [r4, #12]
 800d162:	9b03      	ldr	r3, [sp, #12]
 800d164:	4298      	cmp	r0, r3
 800d166:	bfb8      	it	lt
 800d168:	4618      	movlt	r0, r3
 800d16a:	e7a3      	b.n	800d0b4 <_printf_i+0x130>
 800d16c:	2301      	movs	r3, #1
 800d16e:	464a      	mov	r2, r9
 800d170:	4639      	mov	r1, r7
 800d172:	4630      	mov	r0, r6
 800d174:	47c0      	blx	r8
 800d176:	3001      	adds	r0, #1
 800d178:	d09a      	beq.n	800d0b0 <_printf_i+0x12c>
 800d17a:	3501      	adds	r5, #1
 800d17c:	68e3      	ldr	r3, [r4, #12]
 800d17e:	9a03      	ldr	r2, [sp, #12]
 800d180:	1a9b      	subs	r3, r3, r2
 800d182:	42ab      	cmp	r3, r5
 800d184:	dcf2      	bgt.n	800d16c <_printf_i+0x1e8>
 800d186:	e7eb      	b.n	800d160 <_printf_i+0x1dc>
 800d188:	2500      	movs	r5, #0
 800d18a:	f104 0919 	add.w	r9, r4, #25
 800d18e:	e7f5      	b.n	800d17c <_printf_i+0x1f8>
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1ac      	bne.n	800d0ee <_printf_i+0x16a>
 800d194:	7803      	ldrb	r3, [r0, #0]
 800d196:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d19a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d19e:	e76c      	b.n	800d07a <_printf_i+0xf6>
 800d1a0:	08010446 	.word	0x08010446
 800d1a4:	08010457 	.word	0x08010457

0800d1a8 <_scanf_float>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	469a      	mov	sl, r3
 800d1ae:	688b      	ldr	r3, [r1, #8]
 800d1b0:	4616      	mov	r6, r2
 800d1b2:	1e5a      	subs	r2, r3, #1
 800d1b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d1b8:	b087      	sub	sp, #28
 800d1ba:	bf83      	ittte	hi
 800d1bc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d1c0:	189b      	addhi	r3, r3, r2
 800d1c2:	9301      	strhi	r3, [sp, #4]
 800d1c4:	2300      	movls	r3, #0
 800d1c6:	bf86      	itte	hi
 800d1c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d1cc:	608b      	strhi	r3, [r1, #8]
 800d1ce:	9301      	strls	r3, [sp, #4]
 800d1d0:	680b      	ldr	r3, [r1, #0]
 800d1d2:	4688      	mov	r8, r1
 800d1d4:	f04f 0b00 	mov.w	fp, #0
 800d1d8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d1dc:	f848 3b1c 	str.w	r3, [r8], #28
 800d1e0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d1e4:	4607      	mov	r7, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	4645      	mov	r5, r8
 800d1ea:	465a      	mov	r2, fp
 800d1ec:	46d9      	mov	r9, fp
 800d1ee:	f8cd b008 	str.w	fp, [sp, #8]
 800d1f2:	68a1      	ldr	r1, [r4, #8]
 800d1f4:	b181      	cbz	r1, 800d218 <_scanf_float+0x70>
 800d1f6:	6833      	ldr	r3, [r6, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	2b49      	cmp	r3, #73	; 0x49
 800d1fc:	d071      	beq.n	800d2e2 <_scanf_float+0x13a>
 800d1fe:	d84d      	bhi.n	800d29c <_scanf_float+0xf4>
 800d200:	2b39      	cmp	r3, #57	; 0x39
 800d202:	d840      	bhi.n	800d286 <_scanf_float+0xde>
 800d204:	2b31      	cmp	r3, #49	; 0x31
 800d206:	f080 8088 	bcs.w	800d31a <_scanf_float+0x172>
 800d20a:	2b2d      	cmp	r3, #45	; 0x2d
 800d20c:	f000 8090 	beq.w	800d330 <_scanf_float+0x188>
 800d210:	d815      	bhi.n	800d23e <_scanf_float+0x96>
 800d212:	2b2b      	cmp	r3, #43	; 0x2b
 800d214:	f000 808c 	beq.w	800d330 <_scanf_float+0x188>
 800d218:	f1b9 0f00 	cmp.w	r9, #0
 800d21c:	d003      	beq.n	800d226 <_scanf_float+0x7e>
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	3a01      	subs	r2, #1
 800d228:	2a01      	cmp	r2, #1
 800d22a:	f200 80ea 	bhi.w	800d402 <_scanf_float+0x25a>
 800d22e:	4545      	cmp	r5, r8
 800d230:	f200 80dc 	bhi.w	800d3ec <_scanf_float+0x244>
 800d234:	2601      	movs	r6, #1
 800d236:	4630      	mov	r0, r6
 800d238:	b007      	add	sp, #28
 800d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23e:	2b2e      	cmp	r3, #46	; 0x2e
 800d240:	f000 809f 	beq.w	800d382 <_scanf_float+0x1da>
 800d244:	2b30      	cmp	r3, #48	; 0x30
 800d246:	d1e7      	bne.n	800d218 <_scanf_float+0x70>
 800d248:	6820      	ldr	r0, [r4, #0]
 800d24a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d24e:	d064      	beq.n	800d31a <_scanf_float+0x172>
 800d250:	9b01      	ldr	r3, [sp, #4]
 800d252:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d256:	6020      	str	r0, [r4, #0]
 800d258:	f109 0901 	add.w	r9, r9, #1
 800d25c:	b11b      	cbz	r3, 800d266 <_scanf_float+0xbe>
 800d25e:	3b01      	subs	r3, #1
 800d260:	3101      	adds	r1, #1
 800d262:	9301      	str	r3, [sp, #4]
 800d264:	60a1      	str	r1, [r4, #8]
 800d266:	68a3      	ldr	r3, [r4, #8]
 800d268:	3b01      	subs	r3, #1
 800d26a:	60a3      	str	r3, [r4, #8]
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	3301      	adds	r3, #1
 800d270:	6123      	str	r3, [r4, #16]
 800d272:	6873      	ldr	r3, [r6, #4]
 800d274:	3b01      	subs	r3, #1
 800d276:	2b00      	cmp	r3, #0
 800d278:	6073      	str	r3, [r6, #4]
 800d27a:	f340 80ac 	ble.w	800d3d6 <_scanf_float+0x22e>
 800d27e:	6833      	ldr	r3, [r6, #0]
 800d280:	3301      	adds	r3, #1
 800d282:	6033      	str	r3, [r6, #0]
 800d284:	e7b5      	b.n	800d1f2 <_scanf_float+0x4a>
 800d286:	2b45      	cmp	r3, #69	; 0x45
 800d288:	f000 8085 	beq.w	800d396 <_scanf_float+0x1ee>
 800d28c:	2b46      	cmp	r3, #70	; 0x46
 800d28e:	d06a      	beq.n	800d366 <_scanf_float+0x1be>
 800d290:	2b41      	cmp	r3, #65	; 0x41
 800d292:	d1c1      	bne.n	800d218 <_scanf_float+0x70>
 800d294:	2a01      	cmp	r2, #1
 800d296:	d1bf      	bne.n	800d218 <_scanf_float+0x70>
 800d298:	2202      	movs	r2, #2
 800d29a:	e046      	b.n	800d32a <_scanf_float+0x182>
 800d29c:	2b65      	cmp	r3, #101	; 0x65
 800d29e:	d07a      	beq.n	800d396 <_scanf_float+0x1ee>
 800d2a0:	d818      	bhi.n	800d2d4 <_scanf_float+0x12c>
 800d2a2:	2b54      	cmp	r3, #84	; 0x54
 800d2a4:	d066      	beq.n	800d374 <_scanf_float+0x1cc>
 800d2a6:	d811      	bhi.n	800d2cc <_scanf_float+0x124>
 800d2a8:	2b4e      	cmp	r3, #78	; 0x4e
 800d2aa:	d1b5      	bne.n	800d218 <_scanf_float+0x70>
 800d2ac:	2a00      	cmp	r2, #0
 800d2ae:	d146      	bne.n	800d33e <_scanf_float+0x196>
 800d2b0:	f1b9 0f00 	cmp.w	r9, #0
 800d2b4:	d145      	bne.n	800d342 <_scanf_float+0x19a>
 800d2b6:	6821      	ldr	r1, [r4, #0]
 800d2b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d2bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d2c0:	d13f      	bne.n	800d342 <_scanf_float+0x19a>
 800d2c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d2c6:	6021      	str	r1, [r4, #0]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	e02e      	b.n	800d32a <_scanf_float+0x182>
 800d2cc:	2b59      	cmp	r3, #89	; 0x59
 800d2ce:	d01e      	beq.n	800d30e <_scanf_float+0x166>
 800d2d0:	2b61      	cmp	r3, #97	; 0x61
 800d2d2:	e7de      	b.n	800d292 <_scanf_float+0xea>
 800d2d4:	2b6e      	cmp	r3, #110	; 0x6e
 800d2d6:	d0e9      	beq.n	800d2ac <_scanf_float+0x104>
 800d2d8:	d815      	bhi.n	800d306 <_scanf_float+0x15e>
 800d2da:	2b66      	cmp	r3, #102	; 0x66
 800d2dc:	d043      	beq.n	800d366 <_scanf_float+0x1be>
 800d2de:	2b69      	cmp	r3, #105	; 0x69
 800d2e0:	d19a      	bne.n	800d218 <_scanf_float+0x70>
 800d2e2:	f1bb 0f00 	cmp.w	fp, #0
 800d2e6:	d138      	bne.n	800d35a <_scanf_float+0x1b2>
 800d2e8:	f1b9 0f00 	cmp.w	r9, #0
 800d2ec:	d197      	bne.n	800d21e <_scanf_float+0x76>
 800d2ee:	6821      	ldr	r1, [r4, #0]
 800d2f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d2f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d2f8:	d195      	bne.n	800d226 <_scanf_float+0x7e>
 800d2fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d2fe:	6021      	str	r1, [r4, #0]
 800d300:	f04f 0b01 	mov.w	fp, #1
 800d304:	e011      	b.n	800d32a <_scanf_float+0x182>
 800d306:	2b74      	cmp	r3, #116	; 0x74
 800d308:	d034      	beq.n	800d374 <_scanf_float+0x1cc>
 800d30a:	2b79      	cmp	r3, #121	; 0x79
 800d30c:	d184      	bne.n	800d218 <_scanf_float+0x70>
 800d30e:	f1bb 0f07 	cmp.w	fp, #7
 800d312:	d181      	bne.n	800d218 <_scanf_float+0x70>
 800d314:	f04f 0b08 	mov.w	fp, #8
 800d318:	e007      	b.n	800d32a <_scanf_float+0x182>
 800d31a:	eb12 0f0b 	cmn.w	r2, fp
 800d31e:	f47f af7b 	bne.w	800d218 <_scanf_float+0x70>
 800d322:	6821      	ldr	r1, [r4, #0]
 800d324:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d328:	6021      	str	r1, [r4, #0]
 800d32a:	702b      	strb	r3, [r5, #0]
 800d32c:	3501      	adds	r5, #1
 800d32e:	e79a      	b.n	800d266 <_scanf_float+0xbe>
 800d330:	6821      	ldr	r1, [r4, #0]
 800d332:	0608      	lsls	r0, r1, #24
 800d334:	f57f af70 	bpl.w	800d218 <_scanf_float+0x70>
 800d338:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d33c:	e7f4      	b.n	800d328 <_scanf_float+0x180>
 800d33e:	2a02      	cmp	r2, #2
 800d340:	d047      	beq.n	800d3d2 <_scanf_float+0x22a>
 800d342:	f1bb 0f01 	cmp.w	fp, #1
 800d346:	d003      	beq.n	800d350 <_scanf_float+0x1a8>
 800d348:	f1bb 0f04 	cmp.w	fp, #4
 800d34c:	f47f af64 	bne.w	800d218 <_scanf_float+0x70>
 800d350:	f10b 0b01 	add.w	fp, fp, #1
 800d354:	fa5f fb8b 	uxtb.w	fp, fp
 800d358:	e7e7      	b.n	800d32a <_scanf_float+0x182>
 800d35a:	f1bb 0f03 	cmp.w	fp, #3
 800d35e:	d0f7      	beq.n	800d350 <_scanf_float+0x1a8>
 800d360:	f1bb 0f05 	cmp.w	fp, #5
 800d364:	e7f2      	b.n	800d34c <_scanf_float+0x1a4>
 800d366:	f1bb 0f02 	cmp.w	fp, #2
 800d36a:	f47f af55 	bne.w	800d218 <_scanf_float+0x70>
 800d36e:	f04f 0b03 	mov.w	fp, #3
 800d372:	e7da      	b.n	800d32a <_scanf_float+0x182>
 800d374:	f1bb 0f06 	cmp.w	fp, #6
 800d378:	f47f af4e 	bne.w	800d218 <_scanf_float+0x70>
 800d37c:	f04f 0b07 	mov.w	fp, #7
 800d380:	e7d3      	b.n	800d32a <_scanf_float+0x182>
 800d382:	6821      	ldr	r1, [r4, #0]
 800d384:	0588      	lsls	r0, r1, #22
 800d386:	f57f af47 	bpl.w	800d218 <_scanf_float+0x70>
 800d38a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d38e:	6021      	str	r1, [r4, #0]
 800d390:	f8cd 9008 	str.w	r9, [sp, #8]
 800d394:	e7c9      	b.n	800d32a <_scanf_float+0x182>
 800d396:	6821      	ldr	r1, [r4, #0]
 800d398:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d39c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d3a0:	d006      	beq.n	800d3b0 <_scanf_float+0x208>
 800d3a2:	0548      	lsls	r0, r1, #21
 800d3a4:	f57f af38 	bpl.w	800d218 <_scanf_float+0x70>
 800d3a8:	f1b9 0f00 	cmp.w	r9, #0
 800d3ac:	f43f af3b 	beq.w	800d226 <_scanf_float+0x7e>
 800d3b0:	0588      	lsls	r0, r1, #22
 800d3b2:	bf58      	it	pl
 800d3b4:	9802      	ldrpl	r0, [sp, #8]
 800d3b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d3ba:	bf58      	it	pl
 800d3bc:	eba9 0000 	subpl.w	r0, r9, r0
 800d3c0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d3c4:	bf58      	it	pl
 800d3c6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d3ca:	6021      	str	r1, [r4, #0]
 800d3cc:	f04f 0900 	mov.w	r9, #0
 800d3d0:	e7ab      	b.n	800d32a <_scanf_float+0x182>
 800d3d2:	2203      	movs	r2, #3
 800d3d4:	e7a9      	b.n	800d32a <_scanf_float+0x182>
 800d3d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d3da:	9205      	str	r2, [sp, #20]
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4638      	mov	r0, r7
 800d3e0:	4798      	blx	r3
 800d3e2:	9a05      	ldr	r2, [sp, #20]
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	f43f af04 	beq.w	800d1f2 <_scanf_float+0x4a>
 800d3ea:	e715      	b.n	800d218 <_scanf_float+0x70>
 800d3ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	4798      	blx	r3
 800d3fa:	6923      	ldr	r3, [r4, #16]
 800d3fc:	3b01      	subs	r3, #1
 800d3fe:	6123      	str	r3, [r4, #16]
 800d400:	e715      	b.n	800d22e <_scanf_float+0x86>
 800d402:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d406:	2b06      	cmp	r3, #6
 800d408:	d80a      	bhi.n	800d420 <_scanf_float+0x278>
 800d40a:	f1bb 0f02 	cmp.w	fp, #2
 800d40e:	d966      	bls.n	800d4de <_scanf_float+0x336>
 800d410:	f1ab 0b03 	sub.w	fp, fp, #3
 800d414:	fa5f fb8b 	uxtb.w	fp, fp
 800d418:	eba5 0b0b 	sub.w	fp, r5, fp
 800d41c:	455d      	cmp	r5, fp
 800d41e:	d149      	bne.n	800d4b4 <_scanf_float+0x30c>
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	05da      	lsls	r2, r3, #23
 800d424:	d51f      	bpl.n	800d466 <_scanf_float+0x2be>
 800d426:	055b      	lsls	r3, r3, #21
 800d428:	d466      	bmi.n	800d4f8 <_scanf_float+0x350>
 800d42a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	2965      	cmp	r1, #101	; 0x65
 800d432:	f103 33ff 	add.w	r3, r3, #4294967295
 800d436:	f105 3bff 	add.w	fp, r5, #4294967295
 800d43a:	6123      	str	r3, [r4, #16]
 800d43c:	d00d      	beq.n	800d45a <_scanf_float+0x2b2>
 800d43e:	2945      	cmp	r1, #69	; 0x45
 800d440:	d00b      	beq.n	800d45a <_scanf_float+0x2b2>
 800d442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d446:	4632      	mov	r2, r6
 800d448:	4638      	mov	r0, r7
 800d44a:	4798      	blx	r3
 800d44c:	6923      	ldr	r3, [r4, #16]
 800d44e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d452:	3b01      	subs	r3, #1
 800d454:	f1a5 0b02 	sub.w	fp, r5, #2
 800d458:	6123      	str	r3, [r4, #16]
 800d45a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d45e:	4632      	mov	r2, r6
 800d460:	4638      	mov	r0, r7
 800d462:	4798      	blx	r3
 800d464:	465d      	mov	r5, fp
 800d466:	6826      	ldr	r6, [r4, #0]
 800d468:	f016 0610 	ands.w	r6, r6, #16
 800d46c:	d170      	bne.n	800d550 <_scanf_float+0x3a8>
 800d46e:	702e      	strb	r6, [r5, #0]
 800d470:	6823      	ldr	r3, [r4, #0]
 800d472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d47a:	d140      	bne.n	800d4fe <_scanf_float+0x356>
 800d47c:	9b02      	ldr	r3, [sp, #8]
 800d47e:	eba9 0303 	sub.w	r3, r9, r3
 800d482:	425a      	negs	r2, r3
 800d484:	2b00      	cmp	r3, #0
 800d486:	d147      	bne.n	800d518 <_scanf_float+0x370>
 800d488:	2200      	movs	r2, #0
 800d48a:	4638      	mov	r0, r7
 800d48c:	4641      	mov	r1, r8
 800d48e:	f000 fe6b 	bl	800e168 <_strtod_r>
 800d492:	6820      	ldr	r0, [r4, #0]
 800d494:	f8da 3000 	ldr.w	r3, [sl]
 800d498:	f010 0f02 	tst.w	r0, #2
 800d49c:	f103 0204 	add.w	r2, r3, #4
 800d4a0:	f8ca 2000 	str.w	r2, [sl]
 800d4a4:	d043      	beq.n	800d52e <_scanf_float+0x386>
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	ed83 0b00 	vstr	d0, [r3]
 800d4ac:	68e3      	ldr	r3, [r4, #12]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	60e3      	str	r3, [r4, #12]
 800d4b2:	e6c0      	b.n	800d236 <_scanf_float+0x8e>
 800d4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d4bc:	4632      	mov	r2, r6
 800d4be:	4638      	mov	r0, r7
 800d4c0:	4798      	blx	r3
 800d4c2:	6923      	ldr	r3, [r4, #16]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	6123      	str	r3, [r4, #16]
 800d4c8:	e7a8      	b.n	800d41c <_scanf_float+0x274>
 800d4ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4ce:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d4d2:	4632      	mov	r2, r6
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	4798      	blx	r3
 800d4d8:	6923      	ldr	r3, [r4, #16]
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	6123      	str	r3, [r4, #16]
 800d4de:	4545      	cmp	r5, r8
 800d4e0:	d8f3      	bhi.n	800d4ca <_scanf_float+0x322>
 800d4e2:	e6a7      	b.n	800d234 <_scanf_float+0x8c>
 800d4e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d4ec:	4632      	mov	r2, r6
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	4798      	blx	r3
 800d4f2:	6923      	ldr	r3, [r4, #16]
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	6123      	str	r3, [r4, #16]
 800d4f8:	4545      	cmp	r5, r8
 800d4fa:	d8f3      	bhi.n	800d4e4 <_scanf_float+0x33c>
 800d4fc:	e69a      	b.n	800d234 <_scanf_float+0x8c>
 800d4fe:	9b03      	ldr	r3, [sp, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d0c1      	beq.n	800d488 <_scanf_float+0x2e0>
 800d504:	9904      	ldr	r1, [sp, #16]
 800d506:	230a      	movs	r3, #10
 800d508:	4632      	mov	r2, r6
 800d50a:	3101      	adds	r1, #1
 800d50c:	4638      	mov	r0, r7
 800d50e:	f000 feb7 	bl	800e280 <_strtol_r>
 800d512:	9b03      	ldr	r3, [sp, #12]
 800d514:	9d04      	ldr	r5, [sp, #16]
 800d516:	1ac2      	subs	r2, r0, r3
 800d518:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d51c:	429d      	cmp	r5, r3
 800d51e:	bf28      	it	cs
 800d520:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d524:	490b      	ldr	r1, [pc, #44]	; (800d554 <_scanf_float+0x3ac>)
 800d526:	4628      	mov	r0, r5
 800d528:	f000 f81c 	bl	800d564 <siprintf>
 800d52c:	e7ac      	b.n	800d488 <_scanf_float+0x2e0>
 800d52e:	f010 0004 	ands.w	r0, r0, #4
 800d532:	d1b8      	bne.n	800d4a6 <_scanf_float+0x2fe>
 800d534:	eeb4 0b40 	vcmp.f64	d0, d0
 800d538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53c:	681d      	ldr	r5, [r3, #0]
 800d53e:	d704      	bvc.n	800d54a <_scanf_float+0x3a2>
 800d540:	f000 f80a 	bl	800d558 <nanf>
 800d544:	ed85 0a00 	vstr	s0, [r5]
 800d548:	e7b0      	b.n	800d4ac <_scanf_float+0x304>
 800d54a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d54e:	e7f9      	b.n	800d544 <_scanf_float+0x39c>
 800d550:	2600      	movs	r6, #0
 800d552:	e670      	b.n	800d236 <_scanf_float+0x8e>
 800d554:	08010468 	.word	0x08010468

0800d558 <nanf>:
 800d558:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d560 <nanf+0x8>
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	7fc00000 	.word	0x7fc00000

0800d564 <siprintf>:
 800d564:	b40e      	push	{r1, r2, r3}
 800d566:	b500      	push	{lr}
 800d568:	b09c      	sub	sp, #112	; 0x70
 800d56a:	ab1d      	add	r3, sp, #116	; 0x74
 800d56c:	9002      	str	r0, [sp, #8]
 800d56e:	9006      	str	r0, [sp, #24]
 800d570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d574:	4809      	ldr	r0, [pc, #36]	; (800d59c <siprintf+0x38>)
 800d576:	9107      	str	r1, [sp, #28]
 800d578:	9104      	str	r1, [sp, #16]
 800d57a:	4909      	ldr	r1, [pc, #36]	; (800d5a0 <siprintf+0x3c>)
 800d57c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d580:	9105      	str	r1, [sp, #20]
 800d582:	6800      	ldr	r0, [r0, #0]
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	a902      	add	r1, sp, #8
 800d588:	f002 fcca 	bl	800ff20 <_svfiprintf_r>
 800d58c:	9b02      	ldr	r3, [sp, #8]
 800d58e:	2200      	movs	r2, #0
 800d590:	701a      	strb	r2, [r3, #0]
 800d592:	b01c      	add	sp, #112	; 0x70
 800d594:	f85d eb04 	ldr.w	lr, [sp], #4
 800d598:	b003      	add	sp, #12
 800d59a:	4770      	bx	lr
 800d59c:	200000bc 	.word	0x200000bc
 800d5a0:	ffff0208 	.word	0xffff0208

0800d5a4 <sulp>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	460d      	mov	r5, r1
 800d5aa:	4616      	mov	r6, r2
 800d5ac:	ec45 4b10 	vmov	d0, r4, r5
 800d5b0:	f002 fa72 	bl	800fa98 <__ulp>
 800d5b4:	b17e      	cbz	r6, 800d5d6 <sulp+0x32>
 800d5b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d5ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	dd09      	ble.n	800d5d6 <sulp+0x32>
 800d5c2:	051b      	lsls	r3, r3, #20
 800d5c4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d5ce:	ec41 0b17 	vmov	d7, r0, r1
 800d5d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}

0800d5d8 <_strtod_l>:
 800d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	ed2d 8b0c 	vpush	{d8-d13}
 800d5e0:	4698      	mov	r8, r3
 800d5e2:	b09d      	sub	sp, #116	; 0x74
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4640      	mov	r0, r8
 800d5ea:	460e      	mov	r6, r1
 800d5ec:	9214      	str	r2, [sp, #80]	; 0x50
 800d5ee:	9318      	str	r3, [sp, #96]	; 0x60
 800d5f0:	f001 ff5b 	bl	800f4aa <__localeconv_l>
 800d5f4:	4681      	mov	r9, r0
 800d5f6:	6800      	ldr	r0, [r0, #0]
 800d5f8:	f7f2 fe22 	bl	8000240 <strlen>
 800d5fc:	f04f 0a00 	mov.w	sl, #0
 800d600:	4607      	mov	r7, r0
 800d602:	f04f 0b00 	mov.w	fp, #0
 800d606:	9617      	str	r6, [sp, #92]	; 0x5c
 800d608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d60a:	781a      	ldrb	r2, [r3, #0]
 800d60c:	2a0d      	cmp	r2, #13
 800d60e:	d834      	bhi.n	800d67a <_strtod_l+0xa2>
 800d610:	2a09      	cmp	r2, #9
 800d612:	d238      	bcs.n	800d686 <_strtod_l+0xae>
 800d614:	2a00      	cmp	r2, #0
 800d616:	d040      	beq.n	800d69a <_strtod_l+0xc2>
 800d618:	2300      	movs	r3, #0
 800d61a:	930d      	str	r3, [sp, #52]	; 0x34
 800d61c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d61e:	782b      	ldrb	r3, [r5, #0]
 800d620:	2b30      	cmp	r3, #48	; 0x30
 800d622:	f040 80b3 	bne.w	800d78c <_strtod_l+0x1b4>
 800d626:	786b      	ldrb	r3, [r5, #1]
 800d628:	2b58      	cmp	r3, #88	; 0x58
 800d62a:	d001      	beq.n	800d630 <_strtod_l+0x58>
 800d62c:	2b78      	cmp	r3, #120	; 0x78
 800d62e:	d169      	bne.n	800d704 <_strtod_l+0x12c>
 800d630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d632:	9301      	str	r3, [sp, #4]
 800d634:	ab18      	add	r3, sp, #96	; 0x60
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	f8cd 8008 	str.w	r8, [sp, #8]
 800d63c:	ab19      	add	r3, sp, #100	; 0x64
 800d63e:	4a8f      	ldr	r2, [pc, #572]	; (800d87c <_strtod_l+0x2a4>)
 800d640:	a917      	add	r1, sp, #92	; 0x5c
 800d642:	4620      	mov	r0, r4
 800d644:	f001 fc57 	bl	800eef6 <__gethex>
 800d648:	f010 0607 	ands.w	r6, r0, #7
 800d64c:	4607      	mov	r7, r0
 800d64e:	d005      	beq.n	800d65c <_strtod_l+0x84>
 800d650:	2e06      	cmp	r6, #6
 800d652:	d12c      	bne.n	800d6ae <_strtod_l+0xd6>
 800d654:	3501      	adds	r5, #1
 800d656:	2300      	movs	r3, #0
 800d658:	9517      	str	r5, [sp, #92]	; 0x5c
 800d65a:	930d      	str	r3, [sp, #52]	; 0x34
 800d65c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f040 855e 	bne.w	800e120 <_strtod_l+0xb48>
 800d664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d666:	b1eb      	cbz	r3, 800d6a4 <_strtod_l+0xcc>
 800d668:	ec4b ab17 	vmov	d7, sl, fp
 800d66c:	eeb1 0b47 	vneg.f64	d0, d7
 800d670:	b01d      	add	sp, #116	; 0x74
 800d672:	ecbd 8b0c 	vpop	{d8-d13}
 800d676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67a:	2a2b      	cmp	r2, #43	; 0x2b
 800d67c:	d015      	beq.n	800d6aa <_strtod_l+0xd2>
 800d67e:	2a2d      	cmp	r2, #45	; 0x2d
 800d680:	d004      	beq.n	800d68c <_strtod_l+0xb4>
 800d682:	2a20      	cmp	r2, #32
 800d684:	d1c8      	bne.n	800d618 <_strtod_l+0x40>
 800d686:	3301      	adds	r3, #1
 800d688:	9317      	str	r3, [sp, #92]	; 0x5c
 800d68a:	e7bd      	b.n	800d608 <_strtod_l+0x30>
 800d68c:	2201      	movs	r2, #1
 800d68e:	920d      	str	r2, [sp, #52]	; 0x34
 800d690:	1c5a      	adds	r2, r3, #1
 800d692:	9217      	str	r2, [sp, #92]	; 0x5c
 800d694:	785b      	ldrb	r3, [r3, #1]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1c0      	bne.n	800d61c <_strtod_l+0x44>
 800d69a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d69c:	9617      	str	r6, [sp, #92]	; 0x5c
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f040 853c 	bne.w	800e11c <_strtod_l+0xb44>
 800d6a4:	ec4b ab10 	vmov	d0, sl, fp
 800d6a8:	e7e2      	b.n	800d670 <_strtod_l+0x98>
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	e7ef      	b.n	800d68e <_strtod_l+0xb6>
 800d6ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d6b0:	b13a      	cbz	r2, 800d6c2 <_strtod_l+0xea>
 800d6b2:	2135      	movs	r1, #53	; 0x35
 800d6b4:	a81a      	add	r0, sp, #104	; 0x68
 800d6b6:	f002 fae8 	bl	800fc8a <__copybits>
 800d6ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f001 ff53 	bl	800f568 <_Bfree>
 800d6c2:	3e01      	subs	r6, #1
 800d6c4:	2e04      	cmp	r6, #4
 800d6c6:	d806      	bhi.n	800d6d6 <_strtod_l+0xfe>
 800d6c8:	e8df f006 	tbb	[pc, r6]
 800d6cc:	1714030a 	.word	0x1714030a
 800d6d0:	0a          	.byte	0x0a
 800d6d1:	00          	.byte	0x00
 800d6d2:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d6d6:	073b      	lsls	r3, r7, #28
 800d6d8:	d5c0      	bpl.n	800d65c <_strtod_l+0x84>
 800d6da:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d6de:	e7bd      	b.n	800d65c <_strtod_l+0x84>
 800d6e0:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d6e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d6e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d6ea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d6ee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d6f2:	e7f0      	b.n	800d6d6 <_strtod_l+0xfe>
 800d6f4:	f8df b188 	ldr.w	fp, [pc, #392]	; 800d880 <_strtod_l+0x2a8>
 800d6f8:	e7ed      	b.n	800d6d6 <_strtod_l+0xfe>
 800d6fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d6fe:	f04f 3aff 	mov.w	sl, #4294967295
 800d702:	e7e8      	b.n	800d6d6 <_strtod_l+0xfe>
 800d704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	9217      	str	r2, [sp, #92]	; 0x5c
 800d70a:	785b      	ldrb	r3, [r3, #1]
 800d70c:	2b30      	cmp	r3, #48	; 0x30
 800d70e:	d0f9      	beq.n	800d704 <_strtod_l+0x12c>
 800d710:	2b00      	cmp	r3, #0
 800d712:	d0a3      	beq.n	800d65c <_strtod_l+0x84>
 800d714:	2301      	movs	r3, #1
 800d716:	930a      	str	r3, [sp, #40]	; 0x28
 800d718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d71a:	930c      	str	r3, [sp, #48]	; 0x30
 800d71c:	2300      	movs	r3, #0
 800d71e:	9306      	str	r3, [sp, #24]
 800d720:	9308      	str	r3, [sp, #32]
 800d722:	461d      	mov	r5, r3
 800d724:	220a      	movs	r2, #10
 800d726:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d728:	f890 8000 	ldrb.w	r8, [r0]
 800d72c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800d730:	b2d9      	uxtb	r1, r3
 800d732:	2909      	cmp	r1, #9
 800d734:	d92c      	bls.n	800d790 <_strtod_l+0x1b8>
 800d736:	463a      	mov	r2, r7
 800d738:	f8d9 1000 	ldr.w	r1, [r9]
 800d73c:	f002 fcf8 	bl	8010130 <strncmp>
 800d740:	2800      	cmp	r0, #0
 800d742:	d035      	beq.n	800d7b0 <_strtod_l+0x1d8>
 800d744:	2000      	movs	r0, #0
 800d746:	4642      	mov	r2, r8
 800d748:	462b      	mov	r3, r5
 800d74a:	4601      	mov	r1, r0
 800d74c:	9004      	str	r0, [sp, #16]
 800d74e:	2a65      	cmp	r2, #101	; 0x65
 800d750:	d001      	beq.n	800d756 <_strtod_l+0x17e>
 800d752:	2a45      	cmp	r2, #69	; 0x45
 800d754:	d117      	bne.n	800d786 <_strtod_l+0x1ae>
 800d756:	b923      	cbnz	r3, 800d762 <_strtod_l+0x18a>
 800d758:	b910      	cbnz	r0, 800d760 <_strtod_l+0x188>
 800d75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d09c      	beq.n	800d69a <_strtod_l+0xc2>
 800d760:	2300      	movs	r3, #0
 800d762:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d764:	1c72      	adds	r2, r6, #1
 800d766:	9217      	str	r2, [sp, #92]	; 0x5c
 800d768:	7872      	ldrb	r2, [r6, #1]
 800d76a:	2a2b      	cmp	r2, #43	; 0x2b
 800d76c:	f000 8082 	beq.w	800d874 <_strtod_l+0x29c>
 800d770:	2a2d      	cmp	r2, #45	; 0x2d
 800d772:	d079      	beq.n	800d868 <_strtod_l+0x290>
 800d774:	f04f 0e00 	mov.w	lr, #0
 800d778:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800d77c:	f1bc 0f09 	cmp.w	ip, #9
 800d780:	f240 8086 	bls.w	800d890 <_strtod_l+0x2b8>
 800d784:	9617      	str	r6, [sp, #92]	; 0x5c
 800d786:	f04f 0800 	mov.w	r8, #0
 800d78a:	e0a8      	b.n	800d8de <_strtod_l+0x306>
 800d78c:	2300      	movs	r3, #0
 800d78e:	e7c2      	b.n	800d716 <_strtod_l+0x13e>
 800d790:	2d08      	cmp	r5, #8
 800d792:	bfd5      	itete	le
 800d794:	9908      	ldrle	r1, [sp, #32]
 800d796:	9906      	ldrgt	r1, [sp, #24]
 800d798:	fb02 3301 	mlale	r3, r2, r1, r3
 800d79c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d7a0:	f100 0001 	add.w	r0, r0, #1
 800d7a4:	bfd4      	ite	le
 800d7a6:	9308      	strle	r3, [sp, #32]
 800d7a8:	9306      	strgt	r3, [sp, #24]
 800d7aa:	3501      	adds	r5, #1
 800d7ac:	9017      	str	r0, [sp, #92]	; 0x5c
 800d7ae:	e7ba      	b.n	800d726 <_strtod_l+0x14e>
 800d7b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7b2:	19da      	adds	r2, r3, r7
 800d7b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d7b6:	5dda      	ldrb	r2, [r3, r7]
 800d7b8:	2d00      	cmp	r5, #0
 800d7ba:	d038      	beq.n	800d82e <_strtod_l+0x256>
 800d7bc:	4601      	mov	r1, r0
 800d7be:	462b      	mov	r3, r5
 800d7c0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800d7c4:	2f09      	cmp	r7, #9
 800d7c6:	d913      	bls.n	800d7f0 <_strtod_l+0x218>
 800d7c8:	2701      	movs	r7, #1
 800d7ca:	9704      	str	r7, [sp, #16]
 800d7cc:	e7bf      	b.n	800d74e <_strtod_l+0x176>
 800d7ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	9217      	str	r2, [sp, #92]	; 0x5c
 800d7d4:	785a      	ldrb	r2, [r3, #1]
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	2a30      	cmp	r2, #48	; 0x30
 800d7da:	d0f8      	beq.n	800d7ce <_strtod_l+0x1f6>
 800d7dc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d7e0:	2b08      	cmp	r3, #8
 800d7e2:	f200 84a2 	bhi.w	800e12a <_strtod_l+0xb52>
 800d7e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7e8:	930c      	str	r3, [sp, #48]	; 0x30
 800d7ea:	4601      	mov	r1, r0
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800d7f4:	f100 0701 	add.w	r7, r0, #1
 800d7f8:	d013      	beq.n	800d822 <_strtod_l+0x24a>
 800d7fa:	4439      	add	r1, r7
 800d7fc:	eb00 0e03 	add.w	lr, r0, r3
 800d800:	461f      	mov	r7, r3
 800d802:	f04f 0c0a 	mov.w	ip, #10
 800d806:	45be      	cmp	lr, r7
 800d808:	d113      	bne.n	800d832 <_strtod_l+0x25a>
 800d80a:	181f      	adds	r7, r3, r0
 800d80c:	2f08      	cmp	r7, #8
 800d80e:	f103 0301 	add.w	r3, r3, #1
 800d812:	4403      	add	r3, r0
 800d814:	dc1d      	bgt.n	800d852 <_strtod_l+0x27a>
 800d816:	9a08      	ldr	r2, [sp, #32]
 800d818:	200a      	movs	r0, #10
 800d81a:	fb00 8202 	mla	r2, r0, r2, r8
 800d81e:	9208      	str	r2, [sp, #32]
 800d820:	2700      	movs	r7, #0
 800d822:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d824:	1c50      	adds	r0, r2, #1
 800d826:	9017      	str	r0, [sp, #92]	; 0x5c
 800d828:	7852      	ldrb	r2, [r2, #1]
 800d82a:	4638      	mov	r0, r7
 800d82c:	e7c8      	b.n	800d7c0 <_strtod_l+0x1e8>
 800d82e:	4628      	mov	r0, r5
 800d830:	e7d2      	b.n	800d7d8 <_strtod_l+0x200>
 800d832:	2f08      	cmp	r7, #8
 800d834:	f107 0701 	add.w	r7, r7, #1
 800d838:	dc04      	bgt.n	800d844 <_strtod_l+0x26c>
 800d83a:	9a08      	ldr	r2, [sp, #32]
 800d83c:	fb0c f202 	mul.w	r2, ip, r2
 800d840:	9208      	str	r2, [sp, #32]
 800d842:	e7e0      	b.n	800d806 <_strtod_l+0x22e>
 800d844:	2f10      	cmp	r7, #16
 800d846:	bfde      	ittt	le
 800d848:	9a06      	ldrle	r2, [sp, #24]
 800d84a:	fb0c f202 	mulle.w	r2, ip, r2
 800d84e:	9206      	strle	r2, [sp, #24]
 800d850:	e7d9      	b.n	800d806 <_strtod_l+0x22e>
 800d852:	2b10      	cmp	r3, #16
 800d854:	bfdf      	itttt	le
 800d856:	9a06      	ldrle	r2, [sp, #24]
 800d858:	200a      	movle	r0, #10
 800d85a:	fb00 8202 	mlale	r2, r0, r2, r8
 800d85e:	9206      	strle	r2, [sp, #24]
 800d860:	e7de      	b.n	800d820 <_strtod_l+0x248>
 800d862:	2301      	movs	r3, #1
 800d864:	9304      	str	r3, [sp, #16]
 800d866:	e777      	b.n	800d758 <_strtod_l+0x180>
 800d868:	f04f 0e01 	mov.w	lr, #1
 800d86c:	1cb2      	adds	r2, r6, #2
 800d86e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d870:	78b2      	ldrb	r2, [r6, #2]
 800d872:	e781      	b.n	800d778 <_strtod_l+0x1a0>
 800d874:	f04f 0e00 	mov.w	lr, #0
 800d878:	e7f8      	b.n	800d86c <_strtod_l+0x294>
 800d87a:	bf00      	nop
 800d87c:	08010470 	.word	0x08010470
 800d880:	7ff00000 	.word	0x7ff00000
 800d884:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d886:	f102 0c01 	add.w	ip, r2, #1
 800d88a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800d88e:	7852      	ldrb	r2, [r2, #1]
 800d890:	2a30      	cmp	r2, #48	; 0x30
 800d892:	d0f7      	beq.n	800d884 <_strtod_l+0x2ac>
 800d894:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800d898:	f1bc 0f08 	cmp.w	ip, #8
 800d89c:	f63f af73 	bhi.w	800d786 <_strtod_l+0x1ae>
 800d8a0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800d8a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8a6:	920e      	str	r2, [sp, #56]	; 0x38
 800d8a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8aa:	f102 0c01 	add.w	ip, r2, #1
 800d8ae:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800d8b2:	7852      	ldrb	r2, [r2, #1]
 800d8b4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800d8b8:	f1b9 0f09 	cmp.w	r9, #9
 800d8bc:	d939      	bls.n	800d932 <_strtod_l+0x35a>
 800d8be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d8c0:	ebac 0c07 	sub.w	ip, ip, r7
 800d8c4:	f1bc 0f08 	cmp.w	ip, #8
 800d8c8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800d8cc:	dc37      	bgt.n	800d93e <_strtod_l+0x366>
 800d8ce:	45e0      	cmp	r8, ip
 800d8d0:	bfa8      	it	ge
 800d8d2:	46e0      	movge	r8, ip
 800d8d4:	f1be 0f00 	cmp.w	lr, #0
 800d8d8:	d001      	beq.n	800d8de <_strtod_l+0x306>
 800d8da:	f1c8 0800 	rsb	r8, r8, #0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d151      	bne.n	800d986 <_strtod_l+0x3ae>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f47f aeba 	bne.w	800d65c <_strtod_l+0x84>
 800d8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f47f aeb6 	bne.w	800d65c <_strtod_l+0x84>
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f47f aed1 	bne.w	800d69a <_strtod_l+0xc2>
 800d8f8:	2a4e      	cmp	r2, #78	; 0x4e
 800d8fa:	d027      	beq.n	800d94c <_strtod_l+0x374>
 800d8fc:	dc21      	bgt.n	800d942 <_strtod_l+0x36a>
 800d8fe:	2a49      	cmp	r2, #73	; 0x49
 800d900:	f47f aecb 	bne.w	800d69a <_strtod_l+0xc2>
 800d904:	499a      	ldr	r1, [pc, #616]	; (800db70 <_strtod_l+0x598>)
 800d906:	a817      	add	r0, sp, #92	; 0x5c
 800d908:	f001 fd28 	bl	800f35c <__match>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f43f aec4 	beq.w	800d69a <_strtod_l+0xc2>
 800d912:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d914:	4997      	ldr	r1, [pc, #604]	; (800db74 <_strtod_l+0x59c>)
 800d916:	3b01      	subs	r3, #1
 800d918:	a817      	add	r0, sp, #92	; 0x5c
 800d91a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d91c:	f001 fd1e 	bl	800f35c <__match>
 800d920:	b910      	cbnz	r0, 800d928 <_strtod_l+0x350>
 800d922:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d924:	3301      	adds	r3, #1
 800d926:	9317      	str	r3, [sp, #92]	; 0x5c
 800d928:	f8df b260 	ldr.w	fp, [pc, #608]	; 800db8c <_strtod_l+0x5b4>
 800d92c:	f04f 0a00 	mov.w	sl, #0
 800d930:	e694      	b.n	800d65c <_strtod_l+0x84>
 800d932:	270a      	movs	r7, #10
 800d934:	fb07 2808 	mla	r8, r7, r8, r2
 800d938:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800d93c:	e7b4      	b.n	800d8a8 <_strtod_l+0x2d0>
 800d93e:	46e0      	mov	r8, ip
 800d940:	e7c8      	b.n	800d8d4 <_strtod_l+0x2fc>
 800d942:	2a69      	cmp	r2, #105	; 0x69
 800d944:	d0de      	beq.n	800d904 <_strtod_l+0x32c>
 800d946:	2a6e      	cmp	r2, #110	; 0x6e
 800d948:	f47f aea7 	bne.w	800d69a <_strtod_l+0xc2>
 800d94c:	498a      	ldr	r1, [pc, #552]	; (800db78 <_strtod_l+0x5a0>)
 800d94e:	a817      	add	r0, sp, #92	; 0x5c
 800d950:	f001 fd04 	bl	800f35c <__match>
 800d954:	2800      	cmp	r0, #0
 800d956:	f43f aea0 	beq.w	800d69a <_strtod_l+0xc2>
 800d95a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b28      	cmp	r3, #40	; 0x28
 800d960:	d10e      	bne.n	800d980 <_strtod_l+0x3a8>
 800d962:	aa1a      	add	r2, sp, #104	; 0x68
 800d964:	4985      	ldr	r1, [pc, #532]	; (800db7c <_strtod_l+0x5a4>)
 800d966:	a817      	add	r0, sp, #92	; 0x5c
 800d968:	f001 fd0c 	bl	800f384 <__hexnan>
 800d96c:	2805      	cmp	r0, #5
 800d96e:	d107      	bne.n	800d980 <_strtod_l+0x3a8>
 800d970:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d972:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d976:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d97a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d97e:	e66d      	b.n	800d65c <_strtod_l+0x84>
 800d980:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800db90 <_strtod_l+0x5b8>
 800d984:	e7d2      	b.n	800d92c <_strtod_l+0x354>
 800d986:	eddd 7a08 	vldr	s15, [sp, #32]
 800d98a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d98e:	eba8 0201 	sub.w	r2, r8, r1
 800d992:	2d00      	cmp	r5, #0
 800d994:	bf08      	it	eq
 800d996:	461d      	moveq	r5, r3
 800d998:	2b10      	cmp	r3, #16
 800d99a:	9204      	str	r2, [sp, #16]
 800d99c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	bfa8      	it	ge
 800d9a4:	2210      	movge	r2, #16
 800d9a6:	2b09      	cmp	r3, #9
 800d9a8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d9ac:	dc14      	bgt.n	800d9d8 <_strtod_l+0x400>
 800d9ae:	9904      	ldr	r1, [sp, #16]
 800d9b0:	2900      	cmp	r1, #0
 800d9b2:	f43f ae53 	beq.w	800d65c <_strtod_l+0x84>
 800d9b6:	9904      	ldr	r1, [sp, #16]
 800d9b8:	dd72      	ble.n	800daa0 <_strtod_l+0x4c8>
 800d9ba:	2916      	cmp	r1, #22
 800d9bc:	dc5a      	bgt.n	800da74 <_strtod_l+0x49c>
 800d9be:	4970      	ldr	r1, [pc, #448]	; (800db80 <_strtod_l+0x5a8>)
 800d9c0:	9b04      	ldr	r3, [sp, #16]
 800d9c2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d9c6:	ed91 7b00 	vldr	d7, [r1]
 800d9ca:	ec4b ab16 	vmov	d6, sl, fp
 800d9ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9d2:	ec5b ab17 	vmov	sl, fp, d7
 800d9d6:	e641      	b.n	800d65c <_strtod_l+0x84>
 800d9d8:	4969      	ldr	r1, [pc, #420]	; (800db80 <_strtod_l+0x5a8>)
 800d9da:	eddd 7a06 	vldr	s15, [sp, #24]
 800d9de:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d9e2:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800d9e6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d9ea:	2b0f      	cmp	r3, #15
 800d9ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d9f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d9f4:	ec5b ab17 	vmov	sl, fp, d7
 800d9f8:	ddd9      	ble.n	800d9ae <_strtod_l+0x3d6>
 800d9fa:	9904      	ldr	r1, [sp, #16]
 800d9fc:	1a9a      	subs	r2, r3, r2
 800d9fe:	440a      	add	r2, r1
 800da00:	2a00      	cmp	r2, #0
 800da02:	f340 8096 	ble.w	800db32 <_strtod_l+0x55a>
 800da06:	f012 000f 	ands.w	r0, r2, #15
 800da0a:	d00a      	beq.n	800da22 <_strtod_l+0x44a>
 800da0c:	495c      	ldr	r1, [pc, #368]	; (800db80 <_strtod_l+0x5a8>)
 800da0e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800da12:	ed91 7b00 	vldr	d7, [r1]
 800da16:	ec4b ab16 	vmov	d6, sl, fp
 800da1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da1e:	ec5b ab17 	vmov	sl, fp, d7
 800da22:	f032 020f 	bics.w	r2, r2, #15
 800da26:	d072      	beq.n	800db0e <_strtod_l+0x536>
 800da28:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800da2c:	dd45      	ble.n	800daba <_strtod_l+0x4e2>
 800da2e:	2500      	movs	r5, #0
 800da30:	46a8      	mov	r8, r5
 800da32:	9506      	str	r5, [sp, #24]
 800da34:	46a9      	mov	r9, r5
 800da36:	2322      	movs	r3, #34	; 0x22
 800da38:	f8df b150 	ldr.w	fp, [pc, #336]	; 800db8c <_strtod_l+0x5b4>
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	f04f 0a00 	mov.w	sl, #0
 800da42:	9b06      	ldr	r3, [sp, #24]
 800da44:	2b00      	cmp	r3, #0
 800da46:	f43f ae09 	beq.w	800d65c <_strtod_l+0x84>
 800da4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da4c:	4620      	mov	r0, r4
 800da4e:	f001 fd8b 	bl	800f568 <_Bfree>
 800da52:	4649      	mov	r1, r9
 800da54:	4620      	mov	r0, r4
 800da56:	f001 fd87 	bl	800f568 <_Bfree>
 800da5a:	4641      	mov	r1, r8
 800da5c:	4620      	mov	r0, r4
 800da5e:	f001 fd83 	bl	800f568 <_Bfree>
 800da62:	9906      	ldr	r1, [sp, #24]
 800da64:	4620      	mov	r0, r4
 800da66:	f001 fd7f 	bl	800f568 <_Bfree>
 800da6a:	4629      	mov	r1, r5
 800da6c:	4620      	mov	r0, r4
 800da6e:	f001 fd7b 	bl	800f568 <_Bfree>
 800da72:	e5f3      	b.n	800d65c <_strtod_l+0x84>
 800da74:	9804      	ldr	r0, [sp, #16]
 800da76:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800da7a:	4281      	cmp	r1, r0
 800da7c:	dbbd      	blt.n	800d9fa <_strtod_l+0x422>
 800da7e:	4a40      	ldr	r2, [pc, #256]	; (800db80 <_strtod_l+0x5a8>)
 800da80:	f1c3 030f 	rsb	r3, r3, #15
 800da84:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800da88:	ed91 7b00 	vldr	d7, [r1]
 800da8c:	ec4b ab16 	vmov	d6, sl, fp
 800da90:	1ac3      	subs	r3, r0, r3
 800da92:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800da96:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da9a:	ed92 6b00 	vldr	d6, [r2]
 800da9e:	e796      	b.n	800d9ce <_strtod_l+0x3f6>
 800daa0:	3116      	adds	r1, #22
 800daa2:	dbaa      	blt.n	800d9fa <_strtod_l+0x422>
 800daa4:	4936      	ldr	r1, [pc, #216]	; (800db80 <_strtod_l+0x5a8>)
 800daa6:	9b04      	ldr	r3, [sp, #16]
 800daa8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800daac:	ed91 7b00 	vldr	d7, [r1]
 800dab0:	ec4b ab16 	vmov	d6, sl, fp
 800dab4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dab8:	e78b      	b.n	800d9d2 <_strtod_l+0x3fa>
 800daba:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800dabe:	2000      	movs	r0, #0
 800dac0:	4e30      	ldr	r6, [pc, #192]	; (800db84 <_strtod_l+0x5ac>)
 800dac2:	1112      	asrs	r2, r2, #4
 800dac4:	4601      	mov	r1, r0
 800dac6:	2a01      	cmp	r2, #1
 800dac8:	dc23      	bgt.n	800db12 <_strtod_l+0x53a>
 800daca:	b108      	cbz	r0, 800dad0 <_strtod_l+0x4f8>
 800dacc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800dad0:	4a2c      	ldr	r2, [pc, #176]	; (800db84 <_strtod_l+0x5ac>)
 800dad2:	482d      	ldr	r0, [pc, #180]	; (800db88 <_strtod_l+0x5b0>)
 800dad4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800dad8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dadc:	ed91 7b00 	vldr	d7, [r1]
 800dae0:	ec4b ab16 	vmov	d6, sl, fp
 800dae4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dae8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800daec:	9907      	ldr	r1, [sp, #28]
 800daee:	4a27      	ldr	r2, [pc, #156]	; (800db8c <_strtod_l+0x5b4>)
 800daf0:	400a      	ands	r2, r1
 800daf2:	4282      	cmp	r2, r0
 800daf4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800daf8:	d899      	bhi.n	800da2e <_strtod_l+0x456>
 800dafa:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800dafe:	4282      	cmp	r2, r0
 800db00:	bf86      	itte	hi
 800db02:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800db94 <_strtod_l+0x5bc>
 800db06:	f04f 3aff 	movhi.w	sl, #4294967295
 800db0a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800db0e:	2700      	movs	r7, #0
 800db10:	e070      	b.n	800dbf4 <_strtod_l+0x61c>
 800db12:	07d7      	lsls	r7, r2, #31
 800db14:	d50a      	bpl.n	800db2c <_strtod_l+0x554>
 800db16:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800db1a:	ed90 7b00 	vldr	d7, [r0]
 800db1e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800db22:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db2a:	2001      	movs	r0, #1
 800db2c:	3101      	adds	r1, #1
 800db2e:	1052      	asrs	r2, r2, #1
 800db30:	e7c9      	b.n	800dac6 <_strtod_l+0x4ee>
 800db32:	d0ec      	beq.n	800db0e <_strtod_l+0x536>
 800db34:	4252      	negs	r2, r2
 800db36:	f012 000f 	ands.w	r0, r2, #15
 800db3a:	d00a      	beq.n	800db52 <_strtod_l+0x57a>
 800db3c:	4910      	ldr	r1, [pc, #64]	; (800db80 <_strtod_l+0x5a8>)
 800db3e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800db42:	ed91 7b00 	vldr	d7, [r1]
 800db46:	ec4b ab16 	vmov	d6, sl, fp
 800db4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800db4e:	ec5b ab17 	vmov	sl, fp, d7
 800db52:	1112      	asrs	r2, r2, #4
 800db54:	d0db      	beq.n	800db0e <_strtod_l+0x536>
 800db56:	2a1f      	cmp	r2, #31
 800db58:	dd1e      	ble.n	800db98 <_strtod_l+0x5c0>
 800db5a:	2500      	movs	r5, #0
 800db5c:	46a8      	mov	r8, r5
 800db5e:	9506      	str	r5, [sp, #24]
 800db60:	46a9      	mov	r9, r5
 800db62:	2322      	movs	r3, #34	; 0x22
 800db64:	f04f 0a00 	mov.w	sl, #0
 800db68:	f04f 0b00 	mov.w	fp, #0
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	e768      	b.n	800da42 <_strtod_l+0x46a>
 800db70:	08010439 	.word	0x08010439
 800db74:	080104c3 	.word	0x080104c3
 800db78:	08010441 	.word	0x08010441
 800db7c:	08010484 	.word	0x08010484
 800db80:	08010500 	.word	0x08010500
 800db84:	080104d8 	.word	0x080104d8
 800db88:	7ca00000 	.word	0x7ca00000
 800db8c:	7ff00000 	.word	0x7ff00000
 800db90:	fff80000 	.word	0xfff80000
 800db94:	7fefffff 	.word	0x7fefffff
 800db98:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800db9c:	f012 0710 	ands.w	r7, r2, #16
 800dba0:	49ab      	ldr	r1, [pc, #684]	; (800de50 <_strtod_l+0x878>)
 800dba2:	bf18      	it	ne
 800dba4:	276a      	movne	r7, #106	; 0x6a
 800dba6:	2000      	movs	r0, #0
 800dba8:	2a00      	cmp	r2, #0
 800dbaa:	f300 8113 	bgt.w	800ddd4 <_strtod_l+0x7fc>
 800dbae:	b108      	cbz	r0, 800dbb4 <_strtod_l+0x5dc>
 800dbb0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800dbb4:	b1bf      	cbz	r7, 800dbe6 <_strtod_l+0x60e>
 800dbb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dbba:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800dbbe:	2a00      	cmp	r2, #0
 800dbc0:	4659      	mov	r1, fp
 800dbc2:	dd10      	ble.n	800dbe6 <_strtod_l+0x60e>
 800dbc4:	2a1f      	cmp	r2, #31
 800dbc6:	f340 8113 	ble.w	800ddf0 <_strtod_l+0x818>
 800dbca:	2a34      	cmp	r2, #52	; 0x34
 800dbcc:	bfde      	ittt	le
 800dbce:	3a20      	suble	r2, #32
 800dbd0:	f04f 30ff 	movle.w	r0, #4294967295
 800dbd4:	fa00 f202 	lslle.w	r2, r0, r2
 800dbd8:	f04f 0a00 	mov.w	sl, #0
 800dbdc:	bfcc      	ite	gt
 800dbde:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dbe2:	ea02 0b01 	andle.w	fp, r2, r1
 800dbe6:	ec4b ab17 	vmov	d7, sl, fp
 800dbea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf2:	d0b2      	beq.n	800db5a <_strtod_l+0x582>
 800dbf4:	9a08      	ldr	r2, [sp, #32]
 800dbf6:	9200      	str	r2, [sp, #0]
 800dbf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dbfa:	462a      	mov	r2, r5
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f001 fd05 	bl	800f60c <__s2b>
 800dc02:	9006      	str	r0, [sp, #24]
 800dc04:	2800      	cmp	r0, #0
 800dc06:	f43f af12 	beq.w	800da2e <_strtod_l+0x456>
 800dc0a:	9a04      	ldr	r2, [sp, #16]
 800dc0c:	9b04      	ldr	r3, [sp, #16]
 800dc0e:	2a00      	cmp	r2, #0
 800dc10:	f1c3 0300 	rsb	r3, r3, #0
 800dc14:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800de38 <_strtod_l+0x860>
 800dc18:	bfa8      	it	ge
 800dc1a:	2300      	movge	r3, #0
 800dc1c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800de40 <_strtod_l+0x868>
 800dc20:	ed9f bb89 	vldr	d11, [pc, #548]	; 800de48 <_strtod_l+0x870>
 800dc24:	930e      	str	r3, [sp, #56]	; 0x38
 800dc26:	2500      	movs	r5, #0
 800dc28:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dc2c:	9310      	str	r3, [sp, #64]	; 0x40
 800dc2e:	46a8      	mov	r8, r5
 800dc30:	9b06      	ldr	r3, [sp, #24]
 800dc32:	4620      	mov	r0, r4
 800dc34:	6859      	ldr	r1, [r3, #4]
 800dc36:	f001 fc63 	bl	800f500 <_Balloc>
 800dc3a:	4681      	mov	r9, r0
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	f43f aefa 	beq.w	800da36 <_strtod_l+0x45e>
 800dc42:	9b06      	ldr	r3, [sp, #24]
 800dc44:	691a      	ldr	r2, [r3, #16]
 800dc46:	3202      	adds	r2, #2
 800dc48:	f103 010c 	add.w	r1, r3, #12
 800dc4c:	0092      	lsls	r2, r2, #2
 800dc4e:	300c      	adds	r0, #12
 800dc50:	f7fe fe5e 	bl	800c910 <memcpy>
 800dc54:	aa1a      	add	r2, sp, #104	; 0x68
 800dc56:	a919      	add	r1, sp, #100	; 0x64
 800dc58:	ec4b ab10 	vmov	d0, sl, fp
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dc62:	f001 ff8f 	bl	800fb84 <__d2b>
 800dc66:	9018      	str	r0, [sp, #96]	; 0x60
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	f43f aee4 	beq.w	800da36 <_strtod_l+0x45e>
 800dc6e:	2101      	movs	r1, #1
 800dc70:	4620      	mov	r0, r4
 800dc72:	f001 fd57 	bl	800f724 <__i2b>
 800dc76:	4680      	mov	r8, r0
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	f43f aedc 	beq.w	800da36 <_strtod_l+0x45e>
 800dc7e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dc80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc82:	2e00      	cmp	r6, #0
 800dc84:	bfb1      	iteee	lt
 800dc86:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800dc88:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800dc8a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800dc8c:	18f3      	addge	r3, r6, r3
 800dc8e:	bfba      	itte	lt
 800dc90:	1b98      	sublt	r0, r3, r6
 800dc92:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dc94:	9308      	strge	r3, [sp, #32]
 800dc96:	eba6 0607 	sub.w	r6, r6, r7
 800dc9a:	bfb8      	it	lt
 800dc9c:	9308      	strlt	r3, [sp, #32]
 800dc9e:	4416      	add	r6, r2
 800dca0:	4b6c      	ldr	r3, [pc, #432]	; (800de54 <_strtod_l+0x87c>)
 800dca2:	3e01      	subs	r6, #1
 800dca4:	429e      	cmp	r6, r3
 800dca6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dcaa:	f280 80b4 	bge.w	800de16 <_strtod_l+0x83e>
 800dcae:	1b9b      	subs	r3, r3, r6
 800dcb0:	2b1f      	cmp	r3, #31
 800dcb2:	eba2 0203 	sub.w	r2, r2, r3
 800dcb6:	f04f 0101 	mov.w	r1, #1
 800dcba:	f300 80a0 	bgt.w	800ddfe <_strtod_l+0x826>
 800dcbe:	fa01 f303 	lsl.w	r3, r1, r3
 800dcc2:	9311      	str	r3, [sp, #68]	; 0x44
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcc8:	9b08      	ldr	r3, [sp, #32]
 800dcca:	4413      	add	r3, r2
 800dccc:	4402      	add	r2, r0
 800dcce:	18be      	adds	r6, r7, r2
 800dcd0:	9a08      	ldr	r2, [sp, #32]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	bfa8      	it	ge
 800dcd6:	461a      	movge	r2, r3
 800dcd8:	42b2      	cmp	r2, r6
 800dcda:	bfa8      	it	ge
 800dcdc:	4632      	movge	r2, r6
 800dcde:	2a00      	cmp	r2, #0
 800dce0:	dd04      	ble.n	800dcec <_strtod_l+0x714>
 800dce2:	9908      	ldr	r1, [sp, #32]
 800dce4:	1a9b      	subs	r3, r3, r2
 800dce6:	1ab6      	subs	r6, r6, r2
 800dce8:	1a8a      	subs	r2, r1, r2
 800dcea:	9208      	str	r2, [sp, #32]
 800dcec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcee:	b1c2      	cbz	r2, 800dd22 <_strtod_l+0x74a>
 800dcf0:	4641      	mov	r1, r8
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	9315      	str	r3, [sp, #84]	; 0x54
 800dcf6:	f001 fdb5 	bl	800f864 <__pow5mult>
 800dcfa:	4680      	mov	r8, r0
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	f43f ae9a 	beq.w	800da36 <_strtod_l+0x45e>
 800dd02:	4601      	mov	r1, r0
 800dd04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dd06:	4620      	mov	r0, r4
 800dd08:	f001 fd15 	bl	800f736 <__multiply>
 800dd0c:	900c      	str	r0, [sp, #48]	; 0x30
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	f43f ae91 	beq.w	800da36 <_strtod_l+0x45e>
 800dd14:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd16:	4620      	mov	r0, r4
 800dd18:	f001 fc26 	bl	800f568 <_Bfree>
 800dd1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd20:	9218      	str	r2, [sp, #96]	; 0x60
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	dc7c      	bgt.n	800de20 <_strtod_l+0x848>
 800dd26:	9b04      	ldr	r3, [sp, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	dd08      	ble.n	800dd3e <_strtod_l+0x766>
 800dd2c:	4649      	mov	r1, r9
 800dd2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dd30:	4620      	mov	r0, r4
 800dd32:	f001 fd97 	bl	800f864 <__pow5mult>
 800dd36:	4681      	mov	r9, r0
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	f43f ae7c 	beq.w	800da36 <_strtod_l+0x45e>
 800dd3e:	2e00      	cmp	r6, #0
 800dd40:	dd08      	ble.n	800dd54 <_strtod_l+0x77c>
 800dd42:	4649      	mov	r1, r9
 800dd44:	4632      	mov	r2, r6
 800dd46:	4620      	mov	r0, r4
 800dd48:	f001 fdda 	bl	800f900 <__lshift>
 800dd4c:	4681      	mov	r9, r0
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	f43f ae71 	beq.w	800da36 <_strtod_l+0x45e>
 800dd54:	9b08      	ldr	r3, [sp, #32]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	dd08      	ble.n	800dd6c <_strtod_l+0x794>
 800dd5a:	4641      	mov	r1, r8
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f001 fdce 	bl	800f900 <__lshift>
 800dd64:	4680      	mov	r8, r0
 800dd66:	2800      	cmp	r0, #0
 800dd68:	f43f ae65 	beq.w	800da36 <_strtod_l+0x45e>
 800dd6c:	464a      	mov	r2, r9
 800dd6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd70:	4620      	mov	r0, r4
 800dd72:	f001 fe33 	bl	800f9dc <__mdiff>
 800dd76:	4605      	mov	r5, r0
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	f43f ae5c 	beq.w	800da36 <_strtod_l+0x45e>
 800dd7e:	68c3      	ldr	r3, [r0, #12]
 800dd80:	930c      	str	r3, [sp, #48]	; 0x30
 800dd82:	2300      	movs	r3, #0
 800dd84:	60c3      	str	r3, [r0, #12]
 800dd86:	4641      	mov	r1, r8
 800dd88:	f001 fe0e 	bl	800f9a8 <__mcmp>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	da63      	bge.n	800de58 <_strtod_l+0x880>
 800dd90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd92:	b9e3      	cbnz	r3, 800ddce <_strtod_l+0x7f6>
 800dd94:	f1ba 0f00 	cmp.w	sl, #0
 800dd98:	d119      	bne.n	800ddce <_strtod_l+0x7f6>
 800dd9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd9e:	b9b3      	cbnz	r3, 800ddce <_strtod_l+0x7f6>
 800dda0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dda4:	0d1b      	lsrs	r3, r3, #20
 800dda6:	051b      	lsls	r3, r3, #20
 800dda8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ddac:	d90f      	bls.n	800ddce <_strtod_l+0x7f6>
 800ddae:	696b      	ldr	r3, [r5, #20]
 800ddb0:	b913      	cbnz	r3, 800ddb8 <_strtod_l+0x7e0>
 800ddb2:	692b      	ldr	r3, [r5, #16]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	dd0a      	ble.n	800ddce <_strtod_l+0x7f6>
 800ddb8:	4629      	mov	r1, r5
 800ddba:	2201      	movs	r2, #1
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f001 fd9f 	bl	800f900 <__lshift>
 800ddc2:	4641      	mov	r1, r8
 800ddc4:	4605      	mov	r5, r0
 800ddc6:	f001 fdef 	bl	800f9a8 <__mcmp>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	dc75      	bgt.n	800deba <_strtod_l+0x8e2>
 800ddce:	2f00      	cmp	r7, #0
 800ddd0:	d17f      	bne.n	800ded2 <_strtod_l+0x8fa>
 800ddd2:	e63a      	b.n	800da4a <_strtod_l+0x472>
 800ddd4:	07d6      	lsls	r6, r2, #31
 800ddd6:	d508      	bpl.n	800ddea <_strtod_l+0x812>
 800ddd8:	ed9d 6b06 	vldr	d6, [sp, #24]
 800dddc:	ed91 7b00 	vldr	d7, [r1]
 800dde0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dde4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dde8:	2001      	movs	r0, #1
 800ddea:	1052      	asrs	r2, r2, #1
 800ddec:	3108      	adds	r1, #8
 800ddee:	e6db      	b.n	800dba8 <_strtod_l+0x5d0>
 800ddf0:	f04f 31ff 	mov.w	r1, #4294967295
 800ddf4:	fa01 f202 	lsl.w	r2, r1, r2
 800ddf8:	ea02 0a0a 	and.w	sl, r2, sl
 800ddfc:	e6f3      	b.n	800dbe6 <_strtod_l+0x60e>
 800ddfe:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800de02:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800de06:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800de0a:	36e2      	adds	r6, #226	; 0xe2
 800de0c:	fa01 f306 	lsl.w	r3, r1, r6
 800de10:	930f      	str	r3, [sp, #60]	; 0x3c
 800de12:	9111      	str	r1, [sp, #68]	; 0x44
 800de14:	e758      	b.n	800dcc8 <_strtod_l+0x6f0>
 800de16:	2300      	movs	r3, #0
 800de18:	930f      	str	r3, [sp, #60]	; 0x3c
 800de1a:	2301      	movs	r3, #1
 800de1c:	9311      	str	r3, [sp, #68]	; 0x44
 800de1e:	e753      	b.n	800dcc8 <_strtod_l+0x6f0>
 800de20:	461a      	mov	r2, r3
 800de22:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de24:	4620      	mov	r0, r4
 800de26:	f001 fd6b 	bl	800f900 <__lshift>
 800de2a:	9018      	str	r0, [sp, #96]	; 0x60
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f47f af7a 	bne.w	800dd26 <_strtod_l+0x74e>
 800de32:	e600      	b.n	800da36 <_strtod_l+0x45e>
 800de34:	f3af 8000 	nop.w
 800de38:	94a03595 	.word	0x94a03595
 800de3c:	3fdfffff 	.word	0x3fdfffff
 800de40:	35afe535 	.word	0x35afe535
 800de44:	3fe00000 	.word	0x3fe00000
 800de48:	94a03595 	.word	0x94a03595
 800de4c:	3fcfffff 	.word	0x3fcfffff
 800de50:	08010498 	.word	0x08010498
 800de54:	fffffc02 	.word	0xfffffc02
 800de58:	f8cd b020 	str.w	fp, [sp, #32]
 800de5c:	f040 8085 	bne.w	800df6a <_strtod_l+0x992>
 800de60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de66:	b322      	cbz	r2, 800deb2 <_strtod_l+0x8da>
 800de68:	4ab7      	ldr	r2, [pc, #732]	; (800e148 <_strtod_l+0xb70>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d154      	bne.n	800df18 <_strtod_l+0x940>
 800de6e:	4651      	mov	r1, sl
 800de70:	b1e7      	cbz	r7, 800deac <_strtod_l+0x8d4>
 800de72:	4bb6      	ldr	r3, [pc, #728]	; (800e14c <_strtod_l+0xb74>)
 800de74:	465a      	mov	r2, fp
 800de76:	4013      	ands	r3, r2
 800de78:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de7c:	f04f 32ff 	mov.w	r2, #4294967295
 800de80:	d803      	bhi.n	800de8a <_strtod_l+0x8b2>
 800de82:	0d1b      	lsrs	r3, r3, #20
 800de84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de88:	409a      	lsls	r2, r3
 800de8a:	4291      	cmp	r1, r2
 800de8c:	d144      	bne.n	800df18 <_strtod_l+0x940>
 800de8e:	4bb0      	ldr	r3, [pc, #704]	; (800e150 <_strtod_l+0xb78>)
 800de90:	9a08      	ldr	r2, [sp, #32]
 800de92:	429a      	cmp	r2, r3
 800de94:	d102      	bne.n	800de9c <_strtod_l+0x8c4>
 800de96:	3101      	adds	r1, #1
 800de98:	f43f adcd 	beq.w	800da36 <_strtod_l+0x45e>
 800de9c:	4bab      	ldr	r3, [pc, #684]	; (800e14c <_strtod_l+0xb74>)
 800de9e:	9a08      	ldr	r2, [sp, #32]
 800dea0:	401a      	ands	r2, r3
 800dea2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800dea6:	f04f 0a00 	mov.w	sl, #0
 800deaa:	e790      	b.n	800ddce <_strtod_l+0x7f6>
 800deac:	f04f 32ff 	mov.w	r2, #4294967295
 800deb0:	e7eb      	b.n	800de8a <_strtod_l+0x8b2>
 800deb2:	bb8b      	cbnz	r3, 800df18 <_strtod_l+0x940>
 800deb4:	f1ba 0f00 	cmp.w	sl, #0
 800deb8:	d12e      	bne.n	800df18 <_strtod_l+0x940>
 800deba:	465b      	mov	r3, fp
 800debc:	4aa3      	ldr	r2, [pc, #652]	; (800e14c <_strtod_l+0xb74>)
 800debe:	b30f      	cbz	r7, 800df04 <_strtod_l+0x92c>
 800dec0:	ea02 010b 	and.w	r1, r2, fp
 800dec4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dec8:	dc1c      	bgt.n	800df04 <_strtod_l+0x92c>
 800deca:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dece:	f77f ae48 	ble.w	800db62 <_strtod_l+0x58a>
 800ded2:	4aa0      	ldr	r2, [pc, #640]	; (800e154 <_strtod_l+0xb7c>)
 800ded4:	2300      	movs	r3, #0
 800ded6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800deda:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800dede:	ec4b ab17 	vmov	d7, sl, fp
 800dee2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dee6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800deea:	9b05      	ldr	r3, [sp, #20]
 800deec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800def0:	2b00      	cmp	r3, #0
 800def2:	f47f adaa 	bne.w	800da4a <_strtod_l+0x472>
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	f47f ada6 	bne.w	800da4a <_strtod_l+0x472>
 800defe:	2322      	movs	r3, #34	; 0x22
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	e5a2      	b.n	800da4a <_strtod_l+0x472>
 800df04:	4013      	ands	r3, r2
 800df06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800df0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800df0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800df12:	f04f 3aff 	mov.w	sl, #4294967295
 800df16:	e75a      	b.n	800ddce <_strtod_l+0x7f6>
 800df18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df1a:	b18b      	cbz	r3, 800df40 <_strtod_l+0x968>
 800df1c:	9a08      	ldr	r2, [sp, #32]
 800df1e:	4213      	tst	r3, r2
 800df20:	f43f af55 	beq.w	800ddce <_strtod_l+0x7f6>
 800df24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df26:	463a      	mov	r2, r7
 800df28:	4650      	mov	r0, sl
 800df2a:	4659      	mov	r1, fp
 800df2c:	b163      	cbz	r3, 800df48 <_strtod_l+0x970>
 800df2e:	f7ff fb39 	bl	800d5a4 <sulp>
 800df32:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800df36:	ee37 7b00 	vadd.f64	d7, d7, d0
 800df3a:	ec5b ab17 	vmov	sl, fp, d7
 800df3e:	e746      	b.n	800ddce <_strtod_l+0x7f6>
 800df40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df42:	ea13 0f0a 	tst.w	r3, sl
 800df46:	e7eb      	b.n	800df20 <_strtod_l+0x948>
 800df48:	f7ff fb2c 	bl	800d5a4 <sulp>
 800df4c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800df50:	ee37 7b40 	vsub.f64	d7, d7, d0
 800df54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df60:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800df64:	f43f adfd 	beq.w	800db62 <_strtod_l+0x58a>
 800df68:	e731      	b.n	800ddce <_strtod_l+0x7f6>
 800df6a:	4641      	mov	r1, r8
 800df6c:	4628      	mov	r0, r5
 800df6e:	f001 fe58 	bl	800fc22 <__ratio>
 800df72:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800df76:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800df7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7e:	d869      	bhi.n	800e054 <_strtod_l+0xa7c>
 800df80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df82:	2b00      	cmp	r3, #0
 800df84:	d045      	beq.n	800e012 <_strtod_l+0xa3a>
 800df86:	4b74      	ldr	r3, [pc, #464]	; (800e158 <_strtod_l+0xb80>)
 800df88:	2200      	movs	r2, #0
 800df8a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800df8e:	9808      	ldr	r0, [sp, #32]
 800df90:	496e      	ldr	r1, [pc, #440]	; (800e14c <_strtod_l+0xb74>)
 800df92:	ea00 0601 	and.w	r6, r0, r1
 800df96:	4871      	ldr	r0, [pc, #452]	; (800e15c <_strtod_l+0xb84>)
 800df98:	4286      	cmp	r6, r0
 800df9a:	f040 8089 	bne.w	800e0b0 <_strtod_l+0xad8>
 800df9e:	910f      	str	r1, [sp, #60]	; 0x3c
 800dfa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dfa4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800dfa8:	9908      	ldr	r1, [sp, #32]
 800dfaa:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800dfae:	ec4b ab10 	vmov	d0, sl, fp
 800dfb2:	ec43 2b1c 	vmov	d12, r2, r3
 800dfb6:	f001 fd6f 	bl	800fa98 <__ulp>
 800dfba:	ec4b ab1d 	vmov	d13, sl, fp
 800dfbe:	eeac db00 	vfma.f64	d13, d12, d0
 800dfc2:	ed8d db08 	vstr	d13, [sp, #32]
 800dfc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dfca:	4a65      	ldr	r2, [pc, #404]	; (800e160 <_strtod_l+0xb88>)
 800dfcc:	4019      	ands	r1, r3
 800dfce:	4291      	cmp	r1, r2
 800dfd0:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800dfd4:	d948      	bls.n	800e068 <_strtod_l+0xa90>
 800dfd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfd8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d103      	bne.n	800dfe8 <_strtod_l+0xa10>
 800dfe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	f43f ad27 	beq.w	800da36 <_strtod_l+0x45e>
 800dfe8:	f8df b164 	ldr.w	fp, [pc, #356]	; 800e150 <_strtod_l+0xb78>
 800dfec:	f04f 3aff 	mov.w	sl, #4294967295
 800dff0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dff2:	4620      	mov	r0, r4
 800dff4:	f001 fab8 	bl	800f568 <_Bfree>
 800dff8:	4649      	mov	r1, r9
 800dffa:	4620      	mov	r0, r4
 800dffc:	f001 fab4 	bl	800f568 <_Bfree>
 800e000:	4641      	mov	r1, r8
 800e002:	4620      	mov	r0, r4
 800e004:	f001 fab0 	bl	800f568 <_Bfree>
 800e008:	4629      	mov	r1, r5
 800e00a:	4620      	mov	r0, r4
 800e00c:	f001 faac 	bl	800f568 <_Bfree>
 800e010:	e60e      	b.n	800dc30 <_strtod_l+0x658>
 800e012:	f1ba 0f00 	cmp.w	sl, #0
 800e016:	d113      	bne.n	800e040 <_strtod_l+0xa68>
 800e018:	9b08      	ldr	r3, [sp, #32]
 800e01a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e01e:	b9b3      	cbnz	r3, 800e04e <_strtod_l+0xa76>
 800e020:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e024:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e02c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e030:	d401      	bmi.n	800e036 <_strtod_l+0xa5e>
 800e032:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e036:	eeb1 7b48 	vneg.f64	d7, d8
 800e03a:	ec53 2b17 	vmov	r2, r3, d7
 800e03e:	e7a6      	b.n	800df8e <_strtod_l+0x9b6>
 800e040:	f1ba 0f01 	cmp.w	sl, #1
 800e044:	d103      	bne.n	800e04e <_strtod_l+0xa76>
 800e046:	9b08      	ldr	r3, [sp, #32]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f43f ad8a 	beq.w	800db62 <_strtod_l+0x58a>
 800e04e:	2200      	movs	r2, #0
 800e050:	4b44      	ldr	r3, [pc, #272]	; (800e164 <_strtod_l+0xb8c>)
 800e052:	e79a      	b.n	800df8a <_strtod_l+0x9b2>
 800e054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e056:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e05a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0e9      	beq.n	800e036 <_strtod_l+0xa5e>
 800e062:	ec53 2b18 	vmov	r2, r3, d8
 800e066:	e792      	b.n	800df8e <_strtod_l+0x9b6>
 800e068:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e06c:	2f00      	cmp	r7, #0
 800e06e:	d1bf      	bne.n	800dff0 <_strtod_l+0xa18>
 800e070:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e074:	0d1b      	lsrs	r3, r3, #20
 800e076:	051b      	lsls	r3, r3, #20
 800e078:	429e      	cmp	r6, r3
 800e07a:	d1b9      	bne.n	800dff0 <_strtod_l+0xa18>
 800e07c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800e080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e082:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800e086:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e08a:	b92b      	cbnz	r3, 800e098 <_strtod_l+0xac0>
 800e08c:	f1ba 0f00 	cmp.w	sl, #0
 800e090:	d102      	bne.n	800e098 <_strtod_l+0xac0>
 800e092:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800e096:	b3d2      	cbz	r2, 800e10e <_strtod_l+0xb36>
 800e098:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a0:	f53f acd3 	bmi.w	800da4a <_strtod_l+0x472>
 800e0a4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800e0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ac:	dda0      	ble.n	800dff0 <_strtod_l+0xa18>
 800e0ae:	e4cc      	b.n	800da4a <_strtod_l+0x472>
 800e0b0:	b1ef      	cbz	r7, 800e0ee <_strtod_l+0xb16>
 800e0b2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800e0b6:	d81a      	bhi.n	800e0ee <_strtod_l+0xb16>
 800e0b8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e140 <_strtod_l+0xb68>
 800e0bc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c4:	d810      	bhi.n	800e0e8 <_strtod_l+0xb10>
 800e0c6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800e0ca:	ee17 3a90 	vmov	r3, s15
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	bf08      	it	eq
 800e0d2:	2301      	moveq	r3, #1
 800e0d4:	ee07 3a90 	vmov	s15, r3
 800e0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0da:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800e0de:	b99b      	cbnz	r3, 800e108 <_strtod_l+0xb30>
 800e0e0:	eeb1 7b48 	vneg.f64	d7, d8
 800e0e4:	ec53 2b17 	vmov	r2, r3, d7
 800e0e8:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800e0ec:	1b8b      	subs	r3, r1, r6
 800e0ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e0f2:	ec43 2b1c 	vmov	d12, r2, r3
 800e0f6:	f001 fccf 	bl	800fa98 <__ulp>
 800e0fa:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800e0fe:	eeac 7b00 	vfma.f64	d7, d12, d0
 800e102:	ec5b ab17 	vmov	sl, fp, d7
 800e106:	e7b1      	b.n	800e06c <_strtod_l+0xa94>
 800e108:	ec53 2b18 	vmov	r2, r3, d8
 800e10c:	e7ec      	b.n	800e0e8 <_strtod_l+0xb10>
 800e10e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e116:	f57f af6b 	bpl.w	800dff0 <_strtod_l+0xa18>
 800e11a:	e496      	b.n	800da4a <_strtod_l+0x472>
 800e11c:	2300      	movs	r3, #0
 800e11e:	930d      	str	r3, [sp, #52]	; 0x34
 800e120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e124:	6013      	str	r3, [r2, #0]
 800e126:	f7ff ba9d 	b.w	800d664 <_strtod_l+0x8c>
 800e12a:	2a65      	cmp	r2, #101	; 0x65
 800e12c:	f04f 0100 	mov.w	r1, #0
 800e130:	f43f ab97 	beq.w	800d862 <_strtod_l+0x28a>
 800e134:	2701      	movs	r7, #1
 800e136:	460b      	mov	r3, r1
 800e138:	9704      	str	r7, [sp, #16]
 800e13a:	f7ff bb0a 	b.w	800d752 <_strtod_l+0x17a>
 800e13e:	bf00      	nop
 800e140:	ffc00000 	.word	0xffc00000
 800e144:	41dfffff 	.word	0x41dfffff
 800e148:	000fffff 	.word	0x000fffff
 800e14c:	7ff00000 	.word	0x7ff00000
 800e150:	7fefffff 	.word	0x7fefffff
 800e154:	39500000 	.word	0x39500000
 800e158:	3ff00000 	.word	0x3ff00000
 800e15c:	7fe00000 	.word	0x7fe00000
 800e160:	7c9fffff 	.word	0x7c9fffff
 800e164:	bff00000 	.word	0xbff00000

0800e168 <_strtod_r>:
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <_strtod_r+0x18>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	b410      	push	{r4}
 800e16e:	6a1b      	ldr	r3, [r3, #32]
 800e170:	4c04      	ldr	r4, [pc, #16]	; (800e184 <_strtod_r+0x1c>)
 800e172:	2b00      	cmp	r3, #0
 800e174:	bf08      	it	eq
 800e176:	4623      	moveq	r3, r4
 800e178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e17c:	f7ff ba2c 	b.w	800d5d8 <_strtod_l>
 800e180:	200000bc 	.word	0x200000bc
 800e184:	20000120 	.word	0x20000120

0800e188 <_strtol_l.isra.0>:
 800e188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e18c:	4680      	mov	r8, r0
 800e18e:	4689      	mov	r9, r1
 800e190:	4692      	mov	sl, r2
 800e192:	461e      	mov	r6, r3
 800e194:	460f      	mov	r7, r1
 800e196:	463d      	mov	r5, r7
 800e198:	9808      	ldr	r0, [sp, #32]
 800e19a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e19e:	f001 f981 	bl	800f4a4 <__locale_ctype_ptr_l>
 800e1a2:	4420      	add	r0, r4
 800e1a4:	7843      	ldrb	r3, [r0, #1]
 800e1a6:	f013 0308 	ands.w	r3, r3, #8
 800e1aa:	d132      	bne.n	800e212 <_strtol_l.isra.0+0x8a>
 800e1ac:	2c2d      	cmp	r4, #45	; 0x2d
 800e1ae:	d132      	bne.n	800e216 <_strtol_l.isra.0+0x8e>
 800e1b0:	787c      	ldrb	r4, [r7, #1]
 800e1b2:	1cbd      	adds	r5, r7, #2
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	2e00      	cmp	r6, #0
 800e1b8:	d05d      	beq.n	800e276 <_strtol_l.isra.0+0xee>
 800e1ba:	2e10      	cmp	r6, #16
 800e1bc:	d109      	bne.n	800e1d2 <_strtol_l.isra.0+0x4a>
 800e1be:	2c30      	cmp	r4, #48	; 0x30
 800e1c0:	d107      	bne.n	800e1d2 <_strtol_l.isra.0+0x4a>
 800e1c2:	782b      	ldrb	r3, [r5, #0]
 800e1c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e1c8:	2b58      	cmp	r3, #88	; 0x58
 800e1ca:	d14f      	bne.n	800e26c <_strtol_l.isra.0+0xe4>
 800e1cc:	786c      	ldrb	r4, [r5, #1]
 800e1ce:	2610      	movs	r6, #16
 800e1d0:	3502      	adds	r5, #2
 800e1d2:	2a00      	cmp	r2, #0
 800e1d4:	bf14      	ite	ne
 800e1d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e1da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e1de:	2700      	movs	r7, #0
 800e1e0:	fbb1 fcf6 	udiv	ip, r1, r6
 800e1e4:	4638      	mov	r0, r7
 800e1e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e1ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e1ee:	2b09      	cmp	r3, #9
 800e1f0:	d817      	bhi.n	800e222 <_strtol_l.isra.0+0x9a>
 800e1f2:	461c      	mov	r4, r3
 800e1f4:	42a6      	cmp	r6, r4
 800e1f6:	dd23      	ble.n	800e240 <_strtol_l.isra.0+0xb8>
 800e1f8:	1c7b      	adds	r3, r7, #1
 800e1fa:	d007      	beq.n	800e20c <_strtol_l.isra.0+0x84>
 800e1fc:	4584      	cmp	ip, r0
 800e1fe:	d31c      	bcc.n	800e23a <_strtol_l.isra.0+0xb2>
 800e200:	d101      	bne.n	800e206 <_strtol_l.isra.0+0x7e>
 800e202:	45a6      	cmp	lr, r4
 800e204:	db19      	blt.n	800e23a <_strtol_l.isra.0+0xb2>
 800e206:	fb00 4006 	mla	r0, r0, r6, r4
 800e20a:	2701      	movs	r7, #1
 800e20c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e210:	e7eb      	b.n	800e1ea <_strtol_l.isra.0+0x62>
 800e212:	462f      	mov	r7, r5
 800e214:	e7bf      	b.n	800e196 <_strtol_l.isra.0+0xe>
 800e216:	2c2b      	cmp	r4, #43	; 0x2b
 800e218:	bf04      	itt	eq
 800e21a:	1cbd      	addeq	r5, r7, #2
 800e21c:	787c      	ldrbeq	r4, [r7, #1]
 800e21e:	461a      	mov	r2, r3
 800e220:	e7c9      	b.n	800e1b6 <_strtol_l.isra.0+0x2e>
 800e222:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e226:	2b19      	cmp	r3, #25
 800e228:	d801      	bhi.n	800e22e <_strtol_l.isra.0+0xa6>
 800e22a:	3c37      	subs	r4, #55	; 0x37
 800e22c:	e7e2      	b.n	800e1f4 <_strtol_l.isra.0+0x6c>
 800e22e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e232:	2b19      	cmp	r3, #25
 800e234:	d804      	bhi.n	800e240 <_strtol_l.isra.0+0xb8>
 800e236:	3c57      	subs	r4, #87	; 0x57
 800e238:	e7dc      	b.n	800e1f4 <_strtol_l.isra.0+0x6c>
 800e23a:	f04f 37ff 	mov.w	r7, #4294967295
 800e23e:	e7e5      	b.n	800e20c <_strtol_l.isra.0+0x84>
 800e240:	1c7b      	adds	r3, r7, #1
 800e242:	d108      	bne.n	800e256 <_strtol_l.isra.0+0xce>
 800e244:	2322      	movs	r3, #34	; 0x22
 800e246:	f8c8 3000 	str.w	r3, [r8]
 800e24a:	4608      	mov	r0, r1
 800e24c:	f1ba 0f00 	cmp.w	sl, #0
 800e250:	d107      	bne.n	800e262 <_strtol_l.isra.0+0xda>
 800e252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e256:	b102      	cbz	r2, 800e25a <_strtol_l.isra.0+0xd2>
 800e258:	4240      	negs	r0, r0
 800e25a:	f1ba 0f00 	cmp.w	sl, #0
 800e25e:	d0f8      	beq.n	800e252 <_strtol_l.isra.0+0xca>
 800e260:	b10f      	cbz	r7, 800e266 <_strtol_l.isra.0+0xde>
 800e262:	f105 39ff 	add.w	r9, r5, #4294967295
 800e266:	f8ca 9000 	str.w	r9, [sl]
 800e26a:	e7f2      	b.n	800e252 <_strtol_l.isra.0+0xca>
 800e26c:	2430      	movs	r4, #48	; 0x30
 800e26e:	2e00      	cmp	r6, #0
 800e270:	d1af      	bne.n	800e1d2 <_strtol_l.isra.0+0x4a>
 800e272:	2608      	movs	r6, #8
 800e274:	e7ad      	b.n	800e1d2 <_strtol_l.isra.0+0x4a>
 800e276:	2c30      	cmp	r4, #48	; 0x30
 800e278:	d0a3      	beq.n	800e1c2 <_strtol_l.isra.0+0x3a>
 800e27a:	260a      	movs	r6, #10
 800e27c:	e7a9      	b.n	800e1d2 <_strtol_l.isra.0+0x4a>
	...

0800e280 <_strtol_r>:
 800e280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e282:	4c06      	ldr	r4, [pc, #24]	; (800e29c <_strtol_r+0x1c>)
 800e284:	4d06      	ldr	r5, [pc, #24]	; (800e2a0 <_strtol_r+0x20>)
 800e286:	6824      	ldr	r4, [r4, #0]
 800e288:	6a24      	ldr	r4, [r4, #32]
 800e28a:	2c00      	cmp	r4, #0
 800e28c:	bf08      	it	eq
 800e28e:	462c      	moveq	r4, r5
 800e290:	9400      	str	r4, [sp, #0]
 800e292:	f7ff ff79 	bl	800e188 <_strtol_l.isra.0>
 800e296:	b003      	add	sp, #12
 800e298:	bd30      	pop	{r4, r5, pc}
 800e29a:	bf00      	nop
 800e29c:	200000bc 	.word	0x200000bc
 800e2a0:	20000120 	.word	0x20000120

0800e2a4 <quorem>:
 800e2a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a8:	6903      	ldr	r3, [r0, #16]
 800e2aa:	690c      	ldr	r4, [r1, #16]
 800e2ac:	42a3      	cmp	r3, r4
 800e2ae:	4680      	mov	r8, r0
 800e2b0:	f2c0 8082 	blt.w	800e3b8 <quorem+0x114>
 800e2b4:	3c01      	subs	r4, #1
 800e2b6:	f101 0714 	add.w	r7, r1, #20
 800e2ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e2be:	f100 0614 	add.w	r6, r0, #20
 800e2c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e2c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e2ca:	eb06 030c 	add.w	r3, r6, ip
 800e2ce:	3501      	adds	r5, #1
 800e2d0:	eb07 090c 	add.w	r9, r7, ip
 800e2d4:	9301      	str	r3, [sp, #4]
 800e2d6:	fbb0 f5f5 	udiv	r5, r0, r5
 800e2da:	b395      	cbz	r5, 800e342 <quorem+0x9e>
 800e2dc:	f04f 0a00 	mov.w	sl, #0
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	46b6      	mov	lr, r6
 800e2e4:	46d3      	mov	fp, sl
 800e2e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2ea:	b293      	uxth	r3, r2
 800e2ec:	fb05 a303 	mla	r3, r5, r3, sl
 800e2f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	ebab 0303 	sub.w	r3, fp, r3
 800e2fa:	0c12      	lsrs	r2, r2, #16
 800e2fc:	f8de b000 	ldr.w	fp, [lr]
 800e300:	fb05 a202 	mla	r2, r5, r2, sl
 800e304:	fa13 f38b 	uxtah	r3, r3, fp
 800e308:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e30c:	fa1f fb82 	uxth.w	fp, r2
 800e310:	f8de 2000 	ldr.w	r2, [lr]
 800e314:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e322:	4581      	cmp	r9, r0
 800e324:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e328:	f84e 3b04 	str.w	r3, [lr], #4
 800e32c:	d2db      	bcs.n	800e2e6 <quorem+0x42>
 800e32e:	f856 300c 	ldr.w	r3, [r6, ip]
 800e332:	b933      	cbnz	r3, 800e342 <quorem+0x9e>
 800e334:	9b01      	ldr	r3, [sp, #4]
 800e336:	3b04      	subs	r3, #4
 800e338:	429e      	cmp	r6, r3
 800e33a:	461a      	mov	r2, r3
 800e33c:	d330      	bcc.n	800e3a0 <quorem+0xfc>
 800e33e:	f8c8 4010 	str.w	r4, [r8, #16]
 800e342:	4640      	mov	r0, r8
 800e344:	f001 fb30 	bl	800f9a8 <__mcmp>
 800e348:	2800      	cmp	r0, #0
 800e34a:	db25      	blt.n	800e398 <quorem+0xf4>
 800e34c:	3501      	adds	r5, #1
 800e34e:	4630      	mov	r0, r6
 800e350:	f04f 0c00 	mov.w	ip, #0
 800e354:	f857 2b04 	ldr.w	r2, [r7], #4
 800e358:	f8d0 e000 	ldr.w	lr, [r0]
 800e35c:	b293      	uxth	r3, r2
 800e35e:	ebac 0303 	sub.w	r3, ip, r3
 800e362:	0c12      	lsrs	r2, r2, #16
 800e364:	fa13 f38e 	uxtah	r3, r3, lr
 800e368:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e36c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e370:	b29b      	uxth	r3, r3
 800e372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e376:	45b9      	cmp	r9, r7
 800e378:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e37c:	f840 3b04 	str.w	r3, [r0], #4
 800e380:	d2e8      	bcs.n	800e354 <quorem+0xb0>
 800e382:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e386:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e38a:	b92a      	cbnz	r2, 800e398 <quorem+0xf4>
 800e38c:	3b04      	subs	r3, #4
 800e38e:	429e      	cmp	r6, r3
 800e390:	461a      	mov	r2, r3
 800e392:	d30b      	bcc.n	800e3ac <quorem+0x108>
 800e394:	f8c8 4010 	str.w	r4, [r8, #16]
 800e398:	4628      	mov	r0, r5
 800e39a:	b003      	add	sp, #12
 800e39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a0:	6812      	ldr	r2, [r2, #0]
 800e3a2:	3b04      	subs	r3, #4
 800e3a4:	2a00      	cmp	r2, #0
 800e3a6:	d1ca      	bne.n	800e33e <quorem+0x9a>
 800e3a8:	3c01      	subs	r4, #1
 800e3aa:	e7c5      	b.n	800e338 <quorem+0x94>
 800e3ac:	6812      	ldr	r2, [r2, #0]
 800e3ae:	3b04      	subs	r3, #4
 800e3b0:	2a00      	cmp	r2, #0
 800e3b2:	d1ef      	bne.n	800e394 <quorem+0xf0>
 800e3b4:	3c01      	subs	r4, #1
 800e3b6:	e7ea      	b.n	800e38e <quorem+0xea>
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	e7ee      	b.n	800e39a <quorem+0xf6>
 800e3bc:	0000      	movs	r0, r0
	...

0800e3c0 <_dtoa_r>:
 800e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c4:	ec57 6b10 	vmov	r6, r7, d0
 800e3c8:	b095      	sub	sp, #84	; 0x54
 800e3ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e3cc:	9108      	str	r1, [sp, #32]
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	920a      	str	r2, [sp, #40]	; 0x28
 800e3d2:	9311      	str	r3, [sp, #68]	; 0x44
 800e3d4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800e3d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e3dc:	b93d      	cbnz	r5, 800e3ee <_dtoa_r+0x2e>
 800e3de:	2010      	movs	r0, #16
 800e3e0:	f001 f874 	bl	800f4cc <malloc>
 800e3e4:	6260      	str	r0, [r4, #36]	; 0x24
 800e3e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3ea:	6005      	str	r5, [r0, #0]
 800e3ec:	60c5      	str	r5, [r0, #12]
 800e3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3f0:	6819      	ldr	r1, [r3, #0]
 800e3f2:	b151      	cbz	r1, 800e40a <_dtoa_r+0x4a>
 800e3f4:	685a      	ldr	r2, [r3, #4]
 800e3f6:	604a      	str	r2, [r1, #4]
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	4093      	lsls	r3, r2
 800e3fc:	608b      	str	r3, [r1, #8]
 800e3fe:	4620      	mov	r0, r4
 800e400:	f001 f8b2 	bl	800f568 <_Bfree>
 800e404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e406:	2200      	movs	r2, #0
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	1e3b      	subs	r3, r7, #0
 800e40c:	bfb9      	ittee	lt
 800e40e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e412:	9303      	strlt	r3, [sp, #12]
 800e414:	2300      	movge	r3, #0
 800e416:	f8c8 3000 	strge.w	r3, [r8]
 800e41a:	9d03      	ldr	r5, [sp, #12]
 800e41c:	4bac      	ldr	r3, [pc, #688]	; (800e6d0 <_dtoa_r+0x310>)
 800e41e:	bfbc      	itt	lt
 800e420:	2201      	movlt	r2, #1
 800e422:	f8c8 2000 	strlt.w	r2, [r8]
 800e426:	43ab      	bics	r3, r5
 800e428:	d11b      	bne.n	800e462 <_dtoa_r+0xa2>
 800e42a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e42c:	f242 730f 	movw	r3, #9999	; 0x270f
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	9b02      	ldr	r3, [sp, #8]
 800e434:	b923      	cbnz	r3, 800e440 <_dtoa_r+0x80>
 800e436:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e43a:	2d00      	cmp	r5, #0
 800e43c:	f000 84dd 	beq.w	800edfa <_dtoa_r+0xa3a>
 800e440:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e442:	b953      	cbnz	r3, 800e45a <_dtoa_r+0x9a>
 800e444:	4ba3      	ldr	r3, [pc, #652]	; (800e6d4 <_dtoa_r+0x314>)
 800e446:	e020      	b.n	800e48a <_dtoa_r+0xca>
 800e448:	4ba3      	ldr	r3, [pc, #652]	; (800e6d8 <_dtoa_r+0x318>)
 800e44a:	9304      	str	r3, [sp, #16]
 800e44c:	3308      	adds	r3, #8
 800e44e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e450:	6013      	str	r3, [r2, #0]
 800e452:	9804      	ldr	r0, [sp, #16]
 800e454:	b015      	add	sp, #84	; 0x54
 800e456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45a:	4b9e      	ldr	r3, [pc, #632]	; (800e6d4 <_dtoa_r+0x314>)
 800e45c:	9304      	str	r3, [sp, #16]
 800e45e:	3303      	adds	r3, #3
 800e460:	e7f5      	b.n	800e44e <_dtoa_r+0x8e>
 800e462:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e466:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e472:	d10c      	bne.n	800e48e <_dtoa_r+0xce>
 800e474:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e476:	2301      	movs	r3, #1
 800e478:	6013      	str	r3, [r2, #0]
 800e47a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 84b9 	beq.w	800edf4 <_dtoa_r+0xa34>
 800e482:	4b96      	ldr	r3, [pc, #600]	; (800e6dc <_dtoa_r+0x31c>)
 800e484:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e486:	6013      	str	r3, [r2, #0]
 800e488:	3b01      	subs	r3, #1
 800e48a:	9304      	str	r3, [sp, #16]
 800e48c:	e7e1      	b.n	800e452 <_dtoa_r+0x92>
 800e48e:	a913      	add	r1, sp, #76	; 0x4c
 800e490:	aa12      	add	r2, sp, #72	; 0x48
 800e492:	ed9d 0b04 	vldr	d0, [sp, #16]
 800e496:	4620      	mov	r0, r4
 800e498:	f001 fb74 	bl	800fb84 <__d2b>
 800e49c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800e4a0:	9001      	str	r0, [sp, #4]
 800e4a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e4a4:	2e00      	cmp	r6, #0
 800e4a6:	d046      	beq.n	800e536 <_dtoa_r+0x176>
 800e4a8:	9805      	ldr	r0, [sp, #20]
 800e4aa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800e4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4b2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800e4b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e4ba:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800e4be:	2700      	movs	r7, #0
 800e4c0:	ee07 aa90 	vmov	s15, sl
 800e4c4:	ec43 2b16 	vmov	d6, r2, r3
 800e4c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e4cc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800e6b8 <_dtoa_r+0x2f8>
 800e4d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e4d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e4d8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800e6c0 <_dtoa_r+0x300>
 800e4dc:	eea7 6b04 	vfma.f64	d6, d7, d4
 800e4e0:	eeb0 7b46 	vmov.f64	d7, d6
 800e4e4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800e6c8 <_dtoa_r+0x308>
 800e4e8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e4ec:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e4f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f8:	ee16 ba90 	vmov	fp, s13
 800e4fc:	d508      	bpl.n	800e510 <_dtoa_r+0x150>
 800e4fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e502:	eeb4 6b47 	vcmp.f64	d6, d7
 800e506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50a:	bf18      	it	ne
 800e50c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e510:	f1bb 0f16 	cmp.w	fp, #22
 800e514:	d834      	bhi.n	800e580 <_dtoa_r+0x1c0>
 800e516:	4b72      	ldr	r3, [pc, #456]	; (800e6e0 <_dtoa_r+0x320>)
 800e518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e51c:	ed93 7b00 	vldr	d7, [r3]
 800e520:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e524:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52c:	dd01      	ble.n	800e532 <_dtoa_r+0x172>
 800e52e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e532:	2300      	movs	r3, #0
 800e534:	e025      	b.n	800e582 <_dtoa_r+0x1c2>
 800e536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e538:	eb01 0a03 	add.w	sl, r1, r3
 800e53c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800e540:	2b20      	cmp	r3, #32
 800e542:	dd17      	ble.n	800e574 <_dtoa_r+0x1b4>
 800e544:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800e548:	9a02      	ldr	r2, [sp, #8]
 800e54a:	409d      	lsls	r5, r3
 800e54c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800e550:	fa22 f303 	lsr.w	r3, r2, r3
 800e554:	432b      	orrs	r3, r5
 800e556:	ee07 3a90 	vmov	s15, r3
 800e55a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e55e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e562:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e566:	9805      	ldr	r0, [sp, #20]
 800e568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e56c:	2701      	movs	r7, #1
 800e56e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800e572:	e7a5      	b.n	800e4c0 <_dtoa_r+0x100>
 800e574:	9a02      	ldr	r2, [sp, #8]
 800e576:	f1c3 0320 	rsb	r3, r3, #32
 800e57a:	fa02 f303 	lsl.w	r3, r2, r3
 800e57e:	e7ea      	b.n	800e556 <_dtoa_r+0x196>
 800e580:	2301      	movs	r3, #1
 800e582:	eba1 0a0a 	sub.w	sl, r1, sl
 800e586:	9310      	str	r3, [sp, #64]	; 0x40
 800e588:	f1ba 0301 	subs.w	r3, sl, #1
 800e58c:	9307      	str	r3, [sp, #28]
 800e58e:	bf43      	ittte	mi
 800e590:	2300      	movmi	r3, #0
 800e592:	f1ca 0a01 	rsbmi	sl, sl, #1
 800e596:	9307      	strmi	r3, [sp, #28]
 800e598:	f04f 0a00 	movpl.w	sl, #0
 800e59c:	f1bb 0f00 	cmp.w	fp, #0
 800e5a0:	db19      	blt.n	800e5d6 <_dtoa_r+0x216>
 800e5a2:	9b07      	ldr	r3, [sp, #28]
 800e5a4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e5a8:	445b      	add	r3, fp
 800e5aa:	9307      	str	r3, [sp, #28]
 800e5ac:	f04f 0800 	mov.w	r8, #0
 800e5b0:	9b08      	ldr	r3, [sp, #32]
 800e5b2:	2b09      	cmp	r3, #9
 800e5b4:	d866      	bhi.n	800e684 <_dtoa_r+0x2c4>
 800e5b6:	2b05      	cmp	r3, #5
 800e5b8:	bfc4      	itt	gt
 800e5ba:	3b04      	subgt	r3, #4
 800e5bc:	9308      	strgt	r3, [sp, #32]
 800e5be:	9b08      	ldr	r3, [sp, #32]
 800e5c0:	f1a3 0302 	sub.w	r3, r3, #2
 800e5c4:	bfcc      	ite	gt
 800e5c6:	2500      	movgt	r5, #0
 800e5c8:	2501      	movle	r5, #1
 800e5ca:	2b03      	cmp	r3, #3
 800e5cc:	d866      	bhi.n	800e69c <_dtoa_r+0x2dc>
 800e5ce:	e8df f003 	tbb	[pc, r3]
 800e5d2:	5755      	.short	0x5755
 800e5d4:	4909      	.short	0x4909
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	ebaa 0a0b 	sub.w	sl, sl, fp
 800e5dc:	f1cb 0800 	rsb	r8, fp, #0
 800e5e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5e2:	e7e5      	b.n	800e5b0 <_dtoa_r+0x1f0>
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	dd59      	ble.n	800e6a2 <_dtoa_r+0x2e2>
 800e5ee:	9306      	str	r3, [sp, #24]
 800e5f0:	4699      	mov	r9, r3
 800e5f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	6072      	str	r2, [r6, #4]
 800e5f8:	2204      	movs	r2, #4
 800e5fa:	f102 0014 	add.w	r0, r2, #20
 800e5fe:	4298      	cmp	r0, r3
 800e600:	6871      	ldr	r1, [r6, #4]
 800e602:	d953      	bls.n	800e6ac <_dtoa_r+0x2ec>
 800e604:	4620      	mov	r0, r4
 800e606:	f000 ff7b 	bl	800f500 <_Balloc>
 800e60a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e60c:	6030      	str	r0, [r6, #0]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	9304      	str	r3, [sp, #16]
 800e612:	f1b9 0f0e 	cmp.w	r9, #14
 800e616:	f200 80c2 	bhi.w	800e79e <_dtoa_r+0x3de>
 800e61a:	2d00      	cmp	r5, #0
 800e61c:	f000 80bf 	beq.w	800e79e <_dtoa_r+0x3de>
 800e620:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e624:	f1bb 0f00 	cmp.w	fp, #0
 800e628:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800e62c:	f340 80e6 	ble.w	800e7fc <_dtoa_r+0x43c>
 800e630:	4a2b      	ldr	r2, [pc, #172]	; (800e6e0 <_dtoa_r+0x320>)
 800e632:	f00b 030f 	and.w	r3, fp, #15
 800e636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e63a:	ed93 7b00 	vldr	d7, [r3]
 800e63e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800e642:	06da      	lsls	r2, r3, #27
 800e644:	f140 80d8 	bpl.w	800e7f8 <_dtoa_r+0x438>
 800e648:	4a26      	ldr	r2, [pc, #152]	; (800e6e4 <_dtoa_r+0x324>)
 800e64a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800e64e:	ed92 6b08 	vldr	d6, [r2, #32]
 800e652:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e656:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e65a:	f003 030f 	and.w	r3, r3, #15
 800e65e:	2203      	movs	r2, #3
 800e660:	4920      	ldr	r1, [pc, #128]	; (800e6e4 <_dtoa_r+0x324>)
 800e662:	e04a      	b.n	800e6fa <_dtoa_r+0x33a>
 800e664:	2301      	movs	r3, #1
 800e666:	9309      	str	r3, [sp, #36]	; 0x24
 800e668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e66a:	445b      	add	r3, fp
 800e66c:	f103 0901 	add.w	r9, r3, #1
 800e670:	9306      	str	r3, [sp, #24]
 800e672:	464b      	mov	r3, r9
 800e674:	2b01      	cmp	r3, #1
 800e676:	bfb8      	it	lt
 800e678:	2301      	movlt	r3, #1
 800e67a:	e7ba      	b.n	800e5f2 <_dtoa_r+0x232>
 800e67c:	2300      	movs	r3, #0
 800e67e:	e7b2      	b.n	800e5e6 <_dtoa_r+0x226>
 800e680:	2300      	movs	r3, #0
 800e682:	e7f0      	b.n	800e666 <_dtoa_r+0x2a6>
 800e684:	2501      	movs	r5, #1
 800e686:	2300      	movs	r3, #0
 800e688:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800e68c:	f04f 33ff 	mov.w	r3, #4294967295
 800e690:	9306      	str	r3, [sp, #24]
 800e692:	4699      	mov	r9, r3
 800e694:	2200      	movs	r2, #0
 800e696:	2312      	movs	r3, #18
 800e698:	920a      	str	r2, [sp, #40]	; 0x28
 800e69a:	e7aa      	b.n	800e5f2 <_dtoa_r+0x232>
 800e69c:	2301      	movs	r3, #1
 800e69e:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a0:	e7f4      	b.n	800e68c <_dtoa_r+0x2cc>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	9306      	str	r3, [sp, #24]
 800e6a6:	4699      	mov	r9, r3
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	e7f5      	b.n	800e698 <_dtoa_r+0x2d8>
 800e6ac:	3101      	adds	r1, #1
 800e6ae:	6071      	str	r1, [r6, #4]
 800e6b0:	0052      	lsls	r2, r2, #1
 800e6b2:	e7a2      	b.n	800e5fa <_dtoa_r+0x23a>
 800e6b4:	f3af 8000 	nop.w
 800e6b8:	636f4361 	.word	0x636f4361
 800e6bc:	3fd287a7 	.word	0x3fd287a7
 800e6c0:	8b60c8b3 	.word	0x8b60c8b3
 800e6c4:	3fc68a28 	.word	0x3fc68a28
 800e6c8:	509f79fb 	.word	0x509f79fb
 800e6cc:	3fd34413 	.word	0x3fd34413
 800e6d0:	7ff00000 	.word	0x7ff00000
 800e6d4:	080104c9 	.word	0x080104c9
 800e6d8:	080104c0 	.word	0x080104c0
 800e6dc:	08010445 	.word	0x08010445
 800e6e0:	08010500 	.word	0x08010500
 800e6e4:	080104d8 	.word	0x080104d8
 800e6e8:	07de      	lsls	r6, r3, #31
 800e6ea:	d504      	bpl.n	800e6f6 <_dtoa_r+0x336>
 800e6ec:	ed91 6b00 	vldr	d6, [r1]
 800e6f0:	3201      	adds	r2, #1
 800e6f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6f6:	105b      	asrs	r3, r3, #1
 800e6f8:	3108      	adds	r1, #8
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1f4      	bne.n	800e6e8 <_dtoa_r+0x328>
 800e6fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e702:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e706:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e70a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f000 80a7 	beq.w	800e860 <_dtoa_r+0x4a0>
 800e712:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e716:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e71a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e722:	f140 809d 	bpl.w	800e860 <_dtoa_r+0x4a0>
 800e726:	f1b9 0f00 	cmp.w	r9, #0
 800e72a:	f000 8099 	beq.w	800e860 <_dtoa_r+0x4a0>
 800e72e:	9b06      	ldr	r3, [sp, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	dd30      	ble.n	800e796 <_dtoa_r+0x3d6>
 800e734:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e738:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e73c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e740:	9d06      	ldr	r5, [sp, #24]
 800e742:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e746:	3201      	adds	r2, #1
 800e748:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e74c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e750:	ee07 2a90 	vmov	s15, r2
 800e754:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e758:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e75c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e760:	9a03      	ldr	r2, [sp, #12]
 800e762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e766:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800e76a:	2d00      	cmp	r5, #0
 800e76c:	d17b      	bne.n	800e866 <_dtoa_r+0x4a6>
 800e76e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e772:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e776:	ec41 0b17 	vmov	d7, r0, r1
 800e77a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e782:	f300 8253 	bgt.w	800ec2c <_dtoa_r+0x86c>
 800e786:	eeb1 7b47 	vneg.f64	d7, d7
 800e78a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e792:	f100 8249 	bmi.w	800ec28 <_dtoa_r+0x868>
 800e796:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e79a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e79e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f2c0 8119 	blt.w	800e9d8 <_dtoa_r+0x618>
 800e7a6:	f1bb 0f0e 	cmp.w	fp, #14
 800e7aa:	f300 8115 	bgt.w	800e9d8 <_dtoa_r+0x618>
 800e7ae:	4bc3      	ldr	r3, [pc, #780]	; (800eabc <_dtoa_r+0x6fc>)
 800e7b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e7b4:	ed93 6b00 	vldr	d6, [r3]
 800e7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f280 80ba 	bge.w	800e934 <_dtoa_r+0x574>
 800e7c0:	f1b9 0f00 	cmp.w	r9, #0
 800e7c4:	f300 80b6 	bgt.w	800e934 <_dtoa_r+0x574>
 800e7c8:	f040 822d 	bne.w	800ec26 <_dtoa_r+0x866>
 800e7cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e7d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e7d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e0:	464d      	mov	r5, r9
 800e7e2:	464f      	mov	r7, r9
 800e7e4:	f280 8204 	bge.w	800ebf0 <_dtoa_r+0x830>
 800e7e8:	9b04      	ldr	r3, [sp, #16]
 800e7ea:	9a04      	ldr	r2, [sp, #16]
 800e7ec:	1c5e      	adds	r6, r3, #1
 800e7ee:	2331      	movs	r3, #49	; 0x31
 800e7f0:	7013      	strb	r3, [r2, #0]
 800e7f2:	f10b 0b01 	add.w	fp, fp, #1
 800e7f6:	e1ff      	b.n	800ebf8 <_dtoa_r+0x838>
 800e7f8:	2202      	movs	r2, #2
 800e7fa:	e731      	b.n	800e660 <_dtoa_r+0x2a0>
 800e7fc:	d02e      	beq.n	800e85c <_dtoa_r+0x49c>
 800e7fe:	f1cb 0300 	rsb	r3, fp, #0
 800e802:	4aae      	ldr	r2, [pc, #696]	; (800eabc <_dtoa_r+0x6fc>)
 800e804:	f003 010f 	and.w	r1, r3, #15
 800e808:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e80c:	ed92 7b00 	vldr	d7, [r2]
 800e810:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800e814:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e818:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e81c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800e820:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e824:	49a6      	ldr	r1, [pc, #664]	; (800eac0 <_dtoa_r+0x700>)
 800e826:	111b      	asrs	r3, r3, #4
 800e828:	2000      	movs	r0, #0
 800e82a:	2202      	movs	r2, #2
 800e82c:	b93b      	cbnz	r3, 800e83e <_dtoa_r+0x47e>
 800e82e:	2800      	cmp	r0, #0
 800e830:	f43f af6b 	beq.w	800e70a <_dtoa_r+0x34a>
 800e834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e83c:	e765      	b.n	800e70a <_dtoa_r+0x34a>
 800e83e:	07dd      	lsls	r5, r3, #31
 800e840:	d509      	bpl.n	800e856 <_dtoa_r+0x496>
 800e842:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e846:	ed91 7b00 	vldr	d7, [r1]
 800e84a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e84e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e852:	3201      	adds	r2, #1
 800e854:	2001      	movs	r0, #1
 800e856:	105b      	asrs	r3, r3, #1
 800e858:	3108      	adds	r1, #8
 800e85a:	e7e7      	b.n	800e82c <_dtoa_r+0x46c>
 800e85c:	2202      	movs	r2, #2
 800e85e:	e754      	b.n	800e70a <_dtoa_r+0x34a>
 800e860:	465b      	mov	r3, fp
 800e862:	464d      	mov	r5, r9
 800e864:	e770      	b.n	800e748 <_dtoa_r+0x388>
 800e866:	4a95      	ldr	r2, [pc, #596]	; (800eabc <_dtoa_r+0x6fc>)
 800e868:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800e86c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e872:	ec41 0b17 	vmov	d7, r0, r1
 800e876:	b35a      	cbz	r2, 800e8d0 <_dtoa_r+0x510>
 800e878:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e87c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e880:	9e04      	ldr	r6, [sp, #16]
 800e882:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e886:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e88a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e88e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e892:	ee14 2a90 	vmov	r2, s9
 800e896:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e89a:	3230      	adds	r2, #48	; 0x30
 800e89c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e8a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a8:	f806 2b01 	strb.w	r2, [r6], #1
 800e8ac:	d43b      	bmi.n	800e926 <_dtoa_r+0x566>
 800e8ae:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e8b2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ba:	d472      	bmi.n	800e9a2 <_dtoa_r+0x5e2>
 800e8bc:	9a04      	ldr	r2, [sp, #16]
 800e8be:	1ab2      	subs	r2, r6, r2
 800e8c0:	4295      	cmp	r5, r2
 800e8c2:	f77f af68 	ble.w	800e796 <_dtoa_r+0x3d6>
 800e8c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e8ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e8ce:	e7de      	b.n	800e88e <_dtoa_r+0x4ce>
 800e8d0:	9a04      	ldr	r2, [sp, #16]
 800e8d2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e8d6:	1956      	adds	r6, r2, r5
 800e8d8:	4611      	mov	r1, r2
 800e8da:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e8de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e8e2:	ee14 2a90 	vmov	r2, s9
 800e8e6:	3230      	adds	r2, #48	; 0x30
 800e8e8:	f801 2b01 	strb.w	r2, [r1], #1
 800e8ec:	42b1      	cmp	r1, r6
 800e8ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e8f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e8f6:	d11a      	bne.n	800e92e <_dtoa_r+0x56e>
 800e8f8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e8fc:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e900:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e908:	dc4b      	bgt.n	800e9a2 <_dtoa_r+0x5e2>
 800e90a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e90e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e916:	f57f af3e 	bpl.w	800e796 <_dtoa_r+0x3d6>
 800e91a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e91e:	2a30      	cmp	r2, #48	; 0x30
 800e920:	f106 31ff 	add.w	r1, r6, #4294967295
 800e924:	d001      	beq.n	800e92a <_dtoa_r+0x56a>
 800e926:	469b      	mov	fp, r3
 800e928:	e02a      	b.n	800e980 <_dtoa_r+0x5c0>
 800e92a:	460e      	mov	r6, r1
 800e92c:	e7f5      	b.n	800e91a <_dtoa_r+0x55a>
 800e92e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e932:	e7d4      	b.n	800e8de <_dtoa_r+0x51e>
 800e934:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e938:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e93c:	9e04      	ldr	r6, [sp, #16]
 800e93e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e942:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e946:	ee15 3a10 	vmov	r3, s10
 800e94a:	3330      	adds	r3, #48	; 0x30
 800e94c:	f806 3b01 	strb.w	r3, [r6], #1
 800e950:	9b04      	ldr	r3, [sp, #16]
 800e952:	1af3      	subs	r3, r6, r3
 800e954:	4599      	cmp	r9, r3
 800e956:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e95a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e95e:	d133      	bne.n	800e9c8 <_dtoa_r+0x608>
 800e960:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e964:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e96c:	dc18      	bgt.n	800e9a0 <_dtoa_r+0x5e0>
 800e96e:	eeb4 7b46 	vcmp.f64	d7, d6
 800e972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e976:	d103      	bne.n	800e980 <_dtoa_r+0x5c0>
 800e978:	ee15 3a10 	vmov	r3, s10
 800e97c:	07db      	lsls	r3, r3, #31
 800e97e:	d40f      	bmi.n	800e9a0 <_dtoa_r+0x5e0>
 800e980:	9901      	ldr	r1, [sp, #4]
 800e982:	4620      	mov	r0, r4
 800e984:	f000 fdf0 	bl	800f568 <_Bfree>
 800e988:	2300      	movs	r3, #0
 800e98a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e98c:	7033      	strb	r3, [r6, #0]
 800e98e:	f10b 0301 	add.w	r3, fp, #1
 800e992:	6013      	str	r3, [r2, #0]
 800e994:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e996:	2b00      	cmp	r3, #0
 800e998:	f43f ad5b 	beq.w	800e452 <_dtoa_r+0x92>
 800e99c:	601e      	str	r6, [r3, #0]
 800e99e:	e558      	b.n	800e452 <_dtoa_r+0x92>
 800e9a0:	465b      	mov	r3, fp
 800e9a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e9a6:	2939      	cmp	r1, #57	; 0x39
 800e9a8:	f106 32ff 	add.w	r2, r6, #4294967295
 800e9ac:	d106      	bne.n	800e9bc <_dtoa_r+0x5fc>
 800e9ae:	9904      	ldr	r1, [sp, #16]
 800e9b0:	4291      	cmp	r1, r2
 800e9b2:	d107      	bne.n	800e9c4 <_dtoa_r+0x604>
 800e9b4:	2230      	movs	r2, #48	; 0x30
 800e9b6:	700a      	strb	r2, [r1, #0]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	460a      	mov	r2, r1
 800e9bc:	7811      	ldrb	r1, [r2, #0]
 800e9be:	3101      	adds	r1, #1
 800e9c0:	7011      	strb	r1, [r2, #0]
 800e9c2:	e7b0      	b.n	800e926 <_dtoa_r+0x566>
 800e9c4:	4616      	mov	r6, r2
 800e9c6:	e7ec      	b.n	800e9a2 <_dtoa_r+0x5e2>
 800e9c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e9cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d4:	d1b3      	bne.n	800e93e <_dtoa_r+0x57e>
 800e9d6:	e7d3      	b.n	800e980 <_dtoa_r+0x5c0>
 800e9d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9da:	2a00      	cmp	r2, #0
 800e9dc:	f000 808d 	beq.w	800eafa <_dtoa_r+0x73a>
 800e9e0:	9a08      	ldr	r2, [sp, #32]
 800e9e2:	2a01      	cmp	r2, #1
 800e9e4:	dc72      	bgt.n	800eacc <_dtoa_r+0x70c>
 800e9e6:	2f00      	cmp	r7, #0
 800e9e8:	d06c      	beq.n	800eac4 <_dtoa_r+0x704>
 800e9ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9ee:	4645      	mov	r5, r8
 800e9f0:	4656      	mov	r6, sl
 800e9f2:	9a07      	ldr	r2, [sp, #28]
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	441a      	add	r2, r3
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	449a      	add	sl, r3
 800e9fc:	9207      	str	r2, [sp, #28]
 800e9fe:	f000 fe91 	bl	800f724 <__i2b>
 800ea02:	4607      	mov	r7, r0
 800ea04:	2e00      	cmp	r6, #0
 800ea06:	dd0b      	ble.n	800ea20 <_dtoa_r+0x660>
 800ea08:	9b07      	ldr	r3, [sp, #28]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	dd08      	ble.n	800ea20 <_dtoa_r+0x660>
 800ea0e:	42b3      	cmp	r3, r6
 800ea10:	9a07      	ldr	r2, [sp, #28]
 800ea12:	bfa8      	it	ge
 800ea14:	4633      	movge	r3, r6
 800ea16:	ebaa 0a03 	sub.w	sl, sl, r3
 800ea1a:	1af6      	subs	r6, r6, r3
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	9307      	str	r3, [sp, #28]
 800ea20:	f1b8 0f00 	cmp.w	r8, #0
 800ea24:	d01d      	beq.n	800ea62 <_dtoa_r+0x6a2>
 800ea26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d06a      	beq.n	800eb02 <_dtoa_r+0x742>
 800ea2c:	b18d      	cbz	r5, 800ea52 <_dtoa_r+0x692>
 800ea2e:	4639      	mov	r1, r7
 800ea30:	462a      	mov	r2, r5
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 ff16 	bl	800f864 <__pow5mult>
 800ea38:	9a01      	ldr	r2, [sp, #4]
 800ea3a:	4601      	mov	r1, r0
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	4620      	mov	r0, r4
 800ea40:	f000 fe79 	bl	800f736 <__multiply>
 800ea44:	9901      	ldr	r1, [sp, #4]
 800ea46:	900c      	str	r0, [sp, #48]	; 0x30
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f000 fd8d 	bl	800f568 <_Bfree>
 800ea4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea50:	9301      	str	r3, [sp, #4]
 800ea52:	ebb8 0205 	subs.w	r2, r8, r5
 800ea56:	d004      	beq.n	800ea62 <_dtoa_r+0x6a2>
 800ea58:	9901      	ldr	r1, [sp, #4]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f000 ff02 	bl	800f864 <__pow5mult>
 800ea60:	9001      	str	r0, [sp, #4]
 800ea62:	2101      	movs	r1, #1
 800ea64:	4620      	mov	r0, r4
 800ea66:	f000 fe5d 	bl	800f724 <__i2b>
 800ea6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea6c:	4605      	mov	r5, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f000 81ca 	beq.w	800ee08 <_dtoa_r+0xa48>
 800ea74:	461a      	mov	r2, r3
 800ea76:	4601      	mov	r1, r0
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f000 fef3 	bl	800f864 <__pow5mult>
 800ea7e:	9b08      	ldr	r3, [sp, #32]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	4605      	mov	r5, r0
 800ea84:	dc44      	bgt.n	800eb10 <_dtoa_r+0x750>
 800ea86:	9b02      	ldr	r3, [sp, #8]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d13c      	bne.n	800eb06 <_dtoa_r+0x746>
 800ea8c:	9b03      	ldr	r3, [sp, #12]
 800ea8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d137      	bne.n	800eb06 <_dtoa_r+0x746>
 800ea96:	9b03      	ldr	r3, [sp, #12]
 800ea98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea9c:	0d1b      	lsrs	r3, r3, #20
 800ea9e:	051b      	lsls	r3, r3, #20
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d033      	beq.n	800eb0c <_dtoa_r+0x74c>
 800eaa4:	9b07      	ldr	r3, [sp, #28]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	f10a 0a01 	add.w	sl, sl, #1
 800eaac:	9307      	str	r3, [sp, #28]
 800eaae:	f04f 0801 	mov.w	r8, #1
 800eab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eab4:	bb73      	cbnz	r3, 800eb14 <_dtoa_r+0x754>
 800eab6:	2001      	movs	r0, #1
 800eab8:	e034      	b.n	800eb24 <_dtoa_r+0x764>
 800eaba:	bf00      	nop
 800eabc:	08010500 	.word	0x08010500
 800eac0:	080104d8 	.word	0x080104d8
 800eac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eaca:	e790      	b.n	800e9ee <_dtoa_r+0x62e>
 800eacc:	f109 35ff 	add.w	r5, r9, #4294967295
 800ead0:	45a8      	cmp	r8, r5
 800ead2:	bfbf      	itttt	lt
 800ead4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800ead6:	eba5 0808 	sublt.w	r8, r5, r8
 800eada:	4443      	addlt	r3, r8
 800eadc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800eade:	bfb6      	itet	lt
 800eae0:	46a8      	movlt	r8, r5
 800eae2:	eba8 0505 	subge.w	r5, r8, r5
 800eae6:	2500      	movlt	r5, #0
 800eae8:	f1b9 0f00 	cmp.w	r9, #0
 800eaec:	bfb9      	ittee	lt
 800eaee:	ebaa 0609 	sublt.w	r6, sl, r9
 800eaf2:	2300      	movlt	r3, #0
 800eaf4:	4656      	movge	r6, sl
 800eaf6:	464b      	movge	r3, r9
 800eaf8:	e77b      	b.n	800e9f2 <_dtoa_r+0x632>
 800eafa:	4645      	mov	r5, r8
 800eafc:	4656      	mov	r6, sl
 800eafe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eb00:	e780      	b.n	800ea04 <_dtoa_r+0x644>
 800eb02:	4642      	mov	r2, r8
 800eb04:	e7a8      	b.n	800ea58 <_dtoa_r+0x698>
 800eb06:	f04f 0800 	mov.w	r8, #0
 800eb0a:	e7d2      	b.n	800eab2 <_dtoa_r+0x6f2>
 800eb0c:	4698      	mov	r8, r3
 800eb0e:	e7d0      	b.n	800eab2 <_dtoa_r+0x6f2>
 800eb10:	f04f 0800 	mov.w	r8, #0
 800eb14:	692b      	ldr	r3, [r5, #16]
 800eb16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800eb1a:	6918      	ldr	r0, [r3, #16]
 800eb1c:	f000 fdb4 	bl	800f688 <__hi0bits>
 800eb20:	f1c0 0020 	rsb	r0, r0, #32
 800eb24:	9b07      	ldr	r3, [sp, #28]
 800eb26:	4418      	add	r0, r3
 800eb28:	f010 001f 	ands.w	r0, r0, #31
 800eb2c:	d047      	beq.n	800ebbe <_dtoa_r+0x7fe>
 800eb2e:	f1c0 0320 	rsb	r3, r0, #32
 800eb32:	2b04      	cmp	r3, #4
 800eb34:	dd3b      	ble.n	800ebae <_dtoa_r+0x7ee>
 800eb36:	9b07      	ldr	r3, [sp, #28]
 800eb38:	f1c0 001c 	rsb	r0, r0, #28
 800eb3c:	4482      	add	sl, r0
 800eb3e:	4406      	add	r6, r0
 800eb40:	4403      	add	r3, r0
 800eb42:	9307      	str	r3, [sp, #28]
 800eb44:	f1ba 0f00 	cmp.w	sl, #0
 800eb48:	dd05      	ble.n	800eb56 <_dtoa_r+0x796>
 800eb4a:	4652      	mov	r2, sl
 800eb4c:	9901      	ldr	r1, [sp, #4]
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f000 fed6 	bl	800f900 <__lshift>
 800eb54:	9001      	str	r0, [sp, #4]
 800eb56:	9b07      	ldr	r3, [sp, #28]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	dd05      	ble.n	800eb68 <_dtoa_r+0x7a8>
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	461a      	mov	r2, r3
 800eb60:	4620      	mov	r0, r4
 800eb62:	f000 fecd 	bl	800f900 <__lshift>
 800eb66:	4605      	mov	r5, r0
 800eb68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb6a:	b353      	cbz	r3, 800ebc2 <_dtoa_r+0x802>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	9801      	ldr	r0, [sp, #4]
 800eb70:	f000 ff1a 	bl	800f9a8 <__mcmp>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	da24      	bge.n	800ebc2 <_dtoa_r+0x802>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	220a      	movs	r2, #10
 800eb7c:	9901      	ldr	r1, [sp, #4]
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f000 fd09 	bl	800f596 <__multadd>
 800eb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb86:	9001      	str	r0, [sp, #4]
 800eb88:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f000 8142 	beq.w	800ee16 <_dtoa_r+0xa56>
 800eb92:	2300      	movs	r3, #0
 800eb94:	4639      	mov	r1, r7
 800eb96:	220a      	movs	r2, #10
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f000 fcfc 	bl	800f596 <__multadd>
 800eb9e:	9b06      	ldr	r3, [sp, #24]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	4607      	mov	r7, r0
 800eba4:	dc4b      	bgt.n	800ec3e <_dtoa_r+0x87e>
 800eba6:	9b08      	ldr	r3, [sp, #32]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	dd48      	ble.n	800ec3e <_dtoa_r+0x87e>
 800ebac:	e011      	b.n	800ebd2 <_dtoa_r+0x812>
 800ebae:	d0c9      	beq.n	800eb44 <_dtoa_r+0x784>
 800ebb0:	9a07      	ldr	r2, [sp, #28]
 800ebb2:	331c      	adds	r3, #28
 800ebb4:	441a      	add	r2, r3
 800ebb6:	449a      	add	sl, r3
 800ebb8:	441e      	add	r6, r3
 800ebba:	4613      	mov	r3, r2
 800ebbc:	e7c1      	b.n	800eb42 <_dtoa_r+0x782>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	e7f6      	b.n	800ebb0 <_dtoa_r+0x7f0>
 800ebc2:	f1b9 0f00 	cmp.w	r9, #0
 800ebc6:	dc34      	bgt.n	800ec32 <_dtoa_r+0x872>
 800ebc8:	9b08      	ldr	r3, [sp, #32]
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	dd31      	ble.n	800ec32 <_dtoa_r+0x872>
 800ebce:	f8cd 9018 	str.w	r9, [sp, #24]
 800ebd2:	9b06      	ldr	r3, [sp, #24]
 800ebd4:	b963      	cbnz	r3, 800ebf0 <_dtoa_r+0x830>
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	2205      	movs	r2, #5
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 fcdb 	bl	800f596 <__multadd>
 800ebe0:	4601      	mov	r1, r0
 800ebe2:	4605      	mov	r5, r0
 800ebe4:	9801      	ldr	r0, [sp, #4]
 800ebe6:	f000 fedf 	bl	800f9a8 <__mcmp>
 800ebea:	2800      	cmp	r0, #0
 800ebec:	f73f adfc 	bgt.w	800e7e8 <_dtoa_r+0x428>
 800ebf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebf2:	9e04      	ldr	r6, [sp, #16]
 800ebf4:	ea6f 0b03 	mvn.w	fp, r3
 800ebf8:	f04f 0900 	mov.w	r9, #0
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f000 fcb2 	bl	800f568 <_Bfree>
 800ec04:	2f00      	cmp	r7, #0
 800ec06:	f43f aebb 	beq.w	800e980 <_dtoa_r+0x5c0>
 800ec0a:	f1b9 0f00 	cmp.w	r9, #0
 800ec0e:	d005      	beq.n	800ec1c <_dtoa_r+0x85c>
 800ec10:	45b9      	cmp	r9, r7
 800ec12:	d003      	beq.n	800ec1c <_dtoa_r+0x85c>
 800ec14:	4649      	mov	r1, r9
 800ec16:	4620      	mov	r0, r4
 800ec18:	f000 fca6 	bl	800f568 <_Bfree>
 800ec1c:	4639      	mov	r1, r7
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 fca2 	bl	800f568 <_Bfree>
 800ec24:	e6ac      	b.n	800e980 <_dtoa_r+0x5c0>
 800ec26:	2500      	movs	r5, #0
 800ec28:	462f      	mov	r7, r5
 800ec2a:	e7e1      	b.n	800ebf0 <_dtoa_r+0x830>
 800ec2c:	469b      	mov	fp, r3
 800ec2e:	462f      	mov	r7, r5
 800ec30:	e5da      	b.n	800e7e8 <_dtoa_r+0x428>
 800ec32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec34:	f8cd 9018 	str.w	r9, [sp, #24]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f000 80f3 	beq.w	800ee24 <_dtoa_r+0xa64>
 800ec3e:	2e00      	cmp	r6, #0
 800ec40:	dd05      	ble.n	800ec4e <_dtoa_r+0x88e>
 800ec42:	4639      	mov	r1, r7
 800ec44:	4632      	mov	r2, r6
 800ec46:	4620      	mov	r0, r4
 800ec48:	f000 fe5a 	bl	800f900 <__lshift>
 800ec4c:	4607      	mov	r7, r0
 800ec4e:	f1b8 0f00 	cmp.w	r8, #0
 800ec52:	d04c      	beq.n	800ecee <_dtoa_r+0x92e>
 800ec54:	6879      	ldr	r1, [r7, #4]
 800ec56:	4620      	mov	r0, r4
 800ec58:	f000 fc52 	bl	800f500 <_Balloc>
 800ec5c:	693a      	ldr	r2, [r7, #16]
 800ec5e:	3202      	adds	r2, #2
 800ec60:	4606      	mov	r6, r0
 800ec62:	0092      	lsls	r2, r2, #2
 800ec64:	f107 010c 	add.w	r1, r7, #12
 800ec68:	300c      	adds	r0, #12
 800ec6a:	f7fd fe51 	bl	800c910 <memcpy>
 800ec6e:	2201      	movs	r2, #1
 800ec70:	4631      	mov	r1, r6
 800ec72:	4620      	mov	r0, r4
 800ec74:	f000 fe44 	bl	800f900 <__lshift>
 800ec78:	9b02      	ldr	r3, [sp, #8]
 800ec7a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ec7e:	f003 0301 	and.w	r3, r3, #1
 800ec82:	46b9      	mov	r9, r7
 800ec84:	9307      	str	r3, [sp, #28]
 800ec86:	4607      	mov	r7, r0
 800ec88:	4629      	mov	r1, r5
 800ec8a:	9801      	ldr	r0, [sp, #4]
 800ec8c:	f7ff fb0a 	bl	800e2a4 <quorem>
 800ec90:	4649      	mov	r1, r9
 800ec92:	4606      	mov	r6, r0
 800ec94:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ec98:	9801      	ldr	r0, [sp, #4]
 800ec9a:	f000 fe85 	bl	800f9a8 <__mcmp>
 800ec9e:	463a      	mov	r2, r7
 800eca0:	9002      	str	r0, [sp, #8]
 800eca2:	4629      	mov	r1, r5
 800eca4:	4620      	mov	r0, r4
 800eca6:	f000 fe99 	bl	800f9dc <__mdiff>
 800ecaa:	68c3      	ldr	r3, [r0, #12]
 800ecac:	4602      	mov	r2, r0
 800ecae:	bb03      	cbnz	r3, 800ecf2 <_dtoa_r+0x932>
 800ecb0:	4601      	mov	r1, r0
 800ecb2:	9009      	str	r0, [sp, #36]	; 0x24
 800ecb4:	9801      	ldr	r0, [sp, #4]
 800ecb6:	f000 fe77 	bl	800f9a8 <__mcmp>
 800ecba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	9309      	str	r3, [sp, #36]	; 0x24
 800ecc4:	f000 fc50 	bl	800f568 <_Bfree>
 800ecc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecca:	b9a3      	cbnz	r3, 800ecf6 <_dtoa_r+0x936>
 800eccc:	9a08      	ldr	r2, [sp, #32]
 800ecce:	b992      	cbnz	r2, 800ecf6 <_dtoa_r+0x936>
 800ecd0:	9a07      	ldr	r2, [sp, #28]
 800ecd2:	b982      	cbnz	r2, 800ecf6 <_dtoa_r+0x936>
 800ecd4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ecd8:	d029      	beq.n	800ed2e <_dtoa_r+0x96e>
 800ecda:	9b02      	ldr	r3, [sp, #8]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	dd01      	ble.n	800ece4 <_dtoa_r+0x924>
 800ece0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800ece4:	f10a 0601 	add.w	r6, sl, #1
 800ece8:	f88a 8000 	strb.w	r8, [sl]
 800ecec:	e786      	b.n	800ebfc <_dtoa_r+0x83c>
 800ecee:	4638      	mov	r0, r7
 800ecf0:	e7c2      	b.n	800ec78 <_dtoa_r+0x8b8>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e7e3      	b.n	800ecbe <_dtoa_r+0x8fe>
 800ecf6:	9a02      	ldr	r2, [sp, #8]
 800ecf8:	2a00      	cmp	r2, #0
 800ecfa:	db04      	blt.n	800ed06 <_dtoa_r+0x946>
 800ecfc:	d124      	bne.n	800ed48 <_dtoa_r+0x988>
 800ecfe:	9a08      	ldr	r2, [sp, #32]
 800ed00:	bb12      	cbnz	r2, 800ed48 <_dtoa_r+0x988>
 800ed02:	9a07      	ldr	r2, [sp, #28]
 800ed04:	bb02      	cbnz	r2, 800ed48 <_dtoa_r+0x988>
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	ddec      	ble.n	800ece4 <_dtoa_r+0x924>
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	9901      	ldr	r1, [sp, #4]
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f000 fdf6 	bl	800f900 <__lshift>
 800ed14:	4629      	mov	r1, r5
 800ed16:	9001      	str	r0, [sp, #4]
 800ed18:	f000 fe46 	bl	800f9a8 <__mcmp>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	dc03      	bgt.n	800ed28 <_dtoa_r+0x968>
 800ed20:	d1e0      	bne.n	800ece4 <_dtoa_r+0x924>
 800ed22:	f018 0f01 	tst.w	r8, #1
 800ed26:	d0dd      	beq.n	800ece4 <_dtoa_r+0x924>
 800ed28:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed2c:	d1d8      	bne.n	800ece0 <_dtoa_r+0x920>
 800ed2e:	2339      	movs	r3, #57	; 0x39
 800ed30:	f10a 0601 	add.w	r6, sl, #1
 800ed34:	f88a 3000 	strb.w	r3, [sl]
 800ed38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ed3c:	2b39      	cmp	r3, #57	; 0x39
 800ed3e:	f106 32ff 	add.w	r2, r6, #4294967295
 800ed42:	d04c      	beq.n	800edde <_dtoa_r+0xa1e>
 800ed44:	3301      	adds	r3, #1
 800ed46:	e051      	b.n	800edec <_dtoa_r+0xa2c>
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f10a 0601 	add.w	r6, sl, #1
 800ed4e:	dd05      	ble.n	800ed5c <_dtoa_r+0x99c>
 800ed50:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed54:	d0eb      	beq.n	800ed2e <_dtoa_r+0x96e>
 800ed56:	f108 0801 	add.w	r8, r8, #1
 800ed5a:	e7c5      	b.n	800ece8 <_dtoa_r+0x928>
 800ed5c:	9b04      	ldr	r3, [sp, #16]
 800ed5e:	9a06      	ldr	r2, [sp, #24]
 800ed60:	f806 8c01 	strb.w	r8, [r6, #-1]
 800ed64:	1af3      	subs	r3, r6, r3
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d021      	beq.n	800edae <_dtoa_r+0x9ee>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	220a      	movs	r2, #10
 800ed6e:	9901      	ldr	r1, [sp, #4]
 800ed70:	4620      	mov	r0, r4
 800ed72:	f000 fc10 	bl	800f596 <__multadd>
 800ed76:	45b9      	cmp	r9, r7
 800ed78:	9001      	str	r0, [sp, #4]
 800ed7a:	f04f 0300 	mov.w	r3, #0
 800ed7e:	f04f 020a 	mov.w	r2, #10
 800ed82:	4649      	mov	r1, r9
 800ed84:	4620      	mov	r0, r4
 800ed86:	d105      	bne.n	800ed94 <_dtoa_r+0x9d4>
 800ed88:	f000 fc05 	bl	800f596 <__multadd>
 800ed8c:	4681      	mov	r9, r0
 800ed8e:	4607      	mov	r7, r0
 800ed90:	46b2      	mov	sl, r6
 800ed92:	e779      	b.n	800ec88 <_dtoa_r+0x8c8>
 800ed94:	f000 fbff 	bl	800f596 <__multadd>
 800ed98:	4639      	mov	r1, r7
 800ed9a:	4681      	mov	r9, r0
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	220a      	movs	r2, #10
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 fbf8 	bl	800f596 <__multadd>
 800eda6:	4607      	mov	r7, r0
 800eda8:	e7f2      	b.n	800ed90 <_dtoa_r+0x9d0>
 800edaa:	f04f 0900 	mov.w	r9, #0
 800edae:	2201      	movs	r2, #1
 800edb0:	9901      	ldr	r1, [sp, #4]
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 fda4 	bl	800f900 <__lshift>
 800edb8:	4629      	mov	r1, r5
 800edba:	9001      	str	r0, [sp, #4]
 800edbc:	f000 fdf4 	bl	800f9a8 <__mcmp>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	dcb9      	bgt.n	800ed38 <_dtoa_r+0x978>
 800edc4:	d102      	bne.n	800edcc <_dtoa_r+0xa0c>
 800edc6:	f018 0f01 	tst.w	r8, #1
 800edca:	d1b5      	bne.n	800ed38 <_dtoa_r+0x978>
 800edcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800edd0:	2b30      	cmp	r3, #48	; 0x30
 800edd2:	f106 32ff 	add.w	r2, r6, #4294967295
 800edd6:	f47f af11 	bne.w	800ebfc <_dtoa_r+0x83c>
 800edda:	4616      	mov	r6, r2
 800eddc:	e7f6      	b.n	800edcc <_dtoa_r+0xa0c>
 800edde:	9b04      	ldr	r3, [sp, #16]
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d105      	bne.n	800edf0 <_dtoa_r+0xa30>
 800ede4:	9a04      	ldr	r2, [sp, #16]
 800ede6:	f10b 0b01 	add.w	fp, fp, #1
 800edea:	2331      	movs	r3, #49	; 0x31
 800edec:	7013      	strb	r3, [r2, #0]
 800edee:	e705      	b.n	800ebfc <_dtoa_r+0x83c>
 800edf0:	4616      	mov	r6, r2
 800edf2:	e7a1      	b.n	800ed38 <_dtoa_r+0x978>
 800edf4:	4b16      	ldr	r3, [pc, #88]	; (800ee50 <_dtoa_r+0xa90>)
 800edf6:	f7ff bb48 	b.w	800e48a <_dtoa_r+0xca>
 800edfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f47f ab23 	bne.w	800e448 <_dtoa_r+0x88>
 800ee02:	4b14      	ldr	r3, [pc, #80]	; (800ee54 <_dtoa_r+0xa94>)
 800ee04:	f7ff bb41 	b.w	800e48a <_dtoa_r+0xca>
 800ee08:	9b08      	ldr	r3, [sp, #32]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	f77f ae3b 	ble.w	800ea86 <_dtoa_r+0x6c6>
 800ee10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ee14:	e64f      	b.n	800eab6 <_dtoa_r+0x6f6>
 800ee16:	9b06      	ldr	r3, [sp, #24]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	dc03      	bgt.n	800ee24 <_dtoa_r+0xa64>
 800ee1c:	9b08      	ldr	r3, [sp, #32]
 800ee1e:	2b02      	cmp	r3, #2
 800ee20:	f73f aed7 	bgt.w	800ebd2 <_dtoa_r+0x812>
 800ee24:	9e04      	ldr	r6, [sp, #16]
 800ee26:	9801      	ldr	r0, [sp, #4]
 800ee28:	4629      	mov	r1, r5
 800ee2a:	f7ff fa3b 	bl	800e2a4 <quorem>
 800ee2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ee32:	f806 8b01 	strb.w	r8, [r6], #1
 800ee36:	9b04      	ldr	r3, [sp, #16]
 800ee38:	9a06      	ldr	r2, [sp, #24]
 800ee3a:	1af3      	subs	r3, r6, r3
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	ddb4      	ble.n	800edaa <_dtoa_r+0x9ea>
 800ee40:	2300      	movs	r3, #0
 800ee42:	220a      	movs	r2, #10
 800ee44:	9901      	ldr	r1, [sp, #4]
 800ee46:	4620      	mov	r0, r4
 800ee48:	f000 fba5 	bl	800f596 <__multadd>
 800ee4c:	9001      	str	r0, [sp, #4]
 800ee4e:	e7ea      	b.n	800ee26 <_dtoa_r+0xa66>
 800ee50:	08010444 	.word	0x08010444
 800ee54:	080104c0 	.word	0x080104c0

0800ee58 <rshift>:
 800ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee5a:	6906      	ldr	r6, [r0, #16]
 800ee5c:	114b      	asrs	r3, r1, #5
 800ee5e:	429e      	cmp	r6, r3
 800ee60:	f100 0414 	add.w	r4, r0, #20
 800ee64:	dd30      	ble.n	800eec8 <rshift+0x70>
 800ee66:	f011 011f 	ands.w	r1, r1, #31
 800ee6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ee6e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ee72:	d108      	bne.n	800ee86 <rshift+0x2e>
 800ee74:	4621      	mov	r1, r4
 800ee76:	42b2      	cmp	r2, r6
 800ee78:	460b      	mov	r3, r1
 800ee7a:	d211      	bcs.n	800eea0 <rshift+0x48>
 800ee7c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ee80:	f841 3b04 	str.w	r3, [r1], #4
 800ee84:	e7f7      	b.n	800ee76 <rshift+0x1e>
 800ee86:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ee8a:	f1c1 0c20 	rsb	ip, r1, #32
 800ee8e:	40cd      	lsrs	r5, r1
 800ee90:	3204      	adds	r2, #4
 800ee92:	4623      	mov	r3, r4
 800ee94:	42b2      	cmp	r2, r6
 800ee96:	4617      	mov	r7, r2
 800ee98:	d30c      	bcc.n	800eeb4 <rshift+0x5c>
 800ee9a:	601d      	str	r5, [r3, #0]
 800ee9c:	b105      	cbz	r5, 800eea0 <rshift+0x48>
 800ee9e:	3304      	adds	r3, #4
 800eea0:	1b1a      	subs	r2, r3, r4
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eea8:	bf08      	it	eq
 800eeaa:	2300      	moveq	r3, #0
 800eeac:	6102      	str	r2, [r0, #16]
 800eeae:	bf08      	it	eq
 800eeb0:	6143      	streq	r3, [r0, #20]
 800eeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb4:	683f      	ldr	r7, [r7, #0]
 800eeb6:	fa07 f70c 	lsl.w	r7, r7, ip
 800eeba:	433d      	orrs	r5, r7
 800eebc:	f843 5b04 	str.w	r5, [r3], #4
 800eec0:	f852 5b04 	ldr.w	r5, [r2], #4
 800eec4:	40cd      	lsrs	r5, r1
 800eec6:	e7e5      	b.n	800ee94 <rshift+0x3c>
 800eec8:	4623      	mov	r3, r4
 800eeca:	e7e9      	b.n	800eea0 <rshift+0x48>

0800eecc <__hexdig_fun>:
 800eecc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eed0:	2b09      	cmp	r3, #9
 800eed2:	d802      	bhi.n	800eeda <__hexdig_fun+0xe>
 800eed4:	3820      	subs	r0, #32
 800eed6:	b2c0      	uxtb	r0, r0
 800eed8:	4770      	bx	lr
 800eeda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eede:	2b05      	cmp	r3, #5
 800eee0:	d801      	bhi.n	800eee6 <__hexdig_fun+0x1a>
 800eee2:	3847      	subs	r0, #71	; 0x47
 800eee4:	e7f7      	b.n	800eed6 <__hexdig_fun+0xa>
 800eee6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eeea:	2b05      	cmp	r3, #5
 800eeec:	d801      	bhi.n	800eef2 <__hexdig_fun+0x26>
 800eeee:	3827      	subs	r0, #39	; 0x27
 800eef0:	e7f1      	b.n	800eed6 <__hexdig_fun+0xa>
 800eef2:	2000      	movs	r0, #0
 800eef4:	4770      	bx	lr

0800eef6 <__gethex>:
 800eef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefa:	b08b      	sub	sp, #44	; 0x2c
 800eefc:	468a      	mov	sl, r1
 800eefe:	9002      	str	r0, [sp, #8]
 800ef00:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ef02:	9306      	str	r3, [sp, #24]
 800ef04:	4690      	mov	r8, r2
 800ef06:	f000 fad0 	bl	800f4aa <__localeconv_l>
 800ef0a:	6803      	ldr	r3, [r0, #0]
 800ef0c:	9303      	str	r3, [sp, #12]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7f1 f996 	bl	8000240 <strlen>
 800ef14:	9b03      	ldr	r3, [sp, #12]
 800ef16:	9001      	str	r0, [sp, #4]
 800ef18:	4403      	add	r3, r0
 800ef1a:	f04f 0b00 	mov.w	fp, #0
 800ef1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ef22:	9307      	str	r3, [sp, #28]
 800ef24:	f8da 3000 	ldr.w	r3, [sl]
 800ef28:	3302      	adds	r3, #2
 800ef2a:	461f      	mov	r7, r3
 800ef2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef30:	2830      	cmp	r0, #48	; 0x30
 800ef32:	d06c      	beq.n	800f00e <__gethex+0x118>
 800ef34:	f7ff ffca 	bl	800eecc <__hexdig_fun>
 800ef38:	4604      	mov	r4, r0
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	d16a      	bne.n	800f014 <__gethex+0x11e>
 800ef3e:	9a01      	ldr	r2, [sp, #4]
 800ef40:	9903      	ldr	r1, [sp, #12]
 800ef42:	4638      	mov	r0, r7
 800ef44:	f001 f8f4 	bl	8010130 <strncmp>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d166      	bne.n	800f01a <__gethex+0x124>
 800ef4c:	9b01      	ldr	r3, [sp, #4]
 800ef4e:	5cf8      	ldrb	r0, [r7, r3]
 800ef50:	18fe      	adds	r6, r7, r3
 800ef52:	f7ff ffbb 	bl	800eecc <__hexdig_fun>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d062      	beq.n	800f020 <__gethex+0x12a>
 800ef5a:	4633      	mov	r3, r6
 800ef5c:	7818      	ldrb	r0, [r3, #0]
 800ef5e:	2830      	cmp	r0, #48	; 0x30
 800ef60:	461f      	mov	r7, r3
 800ef62:	f103 0301 	add.w	r3, r3, #1
 800ef66:	d0f9      	beq.n	800ef5c <__gethex+0x66>
 800ef68:	f7ff ffb0 	bl	800eecc <__hexdig_fun>
 800ef6c:	fab0 f580 	clz	r5, r0
 800ef70:	096d      	lsrs	r5, r5, #5
 800ef72:	4634      	mov	r4, r6
 800ef74:	f04f 0b01 	mov.w	fp, #1
 800ef78:	463a      	mov	r2, r7
 800ef7a:	4616      	mov	r6, r2
 800ef7c:	3201      	adds	r2, #1
 800ef7e:	7830      	ldrb	r0, [r6, #0]
 800ef80:	f7ff ffa4 	bl	800eecc <__hexdig_fun>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d1f8      	bne.n	800ef7a <__gethex+0x84>
 800ef88:	9a01      	ldr	r2, [sp, #4]
 800ef8a:	9903      	ldr	r1, [sp, #12]
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f001 f8cf 	bl	8010130 <strncmp>
 800ef92:	b950      	cbnz	r0, 800efaa <__gethex+0xb4>
 800ef94:	b954      	cbnz	r4, 800efac <__gethex+0xb6>
 800ef96:	9b01      	ldr	r3, [sp, #4]
 800ef98:	18f4      	adds	r4, r6, r3
 800ef9a:	4622      	mov	r2, r4
 800ef9c:	4616      	mov	r6, r2
 800ef9e:	3201      	adds	r2, #1
 800efa0:	7830      	ldrb	r0, [r6, #0]
 800efa2:	f7ff ff93 	bl	800eecc <__hexdig_fun>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d1f8      	bne.n	800ef9c <__gethex+0xa6>
 800efaa:	b10c      	cbz	r4, 800efb0 <__gethex+0xba>
 800efac:	1ba4      	subs	r4, r4, r6
 800efae:	00a4      	lsls	r4, r4, #2
 800efb0:	7833      	ldrb	r3, [r6, #0]
 800efb2:	2b50      	cmp	r3, #80	; 0x50
 800efb4:	d001      	beq.n	800efba <__gethex+0xc4>
 800efb6:	2b70      	cmp	r3, #112	; 0x70
 800efb8:	d140      	bne.n	800f03c <__gethex+0x146>
 800efba:	7873      	ldrb	r3, [r6, #1]
 800efbc:	2b2b      	cmp	r3, #43	; 0x2b
 800efbe:	d031      	beq.n	800f024 <__gethex+0x12e>
 800efc0:	2b2d      	cmp	r3, #45	; 0x2d
 800efc2:	d033      	beq.n	800f02c <__gethex+0x136>
 800efc4:	1c71      	adds	r1, r6, #1
 800efc6:	f04f 0900 	mov.w	r9, #0
 800efca:	7808      	ldrb	r0, [r1, #0]
 800efcc:	f7ff ff7e 	bl	800eecc <__hexdig_fun>
 800efd0:	1e43      	subs	r3, r0, #1
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	2b18      	cmp	r3, #24
 800efd6:	d831      	bhi.n	800f03c <__gethex+0x146>
 800efd8:	f1a0 0210 	sub.w	r2, r0, #16
 800efdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800efe0:	f7ff ff74 	bl	800eecc <__hexdig_fun>
 800efe4:	1e43      	subs	r3, r0, #1
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	2b18      	cmp	r3, #24
 800efea:	d922      	bls.n	800f032 <__gethex+0x13c>
 800efec:	f1b9 0f00 	cmp.w	r9, #0
 800eff0:	d000      	beq.n	800eff4 <__gethex+0xfe>
 800eff2:	4252      	negs	r2, r2
 800eff4:	4414      	add	r4, r2
 800eff6:	f8ca 1000 	str.w	r1, [sl]
 800effa:	b30d      	cbz	r5, 800f040 <__gethex+0x14a>
 800effc:	f1bb 0f00 	cmp.w	fp, #0
 800f000:	bf0c      	ite	eq
 800f002:	2706      	moveq	r7, #6
 800f004:	2700      	movne	r7, #0
 800f006:	4638      	mov	r0, r7
 800f008:	b00b      	add	sp, #44	; 0x2c
 800f00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00e:	f10b 0b01 	add.w	fp, fp, #1
 800f012:	e78a      	b.n	800ef2a <__gethex+0x34>
 800f014:	2500      	movs	r5, #0
 800f016:	462c      	mov	r4, r5
 800f018:	e7ae      	b.n	800ef78 <__gethex+0x82>
 800f01a:	463e      	mov	r6, r7
 800f01c:	2501      	movs	r5, #1
 800f01e:	e7c7      	b.n	800efb0 <__gethex+0xba>
 800f020:	4604      	mov	r4, r0
 800f022:	e7fb      	b.n	800f01c <__gethex+0x126>
 800f024:	f04f 0900 	mov.w	r9, #0
 800f028:	1cb1      	adds	r1, r6, #2
 800f02a:	e7ce      	b.n	800efca <__gethex+0xd4>
 800f02c:	f04f 0901 	mov.w	r9, #1
 800f030:	e7fa      	b.n	800f028 <__gethex+0x132>
 800f032:	230a      	movs	r3, #10
 800f034:	fb03 0202 	mla	r2, r3, r2, r0
 800f038:	3a10      	subs	r2, #16
 800f03a:	e7cf      	b.n	800efdc <__gethex+0xe6>
 800f03c:	4631      	mov	r1, r6
 800f03e:	e7da      	b.n	800eff6 <__gethex+0x100>
 800f040:	1bf3      	subs	r3, r6, r7
 800f042:	3b01      	subs	r3, #1
 800f044:	4629      	mov	r1, r5
 800f046:	2b07      	cmp	r3, #7
 800f048:	dc49      	bgt.n	800f0de <__gethex+0x1e8>
 800f04a:	9802      	ldr	r0, [sp, #8]
 800f04c:	f000 fa58 	bl	800f500 <_Balloc>
 800f050:	9b01      	ldr	r3, [sp, #4]
 800f052:	f100 0914 	add.w	r9, r0, #20
 800f056:	f04f 0b00 	mov.w	fp, #0
 800f05a:	f1c3 0301 	rsb	r3, r3, #1
 800f05e:	4605      	mov	r5, r0
 800f060:	f8cd 9010 	str.w	r9, [sp, #16]
 800f064:	46da      	mov	sl, fp
 800f066:	9308      	str	r3, [sp, #32]
 800f068:	42b7      	cmp	r7, r6
 800f06a:	d33b      	bcc.n	800f0e4 <__gethex+0x1ee>
 800f06c:	9804      	ldr	r0, [sp, #16]
 800f06e:	f840 ab04 	str.w	sl, [r0], #4
 800f072:	eba0 0009 	sub.w	r0, r0, r9
 800f076:	1080      	asrs	r0, r0, #2
 800f078:	6128      	str	r0, [r5, #16]
 800f07a:	0147      	lsls	r7, r0, #5
 800f07c:	4650      	mov	r0, sl
 800f07e:	f000 fb03 	bl	800f688 <__hi0bits>
 800f082:	f8d8 6000 	ldr.w	r6, [r8]
 800f086:	1a3f      	subs	r7, r7, r0
 800f088:	42b7      	cmp	r7, r6
 800f08a:	dd64      	ble.n	800f156 <__gethex+0x260>
 800f08c:	1bbf      	subs	r7, r7, r6
 800f08e:	4639      	mov	r1, r7
 800f090:	4628      	mov	r0, r5
 800f092:	f000 fe14 	bl	800fcbe <__any_on>
 800f096:	4682      	mov	sl, r0
 800f098:	b178      	cbz	r0, 800f0ba <__gethex+0x1c4>
 800f09a:	1e7b      	subs	r3, r7, #1
 800f09c:	1159      	asrs	r1, r3, #5
 800f09e:	f003 021f 	and.w	r2, r3, #31
 800f0a2:	f04f 0a01 	mov.w	sl, #1
 800f0a6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f0aa:	fa0a f202 	lsl.w	r2, sl, r2
 800f0ae:	420a      	tst	r2, r1
 800f0b0:	d003      	beq.n	800f0ba <__gethex+0x1c4>
 800f0b2:	4553      	cmp	r3, sl
 800f0b4:	dc46      	bgt.n	800f144 <__gethex+0x24e>
 800f0b6:	f04f 0a02 	mov.w	sl, #2
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	4628      	mov	r0, r5
 800f0be:	f7ff fecb 	bl	800ee58 <rshift>
 800f0c2:	443c      	add	r4, r7
 800f0c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0c8:	42a3      	cmp	r3, r4
 800f0ca:	da52      	bge.n	800f172 <__gethex+0x27c>
 800f0cc:	4629      	mov	r1, r5
 800f0ce:	9802      	ldr	r0, [sp, #8]
 800f0d0:	f000 fa4a 	bl	800f568 <_Bfree>
 800f0d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	6013      	str	r3, [r2, #0]
 800f0da:	27a3      	movs	r7, #163	; 0xa3
 800f0dc:	e793      	b.n	800f006 <__gethex+0x110>
 800f0de:	3101      	adds	r1, #1
 800f0e0:	105b      	asrs	r3, r3, #1
 800f0e2:	e7b0      	b.n	800f046 <__gethex+0x150>
 800f0e4:	1e73      	subs	r3, r6, #1
 800f0e6:	9305      	str	r3, [sp, #20]
 800f0e8:	9a07      	ldr	r2, [sp, #28]
 800f0ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d018      	beq.n	800f124 <__gethex+0x22e>
 800f0f2:	f1bb 0f20 	cmp.w	fp, #32
 800f0f6:	d107      	bne.n	800f108 <__gethex+0x212>
 800f0f8:	9b04      	ldr	r3, [sp, #16]
 800f0fa:	f8c3 a000 	str.w	sl, [r3]
 800f0fe:	3304      	adds	r3, #4
 800f100:	f04f 0a00 	mov.w	sl, #0
 800f104:	9304      	str	r3, [sp, #16]
 800f106:	46d3      	mov	fp, sl
 800f108:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f10c:	f7ff fede 	bl	800eecc <__hexdig_fun>
 800f110:	f000 000f 	and.w	r0, r0, #15
 800f114:	fa00 f00b 	lsl.w	r0, r0, fp
 800f118:	ea4a 0a00 	orr.w	sl, sl, r0
 800f11c:	f10b 0b04 	add.w	fp, fp, #4
 800f120:	9b05      	ldr	r3, [sp, #20]
 800f122:	e00d      	b.n	800f140 <__gethex+0x24a>
 800f124:	9b05      	ldr	r3, [sp, #20]
 800f126:	9a08      	ldr	r2, [sp, #32]
 800f128:	4413      	add	r3, r2
 800f12a:	42bb      	cmp	r3, r7
 800f12c:	d3e1      	bcc.n	800f0f2 <__gethex+0x1fc>
 800f12e:	4618      	mov	r0, r3
 800f130:	9a01      	ldr	r2, [sp, #4]
 800f132:	9903      	ldr	r1, [sp, #12]
 800f134:	9309      	str	r3, [sp, #36]	; 0x24
 800f136:	f000 fffb 	bl	8010130 <strncmp>
 800f13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d1d8      	bne.n	800f0f2 <__gethex+0x1fc>
 800f140:	461e      	mov	r6, r3
 800f142:	e791      	b.n	800f068 <__gethex+0x172>
 800f144:	1eb9      	subs	r1, r7, #2
 800f146:	4628      	mov	r0, r5
 800f148:	f000 fdb9 	bl	800fcbe <__any_on>
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d0b2      	beq.n	800f0b6 <__gethex+0x1c0>
 800f150:	f04f 0a03 	mov.w	sl, #3
 800f154:	e7b1      	b.n	800f0ba <__gethex+0x1c4>
 800f156:	da09      	bge.n	800f16c <__gethex+0x276>
 800f158:	1bf7      	subs	r7, r6, r7
 800f15a:	4629      	mov	r1, r5
 800f15c:	463a      	mov	r2, r7
 800f15e:	9802      	ldr	r0, [sp, #8]
 800f160:	f000 fbce 	bl	800f900 <__lshift>
 800f164:	1be4      	subs	r4, r4, r7
 800f166:	4605      	mov	r5, r0
 800f168:	f100 0914 	add.w	r9, r0, #20
 800f16c:	f04f 0a00 	mov.w	sl, #0
 800f170:	e7a8      	b.n	800f0c4 <__gethex+0x1ce>
 800f172:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f176:	42a0      	cmp	r0, r4
 800f178:	dd6a      	ble.n	800f250 <__gethex+0x35a>
 800f17a:	1b04      	subs	r4, r0, r4
 800f17c:	42a6      	cmp	r6, r4
 800f17e:	dc2e      	bgt.n	800f1de <__gethex+0x2e8>
 800f180:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f184:	2b02      	cmp	r3, #2
 800f186:	d022      	beq.n	800f1ce <__gethex+0x2d8>
 800f188:	2b03      	cmp	r3, #3
 800f18a:	d024      	beq.n	800f1d6 <__gethex+0x2e0>
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d115      	bne.n	800f1bc <__gethex+0x2c6>
 800f190:	42a6      	cmp	r6, r4
 800f192:	d113      	bne.n	800f1bc <__gethex+0x2c6>
 800f194:	2e01      	cmp	r6, #1
 800f196:	dc0b      	bgt.n	800f1b0 <__gethex+0x2ba>
 800f198:	9a06      	ldr	r2, [sp, #24]
 800f19a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f19e:	6013      	str	r3, [r2, #0]
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	612b      	str	r3, [r5, #16]
 800f1a4:	f8c9 3000 	str.w	r3, [r9]
 800f1a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1aa:	2762      	movs	r7, #98	; 0x62
 800f1ac:	601d      	str	r5, [r3, #0]
 800f1ae:	e72a      	b.n	800f006 <__gethex+0x110>
 800f1b0:	1e71      	subs	r1, r6, #1
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	f000 fd83 	bl	800fcbe <__any_on>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	d1ed      	bne.n	800f198 <__gethex+0x2a2>
 800f1bc:	4629      	mov	r1, r5
 800f1be:	9802      	ldr	r0, [sp, #8]
 800f1c0:	f000 f9d2 	bl	800f568 <_Bfree>
 800f1c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	6013      	str	r3, [r2, #0]
 800f1ca:	2750      	movs	r7, #80	; 0x50
 800f1cc:	e71b      	b.n	800f006 <__gethex+0x110>
 800f1ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d0e1      	beq.n	800f198 <__gethex+0x2a2>
 800f1d4:	e7f2      	b.n	800f1bc <__gethex+0x2c6>
 800f1d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1dd      	bne.n	800f198 <__gethex+0x2a2>
 800f1dc:	e7ee      	b.n	800f1bc <__gethex+0x2c6>
 800f1de:	1e67      	subs	r7, r4, #1
 800f1e0:	f1ba 0f00 	cmp.w	sl, #0
 800f1e4:	d131      	bne.n	800f24a <__gethex+0x354>
 800f1e6:	b127      	cbz	r7, 800f1f2 <__gethex+0x2fc>
 800f1e8:	4639      	mov	r1, r7
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	f000 fd67 	bl	800fcbe <__any_on>
 800f1f0:	4682      	mov	sl, r0
 800f1f2:	117a      	asrs	r2, r7, #5
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	f007 071f 	and.w	r7, r7, #31
 800f1fa:	fa03 f707 	lsl.w	r7, r3, r7
 800f1fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f202:	4621      	mov	r1, r4
 800f204:	421f      	tst	r7, r3
 800f206:	4628      	mov	r0, r5
 800f208:	bf18      	it	ne
 800f20a:	f04a 0a02 	orrne.w	sl, sl, #2
 800f20e:	1b36      	subs	r6, r6, r4
 800f210:	f7ff fe22 	bl	800ee58 <rshift>
 800f214:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f218:	2702      	movs	r7, #2
 800f21a:	f1ba 0f00 	cmp.w	sl, #0
 800f21e:	d048      	beq.n	800f2b2 <__gethex+0x3bc>
 800f220:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f224:	2b02      	cmp	r3, #2
 800f226:	d015      	beq.n	800f254 <__gethex+0x35e>
 800f228:	2b03      	cmp	r3, #3
 800f22a:	d017      	beq.n	800f25c <__gethex+0x366>
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d109      	bne.n	800f244 <__gethex+0x34e>
 800f230:	f01a 0f02 	tst.w	sl, #2
 800f234:	d006      	beq.n	800f244 <__gethex+0x34e>
 800f236:	f8d9 3000 	ldr.w	r3, [r9]
 800f23a:	ea4a 0a03 	orr.w	sl, sl, r3
 800f23e:	f01a 0f01 	tst.w	sl, #1
 800f242:	d10e      	bne.n	800f262 <__gethex+0x36c>
 800f244:	f047 0710 	orr.w	r7, r7, #16
 800f248:	e033      	b.n	800f2b2 <__gethex+0x3bc>
 800f24a:	f04f 0a01 	mov.w	sl, #1
 800f24e:	e7d0      	b.n	800f1f2 <__gethex+0x2fc>
 800f250:	2701      	movs	r7, #1
 800f252:	e7e2      	b.n	800f21a <__gethex+0x324>
 800f254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f256:	f1c3 0301 	rsb	r3, r3, #1
 800f25a:	9315      	str	r3, [sp, #84]	; 0x54
 800f25c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d0f0      	beq.n	800f244 <__gethex+0x34e>
 800f262:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f266:	f105 0314 	add.w	r3, r5, #20
 800f26a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f26e:	eb03 010a 	add.w	r1, r3, sl
 800f272:	f04f 0c00 	mov.w	ip, #0
 800f276:	4618      	mov	r0, r3
 800f278:	f853 2b04 	ldr.w	r2, [r3], #4
 800f27c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f280:	d01c      	beq.n	800f2bc <__gethex+0x3c6>
 800f282:	3201      	adds	r2, #1
 800f284:	6002      	str	r2, [r0, #0]
 800f286:	2f02      	cmp	r7, #2
 800f288:	f105 0314 	add.w	r3, r5, #20
 800f28c:	d138      	bne.n	800f300 <__gethex+0x40a>
 800f28e:	f8d8 2000 	ldr.w	r2, [r8]
 800f292:	3a01      	subs	r2, #1
 800f294:	42b2      	cmp	r2, r6
 800f296:	d10a      	bne.n	800f2ae <__gethex+0x3b8>
 800f298:	1171      	asrs	r1, r6, #5
 800f29a:	2201      	movs	r2, #1
 800f29c:	f006 061f 	and.w	r6, r6, #31
 800f2a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2a4:	fa02 f606 	lsl.w	r6, r2, r6
 800f2a8:	421e      	tst	r6, r3
 800f2aa:	bf18      	it	ne
 800f2ac:	4617      	movne	r7, r2
 800f2ae:	f047 0720 	orr.w	r7, r7, #32
 800f2b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2b4:	601d      	str	r5, [r3, #0]
 800f2b6:	9b06      	ldr	r3, [sp, #24]
 800f2b8:	601c      	str	r4, [r3, #0]
 800f2ba:	e6a4      	b.n	800f006 <__gethex+0x110>
 800f2bc:	4299      	cmp	r1, r3
 800f2be:	f843 cc04 	str.w	ip, [r3, #-4]
 800f2c2:	d8d8      	bhi.n	800f276 <__gethex+0x380>
 800f2c4:	68ab      	ldr	r3, [r5, #8]
 800f2c6:	4599      	cmp	r9, r3
 800f2c8:	db12      	blt.n	800f2f0 <__gethex+0x3fa>
 800f2ca:	6869      	ldr	r1, [r5, #4]
 800f2cc:	9802      	ldr	r0, [sp, #8]
 800f2ce:	3101      	adds	r1, #1
 800f2d0:	f000 f916 	bl	800f500 <_Balloc>
 800f2d4:	692a      	ldr	r2, [r5, #16]
 800f2d6:	3202      	adds	r2, #2
 800f2d8:	f105 010c 	add.w	r1, r5, #12
 800f2dc:	4683      	mov	fp, r0
 800f2de:	0092      	lsls	r2, r2, #2
 800f2e0:	300c      	adds	r0, #12
 800f2e2:	f7fd fb15 	bl	800c910 <memcpy>
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	9802      	ldr	r0, [sp, #8]
 800f2ea:	f000 f93d 	bl	800f568 <_Bfree>
 800f2ee:	465d      	mov	r5, fp
 800f2f0:	692b      	ldr	r3, [r5, #16]
 800f2f2:	1c5a      	adds	r2, r3, #1
 800f2f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f2f8:	612a      	str	r2, [r5, #16]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	615a      	str	r2, [r3, #20]
 800f2fe:	e7c2      	b.n	800f286 <__gethex+0x390>
 800f300:	692a      	ldr	r2, [r5, #16]
 800f302:	454a      	cmp	r2, r9
 800f304:	dd0b      	ble.n	800f31e <__gethex+0x428>
 800f306:	2101      	movs	r1, #1
 800f308:	4628      	mov	r0, r5
 800f30a:	f7ff fda5 	bl	800ee58 <rshift>
 800f30e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f312:	3401      	adds	r4, #1
 800f314:	42a3      	cmp	r3, r4
 800f316:	f6ff aed9 	blt.w	800f0cc <__gethex+0x1d6>
 800f31a:	2701      	movs	r7, #1
 800f31c:	e7c7      	b.n	800f2ae <__gethex+0x3b8>
 800f31e:	f016 061f 	ands.w	r6, r6, #31
 800f322:	d0fa      	beq.n	800f31a <__gethex+0x424>
 800f324:	449a      	add	sl, r3
 800f326:	f1c6 0620 	rsb	r6, r6, #32
 800f32a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f32e:	f000 f9ab 	bl	800f688 <__hi0bits>
 800f332:	42b0      	cmp	r0, r6
 800f334:	dbe7      	blt.n	800f306 <__gethex+0x410>
 800f336:	e7f0      	b.n	800f31a <__gethex+0x424>

0800f338 <L_shift>:
 800f338:	f1c2 0208 	rsb	r2, r2, #8
 800f33c:	0092      	lsls	r2, r2, #2
 800f33e:	b570      	push	{r4, r5, r6, lr}
 800f340:	f1c2 0620 	rsb	r6, r2, #32
 800f344:	6843      	ldr	r3, [r0, #4]
 800f346:	6804      	ldr	r4, [r0, #0]
 800f348:	fa03 f506 	lsl.w	r5, r3, r6
 800f34c:	432c      	orrs	r4, r5
 800f34e:	40d3      	lsrs	r3, r2
 800f350:	6004      	str	r4, [r0, #0]
 800f352:	f840 3f04 	str.w	r3, [r0, #4]!
 800f356:	4288      	cmp	r0, r1
 800f358:	d3f4      	bcc.n	800f344 <L_shift+0xc>
 800f35a:	bd70      	pop	{r4, r5, r6, pc}

0800f35c <__match>:
 800f35c:	b530      	push	{r4, r5, lr}
 800f35e:	6803      	ldr	r3, [r0, #0]
 800f360:	3301      	adds	r3, #1
 800f362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f366:	b914      	cbnz	r4, 800f36e <__match+0x12>
 800f368:	6003      	str	r3, [r0, #0]
 800f36a:	2001      	movs	r0, #1
 800f36c:	bd30      	pop	{r4, r5, pc}
 800f36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f372:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f376:	2d19      	cmp	r5, #25
 800f378:	bf98      	it	ls
 800f37a:	3220      	addls	r2, #32
 800f37c:	42a2      	cmp	r2, r4
 800f37e:	d0f0      	beq.n	800f362 <__match+0x6>
 800f380:	2000      	movs	r0, #0
 800f382:	e7f3      	b.n	800f36c <__match+0x10>

0800f384 <__hexnan>:
 800f384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f388:	680b      	ldr	r3, [r1, #0]
 800f38a:	6801      	ldr	r1, [r0, #0]
 800f38c:	115f      	asrs	r7, r3, #5
 800f38e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f392:	f013 031f 	ands.w	r3, r3, #31
 800f396:	b087      	sub	sp, #28
 800f398:	bf18      	it	ne
 800f39a:	3704      	addne	r7, #4
 800f39c:	2500      	movs	r5, #0
 800f39e:	1f3e      	subs	r6, r7, #4
 800f3a0:	4682      	mov	sl, r0
 800f3a2:	4690      	mov	r8, r2
 800f3a4:	9301      	str	r3, [sp, #4]
 800f3a6:	f847 5c04 	str.w	r5, [r7, #-4]
 800f3aa:	46b1      	mov	r9, r6
 800f3ac:	4634      	mov	r4, r6
 800f3ae:	9502      	str	r5, [sp, #8]
 800f3b0:	46ab      	mov	fp, r5
 800f3b2:	784a      	ldrb	r2, [r1, #1]
 800f3b4:	1c4b      	adds	r3, r1, #1
 800f3b6:	9303      	str	r3, [sp, #12]
 800f3b8:	b342      	cbz	r2, 800f40c <__hexnan+0x88>
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	9105      	str	r1, [sp, #20]
 800f3be:	9204      	str	r2, [sp, #16]
 800f3c0:	f7ff fd84 	bl	800eecc <__hexdig_fun>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d143      	bne.n	800f450 <__hexnan+0xcc>
 800f3c8:	9a04      	ldr	r2, [sp, #16]
 800f3ca:	9905      	ldr	r1, [sp, #20]
 800f3cc:	2a20      	cmp	r2, #32
 800f3ce:	d818      	bhi.n	800f402 <__hexnan+0x7e>
 800f3d0:	9b02      	ldr	r3, [sp, #8]
 800f3d2:	459b      	cmp	fp, r3
 800f3d4:	dd13      	ble.n	800f3fe <__hexnan+0x7a>
 800f3d6:	454c      	cmp	r4, r9
 800f3d8:	d206      	bcs.n	800f3e8 <__hexnan+0x64>
 800f3da:	2d07      	cmp	r5, #7
 800f3dc:	dc04      	bgt.n	800f3e8 <__hexnan+0x64>
 800f3de:	462a      	mov	r2, r5
 800f3e0:	4649      	mov	r1, r9
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f7ff ffa8 	bl	800f338 <L_shift>
 800f3e8:	4544      	cmp	r4, r8
 800f3ea:	d944      	bls.n	800f476 <__hexnan+0xf2>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	f1a4 0904 	sub.w	r9, r4, #4
 800f3f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3f6:	f8cd b008 	str.w	fp, [sp, #8]
 800f3fa:	464c      	mov	r4, r9
 800f3fc:	461d      	mov	r5, r3
 800f3fe:	9903      	ldr	r1, [sp, #12]
 800f400:	e7d7      	b.n	800f3b2 <__hexnan+0x2e>
 800f402:	2a29      	cmp	r2, #41	; 0x29
 800f404:	d14a      	bne.n	800f49c <__hexnan+0x118>
 800f406:	3102      	adds	r1, #2
 800f408:	f8ca 1000 	str.w	r1, [sl]
 800f40c:	f1bb 0f00 	cmp.w	fp, #0
 800f410:	d044      	beq.n	800f49c <__hexnan+0x118>
 800f412:	454c      	cmp	r4, r9
 800f414:	d206      	bcs.n	800f424 <__hexnan+0xa0>
 800f416:	2d07      	cmp	r5, #7
 800f418:	dc04      	bgt.n	800f424 <__hexnan+0xa0>
 800f41a:	462a      	mov	r2, r5
 800f41c:	4649      	mov	r1, r9
 800f41e:	4620      	mov	r0, r4
 800f420:	f7ff ff8a 	bl	800f338 <L_shift>
 800f424:	4544      	cmp	r4, r8
 800f426:	d928      	bls.n	800f47a <__hexnan+0xf6>
 800f428:	4643      	mov	r3, r8
 800f42a:	f854 2b04 	ldr.w	r2, [r4], #4
 800f42e:	f843 2b04 	str.w	r2, [r3], #4
 800f432:	42a6      	cmp	r6, r4
 800f434:	d2f9      	bcs.n	800f42a <__hexnan+0xa6>
 800f436:	2200      	movs	r2, #0
 800f438:	f843 2b04 	str.w	r2, [r3], #4
 800f43c:	429e      	cmp	r6, r3
 800f43e:	d2fb      	bcs.n	800f438 <__hexnan+0xb4>
 800f440:	6833      	ldr	r3, [r6, #0]
 800f442:	b91b      	cbnz	r3, 800f44c <__hexnan+0xc8>
 800f444:	4546      	cmp	r6, r8
 800f446:	d127      	bne.n	800f498 <__hexnan+0x114>
 800f448:	2301      	movs	r3, #1
 800f44a:	6033      	str	r3, [r6, #0]
 800f44c:	2005      	movs	r0, #5
 800f44e:	e026      	b.n	800f49e <__hexnan+0x11a>
 800f450:	3501      	adds	r5, #1
 800f452:	2d08      	cmp	r5, #8
 800f454:	f10b 0b01 	add.w	fp, fp, #1
 800f458:	dd06      	ble.n	800f468 <__hexnan+0xe4>
 800f45a:	4544      	cmp	r4, r8
 800f45c:	d9cf      	bls.n	800f3fe <__hexnan+0x7a>
 800f45e:	2300      	movs	r3, #0
 800f460:	f844 3c04 	str.w	r3, [r4, #-4]
 800f464:	2501      	movs	r5, #1
 800f466:	3c04      	subs	r4, #4
 800f468:	6822      	ldr	r2, [r4, #0]
 800f46a:	f000 000f 	and.w	r0, r0, #15
 800f46e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f472:	6020      	str	r0, [r4, #0]
 800f474:	e7c3      	b.n	800f3fe <__hexnan+0x7a>
 800f476:	2508      	movs	r5, #8
 800f478:	e7c1      	b.n	800f3fe <__hexnan+0x7a>
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d0df      	beq.n	800f440 <__hexnan+0xbc>
 800f480:	f04f 32ff 	mov.w	r2, #4294967295
 800f484:	f1c3 0320 	rsb	r3, r3, #32
 800f488:	fa22 f303 	lsr.w	r3, r2, r3
 800f48c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f490:	401a      	ands	r2, r3
 800f492:	f847 2c04 	str.w	r2, [r7, #-4]
 800f496:	e7d3      	b.n	800f440 <__hexnan+0xbc>
 800f498:	3e04      	subs	r6, #4
 800f49a:	e7d1      	b.n	800f440 <__hexnan+0xbc>
 800f49c:	2004      	movs	r0, #4
 800f49e:	b007      	add	sp, #28
 800f4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4a4 <__locale_ctype_ptr_l>:
 800f4a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f4a8:	4770      	bx	lr

0800f4aa <__localeconv_l>:
 800f4aa:	30f0      	adds	r0, #240	; 0xf0
 800f4ac:	4770      	bx	lr
	...

0800f4b0 <_localeconv_r>:
 800f4b0:	4b04      	ldr	r3, [pc, #16]	; (800f4c4 <_localeconv_r+0x14>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	6a18      	ldr	r0, [r3, #32]
 800f4b6:	4b04      	ldr	r3, [pc, #16]	; (800f4c8 <_localeconv_r+0x18>)
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	bf08      	it	eq
 800f4bc:	4618      	moveq	r0, r3
 800f4be:	30f0      	adds	r0, #240	; 0xf0
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop
 800f4c4:	200000bc 	.word	0x200000bc
 800f4c8:	20000120 	.word	0x20000120

0800f4cc <malloc>:
 800f4cc:	4b02      	ldr	r3, [pc, #8]	; (800f4d8 <malloc+0xc>)
 800f4ce:	4601      	mov	r1, r0
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f000 bc71 	b.w	800fdb8 <_malloc_r>
 800f4d6:	bf00      	nop
 800f4d8:	200000bc 	.word	0x200000bc

0800f4dc <__ascii_mbtowc>:
 800f4dc:	b082      	sub	sp, #8
 800f4de:	b901      	cbnz	r1, 800f4e2 <__ascii_mbtowc+0x6>
 800f4e0:	a901      	add	r1, sp, #4
 800f4e2:	b142      	cbz	r2, 800f4f6 <__ascii_mbtowc+0x1a>
 800f4e4:	b14b      	cbz	r3, 800f4fa <__ascii_mbtowc+0x1e>
 800f4e6:	7813      	ldrb	r3, [r2, #0]
 800f4e8:	600b      	str	r3, [r1, #0]
 800f4ea:	7812      	ldrb	r2, [r2, #0]
 800f4ec:	1c10      	adds	r0, r2, #0
 800f4ee:	bf18      	it	ne
 800f4f0:	2001      	movne	r0, #1
 800f4f2:	b002      	add	sp, #8
 800f4f4:	4770      	bx	lr
 800f4f6:	4610      	mov	r0, r2
 800f4f8:	e7fb      	b.n	800f4f2 <__ascii_mbtowc+0x16>
 800f4fa:	f06f 0001 	mvn.w	r0, #1
 800f4fe:	e7f8      	b.n	800f4f2 <__ascii_mbtowc+0x16>

0800f500 <_Balloc>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f504:	4604      	mov	r4, r0
 800f506:	460e      	mov	r6, r1
 800f508:	b93d      	cbnz	r5, 800f51a <_Balloc+0x1a>
 800f50a:	2010      	movs	r0, #16
 800f50c:	f7ff ffde 	bl	800f4cc <malloc>
 800f510:	6260      	str	r0, [r4, #36]	; 0x24
 800f512:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f516:	6005      	str	r5, [r0, #0]
 800f518:	60c5      	str	r5, [r0, #12]
 800f51a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f51c:	68eb      	ldr	r3, [r5, #12]
 800f51e:	b183      	cbz	r3, 800f542 <_Balloc+0x42>
 800f520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f528:	b9b8      	cbnz	r0, 800f55a <_Balloc+0x5a>
 800f52a:	2101      	movs	r1, #1
 800f52c:	fa01 f506 	lsl.w	r5, r1, r6
 800f530:	1d6a      	adds	r2, r5, #5
 800f532:	0092      	lsls	r2, r2, #2
 800f534:	4620      	mov	r0, r4
 800f536:	f000 fbe3 	bl	800fd00 <_calloc_r>
 800f53a:	b160      	cbz	r0, 800f556 <_Balloc+0x56>
 800f53c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f540:	e00e      	b.n	800f560 <_Balloc+0x60>
 800f542:	2221      	movs	r2, #33	; 0x21
 800f544:	2104      	movs	r1, #4
 800f546:	4620      	mov	r0, r4
 800f548:	f000 fbda 	bl	800fd00 <_calloc_r>
 800f54c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f54e:	60e8      	str	r0, [r5, #12]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e4      	bne.n	800f520 <_Balloc+0x20>
 800f556:	2000      	movs	r0, #0
 800f558:	bd70      	pop	{r4, r5, r6, pc}
 800f55a:	6802      	ldr	r2, [r0, #0]
 800f55c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f560:	2300      	movs	r3, #0
 800f562:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f566:	e7f7      	b.n	800f558 <_Balloc+0x58>

0800f568 <_Bfree>:
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f56c:	4606      	mov	r6, r0
 800f56e:	460d      	mov	r5, r1
 800f570:	b93c      	cbnz	r4, 800f582 <_Bfree+0x1a>
 800f572:	2010      	movs	r0, #16
 800f574:	f7ff ffaa 	bl	800f4cc <malloc>
 800f578:	6270      	str	r0, [r6, #36]	; 0x24
 800f57a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f57e:	6004      	str	r4, [r0, #0]
 800f580:	60c4      	str	r4, [r0, #12]
 800f582:	b13d      	cbz	r5, 800f594 <_Bfree+0x2c>
 800f584:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f586:	686a      	ldr	r2, [r5, #4]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f58e:	6029      	str	r1, [r5, #0]
 800f590:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f594:	bd70      	pop	{r4, r5, r6, pc}

0800f596 <__multadd>:
 800f596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f59a:	690d      	ldr	r5, [r1, #16]
 800f59c:	461f      	mov	r7, r3
 800f59e:	4606      	mov	r6, r0
 800f5a0:	460c      	mov	r4, r1
 800f5a2:	f101 0c14 	add.w	ip, r1, #20
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	f8dc 0000 	ldr.w	r0, [ip]
 800f5ac:	b281      	uxth	r1, r0
 800f5ae:	fb02 7101 	mla	r1, r2, r1, r7
 800f5b2:	0c0f      	lsrs	r7, r1, #16
 800f5b4:	0c00      	lsrs	r0, r0, #16
 800f5b6:	fb02 7000 	mla	r0, r2, r0, r7
 800f5ba:	b289      	uxth	r1, r1
 800f5bc:	3301      	adds	r3, #1
 800f5be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f5c2:	429d      	cmp	r5, r3
 800f5c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f5c8:	f84c 1b04 	str.w	r1, [ip], #4
 800f5cc:	dcec      	bgt.n	800f5a8 <__multadd+0x12>
 800f5ce:	b1d7      	cbz	r7, 800f606 <__multadd+0x70>
 800f5d0:	68a3      	ldr	r3, [r4, #8]
 800f5d2:	42ab      	cmp	r3, r5
 800f5d4:	dc12      	bgt.n	800f5fc <__multadd+0x66>
 800f5d6:	6861      	ldr	r1, [r4, #4]
 800f5d8:	4630      	mov	r0, r6
 800f5da:	3101      	adds	r1, #1
 800f5dc:	f7ff ff90 	bl	800f500 <_Balloc>
 800f5e0:	6922      	ldr	r2, [r4, #16]
 800f5e2:	3202      	adds	r2, #2
 800f5e4:	f104 010c 	add.w	r1, r4, #12
 800f5e8:	4680      	mov	r8, r0
 800f5ea:	0092      	lsls	r2, r2, #2
 800f5ec:	300c      	adds	r0, #12
 800f5ee:	f7fd f98f 	bl	800c910 <memcpy>
 800f5f2:	4621      	mov	r1, r4
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	f7ff ffb7 	bl	800f568 <_Bfree>
 800f5fa:	4644      	mov	r4, r8
 800f5fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f600:	3501      	adds	r5, #1
 800f602:	615f      	str	r7, [r3, #20]
 800f604:	6125      	str	r5, [r4, #16]
 800f606:	4620      	mov	r0, r4
 800f608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f60c <__s2b>:
 800f60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f610:	460c      	mov	r4, r1
 800f612:	4615      	mov	r5, r2
 800f614:	461f      	mov	r7, r3
 800f616:	2209      	movs	r2, #9
 800f618:	3308      	adds	r3, #8
 800f61a:	4606      	mov	r6, r0
 800f61c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f620:	2100      	movs	r1, #0
 800f622:	2201      	movs	r2, #1
 800f624:	429a      	cmp	r2, r3
 800f626:	db20      	blt.n	800f66a <__s2b+0x5e>
 800f628:	4630      	mov	r0, r6
 800f62a:	f7ff ff69 	bl	800f500 <_Balloc>
 800f62e:	9b08      	ldr	r3, [sp, #32]
 800f630:	6143      	str	r3, [r0, #20]
 800f632:	2d09      	cmp	r5, #9
 800f634:	f04f 0301 	mov.w	r3, #1
 800f638:	6103      	str	r3, [r0, #16]
 800f63a:	dd19      	ble.n	800f670 <__s2b+0x64>
 800f63c:	f104 0809 	add.w	r8, r4, #9
 800f640:	46c1      	mov	r9, r8
 800f642:	442c      	add	r4, r5
 800f644:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f648:	4601      	mov	r1, r0
 800f64a:	3b30      	subs	r3, #48	; 0x30
 800f64c:	220a      	movs	r2, #10
 800f64e:	4630      	mov	r0, r6
 800f650:	f7ff ffa1 	bl	800f596 <__multadd>
 800f654:	45a1      	cmp	r9, r4
 800f656:	d1f5      	bne.n	800f644 <__s2b+0x38>
 800f658:	eb08 0405 	add.w	r4, r8, r5
 800f65c:	3c08      	subs	r4, #8
 800f65e:	1b2d      	subs	r5, r5, r4
 800f660:	1963      	adds	r3, r4, r5
 800f662:	42bb      	cmp	r3, r7
 800f664:	db07      	blt.n	800f676 <__s2b+0x6a>
 800f666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f66a:	0052      	lsls	r2, r2, #1
 800f66c:	3101      	adds	r1, #1
 800f66e:	e7d9      	b.n	800f624 <__s2b+0x18>
 800f670:	340a      	adds	r4, #10
 800f672:	2509      	movs	r5, #9
 800f674:	e7f3      	b.n	800f65e <__s2b+0x52>
 800f676:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f67a:	4601      	mov	r1, r0
 800f67c:	3b30      	subs	r3, #48	; 0x30
 800f67e:	220a      	movs	r2, #10
 800f680:	4630      	mov	r0, r6
 800f682:	f7ff ff88 	bl	800f596 <__multadd>
 800f686:	e7eb      	b.n	800f660 <__s2b+0x54>

0800f688 <__hi0bits>:
 800f688:	0c02      	lsrs	r2, r0, #16
 800f68a:	0412      	lsls	r2, r2, #16
 800f68c:	4603      	mov	r3, r0
 800f68e:	b9b2      	cbnz	r2, 800f6be <__hi0bits+0x36>
 800f690:	0403      	lsls	r3, r0, #16
 800f692:	2010      	movs	r0, #16
 800f694:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f698:	bf04      	itt	eq
 800f69a:	021b      	lsleq	r3, r3, #8
 800f69c:	3008      	addeq	r0, #8
 800f69e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f6a2:	bf04      	itt	eq
 800f6a4:	011b      	lsleq	r3, r3, #4
 800f6a6:	3004      	addeq	r0, #4
 800f6a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f6ac:	bf04      	itt	eq
 800f6ae:	009b      	lsleq	r3, r3, #2
 800f6b0:	3002      	addeq	r0, #2
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	db06      	blt.n	800f6c4 <__hi0bits+0x3c>
 800f6b6:	005b      	lsls	r3, r3, #1
 800f6b8:	d503      	bpl.n	800f6c2 <__hi0bits+0x3a>
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	4770      	bx	lr
 800f6be:	2000      	movs	r0, #0
 800f6c0:	e7e8      	b.n	800f694 <__hi0bits+0xc>
 800f6c2:	2020      	movs	r0, #32
 800f6c4:	4770      	bx	lr

0800f6c6 <__lo0bits>:
 800f6c6:	6803      	ldr	r3, [r0, #0]
 800f6c8:	f013 0207 	ands.w	r2, r3, #7
 800f6cc:	4601      	mov	r1, r0
 800f6ce:	d00b      	beq.n	800f6e8 <__lo0bits+0x22>
 800f6d0:	07da      	lsls	r2, r3, #31
 800f6d2:	d423      	bmi.n	800f71c <__lo0bits+0x56>
 800f6d4:	0798      	lsls	r0, r3, #30
 800f6d6:	bf49      	itett	mi
 800f6d8:	085b      	lsrmi	r3, r3, #1
 800f6da:	089b      	lsrpl	r3, r3, #2
 800f6dc:	2001      	movmi	r0, #1
 800f6de:	600b      	strmi	r3, [r1, #0]
 800f6e0:	bf5c      	itt	pl
 800f6e2:	600b      	strpl	r3, [r1, #0]
 800f6e4:	2002      	movpl	r0, #2
 800f6e6:	4770      	bx	lr
 800f6e8:	b298      	uxth	r0, r3
 800f6ea:	b9a8      	cbnz	r0, 800f718 <__lo0bits+0x52>
 800f6ec:	0c1b      	lsrs	r3, r3, #16
 800f6ee:	2010      	movs	r0, #16
 800f6f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f6f4:	bf04      	itt	eq
 800f6f6:	0a1b      	lsreq	r3, r3, #8
 800f6f8:	3008      	addeq	r0, #8
 800f6fa:	071a      	lsls	r2, r3, #28
 800f6fc:	bf04      	itt	eq
 800f6fe:	091b      	lsreq	r3, r3, #4
 800f700:	3004      	addeq	r0, #4
 800f702:	079a      	lsls	r2, r3, #30
 800f704:	bf04      	itt	eq
 800f706:	089b      	lsreq	r3, r3, #2
 800f708:	3002      	addeq	r0, #2
 800f70a:	07da      	lsls	r2, r3, #31
 800f70c:	d402      	bmi.n	800f714 <__lo0bits+0x4e>
 800f70e:	085b      	lsrs	r3, r3, #1
 800f710:	d006      	beq.n	800f720 <__lo0bits+0x5a>
 800f712:	3001      	adds	r0, #1
 800f714:	600b      	str	r3, [r1, #0]
 800f716:	4770      	bx	lr
 800f718:	4610      	mov	r0, r2
 800f71a:	e7e9      	b.n	800f6f0 <__lo0bits+0x2a>
 800f71c:	2000      	movs	r0, #0
 800f71e:	4770      	bx	lr
 800f720:	2020      	movs	r0, #32
 800f722:	4770      	bx	lr

0800f724 <__i2b>:
 800f724:	b510      	push	{r4, lr}
 800f726:	460c      	mov	r4, r1
 800f728:	2101      	movs	r1, #1
 800f72a:	f7ff fee9 	bl	800f500 <_Balloc>
 800f72e:	2201      	movs	r2, #1
 800f730:	6144      	str	r4, [r0, #20]
 800f732:	6102      	str	r2, [r0, #16]
 800f734:	bd10      	pop	{r4, pc}

0800f736 <__multiply>:
 800f736:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73a:	4614      	mov	r4, r2
 800f73c:	690a      	ldr	r2, [r1, #16]
 800f73e:	6923      	ldr	r3, [r4, #16]
 800f740:	429a      	cmp	r2, r3
 800f742:	bfb8      	it	lt
 800f744:	460b      	movlt	r3, r1
 800f746:	4688      	mov	r8, r1
 800f748:	bfbc      	itt	lt
 800f74a:	46a0      	movlt	r8, r4
 800f74c:	461c      	movlt	r4, r3
 800f74e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f752:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f756:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f75a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f75e:	eb07 0609 	add.w	r6, r7, r9
 800f762:	42b3      	cmp	r3, r6
 800f764:	bfb8      	it	lt
 800f766:	3101      	addlt	r1, #1
 800f768:	f7ff feca 	bl	800f500 <_Balloc>
 800f76c:	f100 0514 	add.w	r5, r0, #20
 800f770:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f774:	462b      	mov	r3, r5
 800f776:	2200      	movs	r2, #0
 800f778:	4573      	cmp	r3, lr
 800f77a:	d316      	bcc.n	800f7aa <__multiply+0x74>
 800f77c:	f104 0214 	add.w	r2, r4, #20
 800f780:	f108 0114 	add.w	r1, r8, #20
 800f784:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f788:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	9b00      	ldr	r3, [sp, #0]
 800f790:	9201      	str	r2, [sp, #4]
 800f792:	4293      	cmp	r3, r2
 800f794:	d80c      	bhi.n	800f7b0 <__multiply+0x7a>
 800f796:	2e00      	cmp	r6, #0
 800f798:	dd03      	ble.n	800f7a2 <__multiply+0x6c>
 800f79a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d05d      	beq.n	800f85e <__multiply+0x128>
 800f7a2:	6106      	str	r6, [r0, #16]
 800f7a4:	b003      	add	sp, #12
 800f7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7aa:	f843 2b04 	str.w	r2, [r3], #4
 800f7ae:	e7e3      	b.n	800f778 <__multiply+0x42>
 800f7b0:	f8b2 b000 	ldrh.w	fp, [r2]
 800f7b4:	f1bb 0f00 	cmp.w	fp, #0
 800f7b8:	d023      	beq.n	800f802 <__multiply+0xcc>
 800f7ba:	4689      	mov	r9, r1
 800f7bc:	46ac      	mov	ip, r5
 800f7be:	f04f 0800 	mov.w	r8, #0
 800f7c2:	f859 4b04 	ldr.w	r4, [r9], #4
 800f7c6:	f8dc a000 	ldr.w	sl, [ip]
 800f7ca:	b2a3      	uxth	r3, r4
 800f7cc:	fa1f fa8a 	uxth.w	sl, sl
 800f7d0:	fb0b a303 	mla	r3, fp, r3, sl
 800f7d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f7d8:	f8dc 4000 	ldr.w	r4, [ip]
 800f7dc:	4443      	add	r3, r8
 800f7de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f7e2:	fb0b 840a 	mla	r4, fp, sl, r8
 800f7e6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f7ea:	46e2      	mov	sl, ip
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f7f2:	454f      	cmp	r7, r9
 800f7f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f7f8:	f84a 3b04 	str.w	r3, [sl], #4
 800f7fc:	d82b      	bhi.n	800f856 <__multiply+0x120>
 800f7fe:	f8cc 8004 	str.w	r8, [ip, #4]
 800f802:	9b01      	ldr	r3, [sp, #4]
 800f804:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f808:	3204      	adds	r2, #4
 800f80a:	f1ba 0f00 	cmp.w	sl, #0
 800f80e:	d020      	beq.n	800f852 <__multiply+0x11c>
 800f810:	682b      	ldr	r3, [r5, #0]
 800f812:	4689      	mov	r9, r1
 800f814:	46a8      	mov	r8, r5
 800f816:	f04f 0b00 	mov.w	fp, #0
 800f81a:	f8b9 c000 	ldrh.w	ip, [r9]
 800f81e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f822:	fb0a 440c 	mla	r4, sl, ip, r4
 800f826:	445c      	add	r4, fp
 800f828:	46c4      	mov	ip, r8
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f830:	f84c 3b04 	str.w	r3, [ip], #4
 800f834:	f859 3b04 	ldr.w	r3, [r9], #4
 800f838:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f83c:	0c1b      	lsrs	r3, r3, #16
 800f83e:	fb0a b303 	mla	r3, sl, r3, fp
 800f842:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f846:	454f      	cmp	r7, r9
 800f848:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f84c:	d805      	bhi.n	800f85a <__multiply+0x124>
 800f84e:	f8c8 3004 	str.w	r3, [r8, #4]
 800f852:	3504      	adds	r5, #4
 800f854:	e79b      	b.n	800f78e <__multiply+0x58>
 800f856:	46d4      	mov	ip, sl
 800f858:	e7b3      	b.n	800f7c2 <__multiply+0x8c>
 800f85a:	46e0      	mov	r8, ip
 800f85c:	e7dd      	b.n	800f81a <__multiply+0xe4>
 800f85e:	3e01      	subs	r6, #1
 800f860:	e799      	b.n	800f796 <__multiply+0x60>
	...

0800f864 <__pow5mult>:
 800f864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f868:	4615      	mov	r5, r2
 800f86a:	f012 0203 	ands.w	r2, r2, #3
 800f86e:	4606      	mov	r6, r0
 800f870:	460f      	mov	r7, r1
 800f872:	d007      	beq.n	800f884 <__pow5mult+0x20>
 800f874:	3a01      	subs	r2, #1
 800f876:	4c21      	ldr	r4, [pc, #132]	; (800f8fc <__pow5mult+0x98>)
 800f878:	2300      	movs	r3, #0
 800f87a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f87e:	f7ff fe8a 	bl	800f596 <__multadd>
 800f882:	4607      	mov	r7, r0
 800f884:	10ad      	asrs	r5, r5, #2
 800f886:	d035      	beq.n	800f8f4 <__pow5mult+0x90>
 800f888:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f88a:	b93c      	cbnz	r4, 800f89c <__pow5mult+0x38>
 800f88c:	2010      	movs	r0, #16
 800f88e:	f7ff fe1d 	bl	800f4cc <malloc>
 800f892:	6270      	str	r0, [r6, #36]	; 0x24
 800f894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f898:	6004      	str	r4, [r0, #0]
 800f89a:	60c4      	str	r4, [r0, #12]
 800f89c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8a4:	b94c      	cbnz	r4, 800f8ba <__pow5mult+0x56>
 800f8a6:	f240 2171 	movw	r1, #625	; 0x271
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f7ff ff3a 	bl	800f724 <__i2b>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	6003      	str	r3, [r0, #0]
 800f8ba:	f04f 0800 	mov.w	r8, #0
 800f8be:	07eb      	lsls	r3, r5, #31
 800f8c0:	d50a      	bpl.n	800f8d8 <__pow5mult+0x74>
 800f8c2:	4639      	mov	r1, r7
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f7ff ff35 	bl	800f736 <__multiply>
 800f8cc:	4639      	mov	r1, r7
 800f8ce:	4681      	mov	r9, r0
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f7ff fe49 	bl	800f568 <_Bfree>
 800f8d6:	464f      	mov	r7, r9
 800f8d8:	106d      	asrs	r5, r5, #1
 800f8da:	d00b      	beq.n	800f8f4 <__pow5mult+0x90>
 800f8dc:	6820      	ldr	r0, [r4, #0]
 800f8de:	b938      	cbnz	r0, 800f8f0 <__pow5mult+0x8c>
 800f8e0:	4622      	mov	r2, r4
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f7ff ff26 	bl	800f736 <__multiply>
 800f8ea:	6020      	str	r0, [r4, #0]
 800f8ec:	f8c0 8000 	str.w	r8, [r0]
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	e7e4      	b.n	800f8be <__pow5mult+0x5a>
 800f8f4:	4638      	mov	r0, r7
 800f8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8fa:	bf00      	nop
 800f8fc:	080105c8 	.word	0x080105c8

0800f900 <__lshift>:
 800f900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f904:	460c      	mov	r4, r1
 800f906:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	6849      	ldr	r1, [r1, #4]
 800f90e:	eb0a 0903 	add.w	r9, sl, r3
 800f912:	68a3      	ldr	r3, [r4, #8]
 800f914:	4607      	mov	r7, r0
 800f916:	4616      	mov	r6, r2
 800f918:	f109 0501 	add.w	r5, r9, #1
 800f91c:	42ab      	cmp	r3, r5
 800f91e:	db32      	blt.n	800f986 <__lshift+0x86>
 800f920:	4638      	mov	r0, r7
 800f922:	f7ff fded 	bl	800f500 <_Balloc>
 800f926:	2300      	movs	r3, #0
 800f928:	4680      	mov	r8, r0
 800f92a:	f100 0114 	add.w	r1, r0, #20
 800f92e:	461a      	mov	r2, r3
 800f930:	4553      	cmp	r3, sl
 800f932:	db2b      	blt.n	800f98c <__lshift+0x8c>
 800f934:	6920      	ldr	r0, [r4, #16]
 800f936:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f93a:	f104 0314 	add.w	r3, r4, #20
 800f93e:	f016 021f 	ands.w	r2, r6, #31
 800f942:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f946:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f94a:	d025      	beq.n	800f998 <__lshift+0x98>
 800f94c:	f1c2 0e20 	rsb	lr, r2, #32
 800f950:	2000      	movs	r0, #0
 800f952:	681e      	ldr	r6, [r3, #0]
 800f954:	468a      	mov	sl, r1
 800f956:	4096      	lsls	r6, r2
 800f958:	4330      	orrs	r0, r6
 800f95a:	f84a 0b04 	str.w	r0, [sl], #4
 800f95e:	f853 0b04 	ldr.w	r0, [r3], #4
 800f962:	459c      	cmp	ip, r3
 800f964:	fa20 f00e 	lsr.w	r0, r0, lr
 800f968:	d814      	bhi.n	800f994 <__lshift+0x94>
 800f96a:	6048      	str	r0, [r1, #4]
 800f96c:	b108      	cbz	r0, 800f972 <__lshift+0x72>
 800f96e:	f109 0502 	add.w	r5, r9, #2
 800f972:	3d01      	subs	r5, #1
 800f974:	4638      	mov	r0, r7
 800f976:	f8c8 5010 	str.w	r5, [r8, #16]
 800f97a:	4621      	mov	r1, r4
 800f97c:	f7ff fdf4 	bl	800f568 <_Bfree>
 800f980:	4640      	mov	r0, r8
 800f982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f986:	3101      	adds	r1, #1
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	e7c7      	b.n	800f91c <__lshift+0x1c>
 800f98c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f990:	3301      	adds	r3, #1
 800f992:	e7cd      	b.n	800f930 <__lshift+0x30>
 800f994:	4651      	mov	r1, sl
 800f996:	e7dc      	b.n	800f952 <__lshift+0x52>
 800f998:	3904      	subs	r1, #4
 800f99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f99e:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9a2:	459c      	cmp	ip, r3
 800f9a4:	d8f9      	bhi.n	800f99a <__lshift+0x9a>
 800f9a6:	e7e4      	b.n	800f972 <__lshift+0x72>

0800f9a8 <__mcmp>:
 800f9a8:	6903      	ldr	r3, [r0, #16]
 800f9aa:	690a      	ldr	r2, [r1, #16]
 800f9ac:	1a9b      	subs	r3, r3, r2
 800f9ae:	b530      	push	{r4, r5, lr}
 800f9b0:	d10c      	bne.n	800f9cc <__mcmp+0x24>
 800f9b2:	0092      	lsls	r2, r2, #2
 800f9b4:	3014      	adds	r0, #20
 800f9b6:	3114      	adds	r1, #20
 800f9b8:	1884      	adds	r4, r0, r2
 800f9ba:	4411      	add	r1, r2
 800f9bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f9c4:	4295      	cmp	r5, r2
 800f9c6:	d003      	beq.n	800f9d0 <__mcmp+0x28>
 800f9c8:	d305      	bcc.n	800f9d6 <__mcmp+0x2e>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	bd30      	pop	{r4, r5, pc}
 800f9d0:	42a0      	cmp	r0, r4
 800f9d2:	d3f3      	bcc.n	800f9bc <__mcmp+0x14>
 800f9d4:	e7fa      	b.n	800f9cc <__mcmp+0x24>
 800f9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9da:	e7f7      	b.n	800f9cc <__mcmp+0x24>

0800f9dc <__mdiff>:
 800f9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9e0:	460d      	mov	r5, r1
 800f9e2:	4607      	mov	r7, r0
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	4614      	mov	r4, r2
 800f9ea:	f7ff ffdd 	bl	800f9a8 <__mcmp>
 800f9ee:	1e06      	subs	r6, r0, #0
 800f9f0:	d108      	bne.n	800fa04 <__mdiff+0x28>
 800f9f2:	4631      	mov	r1, r6
 800f9f4:	4638      	mov	r0, r7
 800f9f6:	f7ff fd83 	bl	800f500 <_Balloc>
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fa00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa04:	bfa4      	itt	ge
 800fa06:	4623      	movge	r3, r4
 800fa08:	462c      	movge	r4, r5
 800fa0a:	4638      	mov	r0, r7
 800fa0c:	6861      	ldr	r1, [r4, #4]
 800fa0e:	bfa6      	itte	ge
 800fa10:	461d      	movge	r5, r3
 800fa12:	2600      	movge	r6, #0
 800fa14:	2601      	movlt	r6, #1
 800fa16:	f7ff fd73 	bl	800f500 <_Balloc>
 800fa1a:	692b      	ldr	r3, [r5, #16]
 800fa1c:	60c6      	str	r6, [r0, #12]
 800fa1e:	6926      	ldr	r6, [r4, #16]
 800fa20:	f105 0914 	add.w	r9, r5, #20
 800fa24:	f104 0214 	add.w	r2, r4, #20
 800fa28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fa2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fa30:	f100 0514 	add.w	r5, r0, #20
 800fa34:	f04f 0e00 	mov.w	lr, #0
 800fa38:	f852 ab04 	ldr.w	sl, [r2], #4
 800fa3c:	f859 4b04 	ldr.w	r4, [r9], #4
 800fa40:	fa1e f18a 	uxtah	r1, lr, sl
 800fa44:	b2a3      	uxth	r3, r4
 800fa46:	1ac9      	subs	r1, r1, r3
 800fa48:	0c23      	lsrs	r3, r4, #16
 800fa4a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fa4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fa52:	b289      	uxth	r1, r1
 800fa54:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fa58:	45c8      	cmp	r8, r9
 800fa5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fa5e:	4694      	mov	ip, r2
 800fa60:	f845 3b04 	str.w	r3, [r5], #4
 800fa64:	d8e8      	bhi.n	800fa38 <__mdiff+0x5c>
 800fa66:	45bc      	cmp	ip, r7
 800fa68:	d304      	bcc.n	800fa74 <__mdiff+0x98>
 800fa6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fa6e:	b183      	cbz	r3, 800fa92 <__mdiff+0xb6>
 800fa70:	6106      	str	r6, [r0, #16]
 800fa72:	e7c5      	b.n	800fa00 <__mdiff+0x24>
 800fa74:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fa78:	fa1e f381 	uxtah	r3, lr, r1
 800fa7c:	141a      	asrs	r2, r3, #16
 800fa7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa88:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fa8c:	f845 3b04 	str.w	r3, [r5], #4
 800fa90:	e7e9      	b.n	800fa66 <__mdiff+0x8a>
 800fa92:	3e01      	subs	r6, #1
 800fa94:	e7e9      	b.n	800fa6a <__mdiff+0x8e>
	...

0800fa98 <__ulp>:
 800fa98:	4b12      	ldr	r3, [pc, #72]	; (800fae4 <__ulp+0x4c>)
 800fa9a:	ee10 2a90 	vmov	r2, s1
 800fa9e:	401a      	ands	r2, r3
 800faa0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	dd04      	ble.n	800fab2 <__ulp+0x1a>
 800faa8:	2000      	movs	r0, #0
 800faaa:	4619      	mov	r1, r3
 800faac:	ec41 0b10 	vmov	d0, r0, r1
 800fab0:	4770      	bx	lr
 800fab2:	425b      	negs	r3, r3
 800fab4:	151b      	asrs	r3, r3, #20
 800fab6:	2b13      	cmp	r3, #19
 800fab8:	f04f 0000 	mov.w	r0, #0
 800fabc:	f04f 0100 	mov.w	r1, #0
 800fac0:	dc04      	bgt.n	800facc <__ulp+0x34>
 800fac2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fac6:	fa42 f103 	asr.w	r1, r2, r3
 800faca:	e7ef      	b.n	800faac <__ulp+0x14>
 800facc:	3b14      	subs	r3, #20
 800face:	2b1e      	cmp	r3, #30
 800fad0:	f04f 0201 	mov.w	r2, #1
 800fad4:	bfda      	itte	le
 800fad6:	f1c3 031f 	rsble	r3, r3, #31
 800fada:	fa02 f303 	lslle.w	r3, r2, r3
 800fade:	4613      	movgt	r3, r2
 800fae0:	4618      	mov	r0, r3
 800fae2:	e7e3      	b.n	800faac <__ulp+0x14>
 800fae4:	7ff00000 	.word	0x7ff00000

0800fae8 <__b2d>:
 800fae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faea:	6905      	ldr	r5, [r0, #16]
 800faec:	f100 0714 	add.w	r7, r0, #20
 800faf0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800faf4:	1f2e      	subs	r6, r5, #4
 800faf6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fafa:	4620      	mov	r0, r4
 800fafc:	f7ff fdc4 	bl	800f688 <__hi0bits>
 800fb00:	f1c0 0320 	rsb	r3, r0, #32
 800fb04:	280a      	cmp	r0, #10
 800fb06:	600b      	str	r3, [r1, #0]
 800fb08:	f8df c074 	ldr.w	ip, [pc, #116]	; 800fb80 <__b2d+0x98>
 800fb0c:	dc14      	bgt.n	800fb38 <__b2d+0x50>
 800fb0e:	f1c0 0e0b 	rsb	lr, r0, #11
 800fb12:	fa24 f10e 	lsr.w	r1, r4, lr
 800fb16:	42b7      	cmp	r7, r6
 800fb18:	ea41 030c 	orr.w	r3, r1, ip
 800fb1c:	bf34      	ite	cc
 800fb1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb22:	2100      	movcs	r1, #0
 800fb24:	3015      	adds	r0, #21
 800fb26:	fa04 f000 	lsl.w	r0, r4, r0
 800fb2a:	fa21 f10e 	lsr.w	r1, r1, lr
 800fb2e:	ea40 0201 	orr.w	r2, r0, r1
 800fb32:	ec43 2b10 	vmov	d0, r2, r3
 800fb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb38:	42b7      	cmp	r7, r6
 800fb3a:	bf3a      	itte	cc
 800fb3c:	f1a5 0608 	subcc.w	r6, r5, #8
 800fb40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb44:	2100      	movcs	r1, #0
 800fb46:	380b      	subs	r0, #11
 800fb48:	d015      	beq.n	800fb76 <__b2d+0x8e>
 800fb4a:	4084      	lsls	r4, r0
 800fb4c:	f1c0 0520 	rsb	r5, r0, #32
 800fb50:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800fb54:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800fb58:	42be      	cmp	r6, r7
 800fb5a:	fa21 fc05 	lsr.w	ip, r1, r5
 800fb5e:	ea44 030c 	orr.w	r3, r4, ip
 800fb62:	bf8c      	ite	hi
 800fb64:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fb68:	2400      	movls	r4, #0
 800fb6a:	fa01 f000 	lsl.w	r0, r1, r0
 800fb6e:	40ec      	lsrs	r4, r5
 800fb70:	ea40 0204 	orr.w	r2, r0, r4
 800fb74:	e7dd      	b.n	800fb32 <__b2d+0x4a>
 800fb76:	ea44 030c 	orr.w	r3, r4, ip
 800fb7a:	460a      	mov	r2, r1
 800fb7c:	e7d9      	b.n	800fb32 <__b2d+0x4a>
 800fb7e:	bf00      	nop
 800fb80:	3ff00000 	.word	0x3ff00000

0800fb84 <__d2b>:
 800fb84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb88:	460e      	mov	r6, r1
 800fb8a:	2101      	movs	r1, #1
 800fb8c:	ec59 8b10 	vmov	r8, r9, d0
 800fb90:	4615      	mov	r5, r2
 800fb92:	f7ff fcb5 	bl	800f500 <_Balloc>
 800fb96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fb9a:	4607      	mov	r7, r0
 800fb9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fba0:	bb34      	cbnz	r4, 800fbf0 <__d2b+0x6c>
 800fba2:	9301      	str	r3, [sp, #4]
 800fba4:	f1b8 0300 	subs.w	r3, r8, #0
 800fba8:	d027      	beq.n	800fbfa <__d2b+0x76>
 800fbaa:	a802      	add	r0, sp, #8
 800fbac:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fbb0:	f7ff fd89 	bl	800f6c6 <__lo0bits>
 800fbb4:	9900      	ldr	r1, [sp, #0]
 800fbb6:	b1f0      	cbz	r0, 800fbf6 <__d2b+0x72>
 800fbb8:	9a01      	ldr	r2, [sp, #4]
 800fbba:	f1c0 0320 	rsb	r3, r0, #32
 800fbbe:	fa02 f303 	lsl.w	r3, r2, r3
 800fbc2:	430b      	orrs	r3, r1
 800fbc4:	40c2      	lsrs	r2, r0
 800fbc6:	617b      	str	r3, [r7, #20]
 800fbc8:	9201      	str	r2, [sp, #4]
 800fbca:	9b01      	ldr	r3, [sp, #4]
 800fbcc:	61bb      	str	r3, [r7, #24]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	bf14      	ite	ne
 800fbd2:	2102      	movne	r1, #2
 800fbd4:	2101      	moveq	r1, #1
 800fbd6:	6139      	str	r1, [r7, #16]
 800fbd8:	b1c4      	cbz	r4, 800fc0c <__d2b+0x88>
 800fbda:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fbde:	4404      	add	r4, r0
 800fbe0:	6034      	str	r4, [r6, #0]
 800fbe2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbe6:	6028      	str	r0, [r5, #0]
 800fbe8:	4638      	mov	r0, r7
 800fbea:	b003      	add	sp, #12
 800fbec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fbf4:	e7d5      	b.n	800fba2 <__d2b+0x1e>
 800fbf6:	6179      	str	r1, [r7, #20]
 800fbf8:	e7e7      	b.n	800fbca <__d2b+0x46>
 800fbfa:	a801      	add	r0, sp, #4
 800fbfc:	f7ff fd63 	bl	800f6c6 <__lo0bits>
 800fc00:	9b01      	ldr	r3, [sp, #4]
 800fc02:	617b      	str	r3, [r7, #20]
 800fc04:	2101      	movs	r1, #1
 800fc06:	6139      	str	r1, [r7, #16]
 800fc08:	3020      	adds	r0, #32
 800fc0a:	e7e5      	b.n	800fbd8 <__d2b+0x54>
 800fc0c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fc10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc14:	6030      	str	r0, [r6, #0]
 800fc16:	6918      	ldr	r0, [r3, #16]
 800fc18:	f7ff fd36 	bl	800f688 <__hi0bits>
 800fc1c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fc20:	e7e1      	b.n	800fbe6 <__d2b+0x62>

0800fc22 <__ratio>:
 800fc22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc26:	4688      	mov	r8, r1
 800fc28:	4669      	mov	r1, sp
 800fc2a:	4681      	mov	r9, r0
 800fc2c:	f7ff ff5c 	bl	800fae8 <__b2d>
 800fc30:	a901      	add	r1, sp, #4
 800fc32:	4640      	mov	r0, r8
 800fc34:	ec57 6b10 	vmov	r6, r7, d0
 800fc38:	ee10 4a10 	vmov	r4, s0
 800fc3c:	f7ff ff54 	bl	800fae8 <__b2d>
 800fc40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fc48:	eba3 0c02 	sub.w	ip, r3, r2
 800fc4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc50:	1a9b      	subs	r3, r3, r2
 800fc52:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fc56:	ec51 0b10 	vmov	r0, r1, d0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	ee10 aa10 	vmov	sl, s0
 800fc60:	bfce      	itee	gt
 800fc62:	463a      	movgt	r2, r7
 800fc64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fc68:	460a      	movle	r2, r1
 800fc6a:	463d      	mov	r5, r7
 800fc6c:	468b      	mov	fp, r1
 800fc6e:	bfcc      	ite	gt
 800fc70:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fc74:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fc78:	ec45 4b17 	vmov	d7, r4, r5
 800fc7c:	ec4b ab16 	vmov	d6, sl, fp
 800fc80:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800fc84:	b003      	add	sp, #12
 800fc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc8a <__copybits>:
 800fc8a:	3901      	subs	r1, #1
 800fc8c:	b510      	push	{r4, lr}
 800fc8e:	1149      	asrs	r1, r1, #5
 800fc90:	6914      	ldr	r4, [r2, #16]
 800fc92:	3101      	adds	r1, #1
 800fc94:	f102 0314 	add.w	r3, r2, #20
 800fc98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fca0:	42a3      	cmp	r3, r4
 800fca2:	4602      	mov	r2, r0
 800fca4:	d303      	bcc.n	800fcae <__copybits+0x24>
 800fca6:	2300      	movs	r3, #0
 800fca8:	428a      	cmp	r2, r1
 800fcaa:	d305      	bcc.n	800fcb8 <__copybits+0x2e>
 800fcac:	bd10      	pop	{r4, pc}
 800fcae:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcb2:	f840 2b04 	str.w	r2, [r0], #4
 800fcb6:	e7f3      	b.n	800fca0 <__copybits+0x16>
 800fcb8:	f842 3b04 	str.w	r3, [r2], #4
 800fcbc:	e7f4      	b.n	800fca8 <__copybits+0x1e>

0800fcbe <__any_on>:
 800fcbe:	f100 0214 	add.w	r2, r0, #20
 800fcc2:	6900      	ldr	r0, [r0, #16]
 800fcc4:	114b      	asrs	r3, r1, #5
 800fcc6:	4298      	cmp	r0, r3
 800fcc8:	b510      	push	{r4, lr}
 800fcca:	db11      	blt.n	800fcf0 <__any_on+0x32>
 800fccc:	dd0a      	ble.n	800fce4 <__any_on+0x26>
 800fcce:	f011 011f 	ands.w	r1, r1, #31
 800fcd2:	d007      	beq.n	800fce4 <__any_on+0x26>
 800fcd4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fcd8:	fa24 f001 	lsr.w	r0, r4, r1
 800fcdc:	fa00 f101 	lsl.w	r1, r0, r1
 800fce0:	428c      	cmp	r4, r1
 800fce2:	d10b      	bne.n	800fcfc <__any_on+0x3e>
 800fce4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d803      	bhi.n	800fcf4 <__any_on+0x36>
 800fcec:	2000      	movs	r0, #0
 800fcee:	bd10      	pop	{r4, pc}
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	e7f7      	b.n	800fce4 <__any_on+0x26>
 800fcf4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fcf8:	2900      	cmp	r1, #0
 800fcfa:	d0f5      	beq.n	800fce8 <__any_on+0x2a>
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	e7f6      	b.n	800fcee <__any_on+0x30>

0800fd00 <_calloc_r>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	fb02 f401 	mul.w	r4, r2, r1
 800fd06:	4621      	mov	r1, r4
 800fd08:	f000 f856 	bl	800fdb8 <_malloc_r>
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	b118      	cbz	r0, 800fd18 <_calloc_r+0x18>
 800fd10:	4622      	mov	r2, r4
 800fd12:	2100      	movs	r1, #0
 800fd14:	f7fc fe07 	bl	800c926 <memset>
 800fd18:	4628      	mov	r0, r5
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}

0800fd1c <_free_r>:
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	4605      	mov	r5, r0
 800fd20:	2900      	cmp	r1, #0
 800fd22:	d045      	beq.n	800fdb0 <_free_r+0x94>
 800fd24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd28:	1f0c      	subs	r4, r1, #4
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	bfb8      	it	lt
 800fd2e:	18e4      	addlt	r4, r4, r3
 800fd30:	f000 fa36 	bl	80101a0 <__malloc_lock>
 800fd34:	4a1f      	ldr	r2, [pc, #124]	; (800fdb4 <_free_r+0x98>)
 800fd36:	6813      	ldr	r3, [r2, #0]
 800fd38:	4610      	mov	r0, r2
 800fd3a:	b933      	cbnz	r3, 800fd4a <_free_r+0x2e>
 800fd3c:	6063      	str	r3, [r4, #4]
 800fd3e:	6014      	str	r4, [r2, #0]
 800fd40:	4628      	mov	r0, r5
 800fd42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd46:	f000 ba2c 	b.w	80101a2 <__malloc_unlock>
 800fd4a:	42a3      	cmp	r3, r4
 800fd4c:	d90c      	bls.n	800fd68 <_free_r+0x4c>
 800fd4e:	6821      	ldr	r1, [r4, #0]
 800fd50:	1862      	adds	r2, r4, r1
 800fd52:	4293      	cmp	r3, r2
 800fd54:	bf04      	itt	eq
 800fd56:	681a      	ldreq	r2, [r3, #0]
 800fd58:	685b      	ldreq	r3, [r3, #4]
 800fd5a:	6063      	str	r3, [r4, #4]
 800fd5c:	bf04      	itt	eq
 800fd5e:	1852      	addeq	r2, r2, r1
 800fd60:	6022      	streq	r2, [r4, #0]
 800fd62:	6004      	str	r4, [r0, #0]
 800fd64:	e7ec      	b.n	800fd40 <_free_r+0x24>
 800fd66:	4613      	mov	r3, r2
 800fd68:	685a      	ldr	r2, [r3, #4]
 800fd6a:	b10a      	cbz	r2, 800fd70 <_free_r+0x54>
 800fd6c:	42a2      	cmp	r2, r4
 800fd6e:	d9fa      	bls.n	800fd66 <_free_r+0x4a>
 800fd70:	6819      	ldr	r1, [r3, #0]
 800fd72:	1858      	adds	r0, r3, r1
 800fd74:	42a0      	cmp	r0, r4
 800fd76:	d10b      	bne.n	800fd90 <_free_r+0x74>
 800fd78:	6820      	ldr	r0, [r4, #0]
 800fd7a:	4401      	add	r1, r0
 800fd7c:	1858      	adds	r0, r3, r1
 800fd7e:	4282      	cmp	r2, r0
 800fd80:	6019      	str	r1, [r3, #0]
 800fd82:	d1dd      	bne.n	800fd40 <_free_r+0x24>
 800fd84:	6810      	ldr	r0, [r2, #0]
 800fd86:	6852      	ldr	r2, [r2, #4]
 800fd88:	605a      	str	r2, [r3, #4]
 800fd8a:	4401      	add	r1, r0
 800fd8c:	6019      	str	r1, [r3, #0]
 800fd8e:	e7d7      	b.n	800fd40 <_free_r+0x24>
 800fd90:	d902      	bls.n	800fd98 <_free_r+0x7c>
 800fd92:	230c      	movs	r3, #12
 800fd94:	602b      	str	r3, [r5, #0]
 800fd96:	e7d3      	b.n	800fd40 <_free_r+0x24>
 800fd98:	6820      	ldr	r0, [r4, #0]
 800fd9a:	1821      	adds	r1, r4, r0
 800fd9c:	428a      	cmp	r2, r1
 800fd9e:	bf04      	itt	eq
 800fda0:	6811      	ldreq	r1, [r2, #0]
 800fda2:	6852      	ldreq	r2, [r2, #4]
 800fda4:	6062      	str	r2, [r4, #4]
 800fda6:	bf04      	itt	eq
 800fda8:	1809      	addeq	r1, r1, r0
 800fdaa:	6021      	streq	r1, [r4, #0]
 800fdac:	605c      	str	r4, [r3, #4]
 800fdae:	e7c7      	b.n	800fd40 <_free_r+0x24>
 800fdb0:	bd38      	pop	{r3, r4, r5, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20007b08 	.word	0x20007b08

0800fdb8 <_malloc_r>:
 800fdb8:	b570      	push	{r4, r5, r6, lr}
 800fdba:	1ccd      	adds	r5, r1, #3
 800fdbc:	f025 0503 	bic.w	r5, r5, #3
 800fdc0:	3508      	adds	r5, #8
 800fdc2:	2d0c      	cmp	r5, #12
 800fdc4:	bf38      	it	cc
 800fdc6:	250c      	movcc	r5, #12
 800fdc8:	2d00      	cmp	r5, #0
 800fdca:	4606      	mov	r6, r0
 800fdcc:	db01      	blt.n	800fdd2 <_malloc_r+0x1a>
 800fdce:	42a9      	cmp	r1, r5
 800fdd0:	d903      	bls.n	800fdda <_malloc_r+0x22>
 800fdd2:	230c      	movs	r3, #12
 800fdd4:	6033      	str	r3, [r6, #0]
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	bd70      	pop	{r4, r5, r6, pc}
 800fdda:	f000 f9e1 	bl	80101a0 <__malloc_lock>
 800fdde:	4a21      	ldr	r2, [pc, #132]	; (800fe64 <_malloc_r+0xac>)
 800fde0:	6814      	ldr	r4, [r2, #0]
 800fde2:	4621      	mov	r1, r4
 800fde4:	b991      	cbnz	r1, 800fe0c <_malloc_r+0x54>
 800fde6:	4c20      	ldr	r4, [pc, #128]	; (800fe68 <_malloc_r+0xb0>)
 800fde8:	6823      	ldr	r3, [r4, #0]
 800fdea:	b91b      	cbnz	r3, 800fdf4 <_malloc_r+0x3c>
 800fdec:	4630      	mov	r0, r6
 800fdee:	f000 f98f 	bl	8010110 <_sbrk_r>
 800fdf2:	6020      	str	r0, [r4, #0]
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	f000 f98a 	bl	8010110 <_sbrk_r>
 800fdfc:	1c43      	adds	r3, r0, #1
 800fdfe:	d124      	bne.n	800fe4a <_malloc_r+0x92>
 800fe00:	230c      	movs	r3, #12
 800fe02:	6033      	str	r3, [r6, #0]
 800fe04:	4630      	mov	r0, r6
 800fe06:	f000 f9cc 	bl	80101a2 <__malloc_unlock>
 800fe0a:	e7e4      	b.n	800fdd6 <_malloc_r+0x1e>
 800fe0c:	680b      	ldr	r3, [r1, #0]
 800fe0e:	1b5b      	subs	r3, r3, r5
 800fe10:	d418      	bmi.n	800fe44 <_malloc_r+0x8c>
 800fe12:	2b0b      	cmp	r3, #11
 800fe14:	d90f      	bls.n	800fe36 <_malloc_r+0x7e>
 800fe16:	600b      	str	r3, [r1, #0]
 800fe18:	50cd      	str	r5, [r1, r3]
 800fe1a:	18cc      	adds	r4, r1, r3
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	f000 f9c0 	bl	80101a2 <__malloc_unlock>
 800fe22:	f104 000b 	add.w	r0, r4, #11
 800fe26:	1d23      	adds	r3, r4, #4
 800fe28:	f020 0007 	bic.w	r0, r0, #7
 800fe2c:	1ac3      	subs	r3, r0, r3
 800fe2e:	d0d3      	beq.n	800fdd8 <_malloc_r+0x20>
 800fe30:	425a      	negs	r2, r3
 800fe32:	50e2      	str	r2, [r4, r3]
 800fe34:	e7d0      	b.n	800fdd8 <_malloc_r+0x20>
 800fe36:	428c      	cmp	r4, r1
 800fe38:	684b      	ldr	r3, [r1, #4]
 800fe3a:	bf16      	itet	ne
 800fe3c:	6063      	strne	r3, [r4, #4]
 800fe3e:	6013      	streq	r3, [r2, #0]
 800fe40:	460c      	movne	r4, r1
 800fe42:	e7eb      	b.n	800fe1c <_malloc_r+0x64>
 800fe44:	460c      	mov	r4, r1
 800fe46:	6849      	ldr	r1, [r1, #4]
 800fe48:	e7cc      	b.n	800fde4 <_malloc_r+0x2c>
 800fe4a:	1cc4      	adds	r4, r0, #3
 800fe4c:	f024 0403 	bic.w	r4, r4, #3
 800fe50:	42a0      	cmp	r0, r4
 800fe52:	d005      	beq.n	800fe60 <_malloc_r+0xa8>
 800fe54:	1a21      	subs	r1, r4, r0
 800fe56:	4630      	mov	r0, r6
 800fe58:	f000 f95a 	bl	8010110 <_sbrk_r>
 800fe5c:	3001      	adds	r0, #1
 800fe5e:	d0cf      	beq.n	800fe00 <_malloc_r+0x48>
 800fe60:	6025      	str	r5, [r4, #0]
 800fe62:	e7db      	b.n	800fe1c <_malloc_r+0x64>
 800fe64:	20007b08 	.word	0x20007b08
 800fe68:	20007b0c 	.word	0x20007b0c

0800fe6c <__ssputs_r>:
 800fe6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe70:	688e      	ldr	r6, [r1, #8]
 800fe72:	429e      	cmp	r6, r3
 800fe74:	4682      	mov	sl, r0
 800fe76:	460c      	mov	r4, r1
 800fe78:	4690      	mov	r8, r2
 800fe7a:	4699      	mov	r9, r3
 800fe7c:	d837      	bhi.n	800feee <__ssputs_r+0x82>
 800fe7e:	898a      	ldrh	r2, [r1, #12]
 800fe80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe84:	d031      	beq.n	800feea <__ssputs_r+0x7e>
 800fe86:	6825      	ldr	r5, [r4, #0]
 800fe88:	6909      	ldr	r1, [r1, #16]
 800fe8a:	1a6f      	subs	r7, r5, r1
 800fe8c:	6965      	ldr	r5, [r4, #20]
 800fe8e:	2302      	movs	r3, #2
 800fe90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe94:	fb95 f5f3 	sdiv	r5, r5, r3
 800fe98:	f109 0301 	add.w	r3, r9, #1
 800fe9c:	443b      	add	r3, r7
 800fe9e:	429d      	cmp	r5, r3
 800fea0:	bf38      	it	cc
 800fea2:	461d      	movcc	r5, r3
 800fea4:	0553      	lsls	r3, r2, #21
 800fea6:	d530      	bpl.n	800ff0a <__ssputs_r+0x9e>
 800fea8:	4629      	mov	r1, r5
 800feaa:	f7ff ff85 	bl	800fdb8 <_malloc_r>
 800feae:	4606      	mov	r6, r0
 800feb0:	b950      	cbnz	r0, 800fec8 <__ssputs_r+0x5c>
 800feb2:	230c      	movs	r3, #12
 800feb4:	f8ca 3000 	str.w	r3, [sl]
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800febe:	81a3      	strh	r3, [r4, #12]
 800fec0:	f04f 30ff 	mov.w	r0, #4294967295
 800fec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fec8:	463a      	mov	r2, r7
 800feca:	6921      	ldr	r1, [r4, #16]
 800fecc:	f7fc fd20 	bl	800c910 <memcpy>
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feda:	81a3      	strh	r3, [r4, #12]
 800fedc:	6126      	str	r6, [r4, #16]
 800fede:	6165      	str	r5, [r4, #20]
 800fee0:	443e      	add	r6, r7
 800fee2:	1bed      	subs	r5, r5, r7
 800fee4:	6026      	str	r6, [r4, #0]
 800fee6:	60a5      	str	r5, [r4, #8]
 800fee8:	464e      	mov	r6, r9
 800feea:	454e      	cmp	r6, r9
 800feec:	d900      	bls.n	800fef0 <__ssputs_r+0x84>
 800feee:	464e      	mov	r6, r9
 800fef0:	4632      	mov	r2, r6
 800fef2:	4641      	mov	r1, r8
 800fef4:	6820      	ldr	r0, [r4, #0]
 800fef6:	f000 f93a 	bl	801016e <memmove>
 800fefa:	68a3      	ldr	r3, [r4, #8]
 800fefc:	1b9b      	subs	r3, r3, r6
 800fefe:	60a3      	str	r3, [r4, #8]
 800ff00:	6823      	ldr	r3, [r4, #0]
 800ff02:	441e      	add	r6, r3
 800ff04:	6026      	str	r6, [r4, #0]
 800ff06:	2000      	movs	r0, #0
 800ff08:	e7dc      	b.n	800fec4 <__ssputs_r+0x58>
 800ff0a:	462a      	mov	r2, r5
 800ff0c:	f000 f94a 	bl	80101a4 <_realloc_r>
 800ff10:	4606      	mov	r6, r0
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d1e2      	bne.n	800fedc <__ssputs_r+0x70>
 800ff16:	6921      	ldr	r1, [r4, #16]
 800ff18:	4650      	mov	r0, sl
 800ff1a:	f7ff feff 	bl	800fd1c <_free_r>
 800ff1e:	e7c8      	b.n	800feb2 <__ssputs_r+0x46>

0800ff20 <_svfiprintf_r>:
 800ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff24:	461d      	mov	r5, r3
 800ff26:	898b      	ldrh	r3, [r1, #12]
 800ff28:	061f      	lsls	r7, r3, #24
 800ff2a:	b09d      	sub	sp, #116	; 0x74
 800ff2c:	4680      	mov	r8, r0
 800ff2e:	460c      	mov	r4, r1
 800ff30:	4616      	mov	r6, r2
 800ff32:	d50f      	bpl.n	800ff54 <_svfiprintf_r+0x34>
 800ff34:	690b      	ldr	r3, [r1, #16]
 800ff36:	b96b      	cbnz	r3, 800ff54 <_svfiprintf_r+0x34>
 800ff38:	2140      	movs	r1, #64	; 0x40
 800ff3a:	f7ff ff3d 	bl	800fdb8 <_malloc_r>
 800ff3e:	6020      	str	r0, [r4, #0]
 800ff40:	6120      	str	r0, [r4, #16]
 800ff42:	b928      	cbnz	r0, 800ff50 <_svfiprintf_r+0x30>
 800ff44:	230c      	movs	r3, #12
 800ff46:	f8c8 3000 	str.w	r3, [r8]
 800ff4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff4e:	e0c8      	b.n	80100e2 <_svfiprintf_r+0x1c2>
 800ff50:	2340      	movs	r3, #64	; 0x40
 800ff52:	6163      	str	r3, [r4, #20]
 800ff54:	2300      	movs	r3, #0
 800ff56:	9309      	str	r3, [sp, #36]	; 0x24
 800ff58:	2320      	movs	r3, #32
 800ff5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff5e:	2330      	movs	r3, #48	; 0x30
 800ff60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff64:	9503      	str	r5, [sp, #12]
 800ff66:	f04f 0b01 	mov.w	fp, #1
 800ff6a:	4637      	mov	r7, r6
 800ff6c:	463d      	mov	r5, r7
 800ff6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ff72:	b10b      	cbz	r3, 800ff78 <_svfiprintf_r+0x58>
 800ff74:	2b25      	cmp	r3, #37	; 0x25
 800ff76:	d13e      	bne.n	800fff6 <_svfiprintf_r+0xd6>
 800ff78:	ebb7 0a06 	subs.w	sl, r7, r6
 800ff7c:	d00b      	beq.n	800ff96 <_svfiprintf_r+0x76>
 800ff7e:	4653      	mov	r3, sl
 800ff80:	4632      	mov	r2, r6
 800ff82:	4621      	mov	r1, r4
 800ff84:	4640      	mov	r0, r8
 800ff86:	f7ff ff71 	bl	800fe6c <__ssputs_r>
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	f000 80a4 	beq.w	80100d8 <_svfiprintf_r+0x1b8>
 800ff90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff92:	4453      	add	r3, sl
 800ff94:	9309      	str	r3, [sp, #36]	; 0x24
 800ff96:	783b      	ldrb	r3, [r7, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	f000 809d 	beq.w	80100d8 <_svfiprintf_r+0x1b8>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	f04f 32ff 	mov.w	r2, #4294967295
 800ffa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffa8:	9304      	str	r3, [sp, #16]
 800ffaa:	9307      	str	r3, [sp, #28]
 800ffac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffb0:	931a      	str	r3, [sp, #104]	; 0x68
 800ffb2:	462f      	mov	r7, r5
 800ffb4:	2205      	movs	r2, #5
 800ffb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ffba:	4850      	ldr	r0, [pc, #320]	; (80100fc <_svfiprintf_r+0x1dc>)
 800ffbc:	f7f0 f948 	bl	8000250 <memchr>
 800ffc0:	9b04      	ldr	r3, [sp, #16]
 800ffc2:	b9d0      	cbnz	r0, 800fffa <_svfiprintf_r+0xda>
 800ffc4:	06d9      	lsls	r1, r3, #27
 800ffc6:	bf44      	itt	mi
 800ffc8:	2220      	movmi	r2, #32
 800ffca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ffce:	071a      	lsls	r2, r3, #28
 800ffd0:	bf44      	itt	mi
 800ffd2:	222b      	movmi	r2, #43	; 0x2b
 800ffd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ffd8:	782a      	ldrb	r2, [r5, #0]
 800ffda:	2a2a      	cmp	r2, #42	; 0x2a
 800ffdc:	d015      	beq.n	801000a <_svfiprintf_r+0xea>
 800ffde:	9a07      	ldr	r2, [sp, #28]
 800ffe0:	462f      	mov	r7, r5
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	250a      	movs	r5, #10
 800ffe6:	4639      	mov	r1, r7
 800ffe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffec:	3b30      	subs	r3, #48	; 0x30
 800ffee:	2b09      	cmp	r3, #9
 800fff0:	d94d      	bls.n	801008e <_svfiprintf_r+0x16e>
 800fff2:	b1b8      	cbz	r0, 8010024 <_svfiprintf_r+0x104>
 800fff4:	e00f      	b.n	8010016 <_svfiprintf_r+0xf6>
 800fff6:	462f      	mov	r7, r5
 800fff8:	e7b8      	b.n	800ff6c <_svfiprintf_r+0x4c>
 800fffa:	4a40      	ldr	r2, [pc, #256]	; (80100fc <_svfiprintf_r+0x1dc>)
 800fffc:	1a80      	subs	r0, r0, r2
 800fffe:	fa0b f000 	lsl.w	r0, fp, r0
 8010002:	4318      	orrs	r0, r3
 8010004:	9004      	str	r0, [sp, #16]
 8010006:	463d      	mov	r5, r7
 8010008:	e7d3      	b.n	800ffb2 <_svfiprintf_r+0x92>
 801000a:	9a03      	ldr	r2, [sp, #12]
 801000c:	1d11      	adds	r1, r2, #4
 801000e:	6812      	ldr	r2, [r2, #0]
 8010010:	9103      	str	r1, [sp, #12]
 8010012:	2a00      	cmp	r2, #0
 8010014:	db01      	blt.n	801001a <_svfiprintf_r+0xfa>
 8010016:	9207      	str	r2, [sp, #28]
 8010018:	e004      	b.n	8010024 <_svfiprintf_r+0x104>
 801001a:	4252      	negs	r2, r2
 801001c:	f043 0302 	orr.w	r3, r3, #2
 8010020:	9207      	str	r2, [sp, #28]
 8010022:	9304      	str	r3, [sp, #16]
 8010024:	783b      	ldrb	r3, [r7, #0]
 8010026:	2b2e      	cmp	r3, #46	; 0x2e
 8010028:	d10c      	bne.n	8010044 <_svfiprintf_r+0x124>
 801002a:	787b      	ldrb	r3, [r7, #1]
 801002c:	2b2a      	cmp	r3, #42	; 0x2a
 801002e:	d133      	bne.n	8010098 <_svfiprintf_r+0x178>
 8010030:	9b03      	ldr	r3, [sp, #12]
 8010032:	1d1a      	adds	r2, r3, #4
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	9203      	str	r2, [sp, #12]
 8010038:	2b00      	cmp	r3, #0
 801003a:	bfb8      	it	lt
 801003c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010040:	3702      	adds	r7, #2
 8010042:	9305      	str	r3, [sp, #20]
 8010044:	4d2e      	ldr	r5, [pc, #184]	; (8010100 <_svfiprintf_r+0x1e0>)
 8010046:	7839      	ldrb	r1, [r7, #0]
 8010048:	2203      	movs	r2, #3
 801004a:	4628      	mov	r0, r5
 801004c:	f7f0 f900 	bl	8000250 <memchr>
 8010050:	b138      	cbz	r0, 8010062 <_svfiprintf_r+0x142>
 8010052:	2340      	movs	r3, #64	; 0x40
 8010054:	1b40      	subs	r0, r0, r5
 8010056:	fa03 f000 	lsl.w	r0, r3, r0
 801005a:	9b04      	ldr	r3, [sp, #16]
 801005c:	4303      	orrs	r3, r0
 801005e:	3701      	adds	r7, #1
 8010060:	9304      	str	r3, [sp, #16]
 8010062:	7839      	ldrb	r1, [r7, #0]
 8010064:	4827      	ldr	r0, [pc, #156]	; (8010104 <_svfiprintf_r+0x1e4>)
 8010066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801006a:	2206      	movs	r2, #6
 801006c:	1c7e      	adds	r6, r7, #1
 801006e:	f7f0 f8ef 	bl	8000250 <memchr>
 8010072:	2800      	cmp	r0, #0
 8010074:	d038      	beq.n	80100e8 <_svfiprintf_r+0x1c8>
 8010076:	4b24      	ldr	r3, [pc, #144]	; (8010108 <_svfiprintf_r+0x1e8>)
 8010078:	bb13      	cbnz	r3, 80100c0 <_svfiprintf_r+0x1a0>
 801007a:	9b03      	ldr	r3, [sp, #12]
 801007c:	3307      	adds	r3, #7
 801007e:	f023 0307 	bic.w	r3, r3, #7
 8010082:	3308      	adds	r3, #8
 8010084:	9303      	str	r3, [sp, #12]
 8010086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010088:	444b      	add	r3, r9
 801008a:	9309      	str	r3, [sp, #36]	; 0x24
 801008c:	e76d      	b.n	800ff6a <_svfiprintf_r+0x4a>
 801008e:	fb05 3202 	mla	r2, r5, r2, r3
 8010092:	2001      	movs	r0, #1
 8010094:	460f      	mov	r7, r1
 8010096:	e7a6      	b.n	800ffe6 <_svfiprintf_r+0xc6>
 8010098:	2300      	movs	r3, #0
 801009a:	3701      	adds	r7, #1
 801009c:	9305      	str	r3, [sp, #20]
 801009e:	4619      	mov	r1, r3
 80100a0:	250a      	movs	r5, #10
 80100a2:	4638      	mov	r0, r7
 80100a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100a8:	3a30      	subs	r2, #48	; 0x30
 80100aa:	2a09      	cmp	r2, #9
 80100ac:	d903      	bls.n	80100b6 <_svfiprintf_r+0x196>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d0c8      	beq.n	8010044 <_svfiprintf_r+0x124>
 80100b2:	9105      	str	r1, [sp, #20]
 80100b4:	e7c6      	b.n	8010044 <_svfiprintf_r+0x124>
 80100b6:	fb05 2101 	mla	r1, r5, r1, r2
 80100ba:	2301      	movs	r3, #1
 80100bc:	4607      	mov	r7, r0
 80100be:	e7f0      	b.n	80100a2 <_svfiprintf_r+0x182>
 80100c0:	ab03      	add	r3, sp, #12
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	4622      	mov	r2, r4
 80100c6:	4b11      	ldr	r3, [pc, #68]	; (801010c <_svfiprintf_r+0x1ec>)
 80100c8:	a904      	add	r1, sp, #16
 80100ca:	4640      	mov	r0, r8
 80100cc:	f7fc fcb8 	bl	800ca40 <_printf_float>
 80100d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80100d4:	4681      	mov	r9, r0
 80100d6:	d1d6      	bne.n	8010086 <_svfiprintf_r+0x166>
 80100d8:	89a3      	ldrh	r3, [r4, #12]
 80100da:	065b      	lsls	r3, r3, #25
 80100dc:	f53f af35 	bmi.w	800ff4a <_svfiprintf_r+0x2a>
 80100e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100e2:	b01d      	add	sp, #116	; 0x74
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e8:	ab03      	add	r3, sp, #12
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	4622      	mov	r2, r4
 80100ee:	4b07      	ldr	r3, [pc, #28]	; (801010c <_svfiprintf_r+0x1ec>)
 80100f0:	a904      	add	r1, sp, #16
 80100f2:	4640      	mov	r0, r8
 80100f4:	f7fc ff46 	bl	800cf84 <_printf_i>
 80100f8:	e7ea      	b.n	80100d0 <_svfiprintf_r+0x1b0>
 80100fa:	bf00      	nop
 80100fc:	080105d4 	.word	0x080105d4
 8010100:	080105da 	.word	0x080105da
 8010104:	080105de 	.word	0x080105de
 8010108:	0800ca41 	.word	0x0800ca41
 801010c:	0800fe6d 	.word	0x0800fe6d

08010110 <_sbrk_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4c06      	ldr	r4, [pc, #24]	; (801012c <_sbrk_r+0x1c>)
 8010114:	2300      	movs	r3, #0
 8010116:	4605      	mov	r5, r0
 8010118:	4608      	mov	r0, r1
 801011a:	6023      	str	r3, [r4, #0]
 801011c:	f7f3 fd70 	bl	8003c00 <_sbrk>
 8010120:	1c43      	adds	r3, r0, #1
 8010122:	d102      	bne.n	801012a <_sbrk_r+0x1a>
 8010124:	6823      	ldr	r3, [r4, #0]
 8010126:	b103      	cbz	r3, 801012a <_sbrk_r+0x1a>
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	bd38      	pop	{r3, r4, r5, pc}
 801012c:	2000fb70 	.word	0x2000fb70

08010130 <strncmp>:
 8010130:	b510      	push	{r4, lr}
 8010132:	b16a      	cbz	r2, 8010150 <strncmp+0x20>
 8010134:	3901      	subs	r1, #1
 8010136:	1884      	adds	r4, r0, r2
 8010138:	f810 3b01 	ldrb.w	r3, [r0], #1
 801013c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010140:	4293      	cmp	r3, r2
 8010142:	d103      	bne.n	801014c <strncmp+0x1c>
 8010144:	42a0      	cmp	r0, r4
 8010146:	d001      	beq.n	801014c <strncmp+0x1c>
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1f5      	bne.n	8010138 <strncmp+0x8>
 801014c:	1a98      	subs	r0, r3, r2
 801014e:	bd10      	pop	{r4, pc}
 8010150:	4610      	mov	r0, r2
 8010152:	e7fc      	b.n	801014e <strncmp+0x1e>

08010154 <__ascii_wctomb>:
 8010154:	b149      	cbz	r1, 801016a <__ascii_wctomb+0x16>
 8010156:	2aff      	cmp	r2, #255	; 0xff
 8010158:	bf85      	ittet	hi
 801015a:	238a      	movhi	r3, #138	; 0x8a
 801015c:	6003      	strhi	r3, [r0, #0]
 801015e:	700a      	strbls	r2, [r1, #0]
 8010160:	f04f 30ff 	movhi.w	r0, #4294967295
 8010164:	bf98      	it	ls
 8010166:	2001      	movls	r0, #1
 8010168:	4770      	bx	lr
 801016a:	4608      	mov	r0, r1
 801016c:	4770      	bx	lr

0801016e <memmove>:
 801016e:	4288      	cmp	r0, r1
 8010170:	b510      	push	{r4, lr}
 8010172:	eb01 0302 	add.w	r3, r1, r2
 8010176:	d807      	bhi.n	8010188 <memmove+0x1a>
 8010178:	1e42      	subs	r2, r0, #1
 801017a:	4299      	cmp	r1, r3
 801017c:	d00a      	beq.n	8010194 <memmove+0x26>
 801017e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010182:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010186:	e7f8      	b.n	801017a <memmove+0xc>
 8010188:	4283      	cmp	r3, r0
 801018a:	d9f5      	bls.n	8010178 <memmove+0xa>
 801018c:	1881      	adds	r1, r0, r2
 801018e:	1ad2      	subs	r2, r2, r3
 8010190:	42d3      	cmn	r3, r2
 8010192:	d100      	bne.n	8010196 <memmove+0x28>
 8010194:	bd10      	pop	{r4, pc}
 8010196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801019a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801019e:	e7f7      	b.n	8010190 <memmove+0x22>

080101a0 <__malloc_lock>:
 80101a0:	4770      	bx	lr

080101a2 <__malloc_unlock>:
 80101a2:	4770      	bx	lr

080101a4 <_realloc_r>:
 80101a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a6:	4607      	mov	r7, r0
 80101a8:	4614      	mov	r4, r2
 80101aa:	460e      	mov	r6, r1
 80101ac:	b921      	cbnz	r1, 80101b8 <_realloc_r+0x14>
 80101ae:	4611      	mov	r1, r2
 80101b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80101b4:	f7ff be00 	b.w	800fdb8 <_malloc_r>
 80101b8:	b922      	cbnz	r2, 80101c4 <_realloc_r+0x20>
 80101ba:	f7ff fdaf 	bl	800fd1c <_free_r>
 80101be:	4625      	mov	r5, r4
 80101c0:	4628      	mov	r0, r5
 80101c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101c4:	f000 f814 	bl	80101f0 <_malloc_usable_size_r>
 80101c8:	42a0      	cmp	r0, r4
 80101ca:	d20f      	bcs.n	80101ec <_realloc_r+0x48>
 80101cc:	4621      	mov	r1, r4
 80101ce:	4638      	mov	r0, r7
 80101d0:	f7ff fdf2 	bl	800fdb8 <_malloc_r>
 80101d4:	4605      	mov	r5, r0
 80101d6:	2800      	cmp	r0, #0
 80101d8:	d0f2      	beq.n	80101c0 <_realloc_r+0x1c>
 80101da:	4631      	mov	r1, r6
 80101dc:	4622      	mov	r2, r4
 80101de:	f7fc fb97 	bl	800c910 <memcpy>
 80101e2:	4631      	mov	r1, r6
 80101e4:	4638      	mov	r0, r7
 80101e6:	f7ff fd99 	bl	800fd1c <_free_r>
 80101ea:	e7e9      	b.n	80101c0 <_realloc_r+0x1c>
 80101ec:	4635      	mov	r5, r6
 80101ee:	e7e7      	b.n	80101c0 <_realloc_r+0x1c>

080101f0 <_malloc_usable_size_r>:
 80101f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101f4:	1f18      	subs	r0, r3, #4
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	bfbc      	itt	lt
 80101fa:	580b      	ldrlt	r3, [r1, r0]
 80101fc:	18c0      	addlt	r0, r0, r3
 80101fe:	4770      	bx	lr

08010200 <_init>:
 8010200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010202:	bf00      	nop
 8010204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010206:	bc08      	pop	{r3}
 8010208:	469e      	mov	lr, r3
 801020a:	4770      	bx	lr

0801020c <_fini>:
 801020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020e:	bf00      	nop
 8010210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010212:	bc08      	pop	{r3}
 8010214:	469e      	mov	lr, r3
 8010216:	4770      	bx	lr
