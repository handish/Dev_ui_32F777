
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001656c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001268  08016770  08016770  00026770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080179d8  080179d8  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  080179d8  080179d8  000279d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080179e0  080179e0  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080179e0  080179e0  000279e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080179e4  080179e4  000279e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080179e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030804  20000378  08017d60  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20030b7c  08017d60  00030b7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003213d  00000000  00000000  000303a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005313  00000000  00000000  000624e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022c8  00000000  00000000  000677f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002080  00000000  00000000  00069ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000700c  00000000  00000000  0006bb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d6ec  00000000  00000000  00072b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011b7d8  00000000  00000000  00090238  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aba10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3a0  00000000  00000000  001aba8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000378 	.word	0x20000378
 800021c:	00000000 	.word	0x00000000
 8000220:	08016754 	.word	0x08016754

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000037c 	.word	0x2000037c
 800023c:	08016754 	.word	0x08016754

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f00a fab5 	bl	800ab90 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f00a fab0 	bl	800ab90 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f00a faab 	bl	800ab90 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f00a faa5 	bl	800ab90 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f012 f844 	bl	8012704 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20028aa8 	.word	0x20028aa8
 8000694:	20028ab0 	.word	0x20028ab0

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f00a fa74 	bl	800ab90 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00c fdb4 	bl	800d224 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f00a fa65 	bl	800ab90 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20028ab0 	.word	0x20028ab0

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f011 ffdd 	bl	801271a <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f00a f9df 	bl	800ab90 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00c fd23 	bl	800d224 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f00a f9d4 	bl	800ab90 <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00c fd0c 	bl	800d224 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00c fd01 	bl	800d224 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00c fcf8 	bl	800d224 <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00c fce6 	bl	800d224 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00c fcdb 	bl	800d224 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00c fcd2 	bl	800d224 <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f00a f95b 	bl	800ab90 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00c fc9f 	bl	800d224 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f00a f950 	bl	800ab90 <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	20000394 	.word	0x20000394
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20028ab0 	.word	0x20028ab0
 8000918:	20003273 	.word	0x20003273

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20028aaa 	.word	0x20028aaa
 8000964:	20028aac 	.word	0x20028aac
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f011 fece 	bl	801271a <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000394 	.word	0x20000394

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20028aa8 	.word	0x20028aa8
 8000a3c:	20000394 	.word	0x20000394
 8000a40:	08016ee0 	.word	0x08016ee0
 8000a44:	08016ed8 	.word	0x08016ed8

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000394 	.word	0x20000394
 8000aec:	20028aa8 	.word	0x20028aa8
 8000af0:	08016ee0 	.word	0x08016ee0
 8000af4:	08016ed8 	.word	0x08016ed8

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000394 	.word	0x20000394
 8000cc4:	08016ee8 	.word	0x08016ee8
 8000cc8:	08016ef0 	.word	0x08016ef0
 8000ccc:	20028aa8 	.word	0x20028aa8

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	08016ef8 	.word	0x08016ef8
 8001154:	08016f00 	.word	0x08016f00
 8001158:	20000394 	.word	0x20000394
 800115c:	20028aa8 	.word	0x20028aa8

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20028aaa 	.word	0x20028aaa

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f007 fa9e 	bl	8009242 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f9bd 	bl	8002084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 fff3 	bl	8002cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f000 ffaf 	bl	8002c70 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 fa5f 	bl	80021d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fb3b 	bl	8002390 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 fbb5 	bl	8002488 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fc4b 	bl	80025b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fc89 	bl	8002638 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fcc7 	bl	80026b8 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fd07 	bl	800273c <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fd45 	bl	80027bc <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fd69 	bl	8002808 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fda5 	bl	8002884 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fde1 	bl	8002900 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fe57 	bl	80029f0 <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 fed7 	bl	8002af4 <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 ff05 	bl	8002b54 <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 ff33 	bl	8002bb4 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 ff61 	bl	8002c14 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f97f 	bl	8003054 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8001d56:	220c      	movs	r2, #12
 8001d58:	2100      	movs	r1, #0
 8001d5a:	48a7      	ldr	r0, [pc, #668]	; (8001ff8 <main+0x2fc>)
 8001d5c:	f010 fcdd 	bl	801271a <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	49a5      	ldr	r1, [pc, #660]	; (8001ffc <main+0x300>)
 8001d66:	48a6      	ldr	r0, [pc, #664]	; (8002000 <main+0x304>)
 8001d68:	f007 fc40 	bl	80095ec <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	49a4      	ldr	r1, [pc, #656]	; (8002004 <main+0x308>)
 8001d72:	48a5      	ldr	r0, [pc, #660]	; (8002008 <main+0x30c>)
 8001d74:	f007 fc3a 	bl	80095ec <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	49a3      	ldr	r1, [pc, #652]	; (800200c <main+0x310>)
 8001d7e:	48a4      	ldr	r0, [pc, #656]	; (8002010 <main+0x314>)
 8001d80:	f007 fc34 	bl	80095ec <HAL_ADC_Start_DMA>
   int x=1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	607b      	str	r3, [r7, #4]



  configureLEDDriver();
 8001d88:	f001 fc08 	bl	800359c <configureLEDDriver>
    setErrorLED(0,ON);
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f001 fc90 	bl	80036b4 <setErrorLED>
    HAL_Delay(1000);
 8001d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d98:	f007 fa80 	bl	800929c <HAL_Delay>
    setErrorLED(1,OFF);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f001 fc88 	bl	80036b4 <setErrorLED>
    setErrorLED(8,ON);
 8001da4:	2101      	movs	r1, #1
 8001da6:	2008      	movs	r0, #8
 8001da8:	f001 fc84 	bl	80036b4 <setErrorLED>
    HAL_Delay(1000);
 8001dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db0:	f007 fa74 	bl	800929c <HAL_Delay>
    setErrorLED(8,OFF);
 8001db4:	2100      	movs	r1, #0
 8001db6:	2008      	movs	r0, #8
 8001db8:	f001 fc7c 	bl	80036b4 <setErrorLED>
    setErrorLED(9,ON);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	2009      	movs	r0, #9
 8001dc0:	f001 fc78 	bl	80036b4 <setErrorLED>
    HAL_Delay(1000);
 8001dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc8:	f007 fa68 	bl	800929c <HAL_Delay>
    setErrorLED(8,ON);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2008      	movs	r0, #8
 8001dd0:	f001 fc70 	bl	80036b4 <setErrorLED>
    setErrorLED(9,ON);
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2009      	movs	r0, #9
 8001dd8:	f001 fc6c 	bl	80036b4 <setErrorLED>
    HAL_Delay(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de0:	f007 fa5c 	bl	800929c <HAL_Delay>
    setErrorLED(9,OFF);
 8001de4:	2100      	movs	r1, #0
 8001de6:	2009      	movs	r0, #9
 8001de8:	f001 fc64 	bl	80036b4 <setErrorLED>
    BTN0_ON;
 8001dec:	2201      	movs	r2, #1
 8001dee:	2104      	movs	r1, #4
 8001df0:	4888      	ldr	r0, [pc, #544]	; (8002014 <main+0x318>)
 8001df2:	f008 fecd 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001df6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dfa:	f007 fa4f 	bl	800929c <HAL_Delay>
    BTN1_ON;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2108      	movs	r1, #8
 8001e02:	4884      	ldr	r0, [pc, #528]	; (8002014 <main+0x318>)
 8001e04:	f008 fec4 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e0c:	f007 fa46 	bl	800929c <HAL_Delay>
    BTN2_ON;
 8001e10:	2201      	movs	r2, #1
 8001e12:	2110      	movs	r1, #16
 8001e14:	487f      	ldr	r0, [pc, #508]	; (8002014 <main+0x318>)
 8001e16:	f008 febb 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e1e:	f007 fa3d 	bl	800929c <HAL_Delay>
    BTN3_ON;
 8001e22:	2201      	movs	r2, #1
 8001e24:	2120      	movs	r1, #32
 8001e26:	487b      	ldr	r0, [pc, #492]	; (8002014 <main+0x318>)
 8001e28:	f008 feb2 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e30:	f007 fa34 	bl	800929c <HAL_Delay>
    BTN4_ON;
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3a:	4876      	ldr	r0, [pc, #472]	; (8002014 <main+0x318>)
 8001e3c:	f008 fea8 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e44:	f007 fa2a 	bl	800929c <HAL_Delay>
    BTN5_ON;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	4871      	ldr	r0, [pc, #452]	; (8002014 <main+0x318>)
 8001e50:	f008 fe9e 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e58:	f007 fa20 	bl	800929c <HAL_Delay>
    EDL_SW_ON;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e62:	486d      	ldr	r0, [pc, #436]	; (8002018 <main+0x31c>)
 8001e64:	f008 fe94 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e6c:	f007 fa16 	bl	800929c <HAL_Delay>
    EX_SW_ON;
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e76:	4868      	ldr	r0, [pc, #416]	; (8002018 <main+0x31c>)
 8001e78:	f008 fe8a 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e80:	f007 fa0c 	bl	800929c <HAL_Delay>
    BTN0_OFF;
 8001e84:	2200      	movs	r2, #0
 8001e86:	2104      	movs	r1, #4
 8001e88:	4862      	ldr	r0, [pc, #392]	; (8002014 <main+0x318>)
 8001e8a:	f008 fe81 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e92:	f007 fa03 	bl	800929c <HAL_Delay>
    BTN1_OFF;
 8001e96:	2200      	movs	r2, #0
 8001e98:	2108      	movs	r1, #8
 8001e9a:	485e      	ldr	r0, [pc, #376]	; (8002014 <main+0x318>)
 8001e9c:	f008 fe78 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ea0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ea4:	f007 f9fa 	bl	800929c <HAL_Delay>
    BTN2_OFF;
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2110      	movs	r1, #16
 8001eac:	4859      	ldr	r0, [pc, #356]	; (8002014 <main+0x318>)
 8001eae:	f008 fe6f 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001eb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001eb6:	f007 f9f1 	bl	800929c <HAL_Delay>
    BTN3_OFF;
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4855      	ldr	r0, [pc, #340]	; (8002014 <main+0x318>)
 8001ec0:	f008 fe66 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ec4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ec8:	f007 f9e8 	bl	800929c <HAL_Delay>
    BTN4_OFF;
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	4850      	ldr	r0, [pc, #320]	; (8002014 <main+0x318>)
 8001ed4:	f008 fe5c 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ed8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001edc:	f007 f9de 	bl	800929c <HAL_Delay>
    BTN5_OFF;
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee6:	484b      	ldr	r0, [pc, #300]	; (8002014 <main+0x318>)
 8001ee8:	f008 fe52 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001eec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ef0:	f007 f9d4 	bl	800929c <HAL_Delay>
    EDL_SW_OFF;
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efa:	4847      	ldr	r0, [pc, #284]	; (8002018 <main+0x31c>)
 8001efc:	f008 fe48 	bl	800ab90 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f04:	f007 f9ca 	bl	800929c <HAL_Delay>
    EX_SW_OFF;
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f0e:	4842      	ldr	r0, [pc, #264]	; (8002018 <main+0x31c>)
 8001f10:	f008 fe3e 	bl	800ab90 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f14:	f00d fcb4 	bl	800f880 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001f18:	4a40      	ldr	r2, [pc, #256]	; (800201c <main+0x320>)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4840      	ldr	r0, [pc, #256]	; (8002020 <main+0x324>)
 8001f1e:	f00d fd19 	bl	800f954 <osThreadNew>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <main+0x328>)
 8001f26:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001f28:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <main+0x32c>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	483f      	ldr	r0, [pc, #252]	; (800202c <main+0x330>)
 8001f2e:	f00d fd11 	bl	800f954 <osThreadNew>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <main+0x334>)
 8001f36:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001f38:	4a3e      	ldr	r2, [pc, #248]	; (8002034 <main+0x338>)
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	483e      	ldr	r0, [pc, #248]	; (8002038 <main+0x33c>)
 8001f3e:	f00d fd09 	bl	800f954 <osThreadNew>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <main+0x340>)
 8001f46:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001f48:	4a3d      	ldr	r2, [pc, #244]	; (8002040 <main+0x344>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	483d      	ldr	r0, [pc, #244]	; (8002044 <main+0x348>)
 8001f4e:	f00d fd01 	bl	800f954 <osThreadNew>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <main+0x34c>)
 8001f56:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001f58:	4a3c      	ldr	r2, [pc, #240]	; (800204c <main+0x350>)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	483c      	ldr	r0, [pc, #240]	; (8002050 <main+0x354>)
 8001f5e:	f00d fcf9 	bl	800f954 <osThreadNew>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <main+0x358>)
 8001f66:	601a      	str	r2, [r3, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 8001f68:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <main+0x35c>)
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	483b      	ldr	r0, [pc, #236]	; (800205c <main+0x360>)
 8001f6e:	f00d fcf1 	bl	800f954 <osThreadNew>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <main+0x364>)
 8001f76:	601a      	str	r2, [r3, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <main+0x368>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	483a      	ldr	r0, [pc, #232]	; (8002068 <main+0x36c>)
 8001f7e:	f00d fce9 	bl	800f954 <osThreadNew>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <main+0x370>)
 8001f86:	601a      	str	r2, [r3, #0]

  /* creation of bootButtons */
  bootButtonsHandle = osThreadNew(startBootButtons, NULL, &bootButtons_attributes);
 8001f88:	4a39      	ldr	r2, [pc, #228]	; (8002070 <main+0x374>)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4839      	ldr	r0, [pc, #228]	; (8002074 <main+0x378>)
 8001f8e:	f00d fce1 	bl	800f954 <osThreadNew>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b38      	ldr	r3, [pc, #224]	; (8002078 <main+0x37c>)
 8001f96:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f98:	f00d fca6 	bl	800f8e8 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8001f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa0:	f007 f97c 	bl	800929c <HAL_Delay>
	  if (!x) {
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d112      	bne.n	8001fd0 <main+0x2d4>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb0:	4832      	ldr	r0, [pc, #200]	; (800207c <main+0x380>)
 8001fb2:	f008 fded 	bl	800ab90 <HAL_GPIO_WritePin>
		  x=1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	4830      	ldr	r0, [pc, #192]	; (8002080 <main+0x384>)
 8001fc0:	f008 fde6 	bl	800ab90 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	482d      	ldr	r0, [pc, #180]	; (8002080 <main+0x384>)
 8001fca:	f008 fde1 	bl	800ab90 <HAL_GPIO_WritePin>
 8001fce:	e7e5      	b.n	8001f9c <main+0x2a0>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd6:	4829      	ldr	r0, [pc, #164]	; (800207c <main+0x380>)
 8001fd8:	f008 fdda 	bl	800ab90 <HAL_GPIO_WritePin>
		  x=0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	4826      	ldr	r0, [pc, #152]	; (8002080 <main+0x384>)
 8001fe6:	f008 fdd3 	bl	800ab90 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2110      	movs	r1, #16
 8001fee:	4824      	ldr	r0, [pc, #144]	; (8002080 <main+0x384>)
 8001ff0:	f008 fdce 	bl	800ab90 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001ff4:	e7d2      	b.n	8001f9c <main+0x2a0>
 8001ff6:	bf00      	nop
 8001ff8:	2002e234 	.word	0x2002e234
 8001ffc:	20029268 	.word	0x20029268
 8002000:	2002b9fc 	.word	0x2002b9fc
 8002004:	2002e2c8 	.word	0x2002e2c8
 8002008:	20028ce0 	.word	0x20028ce0
 800200c:	2002bb24 	.word	0x2002bb24
 8002010:	2002ba48 	.word	0x2002ba48
 8002014:	40021400 	.word	0x40021400
 8002018:	40020400 	.word	0x40020400
 800201c:	08016f08 	.word	0x08016f08
 8002020:	08004175 	.word	0x08004175
 8002024:	2002e2c4 	.word	0x2002e2c4
 8002028:	08016f2c 	.word	0x08016f2c
 800202c:	08004195 	.word	0x08004195
 8002030:	20030a9c 	.word	0x20030a9c
 8002034:	08016f50 	.word	0x08016f50
 8002038:	08004215 	.word	0x08004215
 800203c:	20030a98 	.word	0x20030a98
 8002040:	08016f74 	.word	0x08016f74
 8002044:	080042dd 	.word	0x080042dd
 8002048:	2002ba44 	.word	0x2002ba44
 800204c:	08016f98 	.word	0x08016f98
 8002050:	08004409 	.word	0x08004409
 8002054:	2002bb20 	.word	0x2002bb20
 8002058:	08016fbc 	.word	0x08016fbc
 800205c:	08004589 	.word	0x08004589
 8002060:	20028cd0 	.word	0x20028cd0
 8002064:	08016fe0 	.word	0x08016fe0
 8002068:	0800483d 	.word	0x0800483d
 800206c:	2002e240 	.word	0x2002e240
 8002070:	08017004 	.word	0x08017004
 8002074:	08004a4d 	.word	0x08004a4d
 8002078:	2002b978 	.word	0x2002b978
 800207c:	40022000 	.word	0x40022000
 8002080:	40021000 	.word	0x40021000

08002084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0b8      	sub	sp, #224	; 0xe0
 8002088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800208e:	2234      	movs	r2, #52	; 0x34
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f010 fb41 	bl	801271a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	2290      	movs	r2, #144	; 0x90
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f010 fb32 	bl	801271a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020b6:	f009 fe93 	bl	800bde0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <SystemClock_Config+0x144>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a42      	ldr	r2, [pc, #264]	; (80021c8 <SystemClock_Config+0x144>)
 80020c0:	f023 0318 	bic.w	r3, r3, #24
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <SystemClock_Config+0x144>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <SystemClock_Config+0x144>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <SystemClock_Config+0x144>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <SystemClock_Config+0x148>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020e6:	4a39      	ldr	r2, [pc, #228]	; (80021cc <SystemClock_Config+0x148>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <SystemClock_Config+0x148>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80020fa:	2305      	movs	r3, #5
 80020fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002108:	2301      	movs	r3, #1
 800210a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002114:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 800211c:	230f      	movs	r3, #15
 800211e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002122:	2390      	movs	r3, #144	; 0x90
 8002124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800212e:	2305      	movs	r3, #5
 8002130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002134:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002138:	4618      	mov	r0, r3
 800213a:	f009 fe61 	bl	800be00 <HAL_RCC_OscConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002144:	f002 fe9e 	bl	8004e84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002148:	230f      	movs	r3, #15
 800214a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800215a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800215e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800216a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800216e:	2103      	movs	r1, #3
 8002170:	4618      	mov	r0, r3
 8002172:	f00a f8f3 	bl	800c35c <HAL_RCC_ClockConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800217c:	f002 fe82 	bl	8004e84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <SystemClock_Config+0x14c>)
 8002182:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800218a:	2300      	movs	r3, #0
 800218c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800218e:	2300      	movs	r3, #0
 8002190:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002192:	2300      	movs	r3, #0
 8002194:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002196:	2300      	movs	r3, #0
 8002198:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800219a:	2300      	movs	r3, #0
 800219c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800219e:	2300      	movs	r3, #0
 80021a0:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00a fad7 	bl	800c764 <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80021bc:	f002 fe62 	bl	8004e84 <Error_Handler>
  }
}
 80021c0:	bf00      	nop
 80021c2:	37e0      	adds	r7, #224	; 0xe0
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	0023d620 	.word	0x0023d620

080021d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80021e8:	4a67      	ldr	r2, [pc, #412]	; (8002388 <MX_ADC1_Init+0x1b4>)
 80021ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021ec:	4b65      	ldr	r3, [pc, #404]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80021ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002200:	4b60      	ldr	r3, [pc, #384]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002202:	2201      	movs	r2, #1
 8002204:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002210:	2200      	movs	r2, #0
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002214:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002216:	4a5d      	ldr	r2, [pc, #372]	; (800238c <MX_ADC1_Init+0x1b8>)
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800221a:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <MX_ADC1_Init+0x1b0>)
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8002220:	4b58      	ldr	r3, [pc, #352]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002222:	220b      	movs	r2, #11
 8002224:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002226:	4b57      	ldr	r3, [pc, #348]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800222e:	4b55      	ldr	r3, [pc, #340]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002230:	2201      	movs	r2, #1
 8002232:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002234:	4853      	ldr	r0, [pc, #332]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002236:	f007 f853 	bl	80092e0 <HAL_ADC_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002240:	f002 fe20 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002244:	2303      	movs	r3, #3
 8002246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002248:	2301      	movs	r3, #1
 800224a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800224c:	2307      	movs	r3, #7
 800224e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	4619      	mov	r1, r3
 8002254:	484b      	ldr	r0, [pc, #300]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002256:	f007 fb1f 	bl	8009898 <HAL_ADC_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002260:	f002 fe10 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002264:	2304      	movs	r3, #4
 8002266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002268:	2302      	movs	r3, #2
 800226a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800226c:	463b      	mov	r3, r7
 800226e:	4619      	mov	r1, r3
 8002270:	4844      	ldr	r0, [pc, #272]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002272:	f007 fb11 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800227c:	f002 fe02 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002280:	2305      	movs	r3, #5
 8002282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002284:	2303      	movs	r3, #3
 8002286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002288:	463b      	mov	r3, r7
 800228a:	4619      	mov	r1, r3
 800228c:	483d      	ldr	r0, [pc, #244]	; (8002384 <MX_ADC1_Init+0x1b0>)
 800228e:	f007 fb03 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002298:	f002 fdf4 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800229c:	2306      	movs	r3, #6
 800229e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022a0:	2304      	movs	r3, #4
 80022a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022a4:	463b      	mov	r3, r7
 80022a6:	4619      	mov	r1, r3
 80022a8:	4836      	ldr	r0, [pc, #216]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80022aa:	f007 faf5 	bl	8009898 <HAL_ADC_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80022b4:	f002 fde6 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80022b8:	2307      	movs	r3, #7
 80022ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80022bc:	2305      	movs	r3, #5
 80022be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	4619      	mov	r1, r3
 80022c4:	482f      	ldr	r0, [pc, #188]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80022c6:	f007 fae7 	bl	8009898 <HAL_ADC_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80022d0:	f002 fdd8 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80022d4:	2308      	movs	r3, #8
 80022d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80022d8:	2306      	movs	r3, #6
 80022da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022dc:	463b      	mov	r3, r7
 80022de:	4619      	mov	r1, r3
 80022e0:	4828      	ldr	r0, [pc, #160]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80022e2:	f007 fad9 	bl	8009898 <HAL_ADC_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80022ec:	f002 fdca 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022f0:	2309      	movs	r3, #9
 80022f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80022f4:	2307      	movs	r3, #7
 80022f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4821      	ldr	r0, [pc, #132]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80022fe:	f007 facb 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002308:	f002 fdbc 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800230c:	230a      	movs	r3, #10
 800230e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002310:	2308      	movs	r3, #8
 8002312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	4619      	mov	r1, r3
 8002318:	481a      	ldr	r0, [pc, #104]	; (8002384 <MX_ADC1_Init+0x1b0>)
 800231a:	f007 fabd 	bl	8009898 <HAL_ADC_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002324:	f002 fdae 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002328:	230b      	movs	r3, #11
 800232a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800232c:	2309      	movs	r3, #9
 800232e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002330:	463b      	mov	r3, r7
 8002332:	4619      	mov	r1, r3
 8002334:	4813      	ldr	r0, [pc, #76]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002336:	f007 faaf 	bl	8009898 <HAL_ADC_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002340:	f002 fda0 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002344:	230c      	movs	r3, #12
 8002346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002348:	230a      	movs	r3, #10
 800234a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	480c      	ldr	r0, [pc, #48]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002352:	f007 faa1 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800235c:	f002 fd92 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002360:	230d      	movs	r3, #13
 8002362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002364:	230b      	movs	r3, #11
 8002366:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_ADC1_Init+0x1b0>)
 800236e:	f007 fa93 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002378:	f002 fd84 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2002b9fc 	.word	0x2002b9fc
 8002388:	40012000 	.word	0x40012000
 800238c:	0f000001 	.word	0x0f000001

08002390 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002396:	463b      	mov	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <MX_ADC2_Init+0xec>)
 80023a4:	4a36      	ldr	r2, [pc, #216]	; (8002480 <MX_ADC2_Init+0xf0>)
 80023a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <MX_ADC2_Init+0xec>)
 80023aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80023b0:	4b32      	ldr	r3, [pc, #200]	; (800247c <MX_ADC2_Init+0xec>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <MX_ADC2_Init+0xec>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <MX_ADC2_Init+0xec>)
 80023be:	2201      	movs	r2, #1
 80023c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023c2:	4b2e      	ldr	r3, [pc, #184]	; (800247c <MX_ADC2_Init+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023ca:	4b2c      	ldr	r3, [pc, #176]	; (800247c <MX_ADC2_Init+0xec>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023d0:	4b2a      	ldr	r3, [pc, #168]	; (800247c <MX_ADC2_Init+0xec>)
 80023d2:	4a2c      	ldr	r2, [pc, #176]	; (8002484 <MX_ADC2_Init+0xf4>)
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <MX_ADC2_Init+0xec>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <MX_ADC2_Init+0xec>)
 80023de:	2204      	movs	r2, #4
 80023e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <MX_ADC2_Init+0xec>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <MX_ADC2_Init+0xec>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023f0:	4822      	ldr	r0, [pc, #136]	; (800247c <MX_ADC2_Init+0xec>)
 80023f2:	f006 ff75 	bl	80092e0 <HAL_ADC_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80023fc:	f002 fd42 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002400:	2300      	movs	r3, #0
 8002402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002404:	2301      	movs	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002408:	2307      	movs	r3, #7
 800240a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	481a      	ldr	r0, [pc, #104]	; (800247c <MX_ADC2_Init+0xec>)
 8002412:	f007 fa41 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800241c:	f002 fd32 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002420:	2301      	movs	r3, #1
 8002422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002424:	2302      	movs	r3, #2
 8002426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002428:	463b      	mov	r3, r7
 800242a:	4619      	mov	r1, r3
 800242c:	4813      	ldr	r0, [pc, #76]	; (800247c <MX_ADC2_Init+0xec>)
 800242e:	f007 fa33 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002438:	f002 fd24 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800243c:	230e      	movs	r3, #14
 800243e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002440:	2303      	movs	r3, #3
 8002442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002444:	463b      	mov	r3, r7
 8002446:	4619      	mov	r1, r3
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <MX_ADC2_Init+0xec>)
 800244a:	f007 fa25 	bl	8009898 <HAL_ADC_ConfigChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002454:	f002 fd16 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002458:	230f      	movs	r3, #15
 800245a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800245c:	2304      	movs	r3, #4
 800245e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002460:	463b      	mov	r3, r7
 8002462:	4619      	mov	r1, r3
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <MX_ADC2_Init+0xec>)
 8002466:	f007 fa17 	bl	8009898 <HAL_ADC_ConfigChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002470:	f002 fd08 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20028ce0 	.word	0x20028ce0
 8002480:	40012100 	.word	0x40012100
 8002484:	0f000001 	.word	0x0f000001

08002488 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800248e:	463b      	mov	r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <MX_ADC3_Init+0x124>)
 800249c:	4a44      	ldr	r2, [pc, #272]	; (80025b0 <MX_ADC3_Init+0x128>)
 800249e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <MX_ADC3_Init+0x124>)
 80024a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024a6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80024a8:	4b40      	ldr	r3, [pc, #256]	; (80025ac <MX_ADC3_Init+0x124>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <MX_ADC3_Init+0x124>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <MX_ADC3_Init+0x124>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80024ba:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <MX_ADC3_Init+0x124>)
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <MX_ADC3_Init+0x124>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024c8:	4b38      	ldr	r3, [pc, #224]	; (80025ac <MX_ADC3_Init+0x124>)
 80024ca:	4a3a      	ldr	r2, [pc, #232]	; (80025b4 <MX_ADC3_Init+0x12c>)
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <MX_ADC3_Init+0x124>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <MX_ADC3_Init+0x124>)
 80024d6:	2206      	movs	r2, #6
 80024d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <MX_ADC3_Init+0x124>)
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024e2:	4b32      	ldr	r3, [pc, #200]	; (80025ac <MX_ADC3_Init+0x124>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80024e8:	4830      	ldr	r0, [pc, #192]	; (80025ac <MX_ADC3_Init+0x124>)
 80024ea:	f006 fef9 	bl	80092e0 <HAL_ADC_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80024f4:	f002 fcc6 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024f8:	2302      	movs	r3, #2
 80024fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024fc:	2301      	movs	r3, #1
 80024fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002500:	2307      	movs	r3, #7
 8002502:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4828      	ldr	r0, [pc, #160]	; (80025ac <MX_ADC3_Init+0x124>)
 800250a:	f007 f9c5 	bl	8009898 <HAL_ADC_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002514:	f002 fcb6 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002518:	2304      	movs	r3, #4
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800251c:	2302      	movs	r3, #2
 800251e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	4821      	ldr	r0, [pc, #132]	; (80025ac <MX_ADC3_Init+0x124>)
 8002526:	f007 f9b7 	bl	8009898 <HAL_ADC_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8002530:	f002 fca8 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002534:	2305      	movs	r3, #5
 8002536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002538:	2303      	movs	r3, #3
 800253a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	481a      	ldr	r0, [pc, #104]	; (80025ac <MX_ADC3_Init+0x124>)
 8002542:	f007 f9a9 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 800254c:	f002 fc9a 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002550:	2306      	movs	r3, #6
 8002552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002554:	2304      	movs	r3, #4
 8002556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	4813      	ldr	r0, [pc, #76]	; (80025ac <MX_ADC3_Init+0x124>)
 800255e:	f007 f99b 	bl	8009898 <HAL_ADC_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8002568:	f002 fc8c 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800256c:	2307      	movs	r3, #7
 800256e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002570:	2305      	movs	r3, #5
 8002572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002574:	463b      	mov	r3, r7
 8002576:	4619      	mov	r1, r3
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <MX_ADC3_Init+0x124>)
 800257a:	f007 f98d 	bl	8009898 <HAL_ADC_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002584:	f002 fc7e 	bl	8004e84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002588:	2308      	movs	r3, #8
 800258a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800258c:	2306      	movs	r3, #6
 800258e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_ADC3_Init+0x124>)
 8002596:	f007 f97f 	bl	8009898 <HAL_ADC_ConfigChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80025a0:	f002 fc70 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2002ba48 	.word	0x2002ba48
 80025b0:	40012200 	.word	0x40012200
 80025b4:	0f000001 	.word	0x0f000001

080025b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <MX_I2C1_Init+0x74>)
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <MX_I2C1_Init+0x78>)
 80025c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <MX_I2C1_Init+0x74>)
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <MX_I2C1_Init+0x7c>)
 80025c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <MX_I2C1_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <MX_I2C1_Init+0x74>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <MX_I2C1_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_I2C1_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <MX_I2C1_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_I2C1_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_I2C1_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f2:	480e      	ldr	r0, [pc, #56]	; (800262c <MX_I2C1_Init+0x74>)
 80025f4:	f008 fb24 	bl	800ac40 <HAL_I2C_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025fe:	f002 fc41 	bl	8004e84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002602:	2100      	movs	r1, #0
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <MX_I2C1_Init+0x74>)
 8002606:	f009 f9eb 	bl	800b9e0 <HAL_I2CEx_ConfigAnalogFilter>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002610:	f002 fc38 	bl	8004e84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002614:	2100      	movs	r1, #0
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <MX_I2C1_Init+0x74>)
 8002618:	f009 fa2d 	bl	800ba76 <HAL_I2CEx_ConfigDigitalFilter>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002622:	f002 fc2f 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20028d28 	.word	0x20028d28
 8002630:	40005400 	.word	0x40005400
 8002634:	007074af 	.word	0x007074af

08002638 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_I2C2_Init+0x74>)
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <MX_I2C2_Init+0x78>)
 8002640:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_I2C2_Init+0x74>)
 8002644:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <MX_I2C2_Init+0x7c>)
 8002646:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_I2C2_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <MX_I2C2_Init+0x74>)
 8002650:	2201      	movs	r2, #1
 8002652:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_I2C2_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <MX_I2C2_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <MX_I2C2_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <MX_I2C2_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <MX_I2C2_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002672:	480e      	ldr	r0, [pc, #56]	; (80026ac <MX_I2C2_Init+0x74>)
 8002674:	f008 fae4 	bl	800ac40 <HAL_I2C_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800267e:	f002 fc01 	bl	8004e84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002682:	2100      	movs	r1, #0
 8002684:	4809      	ldr	r0, [pc, #36]	; (80026ac <MX_I2C2_Init+0x74>)
 8002686:	f009 f9ab 	bl	800b9e0 <HAL_I2CEx_ConfigAnalogFilter>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002690:	f002 fbf8 	bl	8004e84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002694:	2100      	movs	r1, #0
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_I2C2_Init+0x74>)
 8002698:	f009 f9ed 	bl	800ba76 <HAL_I2CEx_ConfigDigitalFilter>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80026a2:	f002 fbef 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20029178 	.word	0x20029178
 80026b0:	40005800 	.word	0x40005800
 80026b4:	007074af 	.word	0x007074af

080026b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_I2C3_Init+0x78>)
 80026be:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <MX_I2C3_Init+0x7c>)
 80026c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <MX_I2C3_Init+0x78>)
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <MX_I2C3_Init+0x80>)
 80026c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_I2C3_Init+0x78>)
 80026ca:	2298      	movs	r2, #152	; 0x98
 80026cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <MX_I2C3_Init+0x78>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <MX_I2C3_Init+0x78>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_I2C3_Init+0x78>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_I2C3_Init+0x78>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <MX_I2C3_Init+0x78>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <MX_I2C3_Init+0x78>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026f2:	480f      	ldr	r0, [pc, #60]	; (8002730 <MX_I2C3_Init+0x78>)
 80026f4:	f008 faa4 	bl	800ac40 <HAL_I2C_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026fe:	f002 fbc1 	bl	8004e84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002702:	2100      	movs	r1, #0
 8002704:	480a      	ldr	r0, [pc, #40]	; (8002730 <MX_I2C3_Init+0x78>)
 8002706:	f009 f96b 	bl	800b9e0 <HAL_I2CEx_ConfigAnalogFilter>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002710:	f002 fbb8 	bl	8004e84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002714:	2100      	movs	r1, #0
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_I2C3_Init+0x78>)
 8002718:	f009 f9ad 	bl	800ba76 <HAL_I2CEx_ConfigDigitalFilter>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002722:	f002 fbaf 	bl	8004e84 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002726:	2004      	movs	r0, #4
 8002728:	f009 f9f2 	bl	800bb10 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20028b14 	.word	0x20028b14
 8002734:	40005c00 	.word	0x40005c00
 8002738:	100029fe 	.word	0x100029fe

0800273c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <MX_I2C4_Init+0x78>)
 8002744:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <MX_I2C4_Init+0x7c>)
 800274a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <MX_I2C4_Init+0x74>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002754:	2201      	movs	r2, #1
 8002756:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <MX_I2C4_Init+0x74>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_I2C4_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002772:	2200      	movs	r2, #0
 8002774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002776:	480e      	ldr	r0, [pc, #56]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002778:	f008 fa62 	bl	800ac40 <HAL_I2C_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002782:	f002 fb7f 	bl	8004e84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002786:	2100      	movs	r1, #0
 8002788:	4809      	ldr	r0, [pc, #36]	; (80027b0 <MX_I2C4_Init+0x74>)
 800278a:	f009 f929 	bl	800b9e0 <HAL_I2CEx_ConfigAnalogFilter>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002794:	f002 fb76 	bl	8004e84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002798:	2100      	movs	r1, #0
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_I2C4_Init+0x74>)
 800279c:	f009 f96b 	bl	800ba76 <HAL_I2CEx_ConfigDigitalFilter>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80027a6:	f002 fb6d 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20028b60 	.word	0x20028b60
 80027b4:	40006000 	.word	0x40006000
 80027b8:	007074af 	.word	0x007074af

080027bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <MX_RTC_Init+0x44>)
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <MX_RTC_Init+0x48>)
 80027c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_RTC_Init+0x44>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_RTC_Init+0x44>)
 80027ce:	227f      	movs	r2, #127	; 0x7f
 80027d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MX_RTC_Init+0x44>)
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_RTC_Init+0x44>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <MX_RTC_Init+0x44>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_RTC_Init+0x44>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_RTC_Init+0x44>)
 80027ec:	f00a fbe0 	bl	800cfb0 <HAL_RTC_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80027f6:	f002 fb45 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2002bb00 	.word	0x2002bb00
 8002804:	40002800 	.word	0x40002800

08002808 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <MX_SPI4_Init+0x74>)
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <MX_SPI4_Init+0x78>)
 8002810:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <MX_SPI4_Init+0x74>)
 8002814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002818:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <MX_SPI4_Init+0x74>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <MX_SPI4_Init+0x74>)
 8002822:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002826:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <MX_SPI4_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <MX_SPI4_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_SPI4_Init+0x74>)
 8002836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <MX_SPI4_Init+0x74>)
 800283e:	2210      	movs	r2, #16
 8002840:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_SPI4_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_SPI4_Init+0x74>)
 800284a:	2200      	movs	r2, #0
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <MX_SPI4_Init+0x74>)
 8002850:	2200      	movs	r2, #0
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_SPI4_Init+0x74>)
 8002856:	2207      	movs	r2, #7
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <MX_SPI4_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_SPI4_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <MX_SPI4_Init+0x74>)
 8002868:	f00a fc4a 	bl	800d100 <HAL_SPI_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002872:	f002 fb07 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20028ab0 	.word	0x20028ab0
 8002880:	40013400 	.word	0x40013400

08002884 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <MX_SPI5_Init+0x74>)
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <MX_SPI5_Init+0x78>)
 800288c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_SPI5_Init+0x74>)
 8002890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002894:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_SPI5_Init+0x74>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_SPI5_Init+0x74>)
 800289e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028a2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80028b6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028ba:	2218      	movs	r2, #24
 80028bc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028d2:	2207      	movs	r2, #7
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028e4:	f00a fc0c 	bl	800d100 <HAL_SPI_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80028ee:	f002 fac9 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20028c2c 	.word	0x20028c2c
 80028fc:	40015000 	.word	0x40015000

08002900 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	; 0x38
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	615a      	str	r2, [r3, #20]
 8002930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002932:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002934:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <MX_TIM4_Init+0xec>)
 8002936:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <MX_TIM4_Init+0xe8>)
 800293a:	2200      	movs	r2, #0
 800293c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800294a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294c:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <MX_TIM4_Init+0xe8>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002958:	4823      	ldr	r0, [pc, #140]	; (80029e8 <MX_TIM4_Init+0xe8>)
 800295a:	f00b f805 	bl	800d968 <HAL_TIM_Base_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002964:	f002 fa8e 	bl	8004e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800296e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002972:	4619      	mov	r1, r3
 8002974:	481c      	ldr	r0, [pc, #112]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002976:	f00b fab9 	bl	800deec <HAL_TIM_ConfigClockSource>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002980:	f002 fa80 	bl	8004e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002984:	4818      	ldr	r0, [pc, #96]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002986:	f00b f845 	bl	800da14 <HAL_TIM_PWM_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002990:	f002 fa78 	bl	8004e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4811      	ldr	r0, [pc, #68]	; (80029e8 <MX_TIM4_Init+0xe8>)
 80029a4:	f00b ff1c 	bl	800e7e0 <HAL_TIMEx_MasterConfigSynchronization>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80029ae:	f002 fa69 	bl	8004e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b2:	2360      	movs	r3, #96	; 0x60
 80029b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c2:	463b      	mov	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4807      	ldr	r0, [pc, #28]	; (80029e8 <MX_TIM4_Init+0xe8>)
 80029ca:	f00b f977 	bl	800dcbc <HAL_TIM_PWM_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80029d4:	f002 fa56 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029d8:	4803      	ldr	r0, [pc, #12]	; (80029e8 <MX_TIM4_Init+0xe8>)
 80029da:	f005 fd6d 	bl	80084b8 <HAL_TIM_MspPostInit>

}
 80029de:	bf00      	nop
 80029e0:	3738      	adds	r7, #56	; 0x38
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20028c90 	.word	0x20028c90
 80029ec:	40000800 	.word	0x40000800

080029f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a10:	463b      	mov	r3, r7
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a22:	4b32      	ldr	r3, [pc, #200]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a24:	4a32      	ldr	r2, [pc, #200]	; (8002af0 <MX_TIM5_Init+0x100>)
 8002a26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a36:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a48:	4828      	ldr	r0, [pc, #160]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a4a:	f00a ff8d 	bl	800d968 <HAL_TIM_Base_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002a54:	f002 fa16 	bl	8004e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a62:	4619      	mov	r1, r3
 8002a64:	4821      	ldr	r0, [pc, #132]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a66:	f00b fa41 	bl	800deec <HAL_TIM_ConfigClockSource>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002a70:	f002 fa08 	bl	8004e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a74:	481d      	ldr	r0, [pc, #116]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a76:	f00a ffcd 	bl	800da14 <HAL_TIM_PWM_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002a80:	f002 fa00 	bl	8004e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	4619      	mov	r1, r3
 8002a92:	4816      	ldr	r0, [pc, #88]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a94:	f00b fea4 	bl	800e7e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002a9e:	f002 f9f1 	bl	8004e84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa2:	2360      	movs	r3, #96	; 0x60
 8002aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002aba:	f00b f8ff 	bl	800dcbc <HAL_TIM_PWM_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002ac4:	f002 f9de 	bl	8004e84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ac8:	463b      	mov	r3, r7
 8002aca:	2204      	movs	r2, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4807      	ldr	r0, [pc, #28]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002ad0:	f00b f8f4 	bl	800dcbc <HAL_TIM_PWM_ConfigChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002ada:	f002 f9d3 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ade:	4803      	ldr	r0, [pc, #12]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002ae0:	f005 fcea 	bl	80084b8 <HAL_TIM_MspPostInit>

}
 8002ae4:	bf00      	nop
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20029228 	.word	0x20029228
 8002af0:	40000c00 	.word	0x40000c00

08002af4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <MX_UART4_Init+0x58>)
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <MX_UART4_Init+0x5c>)
 8002afc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002afe:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b38:	f00b fefe 	bl	800e938 <HAL_UART_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002b42:	f002 f99f 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2002e244 	.word	0x2002e244
 8002b50:	40004c00 	.word	0x40004c00

08002b54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_UART5_Init+0x58>)
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <MX_UART5_Init+0x5c>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_UART5_Init+0x58>)
 8002b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_UART5_Init+0x58>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_UART5_Init+0x58>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_UART5_Init+0x58>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_UART5_Init+0x58>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_UART5_Init+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_UART5_Init+0x58>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_UART5_Init+0x58>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_UART5_Init+0x58>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b96:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_UART5_Init+0x58>)
 8002b98:	f00b fece 	bl	800e938 <HAL_UART_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002ba2:	f002 f96f 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2002b97c 	.word	0x2002b97c
 8002bb0:	40005000 	.word	0x40005000

08002bb4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <MX_UART7_Init+0x5c>)
 8002bbc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bda:	220c      	movs	r2, #12
 8002bdc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_UART7_Init+0x58>)
 8002be0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002be4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_UART7_Init+0x58>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bfa:	f00b fe9d 	bl	800e938 <HAL_UART_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002c04:	f002 f93e 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20028bac 	.word	0x20028bac
 8002c10:	40007800 	.word	0x40007800

08002c14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c22:	2206      	movs	r2, #6
 8002c24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c28:	2202      	movs	r2, #2
 8002c2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c34:	2202      	movs	r2, #2
 8002c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c58:	f008 ff7a 	bl	800bb50 <HAL_PCD_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002c62:	f002 f90f 	bl	8004e84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20028d74 	.word	0x20028d74

08002c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2105      	movs	r1, #5
 8002caa:	200b      	movs	r0, #11
 8002cac:	f007 f97c 	bl	8009fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002cb0:	200b      	movs	r0, #11
 8002cb2:	f007 f995 	bl	8009fe0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2105      	movs	r1, #5
 8002cba:	2038      	movs	r0, #56	; 0x38
 8002cbc:	f007 f974 	bl	8009fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002cc0:	2038      	movs	r0, #56	; 0x38
 8002cc2:	f007 f98d 	bl	8009fe0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2105      	movs	r1, #5
 8002cca:	2039      	movs	r0, #57	; 0x39
 8002ccc:	f007 f96c 	bl	8009fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002cd0:	2039      	movs	r0, #57	; 0x39
 8002cd2:	f007 f985 	bl	8009fe0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2105      	movs	r1, #5
 8002cda:	203a      	movs	r0, #58	; 0x3a
 8002cdc:	f007 f964 	bl	8009fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002ce0:	203a      	movs	r0, #58	; 0x3a
 8002ce2:	f007 f97d 	bl	8009fe0 <HAL_NVIC_EnableIRQ>

}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b090      	sub	sp, #64	; 0x40
 8002cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d0a:	4bb0      	ldr	r3, [pc, #704]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4aaf      	ldr	r2, [pc, #700]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4bad      	ldr	r3, [pc, #692]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d22:	4baa      	ldr	r3, [pc, #680]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4aa9      	ldr	r2, [pc, #676]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4ba7      	ldr	r3, [pc, #668]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	4ba4      	ldr	r3, [pc, #656]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4aa3      	ldr	r2, [pc, #652]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4ba1      	ldr	r3, [pc, #644]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	4b9e      	ldr	r3, [pc, #632]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a9d      	ldr	r2, [pc, #628]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b9b      	ldr	r3, [pc, #620]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	4b98      	ldr	r3, [pc, #608]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a97      	ldr	r2, [pc, #604]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b95      	ldr	r3, [pc, #596]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d82:	4b92      	ldr	r3, [pc, #584]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a91      	ldr	r2, [pc, #580]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d9a:	4b8c      	ldr	r3, [pc, #560]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a8b      	ldr	r2, [pc, #556]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db2:	4b86      	ldr	r3, [pc, #536]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a85      	ldr	r2, [pc, #532]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002db8:	f043 0320 	orr.w	r3, r3, #32
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b83      	ldr	r3, [pc, #524]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dca:	4b80      	ldr	r3, [pc, #512]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b7d      	ldr	r3, [pc, #500]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a79      	ldr	r2, [pc, #484]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b77      	ldr	r3, [pc, #476]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dfa:	4b74      	ldr	r3, [pc, #464]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a73      	ldr	r2, [pc, #460]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b71      	ldr	r3, [pc, #452]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2110      	movs	r1, #16
 8002e16:	486e      	ldr	r0, [pc, #440]	; (8002fd0 <MX_GPIO_Init+0x2dc>)
 8002e18:	f007 feba 	bl	800ab90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f244 012f 	movw	r1, #16431	; 0x402f
 8002e22:	486c      	ldr	r0, [pc, #432]	; (8002fd4 <MX_GPIO_Init+0x2e0>)
 8002e24:	f007 feb4 	bl	800ab90 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f241 1150 	movw	r1, #4432	; 0x1150
 8002e2e:	486a      	ldr	r0, [pc, #424]	; (8002fd8 <MX_GPIO_Init+0x2e4>)
 8002e30:	f007 feae 	bl	800ab90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2103      	movs	r1, #3
 8002e38:	4868      	ldr	r0, [pc, #416]	; (8002fdc <MX_GPIO_Init+0x2e8>)
 8002e3a:	f007 fea9 	bl	800ab90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f243 013c 	movw	r1, #12348	; 0x303c
 8002e44:	4866      	ldr	r0, [pc, #408]	; (8002fe0 <MX_GPIO_Init+0x2ec>)
 8002e46:	f007 fea3 	bl	800ab90 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f241 0104 	movw	r1, #4100	; 0x1004
 8002e50:	4864      	ldr	r0, [pc, #400]	; (8002fe4 <MX_GPIO_Init+0x2f0>)
 8002e52:	f007 fe9d 	bl	800ab90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002e56:	2200      	movs	r2, #0
 8002e58:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002e5c:	4862      	ldr	r0, [pc, #392]	; (8002fe8 <MX_GPIO_Init+0x2f4>)
 8002e5e:	f007 fe97 	bl	800ab90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002e62:	2200      	movs	r2, #0
 8002e64:	211b      	movs	r1, #27
 8002e66:	4861      	ldr	r0, [pc, #388]	; (8002fec <MX_GPIO_Init+0x2f8>)
 8002e68:	f007 fe92 	bl	800ab90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e80:	4619      	mov	r1, r3
 8002e82:	4853      	ldr	r0, [pc, #332]	; (8002fd0 <MX_GPIO_Init+0x2dc>)
 8002e84:	f007 fcc2 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e98:	4619      	mov	r1, r3
 8002e9a:	484d      	ldr	r0, [pc, #308]	; (8002fd0 <MX_GPIO_Init+0x2dc>)
 8002e9c:	f007 fcb6 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002ea0:	f244 032f 	movw	r3, #16431	; 0x402f
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4846      	ldr	r0, [pc, #280]	; (8002fd4 <MX_GPIO_Init+0x2e0>)
 8002eba:	f007 fca7 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4845      	ldr	r0, [pc, #276]	; (8002fe8 <MX_GPIO_Init+0x2f4>)
 8002ed2:	f007 fc9b 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002ed6:	f241 1350 	movw	r3, #4432	; 0x1150
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002edc:	2301      	movs	r3, #1
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eec:	4619      	mov	r1, r3
 8002eee:	483a      	ldr	r0, [pc, #232]	; (8002fd8 <MX_GPIO_Init+0x2e4>)
 8002ef0:	f007 fc8c 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002ef4:	23f0      	movs	r3, #240	; 0xf0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <MX_GPIO_Init+0x2fc>)
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f04:	4619      	mov	r1, r3
 8002f06:	4835      	ldr	r0, [pc, #212]	; (8002fdc <MX_GPIO_Init+0x2e8>)
 8002f08:	f007 fc80 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f12:	2300      	movs	r3, #0
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4834      	ldr	r0, [pc, #208]	; (8002ff4 <MX_GPIO_Init+0x300>)
 8002f22:	f007 fc73 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002f26:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f38:	4619      	mov	r1, r3
 8002f3a:	482f      	ldr	r0, [pc, #188]	; (8002ff8 <MX_GPIO_Init+0x304>)
 8002f3c:	f007 fc66 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8002f40:	2303      	movs	r3, #3
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f54:	4619      	mov	r1, r3
 8002f56:	4821      	ldr	r0, [pc, #132]	; (8002fdc <MX_GPIO_Init+0x2e8>)
 8002f58:	f007 fc58 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002f5c:	f243 033c 	movw	r3, #12348	; 0x303c
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f62:	2301      	movs	r3, #1
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f72:	4619      	mov	r1, r3
 8002f74:	481a      	ldr	r0, [pc, #104]	; (8002fe0 <MX_GPIO_Init+0x2ec>)
 8002f76:	f007 fc49 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8002f7a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f80:	2301      	movs	r3, #1
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f90:	4619      	mov	r1, r3
 8002f92:	4814      	ldr	r0, [pc, #80]	; (8002fe4 <MX_GPIO_Init+0x2f0>)
 8002f94:	f007 fc3a 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8002f98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fae:	4619      	mov	r1, r3
 8002fb0:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <MX_GPIO_Init+0x2f4>)
 8002fb2:	f007 fc2b 	bl	800a80c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8002fb6:	231b      	movs	r3, #27
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fca:	e017      	b.n	8002ffc <MX_GPIO_Init+0x308>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40022800 	.word	0x40022800
 8002fe0:	40021400 	.word	0x40021400
 8002fe4:	40021c00 	.word	0x40021c00
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40022400 	.word	0x40022400
 8002ff0:	10210000 	.word	0x10210000
 8002ff4:	40020800 	.word	0x40020800
 8002ff8:	40020c00 	.word	0x40020c00
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	480b      	ldr	r0, [pc, #44]	; (800302c <MX_GPIO_Init+0x338>)
 8003000:	f007 fc04 	bl	800a80c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2105      	movs	r1, #5
 8003008:	200a      	movs	r0, #10
 800300a:	f006 ffcd 	bl	8009fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800300e:	200a      	movs	r0, #10
 8003010:	f006 ffe6 	bl	8009fe0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003014:	2200      	movs	r2, #0
 8003016:	2105      	movs	r1, #5
 8003018:	2017      	movs	r0, #23
 800301a:	f006 ffc5 	bl	8009fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800301e:	2017      	movs	r0, #23
 8003020:	f006 ffde 	bl	8009fe0 <HAL_NVIC_EnableIRQ>

}
 8003024:	bf00      	nop
 8003026:	3740      	adds	r7, #64	; 0x40
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40022400 	.word	0x40022400

08003030 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8003038:	1d39      	adds	r1, r7, #4
 800303a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800303e:	2201      	movs	r2, #1
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <__io_putchar+0x20>)
 8003042:	f00b fcc7 	bl	800e9d4 <HAL_UART_Transmit>

	return ch;
 8003046:	687b      	ldr	r3, [r7, #4]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20028bac 	.word	0x20028bac

08003054 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8003058:	220e      	movs	r2, #14
 800305a:	2100      	movs	r1, #0
 800305c:	480d      	ldr	r0, [pc, #52]	; (8003094 <outputGPIOBufInitialization+0x40>)
 800305e:	f00f fb5c 	bl	801271a <memset>
	setOutputGPIOState(outputGPIOs.odOut_0, ON); //set OD to high impediance
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <outputGPIOBufInitialization+0x44>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	2101      	movs	r1, #1
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f817 	bl	800309c <setOutputGPIOState>
	setOutputGPIOState(outputGPIOs.odOut_1, ON); //set OD to high impediance
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <outputGPIOBufInitialization+0x44>)
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f811 	bl	800309c <setOutputGPIOState>
	gpioOutputState[outputGPIOs.odOut_0]=1;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <outputGPIOBufInitialization+0x44>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <outputGPIOBufInitialization+0x40>)
 8003080:	2101      	movs	r1, #1
 8003082:	54d1      	strb	r1, [r2, r3]
	gpioOutputState[outputGPIOs.odOut_1]=1;
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <outputGPIOBufInitialization+0x44>)
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	4a02      	ldr	r2, [pc, #8]	; (8003094 <outputGPIOBufInitialization+0x40>)
 800308a:	2101      	movs	r1, #1
 800308c:	54d1      	strb	r1, [r2, r3]
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	2002baf0 	.word	0x2002baf0
 8003098:	20000044 	.word	0x20000044

0800309c <setOutputGPIOState>:

void setOutputGPIOState(int gpio, int state){
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]

	if(gpio == outputGPIOs.configOut_0){
 80030a6:	4b87      	ldr	r3, [pc, #540]	; (80032c4 <setOutputGPIOState+0x228>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d10d      	bne.n	80030cc <setOutputGPIOState+0x30>
		HAL_GPIO_WritePin(GPIOH,OUT0_CONFIG_Pin,state);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	2104      	movs	r1, #4
 80030b8:	4883      	ldr	r0, [pc, #524]	; (80032c8 <setOutputGPIOState+0x22c>)
 80030ba:	f007 fd69 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_0] = state;
 80030be:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <setOutputGPIOState+0x228>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	b2d1      	uxtb	r1, r2
 80030c6:	4a81      	ldr	r2, [pc, #516]	; (80032cc <setOutputGPIOState+0x230>)
 80030c8:	54d1      	strb	r1, [r2, r3]

	else if(gpio == outputGPIOs.odOut_1){
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}
 80030ca:	e0f7      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_1){
 80030cc:	4b7d      	ldr	r3, [pc, #500]	; (80032c4 <setOutputGPIOState+0x228>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d10d      	bne.n	80030f2 <setOutputGPIOState+0x56>
		HAL_GPIO_WritePin(GPIOI,OUT1_CONFIG_Pin,state);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	2110      	movs	r1, #16
 80030de:	487c      	ldr	r0, [pc, #496]	; (80032d0 <setOutputGPIOState+0x234>)
 80030e0:	f007 fd56 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_1] = state;
 80030e4:	4b77      	ldr	r3, [pc, #476]	; (80032c4 <setOutputGPIOState+0x228>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d1      	uxtb	r1, r2
 80030ec:	4a77      	ldr	r2, [pc, #476]	; (80032cc <setOutputGPIOState+0x230>)
 80030ee:	54d1      	strb	r1, [r2, r3]
}
 80030f0:	e0e4      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_2){
 80030f2:	4b74      	ldr	r3, [pc, #464]	; (80032c4 <setOutputGPIOState+0x228>)
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d10d      	bne.n	8003118 <setOutputGPIOState+0x7c>
		HAL_GPIO_WritePin(GPIOI,OUT2_CONFIG_Pin,state);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	4872      	ldr	r0, [pc, #456]	; (80032d0 <setOutputGPIOState+0x234>)
 8003106:	f007 fd43 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_2] = state;
 800310a:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <setOutputGPIOState+0x228>)
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	b2d1      	uxtb	r1, r2
 8003112:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <setOutputGPIOState+0x230>)
 8003114:	54d1      	strb	r1, [r2, r3]
}
 8003116:	e0d1      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_3){
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <setOutputGPIOState+0x228>)
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	d10e      	bne.n	8003140 <setOutputGPIOState+0xa4>
		HAL_GPIO_WritePin(GPIOI,OUT3_CONFIG_Pin,state);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800312c:	4868      	ldr	r0, [pc, #416]	; (80032d0 <setOutputGPIOState+0x234>)
 800312e:	f007 fd2f 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_3] = state;
 8003132:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <setOutputGPIOState+0x228>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	b2d1      	uxtb	r1, r2
 800313a:	4a64      	ldr	r2, [pc, #400]	; (80032cc <setOutputGPIOState+0x230>)
 800313c:	54d1      	strb	r1, [r2, r3]
}
 800313e:	e0bd      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_0){
 8003140:	4b60      	ldr	r3, [pc, #384]	; (80032c4 <setOutputGPIOState+0x228>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d10d      	bne.n	8003166 <setOutputGPIOState+0xca>
		HAL_GPIO_WritePin(GPIOJ,MCU_CTRL0_Pin,state);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	2110      	movs	r1, #16
 8003152:	4860      	ldr	r0, [pc, #384]	; (80032d4 <setOutputGPIOState+0x238>)
 8003154:	f007 fd1c 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_0] = state;
 8003158:	4b5a      	ldr	r3, [pc, #360]	; (80032c4 <setOutputGPIOState+0x228>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d1      	uxtb	r1, r2
 8003160:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <setOutputGPIOState+0x230>)
 8003162:	54d1      	strb	r1, [r2, r3]
}
 8003164:	e0aa      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_1){
 8003166:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <setOutputGPIOState+0x228>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d10d      	bne.n	800318c <setOutputGPIOState+0xf0>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL1_Pin,state);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	2101      	movs	r1, #1
 8003178:	4857      	ldr	r0, [pc, #348]	; (80032d8 <setOutputGPIOState+0x23c>)
 800317a:	f007 fd09 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_1] = state;
 800317e:	4b51      	ldr	r3, [pc, #324]	; (80032c4 <setOutputGPIOState+0x228>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	b2d1      	uxtb	r1, r2
 8003186:	4a51      	ldr	r2, [pc, #324]	; (80032cc <setOutputGPIOState+0x230>)
 8003188:	54d1      	strb	r1, [r2, r3]
}
 800318a:	e097      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_2){
 800318c:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <setOutputGPIOState+0x228>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d10d      	bne.n	80031b2 <setOutputGPIOState+0x116>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL2_Pin,state);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	2102      	movs	r1, #2
 800319e:	484e      	ldr	r0, [pc, #312]	; (80032d8 <setOutputGPIOState+0x23c>)
 80031a0:	f007 fcf6 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_2] = state;
 80031a4:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <setOutputGPIOState+0x228>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d1      	uxtb	r1, r2
 80031ac:	4a47      	ldr	r2, [pc, #284]	; (80032cc <setOutputGPIOState+0x230>)
 80031ae:	54d1      	strb	r1, [r2, r3]
}
 80031b0:	e084      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_3){
 80031b2:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <setOutputGPIOState+0x228>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d10d      	bne.n	80031d8 <setOutputGPIOState+0x13c>
		HAL_GPIO_WritePin(GPIOJ,UART_MUX_CTRL_Pin,state);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	2108      	movs	r1, #8
 80031c4:	4843      	ldr	r0, [pc, #268]	; (80032d4 <setOutputGPIOState+0x238>)
 80031c6:	f007 fce3 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_3] = state;
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <setOutputGPIOState+0x228>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	b2d1      	uxtb	r1, r2
 80031d2:	4a3e      	ldr	r2, [pc, #248]	; (80032cc <setOutputGPIOState+0x230>)
 80031d4:	54d1      	strb	r1, [r2, r3]
}
 80031d6:	e071      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_0){
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <setOutputGPIOState+0x228>)
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d10d      	bne.n	80031fe <setOutputGPIOState+0x162>
		HAL_GPIO_WritePin(GPIOG,OUT0_1V8_Pin,state);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	2101      	movs	r1, #1
 80031ea:	483c      	ldr	r0, [pc, #240]	; (80032dc <setOutputGPIOState+0x240>)
 80031ec:	f007 fcd0 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_0] = state;
 80031f0:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <setOutputGPIOState+0x228>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d1      	uxtb	r1, r2
 80031f8:	4a34      	ldr	r2, [pc, #208]	; (80032cc <setOutputGPIOState+0x230>)
 80031fa:	54d1      	strb	r1, [r2, r3]
}
 80031fc:	e05e      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_1){
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <setOutputGPIOState+0x228>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d10d      	bne.n	8003224 <setOutputGPIOState+0x188>
		HAL_GPIO_WritePin(GPIOG,OUT1_1V8_Pin,state);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	2102      	movs	r1, #2
 8003210:	4832      	ldr	r0, [pc, #200]	; (80032dc <setOutputGPIOState+0x240>)
 8003212:	f007 fcbd 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_1] = state;
 8003216:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <setOutputGPIOState+0x228>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	b2d1      	uxtb	r1, r2
 800321e:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <setOutputGPIOState+0x230>)
 8003220:	54d1      	strb	r1, [r2, r3]
}
 8003222:	e04b      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_2){
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <setOutputGPIOState+0x228>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d10d      	bne.n	800324a <setOutputGPIOState+0x1ae>
		HAL_GPIO_WritePin(GPIOG,OUT2_1V8_Pin,state);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	2120      	movs	r1, #32
 8003236:	4829      	ldr	r0, [pc, #164]	; (80032dc <setOutputGPIOState+0x240>)
 8003238:	f007 fcaa 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_2] = state;
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <setOutputGPIOState+0x228>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d1      	uxtb	r1, r2
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <setOutputGPIOState+0x230>)
 8003246:	54d1      	strb	r1, [r2, r3]
}
 8003248:	e038      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_3){
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <setOutputGPIOState+0x228>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d10e      	bne.n	8003272 <setOutputGPIOState+0x1d6>
		HAL_GPIO_WritePin(GPIOG,OUT3_1V8_Pin,state);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800325e:	481f      	ldr	r0, [pc, #124]	; (80032dc <setOutputGPIOState+0x240>)
 8003260:	f007 fc96 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_3] = state;
 8003264:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <setOutputGPIOState+0x228>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d1      	uxtb	r1, r2
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <setOutputGPIOState+0x230>)
 800326e:	54d1      	strb	r1, [r2, r3]
}
 8003270:	e024      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_0){
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <setOutputGPIOState+0x228>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d10d      	bne.n	8003298 <setOutputGPIOState+0x1fc>
		HAL_GPIO_WritePin(GPIOG,OUT0_OD_Pin,state);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	2104      	movs	r1, #4
 8003284:	4815      	ldr	r0, [pc, #84]	; (80032dc <setOutputGPIOState+0x240>)
 8003286:	f007 fc83 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_0] = state;
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <setOutputGPIOState+0x228>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	b2d1      	uxtb	r1, r2
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <setOutputGPIOState+0x230>)
 8003294:	54d1      	strb	r1, [r2, r3]
}
 8003296:	e011      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_1){
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <setOutputGPIOState+0x228>)
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10c      	bne.n	80032bc <setOutputGPIOState+0x220>
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	2108      	movs	r1, #8
 80032aa:	480c      	ldr	r0, [pc, #48]	; (80032dc <setOutputGPIOState+0x240>)
 80032ac:	f007 fc70 	bl	800ab90 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_1] = state;
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <setOutputGPIOState+0x228>)
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d1      	uxtb	r1, r2
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <setOutputGPIOState+0x230>)
 80032ba:	54d1      	strb	r1, [r2, r3]
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000044 	.word	0x20000044
 80032c8:	40021c00 	.word	0x40021c00
 80032cc:	2002baf0 	.word	0x2002baf0
 80032d0:	40022000 	.word	0x40022000
 80032d4:	40022400 	.word	0x40022400
 80032d8:	40022800 	.word	0x40022800
 80032dc:	40021800 	.word	0x40021800

080032e0 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b098      	sub	sp, #96	; 0x60
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 80032ea:	f107 030c 	add.w	r3, r7, #12
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4909      	ldr	r1, [pc, #36]	; (8003318 <uartTransmitInt+0x38>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	f010 f896 	bl	8013424 <siprintf>
 80032f8:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b07      	cmp	r3, #7
 80032fe:	d107      	bne.n	8003310 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8003300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003302:	b29a      	uxth	r2, r3
 8003304:	f107 010c 	add.w	r1, r7, #12
 8003308:	2364      	movs	r3, #100	; 0x64
 800330a:	4804      	ldr	r0, [pc, #16]	; (800331c <uartTransmitInt+0x3c>)
 800330c:	f00b fb62 	bl	800e9d4 <HAL_UART_Transmit>
	}

}
 8003310:	bf00      	nop
 8003312:	3760      	adds	r7, #96	; 0x60
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	080167d8 	.word	0x080167d8
 800331c:	20028bac 	.word	0x20028bac

08003320 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60ba      	str	r2, [r7, #8]
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	4603      	mov	r3, r0
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	460b      	mov	r3, r1
 8003330:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8003332:	4a4f      	ldr	r2, [pc, #316]	; (8003470 <readI2CRegister+0x150>)
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d10c      	bne.n	8003358 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	b299      	uxth	r1, r3
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2301      	movs	r3, #1
 800334a:	4a49      	ldr	r2, [pc, #292]	; (8003470 <readI2CRegister+0x150>)
 800334c:	4849      	ldr	r0, [pc, #292]	; (8003474 <readI2CRegister+0x154>)
 800334e:	f007 fd07 	bl	800ad60 <HAL_I2C_Master_Transmit>
 8003352:	4603      	mov	r3, r0
 8003354:	75fb      	strb	r3, [r7, #23]
 8003356:	e02e      	b.n	80033b6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d10c      	bne.n	8003378 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	b299      	uxth	r1, r3
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2301      	movs	r3, #1
 800336a:	4a41      	ldr	r2, [pc, #260]	; (8003470 <readI2CRegister+0x150>)
 800336c:	4842      	ldr	r0, [pc, #264]	; (8003478 <readI2CRegister+0x158>)
 800336e:	f007 fcf7 	bl	800ad60 <HAL_I2C_Master_Transmit>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]
 8003376:	e01e      	b.n	80033b6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d10c      	bne.n	8003398 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	b299      	uxth	r1, r3
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2301      	movs	r3, #1
 800338a:	4a39      	ldr	r2, [pc, #228]	; (8003470 <readI2CRegister+0x150>)
 800338c:	483b      	ldr	r0, [pc, #236]	; (800347c <readI2CRegister+0x15c>)
 800338e:	f007 fce7 	bl	800ad60 <HAL_I2C_Master_Transmit>
 8003392:	4603      	mov	r3, r0
 8003394:	75fb      	strb	r3, [r7, #23]
 8003396:	e00e      	b.n	80033b6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b04      	cmp	r3, #4
 800339c:	d10b      	bne.n	80033b6 <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	b299      	uxth	r1, r3
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2301      	movs	r3, #1
 80033aa:	4a31      	ldr	r2, [pc, #196]	; (8003470 <readI2CRegister+0x150>)
 80033ac:	4834      	ldr	r0, [pc, #208]	; (8003480 <readI2CRegister+0x160>)
 80033ae:	f007 fcd7 	bl	800ad60 <HAL_I2C_Master_Transmit>
 80033b2:	4603      	mov	r3, r0
 80033b4:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <readI2CRegister+0xa0>
	          return (uint8_t*)0xfe;
 80033bc:	23fe      	movs	r3, #254	; 0xfe
 80033be:	e052      	b.n	8003466 <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10e      	bne.n	80033e4 <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	b299      	uxth	r1, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	4a26      	ldr	r2, [pc, #152]	; (8003470 <readI2CRegister+0x150>)
 80033d8:	4826      	ldr	r0, [pc, #152]	; (8003474 <readI2CRegister+0x154>)
 80033da:	f007 fdb5 	bl	800af48 <HAL_I2C_Master_Receive>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
 80033e2:	e034      	b.n	800344e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d10e      	bne.n	8003408 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	b299      	uxth	r1, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <readI2CRegister+0x150>)
 80033fc:	481e      	ldr	r0, [pc, #120]	; (8003478 <readI2CRegister+0x158>)
 80033fe:	f007 fda3 	bl	800af48 <HAL_I2C_Master_Receive>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]
 8003406:	e022      	b.n	800344e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d10e      	bne.n	800342c <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	b299      	uxth	r1, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	b29a      	uxth	r2, r3
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	4a14      	ldr	r2, [pc, #80]	; (8003470 <readI2CRegister+0x150>)
 8003420:	4816      	ldr	r0, [pc, #88]	; (800347c <readI2CRegister+0x15c>)
 8003422:	f007 fd91 	bl	800af48 <HAL_I2C_Master_Receive>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]
 800342a:	e010      	b.n	800344e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b04      	cmp	r3, #4
 8003430:	d10d      	bne.n	800344e <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	b299      	uxth	r1, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	b29a      	uxth	r2, r3
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <readI2CRegister+0x150>)
 8003444:	480e      	ldr	r0, [pc, #56]	; (8003480 <readI2CRegister+0x160>)
 8003446:	f007 fd7f 	bl	800af48 <HAL_I2C_Master_Receive>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <readI2CRegister+0x138>
		          return (uint8_t*)0xfe;
 8003454:	23fe      	movs	r3, #254	; 0xfe
 8003456:	e006      	b.n	8003466 <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <readI2CRegister+0x150>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2107      	movs	r1, #7
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff3e 	bl	80032e0 <uartTransmitInt>
			  return buf;
 8003464:	4b02      	ldr	r3, [pc, #8]	; (8003470 <readI2CRegister+0x150>)
		  }
}
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	2000330c 	.word	0x2000330c
 8003474:	20028d28 	.word	0x20028d28
 8003478:	20029178 	.word	0x20029178
 800347c:	20028b14 	.word	0x20028b14
 8003480:	20028b60 	.word	0x20028b60

08003484 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003484:	b580      	push	{r7, lr}
 8003486:	b08e      	sub	sp, #56	; 0x38
 8003488:	af02      	add	r7, sp, #8
 800348a:	60ba      	str	r2, [r7, #8]
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	460b      	mov	r3, r1
 8003494:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 8003496:	7bbb      	ldrb	r3, [r7, #14]
 8003498:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 800349e:	2300      	movs	r3, #0
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a2:	e00d      	b.n	80034c0 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	441a      	add	r2, r3
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	3301      	adds	r3, #1
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80034b4:	440b      	add	r3, r1
 80034b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	3301      	adds	r3, #1
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d9ee      	bls.n	80034a4 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d112      	bne.n	80034f2 <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	b299      	uxth	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	b298      	uxth	r0, r3
 80034d8:	f107 0214 	add.w	r2, r7, #20
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4603      	mov	r3, r0
 80034e4:	4829      	ldr	r0, [pc, #164]	; (800358c <writeI2CRegister+0x108>)
 80034e6:	f007 fc3b 	bl	800ad60 <HAL_I2C_Master_Transmit>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80034f0:	e040      	b.n	8003574 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d112      	bne.n	800351e <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	b299      	uxth	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	b298      	uxth	r0, r3
 8003504:	f107 0214 	add.w	r2, r7, #20
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4603      	mov	r3, r0
 8003510:	481f      	ldr	r0, [pc, #124]	; (8003590 <writeI2CRegister+0x10c>)
 8003512:	f007 fc25 	bl	800ad60 <HAL_I2C_Master_Transmit>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800351c:	e02a      	b.n	8003574 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	2b03      	cmp	r3, #3
 8003522:	d112      	bne.n	800354a <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	b299      	uxth	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	b29b      	uxth	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	b298      	uxth	r0, r3
 8003530:	f107 0214 	add.w	r2, r7, #20
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4603      	mov	r3, r0
 800353c:	4815      	ldr	r0, [pc, #84]	; (8003594 <writeI2CRegister+0x110>)
 800353e:	f007 fc0f 	bl	800ad60 <HAL_I2C_Master_Transmit>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003548:	e014      	b.n	8003574 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	2b04      	cmp	r3, #4
 800354e:	d111      	bne.n	8003574 <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	b299      	uxth	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	b29b      	uxth	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	b298      	uxth	r0, r3
 800355c:	f107 0214 	add.w	r2, r7, #20
 8003560:	f04f 33ff 	mov.w	r3, #4294967295
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4603      	mov	r3, r0
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <writeI2CRegister+0x114>)
 800356a:	f007 fbf9 	bl	800ad60 <HAL_I2C_Master_Transmit>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 8003574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <writeI2CRegister+0xfc>
	  	          return 0;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8003580:	2301      	movs	r3, #1
	  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20028d28 	.word	0x20028d28
 8003590:	20029178 	.word	0x20029178
 8003594:	20028b14 	.word	0x20028b14
 8003598:	20028b60 	.word	0x20028b60

0800359c <configureLEDDriver>:
void configureLEDDriver(){
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 80035a2:	2301      	movs	r3, #1
 80035a4:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <configureLEDDriver+0x110>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, (uint8_t*)currentMultiplier,1,LED.i2cBank);
 80035ac:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <configureLEDDriver+0x114>)
 80035ae:	7818      	ldrb	r0, [r3, #0]
 80035b0:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <configureLEDDriver+0x114>)
 80035b2:	7999      	ldrb	r1, [r3, #6]
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <configureLEDDriver+0x114>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2301      	movs	r3, #1
 80035c0:	f7ff ff60 	bl	8003484 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <configureLEDDriver+0x114>)
 80035c6:	7818      	ldrb	r0, [r3, #0]
 80035c8:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <configureLEDDriver+0x114>)
 80035ca:	7999      	ldrb	r1, [r3, #6]
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <configureLEDDriver+0x114>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f7ff fea5 	bl	8003320 <readI2CRegister>
 80035d6:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2107      	movs	r1, #7
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fe7e 	bl	80032e0 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,(uint8_t*)LED.mode0_oscon_value,1,LED.i2cBank);
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <configureLEDDriver+0x114>)
 80035e6:	7818      	ldrb	r0, [r3, #0]
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <configureLEDDriver+0x114>)
 80035ea:	7859      	ldrb	r1, [r3, #1]
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <configureLEDDriver+0x114>)
 80035ee:	79db      	ldrb	r3, [r3, #7]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <configureLEDDriver+0x114>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2301      	movs	r3, #1
 80035fa:	f7ff ff43 	bl	8003484 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,(uint8_t*)clear,1,LED.i2cBank);
 80035fe:	4b2c      	ldr	r3, [pc, #176]	; (80036b0 <configureLEDDriver+0x114>)
 8003600:	7818      	ldrb	r0, [r3, #0]
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <configureLEDDriver+0x114>)
 8003604:	7899      	ldrb	r1, [r3, #2]
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <configureLEDDriver+0x114>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2301      	movs	r3, #1
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <configureLEDDriver+0x110>)
 8003610:	f7ff ff38 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <configureLEDDriver+0x114>)
 8003616:	7818      	ldrb	r0, [r3, #0]
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <configureLEDDriver+0x114>)
 800361a:	78d9      	ldrb	r1, [r3, #3]
 800361c:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <configureLEDDriver+0x114>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2301      	movs	r3, #1
 8003624:	4a21      	ldr	r2, [pc, #132]	; (80036ac <configureLEDDriver+0x110>)
 8003626:	f7ff ff2d 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,(uint8_t*)clear,1,LED.i2cBank);
 800362a:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <configureLEDDriver+0x114>)
 800362c:	7818      	ldrb	r0, [r3, #0]
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <configureLEDDriver+0x114>)
 8003630:	7919      	ldrb	r1, [r3, #4]
 8003632:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <configureLEDDriver+0x114>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2301      	movs	r3, #1
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <configureLEDDriver+0x110>)
 800363c:	f7ff ff22 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <configureLEDDriver+0x114>)
 8003642:	7818      	ldrb	r0, [r3, #0]
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <configureLEDDriver+0x114>)
 8003646:	7959      	ldrb	r1, [r3, #5]
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <configureLEDDriver+0x114>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2301      	movs	r3, #1
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <configureLEDDriver+0x110>)
 8003652:	f7ff ff17 	bl	8003484 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <configureLEDDriver+0x114>)
 8003658:	7818      	ldrb	r0, [r3, #0]
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <configureLEDDriver+0x114>)
 800365c:	7a19      	ldrb	r1, [r3, #8]
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <configureLEDDriver+0x114>)
 8003660:	7adb      	ldrb	r3, [r3, #11]
 8003662:	461a      	mov	r2, r3
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <configureLEDDriver+0x114>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2301      	movs	r3, #1
 800366c:	f7ff ff0a 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <configureLEDDriver+0x114>)
 8003672:	7818      	ldrb	r0, [r3, #0]
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <configureLEDDriver+0x114>)
 8003676:	7a59      	ldrb	r1, [r3, #9]
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <configureLEDDriver+0x114>)
 800367a:	7adb      	ldrb	r3, [r3, #11]
 800367c:	461a      	mov	r2, r3
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <configureLEDDriver+0x114>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	f7ff fefd 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <configureLEDDriver+0x114>)
 800368c:	7818      	ldrb	r0, [r3, #0]
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <configureLEDDriver+0x114>)
 8003690:	7a99      	ldrb	r1, [r3, #10]
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <configureLEDDriver+0x114>)
 8003694:	7adb      	ldrb	r3, [r3, #11]
 8003696:	461a      	mov	r2, r3
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <configureLEDDriver+0x114>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2301      	movs	r3, #1
 80036a0:	f7ff fef0 	bl	8003484 <writeI2CRegister>
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20003320 	.word	0x20003320
 80036b0:	20000004 	.word	0x20000004

080036b4 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80036c0:	2301      	movs	r3, #1
 80036c2:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80036c4:	2304      	movs	r3, #4
 80036c6:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80036c8:	2310      	movs	r3, #16
 80036ca:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80036cc:	2340      	movs	r3, #64	; 0x40
 80036ce:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80036d0:	2302      	movs	r3, #2
 80036d2:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 80036d4:	2308      	movs	r3, #8
 80036d6:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 80036d8:	2320      	movs	r3, #32
 80036da:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	dc05      	bgt.n	80036f2 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 80036e6:	4b80      	ldr	r3, [pc, #512]	; (80038e8 <setErrorLED+0x234>)
 80036e8:	789b      	ldrb	r3, [r3, #2]
 80036ea:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e019      	b.n	8003726 <setErrorLED+0x72>
	}
	else if(led <8){
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b07      	cmp	r3, #7
 80036f6:	dc06      	bgt.n	8003706 <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 80036f8:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <setErrorLED+0x234>)
 80036fa:	78db      	ldrb	r3, [r3, #3]
 80036fc:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3b04      	subs	r3, #4
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e00f      	b.n	8003726 <setErrorLED+0x72>
	}
	else if(led <12){
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0b      	cmp	r3, #11
 800370a:	dc06      	bgt.n	800371a <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 800370c:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <setErrorLED+0x234>)
 800370e:	791b      	ldrb	r3, [r3, #4]
 8003710:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3b08      	subs	r3, #8
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e005      	b.n	8003726 <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 800371a:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <setErrorLED+0x234>)
 800371c:	795b      	ldrb	r3, [r3, #5]
 800371e:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b0c      	subs	r3, #12
 8003724:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003726:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <setErrorLED+0x234>)
 8003728:	7818      	ldrb	r0, [r3, #0]
 800372a:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <setErrorLED+0x234>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	7ef9      	ldrb	r1, [r7, #27]
 8003730:	2201      	movs	r2, #1
 8003732:	f7ff fdf5 	bl	8003320 <readI2CRegister>
 8003736:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b03      	cmp	r3, #3
 800373c:	f200 80bd 	bhi.w	80038ba <setErrorLED+0x206>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <setErrorLED+0x94>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	080037bf 	.word	0x080037bf
 8003750:	08003825 	.word	0x08003825
 8003754:	08003855 	.word	0x08003855

	case 0:
		if(change){
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <setErrorLED+0xd0>
			if(led == 8){
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d107      	bne.n	8003774 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	7dbb      	ldrb	r3, [r7, #22]
 800376a:	4313      	orrs	r3, r2
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8003772:	e0a2      	b.n	80038ba <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	7ebb      	ldrb	r3, [r7, #26]
 800377a:	4313      	orrs	r3, r2
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	701a      	strb	r2, [r3, #0]
		break;
 8003782:	e09a      	b.n	80038ba <setErrorLED+0x206>
			if(led == 8){
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d10c      	bne.n	80037a4 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b25a      	sxtb	r2, r3
 8003790:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003794:	43db      	mvns	r3, r3
 8003796:	b25b      	sxtb	r3, r3
 8003798:	4013      	ands	r3, r2
 800379a:	b25b      	sxtb	r3, r3
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	701a      	strb	r2, [r3, #0]
		break;
 80037a2:	e08a      	b.n	80038ba <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	4013      	ands	r3, r2
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	701a      	strb	r2, [r3, #0]
		break;
 80037bc:	e07d      	b.n	80038ba <setErrorLED+0x206>

	case 1:
		if(change){
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <setErrorLED+0x136>
			if(led == 9){
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b09      	cmp	r3, #9
 80037c8:	d107      	bne.n	80037da <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	7d7b      	ldrb	r3, [r7, #21]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 80037d8:	e06f      	b.n	80038ba <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	7e7b      	ldrb	r3, [r7, #25]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	701a      	strb	r2, [r3, #0]
		break;
 80037e8:	e067      	b.n	80038ba <setErrorLED+0x206>
			if(led == 9){
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b09      	cmp	r3, #9
 80037ee:	d10c      	bne.n	800380a <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	4013      	ands	r3, r2
 8003800:	b25b      	sxtb	r3, r3
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	701a      	strb	r2, [r3, #0]
		break;
 8003808:	e057      	b.n	80038ba <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b25a      	sxtb	r2, r3
 8003810:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003814:	43db      	mvns	r3, r3
 8003816:	b25b      	sxtb	r3, r3
 8003818:	4013      	ands	r3, r2
 800381a:	b25b      	sxtb	r3, r3
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]
		break;
 8003822:	e04a      	b.n	80038ba <setErrorLED+0x206>

	case 2:
		if(change){
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	7e3b      	ldrb	r3, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	b2da      	uxtb	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003838:	e03f      	b.n	80038ba <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b25a      	sxtb	r2, r3
 8003840:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	b25b      	sxtb	r3, r3
 8003848:	4013      	ands	r3, r2
 800384a:	b25b      	sxtb	r3, r3
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	701a      	strb	r2, [r3, #0]
		break;
 8003852:	e032      	b.n	80038ba <setErrorLED+0x206>

	case 3:
		if(change){
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <setErrorLED+0x1cc>
			if(led == 7){
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b07      	cmp	r3, #7
 800385e:	d107      	bne.n	8003870 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	4313      	orrs	r3, r2
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 800386e:	e023      	b.n	80038b8 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	4313      	orrs	r3, r2
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	701a      	strb	r2, [r3, #0]
		break;
 800387e:	e01b      	b.n	80038b8 <setErrorLED+0x204>
			if(led == 7){
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b07      	cmp	r3, #7
 8003884:	d10c      	bne.n	80038a0 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b25a      	sxtb	r2, r3
 800388c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003890:	43db      	mvns	r3, r3
 8003892:	b25b      	sxtb	r3, r3
 8003894:	4013      	ands	r3, r2
 8003896:	b25b      	sxtb	r3, r3
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	701a      	strb	r2, [r3, #0]
		break;
 800389e:	e00b      	b.n	80038b8 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b25a      	sxtb	r2, r3
 80038a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	4013      	ands	r3, r2
 80038b0:	b25b      	sxtb	r3, r3
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	701a      	strb	r2, [r3, #0]
		break;
 80038b8:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <setErrorLED+0x234>)
 80038bc:	7818      	ldrb	r0, [r3, #0]
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <setErrorLED+0x234>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	7ef9      	ldrb	r1, [r7, #27]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2301      	movs	r3, #1
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	f7ff fddb 	bl	8003484 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <setErrorLED+0x234>)
 80038d0:	7818      	ldrb	r0, [r3, #0]
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <setErrorLED+0x234>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	7ef9      	ldrb	r1, [r7, #27]
 80038d8:	2201      	movs	r2, #1
 80038da:	f7ff fd21 	bl	8003320 <readI2CRegister>
 80038de:	60f8      	str	r0, [r7, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000004 	.word	0x20000004

080038ec <getADCValues>:


float* getADCValues(){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b09e      	sub	sp, #120	; 0x78
 80038f0:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 80038f2:	463b      	mov	r3, r7
 80038f4:	2254      	movs	r2, #84	; 0x54
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00e ff0e 	bl	801271a <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 80038fe:	2316      	movs	r3, #22
 8003900:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8003902:	2308      	movs	r3, #8
 8003904:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8003906:	230c      	movs	r3, #12
 8003908:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 800390a:	2300      	movs	r3, #0
 800390c:	677b      	str	r3, [r7, #116]	; 0x74
 800390e:	e171      	b.n	8003bf4 <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003910:	4b97      	ldr	r3, [pc, #604]	; (8003b70 <getADCValues+0x284>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003916:	429a      	cmp	r2, r3
 8003918:	d009      	beq.n	800392e <getADCValues+0x42>
 800391a:	4b95      	ldr	r3, [pc, #596]	; (8003b70 <getADCValues+0x284>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003920:	429a      	cmp	r2, r3
 8003922:	d004      	beq.n	800392e <getADCValues+0x42>
 8003924:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <getADCValues+0x284>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800392a:	429a      	cmp	r2, r3
 800392c:	d102      	bne.n	8003934 <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 800392e:	2300      	movs	r3, #0
 8003930:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003932:	e071      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8003934:	4b8e      	ldr	r3, [pc, #568]	; (8003b70 <getADCValues+0x284>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800393a:	429a      	cmp	r2, r3
 800393c:	d009      	beq.n	8003952 <getADCValues+0x66>
 800393e:	4b8c      	ldr	r3, [pc, #560]	; (8003b70 <getADCValues+0x284>)
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003944:	429a      	cmp	r2, r3
 8003946:	d004      	beq.n	8003952 <getADCValues+0x66>
 8003948:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <getADCValues+0x284>)
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800394e:	429a      	cmp	r2, r3
 8003950:	d102      	bne.n	8003958 <getADCValues+0x6c>
			adcIndex=2;
 8003952:	2302      	movs	r3, #2
 8003954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003956:	e05f      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003958:	4b85      	ldr	r3, [pc, #532]	; (8003b70 <getADCValues+0x284>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800395e:	429a      	cmp	r2, r3
 8003960:	d009      	beq.n	8003976 <getADCValues+0x8a>
 8003962:	4b83      	ldr	r3, [pc, #524]	; (8003b70 <getADCValues+0x284>)
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003968:	429a      	cmp	r2, r3
 800396a:	d004      	beq.n	8003976 <getADCValues+0x8a>
 800396c:	4b80      	ldr	r3, [pc, #512]	; (8003b70 <getADCValues+0x284>)
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003972:	429a      	cmp	r2, r3
 8003974:	d102      	bne.n	800397c <getADCValues+0x90>
			adcIndex=4;
 8003976:	2304      	movs	r3, #4
 8003978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800397a:	e04d      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 800397c:	4b7c      	ldr	r3, [pc, #496]	; (8003b70 <getADCValues+0x284>)
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003982:	429a      	cmp	r2, r3
 8003984:	d009      	beq.n	800399a <getADCValues+0xae>
 8003986:	4b7a      	ldr	r3, [pc, #488]	; (8003b70 <getADCValues+0x284>)
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800398c:	429a      	cmp	r2, r3
 800398e:	d004      	beq.n	800399a <getADCValues+0xae>
 8003990:	4b77      	ldr	r3, [pc, #476]	; (8003b70 <getADCValues+0x284>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003996:	429a      	cmp	r2, r3
 8003998:	d102      	bne.n	80039a0 <getADCValues+0xb4>
			adcIndex=6;
 800399a:	2306      	movs	r3, #6
 800399c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800399e:	e03b      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 80039a0:	4b73      	ldr	r3, [pc, #460]	; (8003b70 <getADCValues+0x284>)
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d004      	beq.n	80039b4 <getADCValues+0xc8>
 80039aa:	4b71      	ldr	r3, [pc, #452]	; (8003b70 <getADCValues+0x284>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d102      	bne.n	80039ba <getADCValues+0xce>
			adcIndex=8;
 80039b4:	2308      	movs	r3, #8
 80039b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039b8:	e02e      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 80039ba:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <getADCValues+0x284>)
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d004      	beq.n	80039ce <getADCValues+0xe2>
 80039c4:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <getADCValues+0x284>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d102      	bne.n	80039d4 <getADCValues+0xe8>
			adcIndex=10;
 80039ce:	230a      	movs	r3, #10
 80039d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d2:	e021      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 80039d4:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <getADCValues+0x284>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039da:	429a      	cmp	r2, r3
 80039dc:	d102      	bne.n	80039e4 <getADCValues+0xf8>
			adcIndex=12;
 80039de:	230c      	movs	r3, #12
 80039e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039e2:	e019      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 80039e4:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <getADCValues+0x284>)
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d102      	bne.n	80039f4 <getADCValues+0x108>
			adcIndex=14;
 80039ee:	230e      	movs	r3, #14
 80039f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f2:	e011      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 80039f4:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <getADCValues+0x284>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d102      	bne.n	8003a04 <getADCValues+0x118>
			adcIndex=16;
 80039fe:	2310      	movs	r3, #16
 8003a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a02:	e009      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 8003a04:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <getADCValues+0x284>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d102      	bne.n	8003a14 <getADCValues+0x128>
			adcIndex=18;
 8003a0e:	2312      	movs	r3, #18
 8003a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a12:	e001      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 8003a14:	2314      	movs	r3, #20
 8003a16:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003a18:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <getADCValues+0x284>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d00e      	beq.n	8003a40 <getADCValues+0x154>
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <getADCValues+0x284>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d009      	beq.n	8003a40 <getADCValues+0x154>
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <getADCValues+0x284>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d004      	beq.n	8003a40 <getADCValues+0x154>
 8003a36:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <getADCValues+0x284>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d13a      	bne.n	8003ab6 <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003a40:	2300      	movs	r3, #0
 8003a42:	673b      	str	r3, [r7, #112]	; 0x70
 8003a44:	e033      	b.n	8003aae <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 8003a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a50:	4413      	add	r3, r2
 8003a52:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8003a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a62:	4944      	ldr	r1, [pc, #272]	; (8003b74 <getADCValues+0x288>)
 8003a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a66:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003a6a:	441a      	add	r2, r3
 8003a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003a74:	440b      	add	r3, r1
 8003a76:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a7c:	2b13      	cmp	r3, #19
 8003a7e:	d113      	bne.n	8003aa8 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a88:	4413      	add	r3, r2
 8003a8a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a8e:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <getADCValues+0x28c>)
 8003a90:	fb82 1203 	smull	r1, r2, r2, r3
 8003a94:	10d2      	asrs	r2, r2, #3
 8003a96:	17db      	asrs	r3, r3, #31
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aaa:	3301      	adds	r3, #1
 8003aac:	673b      	str	r3, [r7, #112]	; 0x70
 8003aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab0:	2b13      	cmp	r3, #19
 8003ab2:	ddc8      	ble.n	8003a46 <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003ab4:	e09b      	b.n	8003bee <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <getADCValues+0x284>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d018      	beq.n	8003af2 <getADCValues+0x206>
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <getADCValues+0x284>)
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d013      	beq.n	8003af2 <getADCValues+0x206>
 8003aca:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <getADCValues+0x284>)
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d00e      	beq.n	8003af2 <getADCValues+0x206>
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <getADCValues+0x284>)
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d009      	beq.n	8003af2 <getADCValues+0x206>
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <getADCValues+0x284>)
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d004      	beq.n	8003af2 <getADCValues+0x206>
 8003ae8:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <getADCValues+0x284>)
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d13a      	bne.n	8003b68 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003af2:	2300      	movs	r3, #0
 8003af4:	673b      	str	r3, [r7, #112]	; 0x70
 8003af6:	e033      	b.n	8003b60 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8003af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b02:	4413      	add	r3, r2
 8003b04:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8003b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b0e:	4413      	add	r3, r2
 8003b10:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b14:	4919      	ldr	r1, [pc, #100]	; (8003b7c <getADCValues+0x290>)
 8003b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b18:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003b1c:	441a      	add	r2, r3
 8003b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b26:	440b      	add	r3, r1
 8003b28:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2e:	2b13      	cmp	r3, #19
 8003b30:	d113      	bne.n	8003b5a <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <getADCValues+0x28c>)
 8003b42:	fb82 1203 	smull	r1, r2, r2, r3
 8003b46:	10d2      	asrs	r2, r2, #3
 8003b48:	17db      	asrs	r3, r3, #31
 8003b4a:	1ad2      	subs	r2, r2, r3
 8003b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b54:	440b      	add	r3, r1
 8003b56:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b62:	2b13      	cmp	r3, #19
 8003b64:	ddc8      	ble.n	8003af8 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003b66:	e042      	b.n	8003bee <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003b68:	2300      	movs	r3, #0
 8003b6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003b6c:	e03c      	b.n	8003be8 <getADCValues+0x2fc>
 8003b6e:	bf00      	nop
 8003b70:	2000007c 	.word	0x2000007c
 8003b74:	2002e2c8 	.word	0x2002e2c8
 8003b78:	66666667 	.word	0x66666667
 8003b7c:	2002bb24 	.word	0x2002bb24
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b8a:	4413      	add	r3, r2
 8003b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b96:	4413      	add	r3, r2
 8003b98:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b9c:	49c9      	ldr	r1, [pc, #804]	; (8003ec4 <getADCValues+0x5d8>)
 8003b9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ba0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003bae:	440b      	add	r3, r1
 8003bb0:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bb6:	2b13      	cmp	r3, #19
 8003bb8:	d113      	bne.n	8003be2 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bc8:	4abf      	ldr	r2, [pc, #764]	; (8003ec8 <getADCValues+0x5dc>)
 8003bca:	fb82 1203 	smull	r1, r2, r2, r3
 8003bce:	10d2      	asrs	r2, r2, #3
 8003bd0:	17db      	asrs	r3, r3, #31
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003bdc:	440b      	add	r3, r1
 8003bde:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be4:	3301      	adds	r3, #1
 8003be6:	673b      	str	r3, [r7, #112]	; 0x70
 8003be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bea:	2b13      	cmp	r3, #19
 8003bec:	ddc8      	ble.n	8003b80 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	677b      	str	r3, [r7, #116]	; 0x74
 8003bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf6:	2b14      	cmp	r3, #20
 8003bf8:	f77f ae8a 	ble.w	8003910 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003bfc:	4bb3      	ldr	r3, [pc, #716]	; (8003ecc <getADCValues+0x5e0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c06:	4413      	add	r3, r2
 8003c08:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c14:	4bad      	ldr	r3, [pc, #692]	; (8003ecc <getADCValues+0x5e0>)
 8003c16:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c1e:	4bab      	ldr	r3, [pc, #684]	; (8003ecc <getADCValues+0x5e0>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2a:	4ba8      	ldr	r3, [pc, #672]	; (8003ecc <getADCValues+0x5e0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	4aa7      	ldr	r2, [pc, #668]	; (8003ed0 <getADCValues+0x5e4>)
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003c3c:	4ba3      	ldr	r3, [pc, #652]	; (8003ecc <getADCValues+0x5e0>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c46:	4413      	add	r3, r2
 8003c48:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c54:	4b9d      	ldr	r3, [pc, #628]	; (8003ecc <getADCValues+0x5e0>)
 8003c56:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c5e:	4b9b      	ldr	r3, [pc, #620]	; (8003ecc <getADCValues+0x5e0>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6a:	4b98      	ldr	r3, [pc, #608]	; (8003ecc <getADCValues+0x5e0>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	4a97      	ldr	r2, [pc, #604]	; (8003ed0 <getADCValues+0x5e4>)
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003c7c:	4b93      	ldr	r3, [pc, #588]	; (8003ecc <getADCValues+0x5e0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c86:	4413      	add	r3, r2
 8003c88:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c94:	4b8d      	ldr	r3, [pc, #564]	; (8003ecc <getADCValues+0x5e0>)
 8003c96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ecc <getADCValues+0x5e0>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003caa:	4b88      	ldr	r3, [pc, #544]	; (8003ecc <getADCValues+0x5e0>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	4a87      	ldr	r2, [pc, #540]	; (8003ed0 <getADCValues+0x5e4>)
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003cbc:	4b83      	ldr	r3, [pc, #524]	; (8003ecc <getADCValues+0x5e0>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd4:	4b7d      	ldr	r3, [pc, #500]	; (8003ecc <getADCValues+0x5e0>)
 8003cd6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cde:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <getADCValues+0x5e0>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cea:	4b78      	ldr	r3, [pc, #480]	; (8003ecc <getADCValues+0x5e0>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	4a77      	ldr	r2, [pc, #476]	; (8003ed0 <getADCValues+0x5e4>)
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003cfc:	4b73      	ldr	r3, [pc, #460]	; (8003ecc <getADCValues+0x5e0>)
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d06:	4413      	add	r3, r2
 8003d08:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d0c:	ee07 3a90 	vmov	s15, r3
 8003d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d14:	4b6d      	ldr	r3, [pc, #436]	; (8003ecc <getADCValues+0x5e0>)
 8003d16:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d1e:	4b6b      	ldr	r3, [pc, #428]	; (8003ecc <getADCValues+0x5e0>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d2a:	4b68      	ldr	r3, [pc, #416]	; (8003ecc <getADCValues+0x5e0>)
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d32:	4a67      	ldr	r2, [pc, #412]	; (8003ed0 <getADCValues+0x5e4>)
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d3c:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <getADCValues+0x5e0>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d46:	4413      	add	r3, r2
 8003d48:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d54:	4b5d      	ldr	r3, [pc, #372]	; (8003ecc <getADCValues+0x5e0>)
 8003d56:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <getADCValues+0x5e0>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6a:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <getADCValues+0x5e0>)
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	4a57      	ldr	r2, [pc, #348]	; (8003ed0 <getADCValues+0x5e4>)
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d7c:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <getADCValues+0x5e0>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d86:	4413      	add	r3, r2
 8003d88:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d94:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <getADCValues+0x5e0>)
 8003d96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <getADCValues+0x5e0>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003daa:	4b48      	ldr	r3, [pc, #288]	; (8003ecc <getADCValues+0x5e0>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	4a47      	ldr	r2, [pc, #284]	; (8003ed0 <getADCValues+0x5e4>)
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003dbc:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <getADCValues+0x5e0>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd4:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <getADCValues+0x5e0>)
 8003dd6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dde:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <getADCValues+0x5e0>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <getADCValues+0x5e0>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	4a37      	ldr	r2, [pc, #220]	; (8003ed0 <getADCValues+0x5e4>)
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003dfc:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <getADCValues+0x5e0>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e06:	4413      	add	r3, r2
 8003e08:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e14:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <getADCValues+0x5e0>)
 8003e16:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <getADCValues+0x5e0>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2a:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <getADCValues+0x5e0>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <getADCValues+0x5e4>)
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <getADCValues+0x5e0>)
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e46:	4413      	add	r3, r2
 8003e48:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <getADCValues+0x5e0>)
 8003e56:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <getADCValues+0x5e0>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <getADCValues+0x5e0>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <getADCValues+0x5e4>)
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <getADCValues+0x5e0>)
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e86:	4413      	add	r3, r2
 8003e88:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <getADCValues+0x5e0>)
 8003e96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <getADCValues+0x5e0>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <getADCValues+0x5e0>)
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <getADCValues+0x5e4>)
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <getADCValues+0x5e0>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	e007      	b.n	8003ed4 <getADCValues+0x5e8>
 8003ec4:	20029268 	.word	0x20029268
 8003ec8:	66666667 	.word	0x66666667
 8003ecc:	2000007c 	.word	0x2000007c
 8003ed0:	20003324 	.word	0x20003324
 8003ed4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ed8:	4413      	add	r3, r2
 8003eda:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee6:	4b9c      	ldr	r3, [pc, #624]	; (8004158 <getADCValues+0x86c>)
 8003ee8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef0:	4b99      	ldr	r3, [pc, #612]	; (8004158 <getADCValues+0x86c>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efc:	4b96      	ldr	r3, [pc, #600]	; (8004158 <getADCValues+0x86c>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f04:	4a95      	ldr	r2, [pc, #596]	; (800415c <getADCValues+0x870>)
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f0e:	4b92      	ldr	r3, [pc, #584]	; (8004158 <getADCValues+0x86c>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f18:	4413      	add	r3, r2
 8003f1a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f26:	4b8c      	ldr	r3, [pc, #560]	; (8004158 <getADCValues+0x86c>)
 8003f28:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f30:	4b89      	ldr	r3, [pc, #548]	; (8004158 <getADCValues+0x86c>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3c:	4b86      	ldr	r3, [pc, #536]	; (8004158 <getADCValues+0x86c>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f44:	4a85      	ldr	r2, [pc, #532]	; (800415c <getADCValues+0x870>)
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f4e:	4b82      	ldr	r3, [pc, #520]	; (8004158 <getADCValues+0x86c>)
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f58:	4413      	add	r3, r2
 8003f5a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f66:	4b7c      	ldr	r3, [pc, #496]	; (8004158 <getADCValues+0x86c>)
 8003f68:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f70:	4b79      	ldr	r3, [pc, #484]	; (8004158 <getADCValues+0x86c>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f7c:	4b76      	ldr	r3, [pc, #472]	; (8004158 <getADCValues+0x86c>)
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f84:	4a75      	ldr	r2, [pc, #468]	; (800415c <getADCValues+0x870>)
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <getADCValues+0x86c>)
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f98:	4413      	add	r3, r2
 8003f9a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <getADCValues+0x86c>)
 8003fa8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fb0:	4b69      	ldr	r3, [pc, #420]	; (8004158 <getADCValues+0x86c>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbc:	4b66      	ldr	r3, [pc, #408]	; (8004158 <getADCValues+0x86c>)
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	4a65      	ldr	r2, [pc, #404]	; (800415c <getADCValues+0x870>)
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003fce:	4b62      	ldr	r3, [pc, #392]	; (8004158 <getADCValues+0x86c>)
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003fd8:	4413      	add	r3, r2
 8003fda:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	; (8004158 <getADCValues+0x86c>)
 8003fe8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ff0:	4b59      	ldr	r3, [pc, #356]	; (8004158 <getADCValues+0x86c>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffc:	4b56      	ldr	r3, [pc, #344]	; (8004158 <getADCValues+0x86c>)
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004004:	4a55      	ldr	r2, [pc, #340]	; (800415c <getADCValues+0x870>)
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800400e:	4b52      	ldr	r3, [pc, #328]	; (8004158 <getADCValues+0x86c>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004018:	4413      	add	r3, r2
 800401a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004026:	4b4c      	ldr	r3, [pc, #304]	; (8004158 <getADCValues+0x86c>)
 8004028:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800402c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004030:	4b49      	ldr	r3, [pc, #292]	; (8004158 <getADCValues+0x86c>)
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <getADCValues+0x86c>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004044:	4a45      	ldr	r2, [pc, #276]	; (800415c <getADCValues+0x870>)
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800404e:	4b42      	ldr	r3, [pc, #264]	; (8004158 <getADCValues+0x86c>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004058:	4413      	add	r3, r2
 800405a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004066:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <getADCValues+0x86c>)
 8004068:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800406c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <getADCValues+0x86c>)
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <getADCValues+0x86c>)
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004084:	4a35      	ldr	r2, [pc, #212]	; (800415c <getADCValues+0x870>)
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800408e:	4b32      	ldr	r3, [pc, #200]	; (8004158 <getADCValues+0x86c>)
 8004090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004098:	4413      	add	r3, r2
 800409a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <getADCValues+0x86c>)
 80040a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b0:	4b29      	ldr	r3, [pc, #164]	; (8004158 <getADCValues+0x86c>)
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040bc:	4b26      	ldr	r3, [pc, #152]	; (8004158 <getADCValues+0x86c>)
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <getADCValues+0x870>)
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80040ce:	4b22      	ldr	r3, [pc, #136]	; (8004158 <getADCValues+0x86c>)
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80040d8:	4413      	add	r3, r2
 80040da:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <getADCValues+0x86c>)
 80040e8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040f0:	4b19      	ldr	r3, [pc, #100]	; (8004158 <getADCValues+0x86c>)
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fc:	4b16      	ldr	r3, [pc, #88]	; (8004158 <getADCValues+0x86c>)
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <getADCValues+0x870>)
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <getADCValues+0x86c>)
 8004110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004118:	4413      	add	r3, r2
 800411a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <getADCValues+0x86c>)
 8004128:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800412c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <getADCValues+0x86c>)
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <getADCValues+0x86c>)
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004144:	4a05      	ldr	r2, [pc, #20]	; (800415c <getADCValues+0x870>)
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 800414e:	4b03      	ldr	r3, [pc, #12]	; (800415c <getADCValues+0x870>)
}
 8004150:	4618      	mov	r0, r3
 8004152:	3778      	adds	r7, #120	; 0x78
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2000007c 	.word	0x2000007c
 800415c:	20003324 	.word	0x20003324

08004160 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800417c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004180:	4803      	ldr	r0, [pc, #12]	; (8004190 <startHeartbeat+0x1c>)
 8004182:	f006 fd1e 	bl	800abc2 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8004186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800418a:	f00b fc8f 	bl	800faac <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800418e:	e7f5      	b.n	800417c <startHeartbeat+0x8>
 8004190:	40022000 	.word	0x40022000

08004194 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 800419c:	2203      	movs	r2, #3
 800419e:	2100      	movs	r1, #0
 80041a0:	4815      	ldr	r0, [pc, #84]	; (80041f8 <startADCRead+0x64>)
 80041a2:	f00e faba 	bl	801271a <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 80041a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80041aa:	2100      	movs	r1, #0
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <startADCRead+0x68>)
 80041ae:	f00e fab4 	bl	801271a <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 80041b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80041b6:	2100      	movs	r1, #0
 80041b8:	4811      	ldr	r0, [pc, #68]	; (8004200 <startADCRead+0x6c>)
 80041ba:	f00e faae 	bl	801271a <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 80041be:	f242 7210 	movw	r2, #10000	; 0x2710
 80041c2:	2100      	movs	r1, #0
 80041c4:	480f      	ldr	r0, [pc, #60]	; (8004204 <startADCRead+0x70>)
 80041c6:	f00e faa8 	bl	801271a <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	490b      	ldr	r1, [pc, #44]	; (80041fc <startADCRead+0x68>)
 80041d0:	480d      	ldr	r0, [pc, #52]	; (8004208 <startADCRead+0x74>)
 80041d2:	f005 fa0b 	bl	80095ec <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 80041d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041da:	4909      	ldr	r1, [pc, #36]	; (8004200 <startADCRead+0x6c>)
 80041dc:	480b      	ldr	r0, [pc, #44]	; (800420c <startADCRead+0x78>)
 80041de:	f005 fa05 	bl	80095ec <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4907      	ldr	r1, [pc, #28]	; (8004204 <startADCRead+0x70>)
 80041e8:	4809      	ldr	r0, [pc, #36]	; (8004210 <startADCRead+0x7c>)
 80041ea:	f005 f9ff 	bl	80095ec <HAL_ADC_Start_DMA>
    osDelay(600);
 80041ee:	f44f 7016 	mov.w	r0, #600	; 0x258
 80041f2:	f00b fc5b 	bl	800faac <osDelay>
	memset(adcRestart,0,sizeof(adcRestart));
 80041f6:	e7d1      	b.n	800419c <startADCRead+0x8>
 80041f8:	20029224 	.word	0x20029224
 80041fc:	20029268 	.word	0x20029268
 8004200:	2002e2c8 	.word	0x2002e2c8
 8004204:	2002bb24 	.word	0x2002bb24
 8004208:	2002b9fc 	.word	0x2002b9fc
 800420c:	20028ce0 	.word	0x20028ce0
 8004210:	2002ba48 	.word	0x2002ba48

08004214 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
//	 int x = 0;
//	 float *adcValues;
//	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 800421c:	f000 fe42 	bl	8004ea4 <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
	 uint8_t menu_val = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	73bb      	strb	r3, [r7, #14]
	 uint8_t running_menu = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	737b      	strb	r3, [r7, #13]
//	 int *readI2c;
//	 int zionCleared=0;
	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8004230:	f107 0208 	add.w	r2, r7, #8
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	21ff      	movs	r1, #255	; 0xff
 800423a:	2000      	movs	r0, #0
 800423c:	f00d f96c 	bl	8011518 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	73fb      	strb	r3, [r7, #15]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	73bb      	strb	r3, [r7, #14]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	737b      	strb	r3, [r7, #13]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 8004262:	7b7b      	ldrb	r3, [r7, #13]
 8004264:	3b01      	subs	r3, #1
 8004266:	2b03      	cmp	r3, #3
 8004268:	d82c      	bhi.n	80042c4 <GetDaScreenBlink+0xb0>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <GetDaScreenBlink+0x5c>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004295 	.word	0x08004295
 8004274:	08004281 	.word	0x08004281
 8004278:	080042a5 	.word	0x080042a5
 800427c:	080042b5 	.word	0x080042b5
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 8004280:	4812      	ldr	r0, [pc, #72]	; (80042cc <GetDaScreenBlink+0xb8>)
 8004282:	f00f f8c1 	bl	8013408 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 8004286:	7bbb      	ldrb	r3, [r7, #14]
 8004288:	7b7a      	ldrb	r2, [r7, #13]
 800428a:	7bf9      	ldrb	r1, [r7, #15]
 800428c:	4618      	mov	r0, r3
 800428e:	f002 ff1d 	bl	80070cc <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 8004292:	e017      	b.n	80042c4 <GetDaScreenBlink+0xb0>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 8004294:	480e      	ldr	r0, [pc, #56]	; (80042d0 <GetDaScreenBlink+0xbc>)
 8004296:	f00f f8b7 	bl	8013408 <puts>
			  drawMainMenu(menu_val);
 800429a:	7bbb      	ldrb	r3, [r7, #14]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fe2b 	bl	8004ef8 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 80042a2:	e00f      	b.n	80042c4 <GetDaScreenBlink+0xb0>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 80042a4:	480b      	ldr	r0, [pc, #44]	; (80042d4 <GetDaScreenBlink+0xc0>)
 80042a6:	f00f f8af 	bl	8013408 <puts>
			  drawStatusMenu(menu_val);
 80042aa:	7bbb      	ldrb	r3, [r7, #14]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f921 	bl	80054f4 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 80042b2:	e007      	b.n	80042c4 <GetDaScreenBlink+0xb0>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 80042b4:	4808      	ldr	r0, [pc, #32]	; (80042d8 <GetDaScreenBlink+0xc4>)
 80042b6:	f00f f8a7 	bl	8013408 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 80042ba:	7bbb      	ldrb	r3, [r7, #14]
 80042bc:	4618      	mov	r0, r3
 80042be:	f002 fab5 	bl	800682c <drawSystemInfoMenu>
			  break;
 80042c2:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 80042c4:	2064      	movs	r0, #100	; 0x64
 80042c6:	f00b fbf1 	bl	800faac <osDelay>
	 	  ulNotifiedValue = 0;
 80042ca:	e7af      	b.n	800422c <GetDaScreenBlink+0x18>
 80042cc:	080167e8 	.word	0x080167e8
 80042d0:	080167f4 	.word	0x080167f4
 80042d4:	08016800 	.word	0x08016800
 80042d8:	08016810 	.word	0x08016810

080042dc <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 80042e4:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <startGpioInputRead+0x114>)
 80042e6:	681c      	ldr	r4, [r3, #0]
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	4842      	ldr	r0, [pc, #264]	; (80043f4 <startGpioInputRead+0x118>)
 80042ec:	f006 fc38 	bl	800ab60 <HAL_GPIO_ReadPin>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <startGpioInputRead+0x11c>)
 80042f6:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 80042f8:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <startGpioInputRead+0x114>)
 80042fa:	685c      	ldr	r4, [r3, #4]
 80042fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004300:	483e      	ldr	r0, [pc, #248]	; (80043fc <startGpioInputRead+0x120>)
 8004302:	f006 fc2d 	bl	800ab60 <HAL_GPIO_ReadPin>
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <startGpioInputRead+0x11c>)
 800430c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 800430e:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <startGpioInputRead+0x114>)
 8004310:	689c      	ldr	r4, [r3, #8]
 8004312:	2110      	movs	r1, #16
 8004314:	483a      	ldr	r0, [pc, #232]	; (8004400 <startGpioInputRead+0x124>)
 8004316:	f006 fc23 	bl	800ab60 <HAL_GPIO_ReadPin>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <startGpioInputRead+0x11c>)
 8004320:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8004322:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <startGpioInputRead+0x114>)
 8004324:	68dc      	ldr	r4, [r3, #12]
 8004326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800432a:	4835      	ldr	r0, [pc, #212]	; (8004400 <startGpioInputRead+0x124>)
 800432c:	f006 fc18 	bl	800ab60 <HAL_GPIO_ReadPin>
 8004330:	4603      	mov	r3, r0
 8004332:	461a      	mov	r2, r3
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <startGpioInputRead+0x11c>)
 8004336:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <startGpioInputRead+0x114>)
 800433a:	691c      	ldr	r4, [r3, #16]
 800433c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004340:	482f      	ldr	r0, [pc, #188]	; (8004400 <startGpioInputRead+0x124>)
 8004342:	f006 fc0d 	bl	800ab60 <HAL_GPIO_ReadPin>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <startGpioInputRead+0x11c>)
 800434c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <startGpioInputRead+0x114>)
 8004350:	695c      	ldr	r4, [r3, #20]
 8004352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004356:	482a      	ldr	r0, [pc, #168]	; (8004400 <startGpioInputRead+0x124>)
 8004358:	f006 fc02 	bl	800ab60 <HAL_GPIO_ReadPin>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <startGpioInputRead+0x11c>)
 8004362:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <startGpioInputRead+0x114>)
 8004366:	699c      	ldr	r4, [r3, #24]
 8004368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800436c:	4824      	ldr	r0, [pc, #144]	; (8004400 <startGpioInputRead+0x124>)
 800436e:	f006 fbf7 	bl	800ab60 <HAL_GPIO_ReadPin>
 8004372:	4603      	mov	r3, r0
 8004374:	461a      	mov	r2, r3
 8004376:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <startGpioInputRead+0x11c>)
 8004378:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <startGpioInputRead+0x114>)
 800437c:	69dc      	ldr	r4, [r3, #28]
 800437e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004382:	481f      	ldr	r0, [pc, #124]	; (8004400 <startGpioInputRead+0x124>)
 8004384:	f006 fbec 	bl	800ab60 <HAL_GPIO_ReadPin>
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <startGpioInputRead+0x11c>)
 800438e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8004390:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <startGpioInputRead+0x114>)
 8004392:	6a1c      	ldr	r4, [r3, #32]
 8004394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004398:	4819      	ldr	r0, [pc, #100]	; (8004400 <startGpioInputRead+0x124>)
 800439a:	f006 fbe1 	bl	800ab60 <HAL_GPIO_ReadPin>
 800439e:	4603      	mov	r3, r0
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <startGpioInputRead+0x11c>)
 80043a4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <startGpioInputRead+0x114>)
 80043a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80043aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043ae:	4814      	ldr	r0, [pc, #80]	; (8004400 <startGpioInputRead+0x124>)
 80043b0:	f006 fbd6 	bl	800ab60 <HAL_GPIO_ReadPin>
 80043b4:	4603      	mov	r3, r0
 80043b6:	461a      	mov	r2, r3
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <startGpioInputRead+0x11c>)
 80043ba:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <startGpioInputRead+0x114>)
 80043be:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80043c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043c4:	480e      	ldr	r0, [pc, #56]	; (8004400 <startGpioInputRead+0x124>)
 80043c6:	f006 fbcb 	bl	800ab60 <HAL_GPIO_ReadPin>
 80043ca:	4603      	mov	r3, r0
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <startGpioInputRead+0x11c>)
 80043d0:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <startGpioInputRead+0x114>)
 80043d4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80043d6:	2108      	movs	r1, #8
 80043d8:	480a      	ldr	r0, [pc, #40]	; (8004404 <startGpioInputRead+0x128>)
 80043da:	f006 fbc1 	bl	800ab60 <HAL_GPIO_ReadPin>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <startGpioInputRead+0x11c>)
 80043e4:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 80043e6:	f240 30b6 	movw	r0, #950	; 0x3b6
 80043ea:	f00b fb5f 	bl	800faac <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 80043ee:	e779      	b.n	80042e4 <startGpioInputRead+0x8>
 80043f0:	20000014 	.word	0x20000014
 80043f4:	40020400 	.word	0x40020400
 80043f8:	20028cd4 	.word	0x20028cd4
 80043fc:	40020800 	.word	0x40020800
 8004400:	40020c00 	.word	0x40020c00
 8004404:	40021000 	.word	0x40021000

08004408 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004414:	2301      	movs	r3, #1
 8004416:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004418:	7bbb      	ldrb	r3, [r7, #14]
 800441a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 800441c:	2303      	movs	r3, #3
 800441e:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 8004424:	4b55      	ldr	r3, [pc, #340]	; (800457c <startNavigationTask+0x174>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	3b01      	subs	r3, #1
 800442a:	2b03      	cmp	r3, #3
 800442c:	d86f      	bhi.n	800450e <startNavigationTask+0x106>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <startNavigationTask+0x2c>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004445 	.word	0x08004445
 8004438:	08004477 	.word	0x08004477
 800443c:	080044ab 	.word	0x080044ab
 8004440:	080044d9 	.word	0x080044d9
	{
	case UP:
	{
		if ((menu_highlight == MENU_TOP) || bootButtons.bootModeSet)
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d070      	beq.n	800452c <startNavigationTask+0x124>
 800444a:	4b4d      	ldr	r3, [pc, #308]	; (8004580 <startNavigationTask+0x178>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d16c      	bne.n	800452c <startNavigationTask+0x124>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	3b01      	subs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004458:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <startNavigationTask+0x17c>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	7bbb      	ldrb	r3, [r7, #14]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	4313      	orrs	r3, r2
 800446a:	4619      	mov	r1, r3
 800446c:	2300      	movs	r3, #0
 800446e:	2204      	movs	r2, #4
 8004470:	f00d f8ac 	bl	80115cc <xTaskGenericNotify>
		}
		break;
 8004474:	e05a      	b.n	800452c <startNavigationTask+0x124>
	}
	case DWN:
	{
		if ((menu_highlight >= menu_Max_Items) || (bootButtons.bootModeSet))
 8004476:	7bfa      	ldrb	r2, [r7, #15]
 8004478:	7b3b      	ldrb	r3, [r7, #12]
 800447a:	429a      	cmp	r2, r3
 800447c:	d258      	bcs.n	8004530 <startNavigationTask+0x128>
 800447e:	4b40      	ldr	r3, [pc, #256]	; (8004580 <startNavigationTask+0x178>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d154      	bne.n	8004530 <startNavigationTask+0x128>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	3301      	adds	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800448c:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <startNavigationTask+0x17c>)
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	f043 0202 	orr.w	r2, r3, #2
 8004498:	7bbb      	ldrb	r3, [r7, #14]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	4313      	orrs	r3, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	2300      	movs	r3, #0
 80044a2:	2204      	movs	r2, #4
 80044a4:	f00d f892 	bl	80115cc <xTaskGenericNotify>
		}
		break;
 80044a8:	e042      	b.n	8004530 <startNavigationTask+0x128>
	}
	case BACK:
	{
		if(!(bootButtons.bootModeSet)){
 80044aa:	4b35      	ldr	r3, [pc, #212]	; (8004580 <startNavigationTask+0x178>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <startNavigationTask+0xb2>
			menu_run = prev_menu;
 80044b2:	7b7b      	ldrb	r3, [r7, #13]
 80044b4:	73bb      	strb	r3, [r7, #14]
			menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 80044b6:	7afb      	ldrb	r3, [r7, #11]
 80044b8:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80044ba:	4b32      	ldr	r3, [pc, #200]	; (8004584 <startNavigationTask+0x17c>)
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	f043 0203 	orr.w	r2, r3, #3
 80044c6:	7bbb      	ldrb	r3, [r7, #14]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	4313      	orrs	r3, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	2204      	movs	r2, #4
 80044d2:	f00d f87b 	bl	80115cc <xTaskGenericNotify>
		break;
 80044d6:	e02c      	b.n	8004532 <startNavigationTask+0x12a>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 80044d8:	7bbb      	ldrb	r3, [r7, #14]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d108      	bne.n	80044f0 <startNavigationTask+0xe8>
			prev_menu = menu_run;		// save currently running menu for BACK button
 80044de:	7bbb      	ldrb	r3, [r7, #14]
 80044e0:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	3301      	adds	r3, #1
 80044e6:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <startNavigationTask+0x17c>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	f043 0204 	orr.w	r2, r3, #4
 80044fc:	7bbb      	ldrb	r3, [r7, #14]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	4313      	orrs	r3, r2
 8004502:	4619      	mov	r1, r3
 8004504:	2300      	movs	r3, #0
 8004506:	2204      	movs	r2, #4
 8004508:	f00d f860 	bl	80115cc <xTaskGenericNotify>
		break;
 800450c:	e011      	b.n	8004532 <startNavigationTask+0x12a>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <startNavigationTask+0x17c>)
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	f043 0205 	orr.w	r2, r3, #5
 800451a:	7bbb      	ldrb	r3, [r7, #14]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	4313      	orrs	r3, r2
 8004520:	4619      	mov	r1, r3
 8004522:	2300      	movs	r3, #0
 8004524:	2204      	movs	r2, #4
 8004526:	f00d f851 	bl	80115cc <xTaskGenericNotify>
		break;
 800452a:	e002      	b.n	8004532 <startNavigationTask+0x12a>
		break;
 800452c:	bf00      	nop
 800452e:	e000      	b.n	8004532 <startNavigationTask+0x12a>
		break;
 8004530:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 8004532:	7bbb      	ldrb	r3, [r7, #14]
 8004534:	3b01      	subs	r3, #1
 8004536:	2b03      	cmp	r3, #3
 8004538:	d816      	bhi.n	8004568 <startNavigationTask+0x160>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <startNavigationTask+0x138>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004557 	.word	0x08004557
 8004544:	08004551 	.word	0x08004551
 8004548:	0800455d 	.word	0x0800455d
 800454c:	08004563 	.word	0x08004563

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004550:	2305      	movs	r3, #5
 8004552:	733b      	strb	r3, [r7, #12]
		break;
 8004554:	e00b      	b.n	800456e <startNavigationTask+0x166>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004556:	2303      	movs	r3, #3
 8004558:	733b      	strb	r3, [r7, #12]
		break;
 800455a:	e008      	b.n	800456e <startNavigationTask+0x166>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 800455c:	2303      	movs	r3, #3
 800455e:	733b      	strb	r3, [r7, #12]
		break;
 8004560:	e005      	b.n	800456e <startNavigationTask+0x166>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 8004562:	2302      	movs	r3, #2
 8004564:	733b      	strb	r3, [r7, #12]
		break;
 8004566:	e002      	b.n	800456e <startNavigationTask+0x166>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004568:	2305      	movs	r3, #5
 800456a:	733b      	strb	r3, [r7, #12]
		break;
 800456c:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 800456e:	4b03      	ldr	r3, [pc, #12]	; (800457c <startNavigationTask+0x174>)
 8004570:	2205      	movs	r2, #5
 8004572:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004574:	20c8      	movs	r0, #200	; 0xc8
 8004576:	f00b fa99 	bl	800faac <osDelay>
	switch(inputButtonSet)
 800457a:	e753      	b.n	8004424 <startNavigationTask+0x1c>
 800457c:	200000dc 	.word	0x200000dc
 8004580:	200032ac 	.word	0x200032ac
 8004584:	20030a98 	.word	0x20030a98

08004588 <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	int i2cCheck;
	float * presentADCValues;
  for(;;)
  {
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 8004590:	4ba4      	ldr	r3, [pc, #656]	; (8004824 <startErrorLEDs+0x29c>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <startErrorLEDs+0x26>
 8004598:	4ba2      	ldr	r3, [pc, #648]	; (8004824 <startErrorLEDs+0x29c>)
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d006      	beq.n	80045ae <startErrorLEDs+0x26>
 80045a0:	4ba0      	ldr	r3, [pc, #640]	; (8004824 <startErrorLEDs+0x29c>)
 80045a2:	789b      	ldrb	r3, [r3, #2]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <startErrorLEDs+0x26>
		  presentADCValues = getADCValues();
 80045a8:	f7ff f9a0 	bl	80038ec <getADCValues>
 80045ac:	60f8      	str	r0, [r7, #12]
	  }
	  if(*(presentADCValues+Adc.adc0) > 3.5){
 80045ae:	4b9e      	ldr	r3, [pc, #632]	; (8004828 <startErrorLEDs+0x2a0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	edd3 7a00 	vldr	s15, [r3]
 80045bc:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80045c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c8:	dd03      	ble.n	80045d2 <startErrorLEDs+0x4a>
		  errorLED.vsysPMIFault=0;
 80045ca:	4b98      	ldr	r3, [pc, #608]	; (800482c <startErrorLEDs+0x2a4>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	e002      	b.n	80045d8 <startErrorLEDs+0x50>
	  }
	  else{
		  errorLED.vsysPMIFault=1;
 80045d2:	4b96      	ldr	r3, [pc, #600]	; (800482c <startErrorLEDs+0x2a4>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	605a      	str	r2, [r3, #4]
	  }
	  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 80045d8:	4b95      	ldr	r3, [pc, #596]	; (8004830 <startErrorLEDs+0x2a8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <startErrorLEDs+0x60>
 80045e0:	4b93      	ldr	r3, [pc, #588]	; (8004830 <startErrorLEDs+0x2a8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <startErrorLEDs+0x68>
 80045e8:	4b91      	ldr	r3, [pc, #580]	; (8004830 <startErrorLEDs+0x2a8>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	da03      	bge.n	80045f8 <startErrorLEDs+0x70>
		  errorLED.zionFault=1;
 80045f0:	4b8e      	ldr	r3, [pc, #568]	; (800482c <startErrorLEDs+0x2a4>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e002      	b.n	80045fe <startErrorLEDs+0x76>
	  }
	  else{
		  errorLED.zionFault=0;
 80045f8:	4b8c      	ldr	r3, [pc, #560]	; (800482c <startErrorLEDs+0x2a4>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
	  }
	  i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 80045fe:	4b8d      	ldr	r3, [pc, #564]	; (8004834 <startErrorLEDs+0x2ac>)
 8004600:	7818      	ldrb	r0, [r3, #0]
 8004602:	4b8c      	ldr	r3, [pc, #560]	; (8004834 <startErrorLEDs+0x2ac>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2301      	movs	r3, #1
 800460a:	2200      	movs	r2, #0
 800460c:	21f0      	movs	r1, #240	; 0xf0
 800460e:	f7fe ff39 	bl	8003484 <writeI2CRegister>
 8004612:	60b8      	str	r0, [r7, #8]

	  if(i2cCheck){
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <startErrorLEDs+0x9a>
		  errorLED.ledDriver=0;
 800461a:	4b84      	ldr	r3, [pc, #528]	; (800482c <startErrorLEDs+0x2a4>)
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
 8004620:	e002      	b.n	8004628 <startErrorLEDs+0xa0>
	  }
	  else{
		  errorLED.ledDriver=1;
 8004622:	4b82      	ldr	r3, [pc, #520]	; (800482c <startErrorLEDs+0x2a4>)
 8004624:	2201      	movs	r2, #1
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
	  }
	  //only allow the error led write commands if the led driver responds.
	  if(errorLED.ledDriver){
 8004628:	4b80      	ldr	r3, [pc, #512]	; (800482c <startErrorLEDs+0x2a4>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80f4 	beq.w	800481a <startErrorLEDs+0x292>
		  setErrorLED(ZION_FAULT,errorLED.zionFault);
 8004632:	4b7e      	ldr	r3, [pc, #504]	; (800482c <startErrorLEDs+0x2a4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf14      	ite	ne
 800463a:	2301      	movne	r3, #1
 800463c:	2300      	moveq	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	4619      	mov	r1, r3
 8004642:	2000      	movs	r0, #0
 8004644:	f7ff f836 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 8004648:	2014      	movs	r0, #20
 800464a:	f00b fa2f 	bl	800faac <osDelay>
		  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 800464e:	4b77      	ldr	r3, [pc, #476]	; (800482c <startErrorLEDs+0x2a4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	bf14      	ite	ne
 8004656:	2301      	movne	r3, #1
 8004658:	2300      	moveq	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	2001      	movs	r0, #1
 8004660:	f7ff f828 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 8004664:	2014      	movs	r0, #20
 8004666:	f00b fa21 	bl	800faac <osDelay>
		  switch(bootButtons.bootMode){
 800466a:	4b73      	ldr	r3, [pc, #460]	; (8004838 <startErrorLEDs+0x2b0>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	2b05      	cmp	r3, #5
 8004670:	d84a      	bhi.n	8004708 <startErrorLEDs+0x180>
 8004672:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <startErrorLEDs+0xf0>)
 8004674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004678:	08004691 	.word	0x08004691
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046b9 	.word	0x080046b9
 8004684:	080046cd 	.word	0x080046cd
 8004688:	080046f5 	.word	0x080046f5
 800468c:	080046e1 	.word	0x080046e1
				case UNINITIALIZED:
					errorLED.standard_boot=0;
 8004690:	4b66      	ldr	r3, [pc, #408]	; (800482c <startErrorLEDs+0x2a4>)
 8004692:	2200      	movs	r2, #0
 8004694:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 8004696:	4b65      	ldr	r3, [pc, #404]	; (800482c <startErrorLEDs+0x2a4>)
 8004698:	2200      	movs	r2, #0
 800469a:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 800469c:	4b63      	ldr	r3, [pc, #396]	; (800482c <startErrorLEDs+0x2a4>)
 800469e:	2200      	movs	r2, #0
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 80046a2:	e031      	b.n	8004708 <startErrorLEDs+0x180>
				case STANDARD:
					errorLED.standard_boot=1;
 80046a4:	4b61      	ldr	r3, [pc, #388]	; (800482c <startErrorLEDs+0x2a4>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 80046aa:	4b60      	ldr	r3, [pc, #384]	; (800482c <startErrorLEDs+0x2a4>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 80046b0:	4b5e      	ldr	r3, [pc, #376]	; (800482c <startErrorLEDs+0x2a4>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 80046b6:	e027      	b.n	8004708 <startErrorLEDs+0x180>
				case UEFI:
					errorLED.standard_boot=0;
 80046b8:	4b5c      	ldr	r3, [pc, #368]	; (800482c <startErrorLEDs+0x2a4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=1;
 80046be:	4b5b      	ldr	r3, [pc, #364]	; (800482c <startErrorLEDs+0x2a4>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=0;
 80046c4:	4b59      	ldr	r3, [pc, #356]	; (800482c <startErrorLEDs+0x2a4>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 80046ca:	e01d      	b.n	8004708 <startErrorLEDs+0x180>
				case EDL:
					errorLED.standard_boot=0;
 80046cc:	4b57      	ldr	r3, [pc, #348]	; (800482c <startErrorLEDs+0x2a4>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 80046d2:	4b56      	ldr	r3, [pc, #344]	; (800482c <startErrorLEDs+0x2a4>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 80046d8:	4b54      	ldr	r3, [pc, #336]	; (800482c <startErrorLEDs+0x2a4>)
 80046da:	2201      	movs	r2, #1
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 80046de:	e013      	b.n	8004708 <startErrorLEDs+0x180>
				case MASS_STORAGE:
					errorLED.standard_boot=1;
 80046e0:	4b52      	ldr	r3, [pc, #328]	; (800482c <startErrorLEDs+0x2a4>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=0;
 80046e6:	4b51      	ldr	r3, [pc, #324]	; (800482c <startErrorLEDs+0x2a4>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 80046ec:	4b4f      	ldr	r3, [pc, #316]	; (800482c <startErrorLEDs+0x2a4>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 80046f2:	e009      	b.n	8004708 <startErrorLEDs+0x180>
				case RECOVERY:
					errorLED.standard_boot=0;
 80046f4:	4b4d      	ldr	r3, [pc, #308]	; (800482c <startErrorLEDs+0x2a4>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	61da      	str	r2, [r3, #28]
					errorLED.uefi_boot=1;
 80046fa:	4b4c      	ldr	r3, [pc, #304]	; (800482c <startErrorLEDs+0x2a4>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	621a      	str	r2, [r3, #32]
					errorLED.edl_boot=1;
 8004700:	4b4a      	ldr	r3, [pc, #296]	; (800482c <startErrorLEDs+0x2a4>)
 8004702:	2201      	movs	r2, #1
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8004706:	bf00      	nop
				}
		  setErrorLED(STANDARD_LED,errorLED.standard_boot);
 8004708:	4b48      	ldr	r3, [pc, #288]	; (800482c <startErrorLEDs+0x2a4>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	4619      	mov	r1, r3
 8004718:	2007      	movs	r0, #7
 800471a:	f7fe ffcb 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 800471e:	2014      	movs	r0, #20
 8004720:	f00b f9c4 	bl	800faac <osDelay>
		  setErrorLED(UEFI_LED,errorLED.uefi_boot);
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <startErrorLEDs+0x2a4>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4619      	mov	r1, r3
 8004734:	2008      	movs	r0, #8
 8004736:	f7fe ffbd 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 800473a:	2014      	movs	r0, #20
 800473c:	f00b f9b6 	bl	800faac <osDelay>
		  setErrorLED(EDL_LED,errorLED.edl_boot);
 8004740:	4b3a      	ldr	r3, [pc, #232]	; (800482c <startErrorLEDs+0x2a4>)
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	4619      	mov	r1, r3
 8004750:	2009      	movs	r0, #9
 8004752:	f7fe ffaf 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 8004756:	2014      	movs	r0, #20
 8004758:	f00b f9a8 	bl	800faac <osDelay>
		  setErrorLED(FAULT3,errorLED.fault3);
 800475c:	4b33      	ldr	r3, [pc, #204]	; (800482c <startErrorLEDs+0x2a4>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	4619      	mov	r1, r3
 800476c:	2002      	movs	r0, #2
 800476e:	f7fe ffa1 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 8004772:	2014      	movs	r0, #20
 8004774:	f00b f99a 	bl	800faac <osDelay>
		  setErrorLED(FAULT4,errorLED.fault4);
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <startErrorLEDs+0x2a4>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	4619      	mov	r1, r3
 8004788:	2003      	movs	r0, #3
 800478a:	f7fe ff93 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 800478e:	2014      	movs	r0, #20
 8004790:	f00b f98c 	bl	800faac <osDelay>
		  setErrorLED(FAULT5,errorLED.fault5);
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <startErrorLEDs+0x2a4>)
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	4619      	mov	r1, r3
 80047a4:	2004      	movs	r0, #4
 80047a6:	f7fe ff85 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 80047aa:	2014      	movs	r0, #20
 80047ac:	f00b f97e 	bl	800faac <osDelay>
		  setErrorLED(FAULT6,errorLED.fault6);
 80047b0:	4b1e      	ldr	r3, [pc, #120]	; (800482c <startErrorLEDs+0x2a4>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	4619      	mov	r1, r3
 80047c0:	2005      	movs	r0, #5
 80047c2:	f7fe ff77 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 80047c6:	2014      	movs	r0, #20
 80047c8:	f00b f970 	bl	800faac <osDelay>
		  setErrorLED(FAULT7,errorLED.fault7);
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <startErrorLEDs+0x2a4>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	4619      	mov	r1, r3
 80047dc:	2006      	movs	r0, #6
 80047de:	f7fe ff69 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 80047e2:	2014      	movs	r0, #20
 80047e4:	f00b f962 	bl	800faac <osDelay>
		  setErrorLED(FAULT8,errorLED.fault8);
 80047e8:	4b10      	ldr	r3, [pc, #64]	; (800482c <startErrorLEDs+0x2a4>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	4619      	mov	r1, r3
 80047f8:	200a      	movs	r0, #10
 80047fa:	f7fe ff5b 	bl	80036b4 <setErrorLED>
		  osDelay(20);
 80047fe:	2014      	movs	r0, #20
 8004800:	f00b f954 	bl	800faac <osDelay>
		  setErrorLED(FAULT9,errorLED.fault9);
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <startErrorLEDs+0x2a4>)
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	4619      	mov	r1, r3
 8004814:	200b      	movs	r0, #11
 8004816:	f7fe ff4d 	bl	80036b4 <setErrorLED>
	  }

    osDelay(500);
 800481a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800481e:	f00b f945 	bl	800faac <osDelay>
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 8004822:	e6b5      	b.n	8004590 <startErrorLEDs+0x8>
 8004824:	20029224 	.word	0x20029224
 8004828:	2000007c 	.word	0x2000007c
 800482c:	200032d8 	.word	0x200032d8
 8004830:	20003274 	.word	0x20003274
 8004834:	20000004 	.word	0x20000004
 8004838:	200032ac 	.word	0x200032ac

0800483c <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 8004848:	4b79      	ldr	r3, [pc, #484]	; (8004a30 <startZionRead+0x1f4>)
 800484a:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 800484c:	4b79      	ldr	r3, [pc, #484]	; (8004a34 <startZionRead+0x1f8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 80e5 	bne.w	8004a20 <startZionRead+0x1e4>
		  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8004856:	4b78      	ldr	r3, [pc, #480]	; (8004a38 <startZionRead+0x1fc>)
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	4b77      	ldr	r3, [pc, #476]	; (8004a38 <startZionRead+0x1fc>)
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	4013      	ands	r3, r2
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4b75      	ldr	r3, [pc, #468]	; (8004a38 <startZionRead+0x1fc>)
 8004864:	789b      	ldrb	r3, [r3, #2]
 8004866:	4013      	ands	r3, r2
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 800486e:	f7ff f83d 	bl	80038ec <getADCValues>
 8004872:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 8004874:	4b71      	ldr	r3, [pc, #452]	; (8004a3c <startZionRead+0x200>)
 8004876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4413      	add	r3, r2
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 8004882:	edd7 7a06 	vldr	s15, [r7, #24]
 8004886:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004a40 <startZionRead+0x204>
 800488a:	eef4 7a47 	vcmp.f32	s15, s14
 800488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004892:	f000 80c8 	beq.w	8004a26 <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004896:	edd7 7a06 	vldr	s15, [r7, #24]
 800489a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800489e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	dd5d      	ble.n	8004964 <startZionRead+0x128>
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d15a      	bne.n	8004964 <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 80048ae:	f004 fce9 	bl	8009284 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <startZionRead+0x208>)
 80048b6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ba:	099b      	lsrs	r3, r3, #6
 80048bc:	613b      	str	r3, [r7, #16]
				  if(runtime > 15){
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	f340 80af 	ble.w	8004a24 <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 80048c6:	f004 f9dd 	bl	8008c84 <zionEEPROMPresence>
 80048ca:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d012      	beq.n	80048fa <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 80048d4:	4b57      	ldr	r3, [pc, #348]	; (8004a34 <startZionRead+0x1f8>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 80048da:	20a6      	movs	r0, #166	; 0xa6
 80048dc:	f004 fa22 	bl	8008d24 <parseZionEEPROM>
 80048e0:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a53      	ldr	r2, [pc, #332]	; (8004a34 <startZionRead+0x1f8>)
 80048e8:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4a51      	ldr	r2, [pc, #324]	; (8004a34 <startZionRead+0x1f8>)
 80048f0:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	4a4f      	ldr	r2, [pc, #316]	; (8004a34 <startZionRead+0x1f8>)
 80048f8:	61d3      	str	r3, [r2, #28]
					  }

					  if(*(zionEEPROMPresent+1)){
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3304      	adds	r3, #4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004904:	4b4b      	ldr	r3, [pc, #300]	; (8004a34 <startZionRead+0x1f8>)
 8004906:	2201      	movs	r2, #1
 8004908:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 800490a:	20a8      	movs	r0, #168	; 0xa8
 800490c:	f004 fa0a 	bl	8008d24 <parseZionEEPROM>
 8004910:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a47      	ldr	r2, [pc, #284]	; (8004a34 <startZionRead+0x1f8>)
 8004918:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	4a45      	ldr	r2, [pc, #276]	; (8004a34 <startZionRead+0x1f8>)
 8004920:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	4a43      	ldr	r2, [pc, #268]	; (8004a34 <startZionRead+0x1f8>)
 8004928:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3308      	adds	r3, #8
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d012      	beq.n	800495a <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004934:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <startZionRead+0x1f8>)
 8004936:	2201      	movs	r2, #1
 8004938:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 800493a:	20aa      	movs	r0, #170	; 0xaa
 800493c:	f004 f9f2 	bl	8008d24 <parseZionEEPROM>
 8004940:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a3b      	ldr	r2, [pc, #236]	; (8004a34 <startZionRead+0x1f8>)
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4a39      	ldr	r2, [pc, #228]	; (8004a34 <startZionRead+0x1f8>)
 8004950:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4a37      	ldr	r2, [pc, #220]	; (8004a34 <startZionRead+0x1f8>)
 8004958:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <startZionRead+0x1f8>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004960:	f00b f89e 	bl	800faa0 <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 800496a:	2201      	movs	r2, #1
 800496c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004970:	4835      	ldr	r0, [pc, #212]	; (8004a48 <startZionRead+0x20c>)
 8004972:	f006 f90d 	bl	800ab90 <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 8004976:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <startZionRead+0x1f8>)
 8004978:	2201      	movs	r2, #1
 800497a:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 800497c:	2301      	movs	r3, #1
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	e051      	b.n	8004a26 <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 8004982:	f004 f97f 	bl	8008c84 <zionEEPROMPresence>
 8004986:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d012      	beq.n	80049b6 <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 8004990:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <startZionRead+0x1f8>)
 8004992:	2201      	movs	r2, #1
 8004994:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004996:	20a6      	movs	r0, #166	; 0xa6
 8004998:	f004 f9c4 	bl	8008d24 <parseZionEEPROM>
 800499c:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <startZionRead+0x1f8>)
 80049a4:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <startZionRead+0x1f8>)
 80049ac:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	4a20      	ldr	r2, [pc, #128]	; (8004a34 <startZionRead+0x1f8>)
 80049b4:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3304      	adds	r3, #4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <startZionRead+0x1f8>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 80049c6:	20a8      	movs	r0, #168	; 0xa8
 80049c8:	f004 f9ac 	bl	8008d24 <parseZionEEPROM>
 80049cc:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <startZionRead+0x1f8>)
 80049d4:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <startZionRead+0x1f8>)
 80049dc:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <startZionRead+0x1f8>)
 80049e4:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3308      	adds	r3, #8
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 80049f0:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <startZionRead+0x1f8>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 80049f6:	20aa      	movs	r0, #170	; 0xaa
 80049f8:	f004 f994 	bl	8008d24 <parseZionEEPROM>
 80049fc:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <startZionRead+0x1f8>)
 8004a04:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <startZionRead+0x1f8>)
 8004a0c:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <startZionRead+0x1f8>)
 8004a14:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <startZionRead+0x1f8>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004a1c:	f00b f840 	bl	800faa0 <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 8004a20:	f00b f83e 	bl	800faa0 <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004a24:	bf00      	nop
	  }
    osDelay(400);
 8004a26:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004a2a:	f00b f83f 	bl	800faac <osDelay>
	  if(!ZION.zionFinished){
 8004a2e:	e70d      	b.n	800484c <startZionRead+0x10>
 8004a30:	429a0000 	.word	0x429a0000
 8004a34:	20003274 	.word	0x20003274
 8004a38:	20029224 	.word	0x20029224
 8004a3c:	2000007c 	.word	0x2000007c
 8004a40:	429a0000 	.word	0x429a0000
 8004a44:	10624dd3 	.word	0x10624dd3
 8004a48:	40020400 	.word	0x40020400

08004a4c <startBootButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBootButtons */
void startBootButtons(void *argument)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBootButtons */
  /* Infinite loop */
	int pwrBtnReady=0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
	int timeTurnedOn=0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	613b      	str	r3, [r7, #16]
	int pwrOn=0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
	int presentTime=0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  if(bootButtons.bootModeSet){
 8004a64:	4b92      	ldr	r3, [pc, #584]	; (8004cb0 <startBootButtons+0x264>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 81ed 	beq.w	8004e48 <startBootButtons+0x3fc>
		  presentTime = (HAL_GetTick());
 8004a6e:	f004 fc09 	bl	8009284 <HAL_GetTick>
 8004a72:	4603      	mov	r3, r0
 8004a74:	60bb      	str	r3, [r7, #8]
		  if(timeTurnedOn==0){
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <startBootButtons+0x34>
			  timeTurnedOn=presentTime;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	613b      	str	r3, [r7, #16]
		  }
		  if(bootButtons.bootMode !=0){
 8004a80:	4b8b      	ldr	r3, [pc, #556]	; (8004cb0 <startBootButtons+0x264>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80ce 	beq.w	8004c26 <startBootButtons+0x1da>
			  if(bootButtons.btn1){ //DPAD UP
 8004a8a:	4b89      	ldr	r3, [pc, #548]	; (8004cb0 <startBootButtons+0x264>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d006      	beq.n	8004aa0 <startBootButtons+0x54>
				  BTN1_ON;
 8004a92:	2201      	movs	r2, #1
 8004a94:	2108      	movs	r1, #8
 8004a96:	4887      	ldr	r0, [pc, #540]	; (8004cb4 <startBootButtons+0x268>)
 8004a98:	f006 f87a 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004aa0:	4b83      	ldr	r3, [pc, #524]	; (8004cb0 <startBootButtons+0x264>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d006      	beq.n	8004ab6 <startBootButtons+0x6a>
				  BTN2_ON;
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2110      	movs	r1, #16
 8004aac:	4881      	ldr	r0, [pc, #516]	; (8004cb4 <startBootButtons+0x268>)
 8004aae:	f006 f86f 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004ab6:	4b7e      	ldr	r3, [pc, #504]	; (8004cb0 <startBootButtons+0x264>)
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d006      	beq.n	8004acc <startBootButtons+0x80>
				  BTN3_ON;
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2120      	movs	r1, #32
 8004ac2:	487c      	ldr	r0, [pc, #496]	; (8004cb4 <startBootButtons+0x268>)
 8004ac4:	f006 f864 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn4){
 8004acc:	4b78      	ldr	r3, [pc, #480]	; (8004cb0 <startBootButtons+0x264>)
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <startBootButtons+0x98>
				  BTN4_ON;
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ada:	4876      	ldr	r0, [pc, #472]	; (8004cb4 <startBootButtons+0x268>)
 8004adc:	f006 f858 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn5){
 8004ae4:	4b72      	ldr	r3, [pc, #456]	; (8004cb0 <startBootButtons+0x264>)
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <startBootButtons+0xb0>
				  BTN5_ON;
 8004aec:	2201      	movs	r2, #1
 8004aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004af2:	4870      	ldr	r0, [pc, #448]	; (8004cb4 <startBootButtons+0x268>)
 8004af4:	f006 f84c 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.edl_sw){
 8004afc:	4b6c      	ldr	r3, [pc, #432]	; (8004cb0 <startBootButtons+0x264>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <startBootButtons+0xc8>
				  EDL_SW_ON;
 8004b04:	2201      	movs	r2, #1
 8004b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b0a:	486b      	ldr	r0, [pc, #428]	; (8004cb8 <startBootButtons+0x26c>)
 8004b0c:	f006 f840 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004b10:	2301      	movs	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.ex_sw){
 8004b14:	4b66      	ldr	r3, [pc, #408]	; (8004cb0 <startBootButtons+0x264>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <startBootButtons+0xe0>
				  EX_SW_ON;
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b22:	4865      	ldr	r0, [pc, #404]	; (8004cb8 <startBootButtons+0x26c>)
 8004b24:	f006 f834 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
			  }
			  setOutputGPIOState(outputGPIOs.odOut_0, OFF); //set the reset GPIO.
 8004b2c:	4b63      	ldr	r3, [pc, #396]	; (8004cbc <startBootButtons+0x270>)
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fab2 	bl	800309c <setOutputGPIOState>
			  osDelay(500);
 8004b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b3c:	f00a ffb6 	bl	800faac <osDelay>
			  setOutputGPIOState(outputGPIOs.odOut_0, ON); //turn off the reset GPIO
 8004b40:	4b5e      	ldr	r3, [pc, #376]	; (8004cbc <startBootButtons+0x270>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	2101      	movs	r1, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe faa8 	bl	800309c <setOutputGPIOState>
			  osDelay(500);
 8004b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b50:	f00a ffac 	bl	800faac <osDelay>
			  BTN1_OFF;
 8004b54:	2200      	movs	r2, #0
 8004b56:	2108      	movs	r1, #8
 8004b58:	4856      	ldr	r0, [pc, #344]	; (8004cb4 <startBootButtons+0x268>)
 8004b5a:	f006 f819 	bl	800ab90 <HAL_GPIO_WritePin>
			  BTN2_OFF;
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2110      	movs	r1, #16
 8004b62:	4854      	ldr	r0, [pc, #336]	; (8004cb4 <startBootButtons+0x268>)
 8004b64:	f006 f814 	bl	800ab90 <HAL_GPIO_WritePin>
			  BTN3_OFF;
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2120      	movs	r1, #32
 8004b6c:	4851      	ldr	r0, [pc, #324]	; (8004cb4 <startBootButtons+0x268>)
 8004b6e:	f006 f80f 	bl	800ab90 <HAL_GPIO_WritePin>
			  BTN4_OFF;
 8004b72:	2200      	movs	r2, #0
 8004b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b78:	484e      	ldr	r0, [pc, #312]	; (8004cb4 <startBootButtons+0x268>)
 8004b7a:	f006 f809 	bl	800ab90 <HAL_GPIO_WritePin>
			  BTN5_OFF;
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b84:	484b      	ldr	r0, [pc, #300]	; (8004cb4 <startBootButtons+0x268>)
 8004b86:	f006 f803 	bl	800ab90 <HAL_GPIO_WritePin>
			  EDL_SW_OFF;
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b90:	4849      	ldr	r0, [pc, #292]	; (8004cb8 <startBootButtons+0x26c>)
 8004b92:	f005 fffd 	bl	800ab90 <HAL_GPIO_WritePin>
			  EX_SW_OFF;
 8004b96:	2200      	movs	r2, #0
 8004b98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b9c:	4846      	ldr	r0, [pc, #280]	; (8004cb8 <startBootButtons+0x26c>)
 8004b9e:	f005 fff7 	bl	800ab90 <HAL_GPIO_WritePin>
			  if(bootButtons.btn1){
 8004ba2:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <startBootButtons+0x264>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <startBootButtons+0x166>
				  bootButtons.bootMode= RECOVERY;
 8004baa:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <startBootButtons+0x264>)
 8004bac:	2204      	movs	r2, #4
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
 8004bb0:	e01a      	b.n	8004be8 <startBootButtons+0x19c>
				  //errorLEDState[RECOVERY_LED]=1;
			  }
			  else if(bootButtons.btn2){
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <startBootButtons+0x264>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <startBootButtons+0x176>
				  bootButtons.bootMode= MASS_STORAGE;
 8004bba:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <startBootButtons+0x264>)
 8004bbc:	2205      	movs	r2, #5
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc0:	e012      	b.n	8004be8 <startBootButtons+0x19c>
				 // errorLEDState[MASS_STORAGE_LED]=1;
			  }
			  else if(bootButtons.btn3){
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <startBootButtons+0x264>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <startBootButtons+0x186>
				  bootButtons.bootMode= UEFI;
 8004bca:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <startBootButtons+0x264>)
 8004bcc:	2202      	movs	r2, #2
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
 8004bd0:	e00a      	b.n	8004be8 <startBootButtons+0x19c>
				  //errorLEDState[UEFI_LED]=1;
			  }
			  else if(bootButtons.edl_sw){
 8004bd2:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <startBootButtons+0x264>)
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <startBootButtons+0x196>
				  bootButtons.bootMode= EDL;
 8004bda:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <startBootButtons+0x264>)
 8004bdc:	2203      	movs	r2, #3
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
 8004be0:	e002      	b.n	8004be8 <startBootButtons+0x19c>
				  //errorLEDState[EDL_LED]=1;
			  }
			  else{
				  bootButtons.bootMode=STANDARD;
 8004be2:	4b33      	ldr	r3, [pc, #204]	; (8004cb0 <startBootButtons+0x264>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28
				  //errorLEDState[STANDARD_LED]=1;
			  }
			  bootButtons.btn0=0;
 8004be8:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <startBootButtons+0x264>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <startBootButtons+0x264>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 8004bf4:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <startBootButtons+0x264>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 8004bfa:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <startBootButtons+0x264>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 8004c00:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <startBootButtons+0x264>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 8004c06:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <startBootButtons+0x264>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 8004c0c:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <startBootButtons+0x264>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 8004c12:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <startBootButtons+0x264>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <startBootButtons+0x264>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <startBootButtons+0x264>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e110      	b.n	8004e48 <startBootButtons+0x3fc>

		  }
		  else{
			  if((bootButtons.btn0) || pwrBtnReady){ //power button
 8004c26:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <startBootButtons+0x264>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <startBootButtons+0x1e8>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d06a      	beq.n	8004d0a <startBootButtons+0x2be>
				  BTN0_ON;
 8004c34:	2201      	movs	r2, #1
 8004c36:	2104      	movs	r1, #4
 8004c38:	481e      	ldr	r0, [pc, #120]	; (8004cb4 <startBootButtons+0x268>)
 8004c3a:	f005 ffa9 	bl	800ab90 <HAL_GPIO_WritePin>
				  timeTurnedOn = (HAL_GetTick());
 8004c3e:	f004 fb21 	bl	8009284 <HAL_GetTick>
 8004c42:	4603      	mov	r3, r0
 8004c44:	613b      	str	r3, [r7, #16]
				  pwrBtnReady=0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
				  pwrOn = 1;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
				  osDelay(500);
 8004c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c52:	f00a ff2b 	bl	800faac <osDelay>
				  BTN0_OFF;
 8004c56:	2200      	movs	r2, #0
 8004c58:	2104      	movs	r1, #4
 8004c5a:	4816      	ldr	r0, [pc, #88]	; (8004cb4 <startBootButtons+0x268>)
 8004c5c:	f005 ff98 	bl	800ab90 <HAL_GPIO_WritePin>
				  osDelay(500);
 8004c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c64:	f00a ff22 	bl	800faac <osDelay>
				  pwrOn=0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
				  timeTurnedOn=0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
				  if(bootButtons.btn0){
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <startBootButtons+0x264>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <startBootButtons+0x234>
					  bootButtons.bootMode= STANDARD;
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <startBootButtons+0x264>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c7e:	e026      	b.n	8004cce <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn1){
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <startBootButtons+0x264>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <startBootButtons+0x244>
					  bootButtons.bootMode= RECOVERY;
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <startBootButtons+0x264>)
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c8e:	e01e      	b.n	8004cce <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn2){
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <startBootButtons+0x264>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <startBootButtons+0x254>
					  bootButtons.bootMode= MASS_STORAGE;
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <startBootButtons+0x264>)
 8004c9a:	2205      	movs	r2, #5
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c9e:	e016      	b.n	8004cce <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn3){
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <startBootButtons+0x264>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <startBootButtons+0x274>
					  bootButtons.bootMode= UEFI;
 8004ca8:	4b01      	ldr	r3, [pc, #4]	; (8004cb0 <startBootButtons+0x264>)
 8004caa:	2202      	movs	r2, #2
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28
 8004cae:	e00e      	b.n	8004cce <startBootButtons+0x282>
 8004cb0:	200032ac 	.word	0x200032ac
 8004cb4:	40021400 	.word	0x40021400
 8004cb8:	40020400 	.word	0x40020400
 8004cbc:	20000044 	.word	0x20000044
				  }
				  else if(bootButtons.edl_sw){
 8004cc0:	4b64      	ldr	r3, [pc, #400]	; (8004e54 <startBootButtons+0x408>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <startBootButtons+0x282>
					  bootButtons.bootMode= EDL;
 8004cc8:	4b62      	ldr	r3, [pc, #392]	; (8004e54 <startBootButtons+0x408>)
 8004cca:	2203      	movs	r2, #3
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28
				  }
				  bootButtons.btn0=0;
 8004cce:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <startBootButtons+0x408>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	605a      	str	r2, [r3, #4]
				  bootButtons.btn1=0;
 8004cd4:	4b5f      	ldr	r3, [pc, #380]	; (8004e54 <startBootButtons+0x408>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
				  bootButtons.btn2=0;
 8004cda:	4b5e      	ldr	r3, [pc, #376]	; (8004e54 <startBootButtons+0x408>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	60da      	str	r2, [r3, #12]
				  bootButtons.btn3=0;
 8004ce0:	4b5c      	ldr	r3, [pc, #368]	; (8004e54 <startBootButtons+0x408>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	611a      	str	r2, [r3, #16]
				  bootButtons.btn4=0;
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	; (8004e54 <startBootButtons+0x408>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	615a      	str	r2, [r3, #20]
				  bootButtons.btn5=0;
 8004cec:	4b59      	ldr	r3, [pc, #356]	; (8004e54 <startBootButtons+0x408>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	619a      	str	r2, [r3, #24]
				  bootButtons.edl_sw=0;
 8004cf2:	4b58      	ldr	r3, [pc, #352]	; (8004e54 <startBootButtons+0x408>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	61da      	str	r2, [r3, #28]
				  bootButtons.ex_sw=0;
 8004cf8:	4b56      	ldr	r3, [pc, #344]	; (8004e54 <startBootButtons+0x408>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	621a      	str	r2, [r3, #32]
				  bootButtons.modeClear=1;
 8004cfe:	4b55      	ldr	r3, [pc, #340]	; (8004e54 <startBootButtons+0x408>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24
				  bootButtons.bootModeSet=0;
 8004d04:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <startBootButtons+0x408>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
				  //osDelay(300);
			  }
			  if(bootButtons.btn1){ //DPAD UP
 8004d0a:	4b52      	ldr	r3, [pc, #328]	; (8004e54 <startBootButtons+0x408>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <startBootButtons+0x2d6>
				  BTN1_ON;
 8004d12:	2201      	movs	r2, #1
 8004d14:	2108      	movs	r1, #8
 8004d16:	4850      	ldr	r0, [pc, #320]	; (8004e58 <startBootButtons+0x40c>)
 8004d18:	f005 ff3a 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e008      	b.n	8004d34 <startBootButtons+0x2e8>
			  }
			  else if(!(bootButtons.btn1)){ //DPAD UP
 8004d22:	4b4c      	ldr	r3, [pc, #304]	; (8004e54 <startBootButtons+0x408>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <startBootButtons+0x2e8>
				  BTN1_OFF;
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2108      	movs	r1, #8
 8004d2e:	484a      	ldr	r0, [pc, #296]	; (8004e58 <startBootButtons+0x40c>)
 8004d30:	f005 ff2e 	bl	800ab90 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004d34:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <startBootButtons+0x408>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <startBootButtons+0x300>
				  BTN2_ON;
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	2110      	movs	r1, #16
 8004d40:	4845      	ldr	r0, [pc, #276]	; (8004e58 <startBootButtons+0x40c>)
 8004d42:	f005 ff25 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e008      	b.n	8004d5e <startBootButtons+0x312>
			  }
			  else if(!(bootButtons.btn2)){ //DPAD RIGHT
 8004d4c:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <startBootButtons+0x408>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <startBootButtons+0x312>
				  BTN2_OFF;
 8004d54:	2200      	movs	r2, #0
 8004d56:	2110      	movs	r1, #16
 8004d58:	483f      	ldr	r0, [pc, #252]	; (8004e58 <startBootButtons+0x40c>)
 8004d5a:	f005 ff19 	bl	800ab90 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	; (8004e54 <startBootButtons+0x408>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <startBootButtons+0x32a>
				  BTN3_ON;
 8004d66:	2201      	movs	r2, #1
 8004d68:	2120      	movs	r1, #32
 8004d6a:	483b      	ldr	r0, [pc, #236]	; (8004e58 <startBootButtons+0x40c>)
 8004d6c:	f005 ff10 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004d70:	2301      	movs	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e008      	b.n	8004d88 <startBootButtons+0x33c>
			  }
			  else if(!(bootButtons.btn3)){ //DPAD LEFT
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <startBootButtons+0x408>)
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <startBootButtons+0x33c>
				  BTN3_OFF;
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2120      	movs	r1, #32
 8004d82:	4835      	ldr	r0, [pc, #212]	; (8004e58 <startBootButtons+0x40c>)
 8004d84:	f005 ff04 	bl	800ab90 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn4){
 8004d88:	4b32      	ldr	r3, [pc, #200]	; (8004e54 <startBootButtons+0x408>)
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <startBootButtons+0x356>
				  BTN4_ON;
 8004d90:	2201      	movs	r2, #1
 8004d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d96:	4830      	ldr	r0, [pc, #192]	; (8004e58 <startBootButtons+0x40c>)
 8004d98:	f005 fefa 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e00d      	b.n	8004dbe <startBootButtons+0x372>
			  }
			  else if(!(bootButtons.btn4)){
 8004da2:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <startBootButtons+0x408>)
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <startBootButtons+0x372>
				  BTN4_OFF;
 8004daa:	2200      	movs	r2, #0
 8004dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004db0:	4829      	ldr	r0, [pc, #164]	; (8004e58 <startBootButtons+0x40c>)
 8004db2:	f005 feed 	bl	800ab90 <HAL_GPIO_WritePin>
				  osDelay(300);
 8004db6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004dba:	f00a fe77 	bl	800faac <osDelay>
			  }
			  if(bootButtons.btn5){
 8004dbe:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <startBootButtons+0x408>)
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <startBootButtons+0x38c>
				  BTN5_ON;
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dcc:	4822      	ldr	r0, [pc, #136]	; (8004e58 <startBootButtons+0x40c>)
 8004dce:	f005 fedf 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e009      	b.n	8004dec <startBootButtons+0x3a0>
			  }
			  else if(!(bootButtons.btn5)){
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <startBootButtons+0x408>)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d105      	bne.n	8004dec <startBootButtons+0x3a0>
				  BTN5_OFF;
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004de6:	481c      	ldr	r0, [pc, #112]	; (8004e58 <startBootButtons+0x40c>)
 8004de8:	f005 fed2 	bl	800ab90 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.edl_sw){
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <startBootButtons+0x408>)
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <startBootButtons+0x3ba>
				  EDL_SW_ON;
 8004df4:	2201      	movs	r2, #1
 8004df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dfa:	4818      	ldr	r0, [pc, #96]	; (8004e5c <startBootButtons+0x410>)
 8004dfc:	f005 fec8 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e009      	b.n	8004e1a <startBootButtons+0x3ce>
			  }
			  else if(!(bootButtons.edl_sw)){
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <startBootButtons+0x408>)
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <startBootButtons+0x3ce>
				  EDL_SW_OFF;
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e14:	4811      	ldr	r0, [pc, #68]	; (8004e5c <startBootButtons+0x410>)
 8004e16:	f005 febb 	bl	800ab90 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.ex_sw){
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <startBootButtons+0x408>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <startBootButtons+0x3e8>
				  EX_SW_ON;
 8004e22:	2201      	movs	r2, #1
 8004e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e28:	480c      	ldr	r0, [pc, #48]	; (8004e5c <startBootButtons+0x410>)
 8004e2a:	f005 feb1 	bl	800ab90 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e009      	b.n	8004e48 <startBootButtons+0x3fc>
			  }
			  else if(!(bootButtons.ex_sw)){
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <startBootButtons+0x408>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <startBootButtons+0x3fc>
				  EX_SW_OFF;
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e42:	4806      	ldr	r0, [pc, #24]	; (8004e5c <startBootButtons+0x410>)
 8004e44:	f005 fea4 	bl	800ab90 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
		  }
	  }
    osDelay(800);
 8004e48:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004e4c:	f00a fe2e 	bl	800faac <osDelay>
	  if(bootButtons.bootModeSet){
 8004e50:	e608      	b.n	8004a64 <startBootButtons+0x18>
 8004e52:	bf00      	nop
 8004e54:	200032ac 	.word	0x200032ac
 8004e58:	40021400 	.word	0x40021400
 8004e5c:	40020400 	.word	0x40020400

08004e60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004e72:	f004 f9f3 	bl	800925c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40001000 	.word	0x40001000

08004e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004e88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e8a:	e7fe      	b.n	8004e8a <Error_Handler+0x6>

08004e8c <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 8004e90:	2201      	movs	r2, #1
 8004e92:	2102      	movs	r1, #2
 8004e94:	4802      	ldr	r0, [pc, #8]	; (8004ea0 <SMLCD_Enable+0x14>)
 8004e96:	f005 fe7b 	bl	800ab90 <HAL_GPIO_WritePin>
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40022400 	.word	0x40022400

08004ea4 <initializeDisplay>:

int previousMenu = 0;
float displayAdcValues[21];
int setIndicator=0;

void initializeDisplay(){
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b099      	sub	sp, #100	; 0x64
 8004ea8:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 8004eaa:	f7fb fbb5 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 8004eae:	4c10      	ldr	r4, [pc, #64]	; (8004ef0 <initializeDisplay+0x4c>)
 8004eb0:	4668      	mov	r0, sp
 8004eb2:	f104 0310 	add.w	r3, r4, #16
 8004eb6:	2254      	movs	r2, #84	; 0x54
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f00d fc23 	bl	8012704 <memcpy>
 8004ebe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ec2:	f7fb fbc9 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 8004ec6:	f7ff ffe1 	bl	8004e8c <SMLCD_Enable>
	SMLCD_Clear();
 8004eca:	f7fb fbe5 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fb fd21 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 8004eda:	f7fb fd47 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 8004ede:	2254      	movs	r2, #84	; 0x54
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4804      	ldr	r0, [pc, #16]	; (8004ef4 <initializeDisplay+0x50>)
 8004ee4:	f00d fc19 	bl	801271a <memset>
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd90      	pop	{r4, r7, pc}
 8004ef0:	20028ab0 	.word	0x20028ab0
 8004ef4:	20030aa0 	.word	0x20030aa0

08004ef8 <drawMainMenu>:

void drawMainMenu(int indicator){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 8004f00:	4b48      	ldr	r3, [pc, #288]	; (8005024 <drawMainMenu+0x12c>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	getLatestADC();
 8004f06:	f002 fdb9 	bl	8007a7c <getLatestADC>
	LCD_Clear();
 8004f0a:	f7fb fd2f 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 8004f0e:	4b46      	ldr	r3, [pc, #280]	; (8005028 <drawMainMenu+0x130>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8004f14:	4b45      	ldr	r3, [pc, #276]	; (800502c <drawMainMenu+0x134>)
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	4b44      	ldr	r3, [pc, #272]	; (8005030 <drawMainMenu+0x138>)
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2100      	movs	r1, #0
 8004f26:	2000      	movs	r0, #0
 8004f28:	f7fb ff72 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8004f2c:	4b3f      	ldr	r3, [pc, #252]	; (800502c <drawMainMenu+0x134>)
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	3b03      	subs	r3, #3
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <drawMainMenu+0x138>)
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	3b03      	subs	r3, #3
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	2002      	movs	r0, #2
 8004f40:	f7fb ff66 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004f44:	230a      	movs	r3, #10
 8004f46:	60bb      	str	r3, [r7, #8]
	j  = 10;
 8004f48:	230a      	movs	r3, #10
 8004f4a:	60fb      	str	r3, [r7, #12]
	printFaults(i,j);
 8004f4c:	68f9      	ldr	r1, [r7, #12]
 8004f4e:	68b8      	ldr	r0, [r7, #8]
 8004f50:	f002 fdc2 	bl	8007ad8 <printFaults>
	//i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
	//i += LCD_PutStr(i, j, "So many!", fnt7x10);
	i=150;
 8004f54:	2396      	movs	r3, #150	; 0x96
 8004f56:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	b298      	uxth	r0, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	b299      	uxth	r1, r3
 8004f60:	4b34      	ldr	r3, [pc, #208]	; (8005034 <drawMainMenu+0x13c>)
 8004f62:	4a35      	ldr	r2, [pc, #212]	; (8005038 <drawMainMenu+0x140>)
 8004f64:	f7fc fae2 	bl	800152c <LCD_PutStr>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60bb      	str	r3, [r7, #8]
	if(displayAdcValues[Adc.adc0] >3.5){
 8004f72:	4b32      	ldr	r3, [pc, #200]	; (800503c <drawMainMenu+0x144>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a32      	ldr	r2, [pc, #200]	; (8005040 <drawMainMenu+0x148>)
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	edd3 7a00 	vldr	s15, [r3]
 8004f80:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8004f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8c:	dd68      	ble.n	8005060 <drawMainMenu+0x168>
		//errorLED.vsysPMIFault=0;
		switch(bootButtons.bootMode){
 8004f8e:	4b2d      	ldr	r3, [pc, #180]	; (8005044 <drawMainMenu+0x14c>)
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d86c      	bhi.n	8005070 <drawMainMenu+0x178>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <drawMainMenu+0xa4>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fb5 	.word	0x08004fb5
 8004fa0:	08004fc7 	.word	0x08004fc7
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08004feb 	.word	0x08004feb
 8004fac:	0800500f 	.word	0x0800500f
 8004fb0:	08004ffd 	.word	0x08004ffd
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	b298      	uxth	r0, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	b299      	uxth	r1, r3
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <drawMainMenu+0x13c>)
 8004fbe:	4a22      	ldr	r2, [pc, #136]	; (8005048 <drawMainMenu+0x150>)
 8004fc0:	f7fc fab4 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 8004fc4:	e054      	b.n	8005070 <drawMainMenu+0x178>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	b298      	uxth	r0, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	b299      	uxth	r1, r3
 8004fce:	4b19      	ldr	r3, [pc, #100]	; (8005034 <drawMainMenu+0x13c>)
 8004fd0:	4a1e      	ldr	r2, [pc, #120]	; (800504c <drawMainMenu+0x154>)
 8004fd2:	f7fc faab 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 8004fd6:	e04b      	b.n	8005070 <drawMainMenu+0x178>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	b298      	uxth	r0, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	b299      	uxth	r1, r3
 8004fe0:	4b14      	ldr	r3, [pc, #80]	; (8005034 <drawMainMenu+0x13c>)
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <drawMainMenu+0x158>)
 8004fe4:	f7fc faa2 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 8004fe8:	e042      	b.n	8005070 <drawMainMenu+0x178>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	b298      	uxth	r0, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	b299      	uxth	r1, r3
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <drawMainMenu+0x13c>)
 8004ff4:	4a17      	ldr	r2, [pc, #92]	; (8005054 <drawMainMenu+0x15c>)
 8004ff6:	f7fc fa99 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 1;
			break;
 8004ffa:	e039      	b.n	8005070 <drawMainMenu+0x178>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	b298      	uxth	r0, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	b299      	uxth	r1, r3
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <drawMainMenu+0x13c>)
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <drawMainMenu+0x160>)
 8005008:	f7fc fa90 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 800500c:	e030      	b.n	8005070 <drawMainMenu+0x178>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	b298      	uxth	r0, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	b299      	uxth	r1, r3
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <drawMainMenu+0x13c>)
 8005018:	4a10      	ldr	r2, [pc, #64]	; (800505c <drawMainMenu+0x164>)
 800501a:	f7fc fa87 	bl	800152c <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 1;
			break;
 800501e:	bf00      	nop
 8005020:	e026      	b.n	8005070 <drawMainMenu+0x178>
 8005022:	bf00      	nop
 8005024:	20003378 	.word	0x20003378
 8005028:	20028aa8 	.word	0x20028aa8
 800502c:	20028aaa 	.word	0x20028aaa
 8005030:	20028aac 	.word	0x20028aac
 8005034:	08017028 	.word	0x08017028
 8005038:	08016824 	.word	0x08016824
 800503c:	20000128 	.word	0x20000128
 8005040:	20030aa0 	.word	0x20030aa0
 8005044:	200032ac 	.word	0x200032ac
 8005048:	0801682c 	.word	0x0801682c
 800504c:	08016830 	.word	0x08016830
 8005050:	08016834 	.word	0x08016834
 8005054:	0801683c 	.word	0x0801683c
 8005058:	08016840 	.word	0x08016840
 800505c:	08016848 	.word	0x08016848
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	b298      	uxth	r0, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	b299      	uxth	r1, r3
 8005068:	4b96      	ldr	r3, [pc, #600]	; (80052c4 <drawMainMenu+0x3cc>)
 800506a:	4a97      	ldr	r2, [pc, #604]	; (80052c8 <drawMainMenu+0x3d0>)
 800506c:	f7fc fa5e 	bl	800152c <LCD_PutStr>
		//errorLED.standard_boot = 0;
		//errorLED.uefi_boot  = 0;
		//errorLED.edl_boot  = 0;

	}
	i  = 135;
 8005070:	2387      	movs	r3, #135	; 0x87
 8005072:	60bb      	str	r3, [r7, #8]
	j += 14;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	330e      	adds	r3, #14
 8005078:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	b299      	uxth	r1, r3
 800507e:	4b93      	ldr	r3, [pc, #588]	; (80052cc <drawMainMenu+0x3d4>)
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	3b5e      	subs	r3, #94	; 0x5e
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	b29b      	uxth	r3, r3
 800508a:	3303      	adds	r3, #3
 800508c:	b29b      	uxth	r3, r3
 800508e:	2002      	movs	r0, #2
 8005090:	f7fb ff00 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	b29b      	uxth	r3, r3
 8005098:	3305      	adds	r3, #5
 800509a:	b298      	uxth	r0, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3308      	adds	r3, #8
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2102      	movs	r1, #2
 80050aa:	f7fb fef3 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 80050ae:	4b87      	ldr	r3, [pc, #540]	; (80052cc <drawMainMenu+0x3d4>)
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	3b61      	subs	r3, #97	; 0x61
 80050b4:	b298      	uxth	r0, r3
 80050b6:	4b85      	ldr	r3, [pc, #532]	; (80052cc <drawMainMenu+0x3d4>)
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	3b5e      	subs	r3, #94	; 0x5e
 80050bc:	b29a      	uxth	r2, r3
 80050be:	4b84      	ldr	r3, [pc, #528]	; (80052d0 <drawMainMenu+0x3d8>)
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2102      	movs	r1, #2
 80050c8:	f7fb fee4 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-90;
 80050cc:	4b7f      	ldr	r3, [pc, #508]	; (80052cc <drawMainMenu+0x3d4>)
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	3b5a      	subs	r3, #90	; 0x5a
 80050d2:	60bb      	str	r3, [r7, #8]
	j  = 3;
 80050d4:	2303      	movs	r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	b298      	uxth	r0, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b02      	subs	r3, #2
 80050e2:	b299      	uxth	r1, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	330c      	adds	r3, #12
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3308      	adds	r3, #8
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f7fb fece 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	3314      	adds	r3, #20
 80050fc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "ZION FLT", fnt7x10);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	b298      	uxth	r0, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	b299      	uxth	r1, r3
 8005106:	4b6f      	ldr	r3, [pc, #444]	; (80052c4 <drawMainMenu+0x3cc>)
 8005108:	4a72      	ldr	r2, [pc, #456]	; (80052d4 <drawMainMenu+0x3dc>)
 800510a:	f7fc fa0f 	bl	800152c <LCD_PutStr>
	j+=22;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3316      	adds	r3, #22
 8005112:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005114:	4b6d      	ldr	r3, [pc, #436]	; (80052cc <drawMainMenu+0x3d4>)
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	3b5a      	subs	r3, #90	; 0x5a
 800511a:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	b298      	uxth	r0, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b02      	subs	r3, #2
 8005126:	b299      	uxth	r1, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	b29b      	uxth	r3, r3
 800512c:	330c      	adds	r3, #12
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	b29b      	uxth	r3, r3
 8005134:	3308      	adds	r3, #8
 8005136:	b29b      	uxth	r3, r3
 8005138:	f7fb feac 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	3314      	adds	r3, #20
 8005140:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "VSYS FLT", fnt7x10);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	b298      	uxth	r0, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	b299      	uxth	r1, r3
 800514a:	4b5e      	ldr	r3, [pc, #376]	; (80052c4 <drawMainMenu+0x3cc>)
 800514c:	4a62      	ldr	r2, [pc, #392]	; (80052d8 <drawMainMenu+0x3e0>)
 800514e:	f7fc f9ed 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 8005152:	4b5e      	ldr	r3, [pc, #376]	; (80052cc <drawMainMenu+0x3d4>)
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	3b5a      	subs	r3, #90	; 0x5a
 8005158:	60bb      	str	r3, [r7, #8]
	j  += 22;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3316      	adds	r3, #22
 800515e:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	b298      	uxth	r0, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b02      	subs	r3, #2
 800516a:	b299      	uxth	r1, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	b29b      	uxth	r3, r3
 8005170:	330c      	adds	r3, #12
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	b29b      	uxth	r3, r3
 8005178:	3308      	adds	r3, #8
 800517a:	b29b      	uxth	r3, r3
 800517c:	f7fb fe8a 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	3314      	adds	r3, #20
 8005184:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3", fnt7x10);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	b298      	uxth	r0, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	b299      	uxth	r1, r3
 800518e:	4b4d      	ldr	r3, [pc, #308]	; (80052c4 <drawMainMenu+0x3cc>)
 8005190:	4a52      	ldr	r2, [pc, #328]	; (80052dc <drawMainMenu+0x3e4>)
 8005192:	f7fc f9cb 	bl	800152c <LCD_PutStr>
	j+=22;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3316      	adds	r3, #22
 800519a:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 800519c:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <drawMainMenu+0x3d4>)
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	3b5a      	subs	r3, #90	; 0x5a
 80051a2:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	b298      	uxth	r0, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b02      	subs	r3, #2
 80051ae:	b299      	uxth	r1, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	330c      	adds	r3, #12
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3308      	adds	r3, #8
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f7fb fe68 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	3314      	adds	r3, #20
 80051c8:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4", fnt7x10);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	b298      	uxth	r0, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	b299      	uxth	r1, r3
 80051d2:	4b3c      	ldr	r3, [pc, #240]	; (80052c4 <drawMainMenu+0x3cc>)
 80051d4:	4a42      	ldr	r2, [pc, #264]	; (80052e0 <drawMainMenu+0x3e8>)
 80051d6:	f7fc f9a9 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 80051da:	4b3c      	ldr	r3, [pc, #240]	; (80052cc <drawMainMenu+0x3d4>)
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	3b5a      	subs	r3, #90	; 0x5a
 80051e0:	60bb      	str	r3, [r7, #8]
	j  += 22;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3316      	adds	r3, #22
 80051e6:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	b298      	uxth	r0, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b02      	subs	r3, #2
 80051f2:	b299      	uxth	r1, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	330c      	adds	r3, #12
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3308      	adds	r3, #8
 8005202:	b29b      	uxth	r3, r3
 8005204:	f7fb fe46 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3314      	adds	r3, #20
 800520c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5", fnt7x10);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	b298      	uxth	r0, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	b299      	uxth	r1, r3
 8005216:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <drawMainMenu+0x3cc>)
 8005218:	4a32      	ldr	r2, [pc, #200]	; (80052e4 <drawMainMenu+0x3ec>)
 800521a:	f7fc f987 	bl	800152c <LCD_PutStr>
	j+=22;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3316      	adds	r3, #22
 8005222:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005224:	4b29      	ldr	r3, [pc, #164]	; (80052cc <drawMainMenu+0x3d4>)
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	3b5a      	subs	r3, #90	; 0x5a
 800522a:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	b298      	uxth	r0, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b02      	subs	r3, #2
 8005236:	b299      	uxth	r1, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	b29b      	uxth	r3, r3
 800523c:	330c      	adds	r3, #12
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	b29b      	uxth	r3, r3
 8005244:	3308      	adds	r3, #8
 8005246:	b29b      	uxth	r3, r3
 8005248:	f7fb fe24 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	3314      	adds	r3, #20
 8005250:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6", fnt7x10);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	b298      	uxth	r0, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	b299      	uxth	r1, r3
 800525a:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <drawMainMenu+0x3cc>)
 800525c:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <drawMainMenu+0x3f0>)
 800525e:	f7fc f965 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 8005262:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <drawMainMenu+0x3d4>)
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	3b5a      	subs	r3, #90	; 0x5a
 8005268:	60bb      	str	r3, [r7, #8]
	j  +=22;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3316      	adds	r3, #22
 800526e:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	b298      	uxth	r0, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b02      	subs	r3, #2
 800527a:	b299      	uxth	r1, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	b29b      	uxth	r3, r3
 8005280:	330c      	adds	r3, #12
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	b29b      	uxth	r3, r3
 8005288:	3308      	adds	r3, #8
 800528a:	b29b      	uxth	r3, r3
 800528c:	f7fb fe02 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	3314      	adds	r3, #20
 8005294:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7", fnt7x10);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	b298      	uxth	r0, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	b299      	uxth	r1, r3
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <drawMainMenu+0x3cc>)
 80052a0:	4a12      	ldr	r2, [pc, #72]	; (80052ec <drawMainMenu+0x3f4>)
 80052a2:	f7fc f943 	bl	800152c <LCD_PutStr>
	j+=22;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3316      	adds	r3, #22
 80052aa:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <drawMainMenu+0x3d4>)
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	3b5a      	subs	r3, #90	; 0x5a
 80052b2:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	b298      	uxth	r0, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b02      	subs	r3, #2
 80052be:	b299      	uxth	r1, r3
 80052c0:	e016      	b.n	80052f0 <drawMainMenu+0x3f8>
 80052c2:	bf00      	nop
 80052c4:	08017028 	.word	0x08017028
 80052c8:	0801682c 	.word	0x0801682c
 80052cc:	20028aaa 	.word	0x20028aaa
 80052d0:	20028aac 	.word	0x20028aac
 80052d4:	0801684c 	.word	0x0801684c
 80052d8:	08016858 	.word	0x08016858
 80052dc:	08016864 	.word	0x08016864
 80052e0:	0801686c 	.word	0x0801686c
 80052e4:	08016874 	.word	0x08016874
 80052e8:	0801687c 	.word	0x0801687c
 80052ec:	08016884 	.word	0x08016884
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	330c      	adds	r3, #12
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3308      	adds	r3, #8
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f7fb fdc8 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	3314      	adds	r3, #20
 8005308:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8", fnt7x10);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	b298      	uxth	r0, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	b299      	uxth	r1, r3
 8005312:	4b6f      	ldr	r3, [pc, #444]	; (80054d0 <drawMainMenu+0x5d8>)
 8005314:	4a6f      	ldr	r2, [pc, #444]	; (80054d4 <drawMainMenu+0x5dc>)
 8005316:	f7fc f909 	bl	800152c <LCD_PutStr>
	i  = scr_width-90;
 800531a:	4b6f      	ldr	r3, [pc, #444]	; (80054d8 <drawMainMenu+0x5e0>)
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	3b5a      	subs	r3, #90	; 0x5a
 8005320:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3316      	adds	r3, #22
 8005326:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	b298      	uxth	r0, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b02      	subs	r3, #2
 8005332:	b299      	uxth	r1, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	b29b      	uxth	r3, r3
 8005338:	330c      	adds	r3, #12
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	b29b      	uxth	r3, r3
 8005340:	3308      	adds	r3, #8
 8005342:	b29b      	uxth	r3, r3
 8005344:	f7fb fda6 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	3314      	adds	r3, #20
 800534c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9", fnt7x10);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	b298      	uxth	r0, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	b299      	uxth	r1, r3
 8005356:	4b5e      	ldr	r3, [pc, #376]	; (80054d0 <drawMainMenu+0x5d8>)
 8005358:	4a60      	ldr	r2, [pc, #384]	; (80054dc <drawMainMenu+0x5e4>)
 800535a:	f7fc f8e7 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 800535e:	4b60      	ldr	r3, [pc, #384]	; (80054e0 <drawMainMenu+0x5e8>)
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	3b14      	subs	r3, #20
 8005364:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005366:	4b5c      	ldr	r3, [pc, #368]	; (80054d8 <drawMainMenu+0x5e0>)
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	3b5a      	subs	r3, #90	; 0x5a
 800536c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	b298      	uxth	r0, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b02      	subs	r3, #2
 8005378:	b299      	uxth	r1, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	b29b      	uxth	r3, r3
 800537e:	330c      	adds	r3, #12
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	b29b      	uxth	r3, r3
 8005386:	3308      	adds	r3, #8
 8005388:	b29b      	uxth	r3, r3
 800538a:	f7fb fd83 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3314      	adds	r3, #20
 8005392:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	b298      	uxth	r0, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	b299      	uxth	r1, r3
 800539c:	4b4c      	ldr	r3, [pc, #304]	; (80054d0 <drawMainMenu+0x5d8>)
 800539e:	4a51      	ldr	r2, [pc, #324]	; (80054e4 <drawMainMenu+0x5ec>)
 80053a0:	f7fc f8c4 	bl	800152c <LCD_PutStr>

	i=100;
 80053a4:	2364      	movs	r3, #100	; 0x64
 80053a6:	60bb      	str	r3, [r7, #8]
	j=75;
 80053a8:	234b      	movs	r3, #75	; 0x4b
 80053aa:	60fb      	str	r3, [r7, #12]
	i+=20;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	3314      	adds	r3, #20
 80053b0:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	b298      	uxth	r0, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	b299      	uxth	r1, r3
 80053ba:	4b45      	ldr	r3, [pc, #276]	; (80054d0 <drawMainMenu+0x5d8>)
 80053bc:	4a4a      	ldr	r2, [pc, #296]	; (80054e8 <drawMainMenu+0x5f0>)
 80053be:	f7fc f8b5 	bl	800152c <LCD_PutStr>
	j+=15;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	330f      	adds	r3, #15
 80053c6:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b03      	subs	r3, #3
 80053ce:	b298      	uxth	r0, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b02      	subs	r3, #2
 80053d6:	b299      	uxth	r1, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3347      	adds	r3, #71	; 0x47
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3302      	adds	r3, #2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f7fb fd54 	bl	8000e94 <LCD_FillRect>

	i=100;
 80053ec:	2364      	movs	r3, #100	; 0x64
 80053ee:	60bb      	str	r3, [r7, #8]
	j=110;
 80053f0:	236e      	movs	r3, #110	; 0x6e
 80053f2:	60fb      	str	r3, [r7, #12]
	i+=20;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	3314      	adds	r3, #20
 80053f8:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	b298      	uxth	r0, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	b299      	uxth	r1, r3
 8005402:	4b33      	ldr	r3, [pc, #204]	; (80054d0 <drawMainMenu+0x5d8>)
 8005404:	4a39      	ldr	r2, [pc, #228]	; (80054ec <drawMainMenu+0x5f4>)
 8005406:	f7fc f891 	bl	800152c <LCD_PutStr>
	j+=15;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	330f      	adds	r3, #15
 800540e:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b03      	subs	r3, #3
 8005416:	b298      	uxth	r0, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b02      	subs	r3, #2
 800541e:	b299      	uxth	r1, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	b29b      	uxth	r3, r3
 8005424:	3332      	adds	r3, #50	; 0x32
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	b29b      	uxth	r3, r3
 800542c:	3302      	adds	r3, #2
 800542e:	b29b      	uxth	r3, r3
 8005430:	f7fb fd30 	bl	8000e94 <LCD_FillRect>

	i=100;
 8005434:	2364      	movs	r3, #100	; 0x64
 8005436:	60bb      	str	r3, [r7, #8]
	j=145;
 8005438:	2391      	movs	r3, #145	; 0x91
 800543a:	60fb      	str	r3, [r7, #12]
	i+=20;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	3314      	adds	r3, #20
 8005440:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	b298      	uxth	r0, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	b299      	uxth	r1, r3
 800544a:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <drawMainMenu+0x5d8>)
 800544c:	4a28      	ldr	r2, [pc, #160]	; (80054f0 <drawMainMenu+0x5f8>)
 800544e:	f7fc f86d 	bl	800152c <LCD_PutStr>
	j+=15;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	330f      	adds	r3, #15
 8005456:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b03      	subs	r3, #3
 800545e:	b298      	uxth	r0, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b02      	subs	r3, #2
 8005466:	b299      	uxth	r1, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	b29b      	uxth	r3, r3
 800546c:	3355      	adds	r3, #85	; 0x55
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	b29b      	uxth	r3, r3
 8005474:	3302      	adds	r3, #2
 8005476:	b29b      	uxth	r3, r3
 8005478:	f7fb fd0c 	bl	8000e94 <LCD_FillRect>
	i=100;
 800547c:	2364      	movs	r3, #100	; 0x64
 800547e:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d006      	beq.n	8005494 <drawMainMenu+0x59c>
 8005486:	2b03      	cmp	r3, #3
 8005488:	d007      	beq.n	800549a <drawMainMenu+0x5a2>
 800548a:	2b01      	cmp	r3, #1
 800548c:	d108      	bne.n	80054a0 <drawMainMenu+0x5a8>
	case FIRST:
	{
		j=75;
 800548e:	234b      	movs	r3, #75	; 0x4b
 8005490:	60fb      	str	r3, [r7, #12]
		break;
 8005492:	e008      	b.n	80054a6 <drawMainMenu+0x5ae>
	}
	case SECOND:
	{
		j=110;
 8005494:	236e      	movs	r3, #110	; 0x6e
 8005496:	60fb      	str	r3, [r7, #12]
		break;
 8005498:	e005      	b.n	80054a6 <drawMainMenu+0x5ae>
	}
	case THIRD:
	{
		j=145;
 800549a:	2391      	movs	r3, #145	; 0x91
 800549c:	60fb      	str	r3, [r7, #12]
		break;
 800549e:	e002      	b.n	80054a6 <drawMainMenu+0x5ae>
	}
	default:
	{
		j=75;
 80054a0:	234b      	movs	r3, #75	; 0x4b
 80054a2:	60fb      	str	r3, [r7, #12]
		break;
 80054a4:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	b298      	uxth	r0, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	b299      	uxth	r1, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	330c      	adds	r3, #12
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	330a      	adds	r3, #10
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f7fb fce9 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 80054c2:	f7fb f909 	bl	80006d8 <SMLCD_Flush>
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	08017028 	.word	0x08017028
 80054d4:	0801688c 	.word	0x0801688c
 80054d8:	20028aaa 	.word	0x20028aaa
 80054dc:	08016894 	.word	0x08016894
 80054e0:	20028aac 	.word	0x20028aac
 80054e4:	0801689c 	.word	0x0801689c
 80054e8:	080168a4 	.word	0x080168a4
 80054ec:	080168b0 	.word	0x080168b0
 80054f0:	080168b8 	.word	0x080168b8

080054f4 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b090      	sub	sp, #64	; 0x40
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 80054fc:	2314      	movs	r3, #20
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
	int inputGpioAlignment=245;
 8005500:	23f5      	movs	r3, #245	; 0xf5
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
	int daughterCardAlignment=240;
 8005504:	23f0      	movs	r3, #240	; 0xf0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i2cCheck;
	int arrowUp = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowDown=1;
 800550c:	2301      	movs	r3, #1
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowSize=3;
 8005510:	2303      	movs	r3, #3
 8005512:	623b      	str	r3, [r7, #32]
	previousMenu=0;
 8005514:	4b95      	ldr	r3, [pc, #596]	; (800576c <drawStatusMenu+0x278>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 800551a:	f7fb fa27 	bl	800096c <LCD_Clear>
	getLatestADC();
 800551e:	f002 faad 	bl	8007a7c <getLatestADC>
	drawMenuHeader();
 8005522:	f002 f9ef 	bl	8007904 <drawMenuHeader>
	i  = 135;
 8005526:	2387      	movs	r3, #135	; 0x87
 8005528:	61fb      	str	r3, [r7, #28]
	j = 24;
 800552a:	2318      	movs	r3, #24
 800552c:	61bb      	str	r3, [r7, #24]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	b299      	uxth	r1, r3
 8005532:	4b8f      	ldr	r3, [pc, #572]	; (8005770 <drawStatusMenu+0x27c>)
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	3b02      	subs	r3, #2
 8005538:	b29a      	uxth	r2, r3
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	b29b      	uxth	r3, r3
 800553e:	3303      	adds	r3, #3
 8005540:	b29b      	uxth	r3, r3
 8005542:	2002      	movs	r0, #2
 8005544:	f7fb fca6 	bl	8000e94 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);
	switch(indicator){
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b02      	cmp	r3, #2
 800554c:	f000 829a 	beq.w	8005a84 <drawStatusMenu+0x590>
 8005550:	2b03      	cmp	r3, #3
 8005552:	f001 8037 	beq.w	80065c4 <drawStatusMenu+0x10d0>
 8005556:	2b01      	cmp	r3, #1
 8005558:	f041 813f 	bne.w	80067da <drawStatusMenu+0x12e6>
	case 1:{
		i=35;
 800555c:	2323      	movs	r3, #35	; 0x23
 800555e:	61fb      	str	r3, [r7, #28]
		j=90;
 8005560:	235a      	movs	r3, #90	; 0x5a
 8005562:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b02      	subs	r3, #2
 800556a:	b299      	uxth	r1, r3
 800556c:	4b80      	ldr	r3, [pc, #512]	; (8005770 <drawStatusMenu+0x27c>)
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	3b02      	subs	r3, #2
 8005572:	b29a      	uxth	r2, r3
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	b29b      	uxth	r3, r3
 8005578:	3302      	adds	r3, #2
 800557a:	b29b      	uxth	r3, r3
 800557c:	2002      	movs	r0, #2
 800557e:	f7fb fc89 	bl	8000e94 <LCD_FillRect>
		j=75;
 8005582:	234b      	movs	r3, #75	; 0x4b
 8005584:	61bb      	str	r3, [r7, #24]
		i=62;
 8005586:	233e      	movs	r3, #62	; 0x3e
 8005588:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	b298      	uxth	r0, r3
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	b299      	uxth	r1, r3
 8005592:	4b78      	ldr	r3, [pc, #480]	; (8005774 <drawStatusMenu+0x280>)
 8005594:	4a78      	ldr	r2, [pc, #480]	; (8005778 <drawStatusMenu+0x284>)
 8005596:	f7fb ffc9 	bl	800152c <LCD_PutStr>
 800559a:	4603      	mov	r3, r0
 800559c:	461a      	mov	r2, r3
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	61fb      	str	r3, [r7, #28]
		i+=145;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	3391      	adds	r3, #145	; 0x91
 80055a8:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	b298      	uxth	r0, r3
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	b299      	uxth	r1, r3
 80055b2:	4b70      	ldr	r3, [pc, #448]	; (8005774 <drawStatusMenu+0x280>)
 80055b4:	4a71      	ldr	r2, [pc, #452]	; (800577c <drawStatusMenu+0x288>)
 80055b6:	f7fb ffb9 	bl	800152c <LCD_PutStr>

		i=10;
 80055ba:	230a      	movs	r3, #10
 80055bc:	61fb      	str	r3, [r7, #28]
		j=95;
 80055be:	235f      	movs	r3, #95	; 0x5f
 80055c0:	61bb      	str	r3, [r7, #24]

		i+= LCD_PutStr(i, j, "ZION FLT: ", fnt7x10);
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	b298      	uxth	r0, r3
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	b299      	uxth	r1, r3
 80055ca:	4b6a      	ldr	r3, [pc, #424]	; (8005774 <drawStatusMenu+0x280>)
 80055cc:	4a6c      	ldr	r2, [pc, #432]	; (8005780 <drawStatusMenu+0x28c>)
 80055ce:	f7fb ffad 	bl	800152c <LCD_PutStr>
 80055d2:	4603      	mov	r3, r0
 80055d4:	461a      	mov	r2, r3
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	61fb      	str	r3, [r7, #28]
		if(errorLED.zionFault){
 80055dc:	4b69      	ldr	r3, [pc, #420]	; (8005784 <drawStatusMenu+0x290>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <drawStatusMenu+0x102>
			LCD_PutStr(i, j, "SOC ZION ERROR", fnt7x10);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	b298      	uxth	r0, r3
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	b299      	uxth	r1, r3
 80055ec:	4b61      	ldr	r3, [pc, #388]	; (8005774 <drawStatusMenu+0x280>)
 80055ee:	4a66      	ldr	r2, [pc, #408]	; (8005788 <drawStatusMenu+0x294>)
 80055f0:	f7fb ff9c 	bl	800152c <LCD_PutStr>
 80055f4:	e007      	b.n	8005606 <drawStatusMenu+0x112>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	b298      	uxth	r0, r3
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	b299      	uxth	r1, r3
 80055fe:	4b5d      	ldr	r3, [pc, #372]	; (8005774 <drawStatusMenu+0x280>)
 8005600:	4a62      	ldr	r2, [pc, #392]	; (800578c <drawStatusMenu+0x298>)
 8005602:	f7fb ff93 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	b298      	uxth	r0, r3
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	b299      	uxth	r1, r3
 8005612:	4b58      	ldr	r3, [pc, #352]	; (8005774 <drawStatusMenu+0x280>)
 8005614:	4a5e      	ldr	r2, [pc, #376]	; (8005790 <drawStatusMenu+0x29c>)
 8005616:	f7fb ff89 	bl	800152c <LCD_PutStr>
 800561a:	4603      	mov	r3, r0
 800561c:	461a      	mov	r2, r3
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]
		if(ZION.SOC_EEPROM_Detected){
 8005624:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <drawStatusMenu+0x2a0>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <drawStatusMenu+0x14a>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	b298      	uxth	r0, r3
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	b299      	uxth	r1, r3
 8005634:	4b4f      	ldr	r3, [pc, #316]	; (8005774 <drawStatusMenu+0x280>)
 8005636:	4a58      	ldr	r2, [pc, #352]	; (8005798 <drawStatusMenu+0x2a4>)
 8005638:	f7fb ff78 	bl	800152c <LCD_PutStr>
 800563c:	e007      	b.n	800564e <drawStatusMenu+0x15a>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	b298      	uxth	r0, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	b299      	uxth	r1, r3
 8005646:	4b4b      	ldr	r3, [pc, #300]	; (8005774 <drawStatusMenu+0x280>)
 8005648:	4a54      	ldr	r2, [pc, #336]	; (800579c <drawStatusMenu+0x2a8>)
 800564a:	f7fb ff6f 	bl	800152c <LCD_PutStr>
		}
		i=10;
 800564e:	230a      	movs	r3, #10
 8005650:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	330f      	adds	r3, #15
 8005656:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "VSYS_PMI: ", fnt7x10);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	b298      	uxth	r0, r3
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	b299      	uxth	r1, r3
 8005660:	4b44      	ldr	r3, [pc, #272]	; (8005774 <drawStatusMenu+0x280>)
 8005662:	4a4f      	ldr	r2, [pc, #316]	; (80057a0 <drawStatusMenu+0x2ac>)
 8005664:	f7fb ff62 	bl	800152c <LCD_PutStr>
 8005668:	4603      	mov	r3, r0
 800566a:	461a      	mov	r2, r3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	61fb      	str	r3, [r7, #28]
		if(errorLED.vsysPMIFault){
 8005672:	4b44      	ldr	r3, [pc, #272]	; (8005784 <drawStatusMenu+0x290>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <drawStatusMenu+0x198>
			LCD_PutStr(i, j, "VSYS PMI LOW", fnt7x10);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	b298      	uxth	r0, r3
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	b299      	uxth	r1, r3
 8005682:	4b3c      	ldr	r3, [pc, #240]	; (8005774 <drawStatusMenu+0x280>)
 8005684:	4a47      	ldr	r2, [pc, #284]	; (80057a4 <drawStatusMenu+0x2b0>)
 8005686:	f7fb ff51 	bl	800152c <LCD_PutStr>
 800568a:	e007      	b.n	800569c <drawStatusMenu+0x1a8>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	b298      	uxth	r0, r3
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	b299      	uxth	r1, r3
 8005694:	4b37      	ldr	r3, [pc, #220]	; (8005774 <drawStatusMenu+0x280>)
 8005696:	4a3d      	ldr	r2, [pc, #244]	; (800578c <drawStatusMenu+0x298>)
 8005698:	f7fb ff48 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	b298      	uxth	r0, r3
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	b299      	uxth	r1, r3
 80056a8:	4b32      	ldr	r3, [pc, #200]	; (8005774 <drawStatusMenu+0x280>)
 80056aa:	4a3f      	ldr	r2, [pc, #252]	; (80057a8 <drawStatusMenu+0x2b4>)
 80056ac:	f7fb ff3e 	bl	800152c <LCD_PutStr>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461a      	mov	r2, r3
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	61fb      	str	r3, [r7, #28]
		if(ZION.ASIC_EEPROM_Detected){
 80056ba:	4b36      	ldr	r3, [pc, #216]	; (8005794 <drawStatusMenu+0x2a0>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <drawStatusMenu+0x1e0>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	b298      	uxth	r0, r3
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	b299      	uxth	r1, r3
 80056ca:	4b2a      	ldr	r3, [pc, #168]	; (8005774 <drawStatusMenu+0x280>)
 80056cc:	4a32      	ldr	r2, [pc, #200]	; (8005798 <drawStatusMenu+0x2a4>)
 80056ce:	f7fb ff2d 	bl	800152c <LCD_PutStr>
 80056d2:	e007      	b.n	80056e4 <drawStatusMenu+0x1f0>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	b298      	uxth	r0, r3
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	b299      	uxth	r1, r3
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <drawStatusMenu+0x280>)
 80056de:	4a2f      	ldr	r2, [pc, #188]	; (800579c <drawStatusMenu+0x2a8>)
 80056e0:	f7fb ff24 	bl	800152c <LCD_PutStr>
		}
		i=10;
 80056e4:	230a      	movs	r3, #10
 80056e6:	61fb      	str	r3, [r7, #28]
		j+=15;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	330f      	adds	r3, #15
 80056ec:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	b298      	uxth	r0, r3
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	b299      	uxth	r1, r3
 80056f6:	4b1f      	ldr	r3, [pc, #124]	; (8005774 <drawStatusMenu+0x280>)
 80056f8:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <drawStatusMenu+0x2b8>)
 80056fa:	f7fb ff17 	bl	800152c <LCD_PutStr>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault3){
 8005708:	4b1e      	ldr	r3, [pc, #120]	; (8005784 <drawStatusMenu+0x290>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <drawStatusMenu+0x22e>
			LCD_PutStr(i, j, "FAULT 3 Triggered", fnt7x10);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	b298      	uxth	r0, r3
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	b299      	uxth	r1, r3
 8005718:	4b16      	ldr	r3, [pc, #88]	; (8005774 <drawStatusMenu+0x280>)
 800571a:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <drawStatusMenu+0x2bc>)
 800571c:	f7fb ff06 	bl	800152c <LCD_PutStr>
 8005720:	e007      	b.n	8005732 <drawStatusMenu+0x23e>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	b298      	uxth	r0, r3
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	b299      	uxth	r1, r3
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <drawStatusMenu+0x280>)
 800572c:	4a17      	ldr	r2, [pc, #92]	; (800578c <drawStatusMenu+0x298>)
 800572e:	f7fb fefd 	bl	800152c <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	b298      	uxth	r0, r3
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	b299      	uxth	r1, r3
 800573e:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <drawStatusMenu+0x280>)
 8005740:	4a1c      	ldr	r2, [pc, #112]	; (80057b4 <drawStatusMenu+0x2c0>)
 8005742:	f7fb fef3 	bl	800152c <LCD_PutStr>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	61fb      	str	r3, [r7, #28]
		if(ZION.DISPLAY_EEPROM_Detected){
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <drawStatusMenu+0x2a0>)
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02f      	beq.n	80057b8 <drawStatusMenu+0x2c4>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	b298      	uxth	r0, r3
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	b299      	uxth	r1, r3
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <drawStatusMenu+0x280>)
 8005762:	4a0d      	ldr	r2, [pc, #52]	; (8005798 <drawStatusMenu+0x2a4>)
 8005764:	f7fb fee2 	bl	800152c <LCD_PutStr>
 8005768:	e02e      	b.n	80057c8 <drawStatusMenu+0x2d4>
 800576a:	bf00      	nop
 800576c:	20003378 	.word	0x20003378
 8005770:	20028aaa 	.word	0x20028aaa
 8005774:	08017028 	.word	0x08017028
 8005778:	080168c4 	.word	0x080168c4
 800577c:	080168cc 	.word	0x080168cc
 8005780:	080168dc 	.word	0x080168dc
 8005784:	200032d8 	.word	0x200032d8
 8005788:	080168e8 	.word	0x080168e8
 800578c:	080168f8 	.word	0x080168f8
 8005790:	08016900 	.word	0x08016900
 8005794:	20003274 	.word	0x20003274
 8005798:	08016908 	.word	0x08016908
 800579c:	08016914 	.word	0x08016914
 80057a0:	08016920 	.word	0x08016920
 80057a4:	0801692c 	.word	0x0801692c
 80057a8:	0801693c 	.word	0x0801693c
 80057ac:	08016944 	.word	0x08016944
 80057b0:	08016950 	.word	0x08016950
 80057b4:	08016964 	.word	0x08016964
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	b298      	uxth	r0, r3
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	b299      	uxth	r1, r3
 80057c0:	4b72      	ldr	r3, [pc, #456]	; (800598c <drawStatusMenu+0x498>)
 80057c2:	4a73      	ldr	r2, [pc, #460]	; (8005990 <drawStatusMenu+0x49c>)
 80057c4:	f7fb feb2 	bl	800152c <LCD_PutStr>
		}

		i=10;
 80057c8:	230a      	movs	r3, #10
 80057ca:	61fb      	str	r3, [r7, #28]
		j+=15;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	330f      	adds	r3, #15
 80057d0:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	b298      	uxth	r0, r3
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	b299      	uxth	r1, r3
 80057da:	4b6c      	ldr	r3, [pc, #432]	; (800598c <drawStatusMenu+0x498>)
 80057dc:	4a6d      	ldr	r2, [pc, #436]	; (8005994 <drawStatusMenu+0x4a0>)
 80057de:	f7fb fea5 	bl	800152c <LCD_PutStr>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault4){
 80057ec:	4b6a      	ldr	r3, [pc, #424]	; (8005998 <drawStatusMenu+0x4a4>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <drawStatusMenu+0x312>
			LCD_PutStr(i, j, "FAULT 4 Triggered", fnt7x10);
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	b298      	uxth	r0, r3
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	b299      	uxth	r1, r3
 80057fc:	4b63      	ldr	r3, [pc, #396]	; (800598c <drawStatusMenu+0x498>)
 80057fe:	4a67      	ldr	r2, [pc, #412]	; (800599c <drawStatusMenu+0x4a8>)
 8005800:	f7fb fe94 	bl	800152c <LCD_PutStr>
 8005804:	e007      	b.n	8005816 <drawStatusMenu+0x322>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	b298      	uxth	r0, r3
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	b299      	uxth	r1, r3
 800580e:	4b5f      	ldr	r3, [pc, #380]	; (800598c <drawStatusMenu+0x498>)
 8005810:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <drawStatusMenu+0x4ac>)
 8005812:	f7fb fe8b 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005816:	230a      	movs	r3, #10
 8005818:	61fb      	str	r3, [r7, #28]
		j+=15;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	330f      	adds	r3, #15
 800581e:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	b298      	uxth	r0, r3
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	b299      	uxth	r1, r3
 8005828:	4b58      	ldr	r3, [pc, #352]	; (800598c <drawStatusMenu+0x498>)
 800582a:	4a5e      	ldr	r2, [pc, #376]	; (80059a4 <drawStatusMenu+0x4b0>)
 800582c:	f7fb fe7e 	bl	800152c <LCD_PutStr>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault5){
 800583a:	4b57      	ldr	r3, [pc, #348]	; (8005998 <drawStatusMenu+0x4a4>)
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <drawStatusMenu+0x360>
			LCD_PutStr(i, j, "FAULT 5 Triggered", fnt7x10);
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	b298      	uxth	r0, r3
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	b299      	uxth	r1, r3
 800584a:	4b50      	ldr	r3, [pc, #320]	; (800598c <drawStatusMenu+0x498>)
 800584c:	4a56      	ldr	r2, [pc, #344]	; (80059a8 <drawStatusMenu+0x4b4>)
 800584e:	f7fb fe6d 	bl	800152c <LCD_PutStr>
 8005852:	e007      	b.n	8005864 <drawStatusMenu+0x370>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	b298      	uxth	r0, r3
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	b299      	uxth	r1, r3
 800585c:	4b4b      	ldr	r3, [pc, #300]	; (800598c <drawStatusMenu+0x498>)
 800585e:	4a50      	ldr	r2, [pc, #320]	; (80059a0 <drawStatusMenu+0x4ac>)
 8005860:	f7fb fe64 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005864:	230a      	movs	r3, #10
 8005866:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	330f      	adds	r3, #15
 800586c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	b298      	uxth	r0, r3
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	b299      	uxth	r1, r3
 8005876:	4b45      	ldr	r3, [pc, #276]	; (800598c <drawStatusMenu+0x498>)
 8005878:	4a4c      	ldr	r2, [pc, #304]	; (80059ac <drawStatusMenu+0x4b8>)
 800587a:	f7fb fe57 	bl	800152c <LCD_PutStr>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault6){
 8005888:	4b43      	ldr	r3, [pc, #268]	; (8005998 <drawStatusMenu+0x4a4>)
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <drawStatusMenu+0x3ae>
			LCD_PutStr(i, j, "FAULT 6 Triggered", fnt7x10);
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	b298      	uxth	r0, r3
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	b299      	uxth	r1, r3
 8005898:	4b3c      	ldr	r3, [pc, #240]	; (800598c <drawStatusMenu+0x498>)
 800589a:	4a45      	ldr	r2, [pc, #276]	; (80059b0 <drawStatusMenu+0x4bc>)
 800589c:	f7fb fe46 	bl	800152c <LCD_PutStr>
 80058a0:	e007      	b.n	80058b2 <drawStatusMenu+0x3be>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	b298      	uxth	r0, r3
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	b299      	uxth	r1, r3
 80058aa:	4b38      	ldr	r3, [pc, #224]	; (800598c <drawStatusMenu+0x498>)
 80058ac:	4a3c      	ldr	r2, [pc, #240]	; (80059a0 <drawStatusMenu+0x4ac>)
 80058ae:	f7fb fe3d 	bl	800152c <LCD_PutStr>
		}

		i=10;
 80058b2:	230a      	movs	r3, #10
 80058b4:	61fb      	str	r3, [r7, #28]
		j+=15;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	330f      	adds	r3, #15
 80058ba:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	b298      	uxth	r0, r3
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	b299      	uxth	r1, r3
 80058c4:	4b31      	ldr	r3, [pc, #196]	; (800598c <drawStatusMenu+0x498>)
 80058c6:	4a3b      	ldr	r2, [pc, #236]	; (80059b4 <drawStatusMenu+0x4c0>)
 80058c8:	f7fb fe30 	bl	800152c <LCD_PutStr>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault7){
 80058d6:	4b30      	ldr	r3, [pc, #192]	; (8005998 <drawStatusMenu+0x4a4>)
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <drawStatusMenu+0x3fc>
			LCD_PutStr(i, j, "FAULT 7 Triggered", fnt7x10);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	b298      	uxth	r0, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	b299      	uxth	r1, r3
 80058e6:	4b29      	ldr	r3, [pc, #164]	; (800598c <drawStatusMenu+0x498>)
 80058e8:	4a33      	ldr	r2, [pc, #204]	; (80059b8 <drawStatusMenu+0x4c4>)
 80058ea:	f7fb fe1f 	bl	800152c <LCD_PutStr>
 80058ee:	e007      	b.n	8005900 <drawStatusMenu+0x40c>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	b298      	uxth	r0, r3
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	b299      	uxth	r1, r3
 80058f8:	4b24      	ldr	r3, [pc, #144]	; (800598c <drawStatusMenu+0x498>)
 80058fa:	4a29      	ldr	r2, [pc, #164]	; (80059a0 <drawStatusMenu+0x4ac>)
 80058fc:	f7fb fe16 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005900:	230a      	movs	r3, #10
 8005902:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	330f      	adds	r3, #15
 8005908:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	b298      	uxth	r0, r3
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	b299      	uxth	r1, r3
 8005912:	4b1e      	ldr	r3, [pc, #120]	; (800598c <drawStatusMenu+0x498>)
 8005914:	4a29      	ldr	r2, [pc, #164]	; (80059bc <drawStatusMenu+0x4c8>)
 8005916:	f7fb fe09 	bl	800152c <LCD_PutStr>
 800591a:	4603      	mov	r3, r0
 800591c:	461a      	mov	r2, r3
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault8){
 8005924:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <drawStatusMenu+0x4a4>)
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <drawStatusMenu+0x44a>
			LCD_PutStr(i, j, "FAULT 8 Triggered", fnt7x10);
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	b298      	uxth	r0, r3
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	b299      	uxth	r1, r3
 8005934:	4b15      	ldr	r3, [pc, #84]	; (800598c <drawStatusMenu+0x498>)
 8005936:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <drawStatusMenu+0x4cc>)
 8005938:	f7fb fdf8 	bl	800152c <LCD_PutStr>
 800593c:	e007      	b.n	800594e <drawStatusMenu+0x45a>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	b298      	uxth	r0, r3
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	b299      	uxth	r1, r3
 8005946:	4b11      	ldr	r3, [pc, #68]	; (800598c <drawStatusMenu+0x498>)
 8005948:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <drawStatusMenu+0x4ac>)
 800594a:	f7fb fdef 	bl	800152c <LCD_PutStr>
		}

		i=10;
 800594e:	230a      	movs	r3, #10
 8005950:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	330f      	adds	r3, #15
 8005956:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault9: ", fnt7x10);
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	b298      	uxth	r0, r3
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	b299      	uxth	r1, r3
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <drawStatusMenu+0x498>)
 8005962:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <drawStatusMenu+0x4d0>)
 8005964:	f7fb fde2 	bl	800152c <LCD_PutStr>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	4413      	add	r3, r2
 8005970:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault9){
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <drawStatusMenu+0x4a4>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d028      	beq.n	80059cc <drawStatusMenu+0x4d8>
			LCD_PutStr(i, j, "FAULT 9 Triggered", fnt7x10);
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	b298      	uxth	r0, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	b299      	uxth	r1, r3
 8005982:	4b02      	ldr	r3, [pc, #8]	; (800598c <drawStatusMenu+0x498>)
 8005984:	4a10      	ldr	r2, [pc, #64]	; (80059c8 <drawStatusMenu+0x4d4>)
 8005986:	f7fb fdd1 	bl	800152c <LCD_PutStr>
 800598a:	e027      	b.n	80059dc <drawStatusMenu+0x4e8>
 800598c:	08017028 	.word	0x08017028
 8005990:	08016914 	.word	0x08016914
 8005994:	08016970 	.word	0x08016970
 8005998:	200032d8 	.word	0x200032d8
 800599c:	0801697c 	.word	0x0801697c
 80059a0:	080168f8 	.word	0x080168f8
 80059a4:	08016990 	.word	0x08016990
 80059a8:	0801699c 	.word	0x0801699c
 80059ac:	080169b0 	.word	0x080169b0
 80059b0:	080169bc 	.word	0x080169bc
 80059b4:	080169d0 	.word	0x080169d0
 80059b8:	080169dc 	.word	0x080169dc
 80059bc:	080169f0 	.word	0x080169f0
 80059c0:	080169fc 	.word	0x080169fc
 80059c4:	08016a10 	.word	0x08016a10
 80059c8:	08016a1c 	.word	0x08016a1c
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	b298      	uxth	r0, r3
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	b299      	uxth	r1, r3
 80059d4:	4b27      	ldr	r3, [pc, #156]	; (8005a74 <drawStatusMenu+0x580>)
 80059d6:	4a28      	ldr	r2, [pc, #160]	; (8005a78 <drawStatusMenu+0x584>)
 80059d8:	f7fb fda8 	bl	800152c <LCD_PutStr>
		}


		//horizontal divider
		j=65;
 80059dc:	2341      	movs	r3, #65	; 0x41
 80059de:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b299      	uxth	r1, r3
 80059e8:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <drawStatusMenu+0x588>)
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	3b02      	subs	r3, #2
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3301      	adds	r3, #1
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2002      	movs	r0, #2
 80059fa:	f7fb fa4b 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 80059fe:	23e6      	movs	r3, #230	; 0xe6
 8005a00:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b03      	subs	r3, #3
 8005a08:	b298      	uxth	r0, r3
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	b299      	uxth	r1, r3
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3303      	adds	r3, #3
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <drawStatusMenu+0x58c>)
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	3b02      	subs	r3, #2
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f7fb fa39 	bl	8000e94 <LCD_FillRect>

		i=200;
 8005a22:	23c8      	movs	r3, #200	; 0xc8
 8005a24:	61fb      	str	r3, [r7, #28]
		j=220;
 8005a26:	23dc      	movs	r3, #220	; 0xdc
 8005a28:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	b298      	uxth	r0, r3
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	b299      	uxth	r1, r3
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f7fb fec7 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005a3e:	23b4      	movs	r3, #180	; 0xb4
 8005a40:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	b298      	uxth	r0, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	b299      	uxth	r1, r3
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f7fb febb 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005a56:	23dc      	movs	r3, #220	; 0xdc
 8005a58:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	b298      	uxth	r0, r3
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	b299      	uxth	r1, r3
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f7fb feaf 	bl	80017cc <drawUpDownArrow>
		break;
 8005a6e:	f000 beb4 	b.w	80067da <drawStatusMenu+0x12e6>
 8005a72:	bf00      	nop
 8005a74:	08017028 	.word	0x08017028
 8005a78:	080168f8 	.word	0x080168f8
 8005a7c:	20028aaa 	.word	0x20028aaa
 8005a80:	20028aac 	.word	0x20028aac
	}
	case 2:{
		i=35;
 8005a84:	2323      	movs	r3, #35	; 0x23
 8005a86:	61fb      	str	r3, [r7, #28]
		j=90;
 8005a88:	235a      	movs	r3, #90	; 0x5a
 8005a8a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b02      	subs	r3, #2
 8005a92:	b299      	uxth	r1, r3
 8005a94:	4ba4      	ldr	r3, [pc, #656]	; (8005d28 <drawStatusMenu+0x834>)
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	3b02      	subs	r3, #2
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2002      	movs	r0, #2
 8005aa6:	f7fb f9f5 	bl	8000e94 <LCD_FillRect>
		j=75;
 8005aaa:	234b      	movs	r3, #75	; 0x4b
 8005aac:	61bb      	str	r3, [r7, #24]
		i=42;
 8005aae:	232a      	movs	r3, #42	; 0x2a
 8005ab0:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	b298      	uxth	r0, r3
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	b299      	uxth	r1, r3
 8005aba:	4b9c      	ldr	r3, [pc, #624]	; (8005d2c <drawStatusMenu+0x838>)
 8005abc:	4a9c      	ldr	r2, [pc, #624]	; (8005d30 <drawStatusMenu+0x83c>)
 8005abe:	f7fb fd35 	bl	800152c <LCD_PutStr>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	61fb      	str	r3, [r7, #28]
		i+=125;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	337d      	adds	r3, #125	; 0x7d
 8005ad0:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	b298      	uxth	r0, r3
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	b299      	uxth	r1, r3
 8005ada:	4b94      	ldr	r3, [pc, #592]	; (8005d2c <drawStatusMenu+0x838>)
 8005adc:	4a95      	ldr	r2, [pc, #596]	; (8005d34 <drawStatusMenu+0x840>)
 8005ade:	f7fb fd25 	bl	800152c <LCD_PutStr>

		i=10;
 8005ae2:	230a      	movs	r3, #10
 8005ae4:	61fb      	str	r3, [r7, #28]
		j=95;
 8005ae6:	235f      	movs	r3, #95	; 0x5f
 8005ae8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	b298      	uxth	r0, r3
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	b299      	uxth	r1, r3
 8005af2:	4b8e      	ldr	r3, [pc, #568]	; (8005d2c <drawStatusMenu+0x838>)
 8005af4:	4a90      	ldr	r2, [pc, #576]	; (8005d38 <drawStatusMenu+0x844>)
 8005af6:	f7fb fd19 	bl	800152c <LCD_PutStr>
 8005afa:	4603      	mov	r3, r0
 8005afc:	461a      	mov	r2, r3
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8005b04:	4b8d      	ldr	r3, [pc, #564]	; (8005d3c <drawStatusMenu+0x848>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a8d      	ldr	r2, [pc, #564]	; (8005d40 <drawStatusMenu+0x84c>)
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005d44 <drawStatusMenu+0x850>
 8005b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b1e:	ee17 3a90 	vmov	r3, s15
 8005b22:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	b298      	uxth	r0, r3
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	b299      	uxth	r1, r3
 8005b2c:	4b7f      	ldr	r3, [pc, #508]	; (8005d2c <drawStatusMenu+0x838>)
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	2303      	movs	r3, #3
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f7fb fd98 	bl	8001668 <LCD_PutIntF>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3e:	4413      	add	r3, r2
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	b298      	uxth	r0, r3
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	b299      	uxth	r1, r3
 8005b4e:	4b77      	ldr	r3, [pc, #476]	; (8005d2c <drawStatusMenu+0x838>)
 8005b50:	4a7d      	ldr	r2, [pc, #500]	; (8005d48 <drawStatusMenu+0x854>)
 8005b52:	f7fb fceb 	bl	800152c <LCD_PutStr>
 8005b56:	4603      	mov	r3, r0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8005b60:	4b76      	ldr	r3, [pc, #472]	; (8005d3c <drawStatusMenu+0x848>)
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	4a76      	ldr	r2, [pc, #472]	; (8005d40 <drawStatusMenu+0x84c>)
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	edd3 7a00 	vldr	s15, [r3]
 8005b6e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005d44 <drawStatusMenu+0x850>
 8005b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b7a:	ee17 3a90 	vmov	r3, s15
 8005b7e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	b298      	uxth	r0, r3
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	b299      	uxth	r1, r3
 8005b88:	4b68      	ldr	r3, [pc, #416]	; (8005d2c <drawStatusMenu+0x838>)
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	f7fb fd6a 	bl	8001668 <LCD_PutIntF>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	b298      	uxth	r0, r3
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	b299      	uxth	r1, r3
 8005baa:	4b60      	ldr	r3, [pc, #384]	; (8005d2c <drawStatusMenu+0x838>)
 8005bac:	4a67      	ldr	r2, [pc, #412]	; (8005d4c <drawStatusMenu+0x858>)
 8005bae:	f7fb fcbd 	bl	800152c <LCD_PutStr>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	b298      	uxth	r0, r3
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	b299      	uxth	r1, r3
 8005bc4:	4b62      	ldr	r3, [pc, #392]	; (8005d50 <drawStatusMenu+0x85c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a62      	ldr	r2, [pc, #392]	; (8005d54 <drawStatusMenu+0x860>)
 8005bca:	5cd3      	ldrb	r3, [r2, r3]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b57      	ldr	r3, [pc, #348]	; (8005d2c <drawStatusMenu+0x838>)
 8005bd0:	f7fb fce4 	bl	800159c <LCD_PutInt>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bda:	4413      	add	r3, r2
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	b298      	uxth	r0, r3
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	b299      	uxth	r1, r3
 8005bea:	4b50      	ldr	r3, [pc, #320]	; (8005d2c <drawStatusMenu+0x838>)
 8005bec:	4a5a      	ldr	r2, [pc, #360]	; (8005d58 <drawStatusMenu+0x864>)
 8005bee:	f7fb fc9d 	bl	800152c <LCD_PutStr>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	b298      	uxth	r0, r3
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	b299      	uxth	r1, r3
 8005c04:	4b52      	ldr	r3, [pc, #328]	; (8005d50 <drawStatusMenu+0x85c>)
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	4a52      	ldr	r2, [pc, #328]	; (8005d54 <drawStatusMenu+0x860>)
 8005c0a:	5cd3      	ldrb	r3, [r2, r3]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <drawStatusMenu+0x838>)
 8005c10:	f7fb fcc4 	bl	800159c <LCD_PutInt>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	61fb      	str	r3, [r7, #28]


		i=10;
 8005c1e:	230a      	movs	r3, #10
 8005c20:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	330f      	adds	r3, #15
 8005c26:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	b298      	uxth	r0, r3
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	b299      	uxth	r1, r3
 8005c30:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <drawStatusMenu+0x838>)
 8005c32:	4a4a      	ldr	r2, [pc, #296]	; (8005d5c <drawStatusMenu+0x868>)
 8005c34:	f7fb fc7a 	bl	800152c <LCD_PutStr>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8005c42:	4b3e      	ldr	r3, [pc, #248]	; (8005d3c <drawStatusMenu+0x848>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4a3e      	ldr	r2, [pc, #248]	; (8005d40 <drawStatusMenu+0x84c>)
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	edd3 7a00 	vldr	s15, [r3]
 8005c50:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005d44 <drawStatusMenu+0x850>
 8005c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c5c:	ee17 3a90 	vmov	r3, s15
 8005c60:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	b298      	uxth	r0, r3
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	b299      	uxth	r1, r3
 8005c6a:	4b30      	ldr	r3, [pc, #192]	; (8005d2c <drawStatusMenu+0x838>)
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	2303      	movs	r3, #3
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f7fb fcf9 	bl	8001668 <LCD_PutIntF>
 8005c76:	4603      	mov	r3, r0
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	4413      	add	r3, r2
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	b298      	uxth	r0, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	b299      	uxth	r1, r3
 8005c8c:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <drawStatusMenu+0x838>)
 8005c8e:	4a34      	ldr	r2, [pc, #208]	; (8005d60 <drawStatusMenu+0x86c>)
 8005c90:	f7fb fc4c 	bl	800152c <LCD_PutStr>
 8005c94:	4603      	mov	r3, r0
 8005c96:	461a      	mov	r2, r3
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 8005c9e:	4b27      	ldr	r3, [pc, #156]	; (8005d3c <drawStatusMenu+0x848>)
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <drawStatusMenu+0x84c>)
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	edd3 7a00 	vldr	s15, [r3]
 8005cac:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005d44 <drawStatusMenu+0x850>
 8005cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cb8:	ee17 3a90 	vmov	r3, s15
 8005cbc:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	b298      	uxth	r0, r3
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	b299      	uxth	r1, r3
 8005cc6:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <drawStatusMenu+0x838>)
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	2303      	movs	r3, #3
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f7fb fccb 	bl	8001668 <LCD_PutIntF>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	b298      	uxth	r0, r3
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	b299      	uxth	r1, r3
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <drawStatusMenu+0x838>)
 8005cea:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <drawStatusMenu+0x870>)
 8005cec:	f7fb fc1e 	bl	800152c <LCD_PutStr>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	b298      	uxth	r0, r3
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	b299      	uxth	r1, r3
 8005d02:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <drawStatusMenu+0x85c>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <drawStatusMenu+0x860>)
 8005d08:	5cd3      	ldrb	r3, [r2, r3]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <drawStatusMenu+0x838>)
 8005d0e:	f7fb fc45 	bl	800159c <LCD_PutInt>
 8005d12:	4603      	mov	r3, r0
 8005d14:	461a      	mov	r2, r3
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	4413      	add	r3, r2
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	b298      	uxth	r0, r3
 8005d24:	e020      	b.n	8005d68 <drawStatusMenu+0x874>
 8005d26:	bf00      	nop
 8005d28:	20028aaa 	.word	0x20028aaa
 8005d2c:	08017028 	.word	0x08017028
 8005d30:	08016a30 	.word	0x08016a30
 8005d34:	08016a40 	.word	0x08016a40
 8005d38:	08016a50 	.word	0x08016a50
 8005d3c:	20000128 	.word	0x20000128
 8005d40:	20030aa0 	.word	0x20030aa0
 8005d44:	447a0000 	.word	0x447a0000
 8005d48:	08016a58 	.word	0x08016a58
 8005d4c:	08016a60 	.word	0x08016a60
 8005d50:	200000f8 	.word	0x200000f8
 8005d54:	20028cd4 	.word	0x20028cd4
 8005d58:	08016a68 	.word	0x08016a68
 8005d5c:	08016a70 	.word	0x08016a70
 8005d60:	08016a78 	.word	0x08016a78
 8005d64:	08016a80 	.word	0x08016a80
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	b299      	uxth	r1, r3
 8005d6c:	4ba3      	ldr	r3, [pc, #652]	; (8005ffc <drawStatusMenu+0xb08>)
 8005d6e:	4aa4      	ldr	r2, [pc, #656]	; (8006000 <drawStatusMenu+0xb0c>)
 8005d70:	f7fb fbdc 	bl	800152c <LCD_PutStr>
 8005d74:	4603      	mov	r3, r0
 8005d76:	461a      	mov	r2, r3
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	b298      	uxth	r0, r3
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	b299      	uxth	r1, r3
 8005d86:	4b9f      	ldr	r3, [pc, #636]	; (8006004 <drawStatusMenu+0xb10>)
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	4a9f      	ldr	r2, [pc, #636]	; (8006008 <drawStatusMenu+0xb14>)
 8005d8c:	5cd3      	ldrb	r3, [r2, r3]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4b9a      	ldr	r3, [pc, #616]	; (8005ffc <drawStatusMenu+0xb08>)
 8005d92:	f7fb fc03 	bl	800159c <LCD_PutInt>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]

		i=10;
 8005da0:	230a      	movs	r3, #10
 8005da2:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	330f      	adds	r3, #15
 8005da8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	b298      	uxth	r0, r3
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	b299      	uxth	r1, r3
 8005db2:	4b92      	ldr	r3, [pc, #584]	; (8005ffc <drawStatusMenu+0xb08>)
 8005db4:	4a95      	ldr	r2, [pc, #596]	; (800600c <drawStatusMenu+0xb18>)
 8005db6:	f7fb fbb9 	bl	800152c <LCD_PutStr>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 8005dc4:	4b92      	ldr	r3, [pc, #584]	; (8006010 <drawStatusMenu+0xb1c>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	4a92      	ldr	r2, [pc, #584]	; (8006014 <drawStatusMenu+0xb20>)
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	edd3 7a00 	vldr	s15, [r3]
 8005dd2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006018 <drawStatusMenu+0xb24>
 8005dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dde:	ee17 3a90 	vmov	r3, s15
 8005de2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	b298      	uxth	r0, r3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	b299      	uxth	r1, r3
 8005dec:	4b83      	ldr	r3, [pc, #524]	; (8005ffc <drawStatusMenu+0xb08>)
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2303      	movs	r3, #3
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f7fb fc38 	bl	8001668 <LCD_PutIntF>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	4413      	add	r3, r2
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	b298      	uxth	r0, r3
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	b299      	uxth	r1, r3
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	; (8005ffc <drawStatusMenu+0xb08>)
 8005e10:	4a82      	ldr	r2, [pc, #520]	; (800601c <drawStatusMenu+0xb28>)
 8005e12:	f7fb fb8b 	bl	800152c <LCD_PutStr>
 8005e16:	4603      	mov	r3, r0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 8005e20:	4b7b      	ldr	r3, [pc, #492]	; (8006010 <drawStatusMenu+0xb1c>)
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	4a7b      	ldr	r2, [pc, #492]	; (8006014 <drawStatusMenu+0xb20>)
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	edd3 7a00 	vldr	s15, [r3]
 8005e2e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006018 <drawStatusMenu+0xb24>
 8005e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e3a:	ee17 3a90 	vmov	r3, s15
 8005e3e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	b298      	uxth	r0, r3
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	b299      	uxth	r1, r3
 8005e48:	4b6c      	ldr	r3, [pc, #432]	; (8005ffc <drawStatusMenu+0xb08>)
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	f7fb fc0a 	bl	8001668 <LCD_PutIntF>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	b298      	uxth	r0, r3
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <drawStatusMenu+0xb08>)
 8005e6c:	4a6c      	ldr	r2, [pc, #432]	; (8006020 <drawStatusMenu+0xb2c>)
 8005e6e:	f7fb fb5d 	bl	800152c <LCD_PutStr>
 8005e72:	4603      	mov	r3, r0
 8005e74:	461a      	mov	r2, r3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	b298      	uxth	r0, r3
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	b299      	uxth	r1, r3
 8005e84:	4b5f      	ldr	r3, [pc, #380]	; (8006004 <drawStatusMenu+0xb10>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a5f      	ldr	r2, [pc, #380]	; (8006008 <drawStatusMenu+0xb14>)
 8005e8a:	5cd3      	ldrb	r3, [r2, r3]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4b5b      	ldr	r3, [pc, #364]	; (8005ffc <drawStatusMenu+0xb08>)
 8005e90:	f7fb fb84 	bl	800159c <LCD_PutInt>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9a:	4413      	add	r3, r2
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	b298      	uxth	r0, r3
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	b299      	uxth	r1, r3
 8005eaa:	4b54      	ldr	r3, [pc, #336]	; (8005ffc <drawStatusMenu+0xb08>)
 8005eac:	4a5d      	ldr	r2, [pc, #372]	; (8006024 <drawStatusMenu+0xb30>)
 8005eae:	f7fb fb3d 	bl	800152c <LCD_PutStr>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	b298      	uxth	r0, r3
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	b299      	uxth	r1, r3
 8005ec4:	4b4f      	ldr	r3, [pc, #316]	; (8006004 <drawStatusMenu+0xb10>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a4f      	ldr	r2, [pc, #316]	; (8006008 <drawStatusMenu+0xb14>)
 8005eca:	5cd3      	ldrb	r3, [r2, r3]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <drawStatusMenu+0xb08>)
 8005ed0:	f7fb fb64 	bl	800159c <LCD_PutInt>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	61fb      	str	r3, [r7, #28]

		i=10;
 8005ede:	230a      	movs	r3, #10
 8005ee0:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	330f      	adds	r3, #15
 8005ee6:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	b298      	uxth	r0, r3
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	b299      	uxth	r1, r3
 8005ef0:	4b42      	ldr	r3, [pc, #264]	; (8005ffc <drawStatusMenu+0xb08>)
 8005ef2:	4a4d      	ldr	r2, [pc, #308]	; (8006028 <drawStatusMenu+0xb34>)
 8005ef4:	f7fb fb1a 	bl	800152c <LCD_PutStr>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 8005f02:	4b43      	ldr	r3, [pc, #268]	; (8006010 <drawStatusMenu+0xb1c>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	4a43      	ldr	r2, [pc, #268]	; (8006014 <drawStatusMenu+0xb20>)
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	edd3 7a00 	vldr	s15, [r3]
 8005f10:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006018 <drawStatusMenu+0xb24>
 8005f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f1c:	ee17 3a90 	vmov	r3, s15
 8005f20:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	b298      	uxth	r0, r3
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	b299      	uxth	r1, r3
 8005f2a:	4b34      	ldr	r3, [pc, #208]	; (8005ffc <drawStatusMenu+0xb08>)
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	2303      	movs	r3, #3
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	f7fb fb99 	bl	8001668 <LCD_PutIntF>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	4413      	add	r3, r2
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	b298      	uxth	r0, r3
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	b299      	uxth	r1, r3
 8005f4c:	4b2b      	ldr	r3, [pc, #172]	; (8005ffc <drawStatusMenu+0xb08>)
 8005f4e:	4a37      	ldr	r2, [pc, #220]	; (800602c <drawStatusMenu+0xb38>)
 8005f50:	f7fb faec 	bl	800152c <LCD_PutStr>
 8005f54:	4603      	mov	r3, r0
 8005f56:	461a      	mov	r2, r3
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 8005f5e:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <drawStatusMenu+0xb1c>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <drawStatusMenu+0xb20>)
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	edd3 7a00 	vldr	s15, [r3]
 8005f6c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006018 <drawStatusMenu+0xb24>
 8005f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f78:	ee17 3a90 	vmov	r3, s15
 8005f7c:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	b298      	uxth	r0, r3
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	b299      	uxth	r1, r3
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <drawStatusMenu+0xb08>)
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	f7fb fb6b 	bl	8001668 <LCD_PutIntF>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	b298      	uxth	r0, r3
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	b299      	uxth	r1, r3
 8005fa8:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <drawStatusMenu+0xb08>)
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <drawStatusMenu+0xb3c>)
 8005fac:	f7fb fabe 	bl	800152c <LCD_PutStr>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	b298      	uxth	r0, r3
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	b299      	uxth	r1, r3
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <drawStatusMenu+0xb10>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	4a10      	ldr	r2, [pc, #64]	; (8006008 <drawStatusMenu+0xb14>)
 8005fc8:	5cd3      	ldrb	r3, [r2, r3]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <drawStatusMenu+0xb08>)
 8005fce:	f7fb fae5 	bl	800159c <LCD_PutInt>


		i=10;
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	330f      	adds	r3, #15
 8005fda:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	b298      	uxth	r0, r3
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	b299      	uxth	r1, r3
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <drawStatusMenu+0xb08>)
 8005fe6:	4a13      	ldr	r2, [pc, #76]	; (8006034 <drawStatusMenu+0xb40>)
 8005fe8:	f7fb faa0 	bl	800152c <LCD_PutStr>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 8005ff6:	4b06      	ldr	r3, [pc, #24]	; (8006010 <drawStatusMenu+0xb1c>)
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	e01d      	b.n	8006038 <drawStatusMenu+0xb44>
 8005ffc:	08017028 	.word	0x08017028
 8006000:	08016a88 	.word	0x08016a88
 8006004:	200000f8 	.word	0x200000f8
 8006008:	20028cd4 	.word	0x20028cd4
 800600c:	08016a90 	.word	0x08016a90
 8006010:	20000128 	.word	0x20000128
 8006014:	20030aa0 	.word	0x20030aa0
 8006018:	447a0000 	.word	0x447a0000
 800601c:	08016a98 	.word	0x08016a98
 8006020:	08016aa0 	.word	0x08016aa0
 8006024:	08016aa8 	.word	0x08016aa8
 8006028:	08016ab0 	.word	0x08016ab0
 800602c:	08016ab8 	.word	0x08016ab8
 8006030:	08016ac0 	.word	0x08016ac0
 8006034:	08016ac8 	.word	0x08016ac8
 8006038:	4aa7      	ldr	r2, [pc, #668]	; (80062d8 <drawStatusMenu+0xde4>)
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	edd3 7a00 	vldr	s15, [r3]
 8006042:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80062dc <drawStatusMenu+0xde8>
 8006046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800604a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800604e:	ee17 3a90 	vmov	r3, s15
 8006052:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	b298      	uxth	r0, r3
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	b299      	uxth	r1, r3
 800605c:	4ba0      	ldr	r3, [pc, #640]	; (80062e0 <drawStatusMenu+0xdec>)
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2303      	movs	r3, #3
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f7fb fb00 	bl	8001668 <LCD_PutIntF>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	4413      	add	r3, r2
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	4413      	add	r3, r2
 8006074:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	b298      	uxth	r0, r3
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	b299      	uxth	r1, r3
 800607e:	4b98      	ldr	r3, [pc, #608]	; (80062e0 <drawStatusMenu+0xdec>)
 8006080:	4a98      	ldr	r2, [pc, #608]	; (80062e4 <drawStatusMenu+0xdf0>)
 8006082:	f7fb fa53 	bl	800152c <LCD_PutStr>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 8006090:	4b95      	ldr	r3, [pc, #596]	; (80062e8 <drawStatusMenu+0xdf4>)
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	4a90      	ldr	r2, [pc, #576]	; (80062d8 <drawStatusMenu+0xde4>)
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	edd3 7a00 	vldr	s15, [r3]
 800609e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80062dc <drawStatusMenu+0xde8>
 80060a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060aa:	ee17 3a90 	vmov	r3, s15
 80060ae:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	b298      	uxth	r0, r3
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	b299      	uxth	r1, r3
 80060b8:	4b89      	ldr	r3, [pc, #548]	; (80062e0 <drawStatusMenu+0xdec>)
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2303      	movs	r3, #3
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f7fb fad2 	bl	8001668 <LCD_PutIntF>
 80060c4:	4603      	mov	r3, r0
 80060c6:	461a      	mov	r2, r3
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	b298      	uxth	r0, r3
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	b299      	uxth	r1, r3
 80060da:	4b81      	ldr	r3, [pc, #516]	; (80062e0 <drawStatusMenu+0xdec>)
 80060dc:	4a83      	ldr	r2, [pc, #524]	; (80062ec <drawStatusMenu+0xdf8>)
 80060de:	f7fb fa25 	bl	800152c <LCD_PutStr>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	b298      	uxth	r0, r3
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	b299      	uxth	r1, r3
 80060f4:	4b7e      	ldr	r3, [pc, #504]	; (80062f0 <drawStatusMenu+0xdfc>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	4a7e      	ldr	r2, [pc, #504]	; (80062f4 <drawStatusMenu+0xe00>)
 80060fa:	5cd3      	ldrb	r3, [r2, r3]
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b78      	ldr	r3, [pc, #480]	; (80062e0 <drawStatusMenu+0xdec>)
 8006100:	f7fb fa4c 	bl	800159c <LCD_PutInt>

		i=10;
 8006104:	230a      	movs	r3, #10
 8006106:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	330f      	adds	r3, #15
 800610c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	b298      	uxth	r0, r3
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	b299      	uxth	r1, r3
 8006116:	4b72      	ldr	r3, [pc, #456]	; (80062e0 <drawStatusMenu+0xdec>)
 8006118:	4a77      	ldr	r2, [pc, #476]	; (80062f8 <drawStatusMenu+0xe04>)
 800611a:	f7fb fa07 	bl	800152c <LCD_PutStr>
 800611e:	4603      	mov	r3, r0
 8006120:	461a      	mov	r2, r3
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 8006128:	4b6f      	ldr	r3, [pc, #444]	; (80062e8 <drawStatusMenu+0xdf4>)
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	4a6a      	ldr	r2, [pc, #424]	; (80062d8 <drawStatusMenu+0xde4>)
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	edd3 7a00 	vldr	s15, [r3]
 8006136:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80062dc <drawStatusMenu+0xde8>
 800613a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800613e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006142:	ee17 3a90 	vmov	r3, s15
 8006146:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	b298      	uxth	r0, r3
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	b299      	uxth	r1, r3
 8006150:	4b63      	ldr	r3, [pc, #396]	; (80062e0 <drawStatusMenu+0xdec>)
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	2303      	movs	r3, #3
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	f7fb fa86 	bl	8001668 <LCD_PutIntF>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006162:	4413      	add	r3, r2
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	4413      	add	r3, r2
 8006168:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	b298      	uxth	r0, r3
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	b299      	uxth	r1, r3
 8006172:	4b5b      	ldr	r3, [pc, #364]	; (80062e0 <drawStatusMenu+0xdec>)
 8006174:	4a61      	ldr	r2, [pc, #388]	; (80062fc <drawStatusMenu+0xe08>)
 8006176:	f7fb f9d9 	bl	800152c <LCD_PutStr>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 8006184:	4b58      	ldr	r3, [pc, #352]	; (80062e8 <drawStatusMenu+0xdf4>)
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	4a53      	ldr	r2, [pc, #332]	; (80062d8 <drawStatusMenu+0xde4>)
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	edd3 7a00 	vldr	s15, [r3]
 8006192:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80062dc <drawStatusMenu+0xde8>
 8006196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800619a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800619e:	ee17 3a90 	vmov	r3, s15
 80061a2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	b298      	uxth	r0, r3
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	b299      	uxth	r1, r3
 80061ac:	4b4c      	ldr	r3, [pc, #304]	; (80062e0 <drawStatusMenu+0xdec>)
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	2303      	movs	r3, #3
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	f7fb fa58 	bl	8001668 <LCD_PutIntF>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	b298      	uxth	r0, r3
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	b299      	uxth	r1, r3
 80061ce:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <drawStatusMenu+0xdec>)
 80061d0:	4a4b      	ldr	r2, [pc, #300]	; (8006300 <drawStatusMenu+0xe0c>)
 80061d2:	f7fb f9ab 	bl	800152c <LCD_PutStr>
 80061d6:	4603      	mov	r3, r0
 80061d8:	461a      	mov	r2, r3
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	b298      	uxth	r0, r3
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	b299      	uxth	r1, r3
 80061e8:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <drawStatusMenu+0xdfc>)
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	4a41      	ldr	r2, [pc, #260]	; (80062f4 <drawStatusMenu+0xe00>)
 80061ee:	5cd3      	ldrb	r3, [r2, r3]
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b3b      	ldr	r3, [pc, #236]	; (80062e0 <drawStatusMenu+0xdec>)
 80061f4:	f7fb f9d2 	bl	800159c <LCD_PutInt>

		i=10;
 80061f8:	230a      	movs	r3, #10
 80061fa:	61fb      	str	r3, [r7, #28]
		j+=15;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	330f      	adds	r3, #15
 8006200:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	b298      	uxth	r0, r3
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	b299      	uxth	r1, r3
 800620a:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <drawStatusMenu+0xdec>)
 800620c:	4a3d      	ldr	r2, [pc, #244]	; (8006304 <drawStatusMenu+0xe10>)
 800620e:	f7fb f98d 	bl	800152c <LCD_PutStr>
 8006212:	4603      	mov	r3, r0
 8006214:	461a      	mov	r2, r3
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 800621c:	4b32      	ldr	r3, [pc, #200]	; (80062e8 <drawStatusMenu+0xdf4>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	4a2d      	ldr	r2, [pc, #180]	; (80062d8 <drawStatusMenu+0xde4>)
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	edd3 7a00 	vldr	s15, [r3]
 800622a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80062dc <drawStatusMenu+0xde8>
 800622e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006236:	ee17 3a90 	vmov	r3, s15
 800623a:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	b298      	uxth	r0, r3
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	b299      	uxth	r1, r3
 8006244:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <drawStatusMenu+0xdec>)
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	2303      	movs	r3, #3
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f7fb fa0c 	bl	8001668 <LCD_PutIntF>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	4413      	add	r3, r2
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	b298      	uxth	r0, r3
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	b299      	uxth	r1, r3
 8006266:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <drawStatusMenu+0xdec>)
 8006268:	4a27      	ldr	r2, [pc, #156]	; (8006308 <drawStatusMenu+0xe14>)
 800626a:	f7fb f95f 	bl	800152c <LCD_PutStr>
 800626e:	4603      	mov	r3, r0
 8006270:	461a      	mov	r2, r3
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	4413      	add	r3, r2
 8006276:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <drawStatusMenu+0xdf4>)
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <drawStatusMenu+0xde4>)
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	edd3 7a00 	vldr	s15, [r3]
 8006286:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80062dc <drawStatusMenu+0xde8>
 800628a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800628e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006292:	ee17 3a90 	vmov	r3, s15
 8006296:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	b298      	uxth	r0, r3
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	b299      	uxth	r1, r3
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <drawStatusMenu+0xdec>)
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	2303      	movs	r3, #3
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	f7fb f9de 	bl	8001668 <LCD_PutIntF>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4413      	add	r3, r2
 80062b4:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	b298      	uxth	r0, r3
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	b299      	uxth	r1, r3
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <drawStatusMenu+0xdec>)
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <drawStatusMenu+0xe18>)
 80062c6:	f7fb f931 	bl	800152c <LCD_PutStr>
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	e01c      	b.n	8006310 <drawStatusMenu+0xe1c>
 80062d6:	bf00      	nop
 80062d8:	20030aa0 	.word	0x20030aa0
 80062dc:	447a0000 	.word	0x447a0000
 80062e0:	08017028 	.word	0x08017028
 80062e4:	08016ad0 	.word	0x08016ad0
 80062e8:	20000128 	.word	0x20000128
 80062ec:	08016ad8 	.word	0x08016ad8
 80062f0:	200000f8 	.word	0x200000f8
 80062f4:	20028cd4 	.word	0x20028cd4
 80062f8:	08016ae0 	.word	0x08016ae0
 80062fc:	08016ae8 	.word	0x08016ae8
 8006300:	08016af0 	.word	0x08016af0
 8006304:	08016af8 	.word	0x08016af8
 8006308:	08016b00 	.word	0x08016b00
 800630c:	08016b08 	.word	0x08016b08
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	b298      	uxth	r0, r3
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	b299      	uxth	r1, r3
 8006318:	4b9b      	ldr	r3, [pc, #620]	; (8006588 <drawStatusMenu+0x1094>)
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	4a9b      	ldr	r2, [pc, #620]	; (800658c <drawStatusMenu+0x1098>)
 800631e:	5cd3      	ldrb	r3, [r2, r3]
 8006320:	461a      	mov	r2, r3
 8006322:	4b9b      	ldr	r3, [pc, #620]	; (8006590 <drawStatusMenu+0x109c>)
 8006324:	f7fb f93a 	bl	800159c <LCD_PutInt>

		i=10;
 8006328:	230a      	movs	r3, #10
 800632a:	61fb      	str	r3, [r7, #28]
		j+=15;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	330f      	adds	r3, #15
 8006330:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	b298      	uxth	r0, r3
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	b299      	uxth	r1, r3
 800633a:	4b95      	ldr	r3, [pc, #596]	; (8006590 <drawStatusMenu+0x109c>)
 800633c:	4a95      	ldr	r2, [pc, #596]	; (8006594 <drawStatusMenu+0x10a0>)
 800633e:	f7fb f8f5 	bl	800152c <LCD_PutStr>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 800634c:	4b92      	ldr	r3, [pc, #584]	; (8006598 <drawStatusMenu+0x10a4>)
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	4a92      	ldr	r2, [pc, #584]	; (800659c <drawStatusMenu+0x10a8>)
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	edd3 7a00 	vldr	s15, [r3]
 800635a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80065a0 <drawStatusMenu+0x10ac>
 800635e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006366:	ee17 3a90 	vmov	r3, s15
 800636a:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	b298      	uxth	r0, r3
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	b299      	uxth	r1, r3
 8006374:	4b86      	ldr	r3, [pc, #536]	; (8006590 <drawStatusMenu+0x109c>)
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2303      	movs	r3, #3
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	f7fb f974 	bl	8001668 <LCD_PutIntF>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	b298      	uxth	r0, r3
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	b299      	uxth	r1, r3
 8006396:	4b7e      	ldr	r3, [pc, #504]	; (8006590 <drawStatusMenu+0x109c>)
 8006398:	4a82      	ldr	r2, [pc, #520]	; (80065a4 <drawStatusMenu+0x10b0>)
 800639a:	f7fb f8c7 	bl	800152c <LCD_PutStr>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	b298      	uxth	r0, r3
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	b299      	uxth	r1, r3
 80063b0:	4b75      	ldr	r3, [pc, #468]	; (8006588 <drawStatusMenu+0x1094>)
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	4a75      	ldr	r2, [pc, #468]	; (800658c <drawStatusMenu+0x1098>)
 80063b6:	5cd3      	ldrb	r3, [r2, r3]
 80063b8:	461a      	mov	r2, r3
 80063ba:	4b75      	ldr	r3, [pc, #468]	; (8006590 <drawStatusMenu+0x109c>)
 80063bc:	f7fb f8ee 	bl	800159c <LCD_PutInt>

		i=10;
 80063c0:	230a      	movs	r3, #10
 80063c2:	61fb      	str	r3, [r7, #28]
		j+=15;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	330f      	adds	r3, #15
 80063c8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	b298      	uxth	r0, r3
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	b299      	uxth	r1, r3
 80063d2:	4b6f      	ldr	r3, [pc, #444]	; (8006590 <drawStatusMenu+0x109c>)
 80063d4:	4a74      	ldr	r2, [pc, #464]	; (80065a8 <drawStatusMenu+0x10b4>)
 80063d6:	f7fb f8a9 	bl	800152c <LCD_PutStr>
 80063da:	4603      	mov	r3, r0
 80063dc:	461a      	mov	r2, r3
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	4413      	add	r3, r2
 80063e2:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 80063e4:	4b6c      	ldr	r3, [pc, #432]	; (8006598 <drawStatusMenu+0x10a4>)
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	4a6c      	ldr	r2, [pc, #432]	; (800659c <drawStatusMenu+0x10a8>)
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	edd3 7a00 	vldr	s15, [r3]
 80063f2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80065a0 <drawStatusMenu+0x10ac>
 80063f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063fe:	ee17 3a90 	vmov	r3, s15
 8006402:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	b298      	uxth	r0, r3
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	b299      	uxth	r1, r3
 800640c:	4b60      	ldr	r3, [pc, #384]	; (8006590 <drawStatusMenu+0x109c>)
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	2303      	movs	r3, #3
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	f7fb f928 	bl	8001668 <LCD_PutIntF>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	b298      	uxth	r0, r3
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	b299      	uxth	r1, r3
 800642e:	4b58      	ldr	r3, [pc, #352]	; (8006590 <drawStatusMenu+0x109c>)
 8006430:	4a5e      	ldr	r2, [pc, #376]	; (80065ac <drawStatusMenu+0x10b8>)
 8006432:	f7fb f87b 	bl	800152c <LCD_PutStr>
 8006436:	4603      	mov	r3, r0
 8006438:	461a      	mov	r2, r3
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	4413      	add	r3, r2
 800643e:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	b298      	uxth	r0, r3
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	b299      	uxth	r1, r3
 8006448:	4b4f      	ldr	r3, [pc, #316]	; (8006588 <drawStatusMenu+0x1094>)
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	4a4f      	ldr	r2, [pc, #316]	; (800658c <drawStatusMenu+0x1098>)
 800644e:	5cd3      	ldrb	r3, [r2, r3]
 8006450:	461a      	mov	r2, r3
 8006452:	4b4f      	ldr	r3, [pc, #316]	; (8006590 <drawStatusMenu+0x109c>)
 8006454:	f7fb f8a2 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 8006458:	2341      	movs	r3, #65	; 0x41
 800645a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b299      	uxth	r1, r3
 8006464:	4b52      	ldr	r3, [pc, #328]	; (80065b0 <drawStatusMenu+0x10bc>)
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	3b02      	subs	r3, #2
 800646a:	b29a      	uxth	r2, r3
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	b29b      	uxth	r3, r3
 8006470:	3301      	adds	r3, #1
 8006472:	b29b      	uxth	r3, r3
 8006474:	2002      	movs	r0, #2
 8006476:	f7fa fd0d 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 800647a:	23e6      	movs	r3, #230	; 0xe6
 800647c:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b03      	subs	r3, #3
 8006484:	b298      	uxth	r0, r3
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	b299      	uxth	r1, r3
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	b29b      	uxth	r3, r3
 800648e:	3303      	adds	r3, #3
 8006490:	b29a      	uxth	r2, r3
 8006492:	4b48      	ldr	r3, [pc, #288]	; (80065b4 <drawStatusMenu+0x10c0>)
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	3b02      	subs	r3, #2
 8006498:	b29b      	uxth	r3, r3
 800649a:	f7fa fcfb 	bl	8000e94 <LCD_FillRect>

		i=155;
 800649e:	239b      	movs	r3, #155	; 0x9b
 80064a0:	61fb      	str	r3, [r7, #28]
		j=35;
 80064a2:	2323      	movs	r3, #35	; 0x23
 80064a4:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	b298      	uxth	r0, r3
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	b299      	uxth	r1, r3
 80064ae:	4b38      	ldr	r3, [pc, #224]	; (8006590 <drawStatusMenu+0x109c>)
 80064b0:	4a41      	ldr	r2, [pc, #260]	; (80065b8 <drawStatusMenu+0x10c4>)
 80064b2:	f7fb f83b 	bl	800152c <LCD_PutStr>
		i=155;
 80064b6:	239b      	movs	r3, #155	; 0x9b
 80064b8:	61fb      	str	r3, [r7, #28]
		j=50;
 80064ba:	2332      	movs	r3, #50	; 0x32
 80064bc:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	b298      	uxth	r0, r3
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	b299      	uxth	r1, r3
 80064c6:	4b32      	ldr	r3, [pc, #200]	; (8006590 <drawStatusMenu+0x109c>)
 80064c8:	4a3c      	ldr	r2, [pc, #240]	; (80065bc <drawStatusMenu+0x10c8>)
 80064ca:	f7fb f82f 	bl	800152c <LCD_PutStr>
 80064ce:	4603      	mov	r3, r0
 80064d0:	3308      	adds	r3, #8
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	61fb      	str	r3, [r7, #28]
		j=28;
 80064d8:	231c      	movs	r3, #28
 80064da:	61bb      	str	r3, [r7, #24]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	b298      	uxth	r0, r3
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	b299      	uxth	r1, r3
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <drawStatusMenu+0x10cc>)
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	2302      	movs	r3, #2
 80064ea:	f640 729f 	movw	r2, #3999	; 0xf9f
 80064ee:	f7fb f8bb 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 80064f2:	23c8      	movs	r3, #200	; 0xc8
 80064f4:	61fb      	str	r3, [r7, #28]
		j=220;
 80064f6:	23dc      	movs	r3, #220	; 0xdc
 80064f8:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	b298      	uxth	r0, r3
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	b299      	uxth	r1, r3
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	b29a      	uxth	r2, r3
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	b29b      	uxth	r3, r3
 800650a:	f7fb f95f 	bl	80017cc <drawUpDownArrow>
		j=15;
 800650e:	230f      	movs	r3, #15
 8006510:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	b298      	uxth	r0, r3
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	b299      	uxth	r1, r3
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	b29a      	uxth	r2, r3
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	b29b      	uxth	r3, r3
 8006522:	f7fb f953 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006526:	23b4      	movs	r3, #180	; 0xb4
 8006528:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	b298      	uxth	r0, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	b299      	uxth	r1, r3
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	b29a      	uxth	r2, r3
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	b29b      	uxth	r3, r3
 800653a:	f7fb f947 	bl	80017cc <drawUpDownArrow>
		j=220;
 800653e:	23dc      	movs	r3, #220	; 0xdc
 8006540:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	b298      	uxth	r0, r3
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	b299      	uxth	r1, r3
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	b29a      	uxth	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	b29b      	uxth	r3, r3
 8006552:	f7fb f93b 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006556:	23dc      	movs	r3, #220	; 0xdc
 8006558:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	b298      	uxth	r0, r3
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	b299      	uxth	r1, r3
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	b29a      	uxth	r2, r3
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	b29b      	uxth	r3, r3
 800656a:	f7fb f92f 	bl	80017cc <drawUpDownArrow>
		j=15;
 800656e:	230f      	movs	r3, #15
 8006570:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	b298      	uxth	r0, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	b299      	uxth	r1, r3
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	b29a      	uxth	r2, r3
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	b29b      	uxth	r3, r3
 8006582:	f7fb f923 	bl	80017cc <drawUpDownArrow>
		break;
 8006586:	e128      	b.n	80067da <drawStatusMenu+0x12e6>
 8006588:	200000f8 	.word	0x200000f8
 800658c:	20028cd4 	.word	0x20028cd4
 8006590:	08017028 	.word	0x08017028
 8006594:	08016b10 	.word	0x08016b10
 8006598:	20000128 	.word	0x20000128
 800659c:	20030aa0 	.word	0x20030aa0
 80065a0:	447a0000 	.word	0x447a0000
 80065a4:	08016b18 	.word	0x08016b18
 80065a8:	08016b20 	.word	0x08016b20
 80065ac:	08016b28 	.word	0x08016b28
 80065b0:	20028aaa 	.word	0x20028aaa
 80065b4:	20028aac 	.word	0x20028aac
 80065b8:	08016b30 	.word	0x08016b30
 80065bc:	08016b40 	.word	0x08016b40
 80065c0:	080173e8 	.word	0x080173e8
	}
	case 3:{
		i=35;
 80065c4:	2323      	movs	r3, #35	; 0x23
 80065c6:	61fb      	str	r3, [r7, #28]
		j=75;
 80065c8:	234b      	movs	r3, #75	; 0x4b
 80065ca:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b02      	subs	r3, #2
 80065d2:	b299      	uxth	r1, r3
 80065d4:	4b84      	ldr	r3, [pc, #528]	; (80067e8 <drawStatusMenu+0x12f4>)
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	3b02      	subs	r3, #2
 80065da:	b29a      	uxth	r2, r3
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3302      	adds	r3, #2
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2002      	movs	r0, #2
 80065e6:	f7fa fc55 	bl	8000e94 <LCD_FillRect>
		j=55;
 80065ea:	2337      	movs	r3, #55	; 0x37
 80065ec:	61bb      	str	r3, [r7, #24]
		i=150;
 80065ee:	2396      	movs	r3, #150	; 0x96
 80065f0:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	b298      	uxth	r0, r3
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	b299      	uxth	r1, r3
 80065fa:	4b7c      	ldr	r3, [pc, #496]	; (80067ec <drawStatusMenu+0x12f8>)
 80065fc:	4a7c      	ldr	r2, [pc, #496]	; (80067f0 <drawStatusMenu+0x12fc>)
 80065fe:	f7fa ff95 	bl	800152c <LCD_PutStr>
 8006602:	4603      	mov	r3, r0
 8006604:	461a      	mov	r2, r3
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	61fb      	str	r3, [r7, #28]

		i=40;
 800660c:	2328      	movs	r3, #40	; 0x28
 800660e:	61fb      	str	r3, [r7, #28]
		j=85;
 8006610:	2355      	movs	r3, #85	; 0x55
 8006612:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	b298      	uxth	r0, r3
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	b299      	uxth	r1, r3
 800661c:	4b73      	ldr	r3, [pc, #460]	; (80067ec <drawStatusMenu+0x12f8>)
 800661e:	4a75      	ldr	r2, [pc, #468]	; (80067f4 <drawStatusMenu+0x1300>)
 8006620:	f7fa ff84 	bl	800152c <LCD_PutStr>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	b298      	uxth	r0, r3
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	b299      	uxth	r1, r3
 8006636:	4b6d      	ldr	r3, [pc, #436]	; (80067ec <drawStatusMenu+0x12f8>)
 8006638:	4a6f      	ldr	r2, [pc, #444]	; (80067f8 <drawStatusMenu+0x1304>)
 800663a:	f7fa ff77 	bl	800152c <LCD_PutStr>

		i=40;
 800663e:	2328      	movs	r3, #40	; 0x28
 8006640:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	3319      	adds	r3, #25
 8006646:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	b298      	uxth	r0, r3
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	b299      	uxth	r1, r3
 8006650:	4b66      	ldr	r3, [pc, #408]	; (80067ec <drawStatusMenu+0x12f8>)
 8006652:	4a6a      	ldr	r2, [pc, #424]	; (80067fc <drawStatusMenu+0x1308>)
 8006654:	f7fa ff6a 	bl	800152c <LCD_PutStr>
 8006658:	4603      	mov	r3, r0
 800665a:	461a      	mov	r2, r3
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	61fb      	str	r3, [r7, #28]
		if(!(errorLED.ledDriver)){
 8006662:	4b67      	ldr	r3, [pc, #412]	; (8006800 <drawStatusMenu+0x130c>)
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	2b00      	cmp	r3, #0
 8006668:	d108      	bne.n	800667c <drawStatusMenu+0x1188>
			LCD_PutStr(i, j, "Present", fnt7x10);
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	b298      	uxth	r0, r3
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	b299      	uxth	r1, r3
 8006672:	4b5e      	ldr	r3, [pc, #376]	; (80067ec <drawStatusMenu+0x12f8>)
 8006674:	4a63      	ldr	r2, [pc, #396]	; (8006804 <drawStatusMenu+0x1310>)
 8006676:	f7fa ff59 	bl	800152c <LCD_PutStr>
 800667a:	e007      	b.n	800668c <drawStatusMenu+0x1198>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	b298      	uxth	r0, r3
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	b299      	uxth	r1, r3
 8006684:	4b59      	ldr	r3, [pc, #356]	; (80067ec <drawStatusMenu+0x12f8>)
 8006686:	4a60      	ldr	r2, [pc, #384]	; (8006808 <drawStatusMenu+0x1314>)
 8006688:	f7fa ff50 	bl	800152c <LCD_PutStr>
		}

		i=40;
 800668c:	2328      	movs	r3, #40	; 0x28
 800668e:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	3319      	adds	r3, #25
 8006694:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	b298      	uxth	r0, r3
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	b299      	uxth	r1, r3
 800669e:	4b53      	ldr	r3, [pc, #332]	; (80067ec <drawStatusMenu+0x12f8>)
 80066a0:	4a5a      	ldr	r2, [pc, #360]	; (800680c <drawStatusMenu+0x1318>)
 80066a2:	f7fa ff43 	bl	800152c <LCD_PutStr>
 80066a6:	4603      	mov	r3, r0
 80066a8:	461a      	mov	r2, r3
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	b298      	uxth	r0, r3
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	b299      	uxth	r1, r3
 80066b8:	4b4c      	ldr	r3, [pc, #304]	; (80067ec <drawStatusMenu+0x12f8>)
 80066ba:	4a55      	ldr	r2, [pc, #340]	; (8006810 <drawStatusMenu+0x131c>)
 80066bc:	f7fa ff36 	bl	800152c <LCD_PutStr>

		i=40;
 80066c0:	2328      	movs	r3, #40	; 0x28
 80066c2:	61fb      	str	r3, [r7, #28]
		j+=25;
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	3319      	adds	r3, #25
 80066c8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	b298      	uxth	r0, r3
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	b299      	uxth	r1, r3
 80066d2:	4b46      	ldr	r3, [pc, #280]	; (80067ec <drawStatusMenu+0x12f8>)
 80066d4:	4a4f      	ldr	r2, [pc, #316]	; (8006814 <drawStatusMenu+0x1320>)
 80066d6:	f7fa ff29 	bl	800152c <LCD_PutStr>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	61fb      	str	r3, [r7, #28]
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 80066e4:	4b4c      	ldr	r3, [pc, #304]	; (8006818 <drawStatusMenu+0x1324>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	4b4b      	ldr	r3, [pc, #300]	; (8006818 <drawStatusMenu+0x1324>)
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2301      	movs	r3, #1
 80066f2:	2200      	movs	r2, #0
 80066f4:	2111      	movs	r1, #17
 80066f6:	f7fc fec5 	bl	8003484 <writeI2CRegister>
 80066fa:	6178      	str	r0, [r7, #20]
		if(i2cCheck){
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <drawStatusMenu+0x1220>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	b298      	uxth	r0, r3
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	b299      	uxth	r1, r3
 800670a:	4b38      	ldr	r3, [pc, #224]	; (80067ec <drawStatusMenu+0x12f8>)
 800670c:	4a3d      	ldr	r2, [pc, #244]	; (8006804 <drawStatusMenu+0x1310>)
 800670e:	f7fa ff0d 	bl	800152c <LCD_PutStr>
 8006712:	e007      	b.n	8006724 <drawStatusMenu+0x1230>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	b298      	uxth	r0, r3
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	b299      	uxth	r1, r3
 800671c:	4b33      	ldr	r3, [pc, #204]	; (80067ec <drawStatusMenu+0x12f8>)
 800671e:	4a3f      	ldr	r2, [pc, #252]	; (800681c <drawStatusMenu+0x1328>)
 8006720:	f7fa ff04 	bl	800152c <LCD_PutStr>
		}


		i=40;
 8006724:	2328      	movs	r3, #40	; 0x28
 8006726:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	3319      	adds	r3, #25
 800672c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	b298      	uxth	r0, r3
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	b299      	uxth	r1, r3
 8006736:	4b2d      	ldr	r3, [pc, #180]	; (80067ec <drawStatusMenu+0x12f8>)
 8006738:	4a39      	ldr	r2, [pc, #228]	; (8006820 <drawStatusMenu+0x132c>)
 800673a:	f7fa fef7 	bl	800152c <LCD_PutStr>
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	61fb      	str	r3, [r7, #28]
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8006748:	f002 fd9c 	bl	8009284 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	4b35      	ldr	r3, [pc, #212]	; (8006824 <drawStatusMenu+0x1330>)
 8006750:	fba3 2302 	umull	r2, r3, r3, r2
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	613b      	str	r3, [r7, #16]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	b298      	uxth	r0, r3
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	b299      	uxth	r1, r3
 8006760:	4b22      	ldr	r3, [pc, #136]	; (80067ec <drawStatusMenu+0x12f8>)
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	f7fa ff1a 	bl	800159c <LCD_PutInt>
 8006768:	4603      	mov	r3, r0
 800676a:	461a      	mov	r2, r3
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4413      	add	r3, r2
 8006770:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	b298      	uxth	r0, r3
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	b299      	uxth	r1, r3
 800677a:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <drawStatusMenu+0x12f8>)
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <drawStatusMenu+0x1334>)
 800677e:	f7fa fed5 	bl	800152c <LCD_PutStr>
 8006782:	4603      	mov	r3, r0
 8006784:	461a      	mov	r2, r3
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	61fb      	str	r3, [r7, #28]

		i=200;
 800678c:	23c8      	movs	r3, #200	; 0xc8
 800678e:	61fb      	str	r3, [r7, #28]
		j=15;
 8006790:	230f      	movs	r3, #15
 8006792:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	b298      	uxth	r0, r3
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	b299      	uxth	r1, r3
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f7fb f812 	bl	80017cc <drawUpDownArrow>
		i=180;
 80067a8:	23b4      	movs	r3, #180	; 0xb4
 80067aa:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	b298      	uxth	r0, r3
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	b299      	uxth	r1, r3
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f7fb f806 	bl	80017cc <drawUpDownArrow>
		i=220;
 80067c0:	23dc      	movs	r3, #220	; 0xdc
 80067c2:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	b298      	uxth	r0, r3
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	b299      	uxth	r1, r3
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f7fa fffa 	bl	80017cc <drawUpDownArrow>

		break;
 80067d8:	bf00      	nop
	}
	}

	SMLCD_Flush();
 80067da:	f7f9 ff7d 	bl	80006d8 <SMLCD_Flush>



}
 80067de:	bf00      	nop
 80067e0:	3738      	adds	r7, #56	; 0x38
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20028aaa 	.word	0x20028aaa
 80067ec:	08017028 	.word	0x08017028
 80067f0:	08016b50 	.word	0x08016b50
 80067f4:	08016b60 	.word	0x08016b60
 80067f8:	08016b68 	.word	0x08016b68
 80067fc:	08016b88 	.word	0x08016b88
 8006800:	200032d8 	.word	0x200032d8
 8006804:	08016b98 	.word	0x08016b98
 8006808:	08016ba0 	.word	0x08016ba0
 800680c:	08016bb0 	.word	0x08016bb0
 8006810:	08016bbc 	.word	0x08016bbc
 8006814:	08016bd4 	.word	0x08016bd4
 8006818:	200000e0 	.word	0x200000e0
 800681c:	08016914 	.word	0x08016914
 8006820:	08016be0 	.word	0x08016be0
 8006824:	10624dd3 	.word	0x10624dd3
 8006828:	08016bf4 	.word	0x08016bf4

0800682c <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 800682c:	b580      	push	{r7, lr}
 800682e:	b08e      	sub	sp, #56	; 0x38
 8006830:	af02      	add	r7, sp, #8
 8006832:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8006834:	2314      	movs	r3, #20
 8006836:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indentAlignment=20;
 8006838:	2314      	movs	r3, #20
 800683a:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowUp = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowDown=1;
 8006840:	2301      	movs	r3, #1
 8006842:	623b      	str	r3, [r7, #32]
	int arrowSize=3;
 8006844:	2303      	movs	r3, #3
 8006846:	61fb      	str	r3, [r7, #28]
	int otherBoardAlignment = 230;
 8006848:	23e6      	movs	r3, #230	; 0xe6
 800684a:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 800684c:	4b8f      	ldr	r3, [pc, #572]	; (8006a8c <drawSystemInfoMenu+0x260>)
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8006852:	f7fa f88b 	bl	800096c <LCD_Clear>
	getLatestADC();
 8006856:	f001 f911 	bl	8007a7c <getLatestADC>
	drawMenuHeader();
 800685a:	f001 f853 	bl	8007904 <drawMenuHeader>
	i  = 135;
 800685e:	2387      	movs	r3, #135	; 0x87
 8006860:	617b      	str	r3, [r7, #20]
	j = 24;
 8006862:	2318      	movs	r3, #24
 8006864:	613b      	str	r3, [r7, #16]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	b299      	uxth	r1, r3
 800686a:	4b89      	ldr	r3, [pc, #548]	; (8006a90 <drawSystemInfoMenu+0x264>)
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	3b02      	subs	r3, #2
 8006870:	b29a      	uxth	r2, r3
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	b29b      	uxth	r3, r3
 8006876:	3303      	adds	r3, #3
 8006878:	b29b      	uxth	r3, r3
 800687a:	2002      	movs	r0, #2
 800687c:	f7fa fb0a 	bl	8000e94 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);

	switch(indicator){
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d003      	beq.n	800688e <drawSystemInfoMenu+0x62>
 8006886:	2b02      	cmp	r3, #2
 8006888:	f000 82be 	beq.w	8006e08 <drawSystemInfoMenu+0x5dc>
 800688c:	e3fe      	b.n	800708c <drawSystemInfoMenu+0x860>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 800688e:	232d      	movs	r3, #45	; 0x2d
 8006890:	613b      	str	r3, [r7, #16]
		i=42;
 8006892:	232a      	movs	r3, #42	; 0x2a
 8006894:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	b298      	uxth	r0, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	b299      	uxth	r1, r3
 800689e:	4b7d      	ldr	r3, [pc, #500]	; (8006a94 <drawSystemInfoMenu+0x268>)
 80068a0:	4a7d      	ldr	r2, [pc, #500]	; (8006a98 <drawSystemInfoMenu+0x26c>)
 80068a2:	f7fa fe43 	bl	800152c <LCD_PutStr>
 80068a6:	4603      	mov	r3, r0
 80068a8:	461a      	mov	r2, r3
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	4413      	add	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	b298      	uxth	r0, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	b299      	uxth	r1, r3
 80068b8:	4b76      	ldr	r3, [pc, #472]	; (8006a94 <drawSystemInfoMenu+0x268>)
 80068ba:	4a78      	ldr	r2, [pc, #480]	; (8006a9c <drawSystemInfoMenu+0x270>)
 80068bc:	f7fa fe36 	bl	800152c <LCD_PutStr>

		j+=15;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	330f      	adds	r3, #15
 80068c4:	613b      	str	r3, [r7, #16]
		i=42;
 80068c6:	232a      	movs	r3, #42	; 0x2a
 80068c8:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	b298      	uxth	r0, r3
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	b299      	uxth	r1, r3
 80068d2:	4b70      	ldr	r3, [pc, #448]	; (8006a94 <drawSystemInfoMenu+0x268>)
 80068d4:	4a72      	ldr	r2, [pc, #456]	; (8006aa0 <drawSystemInfoMenu+0x274>)
 80068d6:	f7fa fe29 	bl	800152c <LCD_PutStr>
 80068da:	4603      	mov	r3, r0
 80068dc:	461a      	mov	r2, r3
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	b298      	uxth	r0, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	b299      	uxth	r1, r3
 80068ec:	4b69      	ldr	r3, [pc, #420]	; (8006a94 <drawSystemInfoMenu+0x268>)
 80068ee:	4a6d      	ldr	r2, [pc, #436]	; (8006aa4 <drawSystemInfoMenu+0x278>)
 80068f0:	f7fa fe1c 	bl	800152c <LCD_PutStr>

		j+=30;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	331e      	adds	r3, #30
 80068f8:	613b      	str	r3, [r7, #16]
		i=10;
 80068fa:	230a      	movs	r3, #10
 80068fc:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Project:", fnt7x10);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	b298      	uxth	r0, r3
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	b299      	uxth	r1, r3
 8006906:	4b63      	ldr	r3, [pc, #396]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006908:	4a67      	ldr	r2, [pc, #412]	; (8006aa8 <drawSystemInfoMenu+0x27c>)
 800690a:	f7fa fe0f 	bl	800152c <LCD_PutStr>

		j+=15;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	330f      	adds	r3, #15
 8006912:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	617b      	str	r3, [r7, #20]
		if((ZION.SOC_BoardID==1) || (ZION.ASIC_BoardID==1) || (ZION.DISPLAY_BoardID==1)){
 8006918:	4b64      	ldr	r3, [pc, #400]	; (8006aac <drawSystemInfoMenu+0x280>)
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d007      	beq.n	8006930 <drawSystemInfoMenu+0x104>
 8006920:	4b62      	ldr	r3, [pc, #392]	; (8006aac <drawSystemInfoMenu+0x280>)
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d003      	beq.n	8006930 <drawSystemInfoMenu+0x104>
 8006928:	4b60      	ldr	r3, [pc, #384]	; (8006aac <drawSystemInfoMenu+0x280>)
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d108      	bne.n	8006942 <drawSystemInfoMenu+0x116>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	b298      	uxth	r0, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	b299      	uxth	r1, r3
 8006938:	4b56      	ldr	r3, [pc, #344]	; (8006a94 <drawSystemInfoMenu+0x268>)
 800693a:	4a5d      	ldr	r2, [pc, #372]	; (8006ab0 <drawSystemInfoMenu+0x284>)
 800693c:	f7fa fdf6 	bl	800152c <LCD_PutStr>
 8006940:	e007      	b.n	8006952 <drawSystemInfoMenu+0x126>
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	b298      	uxth	r0, r3
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	b299      	uxth	r1, r3
 800694a:	4b52      	ldr	r3, [pc, #328]	; (8006a94 <drawSystemInfoMenu+0x268>)
 800694c:	4a53      	ldr	r2, [pc, #332]	; (8006a9c <drawSystemInfoMenu+0x270>)
 800694e:	f7fa fded 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	330f      	adds	r3, #15
 8006956:	613b      	str	r3, [r7, #16]
		i=10;
 8006958:	230a      	movs	r3, #10
 800695a:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	b298      	uxth	r0, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	b299      	uxth	r1, r3
 8006964:	4b4b      	ldr	r3, [pc, #300]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006966:	4a53      	ldr	r2, [pc, #332]	; (8006ab4 <drawSystemInfoMenu+0x288>)
 8006968:	f7fa fde0 	bl	800152c <LCD_PutStr>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	4413      	add	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
		i=otherBoardAlignment;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	b298      	uxth	r0, r3
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	b299      	uxth	r1, r3
 8006982:	4b44      	ldr	r3, [pc, #272]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006984:	4a4c      	ldr	r2, [pc, #304]	; (8006ab8 <drawSystemInfoMenu+0x28c>)
 8006986:	f7fa fdd1 	bl	800152c <LCD_PutStr>

		j+=15;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	330f      	adds	r3, #15
 800698e:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	b298      	uxth	r0, r3
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	b299      	uxth	r1, r3
 800699c:	4b3d      	ldr	r3, [pc, #244]	; (8006a94 <drawSystemInfoMenu+0x268>)
 800699e:	4a47      	ldr	r2, [pc, #284]	; (8006abc <drawSystemInfoMenu+0x290>)
 80069a0:	f7fa fdc4 	bl	800152c <LCD_PutStr>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	4413      	add	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
		if(ZION.SOC_BoardID==1){
 80069ae:	4b3f      	ldr	r3, [pc, #252]	; (8006aac <drawSystemInfoMenu+0x280>)
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d14a      	bne.n	8006a4c <drawSystemInfoMenu+0x220>
			i+=LCD_PutStr(i, j, "TRIDENT ", fnt7x10);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	b298      	uxth	r0, r3
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	b299      	uxth	r1, r3
 80069be:	4b35      	ldr	r3, [pc, #212]	; (8006a94 <drawSystemInfoMenu+0x268>)
 80069c0:	4a3f      	ldr	r2, [pc, #252]	; (8006ac0 <drawSystemInfoMenu+0x294>)
 80069c2:	f7fa fdb3 	bl	800152c <LCD_PutStr>
 80069c6:	4603      	mov	r3, r0
 80069c8:	461a      	mov	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4413      	add	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
			switch(ZION.SOC_BoardFab){
 80069d0:	4b36      	ldr	r3, [pc, #216]	; (8006aac <drawSystemInfoMenu+0x280>)
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d82e      	bhi.n	8006a38 <drawSystemInfoMenu+0x20c>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <drawSystemInfoMenu+0x1b4>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	08006a03 	.word	0x08006a03
 80069e8:	08006a15 	.word	0x08006a15
 80069ec:	08006a27 	.word	0x08006a27
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	b298      	uxth	r0, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	b299      	uxth	r1, r3
 80069f8:	4b26      	ldr	r3, [pc, #152]	; (8006a94 <drawSystemInfoMenu+0x268>)
 80069fa:	4a32      	ldr	r2, [pc, #200]	; (8006ac4 <drawSystemInfoMenu+0x298>)
 80069fc:	f7fa fd96 	bl	800152c <LCD_PutStr>
				break;
 8006a00:	e076      	b.n	8006af0 <drawSystemInfoMenu+0x2c4>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	b298      	uxth	r0, r3
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	b299      	uxth	r1, r3
 8006a0a:	4b22      	ldr	r3, [pc, #136]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006a0c:	4a2e      	ldr	r2, [pc, #184]	; (8006ac8 <drawSystemInfoMenu+0x29c>)
 8006a0e:	f7fa fd8d 	bl	800152c <LCD_PutStr>
				break;
 8006a12:	e06d      	b.n	8006af0 <drawSystemInfoMenu+0x2c4>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	b298      	uxth	r0, r3
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	b299      	uxth	r1, r3
 8006a1c:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006a1e:	4a2b      	ldr	r2, [pc, #172]	; (8006acc <drawSystemInfoMenu+0x2a0>)
 8006a20:	f7fa fd84 	bl	800152c <LCD_PutStr>
				break;
 8006a24:	e064      	b.n	8006af0 <drawSystemInfoMenu+0x2c4>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	b298      	uxth	r0, r3
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	b299      	uxth	r1, r3
 8006a2e:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006a30:	4a27      	ldr	r2, [pc, #156]	; (8006ad0 <drawSystemInfoMenu+0x2a4>)
 8006a32:	f7fa fd7b 	bl	800152c <LCD_PutStr>
				break;
 8006a36:	e05b      	b.n	8006af0 <drawSystemInfoMenu+0x2c4>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	b298      	uxth	r0, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	b299      	uxth	r1, r3
 8006a40:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006a42:	4a24      	ldr	r2, [pc, #144]	; (8006ad4 <drawSystemInfoMenu+0x2a8>)
 8006a44:	f7fa fd72 	bl	800152c <LCD_PutStr>
				break;
 8006a48:	bf00      	nop
 8006a4a:	e051      	b.n	8006af0 <drawSystemInfoMenu+0x2c4>
			}
			}
		}
		else{
			if(ZION.SOC_EEPROM_Detected){
 8006a4c:	4b17      	ldr	r3, [pc, #92]	; (8006aac <drawSystemInfoMenu+0x280>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d045      	beq.n	8006ae0 <drawSystemInfoMenu+0x2b4>
				if(ZION.SOC_BoardFab == -2){
 8006a54:	4b15      	ldr	r3, [pc, #84]	; (8006aac <drawSystemInfoMenu+0x280>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f113 0f02 	cmn.w	r3, #2
 8006a5c:	d108      	bne.n	8006a70 <drawSystemInfoMenu+0x244>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	b298      	uxth	r0, r3
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	b299      	uxth	r1, r3
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006a68:	4a1b      	ldr	r2, [pc, #108]	; (8006ad8 <drawSystemInfoMenu+0x2ac>)
 8006a6a:	f7fa fd5f 	bl	800152c <LCD_PutStr>
 8006a6e:	e03f      	b.n	8006af0 <drawSystemInfoMenu+0x2c4>
				}
				else if(ZION.SOC_BoardFab ==-1){
 8006a70:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <drawSystemInfoMenu+0x280>)
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d13a      	bne.n	8006af0 <drawSystemInfoMenu+0x2c4>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	b298      	uxth	r0, r3
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	b299      	uxth	r1, r3
 8006a82:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <drawSystemInfoMenu+0x268>)
 8006a84:	4a15      	ldr	r2, [pc, #84]	; (8006adc <drawSystemInfoMenu+0x2b0>)
 8006a86:	f7fa fd51 	bl	800152c <LCD_PutStr>
 8006a8a:	e031      	b.n	8006af0 <drawSystemInfoMenu+0x2c4>
 8006a8c:	20003378 	.word	0x20003378
 8006a90:	20028aaa 	.word	0x20028aaa
 8006a94:	08017028 	.word	0x08017028
 8006a98:	08016c00 	.word	0x08016c00
 8006a9c:	08016c10 	.word	0x08016c10
 8006aa0:	08016c18 	.word	0x08016c18
 8006aa4:	08016c30 	.word	0x08016c30
 8006aa8:	08016c38 	.word	0x08016c38
 8006aac:	20003274 	.word	0x20003274
 8006ab0:	08016c44 	.word	0x08016c44
 8006ab4:	08016c4c 	.word	0x08016c4c
 8006ab8:	08016c60 	.word	0x08016c60
 8006abc:	08016900 	.word	0x08016900
 8006ac0:	08016c70 	.word	0x08016c70
 8006ac4:	08016c7c 	.word	0x08016c7c
 8006ac8:	08016c84 	.word	0x08016c84
 8006acc:	08016c8c 	.word	0x08016c8c
 8006ad0:	08016c94 	.word	0x08016c94
 8006ad4:	08016c9c 	.word	0x08016c9c
 8006ad8:	08016ca4 	.word	0x08016ca4
 8006adc:	08016cbc 	.word	0x08016cbc
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	b298      	uxth	r0, r3
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	b299      	uxth	r1, r3
 8006ae8:	4b93      	ldr	r3, [pc, #588]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006aea:	4a94      	ldr	r2, [pc, #592]	; (8006d3c <drawSystemInfoMenu+0x510>)
 8006aec:	f7fa fd1e 	bl	800152c <LCD_PutStr>
			}
		}
		i=otherBoardAlignment+indentAlignment;
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	4413      	add	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	b298      	uxth	r0, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	b299      	uxth	r1, r3
 8006b00:	4b8d      	ldr	r3, [pc, #564]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006b02:	4a8f      	ldr	r2, [pc, #572]	; (8006d40 <drawSystemInfoMenu+0x514>)
 8006b04:	f7fa fd12 	bl	800152c <LCD_PutStr>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch){
 8006b12:	4b8c      	ldr	r3, [pc, #560]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d008      	beq.n	8006b2c <drawSystemInfoMenu+0x300>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	b298      	uxth	r0, r3
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	b299      	uxth	r1, r3
 8006b22:	4b85      	ldr	r3, [pc, #532]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006b24:	4a88      	ldr	r2, [pc, #544]	; (8006d48 <drawSystemInfoMenu+0x51c>)
 8006b26:	f7fa fd01 	bl	800152c <LCD_PutStr>
 8006b2a:	e007      	b.n	8006b3c <drawSystemInfoMenu+0x310>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	b298      	uxth	r0, r3
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	b299      	uxth	r1, r3
 8006b34:	4b80      	ldr	r3, [pc, #512]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006b36:	4a85      	ldr	r2, [pc, #532]	; (8006d4c <drawSystemInfoMenu+0x520>)
 8006b38:	f7fa fcf8 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	330f      	adds	r3, #15
 8006b40:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	b298      	uxth	r0, r3
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	b299      	uxth	r1, r3
 8006b4e:	4b7a      	ldr	r3, [pc, #488]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006b50:	4a7f      	ldr	r2, [pc, #508]	; (8006d50 <drawSystemInfoMenu+0x524>)
 8006b52:	f7fa fceb 	bl	800152c <LCD_PutStr>
 8006b56:	4603      	mov	r3, r0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
		if(ZION.ASIC_BoardID==1){
 8006b60:	4b78      	ldr	r3, [pc, #480]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d14b      	bne.n	8006c00 <drawSystemInfoMenu+0x3d4>
			i+=LCD_PutStr(i, j, "TOGA ", fnt7x10);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	b298      	uxth	r0, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	b299      	uxth	r1, r3
 8006b70:	4b71      	ldr	r3, [pc, #452]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006b72:	4a78      	ldr	r2, [pc, #480]	; (8006d54 <drawSystemInfoMenu+0x528>)
 8006b74:	f7fa fcda 	bl	800152c <LCD_PutStr>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]
			switch(ZION.ASIC_BoardFab){
 8006b82:	4b70      	ldr	r3, [pc, #448]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	3b01      	subs	r3, #1
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d82f      	bhi.n	8006bec <drawSystemInfoMenu+0x3c0>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <drawSystemInfoMenu+0x368>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bb7 	.word	0x08006bb7
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	08006bdb 	.word	0x08006bdb
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	b298      	uxth	r0, r3
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	b299      	uxth	r1, r3
 8006bac:	4b62      	ldr	r3, [pc, #392]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006bae:	4a6a      	ldr	r2, [pc, #424]	; (8006d58 <drawSystemInfoMenu+0x52c>)
 8006bb0:	f7fa fcbc 	bl	800152c <LCD_PutStr>
				break;
 8006bb4:	e04c      	b.n	8006c50 <drawSystemInfoMenu+0x424>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	b298      	uxth	r0, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	b299      	uxth	r1, r3
 8006bbe:	4b5e      	ldr	r3, [pc, #376]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006bc0:	4a66      	ldr	r2, [pc, #408]	; (8006d5c <drawSystemInfoMenu+0x530>)
 8006bc2:	f7fa fcb3 	bl	800152c <LCD_PutStr>
				break;
 8006bc6:	e043      	b.n	8006c50 <drawSystemInfoMenu+0x424>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	b298      	uxth	r0, r3
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	b299      	uxth	r1, r3
 8006bd0:	4b59      	ldr	r3, [pc, #356]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006bd2:	4a63      	ldr	r2, [pc, #396]	; (8006d60 <drawSystemInfoMenu+0x534>)
 8006bd4:	f7fa fcaa 	bl	800152c <LCD_PutStr>
				break;
 8006bd8:	e03a      	b.n	8006c50 <drawSystemInfoMenu+0x424>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	b298      	uxth	r0, r3
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	b299      	uxth	r1, r3
 8006be2:	4b55      	ldr	r3, [pc, #340]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006be4:	4a5f      	ldr	r2, [pc, #380]	; (8006d64 <drawSystemInfoMenu+0x538>)
 8006be6:	f7fa fca1 	bl	800152c <LCD_PutStr>
				break;
 8006bea:	e031      	b.n	8006c50 <drawSystemInfoMenu+0x424>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	b298      	uxth	r0, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	b299      	uxth	r1, r3
 8006bf4:	4b50      	ldr	r3, [pc, #320]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006bf6:	4a5c      	ldr	r2, [pc, #368]	; (8006d68 <drawSystemInfoMenu+0x53c>)
 8006bf8:	f7fa fc98 	bl	800152c <LCD_PutStr>
				break;
 8006bfc:	bf00      	nop
 8006bfe:	e027      	b.n	8006c50 <drawSystemInfoMenu+0x424>
			}
			}
		}
		else{
			if(ZION.ASIC_EEPROM_Detected){
 8006c00:	4b50      	ldr	r3, [pc, #320]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01b      	beq.n	8006c40 <drawSystemInfoMenu+0x414>
				if(ZION.ASIC_BoardFab == -2){
 8006c08:	4b4e      	ldr	r3, [pc, #312]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	f113 0f02 	cmn.w	r3, #2
 8006c10:	d108      	bne.n	8006c24 <drawSystemInfoMenu+0x3f8>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	b298      	uxth	r0, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	b299      	uxth	r1, r3
 8006c1a:	4b47      	ldr	r3, [pc, #284]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006c1c:	4a53      	ldr	r2, [pc, #332]	; (8006d6c <drawSystemInfoMenu+0x540>)
 8006c1e:	f7fa fc85 	bl	800152c <LCD_PutStr>
 8006c22:	e015      	b.n	8006c50 <drawSystemInfoMenu+0x424>
				}
				else if(ZION.ASIC_BoardFab ==-1){
 8006c24:	4b47      	ldr	r3, [pc, #284]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2c:	d110      	bne.n	8006c50 <drawSystemInfoMenu+0x424>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	b298      	uxth	r0, r3
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	b299      	uxth	r1, r3
 8006c36:	4b40      	ldr	r3, [pc, #256]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006c38:	4a4d      	ldr	r2, [pc, #308]	; (8006d70 <drawSystemInfoMenu+0x544>)
 8006c3a:	f7fa fc77 	bl	800152c <LCD_PutStr>
 8006c3e:	e007      	b.n	8006c50 <drawSystemInfoMenu+0x424>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	b298      	uxth	r0, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	b299      	uxth	r1, r3
 8006c48:	4b3b      	ldr	r3, [pc, #236]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006c4a:	4a3c      	ldr	r2, [pc, #240]	; (8006d3c <drawSystemInfoMenu+0x510>)
 8006c4c:	f7fa fc6e 	bl	800152c <LCD_PutStr>
			}
		}

		j+=15;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	330f      	adds	r3, #15
 8006c54:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	b298      	uxth	r0, r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	b299      	uxth	r1, r3
 8006c62:	4b35      	ldr	r3, [pc, #212]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006c64:	4a43      	ldr	r2, [pc, #268]	; (8006d74 <drawSystemInfoMenu+0x548>)
 8006c66:	f7fa fc61 	bl	800152c <LCD_PutStr>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	4413      	add	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]
		if(ZION.DISPLAY_BoardID==1){
 8006c74:	4b33      	ldr	r3, [pc, #204]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d14b      	bne.n	8006d14 <drawSystemInfoMenu+0x4e8>
			i+=LCD_PutStr(i, j, "KANU ", fnt7x10);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	b298      	uxth	r0, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	b299      	uxth	r1, r3
 8006c84:	4b2c      	ldr	r3, [pc, #176]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006c86:	4a3c      	ldr	r2, [pc, #240]	; (8006d78 <drawSystemInfoMenu+0x54c>)
 8006c88:	f7fa fc50 	bl	800152c <LCD_PutStr>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
			switch(ZION.DISPLAY_BoardFab){
 8006c96:	4b2b      	ldr	r3, [pc, #172]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d82f      	bhi.n	8006d00 <drawSystemInfoMenu+0x4d4>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <drawSystemInfoMenu+0x47c>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006ccb 	.word	0x08006ccb
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	08006cef 	.word	0x08006cef
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	b298      	uxth	r0, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	b299      	uxth	r1, r3
 8006cc0:	4b1d      	ldr	r3, [pc, #116]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006cc2:	4a25      	ldr	r2, [pc, #148]	; (8006d58 <drawSystemInfoMenu+0x52c>)
 8006cc4:	f7fa fc32 	bl	800152c <LCD_PutStr>
				break;
 8006cc8:	e06e      	b.n	8006da8 <drawSystemInfoMenu+0x57c>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	b298      	uxth	r0, r3
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	b299      	uxth	r1, r3
 8006cd2:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006cd4:	4a21      	ldr	r2, [pc, #132]	; (8006d5c <drawSystemInfoMenu+0x530>)
 8006cd6:	f7fa fc29 	bl	800152c <LCD_PutStr>
				break;
 8006cda:	e065      	b.n	8006da8 <drawSystemInfoMenu+0x57c>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	b298      	uxth	r0, r3
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	b299      	uxth	r1, r3
 8006ce4:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006ce6:	4a1e      	ldr	r2, [pc, #120]	; (8006d60 <drawSystemInfoMenu+0x534>)
 8006ce8:	f7fa fc20 	bl	800152c <LCD_PutStr>
				break;
 8006cec:	e05c      	b.n	8006da8 <drawSystemInfoMenu+0x57c>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	b298      	uxth	r0, r3
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	b299      	uxth	r1, r3
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006cf8:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <drawSystemInfoMenu+0x538>)
 8006cfa:	f7fa fc17 	bl	800152c <LCD_PutStr>
				break;
 8006cfe:	e053      	b.n	8006da8 <drawSystemInfoMenu+0x57c>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	b298      	uxth	r0, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	b299      	uxth	r1, r3
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006d0a:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <drawSystemInfoMenu+0x53c>)
 8006d0c:	f7fa fc0e 	bl	800152c <LCD_PutStr>
				break;
 8006d10:	bf00      	nop
 8006d12:	e049      	b.n	8006da8 <drawSystemInfoMenu+0x57c>
			}
			}
		}
		else{
			if(ZION.DISPLAY_EEPROM_Detected){
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d03d      	beq.n	8006d98 <drawSystemInfoMenu+0x56c>
				if(ZION.DISPLAY_BoardFab == -2){
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <drawSystemInfoMenu+0x518>)
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	f113 0f02 	cmn.w	r3, #2
 8006d24:	d12a      	bne.n	8006d7c <drawSystemInfoMenu+0x550>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	b298      	uxth	r0, r3
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	b299      	uxth	r1, r3
 8006d2e:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <drawSystemInfoMenu+0x50c>)
 8006d30:	4a0e      	ldr	r2, [pc, #56]	; (8006d6c <drawSystemInfoMenu+0x540>)
 8006d32:	f7fa fbfb 	bl	800152c <LCD_PutStr>
 8006d36:	e037      	b.n	8006da8 <drawSystemInfoMenu+0x57c>
 8006d38:	08017028 	.word	0x08017028
 8006d3c:	08016cd4 	.word	0x08016cd4
 8006d40:	08016ce8 	.word	0x08016ce8
 8006d44:	20003274 	.word	0x20003274
 8006d48:	08016cf0 	.word	0x08016cf0
 8006d4c:	08016908 	.word	0x08016908
 8006d50:	0801693c 	.word	0x0801693c
 8006d54:	08016d00 	.word	0x08016d00
 8006d58:	08016c7c 	.word	0x08016c7c
 8006d5c:	08016c84 	.word	0x08016c84
 8006d60:	08016c8c 	.word	0x08016c8c
 8006d64:	08016c94 	.word	0x08016c94
 8006d68:	08016c9c 	.word	0x08016c9c
 8006d6c:	08016ca4 	.word	0x08016ca4
 8006d70:	08016cbc 	.word	0x08016cbc
 8006d74:	08016d08 	.word	0x08016d08
 8006d78:	08016d14 	.word	0x08016d14
				}
				else if(ZION.DISPLAY_BoardFab ==-1){
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <drawSystemInfoMenu+0x5cc>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d110      	bne.n	8006da8 <drawSystemInfoMenu+0x57c>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	b298      	uxth	r0, r3
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	b299      	uxth	r1, r3
 8006d8e:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <drawSystemInfoMenu+0x5d0>)
 8006d90:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <drawSystemInfoMenu+0x5d4>)
 8006d92:	f7fa fbcb 	bl	800152c <LCD_PutStr>
 8006d96:	e007      	b.n	8006da8 <drawSystemInfoMenu+0x57c>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	b298      	uxth	r0, r3
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	b299      	uxth	r1, r3
 8006da0:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <drawSystemInfoMenu+0x5d0>)
 8006da2:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <drawSystemInfoMenu+0x5d8>)
 8006da4:	f7fa fbc2 	bl	800152c <LCD_PutStr>
			}
		}

		i=200;
 8006da8:	23c8      	movs	r3, #200	; 0xc8
 8006daa:	617b      	str	r3, [r7, #20]
		j=220;
 8006dac:	23dc      	movs	r3, #220	; 0xdc
 8006dae:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	b298      	uxth	r0, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	b299      	uxth	r1, r3
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f7fa fd04 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006dc4:	23b4      	movs	r3, #180	; 0xb4
 8006dc6:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	b298      	uxth	r0, r3
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	b299      	uxth	r1, r3
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f7fa fcf8 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006ddc:	23dc      	movs	r3, #220	; 0xdc
 8006dde:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	b298      	uxth	r0, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	b299      	uxth	r1, r3
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f7fa fcec 	bl	80017cc <drawUpDownArrow>
		break;
 8006df4:	e14a      	b.n	800708c <drawSystemInfoMenu+0x860>
 8006df6:	bf00      	nop
 8006df8:	20003274 	.word	0x20003274
 8006dfc:	08017028 	.word	0x08017028
 8006e00:	08016cbc 	.word	0x08016cbc
 8006e04:	08016cd4 	.word	0x08016cd4
	}
	case 2:{
		j=45;
 8006e08:	232d      	movs	r3, #45	; 0x2d
 8006e0a:	613b      	str	r3, [r7, #16]
		i=10;
 8006e0c:	230a      	movs	r3, #10
 8006e0e:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	b298      	uxth	r0, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	b299      	uxth	r1, r3
 8006e18:	4b9f      	ldr	r3, [pc, #636]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006e1a:	4aa0      	ldr	r2, [pc, #640]	; (800709c <drawSystemInfoMenu+0x870>)
 8006e1c:	f7fa fb86 	bl	800152c <LCD_PutStr>

		j+=25;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3319      	adds	r3, #25
 8006e24:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	b298      	uxth	r0, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	b299      	uxth	r1, r3
 8006e32:	4b99      	ldr	r3, [pc, #612]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006e34:	4a9a      	ldr	r2, [pc, #616]	; (80070a0 <drawSystemInfoMenu+0x874>)
 8006e36:	f7fa fb79 	bl	800152c <LCD_PutStr>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	4413      	add	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8006e44:	4b97      	ldr	r3, [pc, #604]	; (80070a4 <drawSystemInfoMenu+0x878>)
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	4a97      	ldr	r2, [pc, #604]	; (80070a8 <drawSystemInfoMenu+0x87c>)
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	edd3 7a00 	vldr	s15, [r3]
 8006e52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e56:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006e5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e5e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006e62:	ee17 3a90 	vmov	r3, s15
 8006e66:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	b298      	uxth	r0, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	b299      	uxth	r1, r3
 8006e70:	4b89      	ldr	r3, [pc, #548]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	2301      	movs	r3, #1
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	f7fa fbf6 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	3319      	adds	r3, #25
 8006e80:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	b298      	uxth	r0, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	b299      	uxth	r1, r3
 8006e8e:	4b82      	ldr	r3, [pc, #520]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006e90:	4a86      	ldr	r2, [pc, #536]	; (80070ac <drawSystemInfoMenu+0x880>)
 8006e92:	f7fa fb4b 	bl	800152c <LCD_PutStr>
 8006e96:	4603      	mov	r3, r0
 8006e98:	461a      	mov	r2, r3
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8006ea0:	4b80      	ldr	r3, [pc, #512]	; (80070a4 <drawSystemInfoMenu+0x878>)
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	4a80      	ldr	r2, [pc, #512]	; (80070a8 <drawSystemInfoMenu+0x87c>)
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	edd3 7a00 	vldr	s15, [r3]
 8006eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006eb2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006eb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006ebe:	ee17 3a90 	vmov	r3, s15
 8006ec2:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	b298      	uxth	r0, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	b299      	uxth	r1, r3
 8006ecc:	4b72      	ldr	r3, [pc, #456]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	f7fa fbc8 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	3319      	adds	r3, #25
 8006edc:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	b298      	uxth	r0, r3
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	b299      	uxth	r1, r3
 8006eea:	4b6b      	ldr	r3, [pc, #428]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006eec:	4a70      	ldr	r2, [pc, #448]	; (80070b0 <drawSystemInfoMenu+0x884>)
 8006eee:	f7fa fb1d 	bl	800152c <LCD_PutStr>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	4413      	add	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8006efc:	4b69      	ldr	r3, [pc, #420]	; (80070a4 <drawSystemInfoMenu+0x878>)
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	4a69      	ldr	r2, [pc, #420]	; (80070a8 <drawSystemInfoMenu+0x87c>)
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	edd3 7a00 	vldr	s15, [r3]
 8006f0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f0e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006f12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f16:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006f1a:	ee17 3a90 	vmov	r3, s15
 8006f1e:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	b298      	uxth	r0, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	b299      	uxth	r1, r3
 8006f28:	4b5b      	ldr	r3, [pc, #364]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	f7fa fb9a 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3319      	adds	r3, #25
 8006f38:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	b298      	uxth	r0, r3
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	b299      	uxth	r1, r3
 8006f46:	4b54      	ldr	r3, [pc, #336]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006f48:	4a5a      	ldr	r2, [pc, #360]	; (80070b4 <drawSystemInfoMenu+0x888>)
 8006f4a:	f7fa faef 	bl	800152c <LCD_PutStr>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8006f58:	4b52      	ldr	r3, [pc, #328]	; (80070a4 <drawSystemInfoMenu+0x878>)
 8006f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5c:	4a52      	ldr	r2, [pc, #328]	; (80070a8 <drawSystemInfoMenu+0x87c>)
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	edd3 7a00 	vldr	s15, [r3]
 8006f66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f6a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006f6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006f76:	ee17 3a90 	vmov	r3, s15
 8006f7a:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	b298      	uxth	r0, r3
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	b299      	uxth	r1, r3
 8006f84:	4b44      	ldr	r3, [pc, #272]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	f7fa fb6c 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	3319      	adds	r3, #25
 8006f94:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	b298      	uxth	r0, r3
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	b299      	uxth	r1, r3
 8006fa2:	4b3d      	ldr	r3, [pc, #244]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006fa4:	4a44      	ldr	r2, [pc, #272]	; (80070b8 <drawSystemInfoMenu+0x88c>)
 8006fa6:	f7fa fac1 	bl	800152c <LCD_PutStr>
 8006faa:	4603      	mov	r3, r0
 8006fac:	461a      	mov	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 8006fb4:	4b3b      	ldr	r3, [pc, #236]	; (80070a4 <drawSystemInfoMenu+0x878>)
 8006fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb8:	4a3b      	ldr	r2, [pc, #236]	; (80070a8 <drawSystemInfoMenu+0x87c>)
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	edd3 7a00 	vldr	s15, [r3]
 8006fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006fc6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006fca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006fd2:	ee17 3a90 	vmov	r3, s15
 8006fd6:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	b298      	uxth	r0, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	b299      	uxth	r1, r3
 8006fe0:	4b2d      	ldr	r3, [pc, #180]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	f7fa fb3e 	bl	8001668 <LCD_PutIntF>
 8006fec:	4603      	mov	r3, r0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	4413      	add	r3, r2
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	b298      	uxth	r0, r3
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	b299      	uxth	r1, r3
 8007002:	4b25      	ldr	r3, [pc, #148]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8007004:	4a2d      	ldr	r2, [pc, #180]	; (80070bc <drawSystemInfoMenu+0x890>)
 8007006:	f7fa fa91 	bl	800152c <LCD_PutStr>
 800700a:	4603      	mov	r3, r0
 800700c:	461a      	mov	r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	4413      	add	r3, r2
 8007012:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch ==1){
 8007014:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <drawSystemInfoMenu+0x894>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d108      	bne.n	800702e <drawSystemInfoMenu+0x802>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	b298      	uxth	r0, r3
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	b299      	uxth	r1, r3
 8007024:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8007026:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <drawSystemInfoMenu+0x898>)
 8007028:	f7fa fa80 	bl	800152c <LCD_PutStr>
 800702c:	e007      	b.n	800703e <drawSystemInfoMenu+0x812>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	b298      	uxth	r0, r3
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	b299      	uxth	r1, r3
 8007036:	4b18      	ldr	r3, [pc, #96]	; (8007098 <drawSystemInfoMenu+0x86c>)
 8007038:	4a23      	ldr	r2, [pc, #140]	; (80070c8 <drawSystemInfoMenu+0x89c>)
 800703a:	f7fa fa77 	bl	800152c <LCD_PutStr>
		}



		i=200;
 800703e:	23c8      	movs	r3, #200	; 0xc8
 8007040:	617b      	str	r3, [r7, #20]
		j=15;
 8007042:	230f      	movs	r3, #15
 8007044:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	b298      	uxth	r0, r3
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	b299      	uxth	r1, r3
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	b29a      	uxth	r2, r3
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	b29b      	uxth	r3, r3
 8007056:	f7fa fbb9 	bl	80017cc <drawUpDownArrow>
		i=180;
 800705a:	23b4      	movs	r3, #180	; 0xb4
 800705c:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	b298      	uxth	r0, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	b299      	uxth	r1, r3
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	b29a      	uxth	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	b29b      	uxth	r3, r3
 800706e:	f7fa fbad 	bl	80017cc <drawUpDownArrow>
		i=220;
 8007072:	23dc      	movs	r3, #220	; 0xdc
 8007074:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	b298      	uxth	r0, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	b299      	uxth	r1, r3
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	b29a      	uxth	r2, r3
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	b29b      	uxth	r3, r3
 8007086:	f7fa fba1 	bl	80017cc <drawUpDownArrow>

		break;
 800708a:	bf00      	nop
	}
	}
	SMLCD_Flush();
 800708c:	f7f9 fb24 	bl	80006d8 <SMLCD_Flush>
}
 8007090:	bf00      	nop
 8007092:	3730      	adds	r7, #48	; 0x30
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	08017028 	.word	0x08017028
 800709c:	08016d1c 	.word	0x08016d1c
 80070a0:	08016d34 	.word	0x08016d34
 80070a4:	20000128 	.word	0x20000128
 80070a8:	20030aa0 	.word	0x20030aa0
 80070ac:	08016d44 	.word	0x08016d44
 80070b0:	08016d50 	.word	0x08016d50
 80070b4:	08016d5c 	.word	0x08016d5c
 80070b8:	08016ce8 	.word	0x08016ce8
 80070bc:	08016d68 	.word	0x08016d68
 80070c0:	20003274 	.word	0x20003274
 80070c4:	08016d78 	.word	0x08016d78
 80070c8:	08016d80 	.word	0x08016d80

080070cc <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b088      	sub	sp, #32
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	460b      	mov	r3, r1
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 80070da:	2314      	movs	r3, #20
 80070dc:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 80070de:	2332      	movs	r3, #50	; 0x32
 80070e0:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 80070e2:	f7f9 fc43 	bl	800096c <LCD_Clear>
		getLatestADC();
 80070e6:	f000 fcc9 	bl	8007a7c <getLatestADC>
		drawMenuHeader();
 80070ea:	f000 fc0b 	bl	8007904 <drawMenuHeader>
		i  = 135;
 80070ee:	2387      	movs	r3, #135	; 0x87
 80070f0:	613b      	str	r3, [r7, #16]
		j = 24;
 80070f2:	2318      	movs	r3, #24
 80070f4:	61fb      	str	r3, [r7, #28]
		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	b299      	uxth	r1, r3
 80070fa:	4b8d      	ldr	r3, [pc, #564]	; (8007330 <drawBootMenu+0x264>)
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	3b02      	subs	r3, #2
 8007100:	b29a      	uxth	r2, r3
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	b29b      	uxth	r3, r3
 8007106:	3303      	adds	r3, #3
 8007108:	b29b      	uxth	r3, r3
 800710a:	2002      	movs	r0, #2
 800710c:	f7f9 fec2 	bl	8000e94 <LCD_FillRect>
		if(displayAdcValues[Adc.adc0] >3.5){
 8007110:	4b88      	ldr	r3, [pc, #544]	; (8007334 <drawBootMenu+0x268>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a88      	ldr	r2, [pc, #544]	; (8007338 <drawBootMenu+0x26c>)
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	edd3 7a00 	vldr	s15, [r3]
 800711e:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8007122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712a:	f340 839a 	ble.w	8007862 <drawBootMenu+0x796>
			if(ZION.zionFinished){
 800712e:	4b83      	ldr	r3, [pc, #524]	; (800733c <drawBootMenu+0x270>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 82d1 	beq.w	80076da <drawBootMenu+0x60e>
				if((ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS)){
 8007138:	4b80      	ldr	r3, [pc, #512]	; (800733c <drawBootMenu+0x270>)
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d008      	beq.n	8007152 <drawBootMenu+0x86>
 8007140:	4b7e      	ldr	r3, [pc, #504]	; (800733c <drawBootMenu+0x270>)
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	2b01      	cmp	r3, #1
 8007146:	d004      	beq.n	8007152 <drawBootMenu+0x86>
 8007148:	4b7c      	ldr	r3, [pc, #496]	; (800733c <drawBootMenu+0x270>)
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	2b01      	cmp	r3, #1
 800714e:	f040 820d 	bne.w	800756c <drawBootMenu+0x4a0>
					j=45;
 8007152:	232d      	movs	r3, #45	; 0x2d
 8007154:	61fb      	str	r3, [r7, #28]
					i=5;
 8007156:	2305      	movs	r3, #5
 8007158:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "ATLAS RECOGNIZED. PROVIDING ATLAS BOOT MODES:", fnt7x10);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	b298      	uxth	r0, r3
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	b299      	uxth	r1, r3
 8007162:	4b77      	ldr	r3, [pc, #476]	; (8007340 <drawBootMenu+0x274>)
 8007164:	4a77      	ldr	r2, [pc, #476]	; (8007344 <drawBootMenu+0x278>)
 8007166:	f7fa f9e1 	bl	800152c <LCD_PutStr>
					j+=30;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	331e      	adds	r3, #30
 800716e:	61fb      	str	r3, [r7, #28]
					i=42;
 8007170:	232a      	movs	r3, #42	; 0x2a
 8007172:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	b298      	uxth	r0, r3
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	b299      	uxth	r1, r3
 800717c:	4b70      	ldr	r3, [pc, #448]	; (8007340 <drawBootMenu+0x274>)
 800717e:	4a72      	ldr	r2, [pc, #456]	; (8007348 <drawBootMenu+0x27c>)
 8007180:	f7fa f9d4 	bl	800152c <LCD_PutStr>
					i=indentAlignment;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	613b      	str	r3, [r7, #16]
					j+=20;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	3314      	adds	r3, #20
 800718c:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	b298      	uxth	r0, r3
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	b299      	uxth	r1, r3
 8007196:	4b6a      	ldr	r3, [pc, #424]	; (8007340 <drawBootMenu+0x274>)
 8007198:	4a6c      	ldr	r2, [pc, #432]	; (800734c <drawBootMenu+0x280>)
 800719a:	f7fa f9c7 	bl	800152c <LCD_PutStr>
					j+=20;
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	3314      	adds	r3, #20
 80071a2:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	b298      	uxth	r0, r3
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	b299      	uxth	r1, r3
 80071ac:	4b64      	ldr	r3, [pc, #400]	; (8007340 <drawBootMenu+0x274>)
 80071ae:	4a68      	ldr	r2, [pc, #416]	; (8007350 <drawBootMenu+0x284>)
 80071b0:	f7fa f9bc 	bl	800152c <LCD_PutStr>
					j+=20;
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	3314      	adds	r3, #20
 80071b8:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	b298      	uxth	r0, r3
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	b299      	uxth	r1, r3
 80071c2:	4b5f      	ldr	r3, [pc, #380]	; (8007340 <drawBootMenu+0x274>)
 80071c4:	4a63      	ldr	r2, [pc, #396]	; (8007354 <drawBootMenu+0x288>)
 80071c6:	f7fa f9b1 	bl	800152c <LCD_PutStr>
					j+=20;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3314      	adds	r3, #20
 80071ce:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	b298      	uxth	r0, r3
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	b299      	uxth	r1, r3
 80071d8:	4b59      	ldr	r3, [pc, #356]	; (8007340 <drawBootMenu+0x274>)
 80071da:	4a5f      	ldr	r2, [pc, #380]	; (8007358 <drawBootMenu+0x28c>)
 80071dc:	f7fa f9a6 	bl	800152c <LCD_PutStr>
					j+=20;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	3314      	adds	r3, #20
 80071e4:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "UEFI", fnt7x10);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	b298      	uxth	r0, r3
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	b299      	uxth	r1, r3
 80071ee:	4b54      	ldr	r3, [pc, #336]	; (8007340 <drawBootMenu+0x274>)
 80071f0:	4a5a      	ldr	r2, [pc, #360]	; (800735c <drawBootMenu+0x290>)
 80071f2:	f7fa f99b 	bl	800152c <LCD_PutStr>
					i-= 17;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3b11      	subs	r3, #17
 80071fa:	613b      	str	r3, [r7, #16]
					if(setIndicator==0){
 80071fc:	4b58      	ldr	r3, [pc, #352]	; (8007360 <drawBootMenu+0x294>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 810d 	bne.w	8007420 <drawBootMenu+0x354>
						switch(indicator){
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3b01      	subs	r3, #1
 800720a:	2b04      	cmp	r3, #4
 800720c:	f200 8104 	bhi.w	8007418 <drawBootMenu+0x34c>
 8007210:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <drawBootMenu+0x14c>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	0800722d 	.word	0x0800722d
 800721c:	08007283 	.word	0x08007283
 8007220:	080072d9 	.word	0x080072d9
 8007224:	0800736d 	.word	0x0800736d
 8007228:	080073c3 	.word	0x080073c3
						case FIRST:
						{
							j=95;
 800722c:	235f      	movs	r3, #95	; 0x5f
 800722e:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007230:	7afb      	ldrb	r3, [r7, #11]
 8007232:	2b04      	cmp	r3, #4
 8007234:	bf0c      	ite	eq
 8007236:	2301      	moveq	r3, #1
 8007238:	2300      	movne	r3, #0
 800723a:	b2da      	uxtb	r2, r3
 800723c:	4b49      	ldr	r3, [pc, #292]	; (8007364 <drawBootMenu+0x298>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4299      	cmp	r1, r3
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4013      	ands	r3, r2
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8170 	beq.w	8007536 <drawBootMenu+0x46a>
								i=140;
 8007256:	238c      	movs	r3, #140	; 0x8c
 8007258:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	b298      	uxth	r0, r3
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	b29b      	uxth	r3, r3
 8007262:	3305      	adds	r3, #5
 8007264:	b299      	uxth	r1, r3
 8007266:	2303      	movs	r3, #3
 8007268:	2203      	movs	r2, #3
 800726a:	f7fa faaf 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 800726e:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <drawBootMenu+0x29c>)
 8007270:	2201      	movs	r2, #1
 8007272:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 8007274:	4b3c      	ldr	r3, [pc, #240]	; (8007368 <drawBootMenu+0x29c>)
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 800727a:	4b39      	ldr	r3, [pc, #228]	; (8007360 <drawBootMenu+0x294>)
 800727c:	2201      	movs	r2, #1
 800727e:	601a      	str	r2, [r3, #0]
							}

							break;
 8007280:	e159      	b.n	8007536 <drawBootMenu+0x46a>
						}
						case SECOND:
						{
							j=115;
 8007282:	2373      	movs	r3, #115	; 0x73
 8007284:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	2b04      	cmp	r3, #4
 800728a:	bf0c      	ite	eq
 800728c:	2301      	moveq	r3, #1
 800728e:	2300      	movne	r3, #0
 8007290:	b2da      	uxtb	r2, r3
 8007292:	4b34      	ldr	r3, [pc, #208]	; (8007364 <drawBootMenu+0x298>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4299      	cmp	r1, r3
 800729a:	bf0c      	ite	eq
 800729c:	2301      	moveq	r3, #1
 800729e:	2300      	movne	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	4013      	ands	r3, r2
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 8147 	beq.w	800753a <drawBootMenu+0x46e>
								i=220;
 80072ac:	23dc      	movs	r3, #220	; 0xdc
 80072ae:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	b298      	uxth	r0, r3
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3305      	adds	r3, #5
 80072ba:	b299      	uxth	r1, r3
 80072bc:	2303      	movs	r3, #3
 80072be:	2203      	movs	r2, #3
 80072c0:	f7fa fa84 	bl	80017cc <drawUpDownArrow>
								bootButtons.edl_sw=1;
 80072c4:	4b28      	ldr	r3, [pc, #160]	; (8007368 <drawBootMenu+0x29c>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	61da      	str	r2, [r3, #28]
								bootButtons.bootModeSet=1;
 80072ca:	4b27      	ldr	r3, [pc, #156]	; (8007368 <drawBootMenu+0x29c>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
								setIndicator=2;
 80072d0:	4b23      	ldr	r3, [pc, #140]	; (8007360 <drawBootMenu+0x294>)
 80072d2:	2202      	movs	r2, #2
 80072d4:	601a      	str	r2, [r3, #0]
							}

							break;
 80072d6:	e130      	b.n	800753a <drawBootMenu+0x46e>
						}
						case THIRD:
						{
							j=135;
 80072d8:	2387      	movs	r3, #135	; 0x87
 80072da:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	bf0c      	ite	eq
 80072e2:	2301      	moveq	r3, #1
 80072e4:	2300      	movne	r3, #0
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	4b1e      	ldr	r3, [pc, #120]	; (8007364 <drawBootMenu+0x298>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4299      	cmp	r1, r3
 80072f0:	bf0c      	ite	eq
 80072f2:	2301      	moveq	r3, #1
 80072f4:	2300      	movne	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	4013      	ands	r3, r2
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 811e 	beq.w	800753e <drawBootMenu+0x472>
								i=130;
 8007302:	2382      	movs	r3, #130	; 0x82
 8007304:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	b298      	uxth	r0, r3
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	b29b      	uxth	r3, r3
 800730e:	3305      	adds	r3, #5
 8007310:	b299      	uxth	r1, r3
 8007312:	2303      	movs	r3, #3
 8007314:	2203      	movs	r2, #3
 8007316:	f7fa fa59 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn1=1;
 800731a:	4b13      	ldr	r3, [pc, #76]	; (8007368 <drawBootMenu+0x29c>)
 800731c:	2201      	movs	r2, #1
 800731e:	609a      	str	r2, [r3, #8]
								bootButtons.bootModeSet=1;
 8007320:	4b11      	ldr	r3, [pc, #68]	; (8007368 <drawBootMenu+0x29c>)
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]
								setIndicator=3;
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <drawBootMenu+0x294>)
 8007328:	2203      	movs	r2, #3
 800732a:	601a      	str	r2, [r3, #0]
							}

							break;
 800732c:	e107      	b.n	800753e <drawBootMenu+0x472>
 800732e:	bf00      	nop
 8007330:	20028aaa 	.word	0x20028aaa
 8007334:	20000128 	.word	0x20000128
 8007338:	20030aa0 	.word	0x20030aa0
 800733c:	20003274 	.word	0x20003274
 8007340:	08017028 	.word	0x08017028
 8007344:	08016d8c 	.word	0x08016d8c
 8007348:	08016dbc 	.word	0x08016dbc
 800734c:	08016dd8 	.word	0x08016dd8
 8007350:	08016de4 	.word	0x08016de4
 8007354:	08016df8 	.word	0x08016df8
 8007358:	08016e04 	.word	0x08016e04
 800735c:	08016834 	.word	0x08016834
 8007360:	2000337c 	.word	0x2000337c
 8007364:	20003378 	.word	0x20003378
 8007368:	200032ac 	.word	0x200032ac
						}
						case FOURTH:
						{
							j=155;
 800736c:	239b      	movs	r3, #155	; 0x9b
 800736e:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	2b04      	cmp	r3, #4
 8007374:	bf0c      	ite	eq
 8007376:	2301      	moveq	r3, #1
 8007378:	2300      	movne	r3, #0
 800737a:	b2da      	uxtb	r2, r3
 800737c:	4b78      	ldr	r3, [pc, #480]	; (8007560 <drawBootMenu+0x494>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4299      	cmp	r1, r3
 8007384:	bf0c      	ite	eq
 8007386:	2301      	moveq	r3, #1
 8007388:	2300      	movne	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	4013      	ands	r3, r2
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80d6 	beq.w	8007542 <drawBootMenu+0x476>
								i=160;
 8007396:	23a0      	movs	r3, #160	; 0xa0
 8007398:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	b298      	uxth	r0, r3
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3305      	adds	r3, #5
 80073a4:	b299      	uxth	r1, r3
 80073a6:	2303      	movs	r3, #3
 80073a8:	2203      	movs	r2, #3
 80073aa:	f7fa fa0f 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn2=1;
 80073ae:	4b6d      	ldr	r3, [pc, #436]	; (8007564 <drawBootMenu+0x498>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	60da      	str	r2, [r3, #12]
								bootButtons.bootModeSet=1;
 80073b4:	4b6b      	ldr	r3, [pc, #428]	; (8007564 <drawBootMenu+0x498>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	601a      	str	r2, [r3, #0]
								setIndicator=4;
 80073ba:	4b6b      	ldr	r3, [pc, #428]	; (8007568 <drawBootMenu+0x49c>)
 80073bc:	2204      	movs	r2, #4
 80073be:	601a      	str	r2, [r3, #0]
							}

							break;
 80073c0:	e0bf      	b.n	8007542 <drawBootMenu+0x476>
						}
						case FIFTH:
						{
							j=175;
 80073c2:	23af      	movs	r3, #175	; 0xaf
 80073c4:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80073c6:	7afb      	ldrb	r3, [r7, #11]
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	bf0c      	ite	eq
 80073cc:	2301      	moveq	r3, #1
 80073ce:	2300      	movne	r3, #0
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	4b63      	ldr	r3, [pc, #396]	; (8007560 <drawBootMenu+0x494>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4299      	cmp	r1, r3
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	4013      	ands	r3, r2
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80ad 	beq.w	8007546 <drawBootMenu+0x47a>
								i=100;
 80073ec:	2364      	movs	r3, #100	; 0x64
 80073ee:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	b298      	uxth	r0, r3
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3305      	adds	r3, #5
 80073fa:	b299      	uxth	r1, r3
 80073fc:	2303      	movs	r3, #3
 80073fe:	2203      	movs	r2, #3
 8007400:	f7fa f9e4 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn3=1;
 8007404:	4b57      	ldr	r3, [pc, #348]	; (8007564 <drawBootMenu+0x498>)
 8007406:	2201      	movs	r2, #1
 8007408:	611a      	str	r2, [r3, #16]
								bootButtons.bootModeSet=1;
 800740a:	4b56      	ldr	r3, [pc, #344]	; (8007564 <drawBootMenu+0x498>)
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
								setIndicator=5;
 8007410:	4b55      	ldr	r3, [pc, #340]	; (8007568 <drawBootMenu+0x49c>)
 8007412:	2205      	movs	r2, #5
 8007414:	601a      	str	r2, [r3, #0]
							}

							break;
 8007416:	e096      	b.n	8007546 <drawBootMenu+0x47a>
						}
						default:
						{
							j=95;
 8007418:	235f      	movs	r3, #95	; 0x5f
 800741a:	61fb      	str	r3, [r7, #28]
							break;
 800741c:	bf00      	nop
 800741e:	e09d      	b.n	800755c <drawBootMenu+0x490>
						}
						}
					}
					else{
						switch(setIndicator){
 8007420:	4b51      	ldr	r3, [pc, #324]	; (8007568 <drawBootMenu+0x49c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3b01      	subs	r3, #1
 8007426:	2b04      	cmp	r3, #4
 8007428:	d87a      	bhi.n	8007520 <drawBootMenu+0x454>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <drawBootMenu+0x364>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007445 	.word	0x08007445
 8007434:	08007471 	.word	0x08007471
 8007438:	0800749d 	.word	0x0800749d
 800743c:	080074c9 	.word	0x080074c9
 8007440:	080074f5 	.word	0x080074f5
						case FIRST:
						{
							j=95;
 8007444:	235f      	movs	r3, #95	; 0x5f
 8007446:	61fb      	str	r3, [r7, #28]
							i=140;
 8007448:	238c      	movs	r3, #140	; 0x8c
 800744a:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	b298      	uxth	r0, r3
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	b29b      	uxth	r3, r3
 8007454:	3305      	adds	r3, #5
 8007456:	b299      	uxth	r1, r3
 8007458:	2303      	movs	r3, #3
 800745a:	2203      	movs	r2, #3
 800745c:	f7fa f9b6 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007460:	4b40      	ldr	r3, [pc, #256]	; (8007564 <drawBootMenu+0x498>)
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d070      	beq.n	800754a <drawBootMenu+0x47e>
								setIndicator=0;
 8007468:	4b3f      	ldr	r3, [pc, #252]	; (8007568 <drawBootMenu+0x49c>)
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
							}
							break;
 800746e:	e06c      	b.n	800754a <drawBootMenu+0x47e>
						}
						case SECOND:
						{
							j=115;
 8007470:	2373      	movs	r3, #115	; 0x73
 8007472:	61fb      	str	r3, [r7, #28]
							i=220;
 8007474:	23dc      	movs	r3, #220	; 0xdc
 8007476:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	b298      	uxth	r0, r3
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	b29b      	uxth	r3, r3
 8007480:	3305      	adds	r3, #5
 8007482:	b299      	uxth	r1, r3
 8007484:	2303      	movs	r3, #3
 8007486:	2203      	movs	r2, #3
 8007488:	f7fa f9a0 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 800748c:	4b35      	ldr	r3, [pc, #212]	; (8007564 <drawBootMenu+0x498>)
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d05c      	beq.n	800754e <drawBootMenu+0x482>
								setIndicator=0;
 8007494:	4b34      	ldr	r3, [pc, #208]	; (8007568 <drawBootMenu+0x49c>)
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
							}
							break;
 800749a:	e058      	b.n	800754e <drawBootMenu+0x482>
						}
						case THIRD:
						{
							j=135;
 800749c:	2387      	movs	r3, #135	; 0x87
 800749e:	61fb      	str	r3, [r7, #28]
							i=130;
 80074a0:	2382      	movs	r3, #130	; 0x82
 80074a2:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	b298      	uxth	r0, r3
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3305      	adds	r3, #5
 80074ae:	b299      	uxth	r1, r3
 80074b0:	2303      	movs	r3, #3
 80074b2:	2203      	movs	r2, #3
 80074b4:	f7fa f98a 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80074b8:	4b2a      	ldr	r3, [pc, #168]	; (8007564 <drawBootMenu+0x498>)
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d048      	beq.n	8007552 <drawBootMenu+0x486>
								setIndicator=0;
 80074c0:	4b29      	ldr	r3, [pc, #164]	; (8007568 <drawBootMenu+0x49c>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
							}
							break;
 80074c6:	e044      	b.n	8007552 <drawBootMenu+0x486>
						}
						case FOURTH:
						{
							j=155;
 80074c8:	239b      	movs	r3, #155	; 0x9b
 80074ca:	61fb      	str	r3, [r7, #28]
							i=160;
 80074cc:	23a0      	movs	r3, #160	; 0xa0
 80074ce:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	b298      	uxth	r0, r3
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3305      	adds	r3, #5
 80074da:	b299      	uxth	r1, r3
 80074dc:	2303      	movs	r3, #3
 80074de:	2203      	movs	r2, #3
 80074e0:	f7fa f974 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80074e4:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <drawBootMenu+0x498>)
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d034      	beq.n	8007556 <drawBootMenu+0x48a>
								setIndicator=0;
 80074ec:	4b1e      	ldr	r3, [pc, #120]	; (8007568 <drawBootMenu+0x49c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]
							}
							break;
 80074f2:	e030      	b.n	8007556 <drawBootMenu+0x48a>
						}
						case FIFTH:
						{
							j=175;
 80074f4:	23af      	movs	r3, #175	; 0xaf
 80074f6:	61fb      	str	r3, [r7, #28]
							i=100;
 80074f8:	2364      	movs	r3, #100	; 0x64
 80074fa:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	b298      	uxth	r0, r3
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	b29b      	uxth	r3, r3
 8007504:	3305      	adds	r3, #5
 8007506:	b299      	uxth	r1, r3
 8007508:	2303      	movs	r3, #3
 800750a:	2203      	movs	r2, #3
 800750c:	f7fa f95e 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007510:	4b14      	ldr	r3, [pc, #80]	; (8007564 <drawBootMenu+0x498>)
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d020      	beq.n	800755a <drawBootMenu+0x48e>
								setIndicator=0;
 8007518:	4b13      	ldr	r3, [pc, #76]	; (8007568 <drawBootMenu+0x49c>)
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
							}
							break;
 800751e:	e01c      	b.n	800755a <drawBootMenu+0x48e>
						}
						default:
						{
							drawUpDownArrow(i, j+5, 3, 3);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	b298      	uxth	r0, r3
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	b29b      	uxth	r3, r3
 8007528:	3305      	adds	r3, #5
 800752a:	b299      	uxth	r1, r3
 800752c:	2303      	movs	r3, #3
 800752e:	2203      	movs	r2, #3
 8007530:	f7fa f94c 	bl	80017cc <drawUpDownArrow>
							break;
 8007534:	e012      	b.n	800755c <drawBootMenu+0x490>
							break;
 8007536:	bf00      	nop
 8007538:	e1bf      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 800753a:	bf00      	nop
 800753c:	e1bd      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 800753e:	bf00      	nop
 8007540:	e1bb      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 8007542:	bf00      	nop
 8007544:	e1b9      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 8007546:	bf00      	nop
 8007548:	e1b7      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 800754a:	bf00      	nop
 800754c:	e1b5      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 800754e:	bf00      	nop
 8007550:	e1b3      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 8007552:	bf00      	nop
 8007554:	e1b1      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 8007556:	bf00      	nop
 8007558:	e1af      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 800755a:	bf00      	nop
					if(setIndicator==0){
 800755c:	e1ad      	b.n	80078ba <drawBootMenu+0x7ee>
 800755e:	bf00      	nop
 8007560:	20003378 	.word	0x20003378
 8007564:	200032ac 	.word	0x200032ac
 8007568:	2000337c 	.word	0x2000337c
						}
						}
					}
				}
				else{
					j=45;
 800756c:	232d      	movs	r3, #45	; 0x2d
 800756e:	61fb      	str	r3, [r7, #28]
					i=5;
 8007570:	2305      	movs	r3, #5
 8007572:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "UNKNOWN SYSTEM. STANDARD MODE ONLY:", fnt7x10);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	b298      	uxth	r0, r3
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	b299      	uxth	r1, r3
 800757c:	4b98      	ldr	r3, [pc, #608]	; (80077e0 <drawBootMenu+0x714>)
 800757e:	4a99      	ldr	r2, [pc, #612]	; (80077e4 <drawBootMenu+0x718>)
 8007580:	f7f9 ffd4 	bl	800152c <LCD_PutStr>
					j+=30;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	331e      	adds	r3, #30
 8007588:	61fb      	str	r3, [r7, #28]
					i=42;
 800758a:	232a      	movs	r3, #42	; 0x2a
 800758c:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	b298      	uxth	r0, r3
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	b299      	uxth	r1, r3
 8007596:	4b92      	ldr	r3, [pc, #584]	; (80077e0 <drawBootMenu+0x714>)
 8007598:	4a93      	ldr	r2, [pc, #588]	; (80077e8 <drawBootMenu+0x71c>)
 800759a:	f7f9 ffc7 	bl	800152c <LCD_PutStr>
					i=indentAlignment;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	613b      	str	r3, [r7, #16]
					j+=20;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	3314      	adds	r3, #20
 80075a6:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	b298      	uxth	r0, r3
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	b299      	uxth	r1, r3
 80075b0:	4b8b      	ldr	r3, [pc, #556]	; (80077e0 <drawBootMenu+0x714>)
 80075b2:	4a8e      	ldr	r2, [pc, #568]	; (80077ec <drawBootMenu+0x720>)
 80075b4:	f7f9 ffba 	bl	800152c <LCD_PutStr>
					if(setIndicator==0){
 80075b8:	4b8d      	ldr	r3, [pc, #564]	; (80077f0 <drawBootMenu+0x724>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d159      	bne.n	8007674 <drawBootMenu+0x5a8>
						switch(indicator){
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d12a      	bne.n	800761c <drawBootMenu+0x550>
						case FIRST:
						{
							j=95;
 80075c6:	235f      	movs	r3, #95	; 0x5f
 80075c8:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	4b87      	ldr	r3, [pc, #540]	; (80077f4 <drawBootMenu+0x728>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	4299      	cmp	r1, r3
 80075de:	bf0c      	ite	eq
 80075e0:	2301      	moveq	r3, #1
 80075e2:	2300      	movne	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4013      	ands	r3, r2
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8156 	beq.w	800789c <drawBootMenu+0x7d0>
								i=140;
 80075f0:	238c      	movs	r3, #140	; 0x8c
 80075f2:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	b298      	uxth	r0, r3
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3305      	adds	r3, #5
 80075fe:	b299      	uxth	r1, r3
 8007600:	2303      	movs	r3, #3
 8007602:	2203      	movs	r2, #3
 8007604:	f7fa f8e2 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 8007608:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <drawBootMenu+0x72c>)
 800760a:	2201      	movs	r2, #1
 800760c:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 800760e:	4b7a      	ldr	r3, [pc, #488]	; (80077f8 <drawBootMenu+0x72c>)
 8007610:	2201      	movs	r2, #1
 8007612:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 8007614:	4b76      	ldr	r3, [pc, #472]	; (80077f0 <drawBootMenu+0x724>)
 8007616:	2201      	movs	r2, #1
 8007618:	601a      	str	r2, [r3, #0]
							}
							break;
 800761a:	e13f      	b.n	800789c <drawBootMenu+0x7d0>
						}
						default:
						{
							j=95;
 800761c:	235f      	movs	r3, #95	; 0x5f
 800761e:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	2b04      	cmp	r3, #4
 8007624:	bf0c      	ite	eq
 8007626:	2301      	moveq	r3, #1
 8007628:	2300      	movne	r3, #0
 800762a:	b2da      	uxtb	r2, r3
 800762c:	4b71      	ldr	r3, [pc, #452]	; (80077f4 <drawBootMenu+0x728>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4299      	cmp	r1, r3
 8007634:	bf0c      	ite	eq
 8007636:	2301      	moveq	r3, #1
 8007638:	2300      	movne	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	4013      	ands	r3, r2
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 812d 	beq.w	80078a0 <drawBootMenu+0x7d4>
								i=140;
 8007646:	238c      	movs	r3, #140	; 0x8c
 8007648:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	b298      	uxth	r0, r3
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	b29b      	uxth	r3, r3
 8007652:	3305      	adds	r3, #5
 8007654:	b299      	uxth	r1, r3
 8007656:	2303      	movs	r3, #3
 8007658:	2203      	movs	r2, #3
 800765a:	f7fa f8b7 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 800765e:	4b66      	ldr	r3, [pc, #408]	; (80077f8 <drawBootMenu+0x72c>)
 8007660:	2201      	movs	r2, #1
 8007662:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 8007664:	4b64      	ldr	r3, [pc, #400]	; (80077f8 <drawBootMenu+0x72c>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 800766a:	4b61      	ldr	r3, [pc, #388]	; (80077f0 <drawBootMenu+0x724>)
 800766c:	2201      	movs	r2, #1
 800766e:	601a      	str	r2, [r3, #0]
							}
							break;
 8007670:	bf00      	nop
 8007672:	e115      	b.n	80078a0 <drawBootMenu+0x7d4>
						}
						}
					}
					else{
						switch(setIndicator){
 8007674:	4b5e      	ldr	r3, [pc, #376]	; (80077f0 <drawBootMenu+0x724>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d116      	bne.n	80076aa <drawBootMenu+0x5de>
						case FIRST:
						{
							j=95;
 800767c:	235f      	movs	r3, #95	; 0x5f
 800767e:	61fb      	str	r3, [r7, #28]
							i=140;
 8007680:	238c      	movs	r3, #140	; 0x8c
 8007682:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	b298      	uxth	r0, r3
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	b29b      	uxth	r3, r3
 800768c:	3305      	adds	r3, #5
 800768e:	b299      	uxth	r1, r3
 8007690:	2303      	movs	r3, #3
 8007692:	2203      	movs	r2, #3
 8007694:	f7fa f89a 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007698:	4b57      	ldr	r3, [pc, #348]	; (80077f8 <drawBootMenu+0x72c>)
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8101 	beq.w	80078a4 <drawBootMenu+0x7d8>
								setIndicator=0;
 80076a2:	4b53      	ldr	r3, [pc, #332]	; (80077f0 <drawBootMenu+0x724>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]
							}
							break;
 80076a8:	e0fc      	b.n	80078a4 <drawBootMenu+0x7d8>
						}
						default:
						{
							j=95;
 80076aa:	235f      	movs	r3, #95	; 0x5f
 80076ac:	61fb      	str	r3, [r7, #28]
							i=140;
 80076ae:	238c      	movs	r3, #140	; 0x8c
 80076b0:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	b298      	uxth	r0, r3
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3305      	adds	r3, #5
 80076bc:	b299      	uxth	r1, r3
 80076be:	2303      	movs	r3, #3
 80076c0:	2203      	movs	r2, #3
 80076c2:	f7fa f883 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80076c6:	4b4c      	ldr	r3, [pc, #304]	; (80077f8 <drawBootMenu+0x72c>)
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 80ec 	beq.w	80078a8 <drawBootMenu+0x7dc>
								setIndicator=0;
 80076d0:	4b47      	ldr	r3, [pc, #284]	; (80077f0 <drawBootMenu+0x724>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
							}
							break;
 80076d6:	bf00      	nop
 80076d8:	e0e6      	b.n	80078a8 <drawBootMenu+0x7dc>
						}
					}
				}
			}
			else{
				j=45;
 80076da:	232d      	movs	r3, #45	; 0x2d
 80076dc:	61fb      	str	r3, [r7, #28]
				i=15;
 80076de:	230f      	movs	r3, #15
 80076e0:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i,j, "WAITING ON ZION INFO. STANDARD MODE ONLY:", fnt7x10);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	b298      	uxth	r0, r3
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	b299      	uxth	r1, r3
 80076ea:	4b3d      	ldr	r3, [pc, #244]	; (80077e0 <drawBootMenu+0x714>)
 80076ec:	4a43      	ldr	r2, [pc, #268]	; (80077fc <drawBootMenu+0x730>)
 80076ee:	f7f9 ff1d 	bl	800152c <LCD_PutStr>
				j+=30;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	331e      	adds	r3, #30
 80076f6:	61fb      	str	r3, [r7, #28]
				i=42;
 80076f8:	232a      	movs	r3, #42	; 0x2a
 80076fa:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	b298      	uxth	r0, r3
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	b299      	uxth	r1, r3
 8007704:	4b36      	ldr	r3, [pc, #216]	; (80077e0 <drawBootMenu+0x714>)
 8007706:	4a38      	ldr	r2, [pc, #224]	; (80077e8 <drawBootMenu+0x71c>)
 8007708:	f7f9 ff10 	bl	800152c <LCD_PutStr>
				i=indentAlignment;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	613b      	str	r3, [r7, #16]
				j+=20;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	3314      	adds	r3, #20
 8007714:	61fb      	str	r3, [r7, #28]
				LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	b298      	uxth	r0, r3
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	b299      	uxth	r1, r3
 800771e:	4b30      	ldr	r3, [pc, #192]	; (80077e0 <drawBootMenu+0x714>)
 8007720:	4a32      	ldr	r2, [pc, #200]	; (80077ec <drawBootMenu+0x720>)
 8007722:	f7f9 ff03 	bl	800152c <LCD_PutStr>
				if(setIndicator==0){
 8007726:	4b32      	ldr	r3, [pc, #200]	; (80077f0 <drawBootMenu+0x724>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d168      	bne.n	8007800 <drawBootMenu+0x734>
					switch(indicator){
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d12a      	bne.n	800778a <drawBootMenu+0x6be>
					case FIRST:
					{
						j=95;
 8007734:	235f      	movs	r3, #95	; 0x5f
 8007736:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	2b04      	cmp	r3, #4
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2da      	uxtb	r2, r3
 8007744:	4b2b      	ldr	r3, [pc, #172]	; (80077f4 <drawBootMenu+0x728>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	4299      	cmp	r1, r3
 800774c:	bf0c      	ite	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	2300      	movne	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	4013      	ands	r3, r2
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80a7 	beq.w	80078ac <drawBootMenu+0x7e0>
							i=140;
 800775e:	238c      	movs	r3, #140	; 0x8c
 8007760:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	b298      	uxth	r0, r3
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	b29b      	uxth	r3, r3
 800776a:	3305      	adds	r3, #5
 800776c:	b299      	uxth	r1, r3
 800776e:	2303      	movs	r3, #3
 8007770:	2203      	movs	r2, #3
 8007772:	f7fa f82b 	bl	80017cc <drawUpDownArrow>
							bootButtons.btn0=1;
 8007776:	4b20      	ldr	r3, [pc, #128]	; (80077f8 <drawBootMenu+0x72c>)
 8007778:	2201      	movs	r2, #1
 800777a:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 800777c:	4b1e      	ldr	r3, [pc, #120]	; (80077f8 <drawBootMenu+0x72c>)
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 8007782:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <drawBootMenu+0x724>)
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]
						}
						break;
 8007788:	e090      	b.n	80078ac <drawBootMenu+0x7e0>
					}
					default:
					{
						j=95;
 800778a:	235f      	movs	r3, #95	; 0x5f
 800778c:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	2b04      	cmp	r3, #4
 8007792:	bf0c      	ite	eq
 8007794:	2301      	moveq	r3, #1
 8007796:	2300      	movne	r3, #0
 8007798:	b2da      	uxtb	r2, r3
 800779a:	4b16      	ldr	r3, [pc, #88]	; (80077f4 <drawBootMenu+0x728>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	4299      	cmp	r1, r3
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	4013      	ands	r3, r2
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d07e      	beq.n	80078b0 <drawBootMenu+0x7e4>
							i=140;
 80077b2:	238c      	movs	r3, #140	; 0x8c
 80077b4:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	b298      	uxth	r0, r3
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3305      	adds	r3, #5
 80077c0:	b299      	uxth	r1, r3
 80077c2:	2303      	movs	r3, #3
 80077c4:	2203      	movs	r2, #3
 80077c6:	f7fa f801 	bl	80017cc <drawUpDownArrow>
							bootButtons.btn0=1;
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <drawBootMenu+0x72c>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 80077d0:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <drawBootMenu+0x72c>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <drawBootMenu+0x724>)
 80077d8:	2201      	movs	r2, #1
 80077da:	601a      	str	r2, [r3, #0]
						}
						break;
 80077dc:	bf00      	nop
 80077de:	e067      	b.n	80078b0 <drawBootMenu+0x7e4>
 80077e0:	08017028 	.word	0x08017028
 80077e4:	08016e14 	.word	0x08016e14
 80077e8:	08016dbc 	.word	0x08016dbc
 80077ec:	08016dd8 	.word	0x08016dd8
 80077f0:	2000337c 	.word	0x2000337c
 80077f4:	20003378 	.word	0x20003378
 80077f8:	200032ac 	.word	0x200032ac
 80077fc:	08016e38 	.word	0x08016e38
					}
					}
				}
				else{
					switch(setIndicator){
 8007800:	4b3a      	ldr	r3, [pc, #232]	; (80078ec <drawBootMenu+0x820>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d115      	bne.n	8007834 <drawBootMenu+0x768>
					case FIRST:
					{
						j=95;
 8007808:	235f      	movs	r3, #95	; 0x5f
 800780a:	61fb      	str	r3, [r7, #28]
						i=140;
 800780c:	238c      	movs	r3, #140	; 0x8c
 800780e:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	b298      	uxth	r0, r3
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	b29b      	uxth	r3, r3
 8007818:	3305      	adds	r3, #5
 800781a:	b299      	uxth	r1, r3
 800781c:	2303      	movs	r3, #3
 800781e:	2203      	movs	r2, #3
 8007820:	f7f9 ffd4 	bl	80017cc <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007824:	4b32      	ldr	r3, [pc, #200]	; (80078f0 <drawBootMenu+0x824>)
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d043      	beq.n	80078b4 <drawBootMenu+0x7e8>
							setIndicator=0;
 800782c:	4b2f      	ldr	r3, [pc, #188]	; (80078ec <drawBootMenu+0x820>)
 800782e:	2200      	movs	r2, #0
 8007830:	601a      	str	r2, [r3, #0]
						}
						break;
 8007832:	e03f      	b.n	80078b4 <drawBootMenu+0x7e8>
					}
					default:
					{
						j=95;
 8007834:	235f      	movs	r3, #95	; 0x5f
 8007836:	61fb      	str	r3, [r7, #28]
						i=140;
 8007838:	238c      	movs	r3, #140	; 0x8c
 800783a:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	b298      	uxth	r0, r3
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	b29b      	uxth	r3, r3
 8007844:	3305      	adds	r3, #5
 8007846:	b299      	uxth	r1, r3
 8007848:	2303      	movs	r3, #3
 800784a:	2203      	movs	r2, #3
 800784c:	f7f9 ffbe 	bl	80017cc <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007850:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <drawBootMenu+0x824>)
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	d02f      	beq.n	80078b8 <drawBootMenu+0x7ec>
							setIndicator=0;
 8007858:	4b24      	ldr	r3, [pc, #144]	; (80078ec <drawBootMenu+0x820>)
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
						}
						break;
 800785e:	bf00      	nop
 8007860:	e02a      	b.n	80078b8 <drawBootMenu+0x7ec>
					}
				}
			}
		}
		else{
			j=110;
 8007862:	236e      	movs	r3, #110	; 0x6e
 8007864:	61fb      	str	r3, [r7, #28]
			i=120;
 8007866:	2378      	movs	r3, #120	; 0x78
 8007868:	613b      	str	r3, [r7, #16]
			bootButtons.bootMode=0;
 800786a:	4b21      	ldr	r3, [pc, #132]	; (80078f0 <drawBootMenu+0x824>)
 800786c:	2200      	movs	r2, #0
 800786e:	629a      	str	r2, [r3, #40]	; 0x28
			LCD_PutStr(i,j, "POWER SWITCH DISABLED!", fnt7x10);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	b298      	uxth	r0, r3
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	b299      	uxth	r1, r3
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <drawBootMenu+0x828>)
 800787a:	4a1f      	ldr	r2, [pc, #124]	; (80078f8 <drawBootMenu+0x82c>)
 800787c:	f7f9 fe56 	bl	800152c <LCD_PutStr>
			j+=14;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	330e      	adds	r3, #14
 8007884:	61fb      	str	r3, [r7, #28]
			i=75;
 8007886:	234b      	movs	r3, #75	; 0x4b
 8007888:	613b      	str	r3, [r7, #16]
			LCD_PutStr(i,j, "Flip Switch to enable Boot Options!", fnt7x10);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	b298      	uxth	r0, r3
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	b299      	uxth	r1, r3
 8007892:	4b18      	ldr	r3, [pc, #96]	; (80078f4 <drawBootMenu+0x828>)
 8007894:	4a19      	ldr	r2, [pc, #100]	; (80078fc <drawBootMenu+0x830>)
 8007896:	f7f9 fe49 	bl	800152c <LCD_PutStr>
 800789a:	e00e      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 800789c:	bf00      	nop
 800789e:	e00c      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 80078a0:	bf00      	nop
 80078a2:	e00a      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 80078a4:	bf00      	nop
 80078a6:	e008      	b.n	80078ba <drawBootMenu+0x7ee>
							break;
 80078a8:	bf00      	nop
 80078aa:	e006      	b.n	80078ba <drawBootMenu+0x7ee>
						break;
 80078ac:	bf00      	nop
 80078ae:	e004      	b.n	80078ba <drawBootMenu+0x7ee>
						break;
 80078b0:	bf00      	nop
 80078b2:	e002      	b.n	80078ba <drawBootMenu+0x7ee>
						break;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <drawBootMenu+0x7ee>
						break;
 80078b8:	bf00      	nop
		}
		previousMenu=menu;
 80078ba:	4a11      	ldr	r2, [pc, #68]	; (8007900 <drawBootMenu+0x834>)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6013      	str	r3, [r2, #0]
		i=25;
 80078c0:	2319      	movs	r3, #25
 80078c2:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	b298      	uxth	r0, r3
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	b299      	uxth	r1, r3
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	330c      	adds	r3, #12
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	330a      	adds	r3, #10
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f7f9 fada 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 80078e0:	f7f8 fefa 	bl	80006d8 <SMLCD_Flush>
}
 80078e4:	bf00      	nop
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	2000337c 	.word	0x2000337c
 80078f0:	200032ac 	.word	0x200032ac
 80078f4:	08017028 	.word	0x08017028
 80078f8:	08016e64 	.word	0x08016e64
 80078fc:	08016e7c 	.word	0x08016e7c
 8007900:	20003378 	.word	0x20003378

08007904 <drawMenuHeader>:

void drawMenuHeader(){
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
	int i, j;
	LCD_PixelMode = LCD_PSET;
 800790a:	4b4e      	ldr	r3, [pc, #312]	; (8007a44 <drawMenuHeader+0x140>)
 800790c:	2200      	movs	r2, #0
 800790e:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8007910:	4b4d      	ldr	r3, [pc, #308]	; (8007a48 <drawMenuHeader+0x144>)
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	4b4c      	ldr	r3, [pc, #304]	; (8007a4c <drawMenuHeader+0x148>)
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	2100      	movs	r1, #0
 8007922:	2000      	movs	r0, #0
 8007924:	f7f9 fa74 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8007928:	4b47      	ldr	r3, [pc, #284]	; (8007a48 <drawMenuHeader+0x144>)
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	3b03      	subs	r3, #3
 800792e:	b29a      	uxth	r2, r3
 8007930:	4b46      	ldr	r3, [pc, #280]	; (8007a4c <drawMenuHeader+0x148>)
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	3b03      	subs	r3, #3
 8007936:	b29b      	uxth	r3, r3
 8007938:	2102      	movs	r1, #2
 800793a:	2002      	movs	r0, #2
 800793c:	f7f9 fa68 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8007940:	230a      	movs	r3, #10
 8007942:	607b      	str	r3, [r7, #4]
	j  = 10;
 8007944:	230a      	movs	r3, #10
 8007946:	603b      	str	r3, [r7, #0]
	printFaults(i,j);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8c4 	bl	8007ad8 <printFaults>
	i=275;
 8007950:	f240 1313 	movw	r3, #275	; 0x113
 8007954:	607b      	str	r3, [r7, #4]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	b298      	uxth	r0, r3
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	b299      	uxth	r1, r3
 800795e:	4b3c      	ldr	r3, [pc, #240]	; (8007a50 <drawMenuHeader+0x14c>)
 8007960:	4a3c      	ldr	r2, [pc, #240]	; (8007a54 <drawMenuHeader+0x150>)
 8007962:	f7f9 fde3 	bl	800152c <LCD_PutStr>
 8007966:	4603      	mov	r3, r0
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	607b      	str	r3, [r7, #4]
	if(displayAdcValues[Adc.adc0] >3.5){
 8007970:	4b39      	ldr	r3, [pc, #228]	; (8007a58 <drawMenuHeader+0x154>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a39      	ldr	r2, [pc, #228]	; (8007a5c <drawMenuHeader+0x158>)
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	edd3 7a00 	vldr	s15, [r3]
 800797e:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8007982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798a:	dd4a      	ble.n	8007a22 <drawMenuHeader+0x11e>
		switch(bootButtons.bootMode){
 800798c:	4b34      	ldr	r3, [pc, #208]	; (8007a60 <drawMenuHeader+0x15c>)
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	2b05      	cmp	r3, #5
 8007992:	d84e      	bhi.n	8007a32 <drawMenuHeader+0x12e>
 8007994:	a201      	add	r2, pc, #4	; (adr r2, 800799c <drawMenuHeader+0x98>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079b5 	.word	0x080079b5
 80079a0:	080079c7 	.word	0x080079c7
 80079a4:	080079d9 	.word	0x080079d9
 80079a8:	080079eb 	.word	0x080079eb
 80079ac:	08007a0f 	.word	0x08007a0f
 80079b0:	080079fd 	.word	0x080079fd
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	b298      	uxth	r0, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	b299      	uxth	r1, r3
 80079bc:	4b24      	ldr	r3, [pc, #144]	; (8007a50 <drawMenuHeader+0x14c>)
 80079be:	4a29      	ldr	r2, [pc, #164]	; (8007a64 <drawMenuHeader+0x160>)
 80079c0:	f7f9 fdb4 	bl	800152c <LCD_PutStr>
			break;
 80079c4:	e035      	b.n	8007a32 <drawMenuHeader+0x12e>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	b298      	uxth	r0, r3
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	b299      	uxth	r1, r3
 80079ce:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <drawMenuHeader+0x14c>)
 80079d0:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <drawMenuHeader+0x164>)
 80079d2:	f7f9 fdab 	bl	800152c <LCD_PutStr>
			break;
 80079d6:	e02c      	b.n	8007a32 <drawMenuHeader+0x12e>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	b298      	uxth	r0, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	b299      	uxth	r1, r3
 80079e0:	4b1b      	ldr	r3, [pc, #108]	; (8007a50 <drawMenuHeader+0x14c>)
 80079e2:	4a22      	ldr	r2, [pc, #136]	; (8007a6c <drawMenuHeader+0x168>)
 80079e4:	f7f9 fda2 	bl	800152c <LCD_PutStr>
			break;
 80079e8:	e023      	b.n	8007a32 <drawMenuHeader+0x12e>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	b298      	uxth	r0, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	b299      	uxth	r1, r3
 80079f2:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <drawMenuHeader+0x14c>)
 80079f4:	4a1e      	ldr	r2, [pc, #120]	; (8007a70 <drawMenuHeader+0x16c>)
 80079f6:	f7f9 fd99 	bl	800152c <LCD_PutStr>
			break;
 80079fa:	e01a      	b.n	8007a32 <drawMenuHeader+0x12e>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	b298      	uxth	r0, r3
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	b299      	uxth	r1, r3
 8007a04:	4b12      	ldr	r3, [pc, #72]	; (8007a50 <drawMenuHeader+0x14c>)
 8007a06:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <drawMenuHeader+0x170>)
 8007a08:	f7f9 fd90 	bl	800152c <LCD_PutStr>
			break;
 8007a0c:	e011      	b.n	8007a32 <drawMenuHeader+0x12e>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	b298      	uxth	r0, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	b299      	uxth	r1, r3
 8007a16:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <drawMenuHeader+0x14c>)
 8007a18:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <drawMenuHeader+0x174>)
 8007a1a:	f7f9 fd87 	bl	800152c <LCD_PutStr>
			break;
 8007a1e:	bf00      	nop
 8007a20:	e007      	b.n	8007a32 <drawMenuHeader+0x12e>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	b298      	uxth	r0, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	b299      	uxth	r1, r3
 8007a2a:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <drawMenuHeader+0x14c>)
 8007a2c:	4a0d      	ldr	r2, [pc, #52]	; (8007a64 <drawMenuHeader+0x160>)
 8007a2e:	f7f9 fd7d 	bl	800152c <LCD_PutStr>
	}

	i  = 135;
 8007a32:	2387      	movs	r3, #135	; 0x87
 8007a34:	607b      	str	r3, [r7, #4]
	j += 14;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	330e      	adds	r3, #14
 8007a3a:	603b      	str	r3, [r7, #0]


}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20028aa8 	.word	0x20028aa8
 8007a48:	20028aaa 	.word	0x20028aaa
 8007a4c:	20028aac 	.word	0x20028aac
 8007a50:	08017028 	.word	0x08017028
 8007a54:	08016824 	.word	0x08016824
 8007a58:	20000128 	.word	0x20000128
 8007a5c:	20030aa0 	.word	0x20030aa0
 8007a60:	200032ac 	.word	0x200032ac
 8007a64:	0801682c 	.word	0x0801682c
 8007a68:	08016830 	.word	0x08016830
 8007a6c:	08016834 	.word	0x08016834
 8007a70:	0801683c 	.word	0x0801683c
 8007a74:	08016840 	.word	0x08016840
 8007a78:	08016848 	.word	0x08016848

08007a7c <getLatestADC>:

void getLatestADC(){
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
	int i;
	float * adcValuePointer;
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8007a82:	4b13      	ldr	r3, [pc, #76]	; (8007ad0 <getLatestADC+0x54>)
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <getLatestADC+0x54>)
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <getLatestADC+0x54>)
 8007a90:	789b      	ldrb	r3, [r3, #2]
 8007a92:	4013      	ands	r3, r2
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d016      	beq.n	8007ac8 <getLatestADC+0x4c>
		  adcValuePointer = getADCValues();
 8007a9a:	f7fb ff27 	bl	80038ec <getADCValues>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	603b      	str	r3, [r7, #0]
		  for(i=0;i<20;i++){
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	e00c      	b.n	8007ac2 <getLatestADC+0x46>
	  		  displayAdcValues[i]=*adcValuePointer;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	4909      	ldr	r1, [pc, #36]	; (8007ad4 <getLatestADC+0x58>)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	440b      	add	r3, r1
 8007ab4:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	603b      	str	r3, [r7, #0]
		  for(i=0;i<20;i++){
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	607b      	str	r3, [r7, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b13      	cmp	r3, #19
 8007ac6:	ddef      	ble.n	8007aa8 <getLatestADC+0x2c>
		  }
	 }
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20029224 	.word	0x20029224
 8007ad4:	20030aa0 	.word	0x20030aa0

08007ad8 <printFaults>:
//print only the critical faults. Order is VSYS_PMI, ZION, FAULT3-9
int printFaults(int i, int j){
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	int x = i;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60fb      	str	r3, [r7, #12]
	int y = j;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	60bb      	str	r3, [r7, #8]
	x += LCD_PutStr(x, y, "FAULTS:", fnt7x10);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	b298      	uxth	r0, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	b299      	uxth	r1, r3
 8007af2:	4b67      	ldr	r3, [pc, #412]	; (8007c90 <printFaults+0x1b8>)
 8007af4:	4a67      	ldr	r2, [pc, #412]	; (8007c94 <printFaults+0x1bc>)
 8007af6:	f7f9 fd19 	bl	800152c <LCD_PutStr>
 8007afa:	4603      	mov	r3, r0
 8007afc:	461a      	mov	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
	if(errorLED.vsysPMIFault){
 8007b04:	4b64      	ldr	r3, [pc, #400]	; (8007c98 <printFaults+0x1c0>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00d      	beq.n	8007b28 <printFaults+0x50>
		x += LCD_PutStr(x, y, "VSYS", fnt7x10);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	b298      	uxth	r0, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	b299      	uxth	r1, r3
 8007b14:	4b5e      	ldr	r3, [pc, #376]	; (8007c90 <printFaults+0x1b8>)
 8007b16:	4a61      	ldr	r2, [pc, #388]	; (8007c9c <printFaults+0x1c4>)
 8007b18:	f7f9 fd08 	bl	800152c <LCD_PutStr>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461a      	mov	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	e0ae      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.zionFault){
 8007b28:	4b5b      	ldr	r3, [pc, #364]	; (8007c98 <printFaults+0x1c0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00d      	beq.n	8007b4c <printFaults+0x74>
		x += LCD_PutStr(x, y, "ZION", fnt7x10);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	b298      	uxth	r0, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	b299      	uxth	r1, r3
 8007b38:	4b55      	ldr	r3, [pc, #340]	; (8007c90 <printFaults+0x1b8>)
 8007b3a:	4a59      	ldr	r2, [pc, #356]	; (8007ca0 <printFaults+0x1c8>)
 8007b3c:	f7f9 fcf6 	bl	800152c <LCD_PutStr>
 8007b40:	4603      	mov	r3, r0
 8007b42:	461a      	mov	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e09c      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.fault3){
 8007b4c:	4b52      	ldr	r3, [pc, #328]	; (8007c98 <printFaults+0x1c0>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00d      	beq.n	8007b70 <printFaults+0x98>
		x += LCD_PutStr(x, y, "FAULT3", fnt7x10);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	b298      	uxth	r0, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	b299      	uxth	r1, r3
 8007b5c:	4b4c      	ldr	r3, [pc, #304]	; (8007c90 <printFaults+0x1b8>)
 8007b5e:	4a51      	ldr	r2, [pc, #324]	; (8007ca4 <printFaults+0x1cc>)
 8007b60:	f7f9 fce4 	bl	800152c <LCD_PutStr>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	e08a      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.fault4){
 8007b70:	4b49      	ldr	r3, [pc, #292]	; (8007c98 <printFaults+0x1c0>)
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00d      	beq.n	8007b94 <printFaults+0xbc>
		x += LCD_PutStr(x, y, "FAULT4", fnt7x10);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	b298      	uxth	r0, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	b299      	uxth	r1, r3
 8007b80:	4b43      	ldr	r3, [pc, #268]	; (8007c90 <printFaults+0x1b8>)
 8007b82:	4a49      	ldr	r2, [pc, #292]	; (8007ca8 <printFaults+0x1d0>)
 8007b84:	f7f9 fcd2 	bl	800152c <LCD_PutStr>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	e078      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.fault5){
 8007b94:	4b40      	ldr	r3, [pc, #256]	; (8007c98 <printFaults+0x1c0>)
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00d      	beq.n	8007bb8 <printFaults+0xe0>
		x += LCD_PutStr(x, y, "FAULT5", fnt7x10);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	b298      	uxth	r0, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	b299      	uxth	r1, r3
 8007ba4:	4b3a      	ldr	r3, [pc, #232]	; (8007c90 <printFaults+0x1b8>)
 8007ba6:	4a41      	ldr	r2, [pc, #260]	; (8007cac <printFaults+0x1d4>)
 8007ba8:	f7f9 fcc0 	bl	800152c <LCD_PutStr>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	e066      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.fault6){
 8007bb8:	4b37      	ldr	r3, [pc, #220]	; (8007c98 <printFaults+0x1c0>)
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00d      	beq.n	8007bdc <printFaults+0x104>
		x += LCD_PutStr(x, y, "FAULT6", fnt7x10);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	b298      	uxth	r0, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	b299      	uxth	r1, r3
 8007bc8:	4b31      	ldr	r3, [pc, #196]	; (8007c90 <printFaults+0x1b8>)
 8007bca:	4a39      	ldr	r2, [pc, #228]	; (8007cb0 <printFaults+0x1d8>)
 8007bcc:	f7f9 fcae 	bl	800152c <LCD_PutStr>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e054      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.fault7){
 8007bdc:	4b2e      	ldr	r3, [pc, #184]	; (8007c98 <printFaults+0x1c0>)
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00d      	beq.n	8007c00 <printFaults+0x128>
		x += LCD_PutStr(x, y, "FAULT7", fnt7x10);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	b298      	uxth	r0, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	b299      	uxth	r1, r3
 8007bec:	4b28      	ldr	r3, [pc, #160]	; (8007c90 <printFaults+0x1b8>)
 8007bee:	4a31      	ldr	r2, [pc, #196]	; (8007cb4 <printFaults+0x1dc>)
 8007bf0:	f7f9 fc9c 	bl	800152c <LCD_PutStr>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e042      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.fault8){
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <printFaults+0x1c0>)
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00d      	beq.n	8007c24 <printFaults+0x14c>
		x += LCD_PutStr(x, y, "FAULT8", fnt7x10);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	b298      	uxth	r0, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	b299      	uxth	r1, r3
 8007c10:	4b1f      	ldr	r3, [pc, #124]	; (8007c90 <printFaults+0x1b8>)
 8007c12:	4a29      	ldr	r2, [pc, #164]	; (8007cb8 <printFaults+0x1e0>)
 8007c14:	f7f9 fc8a 	bl	800152c <LCD_PutStr>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	e030      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.fault9){
 8007c24:	4b1c      	ldr	r3, [pc, #112]	; (8007c98 <printFaults+0x1c0>)
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00d      	beq.n	8007c48 <printFaults+0x170>
		x += LCD_PutStr(x, y, "FAULT9", fnt7x10);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	b298      	uxth	r0, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	b299      	uxth	r1, r3
 8007c34:	4b16      	ldr	r3, [pc, #88]	; (8007c90 <printFaults+0x1b8>)
 8007c36:	4a21      	ldr	r2, [pc, #132]	; (8007cbc <printFaults+0x1e4>)
 8007c38:	f7f9 fc78 	bl	800152c <LCD_PutStr>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	461a      	mov	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e01e      	b.n	8007c86 <printFaults+0x1ae>
	}
	else if(errorLED.ledDriver){
 8007c48:	4b13      	ldr	r3, [pc, #76]	; (8007c98 <printFaults+0x1c0>)
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <printFaults+0x194>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	b298      	uxth	r0, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	b299      	uxth	r1, r3
 8007c58:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <printFaults+0x1b8>)
 8007c5a:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <printFaults+0x1e8>)
 8007c5c:	f7f9 fc66 	bl	800152c <LCD_PutStr>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	e00c      	b.n	8007c86 <printFaults+0x1ae>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	b298      	uxth	r0, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	b299      	uxth	r1, r3
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <printFaults+0x1b8>)
 8007c76:	4a13      	ldr	r2, [pc, #76]	; (8007cc4 <printFaults+0x1ec>)
 8007c78:	f7f9 fc58 	bl	800152c <LCD_PutStr>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
	}
	return x;
 8007c86:	68fb      	ldr	r3, [r7, #12]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	08017028 	.word	0x08017028
 8007c94:	080168c4 	.word	0x080168c4
 8007c98:	200032d8 	.word	0x200032d8
 8007c9c:	08016ea0 	.word	0x08016ea0
 8007ca0:	08016ea8 	.word	0x08016ea8
 8007ca4:	08016864 	.word	0x08016864
 8007ca8:	0801686c 	.word	0x0801686c
 8007cac:	08016874 	.word	0x08016874
 8007cb0:	0801687c 	.word	0x0801687c
 8007cb4:	08016884 	.word	0x08016884
 8007cb8:	0801688c 	.word	0x0801688c
 8007cbc:	08016894 	.word	0x08016894
 8007cc0:	08016eb0 	.word	0x08016eb0
 8007cc4:	08016eb8 	.word	0x08016eb8

08007cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <HAL_MspInit+0x4c>)
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	4a10      	ldr	r2, [pc, #64]	; (8007d14 <HAL_MspInit+0x4c>)
 8007cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8007cda:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <HAL_MspInit+0x4c>)
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce2:	607b      	str	r3, [r7, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <HAL_MspInit+0x4c>)
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cea:	4a0a      	ldr	r2, [pc, #40]	; (8007d14 <HAL_MspInit+0x4c>)
 8007cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8007cf2:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <HAL_MspInit+0x4c>)
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007cfe:	2200      	movs	r2, #0
 8007d00:	210f      	movs	r1, #15
 8007d02:	f06f 0001 	mvn.w	r0, #1
 8007d06:	f002 f94f 	bl	8009fa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d0a:	bf00      	nop
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	40023800 	.word	0x40023800

08007d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b094      	sub	sp, #80	; 0x50
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	605a      	str	r2, [r3, #4]
 8007d2a:	609a      	str	r2, [r3, #8]
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a91      	ldr	r2, [pc, #580]	; (8007f7c <HAL_ADC_MspInit+0x264>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	f040 808c 	bne.w	8007e54 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d3c:	4b90      	ldr	r3, [pc, #576]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d40:	4a8f      	ldr	r2, [pc, #572]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d46:	6453      	str	r3, [r2, #68]	; 0x44
 8007d48:	4b8d      	ldr	r3, [pc, #564]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d54:	4b8a      	ldr	r3, [pc, #552]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	4a89      	ldr	r2, [pc, #548]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d5a:	f043 0304 	orr.w	r3, r3, #4
 8007d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8007d60:	4b87      	ldr	r3, [pc, #540]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d6c:	4b84      	ldr	r3, [pc, #528]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d70:	4a83      	ldr	r2, [pc, #524]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	6313      	str	r3, [r2, #48]	; 0x30
 8007d78:	4b81      	ldr	r3, [pc, #516]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	633b      	str	r3, [r7, #48]	; 0x30
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d84:	4b7e      	ldr	r3, [pc, #504]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	4a7d      	ldr	r2, [pc, #500]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d8a:	f043 0302 	orr.w	r3, r3, #2
 8007d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8007d90:	4b7b      	ldr	r3, [pc, #492]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8007d9c:	230f      	movs	r3, #15
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007da0:	2303      	movs	r3, #3
 8007da2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007da8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007dac:	4619      	mov	r1, r3
 8007dae:	4875      	ldr	r0, [pc, #468]	; (8007f84 <HAL_ADC_MspInit+0x26c>)
 8007db0:	f002 fd2c 	bl	800a80c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8007db4:	23f8      	movs	r3, #248	; 0xf8
 8007db6:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007db8:	2303      	movs	r3, #3
 8007dba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4870      	ldr	r0, [pc, #448]	; (8007f88 <HAL_ADC_MspInit+0x270>)
 8007dc8:	f002 fd20 	bl	800a80c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ddc:	4619      	mov	r1, r3
 8007dde:	486b      	ldr	r0, [pc, #428]	; (8007f8c <HAL_ADC_MspInit+0x274>)
 8007de0:	f002 fd14 	bl	800a80c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007de4:	4b6a      	ldr	r3, [pc, #424]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007de6:	4a6b      	ldr	r2, [pc, #428]	; (8007f94 <HAL_ADC_MspInit+0x27c>)
 8007de8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007dea:	4b69      	ldr	r3, [pc, #420]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007df0:	4b67      	ldr	r3, [pc, #412]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007df6:	4b66      	ldr	r3, [pc, #408]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007dfc:	4b64      	ldr	r3, [pc, #400]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007e04:	4b62      	ldr	r3, [pc, #392]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007e0c:	4b60      	ldr	r3, [pc, #384]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8007e14:	4b5e      	ldr	r3, [pc, #376]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007e1a:	4b5d      	ldr	r3, [pc, #372]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e20:	4b5b      	ldr	r3, [pc, #364]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007e26:	485a      	ldr	r0, [pc, #360]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007e28:	f002 f8e8 	bl	8009ffc <HAL_DMA_Init>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8007e32:	f7fd f827 	bl	8004e84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a55      	ldr	r2, [pc, #340]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007e3c:	4a54      	ldr	r2, [pc, #336]	; (8007f90 <HAL_ADC_MspInit+0x278>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2105      	movs	r1, #5
 8007e46:	2012      	movs	r0, #18
 8007e48:	f002 f8ae 	bl	8009fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007e4c:	2012      	movs	r0, #18
 8007e4e:	f002 f8c7 	bl	8009fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8007e52:	e13a      	b.n	80080ca <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a4f      	ldr	r2, [pc, #316]	; (8007f98 <HAL_ADC_MspInit+0x280>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	f040 80a2 	bne.w	8007fa4 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007e60:	4b47      	ldr	r3, [pc, #284]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e64:	4a46      	ldr	r2, [pc, #280]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8007e6c:	4b44      	ldr	r3, [pc, #272]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e78:	4b41      	ldr	r3, [pc, #260]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	4a40      	ldr	r2, [pc, #256]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e7e:	f043 0304 	orr.w	r3, r3, #4
 8007e82:	6313      	str	r3, [r2, #48]	; 0x30
 8007e84:	4b3e      	ldr	r3, [pc, #248]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e90:	4b3b      	ldr	r3, [pc, #236]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e94:	4a3a      	ldr	r2, [pc, #232]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8007e9c:	4b38      	ldr	r3, [pc, #224]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	623b      	str	r3, [r7, #32]
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ea8:	4b35      	ldr	r3, [pc, #212]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eac:	4a34      	ldr	r2, [pc, #208]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007eae:	f043 0302 	orr.w	r3, r3, #2
 8007eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8007eb4:	4b32      	ldr	r3, [pc, #200]	; (8007f80 <HAL_ADC_MspInit+0x268>)
 8007eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8007ec0:	233f      	movs	r3, #63	; 0x3f
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ecc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	482c      	ldr	r0, [pc, #176]	; (8007f84 <HAL_ADC_MspInit+0x26c>)
 8007ed4:	f002 fc9a 	bl	800a80c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8007ed8:	237b      	movs	r3, #123	; 0x7b
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007edc:	2303      	movs	r3, #3
 8007ede:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ee4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4827      	ldr	r0, [pc, #156]	; (8007f88 <HAL_ADC_MspInit+0x270>)
 8007eec:	f002 fc8e 	bl	800a80c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8007efc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f00:	4619      	mov	r1, r3
 8007f02:	4822      	ldr	r0, [pc, #136]	; (8007f8c <HAL_ADC_MspInit+0x274>)
 8007f04:	f002 fc82 	bl	800a80c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8007f08:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f0a:	4a25      	ldr	r2, [pc, #148]	; (8007fa0 <HAL_ADC_MspInit+0x288>)
 8007f0c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007f0e:	4b23      	ldr	r3, [pc, #140]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f14:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f16:	4b21      	ldr	r3, [pc, #132]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f1c:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007f22:	4b1e      	ldr	r3, [pc, #120]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f28:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f30:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007f32:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f38:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8007f3a:	4b18      	ldr	r3, [pc, #96]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8007f40:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007f4c:	4813      	ldr	r0, [pc, #76]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f4e:	f002 f855 	bl	8009ffc <HAL_DMA_Init>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8007f58:	f7fc ff94 	bl	8004e84 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a0f      	ldr	r2, [pc, #60]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
 8007f62:	4a0e      	ldr	r2, [pc, #56]	; (8007f9c <HAL_ADC_MspInit+0x284>)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2105      	movs	r1, #5
 8007f6c:	2012      	movs	r0, #18
 8007f6e:	f002 f81b 	bl	8009fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007f72:	2012      	movs	r0, #18
 8007f74:	f002 f834 	bl	8009fe0 <HAL_NVIC_EnableIRQ>
}
 8007f78:	e0a7      	b.n	80080ca <HAL_ADC_MspInit+0x3b2>
 8007f7a:	bf00      	nop
 8007f7c:	40012000 	.word	0x40012000
 8007f80:	40023800 	.word	0x40023800
 8007f84:	40020800 	.word	0x40020800
 8007f88:	40020000 	.word	0x40020000
 8007f8c:	40020400 	.word	0x40020400
 8007f90:	2002ba90 	.word	0x2002ba90
 8007f94:	40026410 	.word	0x40026410
 8007f98:	40012100 	.word	0x40012100
 8007f9c:	200309d8 	.word	0x200309d8
 8007fa0:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a4a      	ldr	r2, [pc, #296]	; (80080d4 <HAL_ADC_MspInit+0x3bc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	f040 808d 	bne.w	80080ca <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007fb0:	4b49      	ldr	r3, [pc, #292]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb4:	4a48      	ldr	r2, [pc, #288]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fba:	6453      	str	r3, [r2, #68]	; 0x44
 8007fbc:	4b46      	ldr	r3, [pc, #280]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007fc8:	4b43      	ldr	r3, [pc, #268]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	4a42      	ldr	r2, [pc, #264]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fce:	f043 0320 	orr.w	r3, r3, #32
 8007fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8007fd4:	4b40      	ldr	r3, [pc, #256]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fe0:	4b3d      	ldr	r3, [pc, #244]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	4a3c      	ldr	r2, [pc, #240]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fe6:	f043 0304 	orr.w	r3, r3, #4
 8007fea:	6313      	str	r3, [r2, #48]	; 0x30
 8007fec:	4b3a      	ldr	r3, [pc, #232]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	613b      	str	r3, [r7, #16]
 8007ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ff8:	4b37      	ldr	r3, [pc, #220]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffc:	4a36      	ldr	r2, [pc, #216]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	6313      	str	r3, [r2, #48]	; 0x30
 8008004:	4b34      	ldr	r3, [pc, #208]	; (80080d8 <HAL_ADC_MspInit+0x3c0>)
 8008006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8008010:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8008014:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008016:	2303      	movs	r3, #3
 8008018:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800801a:	2300      	movs	r3, #0
 800801c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800801e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008022:	4619      	mov	r1, r3
 8008024:	482d      	ldr	r0, [pc, #180]	; (80080dc <HAL_ADC_MspInit+0x3c4>)
 8008026:	f002 fbf1 	bl	800a80c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 800802a:	230f      	movs	r3, #15
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800802e:	2303      	movs	r3, #3
 8008030:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008032:	2300      	movs	r3, #0
 8008034:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008036:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800803a:	4619      	mov	r1, r3
 800803c:	4828      	ldr	r0, [pc, #160]	; (80080e0 <HAL_ADC_MspInit+0x3c8>)
 800803e:	f002 fbe5 	bl	800a80c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8008042:	230c      	movs	r3, #12
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008046:	2303      	movs	r3, #3
 8008048:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804a:	2300      	movs	r3, #0
 800804c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800804e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008052:	4619      	mov	r1, r3
 8008054:	4823      	ldr	r0, [pc, #140]	; (80080e4 <HAL_ADC_MspInit+0x3cc>)
 8008056:	f002 fbd9 	bl	800a80c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800805a:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 800805c:	4a23      	ldr	r2, [pc, #140]	; (80080ec <HAL_ADC_MspInit+0x3d4>)
 800805e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8008060:	4b21      	ldr	r3, [pc, #132]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 8008062:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008066:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008068:	4b1f      	ldr	r3, [pc, #124]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 800806a:	2200      	movs	r2, #0
 800806c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800806e:	4b1e      	ldr	r3, [pc, #120]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 8008070:	2200      	movs	r2, #0
 8008072:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8008074:	4b1c      	ldr	r3, [pc, #112]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 8008076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800807a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800807c:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 800807e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008082:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008084:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 8008086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800808a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800808c:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 800808e:	2200      	movs	r2, #0
 8008090:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 8008094:	2200      	movs	r2, #0
 8008096:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008098:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 800809a:	2200      	movs	r2, #0
 800809c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800809e:	4812      	ldr	r0, [pc, #72]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 80080a0:	f001 ffac 	bl	8009ffc <HAL_DMA_Init>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <HAL_ADC_MspInit+0x396>
      Error_Handler();
 80080aa:	f7fc feeb 	bl	8004e84 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a0d      	ldr	r2, [pc, #52]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38
 80080b4:	4a0c      	ldr	r2, [pc, #48]	; (80080e8 <HAL_ADC_MspInit+0x3d0>)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80080ba:	2200      	movs	r2, #0
 80080bc:	2105      	movs	r1, #5
 80080be:	2012      	movs	r0, #18
 80080c0:	f001 ff72 	bl	8009fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80080c4:	2012      	movs	r0, #18
 80080c6:	f001 ff8b 	bl	8009fe0 <HAL_NVIC_EnableIRQ>
}
 80080ca:	bf00      	nop
 80080cc:	3750      	adds	r7, #80	; 0x50
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40012200 	.word	0x40012200
 80080d8:	40023800 	.word	0x40023800
 80080dc:	40021400 	.word	0x40021400
 80080e0:	40020800 	.word	0x40020800
 80080e4:	40020000 	.word	0x40020000
 80080e8:	200291c4 	.word	0x200291c4
 80080ec:	40026428 	.word	0x40026428

080080f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b090      	sub	sp, #64	; 0x40
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	605a      	str	r2, [r3, #4]
 8008102:	609a      	str	r2, [r3, #8]
 8008104:	60da      	str	r2, [r3, #12]
 8008106:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a6c      	ldr	r2, [pc, #432]	; (80082c0 <HAL_I2C_MspInit+0x1d0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d129      	bne.n	8008166 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008112:	4b6c      	ldr	r3, [pc, #432]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	4a6b      	ldr	r2, [pc, #428]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008118:	f043 0302 	orr.w	r3, r3, #2
 800811c:	6313      	str	r3, [r2, #48]	; 0x30
 800811e:	4b69      	ldr	r3, [pc, #420]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	62bb      	str	r3, [r7, #40]	; 0x28
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 800812a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008130:	2312      	movs	r3, #18
 8008132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008134:	2301      	movs	r3, #1
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008138:	2303      	movs	r3, #3
 800813a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800813c:	2304      	movs	r3, #4
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008144:	4619      	mov	r1, r3
 8008146:	4860      	ldr	r0, [pc, #384]	; (80082c8 <HAL_I2C_MspInit+0x1d8>)
 8008148:	f002 fb60 	bl	800a80c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800814c:	4b5d      	ldr	r3, [pc, #372]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 800814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008150:	4a5c      	ldr	r2, [pc, #368]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008156:	6413      	str	r3, [r2, #64]	; 0x40
 8008158:	4b5a      	ldr	r3, [pc, #360]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8008164:	e0a7      	b.n	80082b6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a58      	ldr	r2, [pc, #352]	; (80082cc <HAL_I2C_MspInit+0x1dc>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d128      	bne.n	80081c2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008170:	4b54      	ldr	r3, [pc, #336]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	4a53      	ldr	r2, [pc, #332]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008176:	f043 0320 	orr.w	r3, r3, #32
 800817a:	6313      	str	r3, [r2, #48]	; 0x30
 800817c:	4b51      	ldr	r3, [pc, #324]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 800817e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	623b      	str	r3, [r7, #32]
 8008186:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8008188:	2303      	movs	r3, #3
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800818c:	2312      	movs	r3, #18
 800818e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008190:	2301      	movs	r3, #1
 8008192:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008194:	2303      	movs	r3, #3
 8008196:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008198:	2304      	movs	r3, #4
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800819c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081a0:	4619      	mov	r1, r3
 80081a2:	484b      	ldr	r0, [pc, #300]	; (80082d0 <HAL_I2C_MspInit+0x1e0>)
 80081a4:	f002 fb32 	bl	800a80c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80081a8:	4b46      	ldr	r3, [pc, #280]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	4a45      	ldr	r2, [pc, #276]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081b2:	6413      	str	r3, [r2, #64]	; 0x40
 80081b4:	4b43      	ldr	r3, [pc, #268]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	69fb      	ldr	r3, [r7, #28]
}
 80081c0:	e079      	b.n	80082b6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a43      	ldr	r2, [pc, #268]	; (80082d4 <HAL_I2C_MspInit+0x1e4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d146      	bne.n	800825a <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081cc:	4b3d      	ldr	r3, [pc, #244]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d0:	4a3c      	ldr	r2, [pc, #240]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081d2:	f043 0304 	orr.w	r3, r3, #4
 80081d6:	6313      	str	r3, [r2, #48]	; 0x30
 80081d8:	4b3a      	ldr	r3, [pc, #232]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	61bb      	str	r3, [r7, #24]
 80081e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081e4:	4b37      	ldr	r3, [pc, #220]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e8:	4a36      	ldr	r2, [pc, #216]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	6313      	str	r3, [r2, #48]	; 0x30
 80081f0:	4b34      	ldr	r3, [pc, #208]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80081f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 80081fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008202:	2312      	movs	r3, #18
 8008204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008206:	2301      	movs	r3, #1
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800820a:	2303      	movs	r3, #3
 800820c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800820e:	2304      	movs	r3, #4
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8008212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008216:	4619      	mov	r1, r3
 8008218:	482f      	ldr	r0, [pc, #188]	; (80082d8 <HAL_I2C_MspInit+0x1e8>)
 800821a:	f002 faf7 	bl	800a80c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 800821e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008224:	2312      	movs	r3, #18
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008228:	2301      	movs	r3, #1
 800822a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800822c:	2303      	movs	r3, #3
 800822e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008230:	2304      	movs	r3, #4
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8008234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008238:	4619      	mov	r1, r3
 800823a:	4828      	ldr	r0, [pc, #160]	; (80082dc <HAL_I2C_MspInit+0x1ec>)
 800823c:	f002 fae6 	bl	800a80c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008240:	4b20      	ldr	r3, [pc, #128]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	4a1f      	ldr	r2, [pc, #124]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800824a:	6413      	str	r3, [r2, #64]	; 0x40
 800824c:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008254:	613b      	str	r3, [r7, #16]
 8008256:	693b      	ldr	r3, [r7, #16]
}
 8008258:	e02d      	b.n	80082b6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a20      	ldr	r2, [pc, #128]	; (80082e0 <HAL_I2C_MspInit+0x1f0>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d128      	bne.n	80082b6 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008264:	4b17      	ldr	r3, [pc, #92]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	4a16      	ldr	r2, [pc, #88]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 800826a:	f043 0320 	orr.w	r3, r3, #32
 800826e:	6313      	str	r3, [r2, #48]	; 0x30
 8008270:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 8008272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 800827c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008282:	2312      	movs	r3, #18
 8008284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008286:	2301      	movs	r3, #1
 8008288:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800828a:	2303      	movs	r3, #3
 800828c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800828e:	2304      	movs	r3, #4
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008296:	4619      	mov	r1, r3
 8008298:	480d      	ldr	r0, [pc, #52]	; (80082d0 <HAL_I2C_MspInit+0x1e0>)
 800829a:	f002 fab7 	bl	800a80c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	4a08      	ldr	r2, [pc, #32]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80082a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082a8:	6413      	str	r3, [r2, #64]	; 0x40
 80082aa:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <HAL_I2C_MspInit+0x1d4>)
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082b2:	60bb      	str	r3, [r7, #8]
 80082b4:	68bb      	ldr	r3, [r7, #8]
}
 80082b6:	bf00      	nop
 80082b8:	3740      	adds	r7, #64	; 0x40
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	40005400 	.word	0x40005400
 80082c4:	40023800 	.word	0x40023800
 80082c8:	40020400 	.word	0x40020400
 80082cc:	40005800 	.word	0x40005800
 80082d0:	40021400 	.word	0x40021400
 80082d4:	40005c00 	.word	0x40005c00
 80082d8:	40020800 	.word	0x40020800
 80082dc:	40020000 	.word	0x40020000
 80082e0:	40006000 	.word	0x40006000

080082e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a07      	ldr	r2, [pc, #28]	; (8008310 <HAL_RTC_MspInit+0x2c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d105      	bne.n	8008302 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80082f6:	4b07      	ldr	r3, [pc, #28]	; (8008314 <HAL_RTC_MspInit+0x30>)
 80082f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fa:	4a06      	ldr	r2, [pc, #24]	; (8008314 <HAL_RTC_MspInit+0x30>)
 80082fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008300:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40002800 	.word	0x40002800
 8008314:	40023800 	.word	0x40023800

08008318 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08c      	sub	sp, #48	; 0x30
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008320:	f107 031c 	add.w	r3, r7, #28
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	609a      	str	r2, [r3, #8]
 800832c:	60da      	str	r2, [r3, #12]
 800832e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a40      	ldr	r2, [pc, #256]	; (8008438 <HAL_SPI_MspInit+0x120>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d130      	bne.n	800839c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800833a:	4b40      	ldr	r3, [pc, #256]	; (800843c <HAL_SPI_MspInit+0x124>)
 800833c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833e:	4a3f      	ldr	r2, [pc, #252]	; (800843c <HAL_SPI_MspInit+0x124>)
 8008340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008344:	6453      	str	r3, [r2, #68]	; 0x44
 8008346:	4b3d      	ldr	r3, [pc, #244]	; (800843c <HAL_SPI_MspInit+0x124>)
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800834e:	61bb      	str	r3, [r7, #24]
 8008350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008352:	4b3a      	ldr	r3, [pc, #232]	; (800843c <HAL_SPI_MspInit+0x124>)
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	4a39      	ldr	r2, [pc, #228]	; (800843c <HAL_SPI_MspInit+0x124>)
 8008358:	f043 0310 	orr.w	r3, r3, #16
 800835c:	6313      	str	r3, [r2, #48]	; 0x30
 800835e:	4b37      	ldr	r3, [pc, #220]	; (800843c <HAL_SPI_MspInit+0x124>)
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	f003 0310 	and.w	r3, r3, #16
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800836a:	2364      	movs	r3, #100	; 0x64
 800836c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836e:	2302      	movs	r3, #2
 8008370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008372:	2300      	movs	r3, #0
 8008374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008376:	2303      	movs	r3, #3
 8008378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800837a:	2305      	movs	r3, #5
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800837e:	f107 031c 	add.w	r3, r7, #28
 8008382:	4619      	mov	r1, r3
 8008384:	482e      	ldr	r0, [pc, #184]	; (8008440 <HAL_SPI_MspInit+0x128>)
 8008386:	f002 fa41 	bl	800a80c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800838a:	2200      	movs	r2, #0
 800838c:	2105      	movs	r1, #5
 800838e:	2054      	movs	r0, #84	; 0x54
 8008390:	f001 fe0a 	bl	8009fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8008394:	2054      	movs	r0, #84	; 0x54
 8008396:	f001 fe23 	bl	8009fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800839a:	e049      	b.n	8008430 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a28      	ldr	r2, [pc, #160]	; (8008444 <HAL_SPI_MspInit+0x12c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d144      	bne.n	8008430 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80083a6:	4b25      	ldr	r3, [pc, #148]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	4a24      	ldr	r2, [pc, #144]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083b0:	6453      	str	r3, [r2, #68]	; 0x44
 80083b2:	4b22      	ldr	r3, [pc, #136]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80083be:	4b1f      	ldr	r3, [pc, #124]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	4a1e      	ldr	r2, [pc, #120]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c8:	6313      	str	r3, [r2, #48]	; 0x30
 80083ca:	4b1c      	ldr	r3, [pc, #112]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80083d6:	4b19      	ldr	r3, [pc, #100]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083da:	4a18      	ldr	r2, [pc, #96]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083dc:	f043 0320 	orr.w	r3, r3, #32
 80083e0:	6313      	str	r3, [r2, #48]	; 0x30
 80083e2:	4b16      	ldr	r3, [pc, #88]	; (800843c <HAL_SPI_MspInit+0x124>)
 80083e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	60bb      	str	r3, [r7, #8]
 80083ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 80083ee:	23e0      	movs	r3, #224	; 0xe0
 80083f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083f2:	2302      	movs	r3, #2
 80083f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083fa:	2303      	movs	r3, #3
 80083fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80083fe:	2305      	movs	r3, #5
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008402:	f107 031c 	add.w	r3, r7, #28
 8008406:	4619      	mov	r1, r3
 8008408:	480f      	ldr	r0, [pc, #60]	; (8008448 <HAL_SPI_MspInit+0x130>)
 800840a:	f002 f9ff 	bl	800a80c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 800840e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008414:	2302      	movs	r3, #2
 8008416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008418:	2300      	movs	r3, #0
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800841c:	2303      	movs	r3, #3
 800841e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008420:	2305      	movs	r3, #5
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8008424:	f107 031c 	add.w	r3, r7, #28
 8008428:	4619      	mov	r1, r3
 800842a:	4808      	ldr	r0, [pc, #32]	; (800844c <HAL_SPI_MspInit+0x134>)
 800842c:	f002 f9ee 	bl	800a80c <HAL_GPIO_Init>
}
 8008430:	bf00      	nop
 8008432:	3730      	adds	r7, #48	; 0x30
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40013400 	.word	0x40013400
 800843c:	40023800 	.word	0x40023800
 8008440:	40021000 	.word	0x40021000
 8008444:	40015000 	.word	0x40015000
 8008448:	40021c00 	.word	0x40021c00
 800844c:	40021400 	.word	0x40021400

08008450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <HAL_TIM_Base_MspInit+0x5c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d10c      	bne.n	800847c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008462:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <HAL_TIM_Base_MspInit+0x60>)
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	4a12      	ldr	r2, [pc, #72]	; (80084b0 <HAL_TIM_Base_MspInit+0x60>)
 8008468:	f043 0304 	orr.w	r3, r3, #4
 800846c:	6413      	str	r3, [r2, #64]	; 0x40
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <HAL_TIM_Base_MspInit+0x60>)
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800847a:	e010      	b.n	800849e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0c      	ldr	r2, [pc, #48]	; (80084b4 <HAL_TIM_Base_MspInit+0x64>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d10b      	bne.n	800849e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008486:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <HAL_TIM_Base_MspInit+0x60>)
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <HAL_TIM_Base_MspInit+0x60>)
 800848c:	f043 0308 	orr.w	r3, r3, #8
 8008490:	6413      	str	r3, [r2, #64]	; 0x40
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <HAL_TIM_Base_MspInit+0x60>)
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	60bb      	str	r3, [r7, #8]
 800849c:	68bb      	ldr	r3, [r7, #8]
}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40000800 	.word	0x40000800
 80084b0:	40023800 	.word	0x40023800
 80084b4:	40000c00 	.word	0x40000c00

080084b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08a      	sub	sp, #40	; 0x28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	609a      	str	r2, [r3, #8]
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a22      	ldr	r2, [pc, #136]	; (8008560 <HAL_TIM_MspPostInit+0xa8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d11c      	bne.n	8008514 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084da:	4b22      	ldr	r3, [pc, #136]	; (8008564 <HAL_TIM_MspPostInit+0xac>)
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	4a21      	ldr	r2, [pc, #132]	; (8008564 <HAL_TIM_MspPostInit+0xac>)
 80084e0:	f043 0302 	orr.w	r3, r3, #2
 80084e4:	6313      	str	r3, [r2, #48]	; 0x30
 80084e6:	4b1f      	ldr	r3, [pc, #124]	; (8008564 <HAL_TIM_MspPostInit+0xac>)
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084f6:	2302      	movs	r3, #2
 80084f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084fe:	2300      	movs	r3, #0
 8008500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008502:	2302      	movs	r3, #2
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8008506:	f107 0314 	add.w	r3, r7, #20
 800850a:	4619      	mov	r1, r3
 800850c:	4816      	ldr	r0, [pc, #88]	; (8008568 <HAL_TIM_MspPostInit+0xb0>)
 800850e:	f002 f97d 	bl	800a80c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008512:	e021      	b.n	8008558 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a14      	ldr	r2, [pc, #80]	; (800856c <HAL_TIM_MspPostInit+0xb4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d11c      	bne.n	8008558 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800851e:	4b11      	ldr	r3, [pc, #68]	; (8008564 <HAL_TIM_MspPostInit+0xac>)
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	4a10      	ldr	r2, [pc, #64]	; (8008564 <HAL_TIM_MspPostInit+0xac>)
 8008524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008528:	6313      	str	r3, [r2, #48]	; 0x30
 800852a:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <HAL_TIM_MspPostInit+0xac>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8008536:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800853a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800853c:	2302      	movs	r3, #2
 800853e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008540:	2300      	movs	r3, #0
 8008542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008544:	2300      	movs	r3, #0
 8008546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008548:	2302      	movs	r3, #2
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800854c:	f107 0314 	add.w	r3, r7, #20
 8008550:	4619      	mov	r1, r3
 8008552:	4807      	ldr	r0, [pc, #28]	; (8008570 <HAL_TIM_MspPostInit+0xb8>)
 8008554:	f002 f95a 	bl	800a80c <HAL_GPIO_Init>
}
 8008558:	bf00      	nop
 800855a:	3728      	adds	r7, #40	; 0x28
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	40000800 	.word	0x40000800
 8008564:	40023800 	.word	0x40023800
 8008568:	40020400 	.word	0x40020400
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40021c00 	.word	0x40021c00

08008574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08e      	sub	sp, #56	; 0x38
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800857c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	605a      	str	r2, [r3, #4]
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	60da      	str	r2, [r3, #12]
 800858a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a6c      	ldr	r2, [pc, #432]	; (8008744 <HAL_UART_MspInit+0x1d0>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d129      	bne.n	80085ea <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008596:	4b6c      	ldr	r3, [pc, #432]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	4a6b      	ldr	r2, [pc, #428]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 800859c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085a0:	6413      	str	r3, [r2, #64]	; 0x40
 80085a2:	4b69      	ldr	r3, [pc, #420]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085aa:	623b      	str	r3, [r7, #32]
 80085ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085ae:	4b66      	ldr	r3, [pc, #408]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	4a65      	ldr	r2, [pc, #404]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80085b4:	f043 0304 	orr.w	r3, r3, #4
 80085b8:	6313      	str	r3, [r2, #48]	; 0x30
 80085ba:	4b63      	ldr	r3, [pc, #396]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	f003 0304 	and.w	r3, r3, #4
 80085c2:	61fb      	str	r3, [r7, #28]
 80085c4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 80085c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085cc:	2302      	movs	r3, #2
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085d4:	2303      	movs	r3, #3
 80085d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80085d8:	2308      	movs	r3, #8
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085e0:	4619      	mov	r1, r3
 80085e2:	485a      	ldr	r0, [pc, #360]	; (800874c <HAL_UART_MspInit+0x1d8>)
 80085e4:	f002 f912 	bl	800a80c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80085e8:	e0a7      	b.n	800873a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a58      	ldr	r2, [pc, #352]	; (8008750 <HAL_UART_MspInit+0x1dc>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d174      	bne.n	80086de <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 80085f4:	4b54      	ldr	r3, [pc, #336]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	4a53      	ldr	r2, [pc, #332]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80085fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085fe:	6413      	str	r3, [r2, #64]	; 0x40
 8008600:	4b51      	ldr	r3, [pc, #324]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008608:	61bb      	str	r3, [r7, #24]
 800860a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800860c:	4b4e      	ldr	r3, [pc, #312]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 800860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008610:	4a4d      	ldr	r2, [pc, #308]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 8008612:	f043 0304 	orr.w	r3, r3, #4
 8008616:	6313      	str	r3, [r2, #48]	; 0x30
 8008618:	4b4b      	ldr	r3, [pc, #300]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 800861a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008624:	4b48      	ldr	r3, [pc, #288]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 8008626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008628:	4a47      	ldr	r2, [pc, #284]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 800862a:	f043 0308 	orr.w	r3, r3, #8
 800862e:	6313      	str	r3, [r2, #48]	; 0x30
 8008630:	4b45      	ldr	r3, [pc, #276]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 8008632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008634:	f003 0308 	and.w	r3, r3, #8
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 800863c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008642:	2302      	movs	r3, #2
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008646:	2300      	movs	r3, #0
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800864a:	2303      	movs	r3, #3
 800864c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800864e:	2308      	movs	r3, #8
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8008652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008656:	4619      	mov	r1, r3
 8008658:	483c      	ldr	r0, [pc, #240]	; (800874c <HAL_UART_MspInit+0x1d8>)
 800865a:	f002 f8d7 	bl	800a80c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 800865e:	2304      	movs	r3, #4
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008662:	2302      	movs	r3, #2
 8008664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008666:	2300      	movs	r3, #0
 8008668:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800866a:	2303      	movs	r3, #3
 800866c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800866e:	2308      	movs	r3, #8
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8008672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008676:	4619      	mov	r1, r3
 8008678:	4836      	ldr	r0, [pc, #216]	; (8008754 <HAL_UART_MspInit+0x1e0>)
 800867a:	f002 f8c7 	bl	800a80c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800867e:	4b36      	ldr	r3, [pc, #216]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 8008680:	4a36      	ldr	r2, [pc, #216]	; (800875c <HAL_UART_MspInit+0x1e8>)
 8008682:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8008684:	4b34      	ldr	r3, [pc, #208]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 8008686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800868a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800868c:	4b32      	ldr	r3, [pc, #200]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 800868e:	2200      	movs	r2, #0
 8008690:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008692:	4b31      	ldr	r3, [pc, #196]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 8008694:	2200      	movs	r2, #0
 8008696:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008698:	4b2f      	ldr	r3, [pc, #188]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 800869a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800869e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80086a0:	4b2d      	ldr	r3, [pc, #180]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80086a6:	4b2c      	ldr	r3, [pc, #176]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80086ac:	4b2a      	ldr	r3, [pc, #168]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 80086ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086b2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80086b4:	4b28      	ldr	r3, [pc, #160]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80086ba:	4b27      	ldr	r3, [pc, #156]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 80086bc:	2200      	movs	r2, #0
 80086be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80086c0:	4825      	ldr	r0, [pc, #148]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 80086c2:	f001 fc9b 	bl	8009ffc <HAL_DMA_Init>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80086cc:	f7fc fbda 	bl	8004e84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a21      	ldr	r2, [pc, #132]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 80086d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80086d6:	4a20      	ldr	r2, [pc, #128]	; (8008758 <HAL_UART_MspInit+0x1e4>)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80086dc:	e02d      	b.n	800873a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a1f      	ldr	r2, [pc, #124]	; (8008760 <HAL_UART_MspInit+0x1ec>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d128      	bne.n	800873a <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 80086e8:	4b17      	ldr	r3, [pc, #92]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	4a16      	ldr	r2, [pc, #88]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80086ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f2:	6413      	str	r3, [r2, #64]	; 0x40
 80086f4:	4b14      	ldr	r3, [pc, #80]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008700:	4b11      	ldr	r3, [pc, #68]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	4a10      	ldr	r2, [pc, #64]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 8008706:	f043 0310 	orr.w	r3, r3, #16
 800870a:	6313      	str	r3, [r2, #48]	; 0x30
 800870c:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <HAL_UART_MspInit+0x1d4>)
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	60bb      	str	r3, [r7, #8]
 8008716:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8008718:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800871e:	2302      	movs	r3, #2
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008722:	2300      	movs	r3, #0
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008726:	2303      	movs	r3, #3
 8008728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800872a:	2308      	movs	r3, #8
 800872c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800872e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008732:	4619      	mov	r1, r3
 8008734:	480b      	ldr	r0, [pc, #44]	; (8008764 <HAL_UART_MspInit+0x1f0>)
 8008736:	f002 f869 	bl	800a80c <HAL_GPIO_Init>
}
 800873a:	bf00      	nop
 800873c:	3738      	adds	r7, #56	; 0x38
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40004c00 	.word	0x40004c00
 8008748:	40023800 	.word	0x40023800
 800874c:	40020800 	.word	0x40020800
 8008750:	40005000 	.word	0x40005000
 8008754:	40020c00 	.word	0x40020c00
 8008758:	20030a38 	.word	0x20030a38
 800875c:	40026010 	.word	0x40026010
 8008760:	40007800 	.word	0x40007800
 8008764:	40021000 	.word	0x40021000

08008768 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	; 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008770:	f107 0314 	add.w	r3, r7, #20
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	609a      	str	r2, [r3, #8]
 800877c:	60da      	str	r2, [r3, #12]
 800877e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008788:	d134      	bne.n	80087f4 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800878a:	4b1c      	ldr	r3, [pc, #112]	; (80087fc <HAL_PCD_MspInit+0x94>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <HAL_PCD_MspInit+0x94>)
 8008790:	f043 0301 	orr.w	r3, r3, #1
 8008794:	6313      	str	r3, [r2, #48]	; 0x30
 8008796:	4b19      	ldr	r3, [pc, #100]	; (80087fc <HAL_PCD_MspInit+0x94>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	613b      	str	r3, [r7, #16]
 80087a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80087a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80087a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a8:	2302      	movs	r3, #2
 80087aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087b0:	2303      	movs	r3, #3
 80087b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087b4:	230a      	movs	r3, #10
 80087b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087b8:	f107 0314 	add.w	r3, r7, #20
 80087bc:	4619      	mov	r1, r3
 80087be:	4810      	ldr	r0, [pc, #64]	; (8008800 <HAL_PCD_MspInit+0x98>)
 80087c0:	f002 f824 	bl	800a80c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087c4:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <HAL_PCD_MspInit+0x94>)
 80087c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c8:	4a0c      	ldr	r2, [pc, #48]	; (80087fc <HAL_PCD_MspInit+0x94>)
 80087ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ce:	6353      	str	r3, [r2, #52]	; 0x34
 80087d0:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <HAL_PCD_MspInit+0x94>)
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4b07      	ldr	r3, [pc, #28]	; (80087fc <HAL_PCD_MspInit+0x94>)
 80087de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e0:	4a06      	ldr	r2, [pc, #24]	; (80087fc <HAL_PCD_MspInit+0x94>)
 80087e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087e6:	6453      	str	r3, [r2, #68]	; 0x44
 80087e8:	4b04      	ldr	r3, [pc, #16]	; (80087fc <HAL_PCD_MspInit+0x94>)
 80087ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f0:	60bb      	str	r3, [r7, #8]
 80087f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80087f4:	bf00      	nop
 80087f6:	3728      	adds	r7, #40	; 0x28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	40023800 	.word	0x40023800
 8008800:	40020000 	.word	0x40020000

08008804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08c      	sub	sp, #48	; 0x30
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8008814:	2200      	movs	r2, #0
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	2036      	movs	r0, #54	; 0x36
 800881a:	f001 fbc5 	bl	8009fa8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800881e:	2036      	movs	r0, #54	; 0x36
 8008820:	f001 fbde 	bl	8009fe0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008824:	4b1f      	ldr	r3, [pc, #124]	; (80088a4 <HAL_InitTick+0xa0>)
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	4a1e      	ldr	r2, [pc, #120]	; (80088a4 <HAL_InitTick+0xa0>)
 800882a:	f043 0310 	orr.w	r3, r3, #16
 800882e:	6413      	str	r3, [r2, #64]	; 0x40
 8008830:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <HAL_InitTick+0xa0>)
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800883c:	f107 0210 	add.w	r2, r7, #16
 8008840:	f107 0314 	add.w	r3, r7, #20
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f003 ff5a 	bl	800c700 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800884c:	f003 ff30 	bl	800c6b0 <HAL_RCC_GetPCLK1Freq>
 8008850:	4603      	mov	r3, r0
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008858:	4a13      	ldr	r2, [pc, #76]	; (80088a8 <HAL_InitTick+0xa4>)
 800885a:	fba2 2303 	umull	r2, r3, r2, r3
 800885e:	0c9b      	lsrs	r3, r3, #18
 8008860:	3b01      	subs	r3, #1
 8008862:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008864:	4b11      	ldr	r3, [pc, #68]	; (80088ac <HAL_InitTick+0xa8>)
 8008866:	4a12      	ldr	r2, [pc, #72]	; (80088b0 <HAL_InitTick+0xac>)
 8008868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800886a:	4b10      	ldr	r3, [pc, #64]	; (80088ac <HAL_InitTick+0xa8>)
 800886c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008870:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008872:	4a0e      	ldr	r2, [pc, #56]	; (80088ac <HAL_InitTick+0xa8>)
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008878:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <HAL_InitTick+0xa8>)
 800887a:	2200      	movs	r2, #0
 800887c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800887e:	4b0b      	ldr	r3, [pc, #44]	; (80088ac <HAL_InitTick+0xa8>)
 8008880:	2200      	movs	r2, #0
 8008882:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008884:	4809      	ldr	r0, [pc, #36]	; (80088ac <HAL_InitTick+0xa8>)
 8008886:	f005 f86f 	bl	800d968 <HAL_TIM_Base_Init>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d104      	bne.n	800889a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8008890:	4806      	ldr	r0, [pc, #24]	; (80088ac <HAL_InitTick+0xa8>)
 8008892:	f005 f895 	bl	800d9c0 <HAL_TIM_Base_Start_IT>
 8008896:	4603      	mov	r3, r0
 8008898:	e000      	b.n	800889c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
}
 800889c:	4618      	mov	r0, r3
 800889e:	3730      	adds	r7, #48	; 0x30
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40023800 	.word	0x40023800
 80088a8:	431bde83 	.word	0x431bde83
 80088ac:	20030af4 	.word	0x20030af4
 80088b0:	40001000 	.word	0x40001000

080088b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80088b8:	e7fe      	b.n	80088b8 <NMI_Handler+0x4>

080088ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088ba:	b480      	push	{r7}
 80088bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088be:	e7fe      	b.n	80088be <HardFault_Handler+0x4>

080088c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088c0:	b480      	push	{r7}
 80088c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088c4:	e7fe      	b.n	80088c4 <MemManage_Handler+0x4>

080088c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088c6:	b480      	push	{r7}
 80088c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088ca:	e7fe      	b.n	80088ca <BusFault_Handler+0x4>

080088cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088d0:	e7fe      	b.n	80088d0 <UsageFault_Handler+0x4>

080088d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088d2:	b480      	push	{r7}
 80088d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088d6:	bf00      	nop
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int currentTicks = HAL_GetTick();
 80088e6:	f000 fccd 	bl	8009284 <HAL_GetTick>
 80088ea:	4603      	mov	r3, r0
 80088ec:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 80088ee:	4b10      	ldr	r3, [pc, #64]	; (8008930 <EXTI4_IRQHandler+0x50>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80088f8:	2010      	movs	r0, #16
 80088fa:	f002 f97d 	bl	800abf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if((inputButtonSet>buttonPriority.back) && (currentDiff>150)){
 80088fe:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <EXTI4_IRQHandler+0x54>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <EXTI4_IRQHandler+0x58>)
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	429a      	cmp	r2, r3
 800890a:	dd07      	ble.n	800891c <EXTI4_IRQHandler+0x3c>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b96      	cmp	r3, #150	; 0x96
 8008910:	dd04      	ble.n	800891c <EXTI4_IRQHandler+0x3c>
	  inputButtonSet = buttonPriority.back;
 8008912:	4b09      	ldr	r3, [pc, #36]	; (8008938 <EXTI4_IRQHandler+0x58>)
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	4b06      	ldr	r3, [pc, #24]	; (8008934 <EXTI4_IRQHandler+0x54>)
 800891a:	701a      	strb	r2, [r3, #0]
  }
  timestamp = HAL_GetTick();
 800891c:	f000 fcb2 	bl	8009284 <HAL_GetTick>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	4b02      	ldr	r3, [pc, #8]	; (8008930 <EXTI4_IRQHandler+0x50>)
 8008926:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20003380 	.word	0x20003380
 8008934:	200000dc 	.word	0x200000dc
 8008938:	20000188 	.word	0x20000188

0800893c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008940:	4802      	ldr	r0, [pc, #8]	; (800894c <DMA1_Stream0_IRQHandler+0x10>)
 8008942:	f001 fcfb 	bl	800a33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008946:	bf00      	nop
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20030a38 	.word	0x20030a38

08008950 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008954:	4805      	ldr	r0, [pc, #20]	; (800896c <ADC_IRQHandler+0x1c>)
 8008956:	f000 fd07 	bl	8009368 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800895a:	4805      	ldr	r0, [pc, #20]	; (8008970 <ADC_IRQHandler+0x20>)
 800895c:	f000 fd04 	bl	8009368 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8008960:	4804      	ldr	r0, [pc, #16]	; (8008974 <ADC_IRQHandler+0x24>)
 8008962:	f000 fd01 	bl	8009368 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008966:	bf00      	nop
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	2002b9fc 	.word	0x2002b9fc
 8008970:	20028ce0 	.word	0x20028ce0
 8008974:	2002ba48 	.word	0x2002ba48

08008978 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	int currentTicks = HAL_GetTick();
 800897e:	f000 fc81 	bl	8009284 <HAL_GetTick>
 8008982:	4603      	mov	r3, r0
 8008984:	60fb      	str	r3, [r7, #12]
	int currentDiff = currentTicks-timestamp;
 8008986:	4b35      	ldr	r3, [pc, #212]	; (8008a5c <EXTI9_5_IRQHandler+0xe4>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	60bb      	str	r3, [r7, #8]
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 8008990:	2120      	movs	r1, #32
 8008992:	4833      	ldr	r0, [pc, #204]	; (8008a60 <EXTI9_5_IRQHandler+0xe8>)
 8008994:	f002 f8e4 	bl	800ab60 <HAL_GPIO_ReadPin>
 8008998:	4603      	mov	r3, r0
 800899a:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 800899c:	2140      	movs	r1, #64	; 0x40
 800899e:	4830      	ldr	r0, [pc, #192]	; (8008a60 <EXTI9_5_IRQHandler+0xe8>)
 80089a0:	f002 f8de 	bl	800ab60 <HAL_GPIO_ReadPin>
 80089a4:	4603      	mov	r3, r0
 80089a6:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 80089a8:	2180      	movs	r1, #128	; 0x80
 80089aa:	482d      	ldr	r0, [pc, #180]	; (8008a60 <EXTI9_5_IRQHandler+0xe8>)
 80089ac:	f002 f8d8 	bl	800ab60 <HAL_GPIO_ReadPin>
 80089b0:	4603      	mov	r3, r0
 80089b2:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5) && (currentDiff>150)){ //up button
 80089b4:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <EXTI9_5_IRQHandler+0xec>)
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	f003 0320 	and.w	r3, r3, #32
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00f      	beq.n	80089e0 <EXTI9_5_IRQHandler+0x68>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b96      	cmp	r3, #150	; 0x96
 80089c4:	dd0c      	ble.n	80089e0 <EXTI9_5_IRQHandler+0x68>
		if(inputButtonSet > buttonPriority.up){
 80089c6:	4b28      	ldr	r3, [pc, #160]	; (8008a68 <EXTI9_5_IRQHandler+0xf0>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	4b27      	ldr	r3, [pc, #156]	; (8008a6c <EXTI9_5_IRQHandler+0xf4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	dd30      	ble.n	8008a36 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.up;
 80089d4:	4b25      	ldr	r3, [pc, #148]	; (8008a6c <EXTI9_5_IRQHandler+0xf4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	4b23      	ldr	r3, [pc, #140]	; (8008a68 <EXTI9_5_IRQHandler+0xf0>)
 80089dc:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.up){
 80089de:	e02a      	b.n	8008a36 <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6) && (currentDiff>150)){ //sel button
 80089e0:	4b20      	ldr	r3, [pc, #128]	; (8008a64 <EXTI9_5_IRQHandler+0xec>)
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00f      	beq.n	8008a0c <EXTI9_5_IRQHandler+0x94>
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b96      	cmp	r3, #150	; 0x96
 80089f0:	dd0c      	ble.n	8008a0c <EXTI9_5_IRQHandler+0x94>
		if(inputButtonSet > buttonPriority.sel){
 80089f2:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <EXTI9_5_IRQHandler+0xf0>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <EXTI9_5_IRQHandler+0xf4>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	dd1a      	ble.n	8008a36 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.sel;
 8008a00:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <EXTI9_5_IRQHandler+0xf4>)
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	4b18      	ldr	r3, [pc, #96]	; (8008a68 <EXTI9_5_IRQHandler+0xf0>)
 8008a08:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.sel){
 8008a0a:	e014      	b.n	8008a36 <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7) && (currentDiff>150)){ //down button
 8008a0c:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <EXTI9_5_IRQHandler+0xec>)
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00e      	beq.n	8008a36 <EXTI9_5_IRQHandler+0xbe>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b96      	cmp	r3, #150	; 0x96
 8008a1c:	dd0b      	ble.n	8008a36 <EXTI9_5_IRQHandler+0xbe>
		if(inputButtonSet > buttonPriority.down){
 8008a1e:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <EXTI9_5_IRQHandler+0xf0>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <EXTI9_5_IRQHandler+0xf4>)
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	dd04      	ble.n	8008a36 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.down;
 8008a2c:	4b0f      	ldr	r3, [pc, #60]	; (8008a6c <EXTI9_5_IRQHandler+0xf4>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <EXTI9_5_IRQHandler+0xf0>)
 8008a34:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008a36:	2020      	movs	r0, #32
 8008a38:	f002 f8de 	bl	800abf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8008a3c:	2040      	movs	r0, #64	; 0x40
 8008a3e:	f002 f8db 	bl	800abf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008a42:	2080      	movs	r0, #128	; 0x80
 8008a44:	f002 f8d8 	bl	800abf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  timestamp = HAL_GetTick();
 8008a48:	f000 fc1c 	bl	8009284 <HAL_GetTick>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <EXTI9_5_IRQHandler+0xe4>)
 8008a52:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008a54:	bf00      	nop
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20003380 	.word	0x20003380
 8008a60:	40022800 	.word	0x40022800
 8008a64:	40013c00 	.word	0x40013c00
 8008a68:	200000dc 	.word	0x200000dc
 8008a6c:	20000188 	.word	0x20000188

08008a70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <TIM6_DAC_IRQHandler+0x10>)
 8008a76:	f005 f802 	bl	800da7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008a7a:	bf00      	nop
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20030af4 	.word	0x20030af4

08008a84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008a88:	4805      	ldr	r0, [pc, #20]	; (8008aa0 <DMA2_Stream0_IRQHandler+0x1c>)
 8008a8a:	f001 fc57 	bl	800a33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 8008a8e:	4805      	ldr	r0, [pc, #20]	; (8008aa4 <DMA2_Stream0_IRQHandler+0x20>)
 8008a90:	f000 fe9a 	bl	80097c8 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8008a94:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <DMA2_Stream0_IRQHandler+0x24>)
 8008a96:	2201      	movs	r2, #1
 8008a98:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	2002ba90 	.word	0x2002ba90
 8008aa4:	2002b9fc 	.word	0x2002b9fc
 8008aa8:	20029224 	.word	0x20029224

08008aac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8008ab0:	4805      	ldr	r0, [pc, #20]	; (8008ac8 <DMA2_Stream1_IRQHandler+0x1c>)
 8008ab2:	f001 fc43 	bl	800a33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8008ab6:	4805      	ldr	r0, [pc, #20]	; (8008acc <DMA2_Stream1_IRQHandler+0x20>)
 8008ab8:	f000 fe86 	bl	80097c8 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <DMA2_Stream1_IRQHandler+0x24>)
 8008abe:	2201      	movs	r2, #1
 8008ac0:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008ac2:	bf00      	nop
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200291c4 	.word	0x200291c4
 8008acc:	2002ba48 	.word	0x2002ba48
 8008ad0:	20029224 	.word	0x20029224

08008ad4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008ad8:	4805      	ldr	r0, [pc, #20]	; (8008af0 <DMA2_Stream2_IRQHandler+0x1c>)
 8008ada:	f001 fc2f 	bl	800a33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8008ade:	4805      	ldr	r0, [pc, #20]	; (8008af4 <DMA2_Stream2_IRQHandler+0x20>)
 8008ae0:	f000 fe72 	bl	80097c8 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <DMA2_Stream2_IRQHandler+0x24>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008aea:	bf00      	nop
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	200309d8 	.word	0x200309d8
 8008af4:	20028ce0 	.word	0x20028ce0
 8008af8:	20029224 	.word	0x20029224

08008afc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8008b00:	4802      	ldr	r0, [pc, #8]	; (8008b0c <SPI4_IRQHandler+0x10>)
 8008b02:	f004 fcf5 	bl	800d4f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8008b06:	bf00      	nop
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20028ab0 	.word	0x20028ab0

08008b10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	e00a      	b.n	8008b38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008b22:	f3af 8000 	nop.w
 8008b26:	4601      	mov	r1, r0
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	60ba      	str	r2, [r7, #8]
 8008b2e:	b2ca      	uxtb	r2, r1
 8008b30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	3301      	adds	r3, #1
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	dbf0      	blt.n	8008b22 <_read+0x12>
	}

return len;
 8008b40:	687b      	ldr	r3, [r7, #4]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b56:	2300      	movs	r3, #0
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	e009      	b.n	8008b70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	60ba      	str	r2, [r7, #8]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fa fa63 	bl	8003030 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	dbf1      	blt.n	8008b5c <_write+0x12>
	}
	return len;
 8008b78:	687b      	ldr	r3, [r7, #4]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <_close>:

int _close(int file)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
	return -1;
 8008b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008baa:	605a      	str	r2, [r3, #4]
	return 0;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <_isatty>:

int _isatty(int file)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
	return 1;
 8008bc2:	2301      	movs	r3, #1
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
	return 0;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008bf4:	4a14      	ldr	r2, [pc, #80]	; (8008c48 <_sbrk+0x5c>)
 8008bf6:	4b15      	ldr	r3, [pc, #84]	; (8008c4c <_sbrk+0x60>)
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c00:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <_sbrk+0x64>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c08:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <_sbrk+0x64>)
 8008c0a:	4a12      	ldr	r2, [pc, #72]	; (8008c54 <_sbrk+0x68>)
 8008c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c0e:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <_sbrk+0x64>)
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4413      	add	r3, r2
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d207      	bcs.n	8008c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c1c:	f009 fd48 	bl	80126b0 <__errno>
 8008c20:	4602      	mov	r2, r0
 8008c22:	230c      	movs	r3, #12
 8008c24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8008c26:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2a:	e009      	b.n	8008c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c2c:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <_sbrk+0x64>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c32:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <_sbrk+0x64>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	4a05      	ldr	r2, [pc, #20]	; (8008c50 <_sbrk+0x64>)
 8008c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20080000 	.word	0x20080000
 8008c4c:	00000400 	.word	0x00000400
 8008c50:	20003384 	.word	0x20003384
 8008c54:	20030b80 	.word	0x20030b80

08008c58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c5c:	4b08      	ldr	r3, [pc, #32]	; (8008c80 <SystemInit+0x28>)
 8008c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c62:	4a07      	ldr	r2, [pc, #28]	; (8008c80 <SystemInit+0x28>)
 8008c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <SystemInit+0x28>)
 8008c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c72:	609a      	str	r2, [r3, #8]
#endif
}
 8008c74:	bf00      	nop
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	e000ed00 	.word	0xe000ed00

08008c84 <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 8008c88:	220c      	movs	r2, #12
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	4814      	ldr	r0, [pc, #80]	; (8008ce0 <zionEEPROMPresence+0x5c>)
 8008c8e:	f009 fd44 	bl	801271a <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 8008c92:	2364      	movs	r3, #100	; 0x64
 8008c94:	2202      	movs	r2, #2
 8008c96:	21a6      	movs	r1, #166	; 0xa6
 8008c98:	4812      	ldr	r0, [pc, #72]	; (8008ce4 <zionEEPROMPresence+0x60>)
 8008c9a:	f002 fb65 	bl	800b368 <HAL_I2C_IsDeviceReady>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 8008ca4:	4b0e      	ldr	r3, [pc, #56]	; (8008ce0 <zionEEPROMPresence+0x5c>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 8008caa:	2364      	movs	r3, #100	; 0x64
 8008cac:	2202      	movs	r2, #2
 8008cae:	21a8      	movs	r1, #168	; 0xa8
 8008cb0:	480c      	ldr	r0, [pc, #48]	; (8008ce4 <zionEEPROMPresence+0x60>)
 8008cb2:	f002 fb59 	bl	800b368 <HAL_I2C_IsDeviceReady>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 8008cbc:	4b08      	ldr	r3, [pc, #32]	; (8008ce0 <zionEEPROMPresence+0x5c>)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 8008cc2:	2364      	movs	r3, #100	; 0x64
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	21aa      	movs	r1, #170	; 0xaa
 8008cc8:	4806      	ldr	r0, [pc, #24]	; (8008ce4 <zionEEPROMPresence+0x60>)
 8008cca:	f002 fb4d 	bl	800b368 <HAL_I2C_IsDeviceReady>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <zionEEPROMPresence+0x5c>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 8008cda:	4b01      	ldr	r3, [pc, #4]	; (8008ce0 <zionEEPROMPresence+0x5c>)
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20003388 	.word	0x20003388
 8008ce4:	20028b60 	.word	0x20028b60

08008ce8 <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af04      	add	r7, sp, #16
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	607b      	str	r3, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	72fb      	strb	r3, [r7, #11]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	b299      	uxth	r1, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8b3a      	ldrh	r2, [r7, #24]
 8008d04:	8938      	ldrh	r0, [r7, #8]
 8008d06:	9202      	str	r2, [sp, #8]
 8008d08:	9301      	str	r3, [sp, #4]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	2302      	movs	r3, #2
 8008d10:	4602      	mov	r2, r0
 8008d12:	4803      	ldr	r0, [pc, #12]	; (8008d20 <readDataFromEEPROM+0x38>)
 8008d14:	f002 fa0e 	bl	800b134 <HAL_I2C_Mem_Read>
}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20028b60 	.word	0x20028b60

08008d24 <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	b0a6      	sub	sp, #152	; 0x98
 8008d2a:	af02      	add	r7, sp, #8
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	71fb      	strb	r3, [r7, #7]
 8008d30:	466b      	mov	r3, sp
 8008d32:	4698      	mov	r8, r3
	int foundTheEnd = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 8008d40:	2364      	movs	r3, #100	; 0x64
 8008d42:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 8008d44:	2306      	movs	r3, #6
 8008d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 8008d5c:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8008d5e:	1e6b      	subs	r3, r5, #1
 8008d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d62:	462b      	mov	r3, r5
 8008d64:	4619      	mov	r1, r3
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	f04f 0400 	mov.w	r4, #0
 8008d72:	00d4      	lsls	r4, r2, #3
 8008d74:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008d78:	00cb      	lsls	r3, r1, #3
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f04f 0200 	mov.w	r2, #0
 8008d82:	f04f 0300 	mov.w	r3, #0
 8008d86:	f04f 0400 	mov.w	r4, #0
 8008d8a:	00d4      	lsls	r4, r2, #3
 8008d8c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008d90:	00cb      	lsls	r3, r1, #3
 8008d92:	462b      	mov	r3, r5
 8008d94:	3307      	adds	r3, #7
 8008d96:	08db      	lsrs	r3, r3, #3
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	ebad 0d03 	sub.w	sp, sp, r3
 8008d9e:	ab02      	add	r3, sp, #8
 8008da0:	3300      	adds	r3, #0
 8008da2:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 8008da4:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8008da6:	1e73      	subs	r3, r6, #1
 8008da8:	667b      	str	r3, [r7, #100]	; 0x64
 8008daa:	4633      	mov	r3, r6
 8008dac:	4619      	mov	r1, r3
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	f04f 0300 	mov.w	r3, #0
 8008db6:	f04f 0400 	mov.w	r4, #0
 8008dba:	00d4      	lsls	r4, r2, #3
 8008dbc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008dc0:	00cb      	lsls	r3, r1, #3
 8008dc2:	4633      	mov	r3, r6
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	f04f 0400 	mov.w	r4, #0
 8008dd2:	00d4      	lsls	r4, r2, #3
 8008dd4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008dd8:	00cb      	lsls	r3, r1, #3
 8008dda:	4633      	mov	r3, r6
 8008ddc:	3307      	adds	r3, #7
 8008dde:	08db      	lsrs	r3, r3, #3
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	ebad 0d03 	sub.w	sp, sp, r3
 8008de6:	ab02      	add	r3, sp, #8
 8008de8:	3300      	adds	r3, #0
 8008dea:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8008dec:	f107 0308 	add.w	r3, r7, #8
 8008df0:	2250      	movs	r2, #80	; 0x50
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f009 fc90 	bl	801271a <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 8008dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dfc:	4632      	mov	r2, r6
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f009 fc8a 	bl	801271a <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 8008e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e08:	462a      	mov	r2, r5
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f009 fc84 	bl	801271a <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 8008e12:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008e14:	79f9      	ldrb	r1, [r7, #7]
 8008e16:	2364      	movs	r3, #100	; 0x64
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	462b      	mov	r3, r5
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f7ff ff63 	bl	8008ce8 <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 8008e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2bff      	cmp	r3, #255	; 0xff
 8008e28:	f040 811b 	bne.w	8009062 <parseZionEEPROM+0x33e>
		foundTheEnd=1;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 8008e32:	f06f 0301 	mvn.w	r3, #1
 8008e36:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 8008e38:	e113      	b.n	8009062 <parseZionEEPROM+0x33e>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 8008e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008e3e:	fb93 f2f2 	sdiv	r2, r3, r2
 8008e42:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008e44:	fb01 f202 	mul.w	r2, r1, r2
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bf0c      	ite	eq
 8008e4e:	2301      	moveq	r3, #1
 8008e50:	2300      	movne	r3, #0
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bfcc      	ite	gt
 8008e5a:	2301      	movgt	r3, #1
 8008e5c:	2300      	movle	r3, #0
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	4013      	ands	r3, r2
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d025      	beq.n	8008eb4 <parseZionEEPROM+0x190>
			for(x=0;x<size;x++){
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e6e:	e00f      	b.n	8008e90 <parseZionEEPROM+0x16c>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 8008e70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e76:	4413      	add	r3, r2
 8008e78:	7819      	ldrb	r1, [r3, #0]
 8008e7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e80:	4413      	add	r3, r2
 8008e82:	460a      	mov	r2, r1
 8008e84:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 8008e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e96:	429a      	cmp	r2, r3
 8008e98:	dbea      	blt.n	8008e70 <parseZionEEPROM+0x14c>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 8008e9a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	79f9      	ldrb	r1, [r7, #7]
 8008ea2:	2364      	movs	r3, #100	; 0x64
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	f7ff ff1e 	bl	8008ce8 <readDataFromEEPROM>
			indexSubtractor+=size;
 8008eac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008eb0:	4413      	add	r3, r2
 8008eb2:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 8008eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2bff      	cmp	r3, #255	; 0xff
 8008eba:	d116      	bne.n	8008eea <parseZionEEPROM+0x1c6>
 8008ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	2bff      	cmp	r3, #255	; 0xff
 8008ec2:	d112      	bne.n	8008eea <parseZionEEPROM+0x1c6>
 8008ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ec6:	789b      	ldrb	r3, [r3, #2]
 8008ec8:	2bff      	cmp	r3, #255	; 0xff
 8008eca:	d10e      	bne.n	8008eea <parseZionEEPROM+0x1c6>
 8008ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ece:	78db      	ldrb	r3, [r3, #3]
 8008ed0:	2bff      	cmp	r3, #255	; 0xff
 8008ed2:	d10a      	bne.n	8008eea <parseZionEEPROM+0x1c6>
 8008ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ed6:	795b      	ldrb	r3, [r3, #5]
 8008ed8:	2bff      	cmp	r3, #255	; 0xff
 8008eda:	d106      	bne.n	8008eea <parseZionEEPROM+0x1c6>
			previousByteOfHeader[0]=-1;
 8008edc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee0:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ee8:	e0b8      	b.n	800905c <parseZionEEPROM+0x338>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 8008eea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ef2:	5cd3      	ldrb	r3, [r2, r3]
 8008ef4:	2b5a      	cmp	r3, #90	; 0x5a
 8008ef6:	d023      	beq.n	8008f40 <parseZionEEPROM+0x21c>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008efc:	fb93 f2f2 	sdiv	r2, r3, r2
 8008f00:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008f02:	fb01 f202 	mul.w	r2, r1, r2
 8008f06:	1a9b      	subs	r3, r3, r2
 8008f08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f0a:	5cd3      	ldrb	r3, [r2, r3]
 8008f0c:	2b5a      	cmp	r3, #90	; 0x5a
 8008f0e:	d104      	bne.n	8008f1a <parseZionEEPROM+0x1f6>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	3314      	adds	r3, #20
 8008f14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f16:	429a      	cmp	r2, r3
 8008f18:	db12      	blt.n	8008f40 <parseZionEEPROM+0x21c>
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f1e:	fb93 f2f2 	sdiv	r2, r3, r2
 8008f22:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008f24:	fb01 f202 	mul.w	r2, r1, r2
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f2c:	5cd3      	ldrb	r3, [r2, r3]
 8008f2e:	2b5a      	cmp	r3, #90	; 0x5a
 8008f30:	f040 8094 	bne.w	800905c <parseZionEEPROM+0x338>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3314      	adds	r3, #20
 8008f38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	f280 808e 	bge.w	800905c <parseZionEEPROM+0x338>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f46:	4313      	orrs	r3, r2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bf0c      	ite	eq
 8008f4c:	2301      	moveq	r3, #1
 8008f4e:	2300      	movne	r3, #0
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f56:	1acb      	subs	r3, r1, r3
 8008f58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f5a:	5ccb      	ldrb	r3, [r1, r3]
 8008f5c:	2b5a      	cmp	r3, #90	; 0x5a
 8008f5e:	bf0c      	ite	eq
 8008f60:	2301      	moveq	r3, #1
 8008f62:	2300      	movne	r3, #0
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	4013      	ands	r3, r2
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d008      	beq.n	8008f80 <parseZionEEPROM+0x25c>
				previousByteOfHeader[0] = index;
 8008f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f70:	60bb      	str	r3, [r7, #8]
				if(index==0){
 8008f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d171      	bne.n	800905c <parseZionEEPROM+0x338>
					zeroWas5A=1;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f7e:	e06d      	b.n	800905c <parseZionEEPROM+0x338>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 8008f80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d015      	beq.n	8008fb2 <parseZionEEPROM+0x28e>
				previousByteOfHeader[counter]=index;
 8008f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008f90:	4413      	add	r3, r2
 8008f92:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f94:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 8008f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f9c:	2b13      	cmp	r3, #19
 8008f9e:	d102      	bne.n	8008fa6 <parseZionEEPROM+0x282>
					foundTheEnd=1;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 8008fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008faa:	3301      	adds	r3, #1
 8008fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fb0:	e054      	b.n	800905c <parseZionEEPROM+0x338>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 8008fb2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fba:	5cd3      	ldrb	r3, [r2, r3]
 8008fbc:	2b45      	cmp	r3, #69	; 0x45
 8008fbe:	d102      	bne.n	8008fc6 <parseZionEEPROM+0x2a2>
					previousByteOfHeader[1] = index;
 8008fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	e04a      	b.n	800905c <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 8008fc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fce:	5cd3      	ldrb	r3, [r2, r3]
 8008fd0:	2b46      	cmp	r3, #70	; 0x46
 8008fd2:	d107      	bne.n	8008fe4 <parseZionEEPROM+0x2c0>
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d102      	bne.n	8008fe4 <parseZionEEPROM+0x2c0>
					previousByteOfHeader[2] = index;
 8008fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe0:	613b      	str	r3, [r7, #16]
 8008fe2:	e03b      	b.n	800905c <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 8008fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fec:	5cd3      	ldrb	r3, [r2, r3]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d107      	bne.n	8009002 <parseZionEEPROM+0x2de>
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d102      	bne.n	8009002 <parseZionEEPROM+0x2de>
					previousByteOfHeader[3] = index;
 8008ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ffe:	617b      	str	r3, [r7, #20]
 8009000:	e02c      	b.n	800905c <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8009002:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800900a:	5cd3      	ldrb	r3, [r2, r3]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d107      	bne.n	8009020 <parseZionEEPROM+0x2fc>
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009014:	3b01      	subs	r3, #1
 8009016:	429a      	cmp	r2, r3
 8009018:	d102      	bne.n	8009020 <parseZionEEPROM+0x2fc>
					previousByteOfHeader[4] = index;
 800901a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	e01d      	b.n	800905c <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 8009020:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009028:	5cd3      	ldrb	r3, [r2, r3]
 800902a:	2b04      	cmp	r3, #4
 800902c:	d109      	bne.n	8009042 <parseZionEEPROM+0x31e>
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009032:	3b01      	subs	r3, #1
 8009034:	429a      	cmp	r2, r3
 8009036:	d104      	bne.n	8009042 <parseZionEEPROM+0x31e>
					previousByteOfHeader[5] = index;
 8009038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800903a:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 800903c:	2301      	movs	r3, #1
 800903e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009040:	e00c      	b.n	800905c <parseZionEEPROM+0x338>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 8009042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d109      	bne.n	800905c <parseZionEEPROM+0x338>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	2250      	movs	r2, #80	; 0x50
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f009 fb62 	bl	801271a <memset>
					zeroWas5A=0;
 8009056:	2300      	movs	r3, #0
 8009058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 800905c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800905e:	3301      	adds	r3, #1
 8009060:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 8009062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009066:	2b00      	cmp	r3, #0
 8009068:	f43f aee7 	beq.w	8008e3a <parseZionEEPROM+0x116>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f2c0 8085 	blt.w	800917e <parseZionEEPROM+0x45a>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 8009074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009076:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009078:	fb93 f2f2 	sdiv	r2, r3, r2
 800907c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800907e:	fb01 f202 	mul.w	r2, r1, r2
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 8009086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009088:	3b05      	subs	r3, #5
 800908a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800908c:	429a      	cmp	r2, r3
 800908e:	dd50      	ble.n	8009132 <parseZionEEPROM+0x40e>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 8009090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009092:	1e5a      	subs	r2, r3, #1
 8009094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 800909a:	2300      	movs	r3, #0
 800909c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090a0:	e01c      	b.n	80090dc <parseZionEEPROM+0x3b8>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 80090a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090a6:	3310      	adds	r3, #16
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80090ae:	4413      	add	r3, r2
 80090b0:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80090b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80090b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80090ba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80090bc:	fb01 f202 	mul.w	r2, r1, r2
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090c4:	5cd3      	ldrb	r3, [r2, r3]
 80090c6:	4619      	mov	r1, r3
 80090c8:	4a48      	ldr	r2, [pc, #288]	; (80091ec <parseZionEEPROM+0x4c8>)
 80090ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 80090d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090d6:	3301      	adds	r3, #1
 80090d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80090e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e2:	429a      	cmp	r2, r3
 80090e4:	dbdd      	blt.n	80090a2 <parseZionEEPROM+0x37e>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 80090e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090ec:	e01c      	b.n	8009128 <parseZionEEPROM+0x404>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 80090ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090f2:	3310      	adds	r3, #16
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80090fa:	4413      	add	r3, r2
 80090fc:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009100:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009102:	fb93 f2f2 	sdiv	r2, r3, r2
 8009106:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009108:	fb01 f202 	mul.w	r2, r1, r2
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009110:	5cd3      	ldrb	r3, [r2, r3]
 8009112:	4619      	mov	r1, r3
 8009114:	4a35      	ldr	r2, [pc, #212]	; (80091ec <parseZionEEPROM+0x4c8>)
 8009116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800911a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 800911e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009122:	3301      	adds	r3, #1
 8009124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800912c:	2b03      	cmp	r3, #3
 800912e:	ddde      	ble.n	80090ee <parseZionEEPROM+0x3ca>
 8009130:	e052      	b.n	80091d8 <parseZionEEPROM+0x4b4>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 8009132:	2300      	movs	r3, #0
 8009134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009138:	e01c      	b.n	8009174 <parseZionEEPROM+0x450>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 800913a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800913e:	3310      	adds	r3, #16
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009146:	4413      	add	r3, r2
 8009148:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800914c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800914e:	fb93 f2f2 	sdiv	r2, r3, r2
 8009152:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009154:	fb01 f202 	mul.w	r2, r1, r2
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800915c:	5cd3      	ldrb	r3, [r2, r3]
 800915e:	4619      	mov	r1, r3
 8009160:	4a22      	ldr	r2, [pc, #136]	; (80091ec <parseZionEEPROM+0x4c8>)
 8009162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 800916a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800916e:	3301      	adds	r3, #1
 8009170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009178:	2b03      	cmp	r3, #3
 800917a:	ddde      	ble.n	800913a <parseZionEEPROM+0x416>
 800917c:	e02c      	b.n	80091d8 <parseZionEEPROM+0x4b4>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009184:	d114      	bne.n	80091b0 <parseZionEEPROM+0x48c>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 8009186:	2300      	movs	r3, #0
 8009188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800918c:	e00b      	b.n	80091a6 <parseZionEEPROM+0x482>
				deviceHeaderBytes[x] = -2;
 800918e:	4a17      	ldr	r2, [pc, #92]	; (80091ec <parseZionEEPROM+0x4c8>)
 8009190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009194:	f06f 0101 	mvn.w	r1, #1
 8009198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 800919c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091a0:	3301      	adds	r3, #1
 80091a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	ddef      	ble.n	800918e <parseZionEEPROM+0x46a>
 80091ae:	e013      	b.n	80091d8 <parseZionEEPROM+0x4b4>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 80091b0:	2300      	movs	r3, #0
 80091b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091b6:	e00b      	b.n	80091d0 <parseZionEEPROM+0x4ac>
				deviceHeaderBytes[x] = -1;
 80091b8:	4a0c      	ldr	r2, [pc, #48]	; (80091ec <parseZionEEPROM+0x4c8>)
 80091ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091be:	f04f 31ff 	mov.w	r1, #4294967295
 80091c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 80091c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091ca:	3301      	adds	r3, #1
 80091cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	ddef      	ble.n	80091b8 <parseZionEEPROM+0x494>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4a04      	ldr	r2, [pc, #16]	; (80091ec <parseZionEEPROM+0x4c8>)
 80091dc:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 80091de:	4b03      	ldr	r3, [pc, #12]	; (80091ec <parseZionEEPROM+0x4c8>)
 80091e0:	46c5      	mov	sp, r8
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3790      	adds	r7, #144	; 0x90
 80091e6:	46bd      	mov	sp, r7
 80091e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ec:	20003394 	.word	0x20003394

080091f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80091f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009228 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80091f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80091f6:	e003      	b.n	8009200 <LoopCopyDataInit>

080091f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80091fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80091fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80091fe:	3104      	adds	r1, #4

08009200 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009200:	480b      	ldr	r0, [pc, #44]	; (8009230 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009202:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009204:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009206:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009208:	d3f6      	bcc.n	80091f8 <CopyDataInit>
  ldr  r2, =_sbss
 800920a:	4a0b      	ldr	r2, [pc, #44]	; (8009238 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800920c:	e002      	b.n	8009214 <LoopFillZerobss>

0800920e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800920e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009210:	f842 3b04 	str.w	r3, [r2], #4

08009214 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009214:	4b09      	ldr	r3, [pc, #36]	; (800923c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009216:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009218:	d3f9      	bcc.n	800920e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800921a:	f7ff fd1d 	bl	8008c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800921e:	f009 fa4d 	bl	80126bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009222:	f7f8 fd6b 	bl	8001cfc <main>
  bx  lr    
 8009226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009228:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800922c:	080179e8 	.word	0x080179e8
  ldr  r0, =_sdata
 8009230:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009234:	20000378 	.word	0x20000378
  ldr  r2, =_sbss
 8009238:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 800923c:	20030b7c 	.word	0x20030b7c

08009240 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009240:	e7fe      	b.n	8009240 <CAN1_RX0_IRQHandler>

08009242 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009246:	2003      	movs	r0, #3
 8009248:	f000 fea3 	bl	8009f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800924c:	2000      	movs	r0, #0
 800924e:	f7ff fad9 	bl	8008804 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8009252:	f7fe fd39 	bl	8007cc8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009260:	4b06      	ldr	r3, [pc, #24]	; (800927c <HAL_IncTick+0x20>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <HAL_IncTick+0x24>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4413      	add	r3, r2
 800926c:	4a04      	ldr	r2, [pc, #16]	; (8009280 <HAL_IncTick+0x24>)
 800926e:	6013      	str	r3, [r2, #0]
}
 8009270:	bf00      	nop
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	200001a0 	.word	0x200001a0
 8009280:	20030b34 	.word	0x20030b34

08009284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  return uwTick;
 8009288:	4b03      	ldr	r3, [pc, #12]	; (8009298 <HAL_GetTick+0x14>)
 800928a:	681b      	ldr	r3, [r3, #0]
}
 800928c:	4618      	mov	r0, r3
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20030b34 	.word	0x20030b34

0800929c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092a4:	f7ff ffee 	bl	8009284 <HAL_GetTick>
 80092a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b4:	d005      	beq.n	80092c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80092b6:	4b09      	ldr	r3, [pc, #36]	; (80092dc <HAL_Delay+0x40>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80092c2:	bf00      	nop
 80092c4:	f7ff ffde 	bl	8009284 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d8f7      	bhi.n	80092c4 <HAL_Delay+0x28>
  {
  }
}
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	200001a0 	.word	0x200001a0

080092e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e031      	b.n	800935a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d109      	bne.n	8009312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7fe fd0a 	bl	8007d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	f003 0310 	and.w	r3, r3, #16
 800931a:	2b00      	cmp	r3, #0
 800931c:	d116      	bne.n	800934c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009322:	4b10      	ldr	r3, [pc, #64]	; (8009364 <HAL_ADC_Init+0x84>)
 8009324:	4013      	ands	r3, r2
 8009326:	f043 0202 	orr.w	r2, r3, #2
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fbfc 	bl	8009b2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	f043 0201 	orr.w	r2, r3, #1
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	641a      	str	r2, [r3, #64]	; 0x40
 800934a:	e001      	b.n	8009350 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009358:	7bfb      	ldrb	r3, [r7, #15]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	ffffeefd 	.word	0xffffeefd

08009368 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	2300      	movs	r3, #0
 8009376:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b02      	cmp	r3, #2
 8009384:	bf0c      	ite	eq
 8009386:	2301      	moveq	r3, #1
 8009388:	2300      	movne	r3, #0
 800938a:	b2db      	uxtb	r3, r3
 800938c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b20      	cmp	r3, #32
 800939a:	bf0c      	ite	eq
 800939c:	2301      	moveq	r3, #1
 800939e:	2300      	movne	r3, #0
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d049      	beq.n	800943e <HAL_ADC_IRQHandler+0xd6>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d046      	beq.n	800943e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	f003 0310 	and.w	r3, r3, #16
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d105      	bne.n	80093c8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d12b      	bne.n	800942e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d127      	bne.n	800942e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d006      	beq.n	80093fa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d119      	bne.n	800942e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 0220 	bic.w	r2, r2, #32
 8009408:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d105      	bne.n	800942e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f043 0201 	orr.w	r2, r3, #1
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fa fe96 	bl	8004160 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0212 	mvn.w	r2, #18
 800943c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0304 	and.w	r3, r3, #4
 8009448:	2b04      	cmp	r3, #4
 800944a:	bf0c      	ite	eq
 800944c:	2301      	moveq	r3, #1
 800944e:	2300      	movne	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945e:	2b80      	cmp	r3, #128	; 0x80
 8009460:	bf0c      	ite	eq
 8009462:	2301      	moveq	r3, #1
 8009464:	2300      	movne	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d057      	beq.n	8009520 <HAL_ADC_IRQHandler+0x1b8>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d054      	beq.n	8009520 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	f003 0310 	and.w	r3, r3, #16
 800947e:	2b00      	cmp	r3, #0
 8009480:	d105      	bne.n	800948e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d139      	bne.n	8009510 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d006      	beq.n	80094b8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d12b      	bne.n	8009510 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d124      	bne.n	8009510 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d11d      	bne.n	8009510 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d119      	bne.n	8009510 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009500:	2b00      	cmp	r3, #0
 8009502:	d105      	bne.n	8009510 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	f043 0201 	orr.w	r2, r3, #1
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fc87 	bl	8009e24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f06f 020c 	mvn.w	r2, #12
 800951e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b01      	cmp	r3, #1
 800952c:	bf0c      	ite	eq
 800952e:	2301      	moveq	r3, #1
 8009530:	2300      	movne	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009540:	2b40      	cmp	r3, #64	; 0x40
 8009542:	bf0c      	ite	eq
 8009544:	2301      	moveq	r3, #1
 8009546:	2300      	movne	r3, #0
 8009548:	b2db      	uxtb	r3, r3
 800954a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d017      	beq.n	8009582 <HAL_ADC_IRQHandler+0x21a>
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d014      	beq.n	8009582 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b01      	cmp	r3, #1
 8009564:	d10d      	bne.n	8009582 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f97c 	bl	8009870 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f06f 0201 	mvn.w	r2, #1
 8009580:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0320 	and.w	r3, r3, #32
 800958c:	2b20      	cmp	r3, #32
 800958e:	bf0c      	ite	eq
 8009590:	2301      	moveq	r3, #1
 8009592:	2300      	movne	r3, #0
 8009594:	b2db      	uxtb	r3, r3
 8009596:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095a6:	bf0c      	ite	eq
 80095a8:	2301      	moveq	r3, #1
 80095aa:	2300      	movne	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d015      	beq.n	80095e2 <HAL_ADC_IRQHandler+0x27a>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d012      	beq.n	80095e2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c0:	f043 0202 	orr.w	r2, r3, #2
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f06f 0220 	mvn.w	r2, #32
 80095d0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f956 	bl	8009884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f06f 0220 	mvn.w	r2, #32
 80095e0:	601a      	str	r2, [r3, #0]
  }
}
 80095e2:	bf00      	nop
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009602:	2b01      	cmp	r3, #1
 8009604:	d101      	bne.n	800960a <HAL_ADC_Start_DMA+0x1e>
 8009606:	2302      	movs	r3, #2
 8009608:	e0c7      	b.n	800979a <HAL_ADC_Start_DMA+0x1ae>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b01      	cmp	r3, #1
 800961e:	d018      	beq.n	8009652 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	689a      	ldr	r2, [r3, #8]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0201 	orr.w	r2, r2, #1
 800962e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009630:	4b5c      	ldr	r3, [pc, #368]	; (80097a4 <HAL_ADC_Start_DMA+0x1b8>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a5c      	ldr	r2, [pc, #368]	; (80097a8 <HAL_ADC_Start_DMA+0x1bc>)
 8009636:	fba2 2303 	umull	r2, r3, r2, r3
 800963a:	0c9a      	lsrs	r2, r3, #18
 800963c:	4613      	mov	r3, r2
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	4413      	add	r3, r2
 8009642:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009644:	e002      	b.n	800964c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	3b01      	subs	r3, #1
 800964a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1f9      	bne.n	8009646 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b01      	cmp	r3, #1
 800965e:	f040 809b 	bne.w	8009798 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009666:	4b51      	ldr	r3, [pc, #324]	; (80097ac <HAL_ADC_Start_DMA+0x1c0>)
 8009668:	4013      	ands	r3, r2
 800966a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800967c:	2b00      	cmp	r3, #0
 800967e:	d007      	beq.n	8009690 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009688:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969c:	d106      	bne.n	80096ac <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a2:	f023 0206 	bic.w	r2, r3, #6
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	645a      	str	r2, [r3, #68]	; 0x44
 80096aa:	e002      	b.n	80096b2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096be:	4a3c      	ldr	r2, [pc, #240]	; (80097b0 <HAL_ADC_Start_DMA+0x1c4>)
 80096c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	4a3b      	ldr	r2, [pc, #236]	; (80097b4 <HAL_ADC_Start_DMA+0x1c8>)
 80096c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	4a3a      	ldr	r2, [pc, #232]	; (80097b8 <HAL_ADC_Start_DMA+0x1cc>)
 80096d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80096da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80096ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	334c      	adds	r3, #76	; 0x4c
 8009706:	4619      	mov	r1, r3
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f000 fd24 	bl	800a158 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009710:	4b2a      	ldr	r3, [pc, #168]	; (80097bc <HAL_ADC_Start_DMA+0x1d0>)
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f003 031f 	and.w	r3, r3, #31
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10f      	bne.n	800973c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d136      	bne.n	8009798 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009738:	609a      	str	r2, [r3, #8]
 800973a:	e02d      	b.n	8009798 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a1f      	ldr	r2, [pc, #124]	; (80097c0 <HAL_ADC_Start_DMA+0x1d4>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d10e      	bne.n	8009764 <HAL_ADC_Start_DMA+0x178>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d107      	bne.n	8009764 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009762:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009764:	4b15      	ldr	r3, [pc, #84]	; (80097bc <HAL_ADC_Start_DMA+0x1d0>)
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b00      	cmp	r3, #0
 800976e:	d113      	bne.n	8009798 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a13      	ldr	r2, [pc, #76]	; (80097c4 <HAL_ADC_Start_DMA+0x1d8>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d10e      	bne.n	8009798 <HAL_ADC_Start_DMA+0x1ac>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d107      	bne.n	8009798 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009796:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000198 	.word	0x20000198
 80097a8:	431bde83 	.word	0x431bde83
 80097ac:	fffff8fe 	.word	0xfffff8fe
 80097b0:	08009d21 	.word	0x08009d21
 80097b4:	08009ddb 	.word	0x08009ddb
 80097b8:	08009df7 	.word	0x08009df7
 80097bc:	40012300 	.word	0x40012300
 80097c0:	40012000 	.word	0x40012000
 80097c4:	40012200 	.word	0x40012200

080097c8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <HAL_ADC_Stop_DMA+0x1a>
 80097de:	2302      	movs	r3, #2
 80097e0:	e036      	b.n	8009850 <HAL_ADC_Stop_DMA+0x88>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0201 	bic.w	r2, r2, #1
 80097f8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	d11e      	bne.n	8009846 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689a      	ldr	r2, [r3, #8]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009816:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fcfb 	bl	800a218 <HAL_DMA_Abort>
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009834:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800983a:	4b07      	ldr	r3, [pc, #28]	; (8009858 <HAL_ADC_Stop_DMA+0x90>)
 800983c:	4013      	ands	r3, r2
 800983e:	f043 0201 	orr.w	r2, r3, #1
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	ffffeefe 	.word	0xffffeefe

0800985c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d101      	bne.n	80098b4 <HAL_ADC_ConfigChannel+0x1c>
 80098b0:	2302      	movs	r3, #2
 80098b2:	e12a      	b.n	8009b0a <HAL_ADC_ConfigChannel+0x272>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b09      	cmp	r3, #9
 80098c2:	d93a      	bls.n	800993a <HAL_ADC_ConfigChannel+0xa2>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098cc:	d035      	beq.n	800993a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68d9      	ldr	r1, [r3, #12]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	3b1e      	subs	r3, #30
 80098e4:	2207      	movs	r2, #7
 80098e6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ea:	43da      	mvns	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	400a      	ands	r2, r1
 80098f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a87      	ldr	r2, [pc, #540]	; (8009b18 <HAL_ADC_ConfigChannel+0x280>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d10a      	bne.n	8009914 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68d9      	ldr	r1, [r3, #12]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	061a      	lsls	r2, r3, #24
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009912:	e035      	b.n	8009980 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68d9      	ldr	r1, [r3, #12]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	689a      	ldr	r2, [r3, #8]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	b29b      	uxth	r3, r3
 8009924:	4618      	mov	r0, r3
 8009926:	4603      	mov	r3, r0
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	4403      	add	r3, r0
 800992c:	3b1e      	subs	r3, #30
 800992e:	409a      	lsls	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009938:	e022      	b.n	8009980 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6919      	ldr	r1, [r3, #16]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	461a      	mov	r2, r3
 8009948:	4613      	mov	r3, r2
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	4413      	add	r3, r2
 800994e:	2207      	movs	r2, #7
 8009950:	fa02 f303 	lsl.w	r3, r2, r3
 8009954:	43da      	mvns	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	400a      	ands	r2, r1
 800995c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6919      	ldr	r1, [r3, #16]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	689a      	ldr	r2, [r3, #8]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	4618      	mov	r0, r3
 8009970:	4603      	mov	r3, r0
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	4403      	add	r3, r0
 8009976:	409a      	lsls	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2b06      	cmp	r3, #6
 8009986:	d824      	bhi.n	80099d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	3b05      	subs	r3, #5
 800999a:	221f      	movs	r2, #31
 800999c:	fa02 f303 	lsl.w	r3, r2, r3
 80099a0:	43da      	mvns	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	400a      	ands	r2, r1
 80099a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4618      	mov	r0, r3
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	3b05      	subs	r3, #5
 80099c4:	fa00 f203 	lsl.w	r2, r0, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	635a      	str	r2, [r3, #52]	; 0x34
 80099d0:	e04c      	b.n	8009a6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b0c      	cmp	r3, #12
 80099d8:	d824      	bhi.n	8009a24 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	3b23      	subs	r3, #35	; 0x23
 80099ec:	221f      	movs	r2, #31
 80099ee:	fa02 f303 	lsl.w	r3, r2, r3
 80099f2:	43da      	mvns	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	400a      	ands	r2, r1
 80099fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4618      	mov	r0, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	3b23      	subs	r3, #35	; 0x23
 8009a16:	fa00 f203 	lsl.w	r2, r0, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	631a      	str	r2, [r3, #48]	; 0x30
 8009a22:	e023      	b.n	8009a6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	3b41      	subs	r3, #65	; 0x41
 8009a36:	221f      	movs	r2, #31
 8009a38:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3c:	43da      	mvns	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	400a      	ands	r2, r1
 8009a44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	4618      	mov	r0, r3
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	3b41      	subs	r3, #65	; 0x41
 8009a60:	fa00 f203 	lsl.w	r2, r0, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a2a      	ldr	r2, [pc, #168]	; (8009b1c <HAL_ADC_ConfigChannel+0x284>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d10a      	bne.n	8009a8c <HAL_ADC_ConfigChannel+0x1f4>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a7e:	d105      	bne.n	8009a8c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8009a80:	4b27      	ldr	r3, [pc, #156]	; (8009b20 <HAL_ADC_ConfigChannel+0x288>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	4a26      	ldr	r2, [pc, #152]	; (8009b20 <HAL_ADC_ConfigChannel+0x288>)
 8009a86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009a8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a22      	ldr	r2, [pc, #136]	; (8009b1c <HAL_ADC_ConfigChannel+0x284>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d109      	bne.n	8009aaa <HAL_ADC_ConfigChannel+0x212>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b12      	cmp	r3, #18
 8009a9c:	d105      	bne.n	8009aaa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8009a9e:	4b20      	ldr	r3, [pc, #128]	; (8009b20 <HAL_ADC_ConfigChannel+0x288>)
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4a1f      	ldr	r2, [pc, #124]	; (8009b20 <HAL_ADC_ConfigChannel+0x288>)
 8009aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009aa8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a1b      	ldr	r2, [pc, #108]	; (8009b1c <HAL_ADC_ConfigChannel+0x284>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d125      	bne.n	8009b00 <HAL_ADC_ConfigChannel+0x268>
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a17      	ldr	r2, [pc, #92]	; (8009b18 <HAL_ADC_ConfigChannel+0x280>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d003      	beq.n	8009ac6 <HAL_ADC_ConfigChannel+0x22e>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b11      	cmp	r3, #17
 8009ac4:	d11c      	bne.n	8009b00 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8009ac6:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <HAL_ADC_ConfigChannel+0x288>)
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	4a15      	ldr	r2, [pc, #84]	; (8009b20 <HAL_ADC_ConfigChannel+0x288>)
 8009acc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ad0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a10      	ldr	r2, [pc, #64]	; (8009b18 <HAL_ADC_ConfigChannel+0x280>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d111      	bne.n	8009b00 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009adc:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <HAL_ADC_ConfigChannel+0x28c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a11      	ldr	r2, [pc, #68]	; (8009b28 <HAL_ADC_ConfigChannel+0x290>)
 8009ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae6:	0c9a      	lsrs	r2, r3, #18
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009af2:	e002      	b.n	8009afa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1f9      	bne.n	8009af4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	10000012 	.word	0x10000012
 8009b1c:	40012000 	.word	0x40012000
 8009b20:	40012300 	.word	0x40012300
 8009b24:	20000198 	.word	0x20000198
 8009b28:	431bde83 	.word	0x431bde83

08009b2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009b34:	4b78      	ldr	r3, [pc, #480]	; (8009d18 <ADC_Init+0x1ec>)
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4a77      	ldr	r2, [pc, #476]	; (8009d18 <ADC_Init+0x1ec>)
 8009b3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009b3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009b40:	4b75      	ldr	r3, [pc, #468]	; (8009d18 <ADC_Init+0x1ec>)
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	4973      	ldr	r1, [pc, #460]	; (8009d18 <ADC_Init+0x1ec>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6859      	ldr	r1, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	021a      	lsls	r2, r3, #8
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6859      	ldr	r1, [r3, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689a      	ldr	r2, [r3, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6899      	ldr	r1, [r3, #8]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	4a58      	ldr	r2, [pc, #352]	; (8009d1c <ADC_Init+0x1f0>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d022      	beq.n	8009c06 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009bce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6899      	ldr	r1, [r3, #8]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6899      	ldr	r1, [r3, #8]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	609a      	str	r2, [r3, #8]
 8009c04:	e00f      	b.n	8009c26 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009c24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 0202 	bic.w	r2, r2, #2
 8009c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6899      	ldr	r1, [r3, #8]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	005a      	lsls	r2, r3, #1
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01b      	beq.n	8009c8c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009c72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6859      	ldr	r1, [r3, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	035a      	lsls	r2, r3, #13
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	605a      	str	r2, [r3, #4]
 8009c8a:	e007      	b.n	8009c9c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	051a      	lsls	r2, r3, #20
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6899      	ldr	r1, [r3, #8]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cde:	025a      	lsls	r2, r3, #9
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	430a      	orrs	r2, r1
 8009ce6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689a      	ldr	r2, [r3, #8]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6899      	ldr	r1, [r3, #8]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	029a      	lsls	r2, r3, #10
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	609a      	str	r2, [r3, #8]
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	40012300 	.word	0x40012300
 8009d1c:	0f000001 	.word	0x0f000001

08009d20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d13c      	bne.n	8009db4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d12b      	bne.n	8009dac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d127      	bne.n	8009dac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d006      	beq.n	8009d78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d119      	bne.n	8009dac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f022 0220 	bic.w	r2, r2, #32
 8009d86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d105      	bne.n	8009dac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da4:	f043 0201 	orr.w	r2, r3, #1
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7fa f9d7 	bl	8004160 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009db2:	e00e      	b.n	8009dd2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db8:	f003 0310 	and.w	r3, r3, #16
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7ff fd5f 	bl	8009884 <HAL_ADC_ErrorCallback>
}
 8009dc6:	e004      	b.n	8009dd2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f7ff fd37 	bl	800985c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009dee:	bf00      	nop
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b084      	sub	sp, #16
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2240      	movs	r2, #64	; 0x40
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0e:	f043 0204 	orr.w	r2, r3, #4
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f7ff fd34 	bl	8009884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009e1c:	bf00      	nop
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e48:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <__NVIC_SetPriorityGrouping+0x40>)
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e54:	4013      	ands	r3, r2
 8009e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009e60:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <__NVIC_SetPriorityGrouping+0x44>)
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e66:	4a04      	ldr	r2, [pc, #16]	; (8009e78 <__NVIC_SetPriorityGrouping+0x40>)
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	60d3      	str	r3, [r2, #12]
}
 8009e6c:	bf00      	nop
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	e000ed00 	.word	0xe000ed00
 8009e7c:	05fa0000 	.word	0x05fa0000

08009e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e84:	4b04      	ldr	r3, [pc, #16]	; (8009e98 <__NVIC_GetPriorityGrouping+0x18>)
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	0a1b      	lsrs	r3, r3, #8
 8009e8a:	f003 0307 	and.w	r3, r3, #7
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	e000ed00 	.word	0xe000ed00

08009e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	db0b      	blt.n	8009ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	f003 021f 	and.w	r2, r3, #31
 8009eb4:	4907      	ldr	r1, [pc, #28]	; (8009ed4 <__NVIC_EnableIRQ+0x38>)
 8009eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eba:	095b      	lsrs	r3, r3, #5
 8009ebc:	2001      	movs	r0, #1
 8009ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8009ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	e000e100 	.word	0xe000e100

08009ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	6039      	str	r1, [r7, #0]
 8009ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	db0a      	blt.n	8009f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	490c      	ldr	r1, [pc, #48]	; (8009f24 <__NVIC_SetPriority+0x4c>)
 8009ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ef6:	0112      	lsls	r2, r2, #4
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	440b      	add	r3, r1
 8009efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f00:	e00a      	b.n	8009f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	4908      	ldr	r1, [pc, #32]	; (8009f28 <__NVIC_SetPriority+0x50>)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	3b04      	subs	r3, #4
 8009f10:	0112      	lsls	r2, r2, #4
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	440b      	add	r3, r1
 8009f16:	761a      	strb	r2, [r3, #24]
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	e000e100 	.word	0xe000e100
 8009f28:	e000ed00 	.word	0xe000ed00

08009f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b089      	sub	sp, #36	; 0x24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	f1c3 0307 	rsb	r3, r3, #7
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	bf28      	it	cs
 8009f4a:	2304      	movcs	r3, #4
 8009f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	3304      	adds	r3, #4
 8009f52:	2b06      	cmp	r3, #6
 8009f54:	d902      	bls.n	8009f5c <NVIC_EncodePriority+0x30>
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	3b03      	subs	r3, #3
 8009f5a:	e000      	b.n	8009f5e <NVIC_EncodePriority+0x32>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f60:	f04f 32ff 	mov.w	r2, #4294967295
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	fa02 f303 	lsl.w	r3, r2, r3
 8009f6a:	43da      	mvns	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	401a      	ands	r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f74:	f04f 31ff 	mov.w	r1, #4294967295
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7e:	43d9      	mvns	r1, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f84:	4313      	orrs	r3, r2
         );
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3724      	adds	r7, #36	; 0x24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff ff4c 	bl	8009e38 <__NVIC_SetPriorityGrouping>
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009fba:	f7ff ff61 	bl	8009e80 <__NVIC_GetPriorityGrouping>
 8009fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	68b9      	ldr	r1, [r7, #8]
 8009fc4:	6978      	ldr	r0, [r7, #20]
 8009fc6:	f7ff ffb1 	bl	8009f2c <NVIC_EncodePriority>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7ff ff80 	bl	8009ed8 <__NVIC_SetPriority>
}
 8009fd8:	bf00      	nop
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff ff54 	bl	8009e9c <__NVIC_EnableIRQ>
}
 8009ff4:	bf00      	nop
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a008:	f7ff f93c 	bl	8009284 <HAL_GetTick>
 800a00c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e099      	b.n	800a14c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0201 	bic.w	r2, r2, #1
 800a036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a038:	e00f      	b.n	800a05a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a03a:	f7ff f923 	bl	8009284 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	2b05      	cmp	r3, #5
 800a046:	d908      	bls.n	800a05a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2203      	movs	r2, #3
 800a052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e078      	b.n	800a14c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1e8      	bne.n	800a03a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4b38      	ldr	r3, [pc, #224]	; (800a154 <HAL_DMA_Init+0x158>)
 800a074:	4013      	ands	r3, r2
 800a076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a09e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d107      	bne.n	800a0c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f023 0307 	bic.w	r3, r3, #7
 800a0da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d117      	bne.n	800a11e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00e      	beq.n	800a11e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fb09 	bl	800a718 <DMA_CheckFifoParam>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d008      	beq.n	800a11e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2240      	movs	r2, #64	; 0x40
 800a110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a11a:	2301      	movs	r3, #1
 800a11c:	e016      	b.n	800a14c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fac0 	bl	800a6ac <DMA_CalcBaseAndBitshift>
 800a12c:	4603      	mov	r3, r0
 800a12e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a134:	223f      	movs	r2, #63	; 0x3f
 800a136:	409a      	lsls	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	e010803f 	.word	0xe010803f

0800a158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a176:	2b01      	cmp	r3, #1
 800a178:	d101      	bne.n	800a17e <HAL_DMA_Start_IT+0x26>
 800a17a:	2302      	movs	r3, #2
 800a17c:	e048      	b.n	800a210 <HAL_DMA_Start_IT+0xb8>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d137      	bne.n	800a202 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2202      	movs	r2, #2
 800a196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 fa52 	bl	800a650 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b0:	223f      	movs	r2, #63	; 0x3f
 800a1b2:	409a      	lsls	r2, r3
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f042 0216 	orr.w	r2, r2, #22
 800a1c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	695a      	ldr	r2, [r3, #20]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d007      	beq.n	800a1f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f042 0208 	orr.w	r2, r2, #8
 800a1ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0201 	orr.w	r2, r2, #1
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	e005      	b.n	800a20e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a20a:	2302      	movs	r3, #2
 800a20c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a224:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a226:	f7ff f82d 	bl	8009284 <HAL_GetTick>
 800a22a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d008      	beq.n	800a24a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2280      	movs	r2, #128	; 0x80
 800a23c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e052      	b.n	800a2f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0216 	bic.w	r2, r2, #22
 800a258:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695a      	ldr	r2, [r3, #20]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a268:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d103      	bne.n	800a27a <HAL_DMA_Abort+0x62>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a276:	2b00      	cmp	r3, #0
 800a278:	d007      	beq.n	800a28a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f022 0208 	bic.w	r2, r2, #8
 800a288:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 0201 	bic.w	r2, r2, #1
 800a298:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a29a:	e013      	b.n	800a2c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a29c:	f7fe fff2 	bl	8009284 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b05      	cmp	r3, #5
 800a2a8:	d90c      	bls.n	800a2c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2220      	movs	r2, #32
 800a2ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2203      	movs	r2, #3
 800a2bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e015      	b.n	800a2f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e4      	bne.n	800a29c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2d6:	223f      	movs	r2, #63	; 0x3f
 800a2d8:	409a      	lsls	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d004      	beq.n	800a316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2280      	movs	r2, #128	; 0x80
 800a310:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e00c      	b.n	800a330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2205      	movs	r2, #5
 800a31a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f022 0201 	bic.w	r2, r2, #1
 800a32c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a344:	2300      	movs	r3, #0
 800a346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a348:	4b92      	ldr	r3, [pc, #584]	; (800a594 <HAL_DMA_IRQHandler+0x258>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a92      	ldr	r2, [pc, #584]	; (800a598 <HAL_DMA_IRQHandler+0x25c>)
 800a34e:	fba2 2303 	umull	r2, r3, r2, r3
 800a352:	0a9b      	lsrs	r3, r3, #10
 800a354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a35a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a366:	2208      	movs	r2, #8
 800a368:	409a      	lsls	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4013      	ands	r3, r2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d01a      	beq.n	800a3a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d013      	beq.n	800a3a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f022 0204 	bic.w	r2, r2, #4
 800a38e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a394:	2208      	movs	r2, #8
 800a396:	409a      	lsls	r2, r3
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a0:	f043 0201 	orr.w	r2, r3, #1
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	409a      	lsls	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d012      	beq.n	800a3de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00b      	beq.n	800a3de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	409a      	lsls	r2, r3
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d6:	f043 0202 	orr.w	r2, r3, #2
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e2:	2204      	movs	r2, #4
 800a3e4:	409a      	lsls	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d012      	beq.n	800a414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00b      	beq.n	800a414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a400:	2204      	movs	r2, #4
 800a402:	409a      	lsls	r2, r3
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40c:	f043 0204 	orr.w	r2, r3, #4
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a418:	2210      	movs	r2, #16
 800a41a:	409a      	lsls	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4013      	ands	r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d043      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0308 	and.w	r3, r3, #8
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d03c      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a436:	2210      	movs	r2, #16
 800a438:	409a      	lsls	r2, r3
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d018      	beq.n	800a47e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d108      	bne.n	800a46c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d024      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	4798      	blx	r3
 800a46a:	e01f      	b.n	800a4ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01b      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	4798      	blx	r3
 800a47c:	e016      	b.n	800a4ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d107      	bne.n	800a49c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 0208 	bic.w	r2, r2, #8
 800a49a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	409a      	lsls	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 808e 	beq.w	800a5da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 8086 	beq.w	800a5da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	409a      	lsls	r2, r3
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	d136      	bne.n	800a554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0216 	bic.w	r2, r2, #22
 800a4f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	695a      	ldr	r2, [r3, #20]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d103      	bne.n	800a516 <HAL_DMA_IRQHandler+0x1da>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a512:	2b00      	cmp	r3, #0
 800a514:	d007      	beq.n	800a526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0208 	bic.w	r2, r2, #8
 800a524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52a:	223f      	movs	r2, #63	; 0x3f
 800a52c:	409a      	lsls	r2, r3
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a546:	2b00      	cmp	r3, #0
 800a548:	d07d      	beq.n	800a646 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	4798      	blx	r3
        }
        return;
 800a552:	e078      	b.n	800a646 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d01c      	beq.n	800a59c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d108      	bne.n	800a582 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a574:	2b00      	cmp	r3, #0
 800a576:	d030      	beq.n	800a5da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	4798      	blx	r3
 800a580:	e02b      	b.n	800a5da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d027      	beq.n	800a5da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
 800a592:	e022      	b.n	800a5da <HAL_DMA_IRQHandler+0x29e>
 800a594:	20000198 	.word	0x20000198
 800a598:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10f      	bne.n	800a5ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0210 	bic.w	r2, r2, #16
 800a5b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d032      	beq.n	800a648 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d022      	beq.n	800a634 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2205      	movs	r2, #5
 800a5f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0201 	bic.w	r2, r2, #1
 800a604:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	3301      	adds	r3, #1
 800a60a:	60bb      	str	r3, [r7, #8]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d307      	bcc.n	800a622 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f2      	bne.n	800a606 <HAL_DMA_IRQHandler+0x2ca>
 800a620:	e000      	b.n	800a624 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a622:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d005      	beq.n	800a648 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
 800a644:	e000      	b.n	800a648 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a646:	bf00      	nop
    }
  }
}
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop

0800a650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a66c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	2b40      	cmp	r3, #64	; 0x40
 800a67c:	d108      	bne.n	800a690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a68e:	e007      	b.n	800a6a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	60da      	str	r2, [r3, #12]
}
 800a6a0:	bf00      	nop
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	3b10      	subs	r3, #16
 800a6bc:	4a13      	ldr	r2, [pc, #76]	; (800a70c <DMA_CalcBaseAndBitshift+0x60>)
 800a6be:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c2:	091b      	lsrs	r3, r3, #4
 800a6c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a6c6:	4a12      	ldr	r2, [pc, #72]	; (800a710 <DMA_CalcBaseAndBitshift+0x64>)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d908      	bls.n	800a6ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	4b0c      	ldr	r3, [pc, #48]	; (800a714 <DMA_CalcBaseAndBitshift+0x68>)
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	1d1a      	adds	r2, r3, #4
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	659a      	str	r2, [r3, #88]	; 0x58
 800a6ea:	e006      	b.n	800a6fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4b08      	ldr	r3, [pc, #32]	; (800a714 <DMA_CalcBaseAndBitshift+0x68>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	aaaaaaab 	.word	0xaaaaaaab
 800a710:	080176b0 	.word	0x080176b0
 800a714:	fffffc00 	.word	0xfffffc00

0800a718 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a728:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d11f      	bne.n	800a772 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b03      	cmp	r3, #3
 800a736:	d855      	bhi.n	800a7e4 <DMA_CheckFifoParam+0xcc>
 800a738:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <DMA_CheckFifoParam+0x28>)
 800a73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73e:	bf00      	nop
 800a740:	0800a751 	.word	0x0800a751
 800a744:	0800a763 	.word	0x0800a763
 800a748:	0800a751 	.word	0x0800a751
 800a74c:	0800a7e5 	.word	0x0800a7e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d045      	beq.n	800a7e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a760:	e042      	b.n	800a7e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a766:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a76a:	d13f      	bne.n	800a7ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a770:	e03c      	b.n	800a7ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a77a:	d121      	bne.n	800a7c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d836      	bhi.n	800a7f0 <DMA_CheckFifoParam+0xd8>
 800a782:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <DMA_CheckFifoParam+0x70>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a799 	.word	0x0800a799
 800a78c:	0800a79f 	.word	0x0800a79f
 800a790:	0800a799 	.word	0x0800a799
 800a794:	0800a7b1 	.word	0x0800a7b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	73fb      	strb	r3, [r7, #15]
      break;
 800a79c:	e02f      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d024      	beq.n	800a7f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7ae:	e021      	b.n	800a7f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a7b8:	d11e      	bne.n	800a7f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a7be:	e01b      	b.n	800a7f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d902      	bls.n	800a7cc <DMA_CheckFifoParam+0xb4>
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d003      	beq.n	800a7d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a7ca:	e018      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a7d0:	e015      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00e      	beq.n	800a7fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e2:	e00b      	b.n	800a7fc <DMA_CheckFifoParam+0xe4>
      break;
 800a7e4:	bf00      	nop
 800a7e6:	e00a      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      break;
 800a7e8:	bf00      	nop
 800a7ea:	e008      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      break;
 800a7ec:	bf00      	nop
 800a7ee:	e006      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      break;
 800a7f0:	bf00      	nop
 800a7f2:	e004      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      break;
 800a7f4:	bf00      	nop
 800a7f6:	e002      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      break;   
 800a7f8:	bf00      	nop
 800a7fa:	e000      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      break;
 800a7fc:	bf00      	nop
    }
  } 
  
  return status; 
 800a7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b089      	sub	sp, #36	; 0x24
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a816:	2300      	movs	r3, #0
 800a818:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a81e:	2300      	movs	r3, #0
 800a820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a822:	2300      	movs	r3, #0
 800a824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a826:	2300      	movs	r3, #0
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	e175      	b.n	800ab18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a82c:	2201      	movs	r2, #1
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	fa02 f303 	lsl.w	r3, r2, r3
 800a834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	4013      	ands	r3, r2
 800a83e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	429a      	cmp	r2, r3
 800a846:	f040 8164 	bne.w	800ab12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d00b      	beq.n	800a86a <HAL_GPIO_Init+0x5e>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2b02      	cmp	r3, #2
 800a858:	d007      	beq.n	800a86a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a85e:	2b11      	cmp	r3, #17
 800a860:	d003      	beq.n	800a86a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	2b12      	cmp	r3, #18
 800a868:	d130      	bne.n	800a8cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	2203      	movs	r2, #3
 800a876:	fa02 f303 	lsl.w	r3, r2, r3
 800a87a:	43db      	mvns	r3, r3
 800a87c:	69ba      	ldr	r2, [r7, #24]
 800a87e:	4013      	ands	r3, r2
 800a880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	4313      	orrs	r3, r2
 800a892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a8:	43db      	mvns	r3, r3
 800a8aa:	69ba      	ldr	r2, [r7, #24]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	091b      	lsrs	r3, r3, #4
 800a8b6:	f003 0201 	and.w	r2, r3, #1
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8dc:	43db      	mvns	r3, r3
 800a8de:	69ba      	ldr	r2, [r7, #24]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69ba      	ldr	r2, [r7, #24]
 800a8fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b02      	cmp	r3, #2
 800a902:	d003      	beq.n	800a90c <HAL_GPIO_Init+0x100>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	2b12      	cmp	r3, #18
 800a90a:	d123      	bne.n	800a954 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	08da      	lsrs	r2, r3, #3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	3208      	adds	r2, #8
 800a914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	f003 0307 	and.w	r3, r3, #7
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	220f      	movs	r2, #15
 800a924:	fa02 f303 	lsl.w	r3, r2, r3
 800a928:	43db      	mvns	r3, r3
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	4013      	ands	r3, r2
 800a92e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	691a      	ldr	r2, [r3, #16]
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	fa02 f303 	lsl.w	r3, r2, r3
 800a940:	69ba      	ldr	r2, [r7, #24]
 800a942:	4313      	orrs	r3, r2
 800a944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	08da      	lsrs	r2, r3, #3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3208      	adds	r2, #8
 800a94e:	69b9      	ldr	r1, [r7, #24]
 800a950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	2203      	movs	r2, #3
 800a960:	fa02 f303 	lsl.w	r3, r2, r3
 800a964:	43db      	mvns	r3, r3
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	4013      	ands	r3, r2
 800a96a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	f003 0203 	and.w	r2, r3, #3
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	fa02 f303 	lsl.w	r3, r2, r3
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	4313      	orrs	r3, r2
 800a980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 80be 	beq.w	800ab12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a996:	4b65      	ldr	r3, [pc, #404]	; (800ab2c <HAL_GPIO_Init+0x320>)
 800a998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99a:	4a64      	ldr	r2, [pc, #400]	; (800ab2c <HAL_GPIO_Init+0x320>)
 800a99c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9a0:	6453      	str	r3, [r2, #68]	; 0x44
 800a9a2:	4b62      	ldr	r3, [pc, #392]	; (800ab2c <HAL_GPIO_Init+0x320>)
 800a9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a9ae:	4a60      	ldr	r2, [pc, #384]	; (800ab30 <HAL_GPIO_Init+0x324>)
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	089b      	lsrs	r3, r3, #2
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	220f      	movs	r2, #15
 800a9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ca:	43db      	mvns	r3, r3
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a57      	ldr	r2, [pc, #348]	; (800ab34 <HAL_GPIO_Init+0x328>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d037      	beq.n	800aa4a <HAL_GPIO_Init+0x23e>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a56      	ldr	r2, [pc, #344]	; (800ab38 <HAL_GPIO_Init+0x32c>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d031      	beq.n	800aa46 <HAL_GPIO_Init+0x23a>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a55      	ldr	r2, [pc, #340]	; (800ab3c <HAL_GPIO_Init+0x330>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d02b      	beq.n	800aa42 <HAL_GPIO_Init+0x236>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a54      	ldr	r2, [pc, #336]	; (800ab40 <HAL_GPIO_Init+0x334>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d025      	beq.n	800aa3e <HAL_GPIO_Init+0x232>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a53      	ldr	r2, [pc, #332]	; (800ab44 <HAL_GPIO_Init+0x338>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d01f      	beq.n	800aa3a <HAL_GPIO_Init+0x22e>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a52      	ldr	r2, [pc, #328]	; (800ab48 <HAL_GPIO_Init+0x33c>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d019      	beq.n	800aa36 <HAL_GPIO_Init+0x22a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a51      	ldr	r2, [pc, #324]	; (800ab4c <HAL_GPIO_Init+0x340>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d013      	beq.n	800aa32 <HAL_GPIO_Init+0x226>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a50      	ldr	r2, [pc, #320]	; (800ab50 <HAL_GPIO_Init+0x344>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d00d      	beq.n	800aa2e <HAL_GPIO_Init+0x222>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a4f      	ldr	r2, [pc, #316]	; (800ab54 <HAL_GPIO_Init+0x348>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d007      	beq.n	800aa2a <HAL_GPIO_Init+0x21e>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a4e      	ldr	r2, [pc, #312]	; (800ab58 <HAL_GPIO_Init+0x34c>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d101      	bne.n	800aa26 <HAL_GPIO_Init+0x21a>
 800aa22:	2309      	movs	r3, #9
 800aa24:	e012      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa26:	230a      	movs	r3, #10
 800aa28:	e010      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa2a:	2308      	movs	r3, #8
 800aa2c:	e00e      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa2e:	2307      	movs	r3, #7
 800aa30:	e00c      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa32:	2306      	movs	r3, #6
 800aa34:	e00a      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa36:	2305      	movs	r3, #5
 800aa38:	e008      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa3a:	2304      	movs	r3, #4
 800aa3c:	e006      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e004      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa42:	2302      	movs	r3, #2
 800aa44:	e002      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e000      	b.n	800aa4c <HAL_GPIO_Init+0x240>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	f002 0203 	and.w	r2, r2, #3
 800aa52:	0092      	lsls	r2, r2, #2
 800aa54:	4093      	lsls	r3, r2
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800aa5c:	4934      	ldr	r1, [pc, #208]	; (800ab30 <HAL_GPIO_Init+0x324>)
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	089b      	lsrs	r3, r3, #2
 800aa62:	3302      	adds	r3, #2
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800aa6a:	4b3c      	ldr	r3, [pc, #240]	; (800ab5c <HAL_GPIO_Init+0x350>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	43db      	mvns	r3, r3
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	4013      	ands	r3, r2
 800aa78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800aa8e:	4a33      	ldr	r2, [pc, #204]	; (800ab5c <HAL_GPIO_Init+0x350>)
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800aa94:	4b31      	ldr	r3, [pc, #196]	; (800ab5c <HAL_GPIO_Init+0x350>)
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	43db      	mvns	r3, r3
 800aa9e:	69ba      	ldr	r2, [r7, #24]
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aab8:	4a28      	ldr	r2, [pc, #160]	; (800ab5c <HAL_GPIO_Init+0x350>)
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800aabe:	4b27      	ldr	r3, [pc, #156]	; (800ab5c <HAL_GPIO_Init+0x350>)
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	43db      	mvns	r3, r3
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	4013      	ands	r3, r2
 800aacc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	4313      	orrs	r3, r2
 800aae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aae2:	4a1e      	ldr	r2, [pc, #120]	; (800ab5c <HAL_GPIO_Init+0x350>)
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aae8:	4b1c      	ldr	r3, [pc, #112]	; (800ab5c <HAL_GPIO_Init+0x350>)
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	43db      	mvns	r3, r3
 800aaf2:	69ba      	ldr	r2, [r7, #24]
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d003      	beq.n	800ab0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ab04:	69ba      	ldr	r2, [r7, #24]
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ab0c:	4a13      	ldr	r2, [pc, #76]	; (800ab5c <HAL_GPIO_Init+0x350>)
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	3301      	adds	r3, #1
 800ab16:	61fb      	str	r3, [r7, #28]
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	2b0f      	cmp	r3, #15
 800ab1c:	f67f ae86 	bls.w	800a82c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ab20:	bf00      	nop
 800ab22:	3724      	adds	r7, #36	; 0x24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	40023800 	.word	0x40023800
 800ab30:	40013800 	.word	0x40013800
 800ab34:	40020000 	.word	0x40020000
 800ab38:	40020400 	.word	0x40020400
 800ab3c:	40020800 	.word	0x40020800
 800ab40:	40020c00 	.word	0x40020c00
 800ab44:	40021000 	.word	0x40021000
 800ab48:	40021400 	.word	0x40021400
 800ab4c:	40021800 	.word	0x40021800
 800ab50:	40021c00 	.word	0x40021c00
 800ab54:	40022000 	.word	0x40022000
 800ab58:	40022400 	.word	0x40022400
 800ab5c:	40013c00 	.word	0x40013c00

0800ab60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	691a      	ldr	r2, [r3, #16]
 800ab70:	887b      	ldrh	r3, [r7, #2]
 800ab72:	4013      	ands	r3, r2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	73fb      	strb	r3, [r7, #15]
 800ab7c:	e001      	b.n	800ab82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	807b      	strh	r3, [r7, #2]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aba0:	787b      	ldrb	r3, [r7, #1]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aba6:	887a      	ldrh	r2, [r7, #2]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800abac:	e003      	b.n	800abb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800abae:	887b      	ldrh	r3, [r7, #2]
 800abb0:	041a      	lsls	r2, r3, #16
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	619a      	str	r2, [r3, #24]
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	460b      	mov	r3, r1
 800abcc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	695a      	ldr	r2, [r3, #20]
 800abd2:	887b      	ldrh	r3, [r7, #2]
 800abd4:	4013      	ands	r3, r2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d004      	beq.n	800abe4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800abda:	887b      	ldrh	r3, [r7, #2]
 800abdc:	041a      	lsls	r2, r3, #16
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800abe2:	e002      	b.n	800abea <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800abe4:	887a      	ldrh	r2, [r7, #2]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	619a      	str	r2, [r3, #24]
}
 800abea:	bf00      	nop
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
	...

0800abf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ac02:	4b08      	ldr	r3, [pc, #32]	; (800ac24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ac04:	695a      	ldr	r2, [r3, #20]
 800ac06:	88fb      	ldrh	r3, [r7, #6]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d006      	beq.n	800ac1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ac0e:	4a05      	ldr	r2, [pc, #20]	; (800ac24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ac10:	88fb      	ldrh	r3, [r7, #6]
 800ac12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ac14:	88fb      	ldrh	r3, [r7, #6]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 f806 	bl	800ac28 <HAL_GPIO_EXTI_Callback>
  }
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	40013c00 	.word	0x40013c00

0800ac28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
	...

0800ac40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e07f      	b.n	800ad52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d106      	bne.n	800ac6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7fd fa42 	bl	80080f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2224      	movs	r2, #36	; 0x24
 800ac70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f022 0201 	bic.w	r2, r2, #1
 800ac82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ac90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689a      	ldr	r2, [r3, #8]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d107      	bne.n	800acba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689a      	ldr	r2, [r3, #8]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acb6:	609a      	str	r2, [r3, #8]
 800acb8:	e006      	b.n	800acc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800acc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d104      	bne.n	800acda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6859      	ldr	r1, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <HAL_I2C_Init+0x11c>)
 800ace6:	430b      	orrs	r3, r1
 800ace8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68da      	ldr	r2, [r3, #12]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691a      	ldr	r2, [r3, #16]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	ea42 0103 	orr.w	r1, r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	021a      	lsls	r2, r3, #8
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	430a      	orrs	r2, r1
 800ad12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	69d9      	ldr	r1, [r3, #28]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a1a      	ldr	r2, [r3, #32]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0201 	orr.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2220      	movs	r2, #32
 800ad3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	02008000 	.word	0x02008000

0800ad60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	607a      	str	r2, [r7, #4]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	817b      	strh	r3, [r7, #10]
 800ad70:	4613      	mov	r3, r2
 800ad72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b20      	cmp	r3, #32
 800ad7e:	f040 80da 	bne.w	800af36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d101      	bne.n	800ad90 <HAL_I2C_Master_Transmit+0x30>
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	e0d3      	b.n	800af38 <HAL_I2C_Master_Transmit+0x1d8>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad98:	f7fe fa74 	bl	8009284 <HAL_GetTick>
 800ad9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	2319      	movs	r3, #25
 800ada4:	2201      	movs	r2, #1
 800ada6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 fc5c 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e0be      	b.n	800af38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2221      	movs	r2, #33	; 0x21
 800adbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2210      	movs	r2, #16
 800adc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	893a      	ldrh	r2, [r7, #8]
 800adda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	2bff      	cmp	r3, #255	; 0xff
 800adea:	d90e      	bls.n	800ae0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	22ff      	movs	r2, #255	; 0xff
 800adf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	8979      	ldrh	r1, [r7, #10]
 800adfa:	4b51      	ldr	r3, [pc, #324]	; (800af40 <HAL_I2C_Master_Transmit+0x1e0>)
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 fdbe 	bl	800b984 <I2C_TransferConfig>
 800ae08:	e06c      	b.n	800aee4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	8979      	ldrh	r1, [r7, #10]
 800ae1c:	4b48      	ldr	r3, [pc, #288]	; (800af40 <HAL_I2C_Master_Transmit+0x1e0>)
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f000 fdad 	bl	800b984 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800ae2a:	e05b      	b.n	800aee4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	6a39      	ldr	r1, [r7, #32]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 fc59 	bl	800b6e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e07b      	b.n	800af38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	781a      	ldrb	r2, [r3, #0]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d034      	beq.n	800aee4 <HAL_I2C_Master_Transmit+0x184>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d130      	bne.n	800aee4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2180      	movs	r1, #128	; 0x80
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 fbeb 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e04d      	b.n	800af38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	2bff      	cmp	r3, #255	; 0xff
 800aea4:	d90e      	bls.n	800aec4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	22ff      	movs	r2, #255	; 0xff
 800aeaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	8979      	ldrh	r1, [r7, #10]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 fd61 	bl	800b984 <I2C_TransferConfig>
 800aec2:	e00f      	b.n	800aee4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	8979      	ldrh	r1, [r7, #10]
 800aed6:	2300      	movs	r3, #0
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 fd50 	bl	800b984 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d19e      	bne.n	800ae2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	6a39      	ldr	r1, [r7, #32]
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f000 fc38 	bl	800b768 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e01a      	b.n	800af38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2220      	movs	r2, #32
 800af08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6859      	ldr	r1, [r3, #4]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	4b0b      	ldr	r3, [pc, #44]	; (800af44 <HAL_I2C_Master_Transmit+0x1e4>)
 800af16:	400b      	ands	r3, r1
 800af18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	e000      	b.n	800af38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800af36:	2302      	movs	r3, #2
  }
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3718      	adds	r7, #24
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	80002000 	.word	0x80002000
 800af44:	fe00e800 	.word	0xfe00e800

0800af48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af02      	add	r7, sp, #8
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	607a      	str	r2, [r7, #4]
 800af52:	461a      	mov	r2, r3
 800af54:	460b      	mov	r3, r1
 800af56:	817b      	strh	r3, [r7, #10]
 800af58:	4613      	mov	r3, r2
 800af5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b20      	cmp	r3, #32
 800af66:	f040 80db 	bne.w	800b120 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af70:	2b01      	cmp	r3, #1
 800af72:	d101      	bne.n	800af78 <HAL_I2C_Master_Receive+0x30>
 800af74:	2302      	movs	r3, #2
 800af76:	e0d4      	b.n	800b122 <HAL_I2C_Master_Receive+0x1da>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af80:	f7fe f980 	bl	8009284 <HAL_GetTick>
 800af84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	2319      	movs	r3, #25
 800af8c:	2201      	movs	r2, #1
 800af8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f000 fb68 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e0bf      	b.n	800b122 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2222      	movs	r2, #34	; 0x22
 800afa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2210      	movs	r2, #16
 800afae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	893a      	ldrh	r2, [r7, #8]
 800afc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afce:	b29b      	uxth	r3, r3
 800afd0:	2bff      	cmp	r3, #255	; 0xff
 800afd2:	d90e      	bls.n	800aff2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	22ff      	movs	r2, #255	; 0xff
 800afd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	8979      	ldrh	r1, [r7, #10]
 800afe2:	4b52      	ldr	r3, [pc, #328]	; (800b12c <HAL_I2C_Master_Receive+0x1e4>)
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 fcca 	bl	800b984 <I2C_TransferConfig>
 800aff0:	e06d      	b.n	800b0ce <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b000:	b2da      	uxtb	r2, r3
 800b002:	8979      	ldrh	r1, [r7, #10]
 800b004:	4b49      	ldr	r3, [pc, #292]	; (800b12c <HAL_I2C_Master_Receive+0x1e4>)
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 fcb9 	bl	800b984 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b012:	e05c      	b.n	800b0ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	6a39      	ldr	r1, [r7, #32]
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 fbe1 	bl	800b7e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e07c      	b.n	800b122 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	b2d2      	uxtb	r2, r2
 800b034:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b044:	3b01      	subs	r3, #1
 800b046:	b29a      	uxth	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b050:	b29b      	uxth	r3, r3
 800b052:	3b01      	subs	r3, #1
 800b054:	b29a      	uxth	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b05e:	b29b      	uxth	r3, r3
 800b060:	2b00      	cmp	r3, #0
 800b062:	d034      	beq.n	800b0ce <HAL_I2C_Master_Receive+0x186>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d130      	bne.n	800b0ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	2200      	movs	r2, #0
 800b074:	2180      	movs	r1, #128	; 0x80
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 faf6 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	e04d      	b.n	800b122 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	2bff      	cmp	r3, #255	; 0xff
 800b08e:	d90e      	bls.n	800b0ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	22ff      	movs	r2, #255	; 0xff
 800b094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	8979      	ldrh	r1, [r7, #10]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 fc6c 	bl	800b984 <I2C_TransferConfig>
 800b0ac:	e00f      	b.n	800b0ce <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	8979      	ldrh	r1, [r7, #10]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f000 fc5b 	bl	800b984 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d19d      	bne.n	800b014 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	6a39      	ldr	r1, [r7, #32]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 fb43 	bl	800b768 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e01a      	b.n	800b122 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6859      	ldr	r1, [r3, #4]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <HAL_I2C_Master_Receive+0x1e8>)
 800b100:	400b      	ands	r3, r1
 800b102:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2220      	movs	r2, #32
 800b108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	e000      	b.n	800b122 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b120:	2302      	movs	r3, #2
  }
}
 800b122:	4618      	mov	r0, r3
 800b124:	3718      	adds	r7, #24
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	80002400 	.word	0x80002400
 800b130:	fe00e800 	.word	0xfe00e800

0800b134 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af02      	add	r7, sp, #8
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	4608      	mov	r0, r1
 800b13e:	4611      	mov	r1, r2
 800b140:	461a      	mov	r2, r3
 800b142:	4603      	mov	r3, r0
 800b144:	817b      	strh	r3, [r7, #10]
 800b146:	460b      	mov	r3, r1
 800b148:	813b      	strh	r3, [r7, #8]
 800b14a:	4613      	mov	r3, r2
 800b14c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b20      	cmp	r3, #32
 800b158:	f040 80fd 	bne.w	800b356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <HAL_I2C_Mem_Read+0x34>
 800b162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d105      	bne.n	800b174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b16e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e0f1      	b.n	800b358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d101      	bne.n	800b182 <HAL_I2C_Mem_Read+0x4e>
 800b17e:	2302      	movs	r3, #2
 800b180:	e0ea      	b.n	800b358 <HAL_I2C_Mem_Read+0x224>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b18a:	f7fe f87b 	bl	8009284 <HAL_GetTick>
 800b18e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	2319      	movs	r3, #25
 800b196:	2201      	movs	r2, #1
 800b198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 fa63 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e0d5      	b.n	800b358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2222      	movs	r2, #34	; 0x22
 800b1b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2240      	movs	r2, #64	; 0x40
 800b1b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6a3a      	ldr	r2, [r7, #32]
 800b1c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b1cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b1d4:	88f8      	ldrh	r0, [r7, #6]
 800b1d6:	893a      	ldrh	r2, [r7, #8]
 800b1d8:	8979      	ldrh	r1, [r7, #10]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 f9c7 	bl	800b578 <I2C_RequestMemoryRead>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e0ad      	b.n	800b358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b200:	b29b      	uxth	r3, r3
 800b202:	2bff      	cmp	r3, #255	; 0xff
 800b204:	d90e      	bls.n	800b224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	22ff      	movs	r2, #255	; 0xff
 800b20a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b210:	b2da      	uxtb	r2, r3
 800b212:	8979      	ldrh	r1, [r7, #10]
 800b214:	4b52      	ldr	r3, [pc, #328]	; (800b360 <HAL_I2C_Mem_Read+0x22c>)
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 fbb1 	bl	800b984 <I2C_TransferConfig>
 800b222:	e00f      	b.n	800b244 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b228:	b29a      	uxth	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b232:	b2da      	uxtb	r2, r3
 800b234:	8979      	ldrh	r1, [r7, #10]
 800b236:	4b4a      	ldr	r3, [pc, #296]	; (800b360 <HAL_I2C_Mem_Read+0x22c>)
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 fba0 	bl	800b984 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	2200      	movs	r2, #0
 800b24c:	2104      	movs	r1, #4
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f000 fa0a 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e07c      	b.n	800b358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	b2d2      	uxtb	r2, r2
 800b26a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b27a:	3b01      	subs	r3, #1
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b286:	b29b      	uxth	r3, r3
 800b288:	3b01      	subs	r3, #1
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b294:	b29b      	uxth	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d034      	beq.n	800b304 <HAL_I2C_Mem_Read+0x1d0>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d130      	bne.n	800b304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2180      	movs	r1, #128	; 0x80
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f9db 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e04d      	b.n	800b358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	2bff      	cmp	r3, #255	; 0xff
 800b2c4:	d90e      	bls.n	800b2e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	22ff      	movs	r2, #255	; 0xff
 800b2ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	8979      	ldrh	r1, [r7, #10]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 fb51 	bl	800b984 <I2C_TransferConfig>
 800b2e2:	e00f      	b.n	800b304 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	8979      	ldrh	r1, [r7, #10]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 fb40 	bl	800b984 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b308:	b29b      	uxth	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d19a      	bne.n	800b244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 fa28 	bl	800b768 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e01a      	b.n	800b358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2220      	movs	r2, #32
 800b328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6859      	ldr	r1, [r3, #4]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	4b0b      	ldr	r3, [pc, #44]	; (800b364 <HAL_I2C_Mem_Read+0x230>)
 800b336:	400b      	ands	r3, r1
 800b338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	e000      	b.n	800b358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b356:	2302      	movs	r3, #2
  }
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	80002400 	.word	0x80002400
 800b364:	fe00e800 	.word	0xfe00e800

0800b368 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af02      	add	r7, sp, #8
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	460b      	mov	r3, r1
 800b376:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b378:	2300      	movs	r3, #0
 800b37a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b382:	b2db      	uxtb	r3, r3
 800b384:	2b20      	cmp	r3, #32
 800b386:	f040 80ef 	bne.w	800b568 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b398:	d101      	bne.n	800b39e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b39a:	2302      	movs	r3, #2
 800b39c:	e0e5      	b.n	800b56a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <HAL_I2C_IsDeviceReady+0x44>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	e0de      	b.n	800b56a <HAL_I2C_IsDeviceReady+0x202>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2224      	movs	r2, #36	; 0x24
 800b3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d105      	bne.n	800b3d6 <HAL_I2C_IsDeviceReady+0x6e>
 800b3ca:	897b      	ldrh	r3, [r7, #10]
 800b3cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b3d0:	4b68      	ldr	r3, [pc, #416]	; (800b574 <HAL_I2C_IsDeviceReady+0x20c>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	e004      	b.n	800b3e0 <HAL_I2C_IsDeviceReady+0x78>
 800b3d6:	897b      	ldrh	r3, [r7, #10]
 800b3d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3dc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	6812      	ldr	r2, [r2, #0]
 800b3e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b3e6:	f7fd ff4d 	bl	8009284 <HAL_GetTick>
 800b3ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	f003 0320 	and.w	r3, r3, #32
 800b3f6:	2b20      	cmp	r3, #32
 800b3f8:	bf0c      	ite	eq
 800b3fa:	2301      	moveq	r3, #1
 800b3fc:	2300      	movne	r3, #0
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	f003 0310 	and.w	r3, r3, #16
 800b40c:	2b10      	cmp	r3, #16
 800b40e:	bf0c      	ite	eq
 800b410:	2301      	moveq	r3, #1
 800b412:	2300      	movne	r3, #0
 800b414:	b2db      	uxtb	r3, r3
 800b416:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b418:	e034      	b.n	800b484 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b420:	d01a      	beq.n	800b458 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b422:	f7fd ff2f 	bl	8009284 <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d302      	bcc.n	800b438 <HAL_I2C_IsDeviceReady+0xd0>
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10f      	bne.n	800b458 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b444:	f043 0220 	orr.w	r2, r3, #32
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	e088      	b.n	800b56a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	f003 0320 	and.w	r3, r3, #32
 800b462:	2b20      	cmp	r3, #32
 800b464:	bf0c      	ite	eq
 800b466:	2301      	moveq	r3, #1
 800b468:	2300      	movne	r3, #0
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	f003 0310 	and.w	r3, r3, #16
 800b478:	2b10      	cmp	r3, #16
 800b47a:	bf0c      	ite	eq
 800b47c:	2301      	moveq	r3, #1
 800b47e:	2300      	movne	r3, #0
 800b480:	b2db      	uxtb	r3, r3
 800b482:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b484:	7ffb      	ldrb	r3, [r7, #31]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d102      	bne.n	800b490 <HAL_I2C_IsDeviceReady+0x128>
 800b48a:	7fbb      	ldrb	r3, [r7, #30]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0c4      	beq.n	800b41a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	f003 0310 	and.w	r3, r3, #16
 800b49a:	2b10      	cmp	r3, #16
 800b49c:	d01a      	beq.n	800b4d4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	2120      	movs	r1, #32
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 f8dd 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e058      	b.n	800b56a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2220      	movs	r2, #32
 800b4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	e04a      	b.n	800b56a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2120      	movs	r1, #32
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 f8c2 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d001      	beq.n	800b4ee <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e03d      	b.n	800b56a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2210      	movs	r2, #16
 800b4f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	429a      	cmp	r2, r3
 800b504:	d118      	bne.n	800b538 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b514:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2200      	movs	r2, #0
 800b51e:	2120      	movs	r1, #32
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 f8a1 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e01c      	b.n	800b56a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2220      	movs	r2, #32
 800b536:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	3301      	adds	r3, #1
 800b53c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	429a      	cmp	r2, r3
 800b544:	f63f af3d 	bhi.w	800b3c2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2220      	movs	r2, #32
 800b54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b554:	f043 0220 	orr.w	r2, r3, #32
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e000      	b.n	800b56a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800b568:	2302      	movs	r3, #2
  }
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3720      	adds	r7, #32
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	02002000 	.word	0x02002000

0800b578 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af02      	add	r7, sp, #8
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	4608      	mov	r0, r1
 800b582:	4611      	mov	r1, r2
 800b584:	461a      	mov	r2, r3
 800b586:	4603      	mov	r3, r0
 800b588:	817b      	strh	r3, [r7, #10]
 800b58a:	460b      	mov	r3, r1
 800b58c:	813b      	strh	r3, [r7, #8]
 800b58e:	4613      	mov	r3, r2
 800b590:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b592:	88fb      	ldrh	r3, [r7, #6]
 800b594:	b2da      	uxtb	r2, r3
 800b596:	8979      	ldrh	r1, [r7, #10]
 800b598:	4b20      	ldr	r3, [pc, #128]	; (800b61c <I2C_RequestMemoryRead+0xa4>)
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	2300      	movs	r3, #0
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 f9f0 	bl	800b984 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5a4:	69fa      	ldr	r2, [r7, #28]
 800b5a6:	69b9      	ldr	r1, [r7, #24]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f89d 	bl	800b6e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e02c      	b.n	800b612 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b5b8:	88fb      	ldrh	r3, [r7, #6]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d105      	bne.n	800b5ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5be:	893b      	ldrh	r3, [r7, #8]
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	629a      	str	r2, [r3, #40]	; 0x28
 800b5c8:	e015      	b.n	800b5f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b5ca:	893b      	ldrh	r3, [r7, #8]
 800b5cc:	0a1b      	lsrs	r3, r3, #8
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5d8:	69fa      	ldr	r2, [r7, #28]
 800b5da:	69b9      	ldr	r1, [r7, #24]
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 f883 	bl	800b6e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e012      	b.n	800b612 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5ec:	893b      	ldrh	r3, [r7, #8]
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2140      	movs	r1, #64	; 0x40
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f000 f831 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e000      	b.n	800b612 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	80002000 	.word	0x80002000

0800b620 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	f003 0302 	and.w	r3, r3, #2
 800b632:	2b02      	cmp	r3, #2
 800b634:	d103      	bne.n	800b63e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2200      	movs	r2, #0
 800b63c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	f003 0301 	and.w	r3, r3, #1
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d007      	beq.n	800b65c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	699a      	ldr	r2, [r3, #24]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f042 0201 	orr.w	r2, r2, #1
 800b65a:	619a      	str	r2, [r3, #24]
  }
}
 800b65c:	bf00      	nop
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	4613      	mov	r3, r2
 800b676:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b678:	e022      	b.n	800b6c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b680:	d01e      	beq.n	800b6c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b682:	f7fd fdff 	bl	8009284 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d302      	bcc.n	800b698 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d113      	bne.n	800b6c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b69c:	f043 0220 	orr.w	r2, r3, #32
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e00f      	b.n	800b6e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	699a      	ldr	r2, [r3, #24]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	bf0c      	ite	eq
 800b6d0:	2301      	moveq	r3, #1
 800b6d2:	2300      	movne	r3, #0
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d0cd      	beq.n	800b67a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b6f4:	e02c      	b.n	800b750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	68b9      	ldr	r1, [r7, #8]
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f000 f8dc 	bl	800b8b8 <I2C_IsAcknowledgeFailed>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d001      	beq.n	800b70a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e02a      	b.n	800b760 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b710:	d01e      	beq.n	800b750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b712:	f7fd fdb7 	bl	8009284 <HAL_GetTick>
 800b716:	4602      	mov	r2, r0
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d302      	bcc.n	800b728 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d113      	bne.n	800b750 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b72c:	f043 0220 	orr.w	r2, r3, #32
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2220      	movs	r2, #32
 800b738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e007      	b.n	800b760 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	f003 0302 	and.w	r3, r3, #2
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d1cb      	bne.n	800b6f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b774:	e028      	b.n	800b7c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	68b9      	ldr	r1, [r7, #8]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 f89c 	bl	800b8b8 <I2C_IsAcknowledgeFailed>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e026      	b.n	800b7d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b78a:	f7fd fd7b 	bl	8009284 <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	429a      	cmp	r2, r3
 800b798:	d302      	bcc.n	800b7a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d113      	bne.n	800b7c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a4:	f043 0220 	orr.w	r2, r3, #32
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e007      	b.n	800b7d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	f003 0320 	and.w	r3, r3, #32
 800b7d2:	2b20      	cmp	r3, #32
 800b7d4:	d1cf      	bne.n	800b776 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b7ec:	e055      	b.n	800b89a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	68b9      	ldr	r1, [r7, #8]
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f000 f860 	bl	800b8b8 <I2C_IsAcknowledgeFailed>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e053      	b.n	800b8aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	f003 0320 	and.w	r3, r3, #32
 800b80c:	2b20      	cmp	r3, #32
 800b80e:	d129      	bne.n	800b864 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	d105      	bne.n	800b82a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	e03f      	b.n	800b8aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2220      	movs	r2, #32
 800b830:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6859      	ldr	r1, [r3, #4]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	4b1d      	ldr	r3, [pc, #116]	; (800b8b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800b83e:	400b      	ands	r3, r1
 800b840:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2220      	movs	r2, #32
 800b84c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e022      	b.n	800b8aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b864:	f7fd fd0e 	bl	8009284 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	429a      	cmp	r2, r3
 800b872:	d302      	bcc.n	800b87a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10f      	bne.n	800b89a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87e:	f043 0220 	orr.w	r2, r3, #32
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2220      	movs	r2, #32
 800b88a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e007      	b.n	800b8aa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	699b      	ldr	r3, [r3, #24]
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d1a2      	bne.n	800b7ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	fe00e800 	.word	0xfe00e800

0800b8b8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	f003 0310 	and.w	r3, r3, #16
 800b8ce:	2b10      	cmp	r3, #16
 800b8d0:	d151      	bne.n	800b976 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8d2:	e022      	b.n	800b91a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8da:	d01e      	beq.n	800b91a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8dc:	f7fd fcd2 	bl	8009284 <HAL_GetTick>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d302      	bcc.n	800b8f2 <I2C_IsAcknowledgeFailed+0x3a>
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d113      	bne.n	800b91a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f6:	f043 0220 	orr.w	r2, r3, #32
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2220      	movs	r2, #32
 800b902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e02e      	b.n	800b978 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	f003 0320 	and.w	r3, r3, #32
 800b924:	2b20      	cmp	r3, #32
 800b926:	d1d5      	bne.n	800b8d4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2210      	movs	r2, #16
 800b92e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2220      	movs	r2, #32
 800b936:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7ff fe71 	bl	800b620 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6859      	ldr	r1, [r3, #4]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	4b0d      	ldr	r3, [pc, #52]	; (800b980 <I2C_IsAcknowledgeFailed+0xc8>)
 800b94a:	400b      	ands	r3, r1
 800b94c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b952:	f043 0204 	orr.w	r2, r3, #4
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2220      	movs	r2, #32
 800b95e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e000      	b.n	800b978 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	fe00e800 	.word	0xfe00e800

0800b984 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	607b      	str	r3, [r7, #4]
 800b98e:	460b      	mov	r3, r1
 800b990:	817b      	strh	r3, [r7, #10]
 800b992:	4613      	mov	r3, r2
 800b994:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685a      	ldr	r2, [r3, #4]
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	0d5b      	lsrs	r3, r3, #21
 800b9a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b9a4:	4b0d      	ldr	r3, [pc, #52]	; (800b9dc <I2C_TransferConfig+0x58>)
 800b9a6:	430b      	orrs	r3, r1
 800b9a8:	43db      	mvns	r3, r3
 800b9aa:	ea02 0103 	and.w	r1, r2, r3
 800b9ae:	897b      	ldrh	r3, [r7, #10]
 800b9b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b9b4:	7a7b      	ldrb	r3, [r7, #9]
 800b9b6:	041b      	lsls	r3, r3, #16
 800b9b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b9ce:	bf00      	nop
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	03ff63ff 	.word	0x03ff63ff

0800b9e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b20      	cmp	r3, #32
 800b9f4:	d138      	bne.n	800ba68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e032      	b.n	800ba6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2224      	movs	r2, #36	; 0x24
 800ba10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f022 0201 	bic.w	r2, r2, #1
 800ba22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ba32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6819      	ldr	r1, [r3, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f042 0201 	orr.w	r2, r2, #1
 800ba52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2220      	movs	r2, #32
 800ba58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	e000      	b.n	800ba6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba68:	2302      	movs	r3, #2
  }
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b085      	sub	sp, #20
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	2b20      	cmp	r3, #32
 800ba8a:	d139      	bne.n	800bb00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba96:	2302      	movs	r3, #2
 800ba98:	e033      	b.n	800bb02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2224      	movs	r2, #36	; 0x24
 800baa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f022 0201 	bic.w	r2, r2, #1
 800bab8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bac8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	021b      	lsls	r3, r3, #8
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f042 0201 	orr.w	r2, r2, #1
 800baea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	e000      	b.n	800bb02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bb00:	2302      	movs	r3, #2
  }
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
	...

0800bb10 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb18:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800bb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1c:	4a0a      	ldr	r2, [pc, #40]	; (800bb48 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800bb1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb22:	6453      	str	r3, [r2, #68]	; 0x44
 800bb24:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800bb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800bb30:	4b06      	ldr	r3, [pc, #24]	; (800bb4c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	4905      	ldr	r1, [pc, #20]	; (800bb4c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	604b      	str	r3, [r1, #4]
}
 800bb3c:	bf00      	nop
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	40023800 	.word	0x40023800
 800bb4c:	40013800 	.word	0x40013800

0800bb50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb52:	b08f      	sub	sp, #60	; 0x3c
 800bb54:	af0a      	add	r7, sp, #40	; 0x28
 800bb56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e116      	b.n	800bd90 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d106      	bne.n	800bb82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7fc fdf3 	bl	8008768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2203      	movs	r2, #3
 800bb86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d102      	bne.n	800bb9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f003 fc0d 	bl	800f3c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	603b      	str	r3, [r7, #0]
 800bbac:	687e      	ldr	r6, [r7, #4]
 800bbae:	466d      	mov	r5, sp
 800bbb0:	f106 0410 	add.w	r4, r6, #16
 800bbb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bbb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bbb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bbba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bbbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bbc0:	e885 0003 	stmia.w	r5, {r0, r1}
 800bbc4:	1d33      	adds	r3, r6, #4
 800bbc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bbc8:	6838      	ldr	r0, [r7, #0]
 800bbca:	f003 fba1 	bl	800f310 <USB_CoreInit>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d005      	beq.n	800bbe0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e0d7      	b.n	800bd90 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f003 fbfb 	bl	800f3e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bbec:	2300      	movs	r3, #0
 800bbee:	73fb      	strb	r3, [r7, #15]
 800bbf0:	e04a      	b.n	800bc88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bbf2:	7bfa      	ldrb	r2, [r7, #15]
 800bbf4:	6879      	ldr	r1, [r7, #4]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	1a9b      	subs	r3, r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	440b      	add	r3, r1
 800bc00:	333d      	adds	r3, #61	; 0x3d
 800bc02:	2201      	movs	r2, #1
 800bc04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bc06:	7bfa      	ldrb	r2, [r7, #15]
 800bc08:	6879      	ldr	r1, [r7, #4]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	00db      	lsls	r3, r3, #3
 800bc0e:	1a9b      	subs	r3, r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	440b      	add	r3, r1
 800bc14:	333c      	adds	r3, #60	; 0x3c
 800bc16:	7bfa      	ldrb	r2, [r7, #15]
 800bc18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bc1a:	7bfa      	ldrb	r2, [r7, #15]
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	b298      	uxth	r0, r3
 800bc20:	6879      	ldr	r1, [r7, #4]
 800bc22:	4613      	mov	r3, r2
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	1a9b      	subs	r3, r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	440b      	add	r3, r1
 800bc2c:	3342      	adds	r3, #66	; 0x42
 800bc2e:	4602      	mov	r2, r0
 800bc30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bc32:	7bfa      	ldrb	r2, [r7, #15]
 800bc34:	6879      	ldr	r1, [r7, #4]
 800bc36:	4613      	mov	r3, r2
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	1a9b      	subs	r3, r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	440b      	add	r3, r1
 800bc40:	333f      	adds	r3, #63	; 0x3f
 800bc42:	2200      	movs	r2, #0
 800bc44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bc46:	7bfa      	ldrb	r2, [r7, #15]
 800bc48:	6879      	ldr	r1, [r7, #4]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	1a9b      	subs	r3, r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	440b      	add	r3, r1
 800bc54:	3344      	adds	r3, #68	; 0x44
 800bc56:	2200      	movs	r2, #0
 800bc58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bc5a:	7bfa      	ldrb	r2, [r7, #15]
 800bc5c:	6879      	ldr	r1, [r7, #4]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	00db      	lsls	r3, r3, #3
 800bc62:	1a9b      	subs	r3, r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	440b      	add	r3, r1
 800bc68:	3348      	adds	r3, #72	; 0x48
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bc6e:	7bfa      	ldrb	r2, [r7, #15]
 800bc70:	6879      	ldr	r1, [r7, #4]
 800bc72:	4613      	mov	r3, r2
 800bc74:	00db      	lsls	r3, r3, #3
 800bc76:	1a9b      	subs	r3, r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	440b      	add	r3, r1
 800bc7c:	3350      	adds	r3, #80	; 0x50
 800bc7e:	2200      	movs	r2, #0
 800bc80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
 800bc84:	3301      	adds	r3, #1
 800bc86:	73fb      	strb	r3, [r7, #15]
 800bc88:	7bfa      	ldrb	r2, [r7, #15]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d3af      	bcc.n	800bbf2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]
 800bc96:	e044      	b.n	800bd22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bc98:	7bfa      	ldrb	r2, [r7, #15]
 800bc9a:	6879      	ldr	r1, [r7, #4]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	440b      	add	r3, r1
 800bca6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800bcaa:	2200      	movs	r2, #0
 800bcac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bcae:	7bfa      	ldrb	r2, [r7, #15]
 800bcb0:	6879      	ldr	r1, [r7, #4]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	00db      	lsls	r3, r3, #3
 800bcb6:	1a9b      	subs	r3, r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	440b      	add	r3, r1
 800bcbc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bcc0:	7bfa      	ldrb	r2, [r7, #15]
 800bcc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bcc4:	7bfa      	ldrb	r2, [r7, #15]
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	1a9b      	subs	r3, r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	440b      	add	r3, r1
 800bcd2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bcda:	7bfa      	ldrb	r2, [r7, #15]
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	4613      	mov	r3, r2
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	1a9b      	subs	r3, r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	440b      	add	r3, r1
 800bce8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bcec:	2200      	movs	r2, #0
 800bcee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bcf0:	7bfa      	ldrb	r2, [r7, #15]
 800bcf2:	6879      	ldr	r1, [r7, #4]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	00db      	lsls	r3, r3, #3
 800bcf8:	1a9b      	subs	r3, r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	440b      	add	r3, r1
 800bcfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bd06:	7bfa      	ldrb	r2, [r7, #15]
 800bd08:	6879      	ldr	r1, [r7, #4]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	00db      	lsls	r3, r3, #3
 800bd0e:	1a9b      	subs	r3, r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	440b      	add	r3, r1
 800bd14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	73fb      	strb	r3, [r7, #15]
 800bd22:	7bfa      	ldrb	r2, [r7, #15]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d3b5      	bcc.n	800bc98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	603b      	str	r3, [r7, #0]
 800bd32:	687e      	ldr	r6, [r7, #4]
 800bd34:	466d      	mov	r5, sp
 800bd36:	f106 0410 	add.w	r4, r6, #16
 800bd3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd42:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bd46:	e885 0003 	stmia.w	r5, {r0, r1}
 800bd4a:	1d33      	adds	r3, r6, #4
 800bd4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd4e:	6838      	ldr	r0, [r7, #0]
 800bd50:	f003 fb72 	bl	800f438 <USB_DevInit>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d005      	beq.n	800bd66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e014      	b.n	800bd90 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d102      	bne.n	800bd84 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f80a 	bl	800bd98 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f003 fd24 	bl	800f7d6 <USB_DevDisconnect>

  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdc6:	4b05      	ldr	r3, [pc, #20]	; (800bddc <HAL_PCDEx_ActivateLPM+0x44>)
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	10000003 	.word	0x10000003

0800bde0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bde4:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a04      	ldr	r2, [pc, #16]	; (800bdfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdee:	6013      	str	r3, [r2, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	40007000 	.word	0x40007000

0800be00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800be08:	2300      	movs	r3, #0
 800be0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e29b      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f000 8087 	beq.w	800bf32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800be24:	4b96      	ldr	r3, [pc, #600]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	f003 030c 	and.w	r3, r3, #12
 800be2c:	2b04      	cmp	r3, #4
 800be2e:	d00c      	beq.n	800be4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800be30:	4b93      	ldr	r3, [pc, #588]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	f003 030c 	and.w	r3, r3, #12
 800be38:	2b08      	cmp	r3, #8
 800be3a:	d112      	bne.n	800be62 <HAL_RCC_OscConfig+0x62>
 800be3c:	4b90      	ldr	r3, [pc, #576]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be48:	d10b      	bne.n	800be62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be4a:	4b8d      	ldr	r3, [pc, #564]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d06c      	beq.n	800bf30 <HAL_RCC_OscConfig+0x130>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d168      	bne.n	800bf30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e275      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be6a:	d106      	bne.n	800be7a <HAL_RCC_OscConfig+0x7a>
 800be6c:	4b84      	ldr	r3, [pc, #528]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a83      	ldr	r2, [pc, #524]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	e02e      	b.n	800bed8 <HAL_RCC_OscConfig+0xd8>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10c      	bne.n	800be9c <HAL_RCC_OscConfig+0x9c>
 800be82:	4b7f      	ldr	r3, [pc, #508]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a7e      	ldr	r2, [pc, #504]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be8c:	6013      	str	r3, [r2, #0]
 800be8e:	4b7c      	ldr	r3, [pc, #496]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a7b      	ldr	r2, [pc, #492]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800be94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be98:	6013      	str	r3, [r2, #0]
 800be9a:	e01d      	b.n	800bed8 <HAL_RCC_OscConfig+0xd8>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bea4:	d10c      	bne.n	800bec0 <HAL_RCC_OscConfig+0xc0>
 800bea6:	4b76      	ldr	r3, [pc, #472]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a75      	ldr	r2, [pc, #468]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800beac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	4b73      	ldr	r3, [pc, #460]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a72      	ldr	r2, [pc, #456]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800beb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bebc:	6013      	str	r3, [r2, #0]
 800bebe:	e00b      	b.n	800bed8 <HAL_RCC_OscConfig+0xd8>
 800bec0:	4b6f      	ldr	r3, [pc, #444]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a6e      	ldr	r2, [pc, #440]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800beca:	6013      	str	r3, [r2, #0]
 800becc:	4b6c      	ldr	r3, [pc, #432]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a6b      	ldr	r2, [pc, #428]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d013      	beq.n	800bf08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bee0:	f7fd f9d0 	bl	8009284 <HAL_GetTick>
 800bee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bee6:	e008      	b.n	800befa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bee8:	f7fd f9cc 	bl	8009284 <HAL_GetTick>
 800beec:	4602      	mov	r2, r0
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	2b64      	cmp	r3, #100	; 0x64
 800bef4:	d901      	bls.n	800befa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bef6:	2303      	movs	r3, #3
 800bef8:	e229      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800befa:	4b61      	ldr	r3, [pc, #388]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d0f0      	beq.n	800bee8 <HAL_RCC_OscConfig+0xe8>
 800bf06:	e014      	b.n	800bf32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf08:	f7fd f9bc 	bl	8009284 <HAL_GetTick>
 800bf0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf0e:	e008      	b.n	800bf22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf10:	f7fd f9b8 	bl	8009284 <HAL_GetTick>
 800bf14:	4602      	mov	r2, r0
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	2b64      	cmp	r3, #100	; 0x64
 800bf1c:	d901      	bls.n	800bf22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e215      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bf22:	4b57      	ldr	r3, [pc, #348]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1f0      	bne.n	800bf10 <HAL_RCC_OscConfig+0x110>
 800bf2e:	e000      	b.n	800bf32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f003 0302 	and.w	r3, r3, #2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d069      	beq.n	800c012 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bf3e:	4b50      	ldr	r3, [pc, #320]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f003 030c 	and.w	r3, r3, #12
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00b      	beq.n	800bf62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bf4a:	4b4d      	ldr	r3, [pc, #308]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f003 030c 	and.w	r3, r3, #12
 800bf52:	2b08      	cmp	r3, #8
 800bf54:	d11c      	bne.n	800bf90 <HAL_RCC_OscConfig+0x190>
 800bf56:	4b4a      	ldr	r3, [pc, #296]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d116      	bne.n	800bf90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf62:	4b47      	ldr	r3, [pc, #284]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 0302 	and.w	r3, r3, #2
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d005      	beq.n	800bf7a <HAL_RCC_OscConfig+0x17a>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d001      	beq.n	800bf7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	e1e9      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf7a:	4b41      	ldr	r3, [pc, #260]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	493d      	ldr	r1, [pc, #244]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf8e:	e040      	b.n	800c012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d023      	beq.n	800bfe0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf98:	4b39      	ldr	r3, [pc, #228]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a38      	ldr	r2, [pc, #224]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bf9e:	f043 0301 	orr.w	r3, r3, #1
 800bfa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfa4:	f7fd f96e 	bl	8009284 <HAL_GetTick>
 800bfa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bfaa:	e008      	b.n	800bfbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfac:	f7fd f96a 	bl	8009284 <HAL_GetTick>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d901      	bls.n	800bfbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e1c7      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bfbe:	4b30      	ldr	r3, [pc, #192]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0302 	and.w	r3, r3, #2
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0f0      	beq.n	800bfac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfca:	4b2d      	ldr	r3, [pc, #180]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	00db      	lsls	r3, r3, #3
 800bfd8:	4929      	ldr	r1, [pc, #164]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	600b      	str	r3, [r1, #0]
 800bfde:	e018      	b.n	800c012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bfe0:	4b27      	ldr	r3, [pc, #156]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a26      	ldr	r2, [pc, #152]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800bfe6:	f023 0301 	bic.w	r3, r3, #1
 800bfea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfec:	f7fd f94a 	bl	8009284 <HAL_GetTick>
 800bff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bff2:	e008      	b.n	800c006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bff4:	f7fd f946 	bl	8009284 <HAL_GetTick>
 800bff8:	4602      	mov	r2, r0
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d901      	bls.n	800c006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e1a3      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c006:	4b1e      	ldr	r3, [pc, #120]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 0302 	and.w	r3, r3, #2
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1f0      	bne.n	800bff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0308 	and.w	r3, r3, #8
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d038      	beq.n	800c090 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d019      	beq.n	800c05a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c026:	4b16      	ldr	r3, [pc, #88]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800c028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c02a:	4a15      	ldr	r2, [pc, #84]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800c02c:	f043 0301 	orr.w	r3, r3, #1
 800c030:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c032:	f7fd f927 	bl	8009284 <HAL_GetTick>
 800c036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c038:	e008      	b.n	800c04c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c03a:	f7fd f923 	bl	8009284 <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	2b02      	cmp	r3, #2
 800c046:	d901      	bls.n	800c04c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	e180      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c04c:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800c04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0f0      	beq.n	800c03a <HAL_RCC_OscConfig+0x23a>
 800c058:	e01a      	b.n	800c090 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c05a:	4b09      	ldr	r3, [pc, #36]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800c05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c05e:	4a08      	ldr	r2, [pc, #32]	; (800c080 <HAL_RCC_OscConfig+0x280>)
 800c060:	f023 0301 	bic.w	r3, r3, #1
 800c064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c066:	f7fd f90d 	bl	8009284 <HAL_GetTick>
 800c06a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c06c:	e00a      	b.n	800c084 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c06e:	f7fd f909 	bl	8009284 <HAL_GetTick>
 800c072:	4602      	mov	r2, r0
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d903      	bls.n	800c084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e166      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
 800c080:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c084:	4b92      	ldr	r3, [pc, #584]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c088:	f003 0302 	and.w	r3, r3, #2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1ee      	bne.n	800c06e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 80a4 	beq.w	800c1e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c09e:	4b8c      	ldr	r3, [pc, #560]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10d      	bne.n	800c0c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c0aa:	4b89      	ldr	r3, [pc, #548]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ae:	4a88      	ldr	r2, [pc, #544]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0b4:	6413      	str	r3, [r2, #64]	; 0x40
 800c0b6:	4b86      	ldr	r3, [pc, #536]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0be:	60bb      	str	r3, [r7, #8]
 800c0c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0c6:	4b83      	ldr	r3, [pc, #524]	; (800c2d4 <HAL_RCC_OscConfig+0x4d4>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d118      	bne.n	800c104 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c0d2:	4b80      	ldr	r3, [pc, #512]	; (800c2d4 <HAL_RCC_OscConfig+0x4d4>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a7f      	ldr	r2, [pc, #508]	; (800c2d4 <HAL_RCC_OscConfig+0x4d4>)
 800c0d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c0de:	f7fd f8d1 	bl	8009284 <HAL_GetTick>
 800c0e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0e4:	e008      	b.n	800c0f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0e6:	f7fd f8cd 	bl	8009284 <HAL_GetTick>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	2b64      	cmp	r3, #100	; 0x64
 800c0f2:	d901      	bls.n	800c0f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	e12a      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0f8:	4b76      	ldr	r3, [pc, #472]	; (800c2d4 <HAL_RCC_OscConfig+0x4d4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c100:	2b00      	cmp	r3, #0
 800c102:	d0f0      	beq.n	800c0e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d106      	bne.n	800c11a <HAL_RCC_OscConfig+0x31a>
 800c10c:	4b70      	ldr	r3, [pc, #448]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c110:	4a6f      	ldr	r2, [pc, #444]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c112:	f043 0301 	orr.w	r3, r3, #1
 800c116:	6713      	str	r3, [r2, #112]	; 0x70
 800c118:	e02d      	b.n	800c176 <HAL_RCC_OscConfig+0x376>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10c      	bne.n	800c13c <HAL_RCC_OscConfig+0x33c>
 800c122:	4b6b      	ldr	r3, [pc, #428]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c126:	4a6a      	ldr	r2, [pc, #424]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c128:	f023 0301 	bic.w	r3, r3, #1
 800c12c:	6713      	str	r3, [r2, #112]	; 0x70
 800c12e:	4b68      	ldr	r3, [pc, #416]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c132:	4a67      	ldr	r2, [pc, #412]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c134:	f023 0304 	bic.w	r3, r3, #4
 800c138:	6713      	str	r3, [r2, #112]	; 0x70
 800c13a:	e01c      	b.n	800c176 <HAL_RCC_OscConfig+0x376>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	2b05      	cmp	r3, #5
 800c142:	d10c      	bne.n	800c15e <HAL_RCC_OscConfig+0x35e>
 800c144:	4b62      	ldr	r3, [pc, #392]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c148:	4a61      	ldr	r2, [pc, #388]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c14a:	f043 0304 	orr.w	r3, r3, #4
 800c14e:	6713      	str	r3, [r2, #112]	; 0x70
 800c150:	4b5f      	ldr	r3, [pc, #380]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c154:	4a5e      	ldr	r2, [pc, #376]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c156:	f043 0301 	orr.w	r3, r3, #1
 800c15a:	6713      	str	r3, [r2, #112]	; 0x70
 800c15c:	e00b      	b.n	800c176 <HAL_RCC_OscConfig+0x376>
 800c15e:	4b5c      	ldr	r3, [pc, #368]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c162:	4a5b      	ldr	r2, [pc, #364]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c164:	f023 0301 	bic.w	r3, r3, #1
 800c168:	6713      	str	r3, [r2, #112]	; 0x70
 800c16a:	4b59      	ldr	r3, [pc, #356]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c16e:	4a58      	ldr	r2, [pc, #352]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c170:	f023 0304 	bic.w	r3, r3, #4
 800c174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d015      	beq.n	800c1aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c17e:	f7fd f881 	bl	8009284 <HAL_GetTick>
 800c182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c184:	e00a      	b.n	800c19c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c186:	f7fd f87d 	bl	8009284 <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	f241 3288 	movw	r2, #5000	; 0x1388
 800c194:	4293      	cmp	r3, r2
 800c196:	d901      	bls.n	800c19c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c198:	2303      	movs	r3, #3
 800c19a:	e0d8      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c19c:	4b4c      	ldr	r3, [pc, #304]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a0:	f003 0302 	and.w	r3, r3, #2
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d0ee      	beq.n	800c186 <HAL_RCC_OscConfig+0x386>
 800c1a8:	e014      	b.n	800c1d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1aa:	f7fd f86b 	bl	8009284 <HAL_GetTick>
 800c1ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c1b0:	e00a      	b.n	800c1c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1b2:	f7fd f867 	bl	8009284 <HAL_GetTick>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d901      	bls.n	800c1c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e0c2      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c1c8:	4b41      	ldr	r3, [pc, #260]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1cc:	f003 0302 	and.w	r3, r3, #2
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1ee      	bne.n	800c1b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d105      	bne.n	800c1e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1da:	4b3d      	ldr	r3, [pc, #244]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1de:	4a3c      	ldr	r2, [pc, #240]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c1e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f000 80ae 	beq.w	800c34c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c1f0:	4b37      	ldr	r3, [pc, #220]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	f003 030c 	and.w	r3, r3, #12
 800c1f8:	2b08      	cmp	r3, #8
 800c1fa:	d06d      	beq.n	800c2d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	2b02      	cmp	r3, #2
 800c202:	d14b      	bne.n	800c29c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c204:	4b32      	ldr	r3, [pc, #200]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a31      	ldr	r2, [pc, #196]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c20a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c20e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c210:	f7fd f838 	bl	8009284 <HAL_GetTick>
 800c214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c216:	e008      	b.n	800c22a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c218:	f7fd f834 	bl	8009284 <HAL_GetTick>
 800c21c:	4602      	mov	r2, r0
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	2b02      	cmp	r3, #2
 800c224:	d901      	bls.n	800c22a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e091      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c22a:	4b29      	ldr	r3, [pc, #164]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1f0      	bne.n	800c218 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	69da      	ldr	r2, [r3, #28]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	431a      	orrs	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c244:	019b      	lsls	r3, r3, #6
 800c246:	431a      	orrs	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24c:	085b      	lsrs	r3, r3, #1
 800c24e:	3b01      	subs	r3, #1
 800c250:	041b      	lsls	r3, r3, #16
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c258:	061b      	lsls	r3, r3, #24
 800c25a:	431a      	orrs	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c260:	071b      	lsls	r3, r3, #28
 800c262:	491b      	ldr	r1, [pc, #108]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c264:	4313      	orrs	r3, r2
 800c266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c268:	4b19      	ldr	r3, [pc, #100]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a18      	ldr	r2, [pc, #96]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c26e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c274:	f7fd f806 	bl	8009284 <HAL_GetTick>
 800c278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c27a:	e008      	b.n	800c28e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c27c:	f7fd f802 	bl	8009284 <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	2b02      	cmp	r3, #2
 800c288:	d901      	bls.n	800c28e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c28a:	2303      	movs	r3, #3
 800c28c:	e05f      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c28e:	4b10      	ldr	r3, [pc, #64]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c296:	2b00      	cmp	r3, #0
 800c298:	d0f0      	beq.n	800c27c <HAL_RCC_OscConfig+0x47c>
 800c29a:	e057      	b.n	800c34c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c29c:	4b0c      	ldr	r3, [pc, #48]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a0b      	ldr	r2, [pc, #44]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c2a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c2a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2a8:	f7fc ffec 	bl	8009284 <HAL_GetTick>
 800c2ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2ae:	e008      	b.n	800c2c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2b0:	f7fc ffe8 	bl	8009284 <HAL_GetTick>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d901      	bls.n	800c2c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e045      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2c2:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <HAL_RCC_OscConfig+0x4d0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1f0      	bne.n	800c2b0 <HAL_RCC_OscConfig+0x4b0>
 800c2ce:	e03d      	b.n	800c34c <HAL_RCC_OscConfig+0x54c>
 800c2d0:	40023800 	.word	0x40023800
 800c2d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c2d8:	4b1f      	ldr	r3, [pc, #124]	; (800c358 <HAL_RCC_OscConfig+0x558>)
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d030      	beq.n	800c348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d129      	bne.n	800c348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d122      	bne.n	800c348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c308:	4013      	ands	r3, r2
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c30e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c310:	4293      	cmp	r3, r2
 800c312:	d119      	bne.n	800c348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31e:	085b      	lsrs	r3, r3, #1
 800c320:	3b01      	subs	r3, #1
 800c322:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c324:	429a      	cmp	r2, r3
 800c326:	d10f      	bne.n	800c348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c332:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c334:	429a      	cmp	r2, r3
 800c336:	d107      	bne.n	800c348 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c342:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c344:	429a      	cmp	r2, r3
 800c346:	d001      	beq.n	800c34c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	e000      	b.n	800c34e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	40023800 	.word	0x40023800

0800c35c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	e0d0      	b.n	800c516 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c374:	4b6a      	ldr	r3, [pc, #424]	; (800c520 <HAL_RCC_ClockConfig+0x1c4>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 030f 	and.w	r3, r3, #15
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d910      	bls.n	800c3a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c382:	4b67      	ldr	r3, [pc, #412]	; (800c520 <HAL_RCC_ClockConfig+0x1c4>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f023 020f 	bic.w	r2, r3, #15
 800c38a:	4965      	ldr	r1, [pc, #404]	; (800c520 <HAL_RCC_ClockConfig+0x1c4>)
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	4313      	orrs	r3, r2
 800c390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c392:	4b63      	ldr	r3, [pc, #396]	; (800c520 <HAL_RCC_ClockConfig+0x1c4>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d001      	beq.n	800c3a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e0b8      	b.n	800c516 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0302 	and.w	r3, r3, #2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d020      	beq.n	800c3f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d005      	beq.n	800c3c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c3bc:	4b59      	ldr	r3, [pc, #356]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	4a58      	ldr	r2, [pc, #352]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c3c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c3c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0308 	and.w	r3, r3, #8
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d005      	beq.n	800c3e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c3d4:	4b53      	ldr	r3, [pc, #332]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	4a52      	ldr	r2, [pc, #328]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c3da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c3de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c3e0:	4b50      	ldr	r3, [pc, #320]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	494d      	ldr	r1, [pc, #308]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d040      	beq.n	800c480 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d107      	bne.n	800c416 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c406:	4b47      	ldr	r3, [pc, #284]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d115      	bne.n	800c43e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	e07f      	b.n	800c516 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d107      	bne.n	800c42e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c41e:	4b41      	ldr	r3, [pc, #260]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c426:	2b00      	cmp	r3, #0
 800c428:	d109      	bne.n	800c43e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e073      	b.n	800c516 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c42e:	4b3d      	ldr	r3, [pc, #244]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f003 0302 	and.w	r3, r3, #2
 800c436:	2b00      	cmp	r3, #0
 800c438:	d101      	bne.n	800c43e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e06b      	b.n	800c516 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c43e:	4b39      	ldr	r3, [pc, #228]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	f023 0203 	bic.w	r2, r3, #3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	4936      	ldr	r1, [pc, #216]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c44c:	4313      	orrs	r3, r2
 800c44e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c450:	f7fc ff18 	bl	8009284 <HAL_GetTick>
 800c454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c456:	e00a      	b.n	800c46e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c458:	f7fc ff14 	bl	8009284 <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	f241 3288 	movw	r2, #5000	; 0x1388
 800c466:	4293      	cmp	r3, r2
 800c468:	d901      	bls.n	800c46e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e053      	b.n	800c516 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c46e:	4b2d      	ldr	r3, [pc, #180]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	f003 020c 	and.w	r2, r3, #12
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d1eb      	bne.n	800c458 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c480:	4b27      	ldr	r3, [pc, #156]	; (800c520 <HAL_RCC_ClockConfig+0x1c4>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 030f 	and.w	r3, r3, #15
 800c488:	683a      	ldr	r2, [r7, #0]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d210      	bcs.n	800c4b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c48e:	4b24      	ldr	r3, [pc, #144]	; (800c520 <HAL_RCC_ClockConfig+0x1c4>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f023 020f 	bic.w	r2, r3, #15
 800c496:	4922      	ldr	r1, [pc, #136]	; (800c520 <HAL_RCC_ClockConfig+0x1c4>)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c49e:	4b20      	ldr	r3, [pc, #128]	; (800c520 <HAL_RCC_ClockConfig+0x1c4>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f003 030f 	and.w	r3, r3, #15
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d001      	beq.n	800c4b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e032      	b.n	800c516 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d008      	beq.n	800c4ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c4bc:	4b19      	ldr	r3, [pc, #100]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	4916      	ldr	r1, [pc, #88]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d009      	beq.n	800c4ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c4da:	4b12      	ldr	r3, [pc, #72]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	490e      	ldr	r1, [pc, #56]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c4ee:	f000 f821 	bl	800c534 <HAL_RCC_GetSysClockFreq>
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	4b0b      	ldr	r3, [pc, #44]	; (800c524 <HAL_RCC_ClockConfig+0x1c8>)
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	091b      	lsrs	r3, r3, #4
 800c4fa:	f003 030f 	and.w	r3, r3, #15
 800c4fe:	4a0a      	ldr	r2, [pc, #40]	; (800c528 <HAL_RCC_ClockConfig+0x1cc>)
 800c500:	5cd3      	ldrb	r3, [r2, r3]
 800c502:	fa21 f303 	lsr.w	r3, r1, r3
 800c506:	4a09      	ldr	r2, [pc, #36]	; (800c52c <HAL_RCC_ClockConfig+0x1d0>)
 800c508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c50a:	4b09      	ldr	r3, [pc, #36]	; (800c530 <HAL_RCC_ClockConfig+0x1d4>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fc f978 	bl	8008804 <HAL_InitTick>

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	40023c00 	.word	0x40023c00
 800c524:	40023800 	.word	0x40023800
 800c528:	08017698 	.word	0x08017698
 800c52c:	20000198 	.word	0x20000198
 800c530:	2000019c 	.word	0x2000019c

0800c534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	607b      	str	r3, [r7, #4]
 800c53e:	2300      	movs	r3, #0
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	2300      	movs	r3, #0
 800c544:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c54a:	4b50      	ldr	r3, [pc, #320]	; (800c68c <HAL_RCC_GetSysClockFreq+0x158>)
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f003 030c 	and.w	r3, r3, #12
 800c552:	2b04      	cmp	r3, #4
 800c554:	d007      	beq.n	800c566 <HAL_RCC_GetSysClockFreq+0x32>
 800c556:	2b08      	cmp	r3, #8
 800c558:	d008      	beq.n	800c56c <HAL_RCC_GetSysClockFreq+0x38>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f040 808d 	bne.w	800c67a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c560:	4b4b      	ldr	r3, [pc, #300]	; (800c690 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c562:	60bb      	str	r3, [r7, #8]
      break;
 800c564:	e08c      	b.n	800c680 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c566:	4b4b      	ldr	r3, [pc, #300]	; (800c694 <HAL_RCC_GetSysClockFreq+0x160>)
 800c568:	60bb      	str	r3, [r7, #8]
      break;
 800c56a:	e089      	b.n	800c680 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c56c:	4b47      	ldr	r3, [pc, #284]	; (800c68c <HAL_RCC_GetSysClockFreq+0x158>)
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c574:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c576:	4b45      	ldr	r3, [pc, #276]	; (800c68c <HAL_RCC_GetSysClockFreq+0x158>)
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d023      	beq.n	800c5ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c582:	4b42      	ldr	r3, [pc, #264]	; (800c68c <HAL_RCC_GetSysClockFreq+0x158>)
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	099b      	lsrs	r3, r3, #6
 800c588:	f04f 0400 	mov.w	r4, #0
 800c58c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c590:	f04f 0200 	mov.w	r2, #0
 800c594:	ea03 0501 	and.w	r5, r3, r1
 800c598:	ea04 0602 	and.w	r6, r4, r2
 800c59c:	4a3d      	ldr	r2, [pc, #244]	; (800c694 <HAL_RCC_GetSysClockFreq+0x160>)
 800c59e:	fb02 f106 	mul.w	r1, r2, r6
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	fb02 f205 	mul.w	r2, r2, r5
 800c5a8:	440a      	add	r2, r1
 800c5aa:	493a      	ldr	r1, [pc, #232]	; (800c694 <HAL_RCC_GetSysClockFreq+0x160>)
 800c5ac:	fba5 0101 	umull	r0, r1, r5, r1
 800c5b0:	1853      	adds	r3, r2, r1
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f04f 0400 	mov.w	r4, #0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	4623      	mov	r3, r4
 800c5be:	f7f3 fe97 	bl	80002f0 <__aeabi_uldivmod>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	60fb      	str	r3, [r7, #12]
 800c5c8:	e049      	b.n	800c65e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c5ca:	4b30      	ldr	r3, [pc, #192]	; (800c68c <HAL_RCC_GetSysClockFreq+0x158>)
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	099b      	lsrs	r3, r3, #6
 800c5d0:	f04f 0400 	mov.w	r4, #0
 800c5d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c5d8:	f04f 0200 	mov.w	r2, #0
 800c5dc:	ea03 0501 	and.w	r5, r3, r1
 800c5e0:	ea04 0602 	and.w	r6, r4, r2
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4632      	mov	r2, r6
 800c5e8:	f04f 0300 	mov.w	r3, #0
 800c5ec:	f04f 0400 	mov.w	r4, #0
 800c5f0:	0154      	lsls	r4, r2, #5
 800c5f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c5f6:	014b      	lsls	r3, r1, #5
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	1b49      	subs	r1, r1, r5
 800c5fe:	eb62 0206 	sbc.w	r2, r2, r6
 800c602:	f04f 0300 	mov.w	r3, #0
 800c606:	f04f 0400 	mov.w	r4, #0
 800c60a:	0194      	lsls	r4, r2, #6
 800c60c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c610:	018b      	lsls	r3, r1, #6
 800c612:	1a5b      	subs	r3, r3, r1
 800c614:	eb64 0402 	sbc.w	r4, r4, r2
 800c618:	f04f 0100 	mov.w	r1, #0
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	00e2      	lsls	r2, r4, #3
 800c622:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c626:	00d9      	lsls	r1, r3, #3
 800c628:	460b      	mov	r3, r1
 800c62a:	4614      	mov	r4, r2
 800c62c:	195b      	adds	r3, r3, r5
 800c62e:	eb44 0406 	adc.w	r4, r4, r6
 800c632:	f04f 0100 	mov.w	r1, #0
 800c636:	f04f 0200 	mov.w	r2, #0
 800c63a:	02a2      	lsls	r2, r4, #10
 800c63c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c640:	0299      	lsls	r1, r3, #10
 800c642:	460b      	mov	r3, r1
 800c644:	4614      	mov	r4, r2
 800c646:	4618      	mov	r0, r3
 800c648:	4621      	mov	r1, r4
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f04f 0400 	mov.w	r4, #0
 800c650:	461a      	mov	r2, r3
 800c652:	4623      	mov	r3, r4
 800c654:	f7f3 fe4c 	bl	80002f0 <__aeabi_uldivmod>
 800c658:	4603      	mov	r3, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c65e:	4b0b      	ldr	r3, [pc, #44]	; (800c68c <HAL_RCC_GetSysClockFreq+0x158>)
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	0c1b      	lsrs	r3, r3, #16
 800c664:	f003 0303 	and.w	r3, r3, #3
 800c668:	3301      	adds	r3, #1
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	fbb2 f3f3 	udiv	r3, r2, r3
 800c676:	60bb      	str	r3, [r7, #8]
      break;
 800c678:	e002      	b.n	800c680 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c67a:	4b05      	ldr	r3, [pc, #20]	; (800c690 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c67c:	60bb      	str	r3, [r7, #8]
      break;
 800c67e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c680:	68bb      	ldr	r3, [r7, #8]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c68a:	bf00      	nop
 800c68c:	40023800 	.word	0x40023800
 800c690:	00f42400 	.word	0x00f42400
 800c694:	017d7840 	.word	0x017d7840

0800c698 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c698:	b480      	push	{r7}
 800c69a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c69c:	4b03      	ldr	r3, [pc, #12]	; (800c6ac <HAL_RCC_GetHCLKFreq+0x14>)
 800c69e:	681b      	ldr	r3, [r3, #0]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	20000198 	.word	0x20000198

0800c6b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c6b4:	f7ff fff0 	bl	800c698 <HAL_RCC_GetHCLKFreq>
 800c6b8:	4601      	mov	r1, r0
 800c6ba:	4b05      	ldr	r3, [pc, #20]	; (800c6d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	0a9b      	lsrs	r3, r3, #10
 800c6c0:	f003 0307 	and.w	r3, r3, #7
 800c6c4:	4a03      	ldr	r2, [pc, #12]	; (800c6d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6c6:	5cd3      	ldrb	r3, [r2, r3]
 800c6c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	40023800 	.word	0x40023800
 800c6d4:	080176a8 	.word	0x080176a8

0800c6d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c6dc:	f7ff ffdc 	bl	800c698 <HAL_RCC_GetHCLKFreq>
 800c6e0:	4601      	mov	r1, r0
 800c6e2:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	0b5b      	lsrs	r3, r3, #13
 800c6e8:	f003 0307 	and.w	r3, r3, #7
 800c6ec:	4a03      	ldr	r2, [pc, #12]	; (800c6fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6ee:	5cd3      	ldrb	r3, [r2, r3]
 800c6f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	40023800 	.word	0x40023800
 800c6fc:	080176a8 	.word	0x080176a8

0800c700 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	220f      	movs	r2, #15
 800c70e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c710:	4b12      	ldr	r3, [pc, #72]	; (800c75c <HAL_RCC_GetClockConfig+0x5c>)
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	f003 0203 	and.w	r2, r3, #3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c71c:	4b0f      	ldr	r3, [pc, #60]	; (800c75c <HAL_RCC_GetClockConfig+0x5c>)
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c728:	4b0c      	ldr	r3, [pc, #48]	; (800c75c <HAL_RCC_GetClockConfig+0x5c>)
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c734:	4b09      	ldr	r3, [pc, #36]	; (800c75c <HAL_RCC_GetClockConfig+0x5c>)
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	08db      	lsrs	r3, r3, #3
 800c73a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c742:	4b07      	ldr	r3, [pc, #28]	; (800c760 <HAL_RCC_GetClockConfig+0x60>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f003 020f 	and.w	r2, r3, #15
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	601a      	str	r2, [r3, #0]
}
 800c74e:	bf00      	nop
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	40023800 	.word	0x40023800
 800c760:	40023c00 	.word	0x40023c00

0800c764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c76c:	2300      	movs	r3, #0
 800c76e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c770:	2300      	movs	r3, #0
 800c772:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c778:	2300      	movs	r3, #0
 800c77a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c77c:	2300      	movs	r3, #0
 800c77e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d012      	beq.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c78c:	4b69      	ldr	r3, [pc, #420]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	4a68      	ldr	r2, [pc, #416]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c792:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c796:	6093      	str	r3, [r2, #8]
 800c798:	4b66      	ldr	r3, [pc, #408]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c79a:	689a      	ldr	r2, [r3, #8]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a0:	4964      	ldr	r1, [pc, #400]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d017      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c7be:	4b5d      	ldr	r3, [pc, #372]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7cc:	4959      	ldr	r1, [pc, #356]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7dc:	d101      	bne.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d017      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c7fa:	4b4e      	ldr	r3, [pc, #312]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c7fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c800:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c808:	494a      	ldr	r1, [pc, #296]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c80a:	4313      	orrs	r3, r2
 800c80c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c818:	d101      	bne.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c81a:	2301      	movs	r3, #1
 800c81c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c826:	2301      	movs	r3, #1
 800c828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c836:	2301      	movs	r3, #1
 800c838:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b00      	cmp	r3, #0
 800c844:	f000 808b 	beq.w	800c95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c848:	4b3a      	ldr	r3, [pc, #232]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84c:	4a39      	ldr	r2, [pc, #228]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c84e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c852:	6413      	str	r3, [r2, #64]	; 0x40
 800c854:	4b37      	ldr	r3, [pc, #220]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c85c:	60bb      	str	r3, [r7, #8]
 800c85e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c860:	4b35      	ldr	r3, [pc, #212]	; (800c938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a34      	ldr	r2, [pc, #208]	; (800c938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c86a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c86c:	f7fc fd0a 	bl	8009284 <HAL_GetTick>
 800c870:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c872:	e008      	b.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c874:	f7fc fd06 	bl	8009284 <HAL_GetTick>
 800c878:	4602      	mov	r2, r0
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	2b64      	cmp	r3, #100	; 0x64
 800c880:	d901      	bls.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c882:	2303      	movs	r3, #3
 800c884:	e38d      	b.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c886:	4b2c      	ldr	r3, [pc, #176]	; (800c938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0f0      	beq.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c892:	4b28      	ldr	r3, [pc, #160]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c89a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d035      	beq.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d02e      	beq.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c8b0:	4b20      	ldr	r3, [pc, #128]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c8ba:	4b1e      	ldr	r3, [pc, #120]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8be:	4a1d      	ldr	r2, [pc, #116]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c8c6:	4b1b      	ldr	r3, [pc, #108]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ca:	4a1a      	ldr	r2, [pc, #104]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c8d2:	4a18      	ldr	r2, [pc, #96]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c8d8:	4b16      	ldr	r3, [pc, #88]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d114      	bne.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8e4:	f7fc fcce 	bl	8009284 <HAL_GetTick>
 800c8e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8ea:	e00a      	b.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c8ec:	f7fc fcca 	bl	8009284 <HAL_GetTick>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d901      	bls.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c8fe:	2303      	movs	r3, #3
 800c900:	e34f      	b.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c902:	4b0c      	ldr	r3, [pc, #48]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c906:	f003 0302 	and.w	r3, r3, #2
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0ee      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c91a:	d111      	bne.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c91c:	4b05      	ldr	r3, [pc, #20]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c928:	4b04      	ldr	r3, [pc, #16]	; (800c93c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c92a:	400b      	ands	r3, r1
 800c92c:	4901      	ldr	r1, [pc, #4]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c92e:	4313      	orrs	r3, r2
 800c930:	608b      	str	r3, [r1, #8]
 800c932:	e00b      	b.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c934:	40023800 	.word	0x40023800
 800c938:	40007000 	.word	0x40007000
 800c93c:	0ffffcff 	.word	0x0ffffcff
 800c940:	4bb3      	ldr	r3, [pc, #716]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	4ab2      	ldr	r2, [pc, #712]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c946:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c94a:	6093      	str	r3, [r2, #8]
 800c94c:	4bb0      	ldr	r3, [pc, #704]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c94e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c958:	49ad      	ldr	r1, [pc, #692]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c95a:	4313      	orrs	r3, r2
 800c95c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f003 0310 	and.w	r3, r3, #16
 800c966:	2b00      	cmp	r3, #0
 800c968:	d010      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c96a:	4ba9      	ldr	r3, [pc, #676]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c970:	4aa7      	ldr	r2, [pc, #668]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c97a:	4ba5      	ldr	r3, [pc, #660]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c97c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c984:	49a2      	ldr	r1, [pc, #648]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c986:	4313      	orrs	r3, r2
 800c988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00a      	beq.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c998:	4b9d      	ldr	r3, [pc, #628]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c99e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9a6:	499a      	ldr	r1, [pc, #616]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00a      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c9ba:	4b95      	ldr	r3, [pc, #596]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9c8:	4991      	ldr	r1, [pc, #580]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00a      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c9dc:	4b8c      	ldr	r3, [pc, #560]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ea:	4989      	ldr	r1, [pc, #548]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00a      	beq.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c9fe:	4b84      	ldr	r3, [pc, #528]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0c:	4980      	ldr	r1, [pc, #512]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00a      	beq.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ca20:	4b7b      	ldr	r3, [pc, #492]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca26:	f023 0203 	bic.w	r2, r3, #3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca2e:	4978      	ldr	r1, [pc, #480]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca30:	4313      	orrs	r3, r2
 800ca32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00a      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ca42:	4b73      	ldr	r3, [pc, #460]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca48:	f023 020c 	bic.w	r2, r3, #12
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca50:	496f      	ldr	r1, [pc, #444]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca52:	4313      	orrs	r3, r2
 800ca54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00a      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ca64:	4b6a      	ldr	r3, [pc, #424]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca72:	4967      	ldr	r1, [pc, #412]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d00a      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ca86:	4b62      	ldr	r3, [pc, #392]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca94:	495e      	ldr	r1, [pc, #376]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ca96:	4313      	orrs	r3, r2
 800ca98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00a      	beq.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800caa8:	4b59      	ldr	r3, [pc, #356]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800caaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab6:	4956      	ldr	r1, [pc, #344]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cab8:	4313      	orrs	r3, r2
 800caba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00a      	beq.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800caca:	4b51      	ldr	r3, [pc, #324]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cad0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cad8:	494d      	ldr	r1, [pc, #308]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cada:	4313      	orrs	r3, r2
 800cadc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d00a      	beq.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800caec:	4b48      	ldr	r3, [pc, #288]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800caee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cafa:	4945      	ldr	r1, [pc, #276]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cafc:	4313      	orrs	r3, r2
 800cafe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800cb0e:	4b40      	ldr	r3, [pc, #256]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cb10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb1c:	493c      	ldr	r1, [pc, #240]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d00a      	beq.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cb30:	4b37      	ldr	r3, [pc, #220]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cb32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb3e:	4934      	ldr	r1, [pc, #208]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cb40:	4313      	orrs	r3, r2
 800cb42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d011      	beq.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cb52:	4b2f      	ldr	r3, [pc, #188]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cb54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb60:	492b      	ldr	r1, [pc, #172]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cb62:	4313      	orrs	r3, r2
 800cb64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb70:	d101      	bne.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800cb72:	2301      	movs	r3, #1
 800cb74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 0308 	and.w	r3, r3, #8
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cb92:	4b1f      	ldr	r3, [pc, #124]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cba0:	491b      	ldr	r1, [pc, #108]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00b      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cbb4:	4b16      	ldr	r3, [pc, #88]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cbb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbc4:	4912      	ldr	r1, [pc, #72]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00b      	beq.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800cbd8:	4b0d      	ldr	r3, [pc, #52]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbde:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbe8:	4909      	ldr	r1, [pc, #36]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cbea:	4313      	orrs	r3, r2
 800cbec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00f      	beq.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cbfc:	4b04      	ldr	r3, [pc, #16]	; (800cc10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cbfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc0c:	e002      	b.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800cc0e:	bf00      	nop
 800cc10:	40023800 	.word	0x40023800
 800cc14:	4985      	ldr	r1, [pc, #532]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cc16:	4313      	orrs	r3, r2
 800cc18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00b      	beq.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800cc28:	4b80      	ldr	r3, [pc, #512]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cc2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc38:	497c      	ldr	r1, [pc, #496]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d005      	beq.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc4e:	f040 80d6 	bne.w	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cc52:	4b76      	ldr	r3, [pc, #472]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a75      	ldr	r2, [pc, #468]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cc58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc5e:	f7fc fb11 	bl	8009284 <HAL_GetTick>
 800cc62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cc64:	e008      	b.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800cc66:	f7fc fb0d 	bl	8009284 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	2b64      	cmp	r3, #100	; 0x64
 800cc72:	d901      	bls.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cc74:	2303      	movs	r3, #3
 800cc76:	e194      	b.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cc78:	4b6c      	ldr	r3, [pc, #432]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1f0      	bne.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d021      	beq.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d11d      	bne.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cc98:	4b64      	ldr	r3, [pc, #400]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cc9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc9e:	0c1b      	lsrs	r3, r3, #16
 800cca0:	f003 0303 	and.w	r3, r3, #3
 800cca4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cca6:	4b61      	ldr	r3, [pc, #388]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccac:	0e1b      	lsrs	r3, r3, #24
 800ccae:	f003 030f 	and.w	r3, r3, #15
 800ccb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	019a      	lsls	r2, r3, #6
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	041b      	lsls	r3, r3, #16
 800ccbe:	431a      	orrs	r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	061b      	lsls	r3, r3, #24
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	071b      	lsls	r3, r3, #28
 800cccc:	4957      	ldr	r1, [pc, #348]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d004      	beq.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x586>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cce8:	d00a      	beq.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d02e      	beq.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccfe:	d129      	bne.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cd00:	4b4a      	ldr	r3, [pc, #296]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cd02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd06:	0c1b      	lsrs	r3, r3, #16
 800cd08:	f003 0303 	and.w	r3, r3, #3
 800cd0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cd0e:	4b47      	ldr	r3, [pc, #284]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cd10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd14:	0f1b      	lsrs	r3, r3, #28
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	019a      	lsls	r2, r3, #6
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	041b      	lsls	r3, r3, #16
 800cd26:	431a      	orrs	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	061b      	lsls	r3, r3, #24
 800cd2e:	431a      	orrs	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	071b      	lsls	r3, r3, #28
 800cd34:	493d      	ldr	r1, [pc, #244]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cd36:	4313      	orrs	r3, r2
 800cd38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800cd3c:	4b3b      	ldr	r3, [pc, #236]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cd3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd42:	f023 021f 	bic.w	r2, r3, #31
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	4937      	ldr	r1, [pc, #220]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d01d      	beq.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cd60:	4b32      	ldr	r3, [pc, #200]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cd62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd66:	0e1b      	lsrs	r3, r3, #24
 800cd68:	f003 030f 	and.w	r3, r3, #15
 800cd6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cd6e:	4b2f      	ldr	r3, [pc, #188]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd74:	0f1b      	lsrs	r3, r3, #28
 800cd76:	f003 0307 	and.w	r3, r3, #7
 800cd7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	019a      	lsls	r2, r3, #6
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	041b      	lsls	r3, r3, #16
 800cd88:	431a      	orrs	r2, r3
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	061b      	lsls	r3, r3, #24
 800cd8e:	431a      	orrs	r2, r3
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	071b      	lsls	r3, r3, #28
 800cd94:	4925      	ldr	r1, [pc, #148]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cd96:	4313      	orrs	r3, r2
 800cd98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d011      	beq.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	019a      	lsls	r2, r3, #6
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	041b      	lsls	r3, r3, #16
 800cdb4:	431a      	orrs	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	061b      	lsls	r3, r3, #24
 800cdbc:	431a      	orrs	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	071b      	lsls	r3, r3, #28
 800cdc4:	4919      	ldr	r1, [pc, #100]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cdcc:	4b17      	ldr	r3, [pc, #92]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a16      	ldr	r2, [pc, #88]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cdd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cdd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdd8:	f7fc fa54 	bl	8009284 <HAL_GetTick>
 800cddc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cdde:	e008      	b.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800cde0:	f7fc fa50 	bl	8009284 <HAL_GetTick>
 800cde4:	4602      	mov	r2, r0
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	2b64      	cmp	r3, #100	; 0x64
 800cdec:	d901      	bls.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e0d7      	b.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cdf2:	4b0e      	ldr	r3, [pc, #56]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d0f0      	beq.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	f040 80cd 	bne.w	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ce06:	4b09      	ldr	r3, [pc, #36]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a08      	ldr	r2, [pc, #32]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ce0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce12:	f7fc fa37 	bl	8009284 <HAL_GetTick>
 800ce16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ce18:	e00a      	b.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ce1a:	f7fc fa33 	bl	8009284 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	2b64      	cmp	r3, #100	; 0x64
 800ce26:	d903      	bls.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e0ba      	b.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800ce2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ce30:	4b5e      	ldr	r3, [pc, #376]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce3c:	d0ed      	beq.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d003      	beq.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d009      	beq.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d02e      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d12a      	bne.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ce66:	4b51      	ldr	r3, [pc, #324]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ce68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce6c:	0c1b      	lsrs	r3, r3, #16
 800ce6e:	f003 0303 	and.w	r3, r3, #3
 800ce72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ce74:	4b4d      	ldr	r3, [pc, #308]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ce76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce7a:	0f1b      	lsrs	r3, r3, #28
 800ce7c:	f003 0307 	and.w	r3, r3, #7
 800ce80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	695b      	ldr	r3, [r3, #20]
 800ce86:	019a      	lsls	r2, r3, #6
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	041b      	lsls	r3, r3, #16
 800ce8c:	431a      	orrs	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	061b      	lsls	r3, r3, #24
 800ce94:	431a      	orrs	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	071b      	lsls	r3, r3, #28
 800ce9a:	4944      	ldr	r1, [pc, #272]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cea2:	4b42      	ldr	r3, [pc, #264]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cea8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	021b      	lsls	r3, r3, #8
 800ceb4:	493d      	ldr	r1, [pc, #244]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d022      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ced0:	d11d      	bne.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ced2:	4b36      	ldr	r3, [pc, #216]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ced4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ced8:	0e1b      	lsrs	r3, r3, #24
 800ceda:	f003 030f 	and.w	r3, r3, #15
 800cede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cee0:	4b32      	ldr	r3, [pc, #200]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee6:	0f1b      	lsrs	r3, r3, #28
 800cee8:	f003 0307 	and.w	r3, r3, #7
 800ceec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	019a      	lsls	r2, r3, #6
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6a1b      	ldr	r3, [r3, #32]
 800cef8:	041b      	lsls	r3, r3, #16
 800cefa:	431a      	orrs	r2, r3
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	061b      	lsls	r3, r3, #24
 800cf00:	431a      	orrs	r2, r3
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	071b      	lsls	r3, r3, #28
 800cf06:	4929      	ldr	r1, [pc, #164]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f003 0308 	and.w	r3, r3, #8
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d028      	beq.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cf1a:	4b24      	ldr	r3, [pc, #144]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf20:	0e1b      	lsrs	r3, r3, #24
 800cf22:	f003 030f 	and.w	r3, r3, #15
 800cf26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cf28:	4b20      	ldr	r3, [pc, #128]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf2e:	0c1b      	lsrs	r3, r3, #16
 800cf30:	f003 0303 	and.w	r3, r3, #3
 800cf34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	019a      	lsls	r2, r3, #6
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	041b      	lsls	r3, r3, #16
 800cf40:	431a      	orrs	r2, r3
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	061b      	lsls	r3, r3, #24
 800cf46:	431a      	orrs	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	071b      	lsls	r3, r3, #28
 800cf4e:	4917      	ldr	r1, [pc, #92]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf50:	4313      	orrs	r3, r2
 800cf52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cf56:	4b15      	ldr	r3, [pc, #84]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	4911      	ldr	r1, [pc, #68]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf66:	4313      	orrs	r3, r2
 800cf68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cf6c:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a0e      	ldr	r2, [pc, #56]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf78:	f7fc f984 	bl	8009284 <HAL_GetTick>
 800cf7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cf7e:	e008      	b.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cf80:	f7fc f980 	bl	8009284 <HAL_GetTick>
 800cf84:	4602      	mov	r2, r0
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	2b64      	cmp	r3, #100	; 0x64
 800cf8c:	d901      	bls.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cf8e:	2303      	movs	r3, #3
 800cf90:	e007      	b.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cf92:	4b06      	ldr	r3, [pc, #24]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf9e:	d1ef      	bne.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3720      	adds	r7, #32
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	40023800 	.word	0x40023800

0800cfb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d101      	bne.n	800cfc2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e06b      	b.n	800d09a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	7f5b      	ldrb	r3, [r3, #29]
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d105      	bne.n	800cfd8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7fb f986 	bl	80082e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	22ca      	movs	r2, #202	; 0xca
 800cfe4:	625a      	str	r2, [r3, #36]	; 0x24
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2253      	movs	r2, #83	; 0x53
 800cfec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 f85a 	bl	800d0a8 <RTC_EnterInitMode>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d008      	beq.n	800d00c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	22ff      	movs	r2, #255	; 0xff
 800d000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2204      	movs	r2, #4
 800d006:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d008:	2301      	movs	r3, #1
 800d00a:	e046      	b.n	800d09a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6899      	ldr	r1, [r3, #8]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	4b23      	ldr	r3, [pc, #140]	; (800d0a4 <HAL_RTC_Init+0xf4>)
 800d018:	400b      	ands	r3, r1
 800d01a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6899      	ldr	r1, [r3, #8]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	431a      	orrs	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	431a      	orrs	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	430a      	orrs	r2, r1
 800d038:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	68d2      	ldr	r2, [r2, #12]
 800d042:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6919      	ldr	r1, [r3, #16]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	041a      	lsls	r2, r3, #16
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	430a      	orrs	r2, r1
 800d056:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68da      	ldr	r2, [r3, #12]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d066:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f022 0208 	bic.w	r2, r2, #8
 800d076:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	699a      	ldr	r2, [r3, #24]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	430a      	orrs	r2, r1
 800d088:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	22ff      	movs	r2, #255	; 0xff
 800d090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d098:	2300      	movs	r3, #0
  }
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	ff8fffbf 	.word	0xff8fffbf

0800d0a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d119      	bne.n	800d0f6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d0cc:	f7fc f8da 	bl	8009284 <HAL_GetTick>
 800d0d0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d0d2:	e009      	b.n	800d0e8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d0d4:	f7fc f8d6 	bl	8009284 <HAL_GetTick>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0e2:	d901      	bls.n	800d0e8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	e007      	b.n	800d0f8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d0ee      	beq.n	800d0d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e084      	b.n	800d21c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2b00      	cmp	r3, #0
 800d122:	d106      	bne.n	800d132 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7fb f8f3 	bl	8008318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2202      	movs	r2, #2
 800d136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d148:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d152:	d902      	bls.n	800d15a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d154:	2300      	movs	r3, #0
 800d156:	60fb      	str	r3, [r7, #12]
 800d158:	e002      	b.n	800d160 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d15a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d15e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d168:	d007      	beq.n	800d17a <HAL_SPI_Init+0x7a>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d172:	d002      	beq.n	800d17a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10b      	bne.n	800d19a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d18a:	d903      	bls.n	800d194 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2202      	movs	r2, #2
 800d190:	631a      	str	r2, [r3, #48]	; 0x30
 800d192:	e002      	b.n	800d19a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	431a      	orrs	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	431a      	orrs	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	699b      	ldr	r3, [r3, #24]
 800d1b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1b8:	431a      	orrs	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	431a      	orrs	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a1b      	ldr	r3, [r3, #32]
 800d1c4:	ea42 0103 	orr.w	r1, r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	0c1b      	lsrs	r3, r3, #16
 800d1da:	f003 0204 	and.w	r2, r3, #4
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	ea42 0103 	orr.w	r1, r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	430a      	orrs	r2, r1
 800d1fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	69da      	ldr	r2, [r3, #28]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d20a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	603b      	str	r3, [r7, #0]
 800d230:	4613      	mov	r3, r2
 800d232:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d234:	2300      	movs	r3, #0
 800d236:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d101      	bne.n	800d246 <HAL_SPI_Transmit+0x22>
 800d242:	2302      	movs	r3, #2
 800d244:	e150      	b.n	800d4e8 <HAL_SPI_Transmit+0x2c4>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d24e:	f7fc f819 	bl	8009284 <HAL_GetTick>
 800d252:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d254:	88fb      	ldrh	r3, [r7, #6]
 800d256:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	2b01      	cmp	r3, #1
 800d262:	d002      	beq.n	800d26a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d264:	2302      	movs	r3, #2
 800d266:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d268:	e135      	b.n	800d4d6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <HAL_SPI_Transmit+0x52>
 800d270:	88fb      	ldrh	r3, [r7, #6]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d102      	bne.n	800d27c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d27a:	e12c      	b.n	800d4d6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2203      	movs	r2, #3
 800d280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	88fa      	ldrh	r2, [r7, #6]
 800d294:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	88fa      	ldrh	r2, [r7, #6]
 800d29a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2c6:	d107      	bne.n	800d2d8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2e2:	2b40      	cmp	r3, #64	; 0x40
 800d2e4:	d007      	beq.n	800d2f6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d2fe:	d94b      	bls.n	800d398 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <HAL_SPI_Transmit+0xea>
 800d308:	8afb      	ldrh	r3, [r7, #22]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d13e      	bne.n	800d38c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d312:	881a      	ldrh	r2, [r3, #0]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31e:	1c9a      	adds	r2, r3, #2
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d328:	b29b      	uxth	r3, r3
 800d32a:	3b01      	subs	r3, #1
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d332:	e02b      	b.n	800d38c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	f003 0302 	and.w	r3, r3, #2
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d112      	bne.n	800d368 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d346:	881a      	ldrh	r2, [r3, #0]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d352:	1c9a      	adds	r2, r3, #2
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	3b01      	subs	r3, #1
 800d360:	b29a      	uxth	r2, r3
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d366:	e011      	b.n	800d38c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d368:	f7fb ff8c 	bl	8009284 <HAL_GetTick>
 800d36c:	4602      	mov	r2, r0
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d803      	bhi.n	800d380 <HAL_SPI_Transmit+0x15c>
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37e:	d102      	bne.n	800d386 <HAL_SPI_Transmit+0x162>
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d102      	bne.n	800d38c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d38a:	e0a4      	b.n	800d4d6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d390:	b29b      	uxth	r3, r3
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1ce      	bne.n	800d334 <HAL_SPI_Transmit+0x110>
 800d396:	e07c      	b.n	800d492 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <HAL_SPI_Transmit+0x182>
 800d3a0:	8afb      	ldrh	r3, [r7, #22]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d170      	bne.n	800d488 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d912      	bls.n	800d3d6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b4:	881a      	ldrh	r2, [r3, #0]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c0:	1c9a      	adds	r2, r3, #2
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	3b02      	subs	r3, #2
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d3d4:	e058      	b.n	800d488 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	330c      	adds	r3, #12
 800d3e0:	7812      	ldrb	r2, [r2, #0]
 800d3e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e8:	1c5a      	adds	r2, r3, #1
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d3fc:	e044      	b.n	800d488 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	f003 0302 	and.w	r3, r3, #2
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d12b      	bne.n	800d464 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d410:	b29b      	uxth	r3, r3
 800d412:	2b01      	cmp	r3, #1
 800d414:	d912      	bls.n	800d43c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41a:	881a      	ldrh	r2, [r3, #0]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d426:	1c9a      	adds	r2, r3, #2
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d430:	b29b      	uxth	r3, r3
 800d432:	3b02      	subs	r3, #2
 800d434:	b29a      	uxth	r2, r3
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d43a:	e025      	b.n	800d488 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	330c      	adds	r3, #12
 800d446:	7812      	ldrb	r2, [r2, #0]
 800d448:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44e:	1c5a      	adds	r2, r3, #1
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d458:	b29b      	uxth	r3, r3
 800d45a:	3b01      	subs	r3, #1
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d462:	e011      	b.n	800d488 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d464:	f7fb ff0e 	bl	8009284 <HAL_GetTick>
 800d468:	4602      	mov	r2, r0
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	683a      	ldr	r2, [r7, #0]
 800d470:	429a      	cmp	r2, r3
 800d472:	d803      	bhi.n	800d47c <HAL_SPI_Transmit+0x258>
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47a:	d102      	bne.n	800d482 <HAL_SPI_Transmit+0x25e>
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d102      	bne.n	800d488 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d486:	e026      	b.n	800d4d6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1b5      	bne.n	800d3fe <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d492:	69ba      	ldr	r2, [r7, #24]
 800d494:	6839      	ldr	r1, [r7, #0]
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f000 fa20 	bl	800d8dc <SPI_EndRxTxTransaction>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d002      	beq.n	800d4a8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2220      	movs	r2, #32
 800d4a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10a      	bne.n	800d4c6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	613b      	str	r3, [r7, #16]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	613b      	str	r3, [r7, #16]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	613b      	str	r3, [r7, #16]
 800d4c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d002      	beq.n	800d4d4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	77fb      	strb	r3, [r7, #31]
 800d4d2:	e000      	b.n	800d4d6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800d4d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d4e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3720      	adds	r7, #32
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b088      	sub	sp, #32
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	099b      	lsrs	r3, r3, #6
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10f      	bne.n	800d534 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00a      	beq.n	800d534 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	099b      	lsrs	r3, r3, #6
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	2b00      	cmp	r3, #0
 800d528:	d004      	beq.n	800d534 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	4798      	blx	r3
    return;
 800d532:	e0d8      	b.n	800d6e6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	085b      	lsrs	r3, r3, #1
 800d538:	f003 0301 	and.w	r3, r3, #1
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00a      	beq.n	800d556 <HAL_SPI_IRQHandler+0x66>
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	09db      	lsrs	r3, r3, #7
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	4798      	blx	r3
    return;
 800d554:	e0c7      	b.n	800d6e6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	095b      	lsrs	r3, r3, #5
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10c      	bne.n	800d57c <HAL_SPI_IRQHandler+0x8c>
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	099b      	lsrs	r3, r3, #6
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d106      	bne.n	800d57c <HAL_SPI_IRQHandler+0x8c>
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	0a1b      	lsrs	r3, r3, #8
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 80b5 	beq.w	800d6e6 <HAL_SPI_IRQHandler+0x1f6>
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	095b      	lsrs	r3, r3, #5
 800d580:	f003 0301 	and.w	r3, r3, #1
 800d584:	2b00      	cmp	r3, #0
 800d586:	f000 80ae 	beq.w	800d6e6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	099b      	lsrs	r3, r3, #6
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d023      	beq.n	800d5de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	d011      	beq.n	800d5c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5a6:	f043 0204 	orr.w	r2, r3, #4
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	617b      	str	r3, [r7, #20]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	617b      	str	r3, [r7, #20]
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	e00b      	b.n	800d5de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	613b      	str	r3, [r7, #16]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	613b      	str	r3, [r7, #16]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	613b      	str	r3, [r7, #16]
 800d5da:	693b      	ldr	r3, [r7, #16]
        return;
 800d5dc:	e083      	b.n	800d6e6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	095b      	lsrs	r3, r3, #5
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d014      	beq.n	800d614 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5ee:	f043 0201 	orr.w	r2, r3, #1
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	0a1b      	lsrs	r3, r3, #8
 800d618:	f003 0301 	and.w	r3, r3, #1
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00c      	beq.n	800d63a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d624:	f043 0208 	orr.w	r2, r3, #8
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d62c:	2300      	movs	r3, #0
 800d62e:	60bb      	str	r3, [r7, #8]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	60bb      	str	r3, [r7, #8]
 800d638:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d050      	beq.n	800d6e4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d650:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	f003 0302 	and.w	r3, r3, #2
 800d660:	2b00      	cmp	r3, #0
 800d662:	d104      	bne.n	800d66e <HAL_SPI_IRQHandler+0x17e>
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d034      	beq.n	800d6d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f022 0203 	bic.w	r2, r2, #3
 800d67c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d682:	2b00      	cmp	r3, #0
 800d684:	d011      	beq.n	800d6aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d68a:	4a18      	ldr	r2, [pc, #96]	; (800d6ec <HAL_SPI_IRQHandler+0x1fc>)
 800d68c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d692:	4618      	mov	r0, r3
 800d694:	f7fc fe30 	bl	800a2f8 <HAL_DMA_Abort_IT>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d005      	beq.n	800d6aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d016      	beq.n	800d6e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6b6:	4a0d      	ldr	r2, [pc, #52]	; (800d6ec <HAL_SPI_IRQHandler+0x1fc>)
 800d6b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fc fe1a 	bl	800a2f8 <HAL_DMA_Abort_IT>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00a      	beq.n	800d6e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d6d6:	e003      	b.n	800d6e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 f809 	bl	800d6f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d6de:	e000      	b.n	800d6e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800d6e0:	bf00      	nop
    return;
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
  }
}
 800d6e6:	3720      	adds	r7, #32
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	0800d705 	.word	0x0800d705

0800d6f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d710:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2200      	movs	r2, #0
 800d716:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7ff ffe5 	bl	800d6f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d726:	bf00      	nop
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b084      	sub	sp, #16
 800d732:	af00      	add	r7, sp, #0
 800d734:	60f8      	str	r0, [r7, #12]
 800d736:	60b9      	str	r1, [r7, #8]
 800d738:	603b      	str	r3, [r7, #0]
 800d73a:	4613      	mov	r3, r2
 800d73c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d73e:	e04c      	b.n	800d7da <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d746:	d048      	beq.n	800d7da <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d748:	f7fb fd9c 	bl	8009284 <HAL_GetTick>
 800d74c:	4602      	mov	r2, r0
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	429a      	cmp	r2, r3
 800d756:	d902      	bls.n	800d75e <SPI_WaitFlagStateUntilTimeout+0x30>
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d13d      	bne.n	800d7da <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685a      	ldr	r2, [r3, #4]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d76c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d776:	d111      	bne.n	800d79c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d780:	d004      	beq.n	800d78c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d78a:	d107      	bne.n	800d79c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d79a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7a4:	d10f      	bne.n	800d7c6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	e00f      	b.n	800d7fa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	689a      	ldr	r2, [r3, #8]
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	bf0c      	ite	eq
 800d7ea:	2301      	moveq	r3, #1
 800d7ec:	2300      	movne	r3, #0
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	79fb      	ldrb	r3, [r7, #7]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d1a3      	bne.n	800d740 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	60f8      	str	r0, [r7, #12]
 800d80a:	60b9      	str	r1, [r7, #8]
 800d80c:	607a      	str	r2, [r7, #4]
 800d80e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800d810:	e057      	b.n	800d8c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d818:	d106      	bne.n	800d828 <SPI_WaitFifoStateUntilTimeout+0x26>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d103      	bne.n	800d828 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	330c      	adds	r3, #12
 800d826:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82e:	d048      	beq.n	800d8c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d830:	f7fb fd28 	bl	8009284 <HAL_GetTick>
 800d834:	4602      	mov	r2, r0
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	683a      	ldr	r2, [r7, #0]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d902      	bls.n	800d846 <SPI_WaitFifoStateUntilTimeout+0x44>
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d13d      	bne.n	800d8c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d85e:	d111      	bne.n	800d884 <SPI_WaitFifoStateUntilTimeout+0x82>
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d868:	d004      	beq.n	800d874 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d872:	d107      	bne.n	800d884 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d88c:	d10f      	bne.n	800d8ae <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d8be:	2303      	movs	r3, #3
 800d8c0:	e008      	b.n	800d8d4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	689a      	ldr	r2, [r3, #8]
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d19f      	bne.n	800d812 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af02      	add	r7, sp, #8
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f7ff ff84 	bl	800d802 <SPI_WaitFifoStateUntilTimeout>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d007      	beq.n	800d910 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d904:	f043 0220 	orr.w	r2, r3, #32
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d90c:	2303      	movs	r3, #3
 800d90e:	e027      	b.n	800d960 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	2200      	movs	r2, #0
 800d918:	2180      	movs	r1, #128	; 0x80
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f7ff ff07 	bl	800d72e <SPI_WaitFlagStateUntilTimeout>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d007      	beq.n	800d936 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d92a:	f043 0220 	orr.w	r2, r3, #32
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d932:	2303      	movs	r3, #3
 800d934:	e014      	b.n	800d960 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d942:	68f8      	ldr	r0, [r7, #12]
 800d944:	f7ff ff5d 	bl	800d802 <SPI_WaitFifoStateUntilTimeout>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d007      	beq.n	800d95e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d952:	f043 0220 	orr.w	r2, r3, #32
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d95a:	2303      	movs	r3, #3
 800d95c:	e000      	b.n	800d960 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d101      	bne.n	800d97a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d976:	2301      	movs	r3, #1
 800d978:	e01d      	b.n	800d9b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d106      	bne.n	800d994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f7fa fd5e 	bl	8008450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2202      	movs	r2, #2
 800d998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	f000 fb82 	bl	800e0b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
	...

0800d9c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68da      	ldr	r2, [r3, #12]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f042 0201 	orr.w	r2, r2, #1
 800d9d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689a      	ldr	r2, [r3, #8]
 800d9de:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <HAL_TIM_Base_Start_IT+0x50>)
 800d9e0:	4013      	ands	r3, r2
 800d9e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b06      	cmp	r3, #6
 800d9e8:	d00b      	beq.n	800da02 <HAL_TIM_Base_Start_IT+0x42>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9f0:	d007      	beq.n	800da02 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f042 0201 	orr.w	r2, r2, #1
 800da00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr
 800da10:	00010007 	.word	0x00010007

0800da14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	e01d      	b.n	800da62 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d106      	bne.n	800da40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f815 	bl	800da6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2202      	movs	r2, #2
 800da44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	3304      	adds	r3, #4
 800da50:	4619      	mov	r1, r3
 800da52:	4610      	mov	r0, r2
 800da54:	f000 fb2c 	bl	800e0b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800da6a:	b480      	push	{r7}
 800da6c:	b083      	sub	sp, #12
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800da72:	bf00      	nop
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	f003 0302 	and.w	r3, r3, #2
 800da90:	2b02      	cmp	r3, #2
 800da92:	d122      	bne.n	800dada <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	f003 0302 	and.w	r3, r3, #2
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d11b      	bne.n	800dada <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f06f 0202 	mvn.w	r2, #2
 800daaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	f003 0303 	and.w	r3, r3, #3
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 fad7 	bl	800e074 <HAL_TIM_IC_CaptureCallback>
 800dac6:	e005      	b.n	800dad4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fac9 	bl	800e060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fada 	bl	800e088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	f003 0304 	and.w	r3, r3, #4
 800dae4:	2b04      	cmp	r3, #4
 800dae6:	d122      	bne.n	800db2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	f003 0304 	and.w	r3, r3, #4
 800daf2:	2b04      	cmp	r3, #4
 800daf4:	d11b      	bne.n	800db2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f06f 0204 	mvn.w	r2, #4
 800dafe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 faad 	bl	800e074 <HAL_TIM_IC_CaptureCallback>
 800db1a:	e005      	b.n	800db28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fa9f 	bl	800e060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 fab0 	bl	800e088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	f003 0308 	and.w	r3, r3, #8
 800db38:	2b08      	cmp	r3, #8
 800db3a:	d122      	bne.n	800db82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	f003 0308 	and.w	r3, r3, #8
 800db46:	2b08      	cmp	r3, #8
 800db48:	d11b      	bne.n	800db82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f06f 0208 	mvn.w	r2, #8
 800db52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2204      	movs	r2, #4
 800db58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	69db      	ldr	r3, [r3, #28]
 800db60:	f003 0303 	and.w	r3, r3, #3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d003      	beq.n	800db70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fa83 	bl	800e074 <HAL_TIM_IC_CaptureCallback>
 800db6e:	e005      	b.n	800db7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 fa75 	bl	800e060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 fa86 	bl	800e088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	691b      	ldr	r3, [r3, #16]
 800db88:	f003 0310 	and.w	r3, r3, #16
 800db8c:	2b10      	cmp	r3, #16
 800db8e:	d122      	bne.n	800dbd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	f003 0310 	and.w	r3, r3, #16
 800db9a:	2b10      	cmp	r3, #16
 800db9c:	d11b      	bne.n	800dbd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f06f 0210 	mvn.w	r2, #16
 800dba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2208      	movs	r2, #8
 800dbac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d003      	beq.n	800dbc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fa59 	bl	800e074 <HAL_TIM_IC_CaptureCallback>
 800dbc2:	e005      	b.n	800dbd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fa4b 	bl	800e060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 fa5c 	bl	800e088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	691b      	ldr	r3, [r3, #16]
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d10e      	bne.n	800dc02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d107      	bne.n	800dc02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f06f 0201 	mvn.w	r2, #1
 800dbfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7f7 f92f 	bl	8004e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	691b      	ldr	r3, [r3, #16]
 800dc08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc0c:	2b80      	cmp	r3, #128	; 0x80
 800dc0e:	d10e      	bne.n	800dc2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc1a:	2b80      	cmp	r3, #128	; 0x80
 800dc1c:	d107      	bne.n	800dc2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dc26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fe71 	bl	800e910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc3c:	d10e      	bne.n	800dc5c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc48:	2b80      	cmp	r3, #128	; 0x80
 800dc4a:	d107      	bne.n	800dc5c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dc54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fe64 	bl	800e924 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc66:	2b40      	cmp	r3, #64	; 0x40
 800dc68:	d10e      	bne.n	800dc88 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc74:	2b40      	cmp	r3, #64	; 0x40
 800dc76:	d107      	bne.n	800dc88 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dc80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fa0a 	bl	800e09c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	f003 0320 	and.w	r3, r3, #32
 800dc92:	2b20      	cmp	r3, #32
 800dc94:	d10e      	bne.n	800dcb4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	f003 0320 	and.w	r3, r3, #32
 800dca0:	2b20      	cmp	r3, #32
 800dca2:	d107      	bne.n	800dcb4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f06f 0220 	mvn.w	r2, #32
 800dcac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fe24 	bl	800e8fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcb4:	bf00      	nop
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d101      	bne.n	800dcd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800dcd2:	2302      	movs	r3, #2
 800dcd4:	e105      	b.n	800dee2 <HAL_TIM_PWM_ConfigChannel+0x226>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2202      	movs	r2, #2
 800dce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b14      	cmp	r3, #20
 800dcea:	f200 80f0 	bhi.w	800dece <HAL_TIM_PWM_ConfigChannel+0x212>
 800dcee:	a201      	add	r2, pc, #4	; (adr r2, 800dcf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800dcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf4:	0800dd49 	.word	0x0800dd49
 800dcf8:	0800decf 	.word	0x0800decf
 800dcfc:	0800decf 	.word	0x0800decf
 800dd00:	0800decf 	.word	0x0800decf
 800dd04:	0800dd89 	.word	0x0800dd89
 800dd08:	0800decf 	.word	0x0800decf
 800dd0c:	0800decf 	.word	0x0800decf
 800dd10:	0800decf 	.word	0x0800decf
 800dd14:	0800ddcb 	.word	0x0800ddcb
 800dd18:	0800decf 	.word	0x0800decf
 800dd1c:	0800decf 	.word	0x0800decf
 800dd20:	0800decf 	.word	0x0800decf
 800dd24:	0800de0b 	.word	0x0800de0b
 800dd28:	0800decf 	.word	0x0800decf
 800dd2c:	0800decf 	.word	0x0800decf
 800dd30:	0800decf 	.word	0x0800decf
 800dd34:	0800de4d 	.word	0x0800de4d
 800dd38:	0800decf 	.word	0x0800decf
 800dd3c:	0800decf 	.word	0x0800decf
 800dd40:	0800decf 	.word	0x0800decf
 800dd44:	0800de8d 	.word	0x0800de8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	68b9      	ldr	r1, [r7, #8]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 fa4e 	bl	800e1f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	699a      	ldr	r2, [r3, #24]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f042 0208 	orr.w	r2, r2, #8
 800dd62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	699a      	ldr	r2, [r3, #24]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f022 0204 	bic.w	r2, r2, #4
 800dd72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	6999      	ldr	r1, [r3, #24]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	691a      	ldr	r2, [r3, #16]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	430a      	orrs	r2, r1
 800dd84:	619a      	str	r2, [r3, #24]
      break;
 800dd86:	e0a3      	b.n	800ded0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	68b9      	ldr	r1, [r7, #8]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 faa0 	bl	800e2d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	699a      	ldr	r2, [r3, #24]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dda2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	699a      	ldr	r2, [r3, #24]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6999      	ldr	r1, [r3, #24]
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	021a      	lsls	r2, r3, #8
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	430a      	orrs	r2, r1
 800ddc6:	619a      	str	r2, [r3, #24]
      break;
 800ddc8:	e082      	b.n	800ded0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68b9      	ldr	r1, [r7, #8]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 faf7 	bl	800e3c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	69da      	ldr	r2, [r3, #28]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f042 0208 	orr.w	r2, r2, #8
 800dde4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	69da      	ldr	r2, [r3, #28]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f022 0204 	bic.w	r2, r2, #4
 800ddf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	69d9      	ldr	r1, [r3, #28]
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	691a      	ldr	r2, [r3, #16]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	430a      	orrs	r2, r1
 800de06:	61da      	str	r2, [r3, #28]
      break;
 800de08:	e062      	b.n	800ded0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	68b9      	ldr	r1, [r7, #8]
 800de10:	4618      	mov	r0, r3
 800de12:	f000 fb4d 	bl	800e4b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	69da      	ldr	r2, [r3, #28]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	69da      	ldr	r2, [r3, #28]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	69d9      	ldr	r1, [r3, #28]
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	021a      	lsls	r2, r3, #8
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	430a      	orrs	r2, r1
 800de48:	61da      	str	r2, [r3, #28]
      break;
 800de4a:	e041      	b.n	800ded0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68b9      	ldr	r1, [r7, #8]
 800de52:	4618      	mov	r0, r3
 800de54:	f000 fb84 	bl	800e560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f042 0208 	orr.w	r2, r2, #8
 800de66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f022 0204 	bic.w	r2, r2, #4
 800de76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	691a      	ldr	r2, [r3, #16]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	430a      	orrs	r2, r1
 800de88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800de8a:	e021      	b.n	800ded0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	4618      	mov	r0, r3
 800de94:	f000 fbb6 	bl	800e604 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	691b      	ldr	r3, [r3, #16]
 800dec2:	021a      	lsls	r2, r3, #8
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	430a      	orrs	r2, r1
 800deca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800decc:	e000      	b.n	800ded0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800dece:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dee0:	2300      	movs	r3, #0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop

0800deec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800defc:	2b01      	cmp	r3, #1
 800defe:	d101      	bne.n	800df04 <HAL_TIM_ConfigClockSource+0x18>
 800df00:	2302      	movs	r3, #2
 800df02:	e0a6      	b.n	800e052 <HAL_TIM_ConfigClockSource+0x166>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2202      	movs	r2, #2
 800df10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	689b      	ldr	r3, [r3, #8]
 800df1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	4b4f      	ldr	r3, [pc, #316]	; (800e05c <HAL_TIM_ConfigClockSource+0x170>)
 800df20:	4013      	ands	r3, r2
 800df22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b40      	cmp	r3, #64	; 0x40
 800df3a:	d067      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x120>
 800df3c:	2b40      	cmp	r3, #64	; 0x40
 800df3e:	d80b      	bhi.n	800df58 <HAL_TIM_ConfigClockSource+0x6c>
 800df40:	2b10      	cmp	r3, #16
 800df42:	d073      	beq.n	800e02c <HAL_TIM_ConfigClockSource+0x140>
 800df44:	2b10      	cmp	r3, #16
 800df46:	d802      	bhi.n	800df4e <HAL_TIM_ConfigClockSource+0x62>
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d06f      	beq.n	800e02c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800df4c:	e078      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800df4e:	2b20      	cmp	r3, #32
 800df50:	d06c      	beq.n	800e02c <HAL_TIM_ConfigClockSource+0x140>
 800df52:	2b30      	cmp	r3, #48	; 0x30
 800df54:	d06a      	beq.n	800e02c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800df56:	e073      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800df58:	2b70      	cmp	r3, #112	; 0x70
 800df5a:	d00d      	beq.n	800df78 <HAL_TIM_ConfigClockSource+0x8c>
 800df5c:	2b70      	cmp	r3, #112	; 0x70
 800df5e:	d804      	bhi.n	800df6a <HAL_TIM_ConfigClockSource+0x7e>
 800df60:	2b50      	cmp	r3, #80	; 0x50
 800df62:	d033      	beq.n	800dfcc <HAL_TIM_ConfigClockSource+0xe0>
 800df64:	2b60      	cmp	r3, #96	; 0x60
 800df66:	d041      	beq.n	800dfec <HAL_TIM_ConfigClockSource+0x100>
      break;
 800df68:	e06a      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800df6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df6e:	d066      	beq.n	800e03e <HAL_TIM_ConfigClockSource+0x152>
 800df70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df74:	d017      	beq.n	800dfa6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800df76:	e063      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6818      	ldr	r0, [r3, #0]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	6899      	ldr	r1, [r3, #8]
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	f000 fc0a 	bl	800e7a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800df9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	609a      	str	r2, [r3, #8]
      break;
 800dfa4:	e04c      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6818      	ldr	r0, [r3, #0]
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	6899      	ldr	r1, [r3, #8]
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	685a      	ldr	r2, [r3, #4]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	f000 fbf3 	bl	800e7a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	689a      	ldr	r2, [r3, #8]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dfc8:	609a      	str	r2, [r3, #8]
      break;
 800dfca:	e039      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6818      	ldr	r0, [r3, #0]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	6859      	ldr	r1, [r3, #4]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	f000 fb67 	bl	800e6ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2150      	movs	r1, #80	; 0x50
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f000 fbc0 	bl	800e76a <TIM_ITRx_SetConfig>
      break;
 800dfea:	e029      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6818      	ldr	r0, [r3, #0]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	6859      	ldr	r1, [r3, #4]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	461a      	mov	r2, r3
 800dffa:	f000 fb86 	bl	800e70a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2160      	movs	r1, #96	; 0x60
 800e004:	4618      	mov	r0, r3
 800e006:	f000 fbb0 	bl	800e76a <TIM_ITRx_SetConfig>
      break;
 800e00a:	e019      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6818      	ldr	r0, [r3, #0]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	6859      	ldr	r1, [r3, #4]
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	461a      	mov	r2, r3
 800e01a:	f000 fb47 	bl	800e6ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2140      	movs	r1, #64	; 0x40
 800e024:	4618      	mov	r0, r3
 800e026:	f000 fba0 	bl	800e76a <TIM_ITRx_SetConfig>
      break;
 800e02a:	e009      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4619      	mov	r1, r3
 800e036:	4610      	mov	r0, r2
 800e038:	f000 fb97 	bl	800e76a <TIM_ITRx_SetConfig>
      break;
 800e03c:	e000      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e03e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e050:	2300      	movs	r3, #0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	fffeff88 	.word	0xfffeff88

0800e060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e07c:	bf00      	nop
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	4a40      	ldr	r2, [pc, #256]	; (800e1c4 <TIM_Base_SetConfig+0x114>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d013      	beq.n	800e0f0 <TIM_Base_SetConfig+0x40>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0ce:	d00f      	beq.n	800e0f0 <TIM_Base_SetConfig+0x40>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4a3d      	ldr	r2, [pc, #244]	; (800e1c8 <TIM_Base_SetConfig+0x118>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d00b      	beq.n	800e0f0 <TIM_Base_SetConfig+0x40>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4a3c      	ldr	r2, [pc, #240]	; (800e1cc <TIM_Base_SetConfig+0x11c>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d007      	beq.n	800e0f0 <TIM_Base_SetConfig+0x40>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a3b      	ldr	r2, [pc, #236]	; (800e1d0 <TIM_Base_SetConfig+0x120>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d003      	beq.n	800e0f0 <TIM_Base_SetConfig+0x40>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4a3a      	ldr	r2, [pc, #232]	; (800e1d4 <TIM_Base_SetConfig+0x124>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d108      	bne.n	800e102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	4a2f      	ldr	r2, [pc, #188]	; (800e1c4 <TIM_Base_SetConfig+0x114>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d02b      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e110:	d027      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4a2c      	ldr	r2, [pc, #176]	; (800e1c8 <TIM_Base_SetConfig+0x118>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d023      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4a2b      	ldr	r2, [pc, #172]	; (800e1cc <TIM_Base_SetConfig+0x11c>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d01f      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4a2a      	ldr	r2, [pc, #168]	; (800e1d0 <TIM_Base_SetConfig+0x120>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d01b      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4a29      	ldr	r2, [pc, #164]	; (800e1d4 <TIM_Base_SetConfig+0x124>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d017      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	4a28      	ldr	r2, [pc, #160]	; (800e1d8 <TIM_Base_SetConfig+0x128>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d013      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4a27      	ldr	r2, [pc, #156]	; (800e1dc <TIM_Base_SetConfig+0x12c>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d00f      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4a26      	ldr	r2, [pc, #152]	; (800e1e0 <TIM_Base_SetConfig+0x130>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d00b      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4a25      	ldr	r2, [pc, #148]	; (800e1e4 <TIM_Base_SetConfig+0x134>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d007      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4a24      	ldr	r2, [pc, #144]	; (800e1e8 <TIM_Base_SetConfig+0x138>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d003      	beq.n	800e162 <TIM_Base_SetConfig+0xb2>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4a23      	ldr	r2, [pc, #140]	; (800e1ec <TIM_Base_SetConfig+0x13c>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d108      	bne.n	800e174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	4313      	orrs	r3, r2
 800e172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	695b      	ldr	r3, [r3, #20]
 800e17e:	4313      	orrs	r3, r2
 800e180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a0a      	ldr	r2, [pc, #40]	; (800e1c4 <TIM_Base_SetConfig+0x114>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d003      	beq.n	800e1a8 <TIM_Base_SetConfig+0xf8>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a0c      	ldr	r2, [pc, #48]	; (800e1d4 <TIM_Base_SetConfig+0x124>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d103      	bne.n	800e1b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	691a      	ldr	r2, [r3, #16]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	615a      	str	r2, [r3, #20]
}
 800e1b6:	bf00      	nop
 800e1b8:	3714      	adds	r7, #20
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	40010000 	.word	0x40010000
 800e1c8:	40000400 	.word	0x40000400
 800e1cc:	40000800 	.word	0x40000800
 800e1d0:	40000c00 	.word	0x40000c00
 800e1d4:	40010400 	.word	0x40010400
 800e1d8:	40014000 	.word	0x40014000
 800e1dc:	40014400 	.word	0x40014400
 800e1e0:	40014800 	.word	0x40014800
 800e1e4:	40001800 	.word	0x40001800
 800e1e8:	40001c00 	.word	0x40001c00
 800e1ec:	40002000 	.word	0x40002000

0800e1f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b087      	sub	sp, #28
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	f023 0201 	bic.w	r2, r3, #1
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a1b      	ldr	r3, [r3, #32]
 800e20a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	4b2b      	ldr	r3, [pc, #172]	; (800e2c8 <TIM_OC1_SetConfig+0xd8>)
 800e21c:	4013      	ands	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f023 0303 	bic.w	r3, r3, #3
 800e226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	4313      	orrs	r3, r2
 800e230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	f023 0302 	bic.w	r3, r3, #2
 800e238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	697a      	ldr	r2, [r7, #20]
 800e240:	4313      	orrs	r3, r2
 800e242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a21      	ldr	r2, [pc, #132]	; (800e2cc <TIM_OC1_SetConfig+0xdc>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d003      	beq.n	800e254 <TIM_OC1_SetConfig+0x64>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a20      	ldr	r2, [pc, #128]	; (800e2d0 <TIM_OC1_SetConfig+0xe0>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d10c      	bne.n	800e26e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f023 0308 	bic.w	r3, r3, #8
 800e25a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	697a      	ldr	r2, [r7, #20]
 800e262:	4313      	orrs	r3, r2
 800e264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f023 0304 	bic.w	r3, r3, #4
 800e26c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	4a16      	ldr	r2, [pc, #88]	; (800e2cc <TIM_OC1_SetConfig+0xdc>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d003      	beq.n	800e27e <TIM_OC1_SetConfig+0x8e>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4a15      	ldr	r2, [pc, #84]	; (800e2d0 <TIM_OC1_SetConfig+0xe0>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d111      	bne.n	800e2a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e28c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	693a      	ldr	r2, [r7, #16]
 800e294:	4313      	orrs	r3, r2
 800e296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	699b      	ldr	r3, [r3, #24]
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	697a      	ldr	r2, [r7, #20]
 800e2ba:	621a      	str	r2, [r3, #32]
}
 800e2bc:	bf00      	nop
 800e2be:	371c      	adds	r7, #28
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr
 800e2c8:	fffeff8f 	.word	0xfffeff8f
 800e2cc:	40010000 	.word	0x40010000
 800e2d0:	40010400 	.word	0x40010400

0800e2d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b087      	sub	sp, #28
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	f023 0210 	bic.w	r2, r3, #16
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6a1b      	ldr	r3, [r3, #32]
 800e2ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	699b      	ldr	r3, [r3, #24]
 800e2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	4b2e      	ldr	r3, [pc, #184]	; (800e3b8 <TIM_OC2_SetConfig+0xe4>)
 800e300:	4013      	ands	r3, r2
 800e302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e30a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	021b      	lsls	r3, r3, #8
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	4313      	orrs	r3, r2
 800e316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	f023 0320 	bic.w	r3, r3, #32
 800e31e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	011b      	lsls	r3, r3, #4
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	4313      	orrs	r3, r2
 800e32a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a23      	ldr	r2, [pc, #140]	; (800e3bc <TIM_OC2_SetConfig+0xe8>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d003      	beq.n	800e33c <TIM_OC2_SetConfig+0x68>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	4a22      	ldr	r2, [pc, #136]	; (800e3c0 <TIM_OC2_SetConfig+0xec>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d10d      	bne.n	800e358 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	011b      	lsls	r3, r3, #4
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	4313      	orrs	r3, r2
 800e34e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	4a18      	ldr	r2, [pc, #96]	; (800e3bc <TIM_OC2_SetConfig+0xe8>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d003      	beq.n	800e368 <TIM_OC2_SetConfig+0x94>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a17      	ldr	r2, [pc, #92]	; (800e3c0 <TIM_OC2_SetConfig+0xec>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d113      	bne.n	800e390 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e36e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	695b      	ldr	r3, [r3, #20]
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	693a      	ldr	r2, [r7, #16]
 800e380:	4313      	orrs	r3, r2
 800e382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	693a      	ldr	r2, [r7, #16]
 800e38c:	4313      	orrs	r3, r2
 800e38e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	685a      	ldr	r2, [r3, #4]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	621a      	str	r2, [r3, #32]
}
 800e3aa:	bf00      	nop
 800e3ac:	371c      	adds	r7, #28
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	feff8fff 	.word	0xfeff8fff
 800e3bc:	40010000 	.word	0x40010000
 800e3c0:	40010400 	.word	0x40010400

0800e3c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	4b2d      	ldr	r3, [pc, #180]	; (800e4a4 <TIM_OC3_SetConfig+0xe0>)
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f023 0303 	bic.w	r3, r3, #3
 800e3fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	4313      	orrs	r3, r2
 800e404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e40c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	021b      	lsls	r3, r3, #8
 800e414:	697a      	ldr	r2, [r7, #20]
 800e416:	4313      	orrs	r3, r2
 800e418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4a22      	ldr	r2, [pc, #136]	; (800e4a8 <TIM_OC3_SetConfig+0xe4>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d003      	beq.n	800e42a <TIM_OC3_SetConfig+0x66>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4a21      	ldr	r2, [pc, #132]	; (800e4ac <TIM_OC3_SetConfig+0xe8>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d10d      	bne.n	800e446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	021b      	lsls	r3, r3, #8
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	4313      	orrs	r3, r2
 800e43c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4a17      	ldr	r2, [pc, #92]	; (800e4a8 <TIM_OC3_SetConfig+0xe4>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d003      	beq.n	800e456 <TIM_OC3_SetConfig+0x92>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4a16      	ldr	r2, [pc, #88]	; (800e4ac <TIM_OC3_SetConfig+0xe8>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d113      	bne.n	800e47e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e45c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	695b      	ldr	r3, [r3, #20]
 800e46a:	011b      	lsls	r3, r3, #4
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	4313      	orrs	r3, r2
 800e470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	011b      	lsls	r3, r3, #4
 800e478:	693a      	ldr	r2, [r7, #16]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	693a      	ldr	r2, [r7, #16]
 800e482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	685a      	ldr	r2, [r3, #4]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	621a      	str	r2, [r3, #32]
}
 800e498:	bf00      	nop
 800e49a:	371c      	adds	r7, #28
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr
 800e4a4:	fffeff8f 	.word	0xfffeff8f
 800e4a8:	40010000 	.word	0x40010000
 800e4ac:	40010400 	.word	0x40010400

0800e4b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b087      	sub	sp, #28
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a1b      	ldr	r3, [r3, #32]
 800e4ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	4b1e      	ldr	r3, [pc, #120]	; (800e554 <TIM_OC4_SetConfig+0xa4>)
 800e4dc:	4013      	ands	r3, r2
 800e4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	021b      	lsls	r3, r3, #8
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	031b      	lsls	r3, r3, #12
 800e502:	693a      	ldr	r2, [r7, #16]
 800e504:	4313      	orrs	r3, r2
 800e506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4a13      	ldr	r2, [pc, #76]	; (800e558 <TIM_OC4_SetConfig+0xa8>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d003      	beq.n	800e518 <TIM_OC4_SetConfig+0x68>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	4a12      	ldr	r2, [pc, #72]	; (800e55c <TIM_OC4_SetConfig+0xac>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d109      	bne.n	800e52c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e51e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	695b      	ldr	r3, [r3, #20]
 800e524:	019b      	lsls	r3, r3, #6
 800e526:	697a      	ldr	r2, [r7, #20]
 800e528:	4313      	orrs	r3, r2
 800e52a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	697a      	ldr	r2, [r7, #20]
 800e530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	685a      	ldr	r2, [r3, #4]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	693a      	ldr	r2, [r7, #16]
 800e544:	621a      	str	r2, [r3, #32]
}
 800e546:	bf00      	nop
 800e548:	371c      	adds	r7, #28
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	feff8fff 	.word	0xfeff8fff
 800e558:	40010000 	.word	0x40010000
 800e55c:	40010400 	.word	0x40010400

0800e560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e560:	b480      	push	{r7}
 800e562:	b087      	sub	sp, #28
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6a1b      	ldr	r3, [r3, #32]
 800e57a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	4b1b      	ldr	r3, [pc, #108]	; (800e5f8 <TIM_OC5_SetConfig+0x98>)
 800e58c:	4013      	ands	r3, r2
 800e58e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	4313      	orrs	r3, r2
 800e598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e5a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	041b      	lsls	r3, r3, #16
 800e5a8:	693a      	ldr	r2, [r7, #16]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a12      	ldr	r2, [pc, #72]	; (800e5fc <TIM_OC5_SetConfig+0x9c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d003      	beq.n	800e5be <TIM_OC5_SetConfig+0x5e>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a11      	ldr	r2, [pc, #68]	; (800e600 <TIM_OC5_SetConfig+0xa0>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d109      	bne.n	800e5d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	021b      	lsls	r3, r3, #8
 800e5cc:	697a      	ldr	r2, [r7, #20]
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	697a      	ldr	r2, [r7, #20]
 800e5d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	68fa      	ldr	r2, [r7, #12]
 800e5dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	685a      	ldr	r2, [r3, #4]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	693a      	ldr	r2, [r7, #16]
 800e5ea:	621a      	str	r2, [r3, #32]
}
 800e5ec:	bf00      	nop
 800e5ee:	371c      	adds	r7, #28
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	fffeff8f 	.word	0xfffeff8f
 800e5fc:	40010000 	.word	0x40010000
 800e600:	40010400 	.word	0x40010400

0800e604 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e604:	b480      	push	{r7}
 800e606:	b087      	sub	sp, #28
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	4b1c      	ldr	r3, [pc, #112]	; (800e6a0 <TIM_OC6_SetConfig+0x9c>)
 800e630:	4013      	ands	r3, r2
 800e632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	021b      	lsls	r3, r3, #8
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	051b      	lsls	r3, r3, #20
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	4313      	orrs	r3, r2
 800e652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a13      	ldr	r2, [pc, #76]	; (800e6a4 <TIM_OC6_SetConfig+0xa0>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d003      	beq.n	800e664 <TIM_OC6_SetConfig+0x60>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a12      	ldr	r2, [pc, #72]	; (800e6a8 <TIM_OC6_SetConfig+0xa4>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d109      	bne.n	800e678 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e66a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	029b      	lsls	r3, r3, #10
 800e672:	697a      	ldr	r2, [r7, #20]
 800e674:	4313      	orrs	r3, r2
 800e676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	697a      	ldr	r2, [r7, #20]
 800e67c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	685a      	ldr	r2, [r3, #4]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	621a      	str	r2, [r3, #32]
}
 800e692:	bf00      	nop
 800e694:	371c      	adds	r7, #28
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	feff8fff 	.word	0xfeff8fff
 800e6a4:	40010000 	.word	0x40010000
 800e6a8:	40010400 	.word	0x40010400

0800e6ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b087      	sub	sp, #28
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6a1b      	ldr	r3, [r3, #32]
 800e6bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6a1b      	ldr	r3, [r3, #32]
 800e6c2:	f023 0201 	bic.w	r2, r3, #1
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e6d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	011b      	lsls	r3, r3, #4
 800e6dc:	693a      	ldr	r2, [r7, #16]
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	f023 030a 	bic.w	r3, r3, #10
 800e6e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6ea:	697a      	ldr	r2, [r7, #20]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	693a      	ldr	r2, [r7, #16]
 800e6f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	621a      	str	r2, [r3, #32]
}
 800e6fe:	bf00      	nop
 800e700:	371c      	adds	r7, #28
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr

0800e70a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e70a:	b480      	push	{r7}
 800e70c:	b087      	sub	sp, #28
 800e70e:	af00      	add	r7, sp, #0
 800e710:	60f8      	str	r0, [r7, #12]
 800e712:	60b9      	str	r1, [r7, #8]
 800e714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6a1b      	ldr	r3, [r3, #32]
 800e71a:	f023 0210 	bic.w	r2, r3, #16
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	699b      	ldr	r3, [r3, #24]
 800e726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6a1b      	ldr	r3, [r3, #32]
 800e72c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	031b      	lsls	r3, r3, #12
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	4313      	orrs	r3, r2
 800e73e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	011b      	lsls	r3, r3, #4
 800e74c:	693a      	ldr	r2, [r7, #16]
 800e74e:	4313      	orrs	r3, r2
 800e750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	697a      	ldr	r2, [r7, #20]
 800e756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	693a      	ldr	r2, [r7, #16]
 800e75c:	621a      	str	r2, [r3, #32]
}
 800e75e:	bf00      	nop
 800e760:	371c      	adds	r7, #28
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b085      	sub	sp, #20
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e782:	683a      	ldr	r2, [r7, #0]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	4313      	orrs	r3, r2
 800e788:	f043 0307 	orr.w	r3, r3, #7
 800e78c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	609a      	str	r2, [r3, #8]
}
 800e794:	bf00      	nop
 800e796:	3714      	adds	r7, #20
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b087      	sub	sp, #28
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	607a      	str	r2, [r7, #4]
 800e7ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e7ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	021a      	lsls	r2, r3, #8
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	431a      	orrs	r2, r3
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	609a      	str	r2, [r3, #8]
}
 800e7d4:	bf00      	nop
 800e7d6:	371c      	adds	r7, #28
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d101      	bne.n	800e7f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	e06d      	b.n	800e8d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2202      	movs	r2, #2
 800e804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a30      	ldr	r2, [pc, #192]	; (800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d004      	beq.n	800e82c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a2f      	ldr	r2, [pc, #188]	; (800e8e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d108      	bne.n	800e83e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e832:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	4313      	orrs	r3, r2
 800e83c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e844:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a20      	ldr	r2, [pc, #128]	; (800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d022      	beq.n	800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e86a:	d01d      	beq.n	800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a1d      	ldr	r2, [pc, #116]	; (800e8e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d018      	beq.n	800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a1c      	ldr	r2, [pc, #112]	; (800e8ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d013      	beq.n	800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a1a      	ldr	r2, [pc, #104]	; (800e8f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d00e      	beq.n	800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a15      	ldr	r2, [pc, #84]	; (800e8e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d009      	beq.n	800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a16      	ldr	r2, [pc, #88]	; (800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d004      	beq.n	800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a15      	ldr	r2, [pc, #84]	; (800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d10c      	bne.n	800e8c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	40010000 	.word	0x40010000
 800e8e4:	40010400 	.word	0x40010400
 800e8e8:	40000400 	.word	0x40000400
 800e8ec:	40000800 	.word	0x40000800
 800e8f0:	40000c00 	.word	0x40000c00
 800e8f4:	40014000 	.word	0x40014000
 800e8f8:	40001800 	.word	0x40001800

0800e8fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e904:	bf00      	nop
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d101      	bne.n	800e94a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e946:	2301      	movs	r3, #1
 800e948:	e040      	b.n	800e9cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d106      	bne.n	800e960 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f7f9 fe0a 	bl	8008574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2224      	movs	r2, #36	; 0x24
 800e964:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f022 0201 	bic.w	r2, r2, #1
 800e974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f8be 	bl	800eaf8 <UART_SetConfig>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d101      	bne.n	800e986 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	e022      	b.n	800e9cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d002      	beq.n	800e994 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 fb5c 	bl	800f04c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685a      	ldr	r2, [r3, #4]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e9a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	689a      	ldr	r2, [r3, #8]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e9b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 0201 	orr.w	r2, r2, #1
 800e9c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 fbe3 	bl	800f190 <UART_CheckIdleState>
 800e9ca:	4603      	mov	r3, r0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b08a      	sub	sp, #40	; 0x28
 800e9d8:	af02      	add	r7, sp, #8
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	603b      	str	r3, [r7, #0]
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9e8:	2b20      	cmp	r3, #32
 800e9ea:	d17f      	bne.n	800eaec <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <HAL_UART_Transmit+0x24>
 800e9f2:	88fb      	ldrh	r3, [r7, #6]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d101      	bne.n	800e9fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e078      	b.n	800eaee <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d101      	bne.n	800ea0a <HAL_UART_Transmit+0x36>
 800ea06:	2302      	movs	r3, #2
 800ea08:	e071      	b.n	800eaee <HAL_UART_Transmit+0x11a>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2221      	movs	r2, #33	; 0x21
 800ea1c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ea1e:	f7fa fc31 	bl	8009284 <HAL_GetTick>
 800ea22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	88fa      	ldrh	r2, [r7, #6]
 800ea28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	88fa      	ldrh	r2, [r7, #6]
 800ea30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea3c:	d108      	bne.n	800ea50 <HAL_UART_Transmit+0x7c>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d104      	bne.n	800ea50 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	61bb      	str	r3, [r7, #24]
 800ea4e:	e003      	b.n	800ea58 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea54:	2300      	movs	r3, #0
 800ea56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800ea60:	e02c      	b.n	800eabc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2180      	movs	r1, #128	; 0x80
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f000 fbd4 	bl	800f21a <UART_WaitOnFlagUntilTimeout>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800ea78:	2303      	movs	r3, #3
 800ea7a:	e038      	b.n	800eaee <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10b      	bne.n	800ea9a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	881b      	ldrh	r3, [r3, #0]
 800ea86:	461a      	mov	r2, r3
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	3302      	adds	r3, #2
 800ea96:	61bb      	str	r3, [r7, #24]
 800ea98:	e007      	b.n	800eaaa <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	781a      	ldrb	r2, [r3, #0]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	3b01      	subs	r3, #1
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1cc      	bne.n	800ea62 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	2200      	movs	r2, #0
 800ead0:	2140      	movs	r1, #64	; 0x40
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 fba1 	bl	800f21a <UART_WaitOnFlagUntilTimeout>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800eade:	2303      	movs	r3, #3
 800eae0:	e005      	b.n	800eaee <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2220      	movs	r2, #32
 800eae6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	e000      	b.n	800eaee <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800eaec:	2302      	movs	r3, #2
  }
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3720      	adds	r7, #32
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
	...

0800eaf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b088      	sub	sp, #32
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800eb00:	2300      	movs	r3, #0
 800eb02:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	689a      	ldr	r2, [r3, #8]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	691b      	ldr	r3, [r3, #16]
 800eb10:	431a      	orrs	r2, r3
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	695b      	ldr	r3, [r3, #20]
 800eb16:	431a      	orrs	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	69db      	ldr	r3, [r3, #28]
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	4bb1      	ldr	r3, [pc, #708]	; (800edec <UART_SetConfig+0x2f4>)
 800eb28:	4013      	ands	r3, r2
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	6812      	ldr	r2, [r2, #0]
 800eb2e:	6939      	ldr	r1, [r7, #16]
 800eb30:	430b      	orrs	r3, r1
 800eb32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	68da      	ldr	r2, [r3, #12]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	430a      	orrs	r2, r1
 800eb48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a1b      	ldr	r3, [r3, #32]
 800eb54:	693a      	ldr	r2, [r7, #16]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	430a      	orrs	r2, r1
 800eb6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a9f      	ldr	r2, [pc, #636]	; (800edf0 <UART_SetConfig+0x2f8>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d121      	bne.n	800ebbc <UART_SetConfig+0xc4>
 800eb78:	4b9e      	ldr	r3, [pc, #632]	; (800edf4 <UART_SetConfig+0x2fc>)
 800eb7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb7e:	f003 0303 	and.w	r3, r3, #3
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d816      	bhi.n	800ebb4 <UART_SetConfig+0xbc>
 800eb86:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <UART_SetConfig+0x94>)
 800eb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8c:	0800eb9d 	.word	0x0800eb9d
 800eb90:	0800eba9 	.word	0x0800eba9
 800eb94:	0800eba3 	.word	0x0800eba3
 800eb98:	0800ebaf 	.word	0x0800ebaf
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	77fb      	strb	r3, [r7, #31]
 800eba0:	e151      	b.n	800ee46 <UART_SetConfig+0x34e>
 800eba2:	2302      	movs	r3, #2
 800eba4:	77fb      	strb	r3, [r7, #31]
 800eba6:	e14e      	b.n	800ee46 <UART_SetConfig+0x34e>
 800eba8:	2304      	movs	r3, #4
 800ebaa:	77fb      	strb	r3, [r7, #31]
 800ebac:	e14b      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ebae:	2308      	movs	r3, #8
 800ebb0:	77fb      	strb	r3, [r7, #31]
 800ebb2:	e148      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ebb4:	2310      	movs	r3, #16
 800ebb6:	77fb      	strb	r3, [r7, #31]
 800ebb8:	bf00      	nop
 800ebba:	e144      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a8d      	ldr	r2, [pc, #564]	; (800edf8 <UART_SetConfig+0x300>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d134      	bne.n	800ec30 <UART_SetConfig+0x138>
 800ebc6:	4b8b      	ldr	r3, [pc, #556]	; (800edf4 <UART_SetConfig+0x2fc>)
 800ebc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebcc:	f003 030c 	and.w	r3, r3, #12
 800ebd0:	2b0c      	cmp	r3, #12
 800ebd2:	d829      	bhi.n	800ec28 <UART_SetConfig+0x130>
 800ebd4:	a201      	add	r2, pc, #4	; (adr r2, 800ebdc <UART_SetConfig+0xe4>)
 800ebd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebda:	bf00      	nop
 800ebdc:	0800ec11 	.word	0x0800ec11
 800ebe0:	0800ec29 	.word	0x0800ec29
 800ebe4:	0800ec29 	.word	0x0800ec29
 800ebe8:	0800ec29 	.word	0x0800ec29
 800ebec:	0800ec1d 	.word	0x0800ec1d
 800ebf0:	0800ec29 	.word	0x0800ec29
 800ebf4:	0800ec29 	.word	0x0800ec29
 800ebf8:	0800ec29 	.word	0x0800ec29
 800ebfc:	0800ec17 	.word	0x0800ec17
 800ec00:	0800ec29 	.word	0x0800ec29
 800ec04:	0800ec29 	.word	0x0800ec29
 800ec08:	0800ec29 	.word	0x0800ec29
 800ec0c:	0800ec23 	.word	0x0800ec23
 800ec10:	2300      	movs	r3, #0
 800ec12:	77fb      	strb	r3, [r7, #31]
 800ec14:	e117      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec16:	2302      	movs	r3, #2
 800ec18:	77fb      	strb	r3, [r7, #31]
 800ec1a:	e114      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec1c:	2304      	movs	r3, #4
 800ec1e:	77fb      	strb	r3, [r7, #31]
 800ec20:	e111      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec22:	2308      	movs	r3, #8
 800ec24:	77fb      	strb	r3, [r7, #31]
 800ec26:	e10e      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec28:	2310      	movs	r3, #16
 800ec2a:	77fb      	strb	r3, [r7, #31]
 800ec2c:	bf00      	nop
 800ec2e:	e10a      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a71      	ldr	r2, [pc, #452]	; (800edfc <UART_SetConfig+0x304>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d120      	bne.n	800ec7c <UART_SetConfig+0x184>
 800ec3a:	4b6e      	ldr	r3, [pc, #440]	; (800edf4 <UART_SetConfig+0x2fc>)
 800ec3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ec44:	2b10      	cmp	r3, #16
 800ec46:	d00f      	beq.n	800ec68 <UART_SetConfig+0x170>
 800ec48:	2b10      	cmp	r3, #16
 800ec4a:	d802      	bhi.n	800ec52 <UART_SetConfig+0x15a>
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d005      	beq.n	800ec5c <UART_SetConfig+0x164>
 800ec50:	e010      	b.n	800ec74 <UART_SetConfig+0x17c>
 800ec52:	2b20      	cmp	r3, #32
 800ec54:	d005      	beq.n	800ec62 <UART_SetConfig+0x16a>
 800ec56:	2b30      	cmp	r3, #48	; 0x30
 800ec58:	d009      	beq.n	800ec6e <UART_SetConfig+0x176>
 800ec5a:	e00b      	b.n	800ec74 <UART_SetConfig+0x17c>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	77fb      	strb	r3, [r7, #31]
 800ec60:	e0f1      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec62:	2302      	movs	r3, #2
 800ec64:	77fb      	strb	r3, [r7, #31]
 800ec66:	e0ee      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec68:	2304      	movs	r3, #4
 800ec6a:	77fb      	strb	r3, [r7, #31]
 800ec6c:	e0eb      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec6e:	2308      	movs	r3, #8
 800ec70:	77fb      	strb	r3, [r7, #31]
 800ec72:	e0e8      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec74:	2310      	movs	r3, #16
 800ec76:	77fb      	strb	r3, [r7, #31]
 800ec78:	bf00      	nop
 800ec7a:	e0e4      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a5f      	ldr	r2, [pc, #380]	; (800ee00 <UART_SetConfig+0x308>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d120      	bne.n	800ecc8 <UART_SetConfig+0x1d0>
 800ec86:	4b5b      	ldr	r3, [pc, #364]	; (800edf4 <UART_SetConfig+0x2fc>)
 800ec88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ec90:	2b40      	cmp	r3, #64	; 0x40
 800ec92:	d00f      	beq.n	800ecb4 <UART_SetConfig+0x1bc>
 800ec94:	2b40      	cmp	r3, #64	; 0x40
 800ec96:	d802      	bhi.n	800ec9e <UART_SetConfig+0x1a6>
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <UART_SetConfig+0x1b0>
 800ec9c:	e010      	b.n	800ecc0 <UART_SetConfig+0x1c8>
 800ec9e:	2b80      	cmp	r3, #128	; 0x80
 800eca0:	d005      	beq.n	800ecae <UART_SetConfig+0x1b6>
 800eca2:	2bc0      	cmp	r3, #192	; 0xc0
 800eca4:	d009      	beq.n	800ecba <UART_SetConfig+0x1c2>
 800eca6:	e00b      	b.n	800ecc0 <UART_SetConfig+0x1c8>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	77fb      	strb	r3, [r7, #31]
 800ecac:	e0cb      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ecae:	2302      	movs	r3, #2
 800ecb0:	77fb      	strb	r3, [r7, #31]
 800ecb2:	e0c8      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ecb4:	2304      	movs	r3, #4
 800ecb6:	77fb      	strb	r3, [r7, #31]
 800ecb8:	e0c5      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ecba:	2308      	movs	r3, #8
 800ecbc:	77fb      	strb	r3, [r7, #31]
 800ecbe:	e0c2      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ecc0:	2310      	movs	r3, #16
 800ecc2:	77fb      	strb	r3, [r7, #31]
 800ecc4:	bf00      	nop
 800ecc6:	e0be      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a4d      	ldr	r2, [pc, #308]	; (800ee04 <UART_SetConfig+0x30c>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d124      	bne.n	800ed1c <UART_SetConfig+0x224>
 800ecd2:	4b48      	ldr	r3, [pc, #288]	; (800edf4 <UART_SetConfig+0x2fc>)
 800ecd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ece0:	d012      	beq.n	800ed08 <UART_SetConfig+0x210>
 800ece2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ece6:	d802      	bhi.n	800ecee <UART_SetConfig+0x1f6>
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d007      	beq.n	800ecfc <UART_SetConfig+0x204>
 800ecec:	e012      	b.n	800ed14 <UART_SetConfig+0x21c>
 800ecee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecf2:	d006      	beq.n	800ed02 <UART_SetConfig+0x20a>
 800ecf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecf8:	d009      	beq.n	800ed0e <UART_SetConfig+0x216>
 800ecfa:	e00b      	b.n	800ed14 <UART_SetConfig+0x21c>
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	77fb      	strb	r3, [r7, #31]
 800ed00:	e0a1      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed02:	2302      	movs	r3, #2
 800ed04:	77fb      	strb	r3, [r7, #31]
 800ed06:	e09e      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed08:	2304      	movs	r3, #4
 800ed0a:	77fb      	strb	r3, [r7, #31]
 800ed0c:	e09b      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed0e:	2308      	movs	r3, #8
 800ed10:	77fb      	strb	r3, [r7, #31]
 800ed12:	e098      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed14:	2310      	movs	r3, #16
 800ed16:	77fb      	strb	r3, [r7, #31]
 800ed18:	bf00      	nop
 800ed1a:	e094      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a39      	ldr	r2, [pc, #228]	; (800ee08 <UART_SetConfig+0x310>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d124      	bne.n	800ed70 <UART_SetConfig+0x278>
 800ed26:	4b33      	ldr	r3, [pc, #204]	; (800edf4 <UART_SetConfig+0x2fc>)
 800ed28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ed30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed34:	d012      	beq.n	800ed5c <UART_SetConfig+0x264>
 800ed36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed3a:	d802      	bhi.n	800ed42 <UART_SetConfig+0x24a>
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d007      	beq.n	800ed50 <UART_SetConfig+0x258>
 800ed40:	e012      	b.n	800ed68 <UART_SetConfig+0x270>
 800ed42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed46:	d006      	beq.n	800ed56 <UART_SetConfig+0x25e>
 800ed48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ed4c:	d009      	beq.n	800ed62 <UART_SetConfig+0x26a>
 800ed4e:	e00b      	b.n	800ed68 <UART_SetConfig+0x270>
 800ed50:	2301      	movs	r3, #1
 800ed52:	77fb      	strb	r3, [r7, #31]
 800ed54:	e077      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed56:	2302      	movs	r3, #2
 800ed58:	77fb      	strb	r3, [r7, #31]
 800ed5a:	e074      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed5c:	2304      	movs	r3, #4
 800ed5e:	77fb      	strb	r3, [r7, #31]
 800ed60:	e071      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed62:	2308      	movs	r3, #8
 800ed64:	77fb      	strb	r3, [r7, #31]
 800ed66:	e06e      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed68:	2310      	movs	r3, #16
 800ed6a:	77fb      	strb	r3, [r7, #31]
 800ed6c:	bf00      	nop
 800ed6e:	e06a      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a25      	ldr	r2, [pc, #148]	; (800ee0c <UART_SetConfig+0x314>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d124      	bne.n	800edc4 <UART_SetConfig+0x2cc>
 800ed7a:	4b1e      	ldr	r3, [pc, #120]	; (800edf4 <UART_SetConfig+0x2fc>)
 800ed7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ed84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed88:	d012      	beq.n	800edb0 <UART_SetConfig+0x2b8>
 800ed8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed8e:	d802      	bhi.n	800ed96 <UART_SetConfig+0x29e>
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d007      	beq.n	800eda4 <UART_SetConfig+0x2ac>
 800ed94:	e012      	b.n	800edbc <UART_SetConfig+0x2c4>
 800ed96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed9a:	d006      	beq.n	800edaa <UART_SetConfig+0x2b2>
 800ed9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800eda0:	d009      	beq.n	800edb6 <UART_SetConfig+0x2be>
 800eda2:	e00b      	b.n	800edbc <UART_SetConfig+0x2c4>
 800eda4:	2300      	movs	r3, #0
 800eda6:	77fb      	strb	r3, [r7, #31]
 800eda8:	e04d      	b.n	800ee46 <UART_SetConfig+0x34e>
 800edaa:	2302      	movs	r3, #2
 800edac:	77fb      	strb	r3, [r7, #31]
 800edae:	e04a      	b.n	800ee46 <UART_SetConfig+0x34e>
 800edb0:	2304      	movs	r3, #4
 800edb2:	77fb      	strb	r3, [r7, #31]
 800edb4:	e047      	b.n	800ee46 <UART_SetConfig+0x34e>
 800edb6:	2308      	movs	r3, #8
 800edb8:	77fb      	strb	r3, [r7, #31]
 800edba:	e044      	b.n	800ee46 <UART_SetConfig+0x34e>
 800edbc:	2310      	movs	r3, #16
 800edbe:	77fb      	strb	r3, [r7, #31]
 800edc0:	bf00      	nop
 800edc2:	e040      	b.n	800ee46 <UART_SetConfig+0x34e>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a11      	ldr	r2, [pc, #68]	; (800ee10 <UART_SetConfig+0x318>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d139      	bne.n	800ee42 <UART_SetConfig+0x34a>
 800edce:	4b09      	ldr	r3, [pc, #36]	; (800edf4 <UART_SetConfig+0x2fc>)
 800edd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800edd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eddc:	d027      	beq.n	800ee2e <UART_SetConfig+0x336>
 800edde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ede2:	d817      	bhi.n	800ee14 <UART_SetConfig+0x31c>
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d01c      	beq.n	800ee22 <UART_SetConfig+0x32a>
 800ede8:	e027      	b.n	800ee3a <UART_SetConfig+0x342>
 800edea:	bf00      	nop
 800edec:	efff69f3 	.word	0xefff69f3
 800edf0:	40011000 	.word	0x40011000
 800edf4:	40023800 	.word	0x40023800
 800edf8:	40004400 	.word	0x40004400
 800edfc:	40004800 	.word	0x40004800
 800ee00:	40004c00 	.word	0x40004c00
 800ee04:	40005000 	.word	0x40005000
 800ee08:	40011400 	.word	0x40011400
 800ee0c:	40007800 	.word	0x40007800
 800ee10:	40007c00 	.word	0x40007c00
 800ee14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee18:	d006      	beq.n	800ee28 <UART_SetConfig+0x330>
 800ee1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ee1e:	d009      	beq.n	800ee34 <UART_SetConfig+0x33c>
 800ee20:	e00b      	b.n	800ee3a <UART_SetConfig+0x342>
 800ee22:	2300      	movs	r3, #0
 800ee24:	77fb      	strb	r3, [r7, #31]
 800ee26:	e00e      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ee28:	2302      	movs	r3, #2
 800ee2a:	77fb      	strb	r3, [r7, #31]
 800ee2c:	e00b      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ee2e:	2304      	movs	r3, #4
 800ee30:	77fb      	strb	r3, [r7, #31]
 800ee32:	e008      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ee34:	2308      	movs	r3, #8
 800ee36:	77fb      	strb	r3, [r7, #31]
 800ee38:	e005      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ee3a:	2310      	movs	r3, #16
 800ee3c:	77fb      	strb	r3, [r7, #31]
 800ee3e:	bf00      	nop
 800ee40:	e001      	b.n	800ee46 <UART_SetConfig+0x34e>
 800ee42:	2310      	movs	r3, #16
 800ee44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	69db      	ldr	r3, [r3, #28]
 800ee4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee4e:	d17f      	bne.n	800ef50 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ee50:	7ffb      	ldrb	r3, [r7, #31]
 800ee52:	2b08      	cmp	r3, #8
 800ee54:	d85c      	bhi.n	800ef10 <UART_SetConfig+0x418>
 800ee56:	a201      	add	r2, pc, #4	; (adr r2, 800ee5c <UART_SetConfig+0x364>)
 800ee58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee5c:	0800ee81 	.word	0x0800ee81
 800ee60:	0800eea1 	.word	0x0800eea1
 800ee64:	0800eec1 	.word	0x0800eec1
 800ee68:	0800ef11 	.word	0x0800ef11
 800ee6c:	0800eed9 	.word	0x0800eed9
 800ee70:	0800ef11 	.word	0x0800ef11
 800ee74:	0800ef11 	.word	0x0800ef11
 800ee78:	0800ef11 	.word	0x0800ef11
 800ee7c:	0800eef9 	.word	0x0800eef9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee80:	f7fd fc16 	bl	800c6b0 <HAL_RCC_GetPCLK1Freq>
 800ee84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	005a      	lsls	r2, r3, #1
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	085b      	lsrs	r3, r3, #1
 800ee90:	441a      	add	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	61bb      	str	r3, [r7, #24]
        break;
 800ee9e:	e03a      	b.n	800ef16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eea0:	f7fd fc1a 	bl	800c6d8 <HAL_RCC_GetPCLK2Freq>
 800eea4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	005a      	lsls	r2, r3, #1
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	085b      	lsrs	r3, r3, #1
 800eeb0:	441a      	add	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	61bb      	str	r3, [r7, #24]
        break;
 800eebe:	e02a      	b.n	800ef16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	085a      	lsrs	r2, r3, #1
 800eec6:	4b5f      	ldr	r3, [pc, #380]	; (800f044 <UART_SetConfig+0x54c>)
 800eec8:	4413      	add	r3, r2
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	6852      	ldr	r2, [r2, #4]
 800eece:	fbb3 f3f2 	udiv	r3, r3, r2
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	61bb      	str	r3, [r7, #24]
        break;
 800eed6:	e01e      	b.n	800ef16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eed8:	f7fd fb2c 	bl	800c534 <HAL_RCC_GetSysClockFreq>
 800eedc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	005a      	lsls	r2, r3, #1
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	085b      	lsrs	r3, r3, #1
 800eee8:	441a      	add	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	fbb2 f3f3 	udiv	r3, r2, r3
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	61bb      	str	r3, [r7, #24]
        break;
 800eef6:	e00e      	b.n	800ef16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	085b      	lsrs	r3, r3, #1
 800eefe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	61bb      	str	r3, [r7, #24]
        break;
 800ef0e:	e002      	b.n	800ef16 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	75fb      	strb	r3, [r7, #23]
        break;
 800ef14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	2b0f      	cmp	r3, #15
 800ef1a:	d916      	bls.n	800ef4a <UART_SetConfig+0x452>
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef22:	d212      	bcs.n	800ef4a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	f023 030f 	bic.w	r3, r3, #15
 800ef2c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	085b      	lsrs	r3, r3, #1
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	f003 0307 	and.w	r3, r3, #7
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	897b      	ldrh	r3, [r7, #10]
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	897a      	ldrh	r2, [r7, #10]
 800ef46:	60da      	str	r2, [r3, #12]
 800ef48:	e070      	b.n	800f02c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	75fb      	strb	r3, [r7, #23]
 800ef4e:	e06d      	b.n	800f02c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ef50:	7ffb      	ldrb	r3, [r7, #31]
 800ef52:	2b08      	cmp	r3, #8
 800ef54:	d859      	bhi.n	800f00a <UART_SetConfig+0x512>
 800ef56:	a201      	add	r2, pc, #4	; (adr r2, 800ef5c <UART_SetConfig+0x464>)
 800ef58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef5c:	0800ef81 	.word	0x0800ef81
 800ef60:	0800ef9f 	.word	0x0800ef9f
 800ef64:	0800efbd 	.word	0x0800efbd
 800ef68:	0800f00b 	.word	0x0800f00b
 800ef6c:	0800efd5 	.word	0x0800efd5
 800ef70:	0800f00b 	.word	0x0800f00b
 800ef74:	0800f00b 	.word	0x0800f00b
 800ef78:	0800f00b 	.word	0x0800f00b
 800ef7c:	0800eff3 	.word	0x0800eff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef80:	f7fd fb96 	bl	800c6b0 <HAL_RCC_GetPCLK1Freq>
 800ef84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	085a      	lsrs	r2, r3, #1
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	441a      	add	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	61bb      	str	r3, [r7, #24]
        break;
 800ef9c:	e038      	b.n	800f010 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef9e:	f7fd fb9b 	bl	800c6d8 <HAL_RCC_GetPCLK2Freq>
 800efa2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	085a      	lsrs	r2, r3, #1
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	441a      	add	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	61bb      	str	r3, [r7, #24]
        break;
 800efba:	e029      	b.n	800f010 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	085a      	lsrs	r2, r3, #1
 800efc2:	4b21      	ldr	r3, [pc, #132]	; (800f048 <UART_SetConfig+0x550>)
 800efc4:	4413      	add	r3, r2
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	6852      	ldr	r2, [r2, #4]
 800efca:	fbb3 f3f2 	udiv	r3, r3, r2
 800efce:	b29b      	uxth	r3, r3
 800efd0:	61bb      	str	r3, [r7, #24]
        break;
 800efd2:	e01d      	b.n	800f010 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800efd4:	f7fd faae 	bl	800c534 <HAL_RCC_GetSysClockFreq>
 800efd8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	085a      	lsrs	r2, r3, #1
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	441a      	add	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800efec:	b29b      	uxth	r3, r3
 800efee:	61bb      	str	r3, [r7, #24]
        break;
 800eff0:	e00e      	b.n	800f010 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	085b      	lsrs	r3, r3, #1
 800eff8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	fbb2 f3f3 	udiv	r3, r2, r3
 800f004:	b29b      	uxth	r3, r3
 800f006:	61bb      	str	r3, [r7, #24]
        break;
 800f008:	e002      	b.n	800f010 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800f00a:	2301      	movs	r3, #1
 800f00c:	75fb      	strb	r3, [r7, #23]
        break;
 800f00e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	2b0f      	cmp	r3, #15
 800f014:	d908      	bls.n	800f028 <UART_SetConfig+0x530>
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f01c:	d204      	bcs.n	800f028 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	69ba      	ldr	r2, [r7, #24]
 800f024:	60da      	str	r2, [r3, #12]
 800f026:	e001      	b.n	800f02c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f038:	7dfb      	ldrb	r3, [r7, #23]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3720      	adds	r7, #32
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	01e84800 	.word	0x01e84800
 800f048:	00f42400 	.word	0x00f42400

0800f04c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f058:	f003 0301 	and.w	r3, r3, #1
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00a      	beq.n	800f076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	430a      	orrs	r2, r1
 800f074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07a:	f003 0302 	and.w	r3, r3, #2
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00a      	beq.n	800f098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	430a      	orrs	r2, r1
 800f096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09c:	f003 0304 	and.w	r3, r3, #4
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d00a      	beq.n	800f0ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	430a      	orrs	r2, r1
 800f0b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0be:	f003 0308 	and.w	r3, r3, #8
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00a      	beq.n	800f0dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	430a      	orrs	r2, r1
 800f0da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e0:	f003 0310 	and.w	r3, r3, #16
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00a      	beq.n	800f0fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	689b      	ldr	r3, [r3, #8]
 800f0ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f102:	f003 0320 	and.w	r3, r3, #32
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00a      	beq.n	800f120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	430a      	orrs	r2, r1
 800f11e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d01a      	beq.n	800f162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	430a      	orrs	r2, r1
 800f140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f14a:	d10a      	bne.n	800f162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	430a      	orrs	r2, r1
 800f160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00a      	beq.n	800f184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	430a      	orrs	r2, r1
 800f182:	605a      	str	r2, [r3, #4]
  }
}
 800f184:	bf00      	nop
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af02      	add	r7, sp, #8
 800f196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f19e:	f7fa f871 	bl	8009284 <HAL_GetTick>
 800f1a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f003 0308 	and.w	r3, r3, #8
 800f1ae:	2b08      	cmp	r3, #8
 800f1b0:	d10e      	bne.n	800f1d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 f82a 	bl	800f21a <UART_WaitOnFlagUntilTimeout>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d001      	beq.n	800f1d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1cc:	2303      	movs	r3, #3
 800f1ce:	e020      	b.n	800f212 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f003 0304 	and.w	r3, r3, #4
 800f1da:	2b04      	cmp	r3, #4
 800f1dc:	d10e      	bne.n	800f1fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 f814 	bl	800f21a <UART_WaitOnFlagUntilTimeout>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	e00a      	b.n	800f212 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2220      	movs	r2, #32
 800f200:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2220      	movs	r2, #32
 800f206:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f210:	2300      	movs	r3, #0
}
 800f212:	4618      	mov	r0, r3
 800f214:	3710      	adds	r7, #16
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b084      	sub	sp, #16
 800f21e:	af00      	add	r7, sp, #0
 800f220:	60f8      	str	r0, [r7, #12]
 800f222:	60b9      	str	r1, [r7, #8]
 800f224:	603b      	str	r3, [r7, #0]
 800f226:	4613      	mov	r3, r2
 800f228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f22a:	e05d      	b.n	800f2e8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f232:	d059      	beq.n	800f2e8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f234:	f7fa f826 	bl	8009284 <HAL_GetTick>
 800f238:	4602      	mov	r2, r0
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	69ba      	ldr	r2, [r7, #24]
 800f240:	429a      	cmp	r2, r3
 800f242:	d302      	bcc.n	800f24a <UART_WaitOnFlagUntilTimeout+0x30>
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d11b      	bne.n	800f282 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f258:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	689a      	ldr	r2, [r3, #8]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f022 0201 	bic.w	r2, r2, #1
 800f268:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2220      	movs	r2, #32
 800f26e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2220      	movs	r2, #32
 800f274:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2200      	movs	r2, #0
 800f27a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f27e:	2303      	movs	r3, #3
 800f280:	e042      	b.n	800f308 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f003 0304 	and.w	r3, r3, #4
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d02b      	beq.n	800f2e8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	69db      	ldr	r3, [r3, #28]
 800f296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f29a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f29e:	d123      	bne.n	800f2e8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2a8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f2b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	689a      	ldr	r2, [r3, #8]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f022 0201 	bic.w	r2, r2, #1
 800f2c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2220      	movs	r2, #32
 800f2ce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2220      	movs	r2, #32
 800f2d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2220      	movs	r2, #32
 800f2da:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	e00f      	b.n	800f308 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	69da      	ldr	r2, [r3, #28]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	4013      	ands	r3, r2
 800f2f2:	68ba      	ldr	r2, [r7, #8]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	bf0c      	ite	eq
 800f2f8:	2301      	moveq	r3, #1
 800f2fa:	2300      	movne	r3, #0
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	461a      	mov	r2, r3
 800f300:	79fb      	ldrb	r3, [r7, #7]
 800f302:	429a      	cmp	r2, r3
 800f304:	d092      	beq.n	800f22c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f306:	2300      	movs	r3, #0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f310:	b084      	sub	sp, #16
 800f312:	b580      	push	{r7, lr}
 800f314:	b084      	sub	sp, #16
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	f107 001c 	add.w	r0, r7, #28
 800f31e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	2b01      	cmp	r3, #1
 800f326:	d120      	bne.n	800f36a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f32c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	68da      	ldr	r2, [r3, #12]
 800f338:	4b20      	ldr	r3, [pc, #128]	; (800f3bc <USB_CoreInit+0xac>)
 800f33a:	4013      	ands	r3, r2
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d105      	bne.n	800f35e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fa52 	bl	800f808 <USB_CoreReset>
 800f364:	4603      	mov	r3, r0
 800f366:	73fb      	strb	r3, [r7, #15]
 800f368:	e010      	b.n	800f38c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fa46 	bl	800f808 <USB_CoreReset>
 800f37c:	4603      	mov	r3, r0
 800f37e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f384:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d10b      	bne.n	800f3aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	f043 0206 	orr.w	r2, r3, #6
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	f043 0220 	orr.w	r2, r3, #32
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3710      	adds	r7, #16
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f3b6:	b004      	add	sp, #16
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop
 800f3bc:	ffbdffbf 	.word	0xffbdffbf

0800f3c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	f023 0201 	bic.w	r2, r3, #1
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	370c      	adds	r7, #12
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b082      	sub	sp, #8
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f3fa:	78fb      	ldrb	r3, [r7, #3]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d106      	bne.n	800f40e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	60da      	str	r2, [r3, #12]
 800f40c:	e00b      	b.n	800f426 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f40e:	78fb      	ldrb	r3, [r7, #3]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d106      	bne.n	800f422 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	60da      	str	r2, [r3, #12]
 800f420:	e001      	b.n	800f426 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f422:	2301      	movs	r3, #1
 800f424:	e003      	b.n	800f42e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f426:	2032      	movs	r0, #50	; 0x32
 800f428:	f7f9 ff38 	bl	800929c <HAL_Delay>

  return HAL_OK;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
	...

0800f438 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f438:	b084      	sub	sp, #16
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b086      	sub	sp, #24
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f44a:	2300      	movs	r3, #0
 800f44c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f452:	2300      	movs	r3, #0
 800f454:	613b      	str	r3, [r7, #16]
 800f456:	e009      	b.n	800f46c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	3340      	adds	r3, #64	; 0x40
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	2200      	movs	r2, #0
 800f464:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	3301      	adds	r3, #1
 800f46a:	613b      	str	r3, [r7, #16]
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	2b0e      	cmp	r3, #14
 800f470:	d9f2      	bls.n	800f458 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d11c      	bne.n	800f4b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	68fa      	ldr	r2, [r7, #12]
 800f482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f486:	f043 0302 	orr.w	r3, r3, #2
 800f48a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f490:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	601a      	str	r2, [r3, #0]
 800f4b0:	e005      	b.n	800f4be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4d8:	461a      	mov	r2, r3
 800f4da:	680b      	ldr	r3, [r1, #0]
 800f4dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d10c      	bne.n	800f4fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d104      	bne.n	800f4f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 f959 	bl	800f7a4 <USB_SetDevSpeed>
 800f4f2:	e018      	b.n	800f526 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 f954 	bl	800f7a4 <USB_SetDevSpeed>
 800f4fc:	e013      	b.n	800f526 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800f4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f500:	2b03      	cmp	r3, #3
 800f502:	d10c      	bne.n	800f51e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f506:	2b00      	cmp	r3, #0
 800f508:	d104      	bne.n	800f514 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f50a:	2100      	movs	r1, #0
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f949 	bl	800f7a4 <USB_SetDevSpeed>
 800f512:	e008      	b.n	800f526 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f514:	2101      	movs	r1, #1
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 f944 	bl	800f7a4 <USB_SetDevSpeed>
 800f51c:	e003      	b.n	800f526 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f51e:	2103      	movs	r1, #3
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f000 f93f 	bl	800f7a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f526:	2110      	movs	r1, #16
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 f8f3 	bl	800f714 <USB_FlushTxFifo>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800f534:	2301      	movs	r3, #1
 800f536:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 f911 	bl	800f760 <USB_FlushRxFifo>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d001      	beq.n	800f548 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800f544:	2301      	movs	r3, #1
 800f546:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f54e:	461a      	mov	r2, r3
 800f550:	2300      	movs	r3, #0
 800f552:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f55a:	461a      	mov	r2, r3
 800f55c:	2300      	movs	r3, #0
 800f55e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f566:	461a      	mov	r2, r3
 800f568:	2300      	movs	r3, #0
 800f56a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f56c:	2300      	movs	r3, #0
 800f56e:	613b      	str	r3, [r7, #16]
 800f570:	e043      	b.n	800f5fa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	015a      	lsls	r2, r3, #5
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	4413      	add	r3, r2
 800f57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f588:	d118      	bne.n	800f5bc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10a      	bne.n	800f5a6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	015a      	lsls	r2, r3, #5
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	4413      	add	r3, r2
 800f598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f59c:	461a      	mov	r2, r3
 800f59e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f5a2:	6013      	str	r3, [r2, #0]
 800f5a4:	e013      	b.n	800f5ce <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	015a      	lsls	r2, r3, #5
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f5b8:	6013      	str	r3, [r2, #0]
 800f5ba:	e008      	b.n	800f5ce <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	015a      	lsls	r2, r3, #5
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	015a      	lsls	r2, r3, #5
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5da:	461a      	mov	r2, r3
 800f5dc:	2300      	movs	r3, #0
 800f5de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	015a      	lsls	r2, r3, #5
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f5f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	613b      	str	r3, [r7, #16]
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	693a      	ldr	r2, [r7, #16]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d3b7      	bcc.n	800f572 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f602:	2300      	movs	r3, #0
 800f604:	613b      	str	r3, [r7, #16]
 800f606:	e043      	b.n	800f690 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	015a      	lsls	r2, r3, #5
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	4413      	add	r3, r2
 800f610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f61a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f61e:	d118      	bne.n	800f652 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d10a      	bne.n	800f63c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	015a      	lsls	r2, r3, #5
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	4413      	add	r3, r2
 800f62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f632:	461a      	mov	r2, r3
 800f634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f638:	6013      	str	r3, [r2, #0]
 800f63a:	e013      	b.n	800f664 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	015a      	lsls	r2, r3, #5
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4413      	add	r3, r2
 800f644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f648:	461a      	mov	r2, r3
 800f64a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f64e:	6013      	str	r3, [r2, #0]
 800f650:	e008      	b.n	800f664 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	015a      	lsls	r2, r3, #5
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	4413      	add	r3, r2
 800f65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f65e:	461a      	mov	r2, r3
 800f660:	2300      	movs	r3, #0
 800f662:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	015a      	lsls	r2, r3, #5
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	4413      	add	r3, r2
 800f66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f670:	461a      	mov	r2, r3
 800f672:	2300      	movs	r3, #0
 800f674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	015a      	lsls	r2, r3, #5
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	4413      	add	r3, r2
 800f67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f682:	461a      	mov	r2, r3
 800f684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f688:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	3301      	adds	r3, #1
 800f68e:	613b      	str	r3, [r7, #16]
 800f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f692:	693a      	ldr	r2, [r7, #16]
 800f694:	429a      	cmp	r2, r3
 800f696:	d3b7      	bcc.n	800f608 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f69e:	691b      	ldr	r3, [r3, #16]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f6b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d105      	bne.n	800f6cc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	699b      	ldr	r3, [r3, #24]
 800f6c4:	f043 0210 	orr.w	r2, r3, #16
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	699a      	ldr	r2, [r3, #24]
 800f6d0:	4b0e      	ldr	r3, [pc, #56]	; (800f70c <USB_DevInit+0x2d4>)
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d005      	beq.n	800f6ea <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	699b      	ldr	r3, [r3, #24]
 800f6e2:	f043 0208 	orr.w	r2, r3, #8
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d105      	bne.n	800f6fc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	699a      	ldr	r2, [r3, #24]
 800f6f4:	4b06      	ldr	r3, [pc, #24]	; (800f710 <USB_DevInit+0x2d8>)
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3718      	adds	r7, #24
 800f702:	46bd      	mov	sp, r7
 800f704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f708:	b004      	add	sp, #16
 800f70a:	4770      	bx	lr
 800f70c:	803c3800 	.word	0x803c3800
 800f710:	40000004 	.word	0x40000004

0800f714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f71e:	2300      	movs	r3, #0
 800f720:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	019b      	lsls	r3, r3, #6
 800f726:	f043 0220 	orr.w	r2, r3, #32
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	3301      	adds	r3, #1
 800f732:	60fb      	str	r3, [r7, #12]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	4a09      	ldr	r2, [pc, #36]	; (800f75c <USB_FlushTxFifo+0x48>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d901      	bls.n	800f740 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f73c:	2303      	movs	r3, #3
 800f73e:	e006      	b.n	800f74e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	691b      	ldr	r3, [r3, #16]
 800f744:	f003 0320 	and.w	r3, r3, #32
 800f748:	2b20      	cmp	r3, #32
 800f74a:	d0f0      	beq.n	800f72e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f74c:	2300      	movs	r3, #0
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3714      	adds	r7, #20
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	00030d40 	.word	0x00030d40

0800f760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f760:	b480      	push	{r7}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f768:	2300      	movs	r3, #0
 800f76a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2210      	movs	r2, #16
 800f770:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3301      	adds	r3, #1
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	4a09      	ldr	r2, [pc, #36]	; (800f7a0 <USB_FlushRxFifo+0x40>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d901      	bls.n	800f784 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f780:	2303      	movs	r3, #3
 800f782:	e006      	b.n	800f792 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	f003 0310 	and.w	r3, r3, #16
 800f78c:	2b10      	cmp	r3, #16
 800f78e:	d0f0      	beq.n	800f772 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3714      	adds	r7, #20
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	00030d40 	.word	0x00030d40

0800f7a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	78fb      	ldrb	r3, [r7, #3]
 800f7be:	68f9      	ldr	r1, [r7, #12]
 800f7c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f7c8:	2300      	movs	r3, #0
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3714      	adds	r7, #20
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr

0800f7d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b084      	sub	sp, #16
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7f0:	f043 0302 	orr.w	r3, r3, #2
 800f7f4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f7f6:	2003      	movs	r0, #3
 800f7f8:	f7f9 fd50 	bl	800929c <HAL_Delay>

  return HAL_OK;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
	...

0800f808 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f810:	2300      	movs	r3, #0
 800f812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	3301      	adds	r3, #1
 800f818:	60fb      	str	r3, [r7, #12]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	4a13      	ldr	r2, [pc, #76]	; (800f86c <USB_CoreReset+0x64>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d901      	bls.n	800f826 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f822:	2303      	movs	r3, #3
 800f824:	e01b      	b.n	800f85e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	691b      	ldr	r3, [r3, #16]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	daf2      	bge.n	800f814 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f82e:	2300      	movs	r3, #0
 800f830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	691b      	ldr	r3, [r3, #16]
 800f836:	f043 0201 	orr.w	r2, r3, #1
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	3301      	adds	r3, #1
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	4a09      	ldr	r2, [pc, #36]	; (800f86c <USB_CoreReset+0x64>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d901      	bls.n	800f850 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f84c:	2303      	movs	r3, #3
 800f84e:	e006      	b.n	800f85e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	691b      	ldr	r3, [r3, #16]
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d0f0      	beq.n	800f83e <USB_CoreReset+0x36>

  return HAL_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	00030d40 	.word	0x00030d40

0800f870 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f870:	b480      	push	{r7}
 800f872:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f874:	bf00      	nop
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr
	...

0800f880 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f886:	f3ef 8305 	mrs	r3, IPSR
 800f88a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f88c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d10f      	bne.n	800f8b2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f892:	f3ef 8310 	mrs	r3, PRIMASK
 800f896:	607b      	str	r3, [r7, #4]
  return(result);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d105      	bne.n	800f8aa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f89e:	f3ef 8311 	mrs	r3, BASEPRI
 800f8a2:	603b      	str	r3, [r7, #0]
  return(result);
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d007      	beq.n	800f8ba <osKernelInitialize+0x3a>
 800f8aa:	4b0e      	ldr	r3, [pc, #56]	; (800f8e4 <osKernelInitialize+0x64>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d103      	bne.n	800f8ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f8b2:	f06f 0305 	mvn.w	r3, #5
 800f8b6:	60fb      	str	r3, [r7, #12]
 800f8b8:	e00c      	b.n	800f8d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f8ba:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <osKernelInitialize+0x64>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d105      	bne.n	800f8ce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f8c2:	4b08      	ldr	r3, [pc, #32]	; (800f8e4 <osKernelInitialize+0x64>)
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	60fb      	str	r3, [r7, #12]
 800f8cc:	e002      	b.n	800f8d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3714      	adds	r7, #20
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	200033a8 	.word	0x200033a8

0800f8e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8ee:	f3ef 8305 	mrs	r3, IPSR
 800f8f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f8f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d10f      	bne.n	800f91a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800f8fe:	607b      	str	r3, [r7, #4]
  return(result);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d105      	bne.n	800f912 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f906:	f3ef 8311 	mrs	r3, BASEPRI
 800f90a:	603b      	str	r3, [r7, #0]
  return(result);
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d007      	beq.n	800f922 <osKernelStart+0x3a>
 800f912:	4b0f      	ldr	r3, [pc, #60]	; (800f950 <osKernelStart+0x68>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b02      	cmp	r3, #2
 800f918:	d103      	bne.n	800f922 <osKernelStart+0x3a>
    stat = osErrorISR;
 800f91a:	f06f 0305 	mvn.w	r3, #5
 800f91e:	60fb      	str	r3, [r7, #12]
 800f920:	e010      	b.n	800f944 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f922:	4b0b      	ldr	r3, [pc, #44]	; (800f950 <osKernelStart+0x68>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b01      	cmp	r3, #1
 800f928:	d109      	bne.n	800f93e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f92a:	f7ff ffa1 	bl	800f870 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f92e:	4b08      	ldr	r3, [pc, #32]	; (800f950 <osKernelStart+0x68>)
 800f930:	2202      	movs	r2, #2
 800f932:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f934:	f001 f916 	bl	8010b64 <vTaskStartScheduler>
      stat = osOK;
 800f938:	2300      	movs	r3, #0
 800f93a:	60fb      	str	r3, [r7, #12]
 800f93c:	e002      	b.n	800f944 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f93e:	f04f 33ff 	mov.w	r3, #4294967295
 800f942:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f944:	68fb      	ldr	r3, [r7, #12]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	200033a8 	.word	0x200033a8

0800f954 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f954:	b580      	push	{r7, lr}
 800f956:	b090      	sub	sp, #64	; 0x40
 800f958:	af04      	add	r7, sp, #16
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f960:	2300      	movs	r3, #0
 800f962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f964:	f3ef 8305 	mrs	r3, IPSR
 800f968:	61fb      	str	r3, [r7, #28]
  return(result);
 800f96a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	f040 808f 	bne.w	800fa90 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f972:	f3ef 8310 	mrs	r3, PRIMASK
 800f976:	61bb      	str	r3, [r7, #24]
  return(result);
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d105      	bne.n	800f98a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f97e:	f3ef 8311 	mrs	r3, BASEPRI
 800f982:	617b      	str	r3, [r7, #20]
  return(result);
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d003      	beq.n	800f992 <osThreadNew+0x3e>
 800f98a:	4b44      	ldr	r3, [pc, #272]	; (800fa9c <osThreadNew+0x148>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b02      	cmp	r3, #2
 800f990:	d07e      	beq.n	800fa90 <osThreadNew+0x13c>
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d07b      	beq.n	800fa90 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f998:	2380      	movs	r3, #128	; 0x80
 800f99a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f99c:	2318      	movs	r3, #24
 800f99e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d045      	beq.n	800fa3c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d002      	beq.n	800f9be <osThreadNew+0x6a>
        name = attr->name;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	699b      	ldr	r3, [r3, #24]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	699b      	ldr	r3, [r3, #24]
 800f9ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d008      	beq.n	800f9e4 <osThreadNew+0x90>
 800f9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d4:	2b38      	cmp	r3, #56	; 0x38
 800f9d6:	d805      	bhi.n	800f9e4 <osThreadNew+0x90>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	f003 0301 	and.w	r3, r3, #1
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d001      	beq.n	800f9e8 <osThreadNew+0x94>
        return (NULL);
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	e054      	b.n	800fa92 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	695b      	ldr	r3, [r3, #20]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d003      	beq.n	800f9f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	695b      	ldr	r3, [r3, #20]
 800f9f4:	089b      	lsrs	r3, r3, #2
 800f9f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	689b      	ldr	r3, [r3, #8]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00e      	beq.n	800fa1e <osThreadNew+0xca>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	2b5b      	cmp	r3, #91	; 0x5b
 800fa06:	d90a      	bls.n	800fa1e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d006      	beq.n	800fa1e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d002      	beq.n	800fa1e <osThreadNew+0xca>
        mem = 1;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	623b      	str	r3, [r7, #32]
 800fa1c:	e010      	b.n	800fa40 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	689b      	ldr	r3, [r3, #8]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d10c      	bne.n	800fa40 <osThreadNew+0xec>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	68db      	ldr	r3, [r3, #12]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d108      	bne.n	800fa40 <osThreadNew+0xec>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	691b      	ldr	r3, [r3, #16]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d104      	bne.n	800fa40 <osThreadNew+0xec>
          mem = 0;
 800fa36:	2300      	movs	r3, #0
 800fa38:	623b      	str	r3, [r7, #32]
 800fa3a:	e001      	b.n	800fa40 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800fa40:	6a3b      	ldr	r3, [r7, #32]
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d110      	bne.n	800fa68 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fa4e:	9202      	str	r2, [sp, #8]
 800fa50:	9301      	str	r3, [sp, #4]
 800fa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa54:	9300      	str	r3, [sp, #0]
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f000 fe31 	bl	80106c4 <xTaskCreateStatic>
 800fa62:	4603      	mov	r3, r0
 800fa64:	613b      	str	r3, [r7, #16]
 800fa66:	e013      	b.n	800fa90 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800fa68:	6a3b      	ldr	r3, [r7, #32]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d110      	bne.n	800fa90 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	f107 0310 	add.w	r3, r7, #16
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f000 fe7f 	bl	8010784 <xTaskCreate>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d001      	beq.n	800fa90 <osThreadNew+0x13c>
          hTask = NULL;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fa90:	693b      	ldr	r3, [r7, #16]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3730      	adds	r7, #48	; 0x30
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	200033a8 	.word	0x200033a8

0800faa0 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800faa0:	b580      	push	{r7, lr}
 800faa2:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800faa4:	2000      	movs	r0, #0
 800faa6:	f000 ffb3 	bl	8010a10 <vTaskDelete>
#endif
  for (;;);
 800faaa:	e7fe      	b.n	800faaa <osThreadExit+0xa>

0800faac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800faac:	b580      	push	{r7, lr}
 800faae:	b086      	sub	sp, #24
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fab4:	f3ef 8305 	mrs	r3, IPSR
 800fab8:	613b      	str	r3, [r7, #16]
  return(result);
 800faba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d10f      	bne.n	800fae0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fac0:	f3ef 8310 	mrs	r3, PRIMASK
 800fac4:	60fb      	str	r3, [r7, #12]
  return(result);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d105      	bne.n	800fad8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800facc:	f3ef 8311 	mrs	r3, BASEPRI
 800fad0:	60bb      	str	r3, [r7, #8]
  return(result);
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d007      	beq.n	800fae8 <osDelay+0x3c>
 800fad8:	4b0a      	ldr	r3, [pc, #40]	; (800fb04 <osDelay+0x58>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d103      	bne.n	800fae8 <osDelay+0x3c>
    stat = osErrorISR;
 800fae0:	f06f 0305 	mvn.w	r3, #5
 800fae4:	617b      	str	r3, [r7, #20]
 800fae6:	e007      	b.n	800faf8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800fae8:	2300      	movs	r3, #0
 800faea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d002      	beq.n	800faf8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f001 f800 	bl	8010af8 <vTaskDelay>
    }
  }

  return (stat);
 800faf8:	697b      	ldr	r3, [r7, #20]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3718      	adds	r7, #24
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	200033a8 	.word	0x200033a8

0800fb08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	4a07      	ldr	r2, [pc, #28]	; (800fb34 <vApplicationGetIdleTaskMemory+0x2c>)
 800fb18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	4a06      	ldr	r2, [pc, #24]	; (800fb38 <vApplicationGetIdleTaskMemory+0x30>)
 800fb1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2280      	movs	r2, #128	; 0x80
 800fb24:	601a      	str	r2, [r3, #0]
}
 800fb26:	bf00      	nop
 800fb28:	3714      	adds	r7, #20
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	200033ac 	.word	0x200033ac
 800fb38:	20003408 	.word	0x20003408

0800fb3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	4a07      	ldr	r2, [pc, #28]	; (800fb68 <vApplicationGetTimerTaskMemory+0x2c>)
 800fb4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	4a06      	ldr	r2, [pc, #24]	; (800fb6c <vApplicationGetTimerTaskMemory+0x30>)
 800fb52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb5a:	601a      	str	r2, [r3, #0]
}
 800fb5c:	bf00      	nop
 800fb5e:	3714      	adds	r7, #20
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr
 800fb68:	20003608 	.word	0x20003608
 800fb6c:	20003664 	.word	0x20003664

0800fb70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f103 0208 	add.w	r2, r3, #8
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f04f 32ff 	mov.w	r2, #4294967295
 800fb88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f103 0208 	add.w	r2, r3, #8
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f103 0208 	add.w	r2, r3, #8
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fba4:	bf00      	nop
 800fba6:	370c      	adds	r7, #12
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fbbe:	bf00      	nop
 800fbc0:	370c      	adds	r7, #12
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr

0800fbca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fbca:	b480      	push	{r7}
 800fbcc:	b085      	sub	sp, #20
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
 800fbd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	689a      	ldr	r2, [r3, #8]
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	689b      	ldr	r3, [r3, #8]
 800fbec:	683a      	ldr	r2, [r7, #0]
 800fbee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	683a      	ldr	r2, [r7, #0]
 800fbf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	1c5a      	adds	r2, r3, #1
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	601a      	str	r2, [r3, #0]
}
 800fc06:	bf00      	nop
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc12:	b480      	push	{r7}
 800fc14:	b085      	sub	sp, #20
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
 800fc1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc28:	d103      	bne.n	800fc32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	60fb      	str	r3, [r7, #12]
 800fc30:	e00c      	b.n	800fc4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	3308      	adds	r3, #8
 800fc36:	60fb      	str	r3, [r7, #12]
 800fc38:	e002      	b.n	800fc40 <vListInsert+0x2e>
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	60fb      	str	r3, [r7, #12]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	68ba      	ldr	r2, [r7, #8]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d2f6      	bcs.n	800fc3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	685a      	ldr	r2, [r3, #4]
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	683a      	ldr	r2, [r7, #0]
 800fc5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	1c5a      	adds	r2, r3, #1
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	601a      	str	r2, [r3, #0]
}
 800fc78:	bf00      	nop
 800fc7a:	3714      	adds	r7, #20
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	691b      	ldr	r3, [r3, #16]
 800fc90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	6892      	ldr	r2, [r2, #8]
 800fc9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	6852      	ldr	r2, [r2, #4]
 800fca4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d103      	bne.n	800fcb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	689a      	ldr	r2, [r3, #8]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	1e5a      	subs	r2, r3, #1
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3714      	adds	r7, #20
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d10b      	bne.n	800fd04 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf0:	b672      	cpsid	i
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	b662      	cpsie	i
 800fd00:	60bb      	str	r3, [r7, #8]
 800fd02:	e7fe      	b.n	800fd02 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800fd04:	f002 f9d0 	bl	80120a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd10:	68f9      	ldr	r1, [r7, #12]
 800fd12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fd14:	fb01 f303 	mul.w	r3, r1, r3
 800fd18:	441a      	add	r2, r3
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2200      	movs	r2, #0
 800fd22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd34:	3b01      	subs	r3, #1
 800fd36:	68f9      	ldr	r1, [r7, #12]
 800fd38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fd3a:	fb01 f303 	mul.w	r3, r1, r3
 800fd3e:	441a      	add	r2, r3
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	22ff      	movs	r2, #255	; 0xff
 800fd48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	22ff      	movs	r2, #255	; 0xff
 800fd50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d114      	bne.n	800fd84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	691b      	ldr	r3, [r3, #16]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d01a      	beq.n	800fd98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	3310      	adds	r3, #16
 800fd66:	4618      	mov	r0, r3
 800fd68:	f001 f98a 	bl	8011080 <xTaskRemoveFromEventList>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d012      	beq.n	800fd98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fd72:	4b0d      	ldr	r3, [pc, #52]	; (800fda8 <xQueueGenericReset+0xd0>)
 800fd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd78:	601a      	str	r2, [r3, #0]
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	f3bf 8f6f 	isb	sy
 800fd82:	e009      	b.n	800fd98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	3310      	adds	r3, #16
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7ff fef1 	bl	800fb70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	3324      	adds	r3, #36	; 0x24
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7ff feec 	bl	800fb70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fd98:	f002 f9b8 	bl	801210c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fd9c:	2301      	movs	r3, #1
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	e000ed04 	.word	0xe000ed04

0800fdac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08e      	sub	sp, #56	; 0x38
 800fdb0:	af02      	add	r7, sp, #8
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
 800fdb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d10b      	bne.n	800fdd8 <xQueueGenericCreateStatic+0x2c>
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	b672      	cpsid	i
 800fdc6:	f383 8811 	msr	BASEPRI, r3
 800fdca:	f3bf 8f6f 	isb	sy
 800fdce:	f3bf 8f4f 	dsb	sy
 800fdd2:	b662      	cpsie	i
 800fdd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdd6:	e7fe      	b.n	800fdd6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10b      	bne.n	800fdf6 <xQueueGenericCreateStatic+0x4a>
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	b672      	cpsid	i
 800fde4:	f383 8811 	msr	BASEPRI, r3
 800fde8:	f3bf 8f6f 	isb	sy
 800fdec:	f3bf 8f4f 	dsb	sy
 800fdf0:	b662      	cpsie	i
 800fdf2:	627b      	str	r3, [r7, #36]	; 0x24
 800fdf4:	e7fe      	b.n	800fdf4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d002      	beq.n	800fe02 <xQueueGenericCreateStatic+0x56>
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d001      	beq.n	800fe06 <xQueueGenericCreateStatic+0x5a>
 800fe02:	2301      	movs	r3, #1
 800fe04:	e000      	b.n	800fe08 <xQueueGenericCreateStatic+0x5c>
 800fe06:	2300      	movs	r3, #0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d10b      	bne.n	800fe24 <xQueueGenericCreateStatic+0x78>
 800fe0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe10:	b672      	cpsid	i
 800fe12:	f383 8811 	msr	BASEPRI, r3
 800fe16:	f3bf 8f6f 	isb	sy
 800fe1a:	f3bf 8f4f 	dsb	sy
 800fe1e:	b662      	cpsie	i
 800fe20:	623b      	str	r3, [r7, #32]
 800fe22:	e7fe      	b.n	800fe22 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d102      	bne.n	800fe30 <xQueueGenericCreateStatic+0x84>
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d101      	bne.n	800fe34 <xQueueGenericCreateStatic+0x88>
 800fe30:	2301      	movs	r3, #1
 800fe32:	e000      	b.n	800fe36 <xQueueGenericCreateStatic+0x8a>
 800fe34:	2300      	movs	r3, #0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d10b      	bne.n	800fe52 <xQueueGenericCreateStatic+0xa6>
 800fe3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3e:	b672      	cpsid	i
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	b662      	cpsie	i
 800fe4e:	61fb      	str	r3, [r7, #28]
 800fe50:	e7fe      	b.n	800fe50 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fe52:	2350      	movs	r3, #80	; 0x50
 800fe54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2b50      	cmp	r3, #80	; 0x50
 800fe5a:	d00b      	beq.n	800fe74 <xQueueGenericCreateStatic+0xc8>
 800fe5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe60:	b672      	cpsid	i
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	b662      	cpsie	i
 800fe70:	61bb      	str	r3, [r7, #24]
 800fe72:	e7fe      	b.n	800fe72 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fe74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fe7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00d      	beq.n	800fe9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fe80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe82:	2201      	movs	r2, #1
 800fe84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fe8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	4613      	mov	r3, r2
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	68b9      	ldr	r1, [r7, #8]
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f000 f805 	bl	800fea6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3730      	adds	r7, #48	; 0x30
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b084      	sub	sp, #16
 800feaa:	af00      	add	r7, sp, #0
 800feac:	60f8      	str	r0, [r7, #12]
 800feae:	60b9      	str	r1, [r7, #8]
 800feb0:	607a      	str	r2, [r7, #4]
 800feb2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d103      	bne.n	800fec2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	69ba      	ldr	r2, [r7, #24]
 800febe:	601a      	str	r2, [r3, #0]
 800fec0:	e002      	b.n	800fec8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	68fa      	ldr	r2, [r7, #12]
 800fecc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fed4:	2101      	movs	r1, #1
 800fed6:	69b8      	ldr	r0, [r7, #24]
 800fed8:	f7ff fefe 	bl	800fcd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	78fa      	ldrb	r2, [r7, #3]
 800fee0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fee4:	bf00      	nop
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08e      	sub	sp, #56	; 0x38
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
 800fef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fefa:	2300      	movs	r3, #0
 800fefc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d10b      	bne.n	800ff20 <xQueueGenericSend+0x34>
 800ff08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0c:	b672      	cpsid	i
 800ff0e:	f383 8811 	msr	BASEPRI, r3
 800ff12:	f3bf 8f6f 	isb	sy
 800ff16:	f3bf 8f4f 	dsb	sy
 800ff1a:	b662      	cpsie	i
 800ff1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff1e:	e7fe      	b.n	800ff1e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d103      	bne.n	800ff2e <xQueueGenericSend+0x42>
 800ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <xQueueGenericSend+0x46>
 800ff2e:	2301      	movs	r3, #1
 800ff30:	e000      	b.n	800ff34 <xQueueGenericSend+0x48>
 800ff32:	2300      	movs	r3, #0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d10b      	bne.n	800ff50 <xQueueGenericSend+0x64>
 800ff38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3c:	b672      	cpsid	i
 800ff3e:	f383 8811 	msr	BASEPRI, r3
 800ff42:	f3bf 8f6f 	isb	sy
 800ff46:	f3bf 8f4f 	dsb	sy
 800ff4a:	b662      	cpsie	i
 800ff4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ff4e:	e7fe      	b.n	800ff4e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d103      	bne.n	800ff5e <xQueueGenericSend+0x72>
 800ff56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d101      	bne.n	800ff62 <xQueueGenericSend+0x76>
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e000      	b.n	800ff64 <xQueueGenericSend+0x78>
 800ff62:	2300      	movs	r3, #0
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d10b      	bne.n	800ff80 <xQueueGenericSend+0x94>
 800ff68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6c:	b672      	cpsid	i
 800ff6e:	f383 8811 	msr	BASEPRI, r3
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	f3bf 8f4f 	dsb	sy
 800ff7a:	b662      	cpsie	i
 800ff7c:	623b      	str	r3, [r7, #32]
 800ff7e:	e7fe      	b.n	800ff7e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff80:	f001 fa3c 	bl	80113fc <xTaskGetSchedulerState>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d102      	bne.n	800ff90 <xQueueGenericSend+0xa4>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d101      	bne.n	800ff94 <xQueueGenericSend+0xa8>
 800ff90:	2301      	movs	r3, #1
 800ff92:	e000      	b.n	800ff96 <xQueueGenericSend+0xaa>
 800ff94:	2300      	movs	r3, #0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10b      	bne.n	800ffb2 <xQueueGenericSend+0xc6>
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	b672      	cpsid	i
 800ffa0:	f383 8811 	msr	BASEPRI, r3
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	b662      	cpsie	i
 800ffae:	61fb      	str	r3, [r7, #28]
 800ffb0:	e7fe      	b.n	800ffb0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffb2:	f002 f879 	bl	80120a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ffb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d302      	bcc.n	800ffc8 <xQueueGenericSend+0xdc>
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	2b02      	cmp	r3, #2
 800ffc6:	d129      	bne.n	801001c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffc8:	683a      	ldr	r2, [r7, #0]
 800ffca:	68b9      	ldr	r1, [r7, #8]
 800ffcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffce:	f000 fa0d 	bl	80103ec <prvCopyDataToQueue>
 800ffd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d010      	beq.n	800fffe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffde:	3324      	adds	r3, #36	; 0x24
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f001 f84d 	bl	8011080 <xTaskRemoveFromEventList>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d013      	beq.n	8010014 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ffec:	4b3f      	ldr	r3, [pc, #252]	; (80100ec <xQueueGenericSend+0x200>)
 800ffee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	f3bf 8f4f 	dsb	sy
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	e00a      	b.n	8010014 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010000:	2b00      	cmp	r3, #0
 8010002:	d007      	beq.n	8010014 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010004:	4b39      	ldr	r3, [pc, #228]	; (80100ec <xQueueGenericSend+0x200>)
 8010006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801000a:	601a      	str	r2, [r3, #0]
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010014:	f002 f87a 	bl	801210c <vPortExitCritical>
				return pdPASS;
 8010018:	2301      	movs	r3, #1
 801001a:	e063      	b.n	80100e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d103      	bne.n	801002a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010022:	f002 f873 	bl	801210c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010026:	2300      	movs	r3, #0
 8010028:	e05c      	b.n	80100e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801002a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801002c:	2b00      	cmp	r3, #0
 801002e:	d106      	bne.n	801003e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010030:	f107 0314 	add.w	r3, r7, #20
 8010034:	4618      	mov	r0, r3
 8010036:	f001 f887 	bl	8011148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801003a:	2301      	movs	r3, #1
 801003c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801003e:	f002 f865 	bl	801210c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010042:	f000 fdf7 	bl	8010c34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010046:	f002 f82f 	bl	80120a8 <vPortEnterCritical>
 801004a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010050:	b25b      	sxtb	r3, r3
 8010052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010056:	d103      	bne.n	8010060 <xQueueGenericSend+0x174>
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	2200      	movs	r2, #0
 801005c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010066:	b25b      	sxtb	r3, r3
 8010068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006c:	d103      	bne.n	8010076 <xQueueGenericSend+0x18a>
 801006e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010070:	2200      	movs	r2, #0
 8010072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010076:	f002 f849 	bl	801210c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801007a:	1d3a      	adds	r2, r7, #4
 801007c:	f107 0314 	add.w	r3, r7, #20
 8010080:	4611      	mov	r1, r2
 8010082:	4618      	mov	r0, r3
 8010084:	f001 f876 	bl	8011174 <xTaskCheckForTimeOut>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d124      	bne.n	80100d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801008e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010090:	f000 faa4 	bl	80105dc <prvIsQueueFull>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d018      	beq.n	80100cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801009a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009c:	3310      	adds	r3, #16
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	4611      	mov	r1, r2
 80100a2:	4618      	mov	r0, r3
 80100a4:	f000 ff9a 	bl	8010fdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80100a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100aa:	f000 fa2f 	bl	801050c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80100ae:	f000 fdcf 	bl	8010c50 <xTaskResumeAll>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f47f af7c 	bne.w	800ffb2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80100ba:	4b0c      	ldr	r3, [pc, #48]	; (80100ec <xQueueGenericSend+0x200>)
 80100bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c0:	601a      	str	r2, [r3, #0]
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	e772      	b.n	800ffb2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80100cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100ce:	f000 fa1d 	bl	801050c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100d2:	f000 fdbd 	bl	8010c50 <xTaskResumeAll>
 80100d6:	e76c      	b.n	800ffb2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80100d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100da:	f000 fa17 	bl	801050c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100de:	f000 fdb7 	bl	8010c50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80100e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3738      	adds	r7, #56	; 0x38
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	e000ed04 	.word	0xe000ed04

080100f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08e      	sub	sp, #56	; 0x38
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
 80100fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	2b00      	cmp	r3, #0
 8010106:	d10b      	bne.n	8010120 <xQueueGenericSendFromISR+0x30>
 8010108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010c:	b672      	cpsid	i
 801010e:	f383 8811 	msr	BASEPRI, r3
 8010112:	f3bf 8f6f 	isb	sy
 8010116:	f3bf 8f4f 	dsb	sy
 801011a:	b662      	cpsie	i
 801011c:	627b      	str	r3, [r7, #36]	; 0x24
 801011e:	e7fe      	b.n	801011e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d103      	bne.n	801012e <xQueueGenericSendFromISR+0x3e>
 8010126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <xQueueGenericSendFromISR+0x42>
 801012e:	2301      	movs	r3, #1
 8010130:	e000      	b.n	8010134 <xQueueGenericSendFromISR+0x44>
 8010132:	2300      	movs	r3, #0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10b      	bne.n	8010150 <xQueueGenericSendFromISR+0x60>
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	b672      	cpsid	i
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
 801014a:	b662      	cpsie	i
 801014c:	623b      	str	r3, [r7, #32]
 801014e:	e7fe      	b.n	801014e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	2b02      	cmp	r3, #2
 8010154:	d103      	bne.n	801015e <xQueueGenericSendFromISR+0x6e>
 8010156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801015a:	2b01      	cmp	r3, #1
 801015c:	d101      	bne.n	8010162 <xQueueGenericSendFromISR+0x72>
 801015e:	2301      	movs	r3, #1
 8010160:	e000      	b.n	8010164 <xQueueGenericSendFromISR+0x74>
 8010162:	2300      	movs	r3, #0
 8010164:	2b00      	cmp	r3, #0
 8010166:	d10b      	bne.n	8010180 <xQueueGenericSendFromISR+0x90>
 8010168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016c:	b672      	cpsid	i
 801016e:	f383 8811 	msr	BASEPRI, r3
 8010172:	f3bf 8f6f 	isb	sy
 8010176:	f3bf 8f4f 	dsb	sy
 801017a:	b662      	cpsie	i
 801017c:	61fb      	str	r3, [r7, #28]
 801017e:	e7fe      	b.n	801017e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010180:	f002 f872 	bl	8012268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010184:	f3ef 8211 	mrs	r2, BASEPRI
 8010188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018c:	b672      	cpsid	i
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	b662      	cpsie	i
 801019c:	61ba      	str	r2, [r7, #24]
 801019e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80101a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d302      	bcc.n	80101b6 <xQueueGenericSendFromISR+0xc6>
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	d12c      	bne.n	8010210 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80101b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101c0:	683a      	ldr	r2, [r7, #0]
 80101c2:	68b9      	ldr	r1, [r7, #8]
 80101c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101c6:	f000 f911 	bl	80103ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80101ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d2:	d112      	bne.n	80101fa <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d016      	beq.n	801020a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101de:	3324      	adds	r3, #36	; 0x24
 80101e0:	4618      	mov	r0, r3
 80101e2:	f000 ff4d 	bl	8011080 <xTaskRemoveFromEventList>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00e      	beq.n	801020a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00b      	beq.n	801020a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2201      	movs	r2, #1
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	e007      	b.n	801020a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80101fe:	3301      	adds	r3, #1
 8010200:	b2db      	uxtb	r3, r3
 8010202:	b25a      	sxtb	r2, r3
 8010204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801020a:	2301      	movs	r3, #1
 801020c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801020e:	e001      	b.n	8010214 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010210:	2300      	movs	r3, #0
 8010212:	637b      	str	r3, [r7, #52]	; 0x34
 8010214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010216:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801021e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010220:	4618      	mov	r0, r3
 8010222:	3738      	adds	r7, #56	; 0x38
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b08c      	sub	sp, #48	; 0x30
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010234:	2300      	movs	r3, #0
 8010236:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801023c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023e:	2b00      	cmp	r3, #0
 8010240:	d10b      	bne.n	801025a <xQueueReceive+0x32>
	__asm volatile
 8010242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010246:	b672      	cpsid	i
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	b662      	cpsie	i
 8010256:	623b      	str	r3, [r7, #32]
 8010258:	e7fe      	b.n	8010258 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d103      	bne.n	8010268 <xQueueReceive+0x40>
 8010260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010264:	2b00      	cmp	r3, #0
 8010266:	d101      	bne.n	801026c <xQueueReceive+0x44>
 8010268:	2301      	movs	r3, #1
 801026a:	e000      	b.n	801026e <xQueueReceive+0x46>
 801026c:	2300      	movs	r3, #0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d10b      	bne.n	801028a <xQueueReceive+0x62>
 8010272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010276:	b672      	cpsid	i
 8010278:	f383 8811 	msr	BASEPRI, r3
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	f3bf 8f4f 	dsb	sy
 8010284:	b662      	cpsie	i
 8010286:	61fb      	str	r3, [r7, #28]
 8010288:	e7fe      	b.n	8010288 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801028a:	f001 f8b7 	bl	80113fc <xTaskGetSchedulerState>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	d102      	bne.n	801029a <xQueueReceive+0x72>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d101      	bne.n	801029e <xQueueReceive+0x76>
 801029a:	2301      	movs	r3, #1
 801029c:	e000      	b.n	80102a0 <xQueueReceive+0x78>
 801029e:	2300      	movs	r3, #0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10b      	bne.n	80102bc <xQueueReceive+0x94>
 80102a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a8:	b672      	cpsid	i
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	b662      	cpsie	i
 80102b8:	61bb      	str	r3, [r7, #24]
 80102ba:	e7fe      	b.n	80102ba <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80102bc:	f001 fef4 	bl	80120a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d01f      	beq.n	801030c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80102cc:	68b9      	ldr	r1, [r7, #8]
 80102ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102d0:	f000 f8f6 	bl	80104c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80102d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d6:	1e5a      	subs	r2, r3, #1
 80102d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102de:	691b      	ldr	r3, [r3, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d00f      	beq.n	8010304 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e6:	3310      	adds	r3, #16
 80102e8:	4618      	mov	r0, r3
 80102ea:	f000 fec9 	bl	8011080 <xTaskRemoveFromEventList>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d007      	beq.n	8010304 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80102f4:	4b3c      	ldr	r3, [pc, #240]	; (80103e8 <xQueueReceive+0x1c0>)
 80102f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102fa:	601a      	str	r2, [r3, #0]
 80102fc:	f3bf 8f4f 	dsb	sy
 8010300:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010304:	f001 ff02 	bl	801210c <vPortExitCritical>
				return pdPASS;
 8010308:	2301      	movs	r3, #1
 801030a:	e069      	b.n	80103e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d103      	bne.n	801031a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010312:	f001 fefb 	bl	801210c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010316:	2300      	movs	r3, #0
 8010318:	e062      	b.n	80103e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801031a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031c:	2b00      	cmp	r3, #0
 801031e:	d106      	bne.n	801032e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010320:	f107 0310 	add.w	r3, r7, #16
 8010324:	4618      	mov	r0, r3
 8010326:	f000 ff0f 	bl	8011148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801032a:	2301      	movs	r3, #1
 801032c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801032e:	f001 feed 	bl	801210c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010332:	f000 fc7f 	bl	8010c34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010336:	f001 feb7 	bl	80120a8 <vPortEnterCritical>
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010340:	b25b      	sxtb	r3, r3
 8010342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010346:	d103      	bne.n	8010350 <xQueueReceive+0x128>
 8010348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034a:	2200      	movs	r2, #0
 801034c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010356:	b25b      	sxtb	r3, r3
 8010358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801035c:	d103      	bne.n	8010366 <xQueueReceive+0x13e>
 801035e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010360:	2200      	movs	r2, #0
 8010362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010366:	f001 fed1 	bl	801210c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801036a:	1d3a      	adds	r2, r7, #4
 801036c:	f107 0310 	add.w	r3, r7, #16
 8010370:	4611      	mov	r1, r2
 8010372:	4618      	mov	r0, r3
 8010374:	f000 fefe 	bl	8011174 <xTaskCheckForTimeOut>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d123      	bne.n	80103c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801037e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010380:	f000 f916 	bl	80105b0 <prvIsQueueEmpty>
 8010384:	4603      	mov	r3, r0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d017      	beq.n	80103ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038c:	3324      	adds	r3, #36	; 0x24
 801038e:	687a      	ldr	r2, [r7, #4]
 8010390:	4611      	mov	r1, r2
 8010392:	4618      	mov	r0, r3
 8010394:	f000 fe22 	bl	8010fdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801039a:	f000 f8b7 	bl	801050c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801039e:	f000 fc57 	bl	8010c50 <xTaskResumeAll>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d189      	bne.n	80102bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80103a8:	4b0f      	ldr	r3, [pc, #60]	; (80103e8 <xQueueReceive+0x1c0>)
 80103aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ae:	601a      	str	r2, [r3, #0]
 80103b0:	f3bf 8f4f 	dsb	sy
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	e780      	b.n	80102bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80103ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103bc:	f000 f8a6 	bl	801050c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103c0:	f000 fc46 	bl	8010c50 <xTaskResumeAll>
 80103c4:	e77a      	b.n	80102bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80103c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103c8:	f000 f8a0 	bl	801050c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103cc:	f000 fc40 	bl	8010c50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103d2:	f000 f8ed 	bl	80105b0 <prvIsQueueEmpty>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f43f af6f 	beq.w	80102bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3730      	adds	r7, #48	; 0x30
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	e000ed04 	.word	0xe000ed04

080103ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80103f8:	2300      	movs	r3, #0
 80103fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10d      	bne.n	8010426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d14d      	bne.n	80104ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	4618      	mov	r0, r3
 8010418:	f001 f80e 	bl	8011438 <xTaskPriorityDisinherit>
 801041c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	609a      	str	r2, [r3, #8]
 8010424:	e043      	b.n	80104ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d119      	bne.n	8010460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6858      	ldr	r0, [r3, #4]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010434:	461a      	mov	r2, r3
 8010436:	68b9      	ldr	r1, [r7, #8]
 8010438:	f002 f964 	bl	8012704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	685a      	ldr	r2, [r3, #4]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010444:	441a      	add	r2, r3
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685a      	ldr	r2, [r3, #4]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	429a      	cmp	r2, r3
 8010454:	d32b      	bcc.n	80104ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	605a      	str	r2, [r3, #4]
 801045e:	e026      	b.n	80104ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	68d8      	ldr	r0, [r3, #12]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010468:	461a      	mov	r2, r3
 801046a:	68b9      	ldr	r1, [r7, #8]
 801046c:	f002 f94a 	bl	8012704 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	68da      	ldr	r2, [r3, #12]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010478:	425b      	negs	r3, r3
 801047a:	441a      	add	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	68da      	ldr	r2, [r3, #12]
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	d207      	bcs.n	801049c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	689a      	ldr	r2, [r3, #8]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010494:	425b      	negs	r3, r3
 8010496:	441a      	add	r2, r3
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d105      	bne.n	80104ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d002      	beq.n	80104ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	1c5a      	adds	r2, r3, #1
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80104b6:	697b      	ldr	r3, [r7, #20]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d018      	beq.n	8010504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	68da      	ldr	r2, [r3, #12]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104da:	441a      	add	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68da      	ldr	r2, [r3, #12]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d303      	bcc.n	80104f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	68d9      	ldr	r1, [r3, #12]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104fc:	461a      	mov	r2, r3
 80104fe:	6838      	ldr	r0, [r7, #0]
 8010500:	f002 f900 	bl	8012704 <memcpy>
	}
}
 8010504:	bf00      	nop
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010514:	f001 fdc8 	bl	80120a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801051e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010520:	e011      	b.n	8010546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010526:	2b00      	cmp	r3, #0
 8010528:	d012      	beq.n	8010550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	3324      	adds	r3, #36	; 0x24
 801052e:	4618      	mov	r0, r3
 8010530:	f000 fda6 	bl	8011080 <xTaskRemoveFromEventList>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d001      	beq.n	801053e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801053a:	f000 fe7f 	bl	801123c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801053e:	7bfb      	ldrb	r3, [r7, #15]
 8010540:	3b01      	subs	r3, #1
 8010542:	b2db      	uxtb	r3, r3
 8010544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801054a:	2b00      	cmp	r3, #0
 801054c:	dce9      	bgt.n	8010522 <prvUnlockQueue+0x16>
 801054e:	e000      	b.n	8010552 <prvUnlockQueue+0x46>
					break;
 8010550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	22ff      	movs	r2, #255	; 0xff
 8010556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801055a:	f001 fdd7 	bl	801210c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801055e:	f001 fda3 	bl	80120a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801056a:	e011      	b.n	8010590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	691b      	ldr	r3, [r3, #16]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d012      	beq.n	801059a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	3310      	adds	r3, #16
 8010578:	4618      	mov	r0, r3
 801057a:	f000 fd81 	bl	8011080 <xTaskRemoveFromEventList>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d001      	beq.n	8010588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010584:	f000 fe5a 	bl	801123c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010588:	7bbb      	ldrb	r3, [r7, #14]
 801058a:	3b01      	subs	r3, #1
 801058c:	b2db      	uxtb	r3, r3
 801058e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010594:	2b00      	cmp	r3, #0
 8010596:	dce9      	bgt.n	801056c <prvUnlockQueue+0x60>
 8010598:	e000      	b.n	801059c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801059a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	22ff      	movs	r2, #255	; 0xff
 80105a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80105a4:	f001 fdb2 	bl	801210c <vPortExitCritical>
}
 80105a8:	bf00      	nop
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105b8:	f001 fd76 	bl	80120a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d102      	bne.n	80105ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80105c4:	2301      	movs	r3, #1
 80105c6:	60fb      	str	r3, [r7, #12]
 80105c8:	e001      	b.n	80105ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80105ca:	2300      	movs	r3, #0
 80105cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105ce:	f001 fd9d 	bl	801210c <vPortExitCritical>

	return xReturn;
 80105d2:	68fb      	ldr	r3, [r7, #12]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105e4:	f001 fd60 	bl	80120a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d102      	bne.n	80105fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80105f4:	2301      	movs	r3, #1
 80105f6:	60fb      	str	r3, [r7, #12]
 80105f8:	e001      	b.n	80105fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80105fa:	2300      	movs	r3, #0
 80105fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105fe:	f001 fd85 	bl	801210c <vPortExitCritical>

	return xReturn;
 8010602:	68fb      	ldr	r3, [r7, #12]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3710      	adds	r7, #16
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801060c:	b480      	push	{r7}
 801060e:	b085      	sub	sp, #20
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010616:	2300      	movs	r3, #0
 8010618:	60fb      	str	r3, [r7, #12]
 801061a:	e014      	b.n	8010646 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801061c:	4a0e      	ldr	r2, [pc, #56]	; (8010658 <vQueueAddToRegistry+0x4c>)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d10b      	bne.n	8010640 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010628:	490b      	ldr	r1, [pc, #44]	; (8010658 <vQueueAddToRegistry+0x4c>)
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010632:	4a09      	ldr	r2, [pc, #36]	; (8010658 <vQueueAddToRegistry+0x4c>)
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	00db      	lsls	r3, r3, #3
 8010638:	4413      	add	r3, r2
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801063e:	e005      	b.n	801064c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	3301      	adds	r3, #1
 8010644:	60fb      	str	r3, [r7, #12]
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2b07      	cmp	r3, #7
 801064a:	d9e7      	bls.n	801061c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801064c:	bf00      	nop
 801064e:	3714      	adds	r7, #20
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr
 8010658:	20030b38 	.word	0x20030b38

0801065c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801065c:	b580      	push	{r7, lr}
 801065e:	b086      	sub	sp, #24
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801066c:	f001 fd1c 	bl	80120a8 <vPortEnterCritical>
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010676:	b25b      	sxtb	r3, r3
 8010678:	f1b3 3fff 	cmp.w	r3, #4294967295
 801067c:	d103      	bne.n	8010686 <vQueueWaitForMessageRestricted+0x2a>
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	2200      	movs	r2, #0
 8010682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801068c:	b25b      	sxtb	r3, r3
 801068e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010692:	d103      	bne.n	801069c <vQueueWaitForMessageRestricted+0x40>
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	2200      	movs	r2, #0
 8010698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801069c:	f001 fd36 	bl	801210c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d106      	bne.n	80106b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	3324      	adds	r3, #36	; 0x24
 80106ac:	687a      	ldr	r2, [r7, #4]
 80106ae:	68b9      	ldr	r1, [r7, #8]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f000 fcb9 	bl	8011028 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80106b6:	6978      	ldr	r0, [r7, #20]
 80106b8:	f7ff ff28 	bl	801050c <prvUnlockQueue>
	}
 80106bc:	bf00      	nop
 80106be:	3718      	adds	r7, #24
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b08e      	sub	sp, #56	; 0x38
 80106c8:	af04      	add	r7, sp, #16
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	607a      	str	r2, [r7, #4]
 80106d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80106d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10b      	bne.n	80106f0 <xTaskCreateStatic+0x2c>
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	b672      	cpsid	i
 80106de:	f383 8811 	msr	BASEPRI, r3
 80106e2:	f3bf 8f6f 	isb	sy
 80106e6:	f3bf 8f4f 	dsb	sy
 80106ea:	b662      	cpsie	i
 80106ec:	623b      	str	r3, [r7, #32]
 80106ee:	e7fe      	b.n	80106ee <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80106f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d10b      	bne.n	801070e <xTaskCreateStatic+0x4a>
 80106f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fa:	b672      	cpsid	i
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	b662      	cpsie	i
 801070a:	61fb      	str	r3, [r7, #28]
 801070c:	e7fe      	b.n	801070c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801070e:	235c      	movs	r3, #92	; 0x5c
 8010710:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	2b5c      	cmp	r3, #92	; 0x5c
 8010716:	d00b      	beq.n	8010730 <xTaskCreateStatic+0x6c>
 8010718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071c:	b672      	cpsid	i
 801071e:	f383 8811 	msr	BASEPRI, r3
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	b662      	cpsie	i
 801072c:	61bb      	str	r3, [r7, #24]
 801072e:	e7fe      	b.n	801072e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010730:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010734:	2b00      	cmp	r3, #0
 8010736:	d01e      	beq.n	8010776 <xTaskCreateStatic+0xb2>
 8010738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801073a:	2b00      	cmp	r3, #0
 801073c:	d01b      	beq.n	8010776 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801073e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010740:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010746:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074a:	2202      	movs	r2, #2
 801074c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010750:	2300      	movs	r3, #0
 8010752:	9303      	str	r3, [sp, #12]
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010756:	9302      	str	r3, [sp, #8]
 8010758:	f107 0314 	add.w	r3, r7, #20
 801075c:	9301      	str	r3, [sp, #4]
 801075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	68b9      	ldr	r1, [r7, #8]
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f000 f850 	bl	801080e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801076e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010770:	f000 f8de 	bl	8010930 <prvAddNewTaskToReadyList>
 8010774:	e001      	b.n	801077a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010776:	2300      	movs	r3, #0
 8010778:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801077a:	697b      	ldr	r3, [r7, #20]
	}
 801077c:	4618      	mov	r0, r3
 801077e:	3728      	adds	r7, #40	; 0x28
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010784:	b580      	push	{r7, lr}
 8010786:	b08c      	sub	sp, #48	; 0x30
 8010788:	af04      	add	r7, sp, #16
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	603b      	str	r3, [r7, #0]
 8010790:	4613      	mov	r3, r2
 8010792:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010794:	88fb      	ldrh	r3, [r7, #6]
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	4618      	mov	r0, r3
 801079a:	f001 fda7 	bl	80122ec <pvPortMalloc>
 801079e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d00e      	beq.n	80107c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80107a6:	205c      	movs	r0, #92	; 0x5c
 80107a8:	f001 fda0 	bl	80122ec <pvPortMalloc>
 80107ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d003      	beq.n	80107bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	697a      	ldr	r2, [r7, #20]
 80107b8:	631a      	str	r2, [r3, #48]	; 0x30
 80107ba:	e005      	b.n	80107c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80107bc:	6978      	ldr	r0, [r7, #20]
 80107be:	f001 fe5d 	bl	801247c <vPortFree>
 80107c2:	e001      	b.n	80107c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80107c4:	2300      	movs	r3, #0
 80107c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d017      	beq.n	80107fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80107ce:	69fb      	ldr	r3, [r7, #28]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80107d6:	88fa      	ldrh	r2, [r7, #6]
 80107d8:	2300      	movs	r3, #0
 80107da:	9303      	str	r3, [sp, #12]
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	9302      	str	r3, [sp, #8]
 80107e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e2:	9301      	str	r3, [sp, #4]
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	9300      	str	r3, [sp, #0]
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	68b9      	ldr	r1, [r7, #8]
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f000 f80e 	bl	801080e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107f2:	69f8      	ldr	r0, [r7, #28]
 80107f4:	f000 f89c 	bl	8010930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80107f8:	2301      	movs	r3, #1
 80107fa:	61bb      	str	r3, [r7, #24]
 80107fc:	e002      	b.n	8010804 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80107fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010802:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010804:	69bb      	ldr	r3, [r7, #24]
	}
 8010806:	4618      	mov	r0, r3
 8010808:	3720      	adds	r7, #32
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b088      	sub	sp, #32
 8010812:	af00      	add	r7, sp, #0
 8010814:	60f8      	str	r0, [r7, #12]
 8010816:	60b9      	str	r1, [r7, #8]
 8010818:	607a      	str	r2, [r7, #4]
 801081a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	461a      	mov	r2, r3
 8010826:	21a5      	movs	r1, #165	; 0xa5
 8010828:	f001 ff77 	bl	801271a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010830:	6879      	ldr	r1, [r7, #4]
 8010832:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010836:	440b      	add	r3, r1
 8010838:	009b      	lsls	r3, r3, #2
 801083a:	4413      	add	r3, r2
 801083c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	f023 0307 	bic.w	r3, r3, #7
 8010844:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	f003 0307 	and.w	r3, r3, #7
 801084c:	2b00      	cmp	r3, #0
 801084e:	d00b      	beq.n	8010868 <prvInitialiseNewTask+0x5a>
 8010850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010854:	b672      	cpsid	i
 8010856:	f383 8811 	msr	BASEPRI, r3
 801085a:	f3bf 8f6f 	isb	sy
 801085e:	f3bf 8f4f 	dsb	sy
 8010862:	b662      	cpsie	i
 8010864:	617b      	str	r3, [r7, #20]
 8010866:	e7fe      	b.n	8010866 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d01f      	beq.n	80108ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801086e:	2300      	movs	r3, #0
 8010870:	61fb      	str	r3, [r7, #28]
 8010872:	e012      	b.n	801089a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010874:	68ba      	ldr	r2, [r7, #8]
 8010876:	69fb      	ldr	r3, [r7, #28]
 8010878:	4413      	add	r3, r2
 801087a:	7819      	ldrb	r1, [r3, #0]
 801087c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	4413      	add	r3, r2
 8010882:	3334      	adds	r3, #52	; 0x34
 8010884:	460a      	mov	r2, r1
 8010886:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	4413      	add	r3, r2
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d006      	beq.n	80108a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	3301      	adds	r3, #1
 8010898:	61fb      	str	r3, [r7, #28]
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	2b0f      	cmp	r3, #15
 801089e:	d9e9      	bls.n	8010874 <prvInitialiseNewTask+0x66>
 80108a0:	e000      	b.n	80108a4 <prvInitialiseNewTask+0x96>
			{
				break;
 80108a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80108a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a6:	2200      	movs	r2, #0
 80108a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80108ac:	e003      	b.n	80108b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80108ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b0:	2200      	movs	r2, #0
 80108b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80108b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b8:	2b37      	cmp	r3, #55	; 0x37
 80108ba:	d901      	bls.n	80108c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80108bc:	2337      	movs	r3, #55	; 0x37
 80108be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80108c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80108c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80108cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ce:	2200      	movs	r2, #0
 80108d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80108d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d4:	3304      	adds	r3, #4
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7ff f96a 	bl	800fbb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80108dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108de:	3318      	adds	r3, #24
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff f965 	bl	800fbb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80108e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80108f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80108f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80108fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fe:	2200      	movs	r2, #0
 8010900:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010904:	2200      	movs	r2, #0
 8010906:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	68f9      	ldr	r1, [r7, #12]
 801090e:	69b8      	ldr	r0, [r7, #24]
 8010910:	f001 fabe 	bl	8011e90 <pxPortInitialiseStack>
 8010914:	4602      	mov	r2, r0
 8010916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010918:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801091a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010926:	bf00      	nop
 8010928:	3720      	adds	r7, #32
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
	...

08010930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010938:	f001 fbb6 	bl	80120a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801093c:	4b2d      	ldr	r3, [pc, #180]	; (80109f4 <prvAddNewTaskToReadyList+0xc4>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	3301      	adds	r3, #1
 8010942:	4a2c      	ldr	r2, [pc, #176]	; (80109f4 <prvAddNewTaskToReadyList+0xc4>)
 8010944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010946:	4b2c      	ldr	r3, [pc, #176]	; (80109f8 <prvAddNewTaskToReadyList+0xc8>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d109      	bne.n	8010962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801094e:	4a2a      	ldr	r2, [pc, #168]	; (80109f8 <prvAddNewTaskToReadyList+0xc8>)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010954:	4b27      	ldr	r3, [pc, #156]	; (80109f4 <prvAddNewTaskToReadyList+0xc4>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2b01      	cmp	r3, #1
 801095a:	d110      	bne.n	801097e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801095c:	f000 fc92 	bl	8011284 <prvInitialiseTaskLists>
 8010960:	e00d      	b.n	801097e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010962:	4b26      	ldr	r3, [pc, #152]	; (80109fc <prvAddNewTaskToReadyList+0xcc>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d109      	bne.n	801097e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801096a:	4b23      	ldr	r3, [pc, #140]	; (80109f8 <prvAddNewTaskToReadyList+0xc8>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010974:	429a      	cmp	r2, r3
 8010976:	d802      	bhi.n	801097e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010978:	4a1f      	ldr	r2, [pc, #124]	; (80109f8 <prvAddNewTaskToReadyList+0xc8>)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801097e:	4b20      	ldr	r3, [pc, #128]	; (8010a00 <prvAddNewTaskToReadyList+0xd0>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	3301      	adds	r3, #1
 8010984:	4a1e      	ldr	r2, [pc, #120]	; (8010a00 <prvAddNewTaskToReadyList+0xd0>)
 8010986:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010988:	4b1d      	ldr	r3, [pc, #116]	; (8010a00 <prvAddNewTaskToReadyList+0xd0>)
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010994:	4b1b      	ldr	r3, [pc, #108]	; (8010a04 <prvAddNewTaskToReadyList+0xd4>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	429a      	cmp	r2, r3
 801099a:	d903      	bls.n	80109a4 <prvAddNewTaskToReadyList+0x74>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109a0:	4a18      	ldr	r2, [pc, #96]	; (8010a04 <prvAddNewTaskToReadyList+0xd4>)
 80109a2:	6013      	str	r3, [r2, #0]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109a8:	4613      	mov	r3, r2
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	4413      	add	r3, r2
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	4a15      	ldr	r2, [pc, #84]	; (8010a08 <prvAddNewTaskToReadyList+0xd8>)
 80109b2:	441a      	add	r2, r3
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3304      	adds	r3, #4
 80109b8:	4619      	mov	r1, r3
 80109ba:	4610      	mov	r0, r2
 80109bc:	f7ff f905 	bl	800fbca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80109c0:	f001 fba4 	bl	801210c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80109c4:	4b0d      	ldr	r3, [pc, #52]	; (80109fc <prvAddNewTaskToReadyList+0xcc>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00e      	beq.n	80109ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80109cc:	4b0a      	ldr	r3, [pc, #40]	; (80109f8 <prvAddNewTaskToReadyList+0xc8>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d207      	bcs.n	80109ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80109da:	4b0c      	ldr	r3, [pc, #48]	; (8010a0c <prvAddNewTaskToReadyList+0xdc>)
 80109dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	f3bf 8f4f 	dsb	sy
 80109e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109ea:	bf00      	nop
 80109ec:	3708      	adds	r7, #8
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	20003f38 	.word	0x20003f38
 80109f8:	20003a64 	.word	0x20003a64
 80109fc:	20003f44 	.word	0x20003f44
 8010a00:	20003f54 	.word	0x20003f54
 8010a04:	20003f40 	.word	0x20003f40
 8010a08:	20003a68 	.word	0x20003a68
 8010a0c:	e000ed04 	.word	0xe000ed04

08010a10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010a18:	f001 fb46 	bl	80120a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d102      	bne.n	8010a28 <vTaskDelete+0x18>
 8010a22:	4b2d      	ldr	r3, [pc, #180]	; (8010ad8 <vTaskDelete+0xc8>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	e000      	b.n	8010a2a <vTaskDelete+0x1a>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	3304      	adds	r3, #4
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7ff f927 	bl	800fc84 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d004      	beq.n	8010a48 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	3318      	adds	r3, #24
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7ff f91e 	bl	800fc84 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010a48:	4b24      	ldr	r3, [pc, #144]	; (8010adc <vTaskDelete+0xcc>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	4a23      	ldr	r2, [pc, #140]	; (8010adc <vTaskDelete+0xcc>)
 8010a50:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010a52:	4b21      	ldr	r3, [pc, #132]	; (8010ad8 <vTaskDelete+0xc8>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	68fa      	ldr	r2, [r7, #12]
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d10b      	bne.n	8010a74 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	3304      	adds	r3, #4
 8010a60:	4619      	mov	r1, r3
 8010a62:	481f      	ldr	r0, [pc, #124]	; (8010ae0 <vTaskDelete+0xd0>)
 8010a64:	f7ff f8b1 	bl	800fbca <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010a68:	4b1e      	ldr	r3, [pc, #120]	; (8010ae4 <vTaskDelete+0xd4>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	4a1d      	ldr	r2, [pc, #116]	; (8010ae4 <vTaskDelete+0xd4>)
 8010a70:	6013      	str	r3, [r2, #0]
 8010a72:	e009      	b.n	8010a88 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010a74:	4b1c      	ldr	r3, [pc, #112]	; (8010ae8 <vTaskDelete+0xd8>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	3b01      	subs	r3, #1
 8010a7a:	4a1b      	ldr	r2, [pc, #108]	; (8010ae8 <vTaskDelete+0xd8>)
 8010a7c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8010a7e:	68f8      	ldr	r0, [r7, #12]
 8010a80:	f000 fc6c 	bl	801135c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010a84:	f000 fc9a 	bl	80113bc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8010a88:	f001 fb40 	bl	801210c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010a8c:	4b17      	ldr	r3, [pc, #92]	; (8010aec <vTaskDelete+0xdc>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d01c      	beq.n	8010ace <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8010a94:	4b10      	ldr	r3, [pc, #64]	; (8010ad8 <vTaskDelete+0xc8>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	68fa      	ldr	r2, [r7, #12]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d117      	bne.n	8010ace <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010a9e:	4b14      	ldr	r3, [pc, #80]	; (8010af0 <vTaskDelete+0xe0>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00b      	beq.n	8010abe <vTaskDelete+0xae>
 8010aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aaa:	b672      	cpsid	i
 8010aac:	f383 8811 	msr	BASEPRI, r3
 8010ab0:	f3bf 8f6f 	isb	sy
 8010ab4:	f3bf 8f4f 	dsb	sy
 8010ab8:	b662      	cpsie	i
 8010aba:	60bb      	str	r3, [r7, #8]
 8010abc:	e7fe      	b.n	8010abc <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 8010abe:	4b0d      	ldr	r3, [pc, #52]	; (8010af4 <vTaskDelete+0xe4>)
 8010ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ac4:	601a      	str	r2, [r3, #0]
 8010ac6:	f3bf 8f4f 	dsb	sy
 8010aca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010ace:	bf00      	nop
 8010ad0:	3710      	adds	r7, #16
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	20003a64 	.word	0x20003a64
 8010adc:	20003f54 	.word	0x20003f54
 8010ae0:	20003f0c 	.word	0x20003f0c
 8010ae4:	20003f20 	.word	0x20003f20
 8010ae8:	20003f38 	.word	0x20003f38
 8010aec:	20003f44 	.word	0x20003f44
 8010af0:	20003f60 	.word	0x20003f60
 8010af4:	e000ed04 	.word	0xe000ed04

08010af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010b00:	2300      	movs	r3, #0
 8010b02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d018      	beq.n	8010b3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010b0a:	4b14      	ldr	r3, [pc, #80]	; (8010b5c <vTaskDelay+0x64>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d00b      	beq.n	8010b2a <vTaskDelay+0x32>
 8010b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b16:	b672      	cpsid	i
 8010b18:	f383 8811 	msr	BASEPRI, r3
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	b662      	cpsie	i
 8010b26:	60bb      	str	r3, [r7, #8]
 8010b28:	e7fe      	b.n	8010b28 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8010b2a:	f000 f883 	bl	8010c34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010b2e:	2100      	movs	r1, #0
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 fe05 	bl	8011740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010b36:	f000 f88b 	bl	8010c50 <xTaskResumeAll>
 8010b3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d107      	bne.n	8010b52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010b42:	4b07      	ldr	r3, [pc, #28]	; (8010b60 <vTaskDelay+0x68>)
 8010b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b52:	bf00      	nop
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	20003f60 	.word	0x20003f60
 8010b60:	e000ed04 	.word	0xe000ed04

08010b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b08a      	sub	sp, #40	; 0x28
 8010b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010b72:	463a      	mov	r2, r7
 8010b74:	1d39      	adds	r1, r7, #4
 8010b76:	f107 0308 	add.w	r3, r7, #8
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe ffc4 	bl	800fb08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010b80:	6839      	ldr	r1, [r7, #0]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	68ba      	ldr	r2, [r7, #8]
 8010b86:	9202      	str	r2, [sp, #8]
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	2300      	movs	r3, #0
 8010b90:	460a      	mov	r2, r1
 8010b92:	4922      	ldr	r1, [pc, #136]	; (8010c1c <vTaskStartScheduler+0xb8>)
 8010b94:	4822      	ldr	r0, [pc, #136]	; (8010c20 <vTaskStartScheduler+0xbc>)
 8010b96:	f7ff fd95 	bl	80106c4 <xTaskCreateStatic>
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	4b21      	ldr	r3, [pc, #132]	; (8010c24 <vTaskStartScheduler+0xc0>)
 8010b9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ba0:	4b20      	ldr	r3, [pc, #128]	; (8010c24 <vTaskStartScheduler+0xc0>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d002      	beq.n	8010bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ba8:	2301      	movs	r3, #1
 8010baa:	617b      	str	r3, [r7, #20]
 8010bac:	e001      	b.n	8010bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d102      	bne.n	8010bbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010bb8:	f000 fe16 	bl	80117e8 <xTimerCreateTimerTask>
 8010bbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d117      	bne.n	8010bf4 <vTaskStartScheduler+0x90>
 8010bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc8:	b672      	cpsid	i
 8010bca:	f383 8811 	msr	BASEPRI, r3
 8010bce:	f3bf 8f6f 	isb	sy
 8010bd2:	f3bf 8f4f 	dsb	sy
 8010bd6:	b662      	cpsie	i
 8010bd8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010bda:	4b13      	ldr	r3, [pc, #76]	; (8010c28 <vTaskStartScheduler+0xc4>)
 8010bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8010be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010be2:	4b12      	ldr	r3, [pc, #72]	; (8010c2c <vTaskStartScheduler+0xc8>)
 8010be4:	2201      	movs	r2, #1
 8010be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010be8:	4b11      	ldr	r3, [pc, #68]	; (8010c30 <vTaskStartScheduler+0xcc>)
 8010bea:	2200      	movs	r2, #0
 8010bec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010bee:	f001 f9df 	bl	8011fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010bf2:	e00f      	b.n	8010c14 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bfa:	d10b      	bne.n	8010c14 <vTaskStartScheduler+0xb0>
 8010bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c00:	b672      	cpsid	i
 8010c02:	f383 8811 	msr	BASEPRI, r3
 8010c06:	f3bf 8f6f 	isb	sy
 8010c0a:	f3bf 8f4f 	dsb	sy
 8010c0e:	b662      	cpsie	i
 8010c10:	60fb      	str	r3, [r7, #12]
 8010c12:	e7fe      	b.n	8010c12 <vTaskStartScheduler+0xae>
}
 8010c14:	bf00      	nop
 8010c16:	3718      	adds	r7, #24
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	08016ec0 	.word	0x08016ec0
 8010c20:	08011255 	.word	0x08011255
 8010c24:	20003f5c 	.word	0x20003f5c
 8010c28:	20003f58 	.word	0x20003f58
 8010c2c:	20003f44 	.word	0x20003f44
 8010c30:	20003f3c 	.word	0x20003f3c

08010c34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010c34:	b480      	push	{r7}
 8010c36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010c38:	4b04      	ldr	r3, [pc, #16]	; (8010c4c <vTaskSuspendAll+0x18>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	4a03      	ldr	r2, [pc, #12]	; (8010c4c <vTaskSuspendAll+0x18>)
 8010c40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010c42:	bf00      	nop
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr
 8010c4c:	20003f60 	.word	0x20003f60

08010c50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010c56:	2300      	movs	r3, #0
 8010c58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010c5e:	4b42      	ldr	r3, [pc, #264]	; (8010d68 <xTaskResumeAll+0x118>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d10b      	bne.n	8010c7e <xTaskResumeAll+0x2e>
 8010c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c6a:	b672      	cpsid	i
 8010c6c:	f383 8811 	msr	BASEPRI, r3
 8010c70:	f3bf 8f6f 	isb	sy
 8010c74:	f3bf 8f4f 	dsb	sy
 8010c78:	b662      	cpsie	i
 8010c7a:	603b      	str	r3, [r7, #0]
 8010c7c:	e7fe      	b.n	8010c7c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010c7e:	f001 fa13 	bl	80120a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010c82:	4b39      	ldr	r3, [pc, #228]	; (8010d68 <xTaskResumeAll+0x118>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	4a37      	ldr	r2, [pc, #220]	; (8010d68 <xTaskResumeAll+0x118>)
 8010c8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c8c:	4b36      	ldr	r3, [pc, #216]	; (8010d68 <xTaskResumeAll+0x118>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d162      	bne.n	8010d5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010c94:	4b35      	ldr	r3, [pc, #212]	; (8010d6c <xTaskResumeAll+0x11c>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d05e      	beq.n	8010d5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c9c:	e02f      	b.n	8010cfe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c9e:	4b34      	ldr	r3, [pc, #208]	; (8010d70 <xTaskResumeAll+0x120>)
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	3318      	adds	r3, #24
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7fe ffea 	bl	800fc84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fe ffe5 	bl	800fc84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cbe:	4b2d      	ldr	r3, [pc, #180]	; (8010d74 <xTaskResumeAll+0x124>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d903      	bls.n	8010cce <xTaskResumeAll+0x7e>
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cca:	4a2a      	ldr	r2, [pc, #168]	; (8010d74 <xTaskResumeAll+0x124>)
 8010ccc:	6013      	str	r3, [r2, #0]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	009b      	lsls	r3, r3, #2
 8010cda:	4a27      	ldr	r2, [pc, #156]	; (8010d78 <xTaskResumeAll+0x128>)
 8010cdc:	441a      	add	r2, r3
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	3304      	adds	r3, #4
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4610      	mov	r0, r2
 8010ce6:	f7fe ff70 	bl	800fbca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cee:	4b23      	ldr	r3, [pc, #140]	; (8010d7c <xTaskResumeAll+0x12c>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d302      	bcc.n	8010cfe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010cf8:	4b21      	ldr	r3, [pc, #132]	; (8010d80 <xTaskResumeAll+0x130>)
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cfe:	4b1c      	ldr	r3, [pc, #112]	; (8010d70 <xTaskResumeAll+0x120>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1cb      	bne.n	8010c9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d001      	beq.n	8010d10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d0c:	f000 fb56 	bl	80113bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010d10:	4b1c      	ldr	r3, [pc, #112]	; (8010d84 <xTaskResumeAll+0x134>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d010      	beq.n	8010d3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d1c:	f000 f846 	bl	8010dac <xTaskIncrementTick>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d002      	beq.n	8010d2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010d26:	4b16      	ldr	r3, [pc, #88]	; (8010d80 <xTaskResumeAll+0x130>)
 8010d28:	2201      	movs	r2, #1
 8010d2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3b01      	subs	r3, #1
 8010d30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1f1      	bne.n	8010d1c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8010d38:	4b12      	ldr	r3, [pc, #72]	; (8010d84 <xTaskResumeAll+0x134>)
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010d3e:	4b10      	ldr	r3, [pc, #64]	; (8010d80 <xTaskResumeAll+0x130>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d009      	beq.n	8010d5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d46:	2301      	movs	r3, #1
 8010d48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d4a:	4b0f      	ldr	r3, [pc, #60]	; (8010d88 <xTaskResumeAll+0x138>)
 8010d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d50:	601a      	str	r2, [r3, #0]
 8010d52:	f3bf 8f4f 	dsb	sy
 8010d56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d5a:	f001 f9d7 	bl	801210c <vPortExitCritical>

	return xAlreadyYielded;
 8010d5e:	68bb      	ldr	r3, [r7, #8]
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3710      	adds	r7, #16
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	20003f60 	.word	0x20003f60
 8010d6c:	20003f38 	.word	0x20003f38
 8010d70:	20003ef8 	.word	0x20003ef8
 8010d74:	20003f40 	.word	0x20003f40
 8010d78:	20003a68 	.word	0x20003a68
 8010d7c:	20003a64 	.word	0x20003a64
 8010d80:	20003f4c 	.word	0x20003f4c
 8010d84:	20003f48 	.word	0x20003f48
 8010d88:	e000ed04 	.word	0xe000ed04

08010d8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010d92:	4b05      	ldr	r3, [pc, #20]	; (8010da8 <xTaskGetTickCount+0x1c>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010d98:	687b      	ldr	r3, [r7, #4]
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	370c      	adds	r7, #12
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop
 8010da8:	20003f3c 	.word	0x20003f3c

08010dac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010db2:	2300      	movs	r3, #0
 8010db4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010db6:	4b4f      	ldr	r3, [pc, #316]	; (8010ef4 <xTaskIncrementTick+0x148>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f040 808a 	bne.w	8010ed4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010dc0:	4b4d      	ldr	r3, [pc, #308]	; (8010ef8 <xTaskIncrementTick+0x14c>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010dc8:	4a4b      	ldr	r2, [pc, #300]	; (8010ef8 <xTaskIncrementTick+0x14c>)
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d121      	bne.n	8010e18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010dd4:	4b49      	ldr	r3, [pc, #292]	; (8010efc <xTaskIncrementTick+0x150>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00b      	beq.n	8010df6 <xTaskIncrementTick+0x4a>
 8010dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de2:	b672      	cpsid	i
 8010de4:	f383 8811 	msr	BASEPRI, r3
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	b662      	cpsie	i
 8010df2:	603b      	str	r3, [r7, #0]
 8010df4:	e7fe      	b.n	8010df4 <xTaskIncrementTick+0x48>
 8010df6:	4b41      	ldr	r3, [pc, #260]	; (8010efc <xTaskIncrementTick+0x150>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	60fb      	str	r3, [r7, #12]
 8010dfc:	4b40      	ldr	r3, [pc, #256]	; (8010f00 <xTaskIncrementTick+0x154>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4a3e      	ldr	r2, [pc, #248]	; (8010efc <xTaskIncrementTick+0x150>)
 8010e02:	6013      	str	r3, [r2, #0]
 8010e04:	4a3e      	ldr	r2, [pc, #248]	; (8010f00 <xTaskIncrementTick+0x154>)
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6013      	str	r3, [r2, #0]
 8010e0a:	4b3e      	ldr	r3, [pc, #248]	; (8010f04 <xTaskIncrementTick+0x158>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	4a3c      	ldr	r2, [pc, #240]	; (8010f04 <xTaskIncrementTick+0x158>)
 8010e12:	6013      	str	r3, [r2, #0]
 8010e14:	f000 fad2 	bl	80113bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e18:	4b3b      	ldr	r3, [pc, #236]	; (8010f08 <xTaskIncrementTick+0x15c>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	693a      	ldr	r2, [r7, #16]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d349      	bcc.n	8010eb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e22:	4b36      	ldr	r3, [pc, #216]	; (8010efc <xTaskIncrementTick+0x150>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d104      	bne.n	8010e36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e2c:	4b36      	ldr	r3, [pc, #216]	; (8010f08 <xTaskIncrementTick+0x15c>)
 8010e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e32:	601a      	str	r2, [r3, #0]
					break;
 8010e34:	e03f      	b.n	8010eb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e36:	4b31      	ldr	r3, [pc, #196]	; (8010efc <xTaskIncrementTick+0x150>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e46:	693a      	ldr	r2, [r7, #16]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d203      	bcs.n	8010e56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e4e:	4a2e      	ldr	r2, [pc, #184]	; (8010f08 <xTaskIncrementTick+0x15c>)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e54:	e02f      	b.n	8010eb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	3304      	adds	r3, #4
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fe ff12 	bl	800fc84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d004      	beq.n	8010e72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	3318      	adds	r3, #24
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fe ff09 	bl	800fc84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e76:	4b25      	ldr	r3, [pc, #148]	; (8010f0c <xTaskIncrementTick+0x160>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d903      	bls.n	8010e86 <xTaskIncrementTick+0xda>
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e82:	4a22      	ldr	r2, [pc, #136]	; (8010f0c <xTaskIncrementTick+0x160>)
 8010e84:	6013      	str	r3, [r2, #0]
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	4413      	add	r3, r2
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	4a1f      	ldr	r2, [pc, #124]	; (8010f10 <xTaskIncrementTick+0x164>)
 8010e94:	441a      	add	r2, r3
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	3304      	adds	r3, #4
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	4610      	mov	r0, r2
 8010e9e:	f7fe fe94 	bl	800fbca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ea6:	4b1b      	ldr	r3, [pc, #108]	; (8010f14 <xTaskIncrementTick+0x168>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d3b8      	bcc.n	8010e22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010eb4:	e7b5      	b.n	8010e22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010eb6:	4b17      	ldr	r3, [pc, #92]	; (8010f14 <xTaskIncrementTick+0x168>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ebc:	4914      	ldr	r1, [pc, #80]	; (8010f10 <xTaskIncrementTick+0x164>)
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4413      	add	r3, r2
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	440b      	add	r3, r1
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b01      	cmp	r3, #1
 8010ecc:	d907      	bls.n	8010ede <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	617b      	str	r3, [r7, #20]
 8010ed2:	e004      	b.n	8010ede <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010ed4:	4b10      	ldr	r3, [pc, #64]	; (8010f18 <xTaskIncrementTick+0x16c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	4a0f      	ldr	r2, [pc, #60]	; (8010f18 <xTaskIncrementTick+0x16c>)
 8010edc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010ede:	4b0f      	ldr	r3, [pc, #60]	; (8010f1c <xTaskIncrementTick+0x170>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d001      	beq.n	8010eea <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010eea:	697b      	ldr	r3, [r7, #20]
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3718      	adds	r7, #24
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	20003f60 	.word	0x20003f60
 8010ef8:	20003f3c 	.word	0x20003f3c
 8010efc:	20003ef0 	.word	0x20003ef0
 8010f00:	20003ef4 	.word	0x20003ef4
 8010f04:	20003f50 	.word	0x20003f50
 8010f08:	20003f58 	.word	0x20003f58
 8010f0c:	20003f40 	.word	0x20003f40
 8010f10:	20003a68 	.word	0x20003a68
 8010f14:	20003a64 	.word	0x20003a64
 8010f18:	20003f48 	.word	0x20003f48
 8010f1c:	20003f4c 	.word	0x20003f4c

08010f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f26:	4b28      	ldr	r3, [pc, #160]	; (8010fc8 <vTaskSwitchContext+0xa8>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d003      	beq.n	8010f36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010f2e:	4b27      	ldr	r3, [pc, #156]	; (8010fcc <vTaskSwitchContext+0xac>)
 8010f30:	2201      	movs	r2, #1
 8010f32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010f34:	e042      	b.n	8010fbc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8010f36:	4b25      	ldr	r3, [pc, #148]	; (8010fcc <vTaskSwitchContext+0xac>)
 8010f38:	2200      	movs	r2, #0
 8010f3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f3c:	4b24      	ldr	r3, [pc, #144]	; (8010fd0 <vTaskSwitchContext+0xb0>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	60fb      	str	r3, [r7, #12]
 8010f42:	e011      	b.n	8010f68 <vTaskSwitchContext+0x48>
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d10b      	bne.n	8010f62 <vTaskSwitchContext+0x42>
 8010f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f4e:	b672      	cpsid	i
 8010f50:	f383 8811 	msr	BASEPRI, r3
 8010f54:	f3bf 8f6f 	isb	sy
 8010f58:	f3bf 8f4f 	dsb	sy
 8010f5c:	b662      	cpsie	i
 8010f5e:	607b      	str	r3, [r7, #4]
 8010f60:	e7fe      	b.n	8010f60 <vTaskSwitchContext+0x40>
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	3b01      	subs	r3, #1
 8010f66:	60fb      	str	r3, [r7, #12]
 8010f68:	491a      	ldr	r1, [pc, #104]	; (8010fd4 <vTaskSwitchContext+0xb4>)
 8010f6a:	68fa      	ldr	r2, [r7, #12]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	4413      	add	r3, r2
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	440b      	add	r3, r1
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d0e3      	beq.n	8010f44 <vTaskSwitchContext+0x24>
 8010f7c:	68fa      	ldr	r2, [r7, #12]
 8010f7e:	4613      	mov	r3, r2
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	4413      	add	r3, r2
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	4a13      	ldr	r2, [pc, #76]	; (8010fd4 <vTaskSwitchContext+0xb4>)
 8010f88:	4413      	add	r3, r2
 8010f8a:	60bb      	str	r3, [r7, #8]
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	605a      	str	r2, [r3, #4]
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	685a      	ldr	r2, [r3, #4]
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d104      	bne.n	8010fac <vTaskSwitchContext+0x8c>
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	685a      	ldr	r2, [r3, #4]
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	605a      	str	r2, [r3, #4]
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	4a09      	ldr	r2, [pc, #36]	; (8010fd8 <vTaskSwitchContext+0xb8>)
 8010fb4:	6013      	str	r3, [r2, #0]
 8010fb6:	4a06      	ldr	r2, [pc, #24]	; (8010fd0 <vTaskSwitchContext+0xb0>)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	6013      	str	r3, [r2, #0]
}
 8010fbc:	bf00      	nop
 8010fbe:	3714      	adds	r7, #20
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr
 8010fc8:	20003f60 	.word	0x20003f60
 8010fcc:	20003f4c 	.word	0x20003f4c
 8010fd0:	20003f40 	.word	0x20003f40
 8010fd4:	20003a68 	.word	0x20003a68
 8010fd8:	20003a64 	.word	0x20003a64

08010fdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d10b      	bne.n	8011004 <vTaskPlaceOnEventList+0x28>
 8010fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff0:	b672      	cpsid	i
 8010ff2:	f383 8811 	msr	BASEPRI, r3
 8010ff6:	f3bf 8f6f 	isb	sy
 8010ffa:	f3bf 8f4f 	dsb	sy
 8010ffe:	b662      	cpsie	i
 8011000:	60fb      	str	r3, [r7, #12]
 8011002:	e7fe      	b.n	8011002 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011004:	4b07      	ldr	r3, [pc, #28]	; (8011024 <vTaskPlaceOnEventList+0x48>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	3318      	adds	r3, #24
 801100a:	4619      	mov	r1, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f7fe fe00 	bl	800fc12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011012:	2101      	movs	r1, #1
 8011014:	6838      	ldr	r0, [r7, #0]
 8011016:	f000 fb93 	bl	8011740 <prvAddCurrentTaskToDelayedList>
}
 801101a:	bf00      	nop
 801101c:	3710      	adds	r7, #16
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	20003a64 	.word	0x20003a64

08011028 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011028:	b580      	push	{r7, lr}
 801102a:	b086      	sub	sp, #24
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d10b      	bne.n	8011052 <vTaskPlaceOnEventListRestricted+0x2a>
 801103a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103e:	b672      	cpsid	i
 8011040:	f383 8811 	msr	BASEPRI, r3
 8011044:	f3bf 8f6f 	isb	sy
 8011048:	f3bf 8f4f 	dsb	sy
 801104c:	b662      	cpsie	i
 801104e:	617b      	str	r3, [r7, #20]
 8011050:	e7fe      	b.n	8011050 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011052:	4b0a      	ldr	r3, [pc, #40]	; (801107c <vTaskPlaceOnEventListRestricted+0x54>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3318      	adds	r3, #24
 8011058:	4619      	mov	r1, r3
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f7fe fdb5 	bl	800fbca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d002      	beq.n	801106c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011066:	f04f 33ff 	mov.w	r3, #4294967295
 801106a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801106c:	6879      	ldr	r1, [r7, #4]
 801106e:	68b8      	ldr	r0, [r7, #8]
 8011070:	f000 fb66 	bl	8011740 <prvAddCurrentTaskToDelayedList>
	}
 8011074:	bf00      	nop
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	20003a64 	.word	0x20003a64

08011080 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b086      	sub	sp, #24
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	68db      	ldr	r3, [r3, #12]
 801108e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10b      	bne.n	80110ae <xTaskRemoveFromEventList+0x2e>
 8011096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109a:	b672      	cpsid	i
 801109c:	f383 8811 	msr	BASEPRI, r3
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	b662      	cpsie	i
 80110aa:	60fb      	str	r3, [r7, #12]
 80110ac:	e7fe      	b.n	80110ac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	3318      	adds	r3, #24
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fe fde6 	bl	800fc84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110b8:	4b1d      	ldr	r3, [pc, #116]	; (8011130 <xTaskRemoveFromEventList+0xb0>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d11d      	bne.n	80110fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	3304      	adds	r3, #4
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fe fddd 	bl	800fc84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ce:	4b19      	ldr	r3, [pc, #100]	; (8011134 <xTaskRemoveFromEventList+0xb4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d903      	bls.n	80110de <xTaskRemoveFromEventList+0x5e>
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110da:	4a16      	ldr	r2, [pc, #88]	; (8011134 <xTaskRemoveFromEventList+0xb4>)
 80110dc:	6013      	str	r3, [r2, #0]
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e2:	4613      	mov	r3, r2
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	4413      	add	r3, r2
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	4a13      	ldr	r2, [pc, #76]	; (8011138 <xTaskRemoveFromEventList+0xb8>)
 80110ec:	441a      	add	r2, r3
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	3304      	adds	r3, #4
 80110f2:	4619      	mov	r1, r3
 80110f4:	4610      	mov	r0, r2
 80110f6:	f7fe fd68 	bl	800fbca <vListInsertEnd>
 80110fa:	e005      	b.n	8011108 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	3318      	adds	r3, #24
 8011100:	4619      	mov	r1, r3
 8011102:	480e      	ldr	r0, [pc, #56]	; (801113c <xTaskRemoveFromEventList+0xbc>)
 8011104:	f7fe fd61 	bl	800fbca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801110c:	4b0c      	ldr	r3, [pc, #48]	; (8011140 <xTaskRemoveFromEventList+0xc0>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011112:	429a      	cmp	r2, r3
 8011114:	d905      	bls.n	8011122 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011116:	2301      	movs	r3, #1
 8011118:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801111a:	4b0a      	ldr	r3, [pc, #40]	; (8011144 <xTaskRemoveFromEventList+0xc4>)
 801111c:	2201      	movs	r2, #1
 801111e:	601a      	str	r2, [r3, #0]
 8011120:	e001      	b.n	8011126 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011122:	2300      	movs	r3, #0
 8011124:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011126:	697b      	ldr	r3, [r7, #20]
}
 8011128:	4618      	mov	r0, r3
 801112a:	3718      	adds	r7, #24
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}
 8011130:	20003f60 	.word	0x20003f60
 8011134:	20003f40 	.word	0x20003f40
 8011138:	20003a68 	.word	0x20003a68
 801113c:	20003ef8 	.word	0x20003ef8
 8011140:	20003a64 	.word	0x20003a64
 8011144:	20003f4c 	.word	0x20003f4c

08011148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011150:	4b06      	ldr	r3, [pc, #24]	; (801116c <vTaskInternalSetTimeOutState+0x24>)
 8011152:	681a      	ldr	r2, [r3, #0]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011158:	4b05      	ldr	r3, [pc, #20]	; (8011170 <vTaskInternalSetTimeOutState+0x28>)
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	605a      	str	r2, [r3, #4]
}
 8011160:	bf00      	nop
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr
 801116c:	20003f50 	.word	0x20003f50
 8011170:	20003f3c 	.word	0x20003f3c

08011174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d10b      	bne.n	801119c <xTaskCheckForTimeOut+0x28>
 8011184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011188:	b672      	cpsid	i
 801118a:	f383 8811 	msr	BASEPRI, r3
 801118e:	f3bf 8f6f 	isb	sy
 8011192:	f3bf 8f4f 	dsb	sy
 8011196:	b662      	cpsie	i
 8011198:	613b      	str	r3, [r7, #16]
 801119a:	e7fe      	b.n	801119a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10b      	bne.n	80111ba <xTaskCheckForTimeOut+0x46>
 80111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a6:	b672      	cpsid	i
 80111a8:	f383 8811 	msr	BASEPRI, r3
 80111ac:	f3bf 8f6f 	isb	sy
 80111b0:	f3bf 8f4f 	dsb	sy
 80111b4:	b662      	cpsie	i
 80111b6:	60fb      	str	r3, [r7, #12]
 80111b8:	e7fe      	b.n	80111b8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80111ba:	f000 ff75 	bl	80120a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80111be:	4b1d      	ldr	r3, [pc, #116]	; (8011234 <xTaskCheckForTimeOut+0xc0>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	69ba      	ldr	r2, [r7, #24]
 80111ca:	1ad3      	subs	r3, r2, r3
 80111cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d6:	d102      	bne.n	80111de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80111d8:	2300      	movs	r3, #0
 80111da:	61fb      	str	r3, [r7, #28]
 80111dc:	e023      	b.n	8011226 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	4b15      	ldr	r3, [pc, #84]	; (8011238 <xTaskCheckForTimeOut+0xc4>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d007      	beq.n	80111fa <xTaskCheckForTimeOut+0x86>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	69ba      	ldr	r2, [r7, #24]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d302      	bcc.n	80111fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80111f4:	2301      	movs	r3, #1
 80111f6:	61fb      	str	r3, [r7, #28]
 80111f8:	e015      	b.n	8011226 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	697a      	ldr	r2, [r7, #20]
 8011200:	429a      	cmp	r2, r3
 8011202:	d20b      	bcs.n	801121c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	1ad2      	subs	r2, r2, r3
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7ff ff99 	bl	8011148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011216:	2300      	movs	r3, #0
 8011218:	61fb      	str	r3, [r7, #28]
 801121a:	e004      	b.n	8011226 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	2200      	movs	r2, #0
 8011220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011222:	2301      	movs	r3, #1
 8011224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011226:	f000 ff71 	bl	801210c <vPortExitCritical>

	return xReturn;
 801122a:	69fb      	ldr	r3, [r7, #28]
}
 801122c:	4618      	mov	r0, r3
 801122e:	3720      	adds	r7, #32
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	20003f3c 	.word	0x20003f3c
 8011238:	20003f50 	.word	0x20003f50

0801123c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801123c:	b480      	push	{r7}
 801123e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011240:	4b03      	ldr	r3, [pc, #12]	; (8011250 <vTaskMissedYield+0x14>)
 8011242:	2201      	movs	r2, #1
 8011244:	601a      	str	r2, [r3, #0]
}
 8011246:	bf00      	nop
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	20003f4c 	.word	0x20003f4c

08011254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801125c:	f000 f852 	bl	8011304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011260:	4b06      	ldr	r3, [pc, #24]	; (801127c <prvIdleTask+0x28>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	2b01      	cmp	r3, #1
 8011266:	d9f9      	bls.n	801125c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011268:	4b05      	ldr	r3, [pc, #20]	; (8011280 <prvIdleTask+0x2c>)
 801126a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801126e:	601a      	str	r2, [r3, #0]
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011278:	e7f0      	b.n	801125c <prvIdleTask+0x8>
 801127a:	bf00      	nop
 801127c:	20003a68 	.word	0x20003a68
 8011280:	e000ed04 	.word	0xe000ed04

08011284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801128a:	2300      	movs	r3, #0
 801128c:	607b      	str	r3, [r7, #4]
 801128e:	e00c      	b.n	80112aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	4613      	mov	r3, r2
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	009b      	lsls	r3, r3, #2
 801129a:	4a12      	ldr	r2, [pc, #72]	; (80112e4 <prvInitialiseTaskLists+0x60>)
 801129c:	4413      	add	r3, r2
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fe fc66 	bl	800fb70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	3301      	adds	r3, #1
 80112a8:	607b      	str	r3, [r7, #4]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2b37      	cmp	r3, #55	; 0x37
 80112ae:	d9ef      	bls.n	8011290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112b0:	480d      	ldr	r0, [pc, #52]	; (80112e8 <prvInitialiseTaskLists+0x64>)
 80112b2:	f7fe fc5d 	bl	800fb70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112b6:	480d      	ldr	r0, [pc, #52]	; (80112ec <prvInitialiseTaskLists+0x68>)
 80112b8:	f7fe fc5a 	bl	800fb70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80112bc:	480c      	ldr	r0, [pc, #48]	; (80112f0 <prvInitialiseTaskLists+0x6c>)
 80112be:	f7fe fc57 	bl	800fb70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80112c2:	480c      	ldr	r0, [pc, #48]	; (80112f4 <prvInitialiseTaskLists+0x70>)
 80112c4:	f7fe fc54 	bl	800fb70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80112c8:	480b      	ldr	r0, [pc, #44]	; (80112f8 <prvInitialiseTaskLists+0x74>)
 80112ca:	f7fe fc51 	bl	800fb70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80112ce:	4b0b      	ldr	r3, [pc, #44]	; (80112fc <prvInitialiseTaskLists+0x78>)
 80112d0:	4a05      	ldr	r2, [pc, #20]	; (80112e8 <prvInitialiseTaskLists+0x64>)
 80112d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80112d4:	4b0a      	ldr	r3, [pc, #40]	; (8011300 <prvInitialiseTaskLists+0x7c>)
 80112d6:	4a05      	ldr	r2, [pc, #20]	; (80112ec <prvInitialiseTaskLists+0x68>)
 80112d8:	601a      	str	r2, [r3, #0]
}
 80112da:	bf00      	nop
 80112dc:	3708      	adds	r7, #8
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	20003a68 	.word	0x20003a68
 80112e8:	20003ec8 	.word	0x20003ec8
 80112ec:	20003edc 	.word	0x20003edc
 80112f0:	20003ef8 	.word	0x20003ef8
 80112f4:	20003f0c 	.word	0x20003f0c
 80112f8:	20003f24 	.word	0x20003f24
 80112fc:	20003ef0 	.word	0x20003ef0
 8011300:	20003ef4 	.word	0x20003ef4

08011304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801130a:	e019      	b.n	8011340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801130c:	f000 fecc 	bl	80120a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011310:	4b0f      	ldr	r3, [pc, #60]	; (8011350 <prvCheckTasksWaitingTermination+0x4c>)
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	3304      	adds	r3, #4
 801131c:	4618      	mov	r0, r3
 801131e:	f7fe fcb1 	bl	800fc84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011322:	4b0c      	ldr	r3, [pc, #48]	; (8011354 <prvCheckTasksWaitingTermination+0x50>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	3b01      	subs	r3, #1
 8011328:	4a0a      	ldr	r2, [pc, #40]	; (8011354 <prvCheckTasksWaitingTermination+0x50>)
 801132a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801132c:	4b0a      	ldr	r3, [pc, #40]	; (8011358 <prvCheckTasksWaitingTermination+0x54>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	3b01      	subs	r3, #1
 8011332:	4a09      	ldr	r2, [pc, #36]	; (8011358 <prvCheckTasksWaitingTermination+0x54>)
 8011334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011336:	f000 fee9 	bl	801210c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f000 f80e 	bl	801135c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011340:	4b05      	ldr	r3, [pc, #20]	; (8011358 <prvCheckTasksWaitingTermination+0x54>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d1e1      	bne.n	801130c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011348:	bf00      	nop
 801134a:	3708      	adds	r7, #8
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	20003f0c 	.word	0x20003f0c
 8011354:	20003f38 	.word	0x20003f38
 8011358:	20003f20 	.word	0x20003f20

0801135c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801136a:	2b00      	cmp	r3, #0
 801136c:	d108      	bne.n	8011380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011372:	4618      	mov	r0, r3
 8011374:	f001 f882 	bl	801247c <vPortFree>
				vPortFree( pxTCB );
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f001 f87f 	bl	801247c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801137e:	e019      	b.n	80113b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011386:	2b01      	cmp	r3, #1
 8011388:	d103      	bne.n	8011392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f001 f876 	bl	801247c <vPortFree>
	}
 8011390:	e010      	b.n	80113b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011398:	2b02      	cmp	r3, #2
 801139a:	d00b      	beq.n	80113b4 <prvDeleteTCB+0x58>
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	b672      	cpsid	i
 80113a2:	f383 8811 	msr	BASEPRI, r3
 80113a6:	f3bf 8f6f 	isb	sy
 80113aa:	f3bf 8f4f 	dsb	sy
 80113ae:	b662      	cpsie	i
 80113b0:	60fb      	str	r3, [r7, #12]
 80113b2:	e7fe      	b.n	80113b2 <prvDeleteTCB+0x56>
	}
 80113b4:	bf00      	nop
 80113b6:	3710      	adds	r7, #16
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113c2:	4b0c      	ldr	r3, [pc, #48]	; (80113f4 <prvResetNextTaskUnblockTime+0x38>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d104      	bne.n	80113d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80113cc:	4b0a      	ldr	r3, [pc, #40]	; (80113f8 <prvResetNextTaskUnblockTime+0x3c>)
 80113ce:	f04f 32ff 	mov.w	r2, #4294967295
 80113d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80113d4:	e008      	b.n	80113e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113d6:	4b07      	ldr	r3, [pc, #28]	; (80113f4 <prvResetNextTaskUnblockTime+0x38>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	4a04      	ldr	r2, [pc, #16]	; (80113f8 <prvResetNextTaskUnblockTime+0x3c>)
 80113e6:	6013      	str	r3, [r2, #0]
}
 80113e8:	bf00      	nop
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr
 80113f4:	20003ef0 	.word	0x20003ef0
 80113f8:	20003f58 	.word	0x20003f58

080113fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011402:	4b0b      	ldr	r3, [pc, #44]	; (8011430 <xTaskGetSchedulerState+0x34>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d102      	bne.n	8011410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801140a:	2301      	movs	r3, #1
 801140c:	607b      	str	r3, [r7, #4]
 801140e:	e008      	b.n	8011422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011410:	4b08      	ldr	r3, [pc, #32]	; (8011434 <xTaskGetSchedulerState+0x38>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d102      	bne.n	801141e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011418:	2302      	movs	r3, #2
 801141a:	607b      	str	r3, [r7, #4]
 801141c:	e001      	b.n	8011422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801141e:	2300      	movs	r3, #0
 8011420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011422:	687b      	ldr	r3, [r7, #4]
	}
 8011424:	4618      	mov	r0, r3
 8011426:	370c      	adds	r7, #12
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr
 8011430:	20003f44 	.word	0x20003f44
 8011434:	20003f60 	.word	0x20003f60

08011438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011438:	b580      	push	{r7, lr}
 801143a:	b086      	sub	sp, #24
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011444:	2300      	movs	r3, #0
 8011446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d058      	beq.n	8011500 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801144e:	4b2f      	ldr	r3, [pc, #188]	; (801150c <xTaskPriorityDisinherit+0xd4>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	693a      	ldr	r2, [r7, #16]
 8011454:	429a      	cmp	r2, r3
 8011456:	d00b      	beq.n	8011470 <xTaskPriorityDisinherit+0x38>
 8011458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145c:	b672      	cpsid	i
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	b662      	cpsie	i
 801146c:	60fb      	str	r3, [r7, #12]
 801146e:	e7fe      	b.n	801146e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011474:	2b00      	cmp	r3, #0
 8011476:	d10b      	bne.n	8011490 <xTaskPriorityDisinherit+0x58>
 8011478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147c:	b672      	cpsid	i
 801147e:	f383 8811 	msr	BASEPRI, r3
 8011482:	f3bf 8f6f 	isb	sy
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	b662      	cpsie	i
 801148c:	60bb      	str	r3, [r7, #8]
 801148e:	e7fe      	b.n	801148e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011494:	1e5a      	subs	r2, r3, #1
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d02c      	beq.n	8011500 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d128      	bne.n	8011500 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	3304      	adds	r3, #4
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fe fbe6 	bl	800fc84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d0:	4b0f      	ldr	r3, [pc, #60]	; (8011510 <xTaskPriorityDisinherit+0xd8>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d903      	bls.n	80114e0 <xTaskPriorityDisinherit+0xa8>
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114dc:	4a0c      	ldr	r2, [pc, #48]	; (8011510 <xTaskPriorityDisinherit+0xd8>)
 80114de:	6013      	str	r3, [r2, #0]
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e4:	4613      	mov	r3, r2
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	4413      	add	r3, r2
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4a09      	ldr	r2, [pc, #36]	; (8011514 <xTaskPriorityDisinherit+0xdc>)
 80114ee:	441a      	add	r2, r3
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	3304      	adds	r3, #4
 80114f4:	4619      	mov	r1, r3
 80114f6:	4610      	mov	r0, r2
 80114f8:	f7fe fb67 	bl	800fbca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80114fc:	2301      	movs	r3, #1
 80114fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011500:	697b      	ldr	r3, [r7, #20]
	}
 8011502:	4618      	mov	r0, r3
 8011504:	3718      	adds	r7, #24
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	20003a64 	.word	0x20003a64
 8011510:	20003f40 	.word	0x20003f40
 8011514:	20003a68 	.word	0x20003a68

08011518 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
 8011524:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011526:	f000 fdbf 	bl	80120a8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801152a:	4b26      	ldr	r3, [pc, #152]	; (80115c4 <xTaskNotifyWait+0xac>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011532:	b2db      	uxtb	r3, r3
 8011534:	2b02      	cmp	r3, #2
 8011536:	d01a      	beq.n	801156e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011538:	4b22      	ldr	r3, [pc, #136]	; (80115c4 <xTaskNotifyWait+0xac>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801153e:	68fa      	ldr	r2, [r7, #12]
 8011540:	43d2      	mvns	r2, r2
 8011542:	400a      	ands	r2, r1
 8011544:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011546:	4b1f      	ldr	r3, [pc, #124]	; (80115c4 <xTaskNotifyWait+0xac>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2201      	movs	r2, #1
 801154c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00b      	beq.n	801156e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011556:	2101      	movs	r1, #1
 8011558:	6838      	ldr	r0, [r7, #0]
 801155a:	f000 f8f1 	bl	8011740 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801155e:	4b1a      	ldr	r3, [pc, #104]	; (80115c8 <xTaskNotifyWait+0xb0>)
 8011560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011564:	601a      	str	r2, [r3, #0]
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801156e:	f000 fdcd 	bl	801210c <vPortExitCritical>

		taskENTER_CRITICAL();
 8011572:	f000 fd99 	bl	80120a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d004      	beq.n	8011586 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801157c:	4b11      	ldr	r3, [pc, #68]	; (80115c4 <xTaskNotifyWait+0xac>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011586:	4b0f      	ldr	r3, [pc, #60]	; (80115c4 <xTaskNotifyWait+0xac>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801158e:	b2db      	uxtb	r3, r3
 8011590:	2b02      	cmp	r3, #2
 8011592:	d002      	beq.n	801159a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011594:	2300      	movs	r3, #0
 8011596:	617b      	str	r3, [r7, #20]
 8011598:	e008      	b.n	80115ac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801159a:	4b0a      	ldr	r3, [pc, #40]	; (80115c4 <xTaskNotifyWait+0xac>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80115a0:	68ba      	ldr	r2, [r7, #8]
 80115a2:	43d2      	mvns	r2, r2
 80115a4:	400a      	ands	r2, r1
 80115a6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80115a8:	2301      	movs	r3, #1
 80115aa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80115ac:	4b05      	ldr	r3, [pc, #20]	; (80115c4 <xTaskNotifyWait+0xac>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2200      	movs	r2, #0
 80115b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80115b6:	f000 fda9 	bl	801210c <vPortExitCritical>

		return xReturn;
 80115ba:	697b      	ldr	r3, [r7, #20]
	}
 80115bc:	4618      	mov	r0, r3
 80115be:	3718      	adds	r7, #24
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	20003a64 	.word	0x20003a64
 80115c8:	e000ed04 	.word	0xe000ed04

080115cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08a      	sub	sp, #40	; 0x28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	603b      	str	r3, [r7, #0]
 80115d8:	4613      	mov	r3, r2
 80115da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80115dc:	2301      	movs	r3, #1
 80115de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d10b      	bne.n	80115fe <xTaskGenericNotify+0x32>
 80115e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ea:	b672      	cpsid	i
 80115ec:	f383 8811 	msr	BASEPRI, r3
 80115f0:	f3bf 8f6f 	isb	sy
 80115f4:	f3bf 8f4f 	dsb	sy
 80115f8:	b662      	cpsie	i
 80115fa:	61bb      	str	r3, [r7, #24]
 80115fc:	e7fe      	b.n	80115fc <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011602:	f000 fd51 	bl	80120a8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d003      	beq.n	8011614 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801160c:	6a3b      	ldr	r3, [r7, #32]
 801160e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801161a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	2202      	movs	r2, #2
 8011620:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8011624:	79fb      	ldrb	r3, [r7, #7]
 8011626:	2b04      	cmp	r3, #4
 8011628:	d827      	bhi.n	801167a <xTaskGenericNotify+0xae>
 801162a:	a201      	add	r2, pc, #4	; (adr r2, 8011630 <xTaskGenericNotify+0x64>)
 801162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011630:	0801169d 	.word	0x0801169d
 8011634:	08011645 	.word	0x08011645
 8011638:	08011653 	.word	0x08011653
 801163c:	0801165f 	.word	0x0801165f
 8011640:	08011667 	.word	0x08011667
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011644:	6a3b      	ldr	r3, [r7, #32]
 8011646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	431a      	orrs	r2, r3
 801164c:	6a3b      	ldr	r3, [r7, #32]
 801164e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011650:	e027      	b.n	80116a2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011652:	6a3b      	ldr	r3, [r7, #32]
 8011654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011656:	1c5a      	adds	r2, r3, #1
 8011658:	6a3b      	ldr	r3, [r7, #32]
 801165a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801165c:	e021      	b.n	80116a2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801165e:	6a3b      	ldr	r3, [r7, #32]
 8011660:	68ba      	ldr	r2, [r7, #8]
 8011662:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011664:	e01d      	b.n	80116a2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011666:	7ffb      	ldrb	r3, [r7, #31]
 8011668:	2b02      	cmp	r3, #2
 801166a:	d003      	beq.n	8011674 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801166c:	6a3b      	ldr	r3, [r7, #32]
 801166e:	68ba      	ldr	r2, [r7, #8]
 8011670:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011672:	e016      	b.n	80116a2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8011674:	2300      	movs	r3, #0
 8011676:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011678:	e013      	b.n	80116a2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801167a:	6a3b      	ldr	r3, [r7, #32]
 801167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011682:	d00d      	beq.n	80116a0 <xTaskGenericNotify+0xd4>
 8011684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011688:	b672      	cpsid	i
 801168a:	f383 8811 	msr	BASEPRI, r3
 801168e:	f3bf 8f6f 	isb	sy
 8011692:	f3bf 8f4f 	dsb	sy
 8011696:	b662      	cpsie	i
 8011698:	617b      	str	r3, [r7, #20]
 801169a:	e7fe      	b.n	801169a <xTaskGenericNotify+0xce>
					break;
 801169c:	bf00      	nop
 801169e:	e000      	b.n	80116a2 <xTaskGenericNotify+0xd6>

					break;
 80116a0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80116a2:	7ffb      	ldrb	r3, [r7, #31]
 80116a4:	2b01      	cmp	r3, #1
 80116a6:	d13b      	bne.n	8011720 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116a8:	6a3b      	ldr	r3, [r7, #32]
 80116aa:	3304      	adds	r3, #4
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fe fae9 	bl	800fc84 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80116b2:	6a3b      	ldr	r3, [r7, #32]
 80116b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116b6:	4b1e      	ldr	r3, [pc, #120]	; (8011730 <xTaskGenericNotify+0x164>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d903      	bls.n	80116c6 <xTaskGenericNotify+0xfa>
 80116be:	6a3b      	ldr	r3, [r7, #32]
 80116c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116c2:	4a1b      	ldr	r2, [pc, #108]	; (8011730 <xTaskGenericNotify+0x164>)
 80116c4:	6013      	str	r3, [r2, #0]
 80116c6:	6a3b      	ldr	r3, [r7, #32]
 80116c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ca:	4613      	mov	r3, r2
 80116cc:	009b      	lsls	r3, r3, #2
 80116ce:	4413      	add	r3, r2
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	4a18      	ldr	r2, [pc, #96]	; (8011734 <xTaskGenericNotify+0x168>)
 80116d4:	441a      	add	r2, r3
 80116d6:	6a3b      	ldr	r3, [r7, #32]
 80116d8:	3304      	adds	r3, #4
 80116da:	4619      	mov	r1, r3
 80116dc:	4610      	mov	r0, r2
 80116de:	f7fe fa74 	bl	800fbca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80116e2:	6a3b      	ldr	r3, [r7, #32]
 80116e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d00b      	beq.n	8011702 <xTaskGenericNotify+0x136>
 80116ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ee:	b672      	cpsid	i
 80116f0:	f383 8811 	msr	BASEPRI, r3
 80116f4:	f3bf 8f6f 	isb	sy
 80116f8:	f3bf 8f4f 	dsb	sy
 80116fc:	b662      	cpsie	i
 80116fe:	613b      	str	r3, [r7, #16]
 8011700:	e7fe      	b.n	8011700 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011702:	6a3b      	ldr	r3, [r7, #32]
 8011704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011706:	4b0c      	ldr	r3, [pc, #48]	; (8011738 <xTaskGenericNotify+0x16c>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170c:	429a      	cmp	r2, r3
 801170e:	d907      	bls.n	8011720 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011710:	4b0a      	ldr	r3, [pc, #40]	; (801173c <xTaskGenericNotify+0x170>)
 8011712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011716:	601a      	str	r2, [r3, #0]
 8011718:	f3bf 8f4f 	dsb	sy
 801171c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011720:	f000 fcf4 	bl	801210c <vPortExitCritical>

		return xReturn;
 8011724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011726:	4618      	mov	r0, r3
 8011728:	3728      	adds	r7, #40	; 0x28
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	20003f40 	.word	0x20003f40
 8011734:	20003a68 	.word	0x20003a68
 8011738:	20003a64 	.word	0x20003a64
 801173c:	e000ed04 	.word	0xe000ed04

08011740 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801174a:	4b21      	ldr	r3, [pc, #132]	; (80117d0 <prvAddCurrentTaskToDelayedList+0x90>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011750:	4b20      	ldr	r3, [pc, #128]	; (80117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	3304      	adds	r3, #4
 8011756:	4618      	mov	r0, r3
 8011758:	f7fe fa94 	bl	800fc84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011762:	d10a      	bne.n	801177a <prvAddCurrentTaskToDelayedList+0x3a>
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d007      	beq.n	801177a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801176a:	4b1a      	ldr	r3, [pc, #104]	; (80117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	3304      	adds	r3, #4
 8011770:	4619      	mov	r1, r3
 8011772:	4819      	ldr	r0, [pc, #100]	; (80117d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011774:	f7fe fa29 	bl	800fbca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011778:	e026      	b.n	80117c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801177a:	68fa      	ldr	r2, [r7, #12]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	4413      	add	r3, r2
 8011780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011782:	4b14      	ldr	r3, [pc, #80]	; (80117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	68ba      	ldr	r2, [r7, #8]
 8011788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	429a      	cmp	r2, r3
 8011790:	d209      	bcs.n	80117a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011792:	4b12      	ldr	r3, [pc, #72]	; (80117dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	4b0f      	ldr	r3, [pc, #60]	; (80117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	3304      	adds	r3, #4
 801179c:	4619      	mov	r1, r3
 801179e:	4610      	mov	r0, r2
 80117a0:	f7fe fa37 	bl	800fc12 <vListInsert>
}
 80117a4:	e010      	b.n	80117c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117a6:	4b0e      	ldr	r3, [pc, #56]	; (80117e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80117a8:	681a      	ldr	r2, [r3, #0]
 80117aa:	4b0a      	ldr	r3, [pc, #40]	; (80117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	3304      	adds	r3, #4
 80117b0:	4619      	mov	r1, r3
 80117b2:	4610      	mov	r0, r2
 80117b4:	f7fe fa2d 	bl	800fc12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80117b8:	4b0a      	ldr	r3, [pc, #40]	; (80117e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	68ba      	ldr	r2, [r7, #8]
 80117be:	429a      	cmp	r2, r3
 80117c0:	d202      	bcs.n	80117c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80117c2:	4a08      	ldr	r2, [pc, #32]	; (80117e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	6013      	str	r3, [r2, #0]
}
 80117c8:	bf00      	nop
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	20003f3c 	.word	0x20003f3c
 80117d4:	20003a64 	.word	0x20003a64
 80117d8:	20003f24 	.word	0x20003f24
 80117dc:	20003ef4 	.word	0x20003ef4
 80117e0:	20003ef0 	.word	0x20003ef0
 80117e4:	20003f58 	.word	0x20003f58

080117e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b08a      	sub	sp, #40	; 0x28
 80117ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80117ee:	2300      	movs	r3, #0
 80117f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80117f2:	f000 fb0d 	bl	8011e10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80117f6:	4b1d      	ldr	r3, [pc, #116]	; (801186c <xTimerCreateTimerTask+0x84>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d021      	beq.n	8011842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80117fe:	2300      	movs	r3, #0
 8011800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011802:	2300      	movs	r3, #0
 8011804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011806:	1d3a      	adds	r2, r7, #4
 8011808:	f107 0108 	add.w	r1, r7, #8
 801180c:	f107 030c 	add.w	r3, r7, #12
 8011810:	4618      	mov	r0, r3
 8011812:	f7fe f993 	bl	800fb3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011816:	6879      	ldr	r1, [r7, #4]
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	68fa      	ldr	r2, [r7, #12]
 801181c:	9202      	str	r2, [sp, #8]
 801181e:	9301      	str	r3, [sp, #4]
 8011820:	2302      	movs	r3, #2
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	2300      	movs	r3, #0
 8011826:	460a      	mov	r2, r1
 8011828:	4911      	ldr	r1, [pc, #68]	; (8011870 <xTimerCreateTimerTask+0x88>)
 801182a:	4812      	ldr	r0, [pc, #72]	; (8011874 <xTimerCreateTimerTask+0x8c>)
 801182c:	f7fe ff4a 	bl	80106c4 <xTaskCreateStatic>
 8011830:	4602      	mov	r2, r0
 8011832:	4b11      	ldr	r3, [pc, #68]	; (8011878 <xTimerCreateTimerTask+0x90>)
 8011834:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011836:	4b10      	ldr	r3, [pc, #64]	; (8011878 <xTimerCreateTimerTask+0x90>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801183e:	2301      	movs	r3, #1
 8011840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d10b      	bne.n	8011860 <xTimerCreateTimerTask+0x78>
 8011848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801184c:	b672      	cpsid	i
 801184e:	f383 8811 	msr	BASEPRI, r3
 8011852:	f3bf 8f6f 	isb	sy
 8011856:	f3bf 8f4f 	dsb	sy
 801185a:	b662      	cpsie	i
 801185c:	613b      	str	r3, [r7, #16]
 801185e:	e7fe      	b.n	801185e <xTimerCreateTimerTask+0x76>
	return xReturn;
 8011860:	697b      	ldr	r3, [r7, #20]
}
 8011862:	4618      	mov	r0, r3
 8011864:	3718      	adds	r7, #24
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
 801186a:	bf00      	nop
 801186c:	20003f94 	.word	0x20003f94
 8011870:	08016ec8 	.word	0x08016ec8
 8011874:	080119b5 	.word	0x080119b5
 8011878:	20003f98 	.word	0x20003f98

0801187c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b08a      	sub	sp, #40	; 0x28
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	607a      	str	r2, [r7, #4]
 8011888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801188a:	2300      	movs	r3, #0
 801188c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d10b      	bne.n	80118ac <xTimerGenericCommand+0x30>
 8011894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011898:	b672      	cpsid	i
 801189a:	f383 8811 	msr	BASEPRI, r3
 801189e:	f3bf 8f6f 	isb	sy
 80118a2:	f3bf 8f4f 	dsb	sy
 80118a6:	b662      	cpsie	i
 80118a8:	623b      	str	r3, [r7, #32]
 80118aa:	e7fe      	b.n	80118aa <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80118ac:	4b19      	ldr	r3, [pc, #100]	; (8011914 <xTimerGenericCommand+0x98>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d02a      	beq.n	801190a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	2b05      	cmp	r3, #5
 80118c4:	dc18      	bgt.n	80118f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80118c6:	f7ff fd99 	bl	80113fc <xTaskGetSchedulerState>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b02      	cmp	r3, #2
 80118ce:	d109      	bne.n	80118e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80118d0:	4b10      	ldr	r3, [pc, #64]	; (8011914 <xTimerGenericCommand+0x98>)
 80118d2:	6818      	ldr	r0, [r3, #0]
 80118d4:	f107 0110 	add.w	r1, r7, #16
 80118d8:	2300      	movs	r3, #0
 80118da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118dc:	f7fe fb06 	bl	800feec <xQueueGenericSend>
 80118e0:	6278      	str	r0, [r7, #36]	; 0x24
 80118e2:	e012      	b.n	801190a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80118e4:	4b0b      	ldr	r3, [pc, #44]	; (8011914 <xTimerGenericCommand+0x98>)
 80118e6:	6818      	ldr	r0, [r3, #0]
 80118e8:	f107 0110 	add.w	r1, r7, #16
 80118ec:	2300      	movs	r3, #0
 80118ee:	2200      	movs	r2, #0
 80118f0:	f7fe fafc 	bl	800feec <xQueueGenericSend>
 80118f4:	6278      	str	r0, [r7, #36]	; 0x24
 80118f6:	e008      	b.n	801190a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80118f8:	4b06      	ldr	r3, [pc, #24]	; (8011914 <xTimerGenericCommand+0x98>)
 80118fa:	6818      	ldr	r0, [r3, #0]
 80118fc:	f107 0110 	add.w	r1, r7, #16
 8011900:	2300      	movs	r3, #0
 8011902:	683a      	ldr	r2, [r7, #0]
 8011904:	f7fe fbf4 	bl	80100f0 <xQueueGenericSendFromISR>
 8011908:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801190c:	4618      	mov	r0, r3
 801190e:	3728      	adds	r7, #40	; 0x28
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	20003f94 	.word	0x20003f94

08011918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b088      	sub	sp, #32
 801191c:	af02      	add	r7, sp, #8
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011922:	4b23      	ldr	r3, [pc, #140]	; (80119b0 <prvProcessExpiredTimer+0x98>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	3304      	adds	r3, #4
 8011930:	4618      	mov	r0, r3
 8011932:	f7fe f9a7 	bl	800fc84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801193c:	f003 0304 	and.w	r3, r3, #4
 8011940:	2b00      	cmp	r3, #0
 8011942:	d023      	beq.n	801198c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	699a      	ldr	r2, [r3, #24]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	18d1      	adds	r1, r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	683a      	ldr	r2, [r7, #0]
 8011950:	6978      	ldr	r0, [r7, #20]
 8011952:	f000 f8d3 	bl	8011afc <prvInsertTimerInActiveList>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	d020      	beq.n	801199e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801195c:	2300      	movs	r3, #0
 801195e:	9300      	str	r3, [sp, #0]
 8011960:	2300      	movs	r3, #0
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	2100      	movs	r1, #0
 8011966:	6978      	ldr	r0, [r7, #20]
 8011968:	f7ff ff88 	bl	801187c <xTimerGenericCommand>
 801196c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d114      	bne.n	801199e <prvProcessExpiredTimer+0x86>
 8011974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011978:	b672      	cpsid	i
 801197a:	f383 8811 	msr	BASEPRI, r3
 801197e:	f3bf 8f6f 	isb	sy
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	b662      	cpsie	i
 8011988:	60fb      	str	r3, [r7, #12]
 801198a:	e7fe      	b.n	801198a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011992:	f023 0301 	bic.w	r3, r3, #1
 8011996:	b2da      	uxtb	r2, r3
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	6a1b      	ldr	r3, [r3, #32]
 80119a2:	6978      	ldr	r0, [r7, #20]
 80119a4:	4798      	blx	r3
}
 80119a6:	bf00      	nop
 80119a8:	3718      	adds	r7, #24
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	20003f8c 	.word	0x20003f8c

080119b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80119bc:	f107 0308 	add.w	r3, r7, #8
 80119c0:	4618      	mov	r0, r3
 80119c2:	f000 f857 	bl	8011a74 <prvGetNextExpireTime>
 80119c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	4619      	mov	r1, r3
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f000 f803 	bl	80119d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80119d2:	f000 f8d5 	bl	8011b80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80119d6:	e7f1      	b.n	80119bc <prvTimerTask+0x8>

080119d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b084      	sub	sp, #16
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80119e2:	f7ff f927 	bl	8010c34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80119e6:	f107 0308 	add.w	r3, r7, #8
 80119ea:	4618      	mov	r0, r3
 80119ec:	f000 f866 	bl	8011abc <prvSampleTimeNow>
 80119f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d130      	bne.n	8011a5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d10a      	bne.n	8011a14 <prvProcessTimerOrBlockTask+0x3c>
 80119fe:	687a      	ldr	r2, [r7, #4]
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	429a      	cmp	r2, r3
 8011a04:	d806      	bhi.n	8011a14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011a06:	f7ff f923 	bl	8010c50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011a0a:	68f9      	ldr	r1, [r7, #12]
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f7ff ff83 	bl	8011918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011a12:	e024      	b.n	8011a5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d008      	beq.n	8011a2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011a1a:	4b13      	ldr	r3, [pc, #76]	; (8011a68 <prvProcessTimerOrBlockTask+0x90>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d101      	bne.n	8011a28 <prvProcessTimerOrBlockTask+0x50>
 8011a24:	2301      	movs	r3, #1
 8011a26:	e000      	b.n	8011a2a <prvProcessTimerOrBlockTask+0x52>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011a2c:	4b0f      	ldr	r3, [pc, #60]	; (8011a6c <prvProcessTimerOrBlockTask+0x94>)
 8011a2e:	6818      	ldr	r0, [r3, #0]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	683a      	ldr	r2, [r7, #0]
 8011a38:	4619      	mov	r1, r3
 8011a3a:	f7fe fe0f 	bl	801065c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011a3e:	f7ff f907 	bl	8010c50 <xTaskResumeAll>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d10a      	bne.n	8011a5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011a48:	4b09      	ldr	r3, [pc, #36]	; (8011a70 <prvProcessTimerOrBlockTask+0x98>)
 8011a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a4e:	601a      	str	r2, [r3, #0]
 8011a50:	f3bf 8f4f 	dsb	sy
 8011a54:	f3bf 8f6f 	isb	sy
}
 8011a58:	e001      	b.n	8011a5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011a5a:	f7ff f8f9 	bl	8010c50 <xTaskResumeAll>
}
 8011a5e:	bf00      	nop
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	20003f90 	.word	0x20003f90
 8011a6c:	20003f94 	.word	0x20003f94
 8011a70:	e000ed04 	.word	0xe000ed04

08011a74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011a74:	b480      	push	{r7}
 8011a76:	b085      	sub	sp, #20
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011a7c:	4b0e      	ldr	r3, [pc, #56]	; (8011ab8 <prvGetNextExpireTime+0x44>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d101      	bne.n	8011a8a <prvGetNextExpireTime+0x16>
 8011a86:	2201      	movs	r2, #1
 8011a88:	e000      	b.n	8011a8c <prvGetNextExpireTime+0x18>
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d105      	bne.n	8011aa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011a98:	4b07      	ldr	r3, [pc, #28]	; (8011ab8 <prvGetNextExpireTime+0x44>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	60fb      	str	r3, [r7, #12]
 8011aa2:	e001      	b.n	8011aa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3714      	adds	r7, #20
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr
 8011ab6:	bf00      	nop
 8011ab8:	20003f8c 	.word	0x20003f8c

08011abc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011ac4:	f7ff f962 	bl	8010d8c <xTaskGetTickCount>
 8011ac8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011aca:	4b0b      	ldr	r3, [pc, #44]	; (8011af8 <prvSampleTimeNow+0x3c>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d205      	bcs.n	8011ae0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011ad4:	f000 f936 	bl	8011d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2201      	movs	r2, #1
 8011adc:	601a      	str	r2, [r3, #0]
 8011ade:	e002      	b.n	8011ae6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011ae6:	4a04      	ldr	r2, [pc, #16]	; (8011af8 <prvSampleTimeNow+0x3c>)
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011aec:	68fb      	ldr	r3, [r7, #12]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3710      	adds	r7, #16
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	20003f9c 	.word	0x20003f9c

08011afc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b086      	sub	sp, #24
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	60f8      	str	r0, [r7, #12]
 8011b04:	60b9      	str	r1, [r7, #8]
 8011b06:	607a      	str	r2, [r7, #4]
 8011b08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	68ba      	ldr	r2, [r7, #8]
 8011b12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	68fa      	ldr	r2, [r7, #12]
 8011b18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011b1a:	68ba      	ldr	r2, [r7, #8]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d812      	bhi.n	8011b48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	1ad2      	subs	r2, r2, r3
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	699b      	ldr	r3, [r3, #24]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d302      	bcc.n	8011b36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011b30:	2301      	movs	r3, #1
 8011b32:	617b      	str	r3, [r7, #20]
 8011b34:	e01b      	b.n	8011b6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011b36:	4b10      	ldr	r3, [pc, #64]	; (8011b78 <prvInsertTimerInActiveList+0x7c>)
 8011b38:	681a      	ldr	r2, [r3, #0]
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	3304      	adds	r3, #4
 8011b3e:	4619      	mov	r1, r3
 8011b40:	4610      	mov	r0, r2
 8011b42:	f7fe f866 	bl	800fc12 <vListInsert>
 8011b46:	e012      	b.n	8011b6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d206      	bcs.n	8011b5e <prvInsertTimerInActiveList+0x62>
 8011b50:	68ba      	ldr	r2, [r7, #8]
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d302      	bcc.n	8011b5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011b58:	2301      	movs	r3, #1
 8011b5a:	617b      	str	r3, [r7, #20]
 8011b5c:	e007      	b.n	8011b6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011b5e:	4b07      	ldr	r3, [pc, #28]	; (8011b7c <prvInsertTimerInActiveList+0x80>)
 8011b60:	681a      	ldr	r2, [r3, #0]
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	3304      	adds	r3, #4
 8011b66:	4619      	mov	r1, r3
 8011b68:	4610      	mov	r0, r2
 8011b6a:	f7fe f852 	bl	800fc12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011b6e:	697b      	ldr	r3, [r7, #20]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3718      	adds	r7, #24
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	20003f90 	.word	0x20003f90
 8011b7c:	20003f8c 	.word	0x20003f8c

08011b80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b08e      	sub	sp, #56	; 0x38
 8011b84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011b86:	e0cc      	b.n	8011d22 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	da19      	bge.n	8011bc2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011b8e:	1d3b      	adds	r3, r7, #4
 8011b90:	3304      	adds	r3, #4
 8011b92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d10b      	bne.n	8011bb2 <prvProcessReceivedCommands+0x32>
 8011b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9e:	b672      	cpsid	i
 8011ba0:	f383 8811 	msr	BASEPRI, r3
 8011ba4:	f3bf 8f6f 	isb	sy
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	b662      	cpsie	i
 8011bae:	61fb      	str	r3, [r7, #28]
 8011bb0:	e7fe      	b.n	8011bb0 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bb8:	6850      	ldr	r0, [r2, #4]
 8011bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bbc:	6892      	ldr	r2, [r2, #8]
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f2c0 80ab 	blt.w	8011d20 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd0:	695b      	ldr	r3, [r3, #20]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d004      	beq.n	8011be0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd8:	3304      	adds	r3, #4
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fe f852 	bl	800fc84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011be0:	463b      	mov	r3, r7
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff ff6a 	bl	8011abc <prvSampleTimeNow>
 8011be8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2b09      	cmp	r3, #9
 8011bee:	f200 8098 	bhi.w	8011d22 <prvProcessReceivedCommands+0x1a2>
 8011bf2:	a201      	add	r2, pc, #4	; (adr r2, 8011bf8 <prvProcessReceivedCommands+0x78>)
 8011bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf8:	08011c21 	.word	0x08011c21
 8011bfc:	08011c21 	.word	0x08011c21
 8011c00:	08011c21 	.word	0x08011c21
 8011c04:	08011c97 	.word	0x08011c97
 8011c08:	08011cab 	.word	0x08011cab
 8011c0c:	08011cf7 	.word	0x08011cf7
 8011c10:	08011c21 	.word	0x08011c21
 8011c14:	08011c21 	.word	0x08011c21
 8011c18:	08011c97 	.word	0x08011c97
 8011c1c:	08011cab 	.word	0x08011cab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c26:	f043 0301 	orr.w	r3, r3, #1
 8011c2a:	b2da      	uxtb	r2, r3
 8011c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011c32:	68ba      	ldr	r2, [r7, #8]
 8011c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c36:	699b      	ldr	r3, [r3, #24]
 8011c38:	18d1      	adds	r1, r2, r3
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c40:	f7ff ff5c 	bl	8011afc <prvInsertTimerInActiveList>
 8011c44:	4603      	mov	r3, r0
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d06b      	beq.n	8011d22 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c4c:	6a1b      	ldr	r3, [r3, #32]
 8011c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c58:	f003 0304 	and.w	r3, r3, #4
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d060      	beq.n	8011d22 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011c60:	68ba      	ldr	r2, [r7, #8]
 8011c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c64:	699b      	ldr	r3, [r3, #24]
 8011c66:	441a      	add	r2, r3
 8011c68:	2300      	movs	r3, #0
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	2100      	movs	r1, #0
 8011c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c72:	f7ff fe03 	bl	801187c <xTimerGenericCommand>
 8011c76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011c78:	6a3b      	ldr	r3, [r7, #32]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d151      	bne.n	8011d22 <prvProcessReceivedCommands+0x1a2>
 8011c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c82:	b672      	cpsid	i
 8011c84:	f383 8811 	msr	BASEPRI, r3
 8011c88:	f3bf 8f6f 	isb	sy
 8011c8c:	f3bf 8f4f 	dsb	sy
 8011c90:	b662      	cpsie	i
 8011c92:	61bb      	str	r3, [r7, #24]
 8011c94:	e7fe      	b.n	8011c94 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c9c:	f023 0301 	bic.w	r3, r3, #1
 8011ca0:	b2da      	uxtb	r2, r3
 8011ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011ca8:	e03b      	b.n	8011d22 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cb0:	f043 0301 	orr.w	r3, r3, #1
 8011cb4:	b2da      	uxtb	r2, r3
 8011cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc4:	699b      	ldr	r3, [r3, #24]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d10b      	bne.n	8011ce2 <prvProcessReceivedCommands+0x162>
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	b672      	cpsid	i
 8011cd0:	f383 8811 	msr	BASEPRI, r3
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	b662      	cpsie	i
 8011cde:	617b      	str	r3, [r7, #20]
 8011ce0:	e7fe      	b.n	8011ce0 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce4:	699a      	ldr	r2, [r3, #24]
 8011ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce8:	18d1      	adds	r1, r2, r3
 8011cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cf0:	f7ff ff04 	bl	8011afc <prvInsertTimerInActiveList>
					break;
 8011cf4:	e015      	b.n	8011d22 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cfc:	f003 0302 	and.w	r3, r3, #2
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d103      	bne.n	8011d0c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d06:	f000 fbb9 	bl	801247c <vPortFree>
 8011d0a:	e00a      	b.n	8011d22 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d12:	f023 0301 	bic.w	r3, r3, #1
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011d1e:	e000      	b.n	8011d22 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011d20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011d22:	4b07      	ldr	r3, [pc, #28]	; (8011d40 <prvProcessReceivedCommands+0x1c0>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	1d39      	adds	r1, r7, #4
 8011d28:	2200      	movs	r2, #0
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7fe fa7c 	bl	8010228 <xQueueReceive>
 8011d30:	4603      	mov	r3, r0
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f47f af28 	bne.w	8011b88 <prvProcessReceivedCommands+0x8>
	}
}
 8011d38:	bf00      	nop
 8011d3a:	3730      	adds	r7, #48	; 0x30
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	20003f94 	.word	0x20003f94

08011d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b088      	sub	sp, #32
 8011d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011d4a:	e049      	b.n	8011de0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d4c:	4b2e      	ldr	r3, [pc, #184]	; (8011e08 <prvSwitchTimerLists+0xc4>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d56:	4b2c      	ldr	r3, [pc, #176]	; (8011e08 <prvSwitchTimerLists+0xc4>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	3304      	adds	r3, #4
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7fd ff8d 	bl	800fc84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	6a1b      	ldr	r3, [r3, #32]
 8011d6e:	68f8      	ldr	r0, [r7, #12]
 8011d70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d78:	f003 0304 	and.w	r3, r3, #4
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d02f      	beq.n	8011de0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	693a      	ldr	r2, [r7, #16]
 8011d86:	4413      	add	r3, r2
 8011d88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011d8a:	68ba      	ldr	r2, [r7, #8]
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d90e      	bls.n	8011db0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	68ba      	ldr	r2, [r7, #8]
 8011d96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	68fa      	ldr	r2, [r7, #12]
 8011d9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011d9e:	4b1a      	ldr	r3, [pc, #104]	; (8011e08 <prvSwitchTimerLists+0xc4>)
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	3304      	adds	r3, #4
 8011da6:	4619      	mov	r1, r3
 8011da8:	4610      	mov	r0, r2
 8011daa:	f7fd ff32 	bl	800fc12 <vListInsert>
 8011dae:	e017      	b.n	8011de0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011db0:	2300      	movs	r3, #0
 8011db2:	9300      	str	r3, [sp, #0]
 8011db4:	2300      	movs	r3, #0
 8011db6:	693a      	ldr	r2, [r7, #16]
 8011db8:	2100      	movs	r1, #0
 8011dba:	68f8      	ldr	r0, [r7, #12]
 8011dbc:	f7ff fd5e 	bl	801187c <xTimerGenericCommand>
 8011dc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d10b      	bne.n	8011de0 <prvSwitchTimerLists+0x9c>
 8011dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dcc:	b672      	cpsid	i
 8011dce:	f383 8811 	msr	BASEPRI, r3
 8011dd2:	f3bf 8f6f 	isb	sy
 8011dd6:	f3bf 8f4f 	dsb	sy
 8011dda:	b662      	cpsie	i
 8011ddc:	603b      	str	r3, [r7, #0]
 8011dde:	e7fe      	b.n	8011dde <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011de0:	4b09      	ldr	r3, [pc, #36]	; (8011e08 <prvSwitchTimerLists+0xc4>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d1b0      	bne.n	8011d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011dea:	4b07      	ldr	r3, [pc, #28]	; (8011e08 <prvSwitchTimerLists+0xc4>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011df0:	4b06      	ldr	r3, [pc, #24]	; (8011e0c <prvSwitchTimerLists+0xc8>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	4a04      	ldr	r2, [pc, #16]	; (8011e08 <prvSwitchTimerLists+0xc4>)
 8011df6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011df8:	4a04      	ldr	r2, [pc, #16]	; (8011e0c <prvSwitchTimerLists+0xc8>)
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	6013      	str	r3, [r2, #0]
}
 8011dfe:	bf00      	nop
 8011e00:	3718      	adds	r7, #24
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	20003f8c 	.word	0x20003f8c
 8011e0c:	20003f90 	.word	0x20003f90

08011e10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011e16:	f000 f947 	bl	80120a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011e1a:	4b15      	ldr	r3, [pc, #84]	; (8011e70 <prvCheckForValidListAndQueue+0x60>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d120      	bne.n	8011e64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011e22:	4814      	ldr	r0, [pc, #80]	; (8011e74 <prvCheckForValidListAndQueue+0x64>)
 8011e24:	f7fd fea4 	bl	800fb70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011e28:	4813      	ldr	r0, [pc, #76]	; (8011e78 <prvCheckForValidListAndQueue+0x68>)
 8011e2a:	f7fd fea1 	bl	800fb70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011e2e:	4b13      	ldr	r3, [pc, #76]	; (8011e7c <prvCheckForValidListAndQueue+0x6c>)
 8011e30:	4a10      	ldr	r2, [pc, #64]	; (8011e74 <prvCheckForValidListAndQueue+0x64>)
 8011e32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011e34:	4b12      	ldr	r3, [pc, #72]	; (8011e80 <prvCheckForValidListAndQueue+0x70>)
 8011e36:	4a10      	ldr	r2, [pc, #64]	; (8011e78 <prvCheckForValidListAndQueue+0x68>)
 8011e38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	9300      	str	r3, [sp, #0]
 8011e3e:	4b11      	ldr	r3, [pc, #68]	; (8011e84 <prvCheckForValidListAndQueue+0x74>)
 8011e40:	4a11      	ldr	r2, [pc, #68]	; (8011e88 <prvCheckForValidListAndQueue+0x78>)
 8011e42:	2110      	movs	r1, #16
 8011e44:	200a      	movs	r0, #10
 8011e46:	f7fd ffb1 	bl	800fdac <xQueueGenericCreateStatic>
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	4b08      	ldr	r3, [pc, #32]	; (8011e70 <prvCheckForValidListAndQueue+0x60>)
 8011e4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011e50:	4b07      	ldr	r3, [pc, #28]	; (8011e70 <prvCheckForValidListAndQueue+0x60>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d005      	beq.n	8011e64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011e58:	4b05      	ldr	r3, [pc, #20]	; (8011e70 <prvCheckForValidListAndQueue+0x60>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	490b      	ldr	r1, [pc, #44]	; (8011e8c <prvCheckForValidListAndQueue+0x7c>)
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7fe fbd4 	bl	801060c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011e64:	f000 f952 	bl	801210c <vPortExitCritical>
}
 8011e68:	bf00      	nop
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	20003f94 	.word	0x20003f94
 8011e74:	20003f64 	.word	0x20003f64
 8011e78:	20003f78 	.word	0x20003f78
 8011e7c:	20003f8c 	.word	0x20003f8c
 8011e80:	20003f90 	.word	0x20003f90
 8011e84:	20004040 	.word	0x20004040
 8011e88:	20003fa0 	.word	0x20003fa0
 8011e8c:	08016ed0 	.word	0x08016ed0

08011e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011e90:	b480      	push	{r7}
 8011e92:	b085      	sub	sp, #20
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	60f8      	str	r0, [r7, #12]
 8011e98:	60b9      	str	r1, [r7, #8]
 8011e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	3b04      	subs	r3, #4
 8011ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	3b04      	subs	r3, #4
 8011eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	f023 0201 	bic.w	r2, r3, #1
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	3b04      	subs	r3, #4
 8011ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011ec0:	4a0c      	ldr	r2, [pc, #48]	; (8011ef4 <pxPortInitialiseStack+0x64>)
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	3b14      	subs	r3, #20
 8011eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011ecc:	687a      	ldr	r2, [r7, #4]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	3b04      	subs	r3, #4
 8011ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f06f 0202 	mvn.w	r2, #2
 8011ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	3b20      	subs	r3, #32
 8011ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3714      	adds	r7, #20
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr
 8011ef4:	08011ef9 	.word	0x08011ef9

08011ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011efe:	2300      	movs	r3, #0
 8011f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f02:	4b13      	ldr	r3, [pc, #76]	; (8011f50 <prvTaskExitError+0x58>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f0a:	d00b      	beq.n	8011f24 <prvTaskExitError+0x2c>
 8011f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f10:	b672      	cpsid	i
 8011f12:	f383 8811 	msr	BASEPRI, r3
 8011f16:	f3bf 8f6f 	isb	sy
 8011f1a:	f3bf 8f4f 	dsb	sy
 8011f1e:	b662      	cpsie	i
 8011f20:	60fb      	str	r3, [r7, #12]
 8011f22:	e7fe      	b.n	8011f22 <prvTaskExitError+0x2a>
 8011f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f28:	b672      	cpsid	i
 8011f2a:	f383 8811 	msr	BASEPRI, r3
 8011f2e:	f3bf 8f6f 	isb	sy
 8011f32:	f3bf 8f4f 	dsb	sy
 8011f36:	b662      	cpsie	i
 8011f38:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011f3a:	bf00      	nop
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d0fc      	beq.n	8011f3c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011f42:	bf00      	nop
 8011f44:	3714      	adds	r7, #20
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr
 8011f4e:	bf00      	nop
 8011f50:	200001a4 	.word	0x200001a4
	...

08011f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011f60:	4b07      	ldr	r3, [pc, #28]	; (8011f80 <pxCurrentTCBConst2>)
 8011f62:	6819      	ldr	r1, [r3, #0]
 8011f64:	6808      	ldr	r0, [r1, #0]
 8011f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6a:	f380 8809 	msr	PSP, r0
 8011f6e:	f3bf 8f6f 	isb	sy
 8011f72:	f04f 0000 	mov.w	r0, #0
 8011f76:	f380 8811 	msr	BASEPRI, r0
 8011f7a:	4770      	bx	lr
 8011f7c:	f3af 8000 	nop.w

08011f80 <pxCurrentTCBConst2>:
 8011f80:	20003a64 	.word	0x20003a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011f84:	bf00      	nop
 8011f86:	bf00      	nop

08011f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011f88:	4808      	ldr	r0, [pc, #32]	; (8011fac <prvPortStartFirstTask+0x24>)
 8011f8a:	6800      	ldr	r0, [r0, #0]
 8011f8c:	6800      	ldr	r0, [r0, #0]
 8011f8e:	f380 8808 	msr	MSP, r0
 8011f92:	f04f 0000 	mov.w	r0, #0
 8011f96:	f380 8814 	msr	CONTROL, r0
 8011f9a:	b662      	cpsie	i
 8011f9c:	b661      	cpsie	f
 8011f9e:	f3bf 8f4f 	dsb	sy
 8011fa2:	f3bf 8f6f 	isb	sy
 8011fa6:	df00      	svc	0
 8011fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011faa:	bf00      	nop
 8011fac:	e000ed08 	.word	0xe000ed08

08011fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011fb6:	4b36      	ldr	r3, [pc, #216]	; (8012090 <xPortStartScheduler+0xe0>)
 8011fb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	22ff      	movs	r2, #255	; 0xff
 8011fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011fd0:	78fb      	ldrb	r3, [r7, #3]
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	4b2e      	ldr	r3, [pc, #184]	; (8012094 <xPortStartScheduler+0xe4>)
 8011fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011fde:	4b2e      	ldr	r3, [pc, #184]	; (8012098 <xPortStartScheduler+0xe8>)
 8011fe0:	2207      	movs	r2, #7
 8011fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011fe4:	e009      	b.n	8011ffa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011fe6:	4b2c      	ldr	r3, [pc, #176]	; (8012098 <xPortStartScheduler+0xe8>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	3b01      	subs	r3, #1
 8011fec:	4a2a      	ldr	r2, [pc, #168]	; (8012098 <xPortStartScheduler+0xe8>)
 8011fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011ff0:	78fb      	ldrb	r3, [r7, #3]
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	005b      	lsls	r3, r3, #1
 8011ff6:	b2db      	uxtb	r3, r3
 8011ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011ffa:	78fb      	ldrb	r3, [r7, #3]
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012002:	2b80      	cmp	r3, #128	; 0x80
 8012004:	d0ef      	beq.n	8011fe6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012006:	4b24      	ldr	r3, [pc, #144]	; (8012098 <xPortStartScheduler+0xe8>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f1c3 0307 	rsb	r3, r3, #7
 801200e:	2b04      	cmp	r3, #4
 8012010:	d00b      	beq.n	801202a <xPortStartScheduler+0x7a>
 8012012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012016:	b672      	cpsid	i
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	b662      	cpsie	i
 8012026:	60bb      	str	r3, [r7, #8]
 8012028:	e7fe      	b.n	8012028 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801202a:	4b1b      	ldr	r3, [pc, #108]	; (8012098 <xPortStartScheduler+0xe8>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	021b      	lsls	r3, r3, #8
 8012030:	4a19      	ldr	r2, [pc, #100]	; (8012098 <xPortStartScheduler+0xe8>)
 8012032:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012034:	4b18      	ldr	r3, [pc, #96]	; (8012098 <xPortStartScheduler+0xe8>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801203c:	4a16      	ldr	r2, [pc, #88]	; (8012098 <xPortStartScheduler+0xe8>)
 801203e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	b2da      	uxtb	r2, r3
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012048:	4b14      	ldr	r3, [pc, #80]	; (801209c <xPortStartScheduler+0xec>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4a13      	ldr	r2, [pc, #76]	; (801209c <xPortStartScheduler+0xec>)
 801204e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012052:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012054:	4b11      	ldr	r3, [pc, #68]	; (801209c <xPortStartScheduler+0xec>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4a10      	ldr	r2, [pc, #64]	; (801209c <xPortStartScheduler+0xec>)
 801205a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801205e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012060:	f000 f8d4 	bl	801220c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012064:	4b0e      	ldr	r3, [pc, #56]	; (80120a0 <xPortStartScheduler+0xf0>)
 8012066:	2200      	movs	r2, #0
 8012068:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801206a:	f000 f8f3 	bl	8012254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801206e:	4b0d      	ldr	r3, [pc, #52]	; (80120a4 <xPortStartScheduler+0xf4>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	4a0c      	ldr	r2, [pc, #48]	; (80120a4 <xPortStartScheduler+0xf4>)
 8012074:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012078:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801207a:	f7ff ff85 	bl	8011f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801207e:	f7fe ff4f 	bl	8010f20 <vTaskSwitchContext>
	prvTaskExitError();
 8012082:	f7ff ff39 	bl	8011ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012086:	2300      	movs	r3, #0
}
 8012088:	4618      	mov	r0, r3
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	e000e400 	.word	0xe000e400
 8012094:	20004090 	.word	0x20004090
 8012098:	20004094 	.word	0x20004094
 801209c:	e000ed20 	.word	0xe000ed20
 80120a0:	200001a4 	.word	0x200001a4
 80120a4:	e000ef34 	.word	0xe000ef34

080120a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b2:	b672      	cpsid	i
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	b662      	cpsie	i
 80120c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80120c4:	4b0f      	ldr	r3, [pc, #60]	; (8012104 <vPortEnterCritical+0x5c>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	3301      	adds	r3, #1
 80120ca:	4a0e      	ldr	r2, [pc, #56]	; (8012104 <vPortEnterCritical+0x5c>)
 80120cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80120ce:	4b0d      	ldr	r3, [pc, #52]	; (8012104 <vPortEnterCritical+0x5c>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d110      	bne.n	80120f8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80120d6:	4b0c      	ldr	r3, [pc, #48]	; (8012108 <vPortEnterCritical+0x60>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d00b      	beq.n	80120f8 <vPortEnterCritical+0x50>
 80120e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e4:	b672      	cpsid	i
 80120e6:	f383 8811 	msr	BASEPRI, r3
 80120ea:	f3bf 8f6f 	isb	sy
 80120ee:	f3bf 8f4f 	dsb	sy
 80120f2:	b662      	cpsie	i
 80120f4:	603b      	str	r3, [r7, #0]
 80120f6:	e7fe      	b.n	80120f6 <vPortEnterCritical+0x4e>
	}
}
 80120f8:	bf00      	nop
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	200001a4 	.word	0x200001a4
 8012108:	e000ed04 	.word	0xe000ed04

0801210c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012112:	4b12      	ldr	r3, [pc, #72]	; (801215c <vPortExitCritical+0x50>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d10b      	bne.n	8012132 <vPortExitCritical+0x26>
 801211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211e:	b672      	cpsid	i
 8012120:	f383 8811 	msr	BASEPRI, r3
 8012124:	f3bf 8f6f 	isb	sy
 8012128:	f3bf 8f4f 	dsb	sy
 801212c:	b662      	cpsie	i
 801212e:	607b      	str	r3, [r7, #4]
 8012130:	e7fe      	b.n	8012130 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012132:	4b0a      	ldr	r3, [pc, #40]	; (801215c <vPortExitCritical+0x50>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	3b01      	subs	r3, #1
 8012138:	4a08      	ldr	r2, [pc, #32]	; (801215c <vPortExitCritical+0x50>)
 801213a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801213c:	4b07      	ldr	r3, [pc, #28]	; (801215c <vPortExitCritical+0x50>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d104      	bne.n	801214e <vPortExitCritical+0x42>
 8012144:	2300      	movs	r3, #0
 8012146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801214e:	bf00      	nop
 8012150:	370c      	adds	r7, #12
 8012152:	46bd      	mov	sp, r7
 8012154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012158:	4770      	bx	lr
 801215a:	bf00      	nop
 801215c:	200001a4 	.word	0x200001a4

08012160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012160:	f3ef 8009 	mrs	r0, PSP
 8012164:	f3bf 8f6f 	isb	sy
 8012168:	4b15      	ldr	r3, [pc, #84]	; (80121c0 <pxCurrentTCBConst>)
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	f01e 0f10 	tst.w	lr, #16
 8012170:	bf08      	it	eq
 8012172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801217a:	6010      	str	r0, [r2, #0]
 801217c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012184:	b672      	cpsid	i
 8012186:	f380 8811 	msr	BASEPRI, r0
 801218a:	f3bf 8f4f 	dsb	sy
 801218e:	f3bf 8f6f 	isb	sy
 8012192:	b662      	cpsie	i
 8012194:	f7fe fec4 	bl	8010f20 <vTaskSwitchContext>
 8012198:	f04f 0000 	mov.w	r0, #0
 801219c:	f380 8811 	msr	BASEPRI, r0
 80121a0:	bc09      	pop	{r0, r3}
 80121a2:	6819      	ldr	r1, [r3, #0]
 80121a4:	6808      	ldr	r0, [r1, #0]
 80121a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121aa:	f01e 0f10 	tst.w	lr, #16
 80121ae:	bf08      	it	eq
 80121b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80121b4:	f380 8809 	msr	PSP, r0
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	4770      	bx	lr
 80121be:	bf00      	nop

080121c0 <pxCurrentTCBConst>:
 80121c0:	20003a64 	.word	0x20003a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80121c4:	bf00      	nop
 80121c6:	bf00      	nop

080121c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
	__asm volatile
 80121ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d2:	b672      	cpsid	i
 80121d4:	f383 8811 	msr	BASEPRI, r3
 80121d8:	f3bf 8f6f 	isb	sy
 80121dc:	f3bf 8f4f 	dsb	sy
 80121e0:	b662      	cpsie	i
 80121e2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80121e4:	f7fe fde2 	bl	8010dac <xTaskIncrementTick>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d003      	beq.n	80121f6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80121ee:	4b06      	ldr	r3, [pc, #24]	; (8012208 <SysTick_Handler+0x40>)
 80121f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121f4:	601a      	str	r2, [r3, #0]
 80121f6:	2300      	movs	r3, #0
 80121f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012200:	bf00      	nop
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	e000ed04 	.word	0xe000ed04

0801220c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801220c:	b480      	push	{r7}
 801220e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012210:	4b0b      	ldr	r3, [pc, #44]	; (8012240 <vPortSetupTimerInterrupt+0x34>)
 8012212:	2200      	movs	r2, #0
 8012214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012216:	4b0b      	ldr	r3, [pc, #44]	; (8012244 <vPortSetupTimerInterrupt+0x38>)
 8012218:	2200      	movs	r2, #0
 801221a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801221c:	4b0a      	ldr	r3, [pc, #40]	; (8012248 <vPortSetupTimerInterrupt+0x3c>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4a0a      	ldr	r2, [pc, #40]	; (801224c <vPortSetupTimerInterrupt+0x40>)
 8012222:	fba2 2303 	umull	r2, r3, r2, r3
 8012226:	099b      	lsrs	r3, r3, #6
 8012228:	4a09      	ldr	r2, [pc, #36]	; (8012250 <vPortSetupTimerInterrupt+0x44>)
 801222a:	3b01      	subs	r3, #1
 801222c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801222e:	4b04      	ldr	r3, [pc, #16]	; (8012240 <vPortSetupTimerInterrupt+0x34>)
 8012230:	2207      	movs	r2, #7
 8012232:	601a      	str	r2, [r3, #0]
}
 8012234:	bf00      	nop
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	e000e010 	.word	0xe000e010
 8012244:	e000e018 	.word	0xe000e018
 8012248:	20000198 	.word	0x20000198
 801224c:	10624dd3 	.word	0x10624dd3
 8012250:	e000e014 	.word	0xe000e014

08012254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012264 <vPortEnableVFP+0x10>
 8012258:	6801      	ldr	r1, [r0, #0]
 801225a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801225e:	6001      	str	r1, [r0, #0]
 8012260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012262:	bf00      	nop
 8012264:	e000ed88 	.word	0xe000ed88

08012268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012268:	b480      	push	{r7}
 801226a:	b085      	sub	sp, #20
 801226c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801226e:	f3ef 8305 	mrs	r3, IPSR
 8012272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2b0f      	cmp	r3, #15
 8012278:	d915      	bls.n	80122a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801227a:	4a18      	ldr	r2, [pc, #96]	; (80122dc <vPortValidateInterruptPriority+0x74>)
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	4413      	add	r3, r2
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012284:	4b16      	ldr	r3, [pc, #88]	; (80122e0 <vPortValidateInterruptPriority+0x78>)
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	7afa      	ldrb	r2, [r7, #11]
 801228a:	429a      	cmp	r2, r3
 801228c:	d20b      	bcs.n	80122a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012292:	b672      	cpsid	i
 8012294:	f383 8811 	msr	BASEPRI, r3
 8012298:	f3bf 8f6f 	isb	sy
 801229c:	f3bf 8f4f 	dsb	sy
 80122a0:	b662      	cpsie	i
 80122a2:	607b      	str	r3, [r7, #4]
 80122a4:	e7fe      	b.n	80122a4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80122a6:	4b0f      	ldr	r3, [pc, #60]	; (80122e4 <vPortValidateInterruptPriority+0x7c>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80122ae:	4b0e      	ldr	r3, [pc, #56]	; (80122e8 <vPortValidateInterruptPriority+0x80>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d90b      	bls.n	80122ce <vPortValidateInterruptPriority+0x66>
 80122b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ba:	b672      	cpsid	i
 80122bc:	f383 8811 	msr	BASEPRI, r3
 80122c0:	f3bf 8f6f 	isb	sy
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	b662      	cpsie	i
 80122ca:	603b      	str	r3, [r7, #0]
 80122cc:	e7fe      	b.n	80122cc <vPortValidateInterruptPriority+0x64>
	}
 80122ce:	bf00      	nop
 80122d0:	3714      	adds	r7, #20
 80122d2:	46bd      	mov	sp, r7
 80122d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d8:	4770      	bx	lr
 80122da:	bf00      	nop
 80122dc:	e000e3f0 	.word	0xe000e3f0
 80122e0:	20004090 	.word	0x20004090
 80122e4:	e000ed0c 	.word	0xe000ed0c
 80122e8:	20004094 	.word	0x20004094

080122ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b08a      	sub	sp, #40	; 0x28
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80122f4:	2300      	movs	r3, #0
 80122f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80122f8:	f7fe fc9c 	bl	8010c34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80122fc:	4b5a      	ldr	r3, [pc, #360]	; (8012468 <pvPortMalloc+0x17c>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d101      	bne.n	8012308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012304:	f000 f916 	bl	8012534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012308:	4b58      	ldr	r3, [pc, #352]	; (801246c <pvPortMalloc+0x180>)
 801230a:	681a      	ldr	r2, [r3, #0]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	4013      	ands	r3, r2
 8012310:	2b00      	cmp	r3, #0
 8012312:	f040 8090 	bne.w	8012436 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d01e      	beq.n	801235a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801231c:	2208      	movs	r2, #8
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	4413      	add	r3, r2
 8012322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f003 0307 	and.w	r3, r3, #7
 801232a:	2b00      	cmp	r3, #0
 801232c:	d015      	beq.n	801235a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f023 0307 	bic.w	r3, r3, #7
 8012334:	3308      	adds	r3, #8
 8012336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f003 0307 	and.w	r3, r3, #7
 801233e:	2b00      	cmp	r3, #0
 8012340:	d00b      	beq.n	801235a <pvPortMalloc+0x6e>
 8012342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012346:	b672      	cpsid	i
 8012348:	f383 8811 	msr	BASEPRI, r3
 801234c:	f3bf 8f6f 	isb	sy
 8012350:	f3bf 8f4f 	dsb	sy
 8012354:	b662      	cpsie	i
 8012356:	617b      	str	r3, [r7, #20]
 8012358:	e7fe      	b.n	8012358 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d06a      	beq.n	8012436 <pvPortMalloc+0x14a>
 8012360:	4b43      	ldr	r3, [pc, #268]	; (8012470 <pvPortMalloc+0x184>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	429a      	cmp	r2, r3
 8012368:	d865      	bhi.n	8012436 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801236a:	4b42      	ldr	r3, [pc, #264]	; (8012474 <pvPortMalloc+0x188>)
 801236c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801236e:	4b41      	ldr	r3, [pc, #260]	; (8012474 <pvPortMalloc+0x188>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012374:	e004      	b.n	8012380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	429a      	cmp	r2, r3
 8012388:	d903      	bls.n	8012392 <pvPortMalloc+0xa6>
 801238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1f1      	bne.n	8012376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012392:	4b35      	ldr	r3, [pc, #212]	; (8012468 <pvPortMalloc+0x17c>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012398:	429a      	cmp	r2, r3
 801239a:	d04c      	beq.n	8012436 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801239c:	6a3b      	ldr	r3, [r7, #32]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	2208      	movs	r2, #8
 80123a2:	4413      	add	r3, r2
 80123a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80123a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	6a3b      	ldr	r3, [r7, #32]
 80123ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80123ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b0:	685a      	ldr	r2, [r3, #4]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	1ad2      	subs	r2, r2, r3
 80123b6:	2308      	movs	r3, #8
 80123b8:	005b      	lsls	r3, r3, #1
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d920      	bls.n	8012400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80123be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	4413      	add	r3, r2
 80123c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123c6:	69bb      	ldr	r3, [r7, #24]
 80123c8:	f003 0307 	and.w	r3, r3, #7
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00b      	beq.n	80123e8 <pvPortMalloc+0xfc>
 80123d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d4:	b672      	cpsid	i
 80123d6:	f383 8811 	msr	BASEPRI, r3
 80123da:	f3bf 8f6f 	isb	sy
 80123de:	f3bf 8f4f 	dsb	sy
 80123e2:	b662      	cpsie	i
 80123e4:	613b      	str	r3, [r7, #16]
 80123e6:	e7fe      	b.n	80123e6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	685a      	ldr	r2, [r3, #4]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	1ad2      	subs	r2, r2, r3
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80123fa:	69b8      	ldr	r0, [r7, #24]
 80123fc:	f000 f8fe 	bl	80125fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012400:	4b1b      	ldr	r3, [pc, #108]	; (8012470 <pvPortMalloc+0x184>)
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	1ad3      	subs	r3, r2, r3
 801240a:	4a19      	ldr	r2, [pc, #100]	; (8012470 <pvPortMalloc+0x184>)
 801240c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801240e:	4b18      	ldr	r3, [pc, #96]	; (8012470 <pvPortMalloc+0x184>)
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	4b19      	ldr	r3, [pc, #100]	; (8012478 <pvPortMalloc+0x18c>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	429a      	cmp	r2, r3
 8012418:	d203      	bcs.n	8012422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801241a:	4b15      	ldr	r3, [pc, #84]	; (8012470 <pvPortMalloc+0x184>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	4a16      	ldr	r2, [pc, #88]	; (8012478 <pvPortMalloc+0x18c>)
 8012420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012424:	685a      	ldr	r2, [r3, #4]
 8012426:	4b11      	ldr	r3, [pc, #68]	; (801246c <pvPortMalloc+0x180>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	431a      	orrs	r2, r3
 801242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012432:	2200      	movs	r2, #0
 8012434:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012436:	f7fe fc0b 	bl	8010c50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	f003 0307 	and.w	r3, r3, #7
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00b      	beq.n	801245c <pvPortMalloc+0x170>
 8012444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012448:	b672      	cpsid	i
 801244a:	f383 8811 	msr	BASEPRI, r3
 801244e:	f3bf 8f6f 	isb	sy
 8012452:	f3bf 8f4f 	dsb	sy
 8012456:	b662      	cpsie	i
 8012458:	60fb      	str	r3, [r7, #12]
 801245a:	e7fe      	b.n	801245a <pvPortMalloc+0x16e>
	return pvReturn;
 801245c:	69fb      	ldr	r3, [r7, #28]
}
 801245e:	4618      	mov	r0, r3
 8012460:	3728      	adds	r7, #40	; 0x28
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}
 8012466:	bf00      	nop
 8012468:	20028a90 	.word	0x20028a90
 801246c:	20028a9c 	.word	0x20028a9c
 8012470:	20028a94 	.word	0x20028a94
 8012474:	20028a88 	.word	0x20028a88
 8012478:	20028a98 	.word	0x20028a98

0801247c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b086      	sub	sp, #24
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d04a      	beq.n	8012524 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801248e:	2308      	movs	r3, #8
 8012490:	425b      	negs	r3, r3
 8012492:	697a      	ldr	r2, [r7, #20]
 8012494:	4413      	add	r3, r2
 8012496:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	685a      	ldr	r2, [r3, #4]
 80124a0:	4b22      	ldr	r3, [pc, #136]	; (801252c <vPortFree+0xb0>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4013      	ands	r3, r2
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d10b      	bne.n	80124c2 <vPortFree+0x46>
 80124aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ae:	b672      	cpsid	i
 80124b0:	f383 8811 	msr	BASEPRI, r3
 80124b4:	f3bf 8f6f 	isb	sy
 80124b8:	f3bf 8f4f 	dsb	sy
 80124bc:	b662      	cpsie	i
 80124be:	60fb      	str	r3, [r7, #12]
 80124c0:	e7fe      	b.n	80124c0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00b      	beq.n	80124e2 <vPortFree+0x66>
 80124ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ce:	b672      	cpsid	i
 80124d0:	f383 8811 	msr	BASEPRI, r3
 80124d4:	f3bf 8f6f 	isb	sy
 80124d8:	f3bf 8f4f 	dsb	sy
 80124dc:	b662      	cpsie	i
 80124de:	60bb      	str	r3, [r7, #8]
 80124e0:	e7fe      	b.n	80124e0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	685a      	ldr	r2, [r3, #4]
 80124e6:	4b11      	ldr	r3, [pc, #68]	; (801252c <vPortFree+0xb0>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4013      	ands	r3, r2
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d019      	beq.n	8012524 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d115      	bne.n	8012524 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	685a      	ldr	r2, [r3, #4]
 80124fc:	4b0b      	ldr	r3, [pc, #44]	; (801252c <vPortFree+0xb0>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	43db      	mvns	r3, r3
 8012502:	401a      	ands	r2, r3
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012508:	f7fe fb94 	bl	8010c34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	685a      	ldr	r2, [r3, #4]
 8012510:	4b07      	ldr	r3, [pc, #28]	; (8012530 <vPortFree+0xb4>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4413      	add	r3, r2
 8012516:	4a06      	ldr	r2, [pc, #24]	; (8012530 <vPortFree+0xb4>)
 8012518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801251a:	6938      	ldr	r0, [r7, #16]
 801251c:	f000 f86e 	bl	80125fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012520:	f7fe fb96 	bl	8010c50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012524:	bf00      	nop
 8012526:	3718      	adds	r7, #24
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}
 801252c:	20028a9c 	.word	0x20028a9c
 8012530:	20028a94 	.word	0x20028a94

08012534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012534:	b480      	push	{r7}
 8012536:	b085      	sub	sp, #20
 8012538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801253a:	4b29      	ldr	r3, [pc, #164]	; (80125e0 <prvHeapInit+0xac>)
 801253c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801253e:	4b29      	ldr	r3, [pc, #164]	; (80125e4 <prvHeapInit+0xb0>)
 8012540:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f003 0307 	and.w	r3, r3, #7
 8012548:	2b00      	cmp	r3, #0
 801254a:	d00c      	beq.n	8012566 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	3307      	adds	r3, #7
 8012550:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	f023 0307 	bic.w	r3, r3, #7
 8012558:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801255a:	68ba      	ldr	r2, [r7, #8]
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	1ad3      	subs	r3, r2, r3
 8012560:	4a20      	ldr	r2, [pc, #128]	; (80125e4 <prvHeapInit+0xb0>)
 8012562:	4413      	add	r3, r2
 8012564:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801256a:	4a1f      	ldr	r2, [pc, #124]	; (80125e8 <prvHeapInit+0xb4>)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012570:	4b1d      	ldr	r3, [pc, #116]	; (80125e8 <prvHeapInit+0xb4>)
 8012572:	2200      	movs	r2, #0
 8012574:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	68ba      	ldr	r2, [r7, #8]
 801257a:	4413      	add	r3, r2
 801257c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801257e:	2208      	movs	r2, #8
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	1a9b      	subs	r3, r3, r2
 8012584:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	f023 0307 	bic.w	r3, r3, #7
 801258c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	4a16      	ldr	r2, [pc, #88]	; (80125ec <prvHeapInit+0xb8>)
 8012592:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012594:	4b15      	ldr	r3, [pc, #84]	; (80125ec <prvHeapInit+0xb8>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2200      	movs	r2, #0
 801259a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801259c:	4b13      	ldr	r3, [pc, #76]	; (80125ec <prvHeapInit+0xb8>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	2200      	movs	r2, #0
 80125a2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	68fa      	ldr	r2, [r7, #12]
 80125ac:	1ad2      	subs	r2, r2, r3
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80125b2:	4b0e      	ldr	r3, [pc, #56]	; (80125ec <prvHeapInit+0xb8>)
 80125b4:	681a      	ldr	r2, [r3, #0]
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	4a0c      	ldr	r2, [pc, #48]	; (80125f0 <prvHeapInit+0xbc>)
 80125c0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	4a0b      	ldr	r2, [pc, #44]	; (80125f4 <prvHeapInit+0xc0>)
 80125c8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80125ca:	4b0b      	ldr	r3, [pc, #44]	; (80125f8 <prvHeapInit+0xc4>)
 80125cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80125d0:	601a      	str	r2, [r3, #0]
}
 80125d2:	bf00      	nop
 80125d4:	3714      	adds	r7, #20
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr
 80125de:	bf00      	nop
 80125e0:	000249f0 	.word	0x000249f0
 80125e4:	20004098 	.word	0x20004098
 80125e8:	20028a88 	.word	0x20028a88
 80125ec:	20028a90 	.word	0x20028a90
 80125f0:	20028a98 	.word	0x20028a98
 80125f4:	20028a94 	.word	0x20028a94
 80125f8:	20028a9c 	.word	0x20028a9c

080125fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80125fc:	b480      	push	{r7}
 80125fe:	b085      	sub	sp, #20
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012604:	4b28      	ldr	r3, [pc, #160]	; (80126a8 <prvInsertBlockIntoFreeList+0xac>)
 8012606:	60fb      	str	r3, [r7, #12]
 8012608:	e002      	b.n	8012610 <prvInsertBlockIntoFreeList+0x14>
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	60fb      	str	r3, [r7, #12]
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	429a      	cmp	r2, r3
 8012618:	d8f7      	bhi.n	801260a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	68ba      	ldr	r2, [r7, #8]
 8012624:	4413      	add	r3, r2
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	429a      	cmp	r2, r3
 801262a:	d108      	bne.n	801263e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	685a      	ldr	r2, [r3, #4]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	441a      	add	r2, r3
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	68ba      	ldr	r2, [r7, #8]
 8012648:	441a      	add	r2, r3
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	429a      	cmp	r2, r3
 8012650:	d118      	bne.n	8012684 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	4b15      	ldr	r3, [pc, #84]	; (80126ac <prvInsertBlockIntoFreeList+0xb0>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	429a      	cmp	r2, r3
 801265c:	d00d      	beq.n	801267a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	685a      	ldr	r2, [r3, #4]
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	441a      	add	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	681a      	ldr	r2, [r3, #0]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	601a      	str	r2, [r3, #0]
 8012678:	e008      	b.n	801268c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801267a:	4b0c      	ldr	r3, [pc, #48]	; (80126ac <prvInsertBlockIntoFreeList+0xb0>)
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	601a      	str	r2, [r3, #0]
 8012682:	e003      	b.n	801268c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	429a      	cmp	r2, r3
 8012692:	d002      	beq.n	801269a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	687a      	ldr	r2, [r7, #4]
 8012698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801269a:	bf00      	nop
 801269c:	3714      	adds	r7, #20
 801269e:	46bd      	mov	sp, r7
 80126a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a4:	4770      	bx	lr
 80126a6:	bf00      	nop
 80126a8:	20028a88 	.word	0x20028a88
 80126ac:	20028a90 	.word	0x20028a90

080126b0 <__errno>:
 80126b0:	4b01      	ldr	r3, [pc, #4]	; (80126b8 <__errno+0x8>)
 80126b2:	6818      	ldr	r0, [r3, #0]
 80126b4:	4770      	bx	lr
 80126b6:	bf00      	nop
 80126b8:	200001a8 	.word	0x200001a8

080126bc <__libc_init_array>:
 80126bc:	b570      	push	{r4, r5, r6, lr}
 80126be:	4e0d      	ldr	r6, [pc, #52]	; (80126f4 <__libc_init_array+0x38>)
 80126c0:	4c0d      	ldr	r4, [pc, #52]	; (80126f8 <__libc_init_array+0x3c>)
 80126c2:	1ba4      	subs	r4, r4, r6
 80126c4:	10a4      	asrs	r4, r4, #2
 80126c6:	2500      	movs	r5, #0
 80126c8:	42a5      	cmp	r5, r4
 80126ca:	d109      	bne.n	80126e0 <__libc_init_array+0x24>
 80126cc:	4e0b      	ldr	r6, [pc, #44]	; (80126fc <__libc_init_array+0x40>)
 80126ce:	4c0c      	ldr	r4, [pc, #48]	; (8012700 <__libc_init_array+0x44>)
 80126d0:	f004 f840 	bl	8016754 <_init>
 80126d4:	1ba4      	subs	r4, r4, r6
 80126d6:	10a4      	asrs	r4, r4, #2
 80126d8:	2500      	movs	r5, #0
 80126da:	42a5      	cmp	r5, r4
 80126dc:	d105      	bne.n	80126ea <__libc_init_array+0x2e>
 80126de:	bd70      	pop	{r4, r5, r6, pc}
 80126e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80126e4:	4798      	blx	r3
 80126e6:	3501      	adds	r5, #1
 80126e8:	e7ee      	b.n	80126c8 <__libc_init_array+0xc>
 80126ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80126ee:	4798      	blx	r3
 80126f0:	3501      	adds	r5, #1
 80126f2:	e7f2      	b.n	80126da <__libc_init_array+0x1e>
 80126f4:	080179e0 	.word	0x080179e0
 80126f8:	080179e0 	.word	0x080179e0
 80126fc:	080179e0 	.word	0x080179e0
 8012700:	080179e4 	.word	0x080179e4

08012704 <memcpy>:
 8012704:	b510      	push	{r4, lr}
 8012706:	1e43      	subs	r3, r0, #1
 8012708:	440a      	add	r2, r1
 801270a:	4291      	cmp	r1, r2
 801270c:	d100      	bne.n	8012710 <memcpy+0xc>
 801270e:	bd10      	pop	{r4, pc}
 8012710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012718:	e7f7      	b.n	801270a <memcpy+0x6>

0801271a <memset>:
 801271a:	4402      	add	r2, r0
 801271c:	4603      	mov	r3, r0
 801271e:	4293      	cmp	r3, r2
 8012720:	d100      	bne.n	8012724 <memset+0xa>
 8012722:	4770      	bx	lr
 8012724:	f803 1b01 	strb.w	r1, [r3], #1
 8012728:	e7f9      	b.n	801271e <memset+0x4>

0801272a <__cvt>:
 801272a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801272c:	ed2d 8b02 	vpush	{d8}
 8012730:	eeb0 8b40 	vmov.f64	d8, d0
 8012734:	b085      	sub	sp, #20
 8012736:	4617      	mov	r7, r2
 8012738:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801273a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801273c:	ee18 2a90 	vmov	r2, s17
 8012740:	f025 0520 	bic.w	r5, r5, #32
 8012744:	2a00      	cmp	r2, #0
 8012746:	bfb6      	itet	lt
 8012748:	222d      	movlt	r2, #45	; 0x2d
 801274a:	2200      	movge	r2, #0
 801274c:	eeb1 8b40 	vneglt.f64	d8, d0
 8012750:	2d46      	cmp	r5, #70	; 0x46
 8012752:	460c      	mov	r4, r1
 8012754:	701a      	strb	r2, [r3, #0]
 8012756:	d004      	beq.n	8012762 <__cvt+0x38>
 8012758:	2d45      	cmp	r5, #69	; 0x45
 801275a:	d100      	bne.n	801275e <__cvt+0x34>
 801275c:	3401      	adds	r4, #1
 801275e:	2102      	movs	r1, #2
 8012760:	e000      	b.n	8012764 <__cvt+0x3a>
 8012762:	2103      	movs	r1, #3
 8012764:	ab03      	add	r3, sp, #12
 8012766:	9301      	str	r3, [sp, #4]
 8012768:	ab02      	add	r3, sp, #8
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	4622      	mov	r2, r4
 801276e:	4633      	mov	r3, r6
 8012770:	eeb0 0b48 	vmov.f64	d0, d8
 8012774:	f001 fe44 	bl	8014400 <_dtoa_r>
 8012778:	2d47      	cmp	r5, #71	; 0x47
 801277a:	d101      	bne.n	8012780 <__cvt+0x56>
 801277c:	07fb      	lsls	r3, r7, #31
 801277e:	d51e      	bpl.n	80127be <__cvt+0x94>
 8012780:	2d46      	cmp	r5, #70	; 0x46
 8012782:	eb00 0304 	add.w	r3, r0, r4
 8012786:	d10c      	bne.n	80127a2 <__cvt+0x78>
 8012788:	7802      	ldrb	r2, [r0, #0]
 801278a:	2a30      	cmp	r2, #48	; 0x30
 801278c:	d107      	bne.n	801279e <__cvt+0x74>
 801278e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012796:	bf1c      	itt	ne
 8012798:	f1c4 0401 	rsbne	r4, r4, #1
 801279c:	6034      	strne	r4, [r6, #0]
 801279e:	6832      	ldr	r2, [r6, #0]
 80127a0:	4413      	add	r3, r2
 80127a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80127a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127aa:	d007      	beq.n	80127bc <__cvt+0x92>
 80127ac:	2130      	movs	r1, #48	; 0x30
 80127ae:	9a03      	ldr	r2, [sp, #12]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d204      	bcs.n	80127be <__cvt+0x94>
 80127b4:	1c54      	adds	r4, r2, #1
 80127b6:	9403      	str	r4, [sp, #12]
 80127b8:	7011      	strb	r1, [r2, #0]
 80127ba:	e7f8      	b.n	80127ae <__cvt+0x84>
 80127bc:	9303      	str	r3, [sp, #12]
 80127be:	9b03      	ldr	r3, [sp, #12]
 80127c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127c2:	1a1b      	subs	r3, r3, r0
 80127c4:	6013      	str	r3, [r2, #0]
 80127c6:	b005      	add	sp, #20
 80127c8:	ecbd 8b02 	vpop	{d8}
 80127cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080127ce <__exponent>:
 80127ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127d0:	2900      	cmp	r1, #0
 80127d2:	4604      	mov	r4, r0
 80127d4:	bfba      	itte	lt
 80127d6:	4249      	neglt	r1, r1
 80127d8:	232d      	movlt	r3, #45	; 0x2d
 80127da:	232b      	movge	r3, #43	; 0x2b
 80127dc:	2909      	cmp	r1, #9
 80127de:	f804 2b02 	strb.w	r2, [r4], #2
 80127e2:	7043      	strb	r3, [r0, #1]
 80127e4:	dd20      	ble.n	8012828 <__exponent+0x5a>
 80127e6:	f10d 0307 	add.w	r3, sp, #7
 80127ea:	461f      	mov	r7, r3
 80127ec:	260a      	movs	r6, #10
 80127ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80127f2:	fb06 1115 	mls	r1, r6, r5, r1
 80127f6:	3130      	adds	r1, #48	; 0x30
 80127f8:	2d09      	cmp	r5, #9
 80127fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80127fe:	f103 32ff 	add.w	r2, r3, #4294967295
 8012802:	4629      	mov	r1, r5
 8012804:	dc09      	bgt.n	801281a <__exponent+0x4c>
 8012806:	3130      	adds	r1, #48	; 0x30
 8012808:	3b02      	subs	r3, #2
 801280a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801280e:	42bb      	cmp	r3, r7
 8012810:	4622      	mov	r2, r4
 8012812:	d304      	bcc.n	801281e <__exponent+0x50>
 8012814:	1a10      	subs	r0, r2, r0
 8012816:	b003      	add	sp, #12
 8012818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801281a:	4613      	mov	r3, r2
 801281c:	e7e7      	b.n	80127ee <__exponent+0x20>
 801281e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012822:	f804 2b01 	strb.w	r2, [r4], #1
 8012826:	e7f2      	b.n	801280e <__exponent+0x40>
 8012828:	2330      	movs	r3, #48	; 0x30
 801282a:	4419      	add	r1, r3
 801282c:	7083      	strb	r3, [r0, #2]
 801282e:	1d02      	adds	r2, r0, #4
 8012830:	70c1      	strb	r1, [r0, #3]
 8012832:	e7ef      	b.n	8012814 <__exponent+0x46>
 8012834:	0000      	movs	r0, r0
	...

08012838 <_printf_float>:
 8012838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	b08d      	sub	sp, #52	; 0x34
 801283e:	460c      	mov	r4, r1
 8012840:	4616      	mov	r6, r2
 8012842:	461f      	mov	r7, r3
 8012844:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012848:	4605      	mov	r5, r0
 801284a:	f002 ffcb 	bl	80157e4 <_localeconv_r>
 801284e:	f8d0 b000 	ldr.w	fp, [r0]
 8012852:	4658      	mov	r0, fp
 8012854:	f7ed fcf4 	bl	8000240 <strlen>
 8012858:	2300      	movs	r3, #0
 801285a:	930a      	str	r3, [sp, #40]	; 0x28
 801285c:	f8d8 3000 	ldr.w	r3, [r8]
 8012860:	9005      	str	r0, [sp, #20]
 8012862:	3307      	adds	r3, #7
 8012864:	f023 0307 	bic.w	r3, r3, #7
 8012868:	f103 0108 	add.w	r1, r3, #8
 801286c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012870:	6822      	ldr	r2, [r4, #0]
 8012872:	f8c8 1000 	str.w	r1, [r8]
 8012876:	e9d3 0100 	ldrd	r0, r1, [r3]
 801287a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801287e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8012b08 <_printf_float+0x2d0>
 8012882:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012886:	eeb0 6bc0 	vabs.f64	d6, d0
 801288a:	eeb4 6b47 	vcmp.f64	d6, d7
 801288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012892:	dd24      	ble.n	80128de <_printf_float+0xa6>
 8012894:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289c:	d502      	bpl.n	80128a4 <_printf_float+0x6c>
 801289e:	232d      	movs	r3, #45	; 0x2d
 80128a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128a4:	499a      	ldr	r1, [pc, #616]	; (8012b10 <_printf_float+0x2d8>)
 80128a6:	4b9b      	ldr	r3, [pc, #620]	; (8012b14 <_printf_float+0x2dc>)
 80128a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80128ac:	bf8c      	ite	hi
 80128ae:	4688      	movhi	r8, r1
 80128b0:	4698      	movls	r8, r3
 80128b2:	f022 0204 	bic.w	r2, r2, #4
 80128b6:	2303      	movs	r3, #3
 80128b8:	6123      	str	r3, [r4, #16]
 80128ba:	6022      	str	r2, [r4, #0]
 80128bc:	f04f 0a00 	mov.w	sl, #0
 80128c0:	9700      	str	r7, [sp, #0]
 80128c2:	4633      	mov	r3, r6
 80128c4:	aa0b      	add	r2, sp, #44	; 0x2c
 80128c6:	4621      	mov	r1, r4
 80128c8:	4628      	mov	r0, r5
 80128ca:	f000 f9e1 	bl	8012c90 <_printf_common>
 80128ce:	3001      	adds	r0, #1
 80128d0:	f040 8089 	bne.w	80129e6 <_printf_float+0x1ae>
 80128d4:	f04f 30ff 	mov.w	r0, #4294967295
 80128d8:	b00d      	add	sp, #52	; 0x34
 80128da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128de:	eeb4 0b40 	vcmp.f64	d0, d0
 80128e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e6:	d702      	bvc.n	80128ee <_printf_float+0xb6>
 80128e8:	498b      	ldr	r1, [pc, #556]	; (8012b18 <_printf_float+0x2e0>)
 80128ea:	4b8c      	ldr	r3, [pc, #560]	; (8012b1c <_printf_float+0x2e4>)
 80128ec:	e7dc      	b.n	80128a8 <_printf_float+0x70>
 80128ee:	6861      	ldr	r1, [r4, #4]
 80128f0:	1c4b      	adds	r3, r1, #1
 80128f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80128f6:	ab0a      	add	r3, sp, #40	; 0x28
 80128f8:	a809      	add	r0, sp, #36	; 0x24
 80128fa:	d13b      	bne.n	8012974 <_printf_float+0x13c>
 80128fc:	2106      	movs	r1, #6
 80128fe:	6061      	str	r1, [r4, #4]
 8012900:	f04f 0c00 	mov.w	ip, #0
 8012904:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8012908:	e9cd 0900 	strd	r0, r9, [sp]
 801290c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012910:	6022      	str	r2, [r4, #0]
 8012912:	6861      	ldr	r1, [r4, #4]
 8012914:	4628      	mov	r0, r5
 8012916:	f7ff ff08 	bl	801272a <__cvt>
 801291a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801291e:	2b47      	cmp	r3, #71	; 0x47
 8012920:	4680      	mov	r8, r0
 8012922:	d109      	bne.n	8012938 <_printf_float+0x100>
 8012924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012926:	1cd8      	adds	r0, r3, #3
 8012928:	db02      	blt.n	8012930 <_printf_float+0xf8>
 801292a:	6862      	ldr	r2, [r4, #4]
 801292c:	4293      	cmp	r3, r2
 801292e:	dd47      	ble.n	80129c0 <_printf_float+0x188>
 8012930:	f1a9 0902 	sub.w	r9, r9, #2
 8012934:	fa5f f989 	uxtb.w	r9, r9
 8012938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801293c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801293e:	d824      	bhi.n	801298a <_printf_float+0x152>
 8012940:	3901      	subs	r1, #1
 8012942:	464a      	mov	r2, r9
 8012944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012948:	9109      	str	r1, [sp, #36]	; 0x24
 801294a:	f7ff ff40 	bl	80127ce <__exponent>
 801294e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012950:	1813      	adds	r3, r2, r0
 8012952:	2a01      	cmp	r2, #1
 8012954:	4682      	mov	sl, r0
 8012956:	6123      	str	r3, [r4, #16]
 8012958:	dc02      	bgt.n	8012960 <_printf_float+0x128>
 801295a:	6822      	ldr	r2, [r4, #0]
 801295c:	07d1      	lsls	r1, r2, #31
 801295e:	d501      	bpl.n	8012964 <_printf_float+0x12c>
 8012960:	3301      	adds	r3, #1
 8012962:	6123      	str	r3, [r4, #16]
 8012964:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012968:	2b00      	cmp	r3, #0
 801296a:	d0a9      	beq.n	80128c0 <_printf_float+0x88>
 801296c:	232d      	movs	r3, #45	; 0x2d
 801296e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012972:	e7a5      	b.n	80128c0 <_printf_float+0x88>
 8012974:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8012978:	f000 8178 	beq.w	8012c6c <_printf_float+0x434>
 801297c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012980:	d1be      	bne.n	8012900 <_printf_float+0xc8>
 8012982:	2900      	cmp	r1, #0
 8012984:	d1bc      	bne.n	8012900 <_printf_float+0xc8>
 8012986:	2101      	movs	r1, #1
 8012988:	e7b9      	b.n	80128fe <_printf_float+0xc6>
 801298a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801298e:	d119      	bne.n	80129c4 <_printf_float+0x18c>
 8012990:	2900      	cmp	r1, #0
 8012992:	6863      	ldr	r3, [r4, #4]
 8012994:	dd0c      	ble.n	80129b0 <_printf_float+0x178>
 8012996:	6121      	str	r1, [r4, #16]
 8012998:	b913      	cbnz	r3, 80129a0 <_printf_float+0x168>
 801299a:	6822      	ldr	r2, [r4, #0]
 801299c:	07d2      	lsls	r2, r2, #31
 801299e:	d502      	bpl.n	80129a6 <_printf_float+0x16e>
 80129a0:	3301      	adds	r3, #1
 80129a2:	440b      	add	r3, r1
 80129a4:	6123      	str	r3, [r4, #16]
 80129a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80129aa:	f04f 0a00 	mov.w	sl, #0
 80129ae:	e7d9      	b.n	8012964 <_printf_float+0x12c>
 80129b0:	b913      	cbnz	r3, 80129b8 <_printf_float+0x180>
 80129b2:	6822      	ldr	r2, [r4, #0]
 80129b4:	07d0      	lsls	r0, r2, #31
 80129b6:	d501      	bpl.n	80129bc <_printf_float+0x184>
 80129b8:	3302      	adds	r3, #2
 80129ba:	e7f3      	b.n	80129a4 <_printf_float+0x16c>
 80129bc:	2301      	movs	r3, #1
 80129be:	e7f1      	b.n	80129a4 <_printf_float+0x16c>
 80129c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80129c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80129c8:	4293      	cmp	r3, r2
 80129ca:	db05      	blt.n	80129d8 <_printf_float+0x1a0>
 80129cc:	6822      	ldr	r2, [r4, #0]
 80129ce:	6123      	str	r3, [r4, #16]
 80129d0:	07d1      	lsls	r1, r2, #31
 80129d2:	d5e8      	bpl.n	80129a6 <_printf_float+0x16e>
 80129d4:	3301      	adds	r3, #1
 80129d6:	e7e5      	b.n	80129a4 <_printf_float+0x16c>
 80129d8:	2b00      	cmp	r3, #0
 80129da:	bfd4      	ite	le
 80129dc:	f1c3 0302 	rsble	r3, r3, #2
 80129e0:	2301      	movgt	r3, #1
 80129e2:	4413      	add	r3, r2
 80129e4:	e7de      	b.n	80129a4 <_printf_float+0x16c>
 80129e6:	6823      	ldr	r3, [r4, #0]
 80129e8:	055a      	lsls	r2, r3, #21
 80129ea:	d407      	bmi.n	80129fc <_printf_float+0x1c4>
 80129ec:	6923      	ldr	r3, [r4, #16]
 80129ee:	4642      	mov	r2, r8
 80129f0:	4631      	mov	r1, r6
 80129f2:	4628      	mov	r0, r5
 80129f4:	47b8      	blx	r7
 80129f6:	3001      	adds	r0, #1
 80129f8:	d12a      	bne.n	8012a50 <_printf_float+0x218>
 80129fa:	e76b      	b.n	80128d4 <_printf_float+0x9c>
 80129fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012a00:	f240 80de 	bls.w	8012bc0 <_printf_float+0x388>
 8012a04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012a08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a10:	d133      	bne.n	8012a7a <_printf_float+0x242>
 8012a12:	2301      	movs	r3, #1
 8012a14:	4a42      	ldr	r2, [pc, #264]	; (8012b20 <_printf_float+0x2e8>)
 8012a16:	4631      	mov	r1, r6
 8012a18:	4628      	mov	r0, r5
 8012a1a:	47b8      	blx	r7
 8012a1c:	3001      	adds	r0, #1
 8012a1e:	f43f af59 	beq.w	80128d4 <_printf_float+0x9c>
 8012a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a26:	429a      	cmp	r2, r3
 8012a28:	db02      	blt.n	8012a30 <_printf_float+0x1f8>
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	07d8      	lsls	r0, r3, #31
 8012a2e:	d50f      	bpl.n	8012a50 <_printf_float+0x218>
 8012a30:	9b05      	ldr	r3, [sp, #20]
 8012a32:	465a      	mov	r2, fp
 8012a34:	4631      	mov	r1, r6
 8012a36:	4628      	mov	r0, r5
 8012a38:	47b8      	blx	r7
 8012a3a:	3001      	adds	r0, #1
 8012a3c:	f43f af4a 	beq.w	80128d4 <_printf_float+0x9c>
 8012a40:	f04f 0800 	mov.w	r8, #0
 8012a44:	f104 091a 	add.w	r9, r4, #26
 8012a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	4543      	cmp	r3, r8
 8012a4e:	dc09      	bgt.n	8012a64 <_printf_float+0x22c>
 8012a50:	6823      	ldr	r3, [r4, #0]
 8012a52:	079b      	lsls	r3, r3, #30
 8012a54:	f100 8105 	bmi.w	8012c62 <_printf_float+0x42a>
 8012a58:	68e0      	ldr	r0, [r4, #12]
 8012a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a5c:	4298      	cmp	r0, r3
 8012a5e:	bfb8      	it	lt
 8012a60:	4618      	movlt	r0, r3
 8012a62:	e739      	b.n	80128d8 <_printf_float+0xa0>
 8012a64:	2301      	movs	r3, #1
 8012a66:	464a      	mov	r2, r9
 8012a68:	4631      	mov	r1, r6
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	47b8      	blx	r7
 8012a6e:	3001      	adds	r0, #1
 8012a70:	f43f af30 	beq.w	80128d4 <_printf_float+0x9c>
 8012a74:	f108 0801 	add.w	r8, r8, #1
 8012a78:	e7e6      	b.n	8012a48 <_printf_float+0x210>
 8012a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	dc2b      	bgt.n	8012ad8 <_printf_float+0x2a0>
 8012a80:	2301      	movs	r3, #1
 8012a82:	4a27      	ldr	r2, [pc, #156]	; (8012b20 <_printf_float+0x2e8>)
 8012a84:	4631      	mov	r1, r6
 8012a86:	4628      	mov	r0, r5
 8012a88:	47b8      	blx	r7
 8012a8a:	3001      	adds	r0, #1
 8012a8c:	f43f af22 	beq.w	80128d4 <_printf_float+0x9c>
 8012a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a92:	b923      	cbnz	r3, 8012a9e <_printf_float+0x266>
 8012a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a96:	b913      	cbnz	r3, 8012a9e <_printf_float+0x266>
 8012a98:	6823      	ldr	r3, [r4, #0]
 8012a9a:	07d9      	lsls	r1, r3, #31
 8012a9c:	d5d8      	bpl.n	8012a50 <_printf_float+0x218>
 8012a9e:	9b05      	ldr	r3, [sp, #20]
 8012aa0:	465a      	mov	r2, fp
 8012aa2:	4631      	mov	r1, r6
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	47b8      	blx	r7
 8012aa8:	3001      	adds	r0, #1
 8012aaa:	f43f af13 	beq.w	80128d4 <_printf_float+0x9c>
 8012aae:	f04f 0900 	mov.w	r9, #0
 8012ab2:	f104 0a1a 	add.w	sl, r4, #26
 8012ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ab8:	425b      	negs	r3, r3
 8012aba:	454b      	cmp	r3, r9
 8012abc:	dc01      	bgt.n	8012ac2 <_printf_float+0x28a>
 8012abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ac0:	e795      	b.n	80129ee <_printf_float+0x1b6>
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	4652      	mov	r2, sl
 8012ac6:	4631      	mov	r1, r6
 8012ac8:	4628      	mov	r0, r5
 8012aca:	47b8      	blx	r7
 8012acc:	3001      	adds	r0, #1
 8012ace:	f43f af01 	beq.w	80128d4 <_printf_float+0x9c>
 8012ad2:	f109 0901 	add.w	r9, r9, #1
 8012ad6:	e7ee      	b.n	8012ab6 <_printf_float+0x27e>
 8012ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012adc:	429a      	cmp	r2, r3
 8012ade:	bfa8      	it	ge
 8012ae0:	461a      	movge	r2, r3
 8012ae2:	2a00      	cmp	r2, #0
 8012ae4:	4691      	mov	r9, r2
 8012ae6:	dd07      	ble.n	8012af8 <_printf_float+0x2c0>
 8012ae8:	4613      	mov	r3, r2
 8012aea:	4631      	mov	r1, r6
 8012aec:	4642      	mov	r2, r8
 8012aee:	4628      	mov	r0, r5
 8012af0:	47b8      	blx	r7
 8012af2:	3001      	adds	r0, #1
 8012af4:	f43f aeee 	beq.w	80128d4 <_printf_float+0x9c>
 8012af8:	f104 031a 	add.w	r3, r4, #26
 8012afc:	f04f 0a00 	mov.w	sl, #0
 8012b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b04:	9307      	str	r3, [sp, #28]
 8012b06:	e017      	b.n	8012b38 <_printf_float+0x300>
 8012b08:	ffffffff 	.word	0xffffffff
 8012b0c:	7fefffff 	.word	0x7fefffff
 8012b10:	080176c0 	.word	0x080176c0
 8012b14:	080176bc 	.word	0x080176bc
 8012b18:	080176c8 	.word	0x080176c8
 8012b1c:	080176c4 	.word	0x080176c4
 8012b20:	080176cc 	.word	0x080176cc
 8012b24:	2301      	movs	r3, #1
 8012b26:	9a07      	ldr	r2, [sp, #28]
 8012b28:	4631      	mov	r1, r6
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	47b8      	blx	r7
 8012b2e:	3001      	adds	r0, #1
 8012b30:	f43f aed0 	beq.w	80128d4 <_printf_float+0x9c>
 8012b34:	f10a 0a01 	add.w	sl, sl, #1
 8012b38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b3a:	9306      	str	r3, [sp, #24]
 8012b3c:	eba3 0309 	sub.w	r3, r3, r9
 8012b40:	4553      	cmp	r3, sl
 8012b42:	dcef      	bgt.n	8012b24 <_printf_float+0x2ec>
 8012b44:	9b06      	ldr	r3, [sp, #24]
 8012b46:	4498      	add	r8, r3
 8012b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	db15      	blt.n	8012b7c <_printf_float+0x344>
 8012b50:	6823      	ldr	r3, [r4, #0]
 8012b52:	07da      	lsls	r2, r3, #31
 8012b54:	d412      	bmi.n	8012b7c <_printf_float+0x344>
 8012b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b58:	9a06      	ldr	r2, [sp, #24]
 8012b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b5c:	1a9a      	subs	r2, r3, r2
 8012b5e:	eba3 0a01 	sub.w	sl, r3, r1
 8012b62:	4592      	cmp	sl, r2
 8012b64:	bfa8      	it	ge
 8012b66:	4692      	movge	sl, r2
 8012b68:	f1ba 0f00 	cmp.w	sl, #0
 8012b6c:	dc0e      	bgt.n	8012b8c <_printf_float+0x354>
 8012b6e:	f04f 0800 	mov.w	r8, #0
 8012b72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b76:	f104 091a 	add.w	r9, r4, #26
 8012b7a:	e019      	b.n	8012bb0 <_printf_float+0x378>
 8012b7c:	9b05      	ldr	r3, [sp, #20]
 8012b7e:	465a      	mov	r2, fp
 8012b80:	4631      	mov	r1, r6
 8012b82:	4628      	mov	r0, r5
 8012b84:	47b8      	blx	r7
 8012b86:	3001      	adds	r0, #1
 8012b88:	d1e5      	bne.n	8012b56 <_printf_float+0x31e>
 8012b8a:	e6a3      	b.n	80128d4 <_printf_float+0x9c>
 8012b8c:	4653      	mov	r3, sl
 8012b8e:	4642      	mov	r2, r8
 8012b90:	4631      	mov	r1, r6
 8012b92:	4628      	mov	r0, r5
 8012b94:	47b8      	blx	r7
 8012b96:	3001      	adds	r0, #1
 8012b98:	d1e9      	bne.n	8012b6e <_printf_float+0x336>
 8012b9a:	e69b      	b.n	80128d4 <_printf_float+0x9c>
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	464a      	mov	r2, r9
 8012ba0:	4631      	mov	r1, r6
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	47b8      	blx	r7
 8012ba6:	3001      	adds	r0, #1
 8012ba8:	f43f ae94 	beq.w	80128d4 <_printf_float+0x9c>
 8012bac:	f108 0801 	add.w	r8, r8, #1
 8012bb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bb4:	1a9b      	subs	r3, r3, r2
 8012bb6:	eba3 030a 	sub.w	r3, r3, sl
 8012bba:	4543      	cmp	r3, r8
 8012bbc:	dcee      	bgt.n	8012b9c <_printf_float+0x364>
 8012bbe:	e747      	b.n	8012a50 <_printf_float+0x218>
 8012bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bc2:	2a01      	cmp	r2, #1
 8012bc4:	dc01      	bgt.n	8012bca <_printf_float+0x392>
 8012bc6:	07db      	lsls	r3, r3, #31
 8012bc8:	d539      	bpl.n	8012c3e <_printf_float+0x406>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	4642      	mov	r2, r8
 8012bce:	4631      	mov	r1, r6
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	47b8      	blx	r7
 8012bd4:	3001      	adds	r0, #1
 8012bd6:	f43f ae7d 	beq.w	80128d4 <_printf_float+0x9c>
 8012bda:	9b05      	ldr	r3, [sp, #20]
 8012bdc:	465a      	mov	r2, fp
 8012bde:	4631      	mov	r1, r6
 8012be0:	4628      	mov	r0, r5
 8012be2:	47b8      	blx	r7
 8012be4:	3001      	adds	r0, #1
 8012be6:	f108 0801 	add.w	r8, r8, #1
 8012bea:	f43f ae73 	beq.w	80128d4 <_printf_float+0x9c>
 8012bee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfc:	f103 33ff 	add.w	r3, r3, #4294967295
 8012c00:	d018      	beq.n	8012c34 <_printf_float+0x3fc>
 8012c02:	4642      	mov	r2, r8
 8012c04:	4631      	mov	r1, r6
 8012c06:	4628      	mov	r0, r5
 8012c08:	47b8      	blx	r7
 8012c0a:	3001      	adds	r0, #1
 8012c0c:	d10e      	bne.n	8012c2c <_printf_float+0x3f4>
 8012c0e:	e661      	b.n	80128d4 <_printf_float+0x9c>
 8012c10:	2301      	movs	r3, #1
 8012c12:	464a      	mov	r2, r9
 8012c14:	4631      	mov	r1, r6
 8012c16:	4628      	mov	r0, r5
 8012c18:	47b8      	blx	r7
 8012c1a:	3001      	adds	r0, #1
 8012c1c:	f43f ae5a 	beq.w	80128d4 <_printf_float+0x9c>
 8012c20:	f108 0801 	add.w	r8, r8, #1
 8012c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c26:	3b01      	subs	r3, #1
 8012c28:	4543      	cmp	r3, r8
 8012c2a:	dcf1      	bgt.n	8012c10 <_printf_float+0x3d8>
 8012c2c:	4653      	mov	r3, sl
 8012c2e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012c32:	e6dd      	b.n	80129f0 <_printf_float+0x1b8>
 8012c34:	f04f 0800 	mov.w	r8, #0
 8012c38:	f104 091a 	add.w	r9, r4, #26
 8012c3c:	e7f2      	b.n	8012c24 <_printf_float+0x3ec>
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e7df      	b.n	8012c02 <_printf_float+0x3ca>
 8012c42:	2301      	movs	r3, #1
 8012c44:	464a      	mov	r2, r9
 8012c46:	4631      	mov	r1, r6
 8012c48:	4628      	mov	r0, r5
 8012c4a:	47b8      	blx	r7
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	f43f ae41 	beq.w	80128d4 <_printf_float+0x9c>
 8012c52:	f108 0801 	add.w	r8, r8, #1
 8012c56:	68e3      	ldr	r3, [r4, #12]
 8012c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c5a:	1a9b      	subs	r3, r3, r2
 8012c5c:	4543      	cmp	r3, r8
 8012c5e:	dcf0      	bgt.n	8012c42 <_printf_float+0x40a>
 8012c60:	e6fa      	b.n	8012a58 <_printf_float+0x220>
 8012c62:	f04f 0800 	mov.w	r8, #0
 8012c66:	f104 0919 	add.w	r9, r4, #25
 8012c6a:	e7f4      	b.n	8012c56 <_printf_float+0x41e>
 8012c6c:	2900      	cmp	r1, #0
 8012c6e:	f43f ae8a 	beq.w	8012986 <_printf_float+0x14e>
 8012c72:	f04f 0c00 	mov.w	ip, #0
 8012c76:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8012c7a:	e9cd 0900 	strd	r0, r9, [sp]
 8012c7e:	6022      	str	r2, [r4, #0]
 8012c80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012c84:	4628      	mov	r0, r5
 8012c86:	f7ff fd50 	bl	801272a <__cvt>
 8012c8a:	4680      	mov	r8, r0
 8012c8c:	e64a      	b.n	8012924 <_printf_float+0xec>
 8012c8e:	bf00      	nop

08012c90 <_printf_common>:
 8012c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c94:	4691      	mov	r9, r2
 8012c96:	461f      	mov	r7, r3
 8012c98:	688a      	ldr	r2, [r1, #8]
 8012c9a:	690b      	ldr	r3, [r1, #16]
 8012c9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	bfb8      	it	lt
 8012ca4:	4613      	movlt	r3, r2
 8012ca6:	f8c9 3000 	str.w	r3, [r9]
 8012caa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012cae:	4606      	mov	r6, r0
 8012cb0:	460c      	mov	r4, r1
 8012cb2:	b112      	cbz	r2, 8012cba <_printf_common+0x2a>
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	f8c9 3000 	str.w	r3, [r9]
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	0699      	lsls	r1, r3, #26
 8012cbe:	bf42      	ittt	mi
 8012cc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012cc4:	3302      	addmi	r3, #2
 8012cc6:	f8c9 3000 	strmi.w	r3, [r9]
 8012cca:	6825      	ldr	r5, [r4, #0]
 8012ccc:	f015 0506 	ands.w	r5, r5, #6
 8012cd0:	d107      	bne.n	8012ce2 <_printf_common+0x52>
 8012cd2:	f104 0a19 	add.w	sl, r4, #25
 8012cd6:	68e3      	ldr	r3, [r4, #12]
 8012cd8:	f8d9 2000 	ldr.w	r2, [r9]
 8012cdc:	1a9b      	subs	r3, r3, r2
 8012cde:	42ab      	cmp	r3, r5
 8012ce0:	dc28      	bgt.n	8012d34 <_printf_common+0xa4>
 8012ce2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012ce6:	6822      	ldr	r2, [r4, #0]
 8012ce8:	3300      	adds	r3, #0
 8012cea:	bf18      	it	ne
 8012cec:	2301      	movne	r3, #1
 8012cee:	0692      	lsls	r2, r2, #26
 8012cf0:	d42d      	bmi.n	8012d4e <_printf_common+0xbe>
 8012cf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012cf6:	4639      	mov	r1, r7
 8012cf8:	4630      	mov	r0, r6
 8012cfa:	47c0      	blx	r8
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	d020      	beq.n	8012d42 <_printf_common+0xb2>
 8012d00:	6823      	ldr	r3, [r4, #0]
 8012d02:	68e5      	ldr	r5, [r4, #12]
 8012d04:	f8d9 2000 	ldr.w	r2, [r9]
 8012d08:	f003 0306 	and.w	r3, r3, #6
 8012d0c:	2b04      	cmp	r3, #4
 8012d0e:	bf08      	it	eq
 8012d10:	1aad      	subeq	r5, r5, r2
 8012d12:	68a3      	ldr	r3, [r4, #8]
 8012d14:	6922      	ldr	r2, [r4, #16]
 8012d16:	bf0c      	ite	eq
 8012d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d1c:	2500      	movne	r5, #0
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	bfc4      	itt	gt
 8012d22:	1a9b      	subgt	r3, r3, r2
 8012d24:	18ed      	addgt	r5, r5, r3
 8012d26:	f04f 0900 	mov.w	r9, #0
 8012d2a:	341a      	adds	r4, #26
 8012d2c:	454d      	cmp	r5, r9
 8012d2e:	d11a      	bne.n	8012d66 <_printf_common+0xd6>
 8012d30:	2000      	movs	r0, #0
 8012d32:	e008      	b.n	8012d46 <_printf_common+0xb6>
 8012d34:	2301      	movs	r3, #1
 8012d36:	4652      	mov	r2, sl
 8012d38:	4639      	mov	r1, r7
 8012d3a:	4630      	mov	r0, r6
 8012d3c:	47c0      	blx	r8
 8012d3e:	3001      	adds	r0, #1
 8012d40:	d103      	bne.n	8012d4a <_printf_common+0xba>
 8012d42:	f04f 30ff 	mov.w	r0, #4294967295
 8012d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d4a:	3501      	adds	r5, #1
 8012d4c:	e7c3      	b.n	8012cd6 <_printf_common+0x46>
 8012d4e:	18e1      	adds	r1, r4, r3
 8012d50:	1c5a      	adds	r2, r3, #1
 8012d52:	2030      	movs	r0, #48	; 0x30
 8012d54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d58:	4422      	add	r2, r4
 8012d5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d62:	3302      	adds	r3, #2
 8012d64:	e7c5      	b.n	8012cf2 <_printf_common+0x62>
 8012d66:	2301      	movs	r3, #1
 8012d68:	4622      	mov	r2, r4
 8012d6a:	4639      	mov	r1, r7
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	47c0      	blx	r8
 8012d70:	3001      	adds	r0, #1
 8012d72:	d0e6      	beq.n	8012d42 <_printf_common+0xb2>
 8012d74:	f109 0901 	add.w	r9, r9, #1
 8012d78:	e7d8      	b.n	8012d2c <_printf_common+0x9c>
	...

08012d7c <_printf_i>:
 8012d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012d84:	460c      	mov	r4, r1
 8012d86:	7e09      	ldrb	r1, [r1, #24]
 8012d88:	b085      	sub	sp, #20
 8012d8a:	296e      	cmp	r1, #110	; 0x6e
 8012d8c:	4617      	mov	r7, r2
 8012d8e:	4606      	mov	r6, r0
 8012d90:	4698      	mov	r8, r3
 8012d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d94:	f000 80b3 	beq.w	8012efe <_printf_i+0x182>
 8012d98:	d822      	bhi.n	8012de0 <_printf_i+0x64>
 8012d9a:	2963      	cmp	r1, #99	; 0x63
 8012d9c:	d036      	beq.n	8012e0c <_printf_i+0x90>
 8012d9e:	d80a      	bhi.n	8012db6 <_printf_i+0x3a>
 8012da0:	2900      	cmp	r1, #0
 8012da2:	f000 80b9 	beq.w	8012f18 <_printf_i+0x19c>
 8012da6:	2958      	cmp	r1, #88	; 0x58
 8012da8:	f000 8083 	beq.w	8012eb2 <_printf_i+0x136>
 8012dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012db0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012db4:	e032      	b.n	8012e1c <_printf_i+0xa0>
 8012db6:	2964      	cmp	r1, #100	; 0x64
 8012db8:	d001      	beq.n	8012dbe <_printf_i+0x42>
 8012dba:	2969      	cmp	r1, #105	; 0x69
 8012dbc:	d1f6      	bne.n	8012dac <_printf_i+0x30>
 8012dbe:	6820      	ldr	r0, [r4, #0]
 8012dc0:	6813      	ldr	r3, [r2, #0]
 8012dc2:	0605      	lsls	r5, r0, #24
 8012dc4:	f103 0104 	add.w	r1, r3, #4
 8012dc8:	d52a      	bpl.n	8012e20 <_printf_i+0xa4>
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	6011      	str	r1, [r2, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	da03      	bge.n	8012dda <_printf_i+0x5e>
 8012dd2:	222d      	movs	r2, #45	; 0x2d
 8012dd4:	425b      	negs	r3, r3
 8012dd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012dda:	486f      	ldr	r0, [pc, #444]	; (8012f98 <_printf_i+0x21c>)
 8012ddc:	220a      	movs	r2, #10
 8012dde:	e039      	b.n	8012e54 <_printf_i+0xd8>
 8012de0:	2973      	cmp	r1, #115	; 0x73
 8012de2:	f000 809d 	beq.w	8012f20 <_printf_i+0x1a4>
 8012de6:	d808      	bhi.n	8012dfa <_printf_i+0x7e>
 8012de8:	296f      	cmp	r1, #111	; 0x6f
 8012dea:	d020      	beq.n	8012e2e <_printf_i+0xb2>
 8012dec:	2970      	cmp	r1, #112	; 0x70
 8012dee:	d1dd      	bne.n	8012dac <_printf_i+0x30>
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	f043 0320 	orr.w	r3, r3, #32
 8012df6:	6023      	str	r3, [r4, #0]
 8012df8:	e003      	b.n	8012e02 <_printf_i+0x86>
 8012dfa:	2975      	cmp	r1, #117	; 0x75
 8012dfc:	d017      	beq.n	8012e2e <_printf_i+0xb2>
 8012dfe:	2978      	cmp	r1, #120	; 0x78
 8012e00:	d1d4      	bne.n	8012dac <_printf_i+0x30>
 8012e02:	2378      	movs	r3, #120	; 0x78
 8012e04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012e08:	4864      	ldr	r0, [pc, #400]	; (8012f9c <_printf_i+0x220>)
 8012e0a:	e055      	b.n	8012eb8 <_printf_i+0x13c>
 8012e0c:	6813      	ldr	r3, [r2, #0]
 8012e0e:	1d19      	adds	r1, r3, #4
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	6011      	str	r1, [r2, #0]
 8012e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	e08c      	b.n	8012f3a <_printf_i+0x1be>
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	6011      	str	r1, [r2, #0]
 8012e24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e28:	bf18      	it	ne
 8012e2a:	b21b      	sxthne	r3, r3
 8012e2c:	e7cf      	b.n	8012dce <_printf_i+0x52>
 8012e2e:	6813      	ldr	r3, [r2, #0]
 8012e30:	6825      	ldr	r5, [r4, #0]
 8012e32:	1d18      	adds	r0, r3, #4
 8012e34:	6010      	str	r0, [r2, #0]
 8012e36:	0628      	lsls	r0, r5, #24
 8012e38:	d501      	bpl.n	8012e3e <_printf_i+0xc2>
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	e002      	b.n	8012e44 <_printf_i+0xc8>
 8012e3e:	0668      	lsls	r0, r5, #25
 8012e40:	d5fb      	bpl.n	8012e3a <_printf_i+0xbe>
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	4854      	ldr	r0, [pc, #336]	; (8012f98 <_printf_i+0x21c>)
 8012e46:	296f      	cmp	r1, #111	; 0x6f
 8012e48:	bf14      	ite	ne
 8012e4a:	220a      	movne	r2, #10
 8012e4c:	2208      	moveq	r2, #8
 8012e4e:	2100      	movs	r1, #0
 8012e50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e54:	6865      	ldr	r5, [r4, #4]
 8012e56:	60a5      	str	r5, [r4, #8]
 8012e58:	2d00      	cmp	r5, #0
 8012e5a:	f2c0 8095 	blt.w	8012f88 <_printf_i+0x20c>
 8012e5e:	6821      	ldr	r1, [r4, #0]
 8012e60:	f021 0104 	bic.w	r1, r1, #4
 8012e64:	6021      	str	r1, [r4, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d13d      	bne.n	8012ee6 <_printf_i+0x16a>
 8012e6a:	2d00      	cmp	r5, #0
 8012e6c:	f040 808e 	bne.w	8012f8c <_printf_i+0x210>
 8012e70:	4665      	mov	r5, ip
 8012e72:	2a08      	cmp	r2, #8
 8012e74:	d10b      	bne.n	8012e8e <_printf_i+0x112>
 8012e76:	6823      	ldr	r3, [r4, #0]
 8012e78:	07db      	lsls	r3, r3, #31
 8012e7a:	d508      	bpl.n	8012e8e <_printf_i+0x112>
 8012e7c:	6923      	ldr	r3, [r4, #16]
 8012e7e:	6862      	ldr	r2, [r4, #4]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	bfde      	ittt	le
 8012e84:	2330      	movle	r3, #48	; 0x30
 8012e86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e8e:	ebac 0305 	sub.w	r3, ip, r5
 8012e92:	6123      	str	r3, [r4, #16]
 8012e94:	f8cd 8000 	str.w	r8, [sp]
 8012e98:	463b      	mov	r3, r7
 8012e9a:	aa03      	add	r2, sp, #12
 8012e9c:	4621      	mov	r1, r4
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	f7ff fef6 	bl	8012c90 <_printf_common>
 8012ea4:	3001      	adds	r0, #1
 8012ea6:	d14d      	bne.n	8012f44 <_printf_i+0x1c8>
 8012ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8012eac:	b005      	add	sp, #20
 8012eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eb2:	4839      	ldr	r0, [pc, #228]	; (8012f98 <_printf_i+0x21c>)
 8012eb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012eb8:	6813      	ldr	r3, [r2, #0]
 8012eba:	6821      	ldr	r1, [r4, #0]
 8012ebc:	1d1d      	adds	r5, r3, #4
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	6015      	str	r5, [r2, #0]
 8012ec2:	060a      	lsls	r2, r1, #24
 8012ec4:	d50b      	bpl.n	8012ede <_printf_i+0x162>
 8012ec6:	07ca      	lsls	r2, r1, #31
 8012ec8:	bf44      	itt	mi
 8012eca:	f041 0120 	orrmi.w	r1, r1, #32
 8012ece:	6021      	strmi	r1, [r4, #0]
 8012ed0:	b91b      	cbnz	r3, 8012eda <_printf_i+0x15e>
 8012ed2:	6822      	ldr	r2, [r4, #0]
 8012ed4:	f022 0220 	bic.w	r2, r2, #32
 8012ed8:	6022      	str	r2, [r4, #0]
 8012eda:	2210      	movs	r2, #16
 8012edc:	e7b7      	b.n	8012e4e <_printf_i+0xd2>
 8012ede:	064d      	lsls	r5, r1, #25
 8012ee0:	bf48      	it	mi
 8012ee2:	b29b      	uxthmi	r3, r3
 8012ee4:	e7ef      	b.n	8012ec6 <_printf_i+0x14a>
 8012ee6:	4665      	mov	r5, ip
 8012ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012eec:	fb02 3311 	mls	r3, r2, r1, r3
 8012ef0:	5cc3      	ldrb	r3, [r0, r3]
 8012ef2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012ef6:	460b      	mov	r3, r1
 8012ef8:	2900      	cmp	r1, #0
 8012efa:	d1f5      	bne.n	8012ee8 <_printf_i+0x16c>
 8012efc:	e7b9      	b.n	8012e72 <_printf_i+0xf6>
 8012efe:	6813      	ldr	r3, [r2, #0]
 8012f00:	6825      	ldr	r5, [r4, #0]
 8012f02:	6961      	ldr	r1, [r4, #20]
 8012f04:	1d18      	adds	r0, r3, #4
 8012f06:	6010      	str	r0, [r2, #0]
 8012f08:	0628      	lsls	r0, r5, #24
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	d501      	bpl.n	8012f12 <_printf_i+0x196>
 8012f0e:	6019      	str	r1, [r3, #0]
 8012f10:	e002      	b.n	8012f18 <_printf_i+0x19c>
 8012f12:	066a      	lsls	r2, r5, #25
 8012f14:	d5fb      	bpl.n	8012f0e <_printf_i+0x192>
 8012f16:	8019      	strh	r1, [r3, #0]
 8012f18:	2300      	movs	r3, #0
 8012f1a:	6123      	str	r3, [r4, #16]
 8012f1c:	4665      	mov	r5, ip
 8012f1e:	e7b9      	b.n	8012e94 <_printf_i+0x118>
 8012f20:	6813      	ldr	r3, [r2, #0]
 8012f22:	1d19      	adds	r1, r3, #4
 8012f24:	6011      	str	r1, [r2, #0]
 8012f26:	681d      	ldr	r5, [r3, #0]
 8012f28:	6862      	ldr	r2, [r4, #4]
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	4628      	mov	r0, r5
 8012f2e:	f7ed f98f 	bl	8000250 <memchr>
 8012f32:	b108      	cbz	r0, 8012f38 <_printf_i+0x1bc>
 8012f34:	1b40      	subs	r0, r0, r5
 8012f36:	6060      	str	r0, [r4, #4]
 8012f38:	6863      	ldr	r3, [r4, #4]
 8012f3a:	6123      	str	r3, [r4, #16]
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f42:	e7a7      	b.n	8012e94 <_printf_i+0x118>
 8012f44:	6923      	ldr	r3, [r4, #16]
 8012f46:	462a      	mov	r2, r5
 8012f48:	4639      	mov	r1, r7
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	47c0      	blx	r8
 8012f4e:	3001      	adds	r0, #1
 8012f50:	d0aa      	beq.n	8012ea8 <_printf_i+0x12c>
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	079b      	lsls	r3, r3, #30
 8012f56:	d413      	bmi.n	8012f80 <_printf_i+0x204>
 8012f58:	68e0      	ldr	r0, [r4, #12]
 8012f5a:	9b03      	ldr	r3, [sp, #12]
 8012f5c:	4298      	cmp	r0, r3
 8012f5e:	bfb8      	it	lt
 8012f60:	4618      	movlt	r0, r3
 8012f62:	e7a3      	b.n	8012eac <_printf_i+0x130>
 8012f64:	2301      	movs	r3, #1
 8012f66:	464a      	mov	r2, r9
 8012f68:	4639      	mov	r1, r7
 8012f6a:	4630      	mov	r0, r6
 8012f6c:	47c0      	blx	r8
 8012f6e:	3001      	adds	r0, #1
 8012f70:	d09a      	beq.n	8012ea8 <_printf_i+0x12c>
 8012f72:	3501      	adds	r5, #1
 8012f74:	68e3      	ldr	r3, [r4, #12]
 8012f76:	9a03      	ldr	r2, [sp, #12]
 8012f78:	1a9b      	subs	r3, r3, r2
 8012f7a:	42ab      	cmp	r3, r5
 8012f7c:	dcf2      	bgt.n	8012f64 <_printf_i+0x1e8>
 8012f7e:	e7eb      	b.n	8012f58 <_printf_i+0x1dc>
 8012f80:	2500      	movs	r5, #0
 8012f82:	f104 0919 	add.w	r9, r4, #25
 8012f86:	e7f5      	b.n	8012f74 <_printf_i+0x1f8>
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d1ac      	bne.n	8012ee6 <_printf_i+0x16a>
 8012f8c:	7803      	ldrb	r3, [r0, #0]
 8012f8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f96:	e76c      	b.n	8012e72 <_printf_i+0xf6>
 8012f98:	080176ce 	.word	0x080176ce
 8012f9c:	080176df 	.word	0x080176df

08012fa0 <_scanf_float>:
 8012fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa4:	469a      	mov	sl, r3
 8012fa6:	688b      	ldr	r3, [r1, #8]
 8012fa8:	4616      	mov	r6, r2
 8012faa:	1e5a      	subs	r2, r3, #1
 8012fac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012fb0:	b087      	sub	sp, #28
 8012fb2:	bf83      	ittte	hi
 8012fb4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012fb8:	189b      	addhi	r3, r3, r2
 8012fba:	9301      	strhi	r3, [sp, #4]
 8012fbc:	2300      	movls	r3, #0
 8012fbe:	bf86      	itte	hi
 8012fc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012fc4:	608b      	strhi	r3, [r1, #8]
 8012fc6:	9301      	strls	r3, [sp, #4]
 8012fc8:	680b      	ldr	r3, [r1, #0]
 8012fca:	4688      	mov	r8, r1
 8012fcc:	f04f 0b00 	mov.w	fp, #0
 8012fd0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012fd4:	f848 3b1c 	str.w	r3, [r8], #28
 8012fd8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012fdc:	4607      	mov	r7, r0
 8012fde:	460c      	mov	r4, r1
 8012fe0:	4645      	mov	r5, r8
 8012fe2:	465a      	mov	r2, fp
 8012fe4:	46d9      	mov	r9, fp
 8012fe6:	f8cd b008 	str.w	fp, [sp, #8]
 8012fea:	68a1      	ldr	r1, [r4, #8]
 8012fec:	b181      	cbz	r1, 8013010 <_scanf_float+0x70>
 8012fee:	6833      	ldr	r3, [r6, #0]
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	2b49      	cmp	r3, #73	; 0x49
 8012ff4:	d071      	beq.n	80130da <_scanf_float+0x13a>
 8012ff6:	d84d      	bhi.n	8013094 <_scanf_float+0xf4>
 8012ff8:	2b39      	cmp	r3, #57	; 0x39
 8012ffa:	d840      	bhi.n	801307e <_scanf_float+0xde>
 8012ffc:	2b31      	cmp	r3, #49	; 0x31
 8012ffe:	f080 8088 	bcs.w	8013112 <_scanf_float+0x172>
 8013002:	2b2d      	cmp	r3, #45	; 0x2d
 8013004:	f000 8090 	beq.w	8013128 <_scanf_float+0x188>
 8013008:	d815      	bhi.n	8013036 <_scanf_float+0x96>
 801300a:	2b2b      	cmp	r3, #43	; 0x2b
 801300c:	f000 808c 	beq.w	8013128 <_scanf_float+0x188>
 8013010:	f1b9 0f00 	cmp.w	r9, #0
 8013014:	d003      	beq.n	801301e <_scanf_float+0x7e>
 8013016:	6823      	ldr	r3, [r4, #0]
 8013018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801301c:	6023      	str	r3, [r4, #0]
 801301e:	3a01      	subs	r2, #1
 8013020:	2a01      	cmp	r2, #1
 8013022:	f200 80ea 	bhi.w	80131fa <_scanf_float+0x25a>
 8013026:	4545      	cmp	r5, r8
 8013028:	f200 80dc 	bhi.w	80131e4 <_scanf_float+0x244>
 801302c:	2601      	movs	r6, #1
 801302e:	4630      	mov	r0, r6
 8013030:	b007      	add	sp, #28
 8013032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013036:	2b2e      	cmp	r3, #46	; 0x2e
 8013038:	f000 809f 	beq.w	801317a <_scanf_float+0x1da>
 801303c:	2b30      	cmp	r3, #48	; 0x30
 801303e:	d1e7      	bne.n	8013010 <_scanf_float+0x70>
 8013040:	6820      	ldr	r0, [r4, #0]
 8013042:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013046:	d064      	beq.n	8013112 <_scanf_float+0x172>
 8013048:	9b01      	ldr	r3, [sp, #4]
 801304a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801304e:	6020      	str	r0, [r4, #0]
 8013050:	f109 0901 	add.w	r9, r9, #1
 8013054:	b11b      	cbz	r3, 801305e <_scanf_float+0xbe>
 8013056:	3b01      	subs	r3, #1
 8013058:	3101      	adds	r1, #1
 801305a:	9301      	str	r3, [sp, #4]
 801305c:	60a1      	str	r1, [r4, #8]
 801305e:	68a3      	ldr	r3, [r4, #8]
 8013060:	3b01      	subs	r3, #1
 8013062:	60a3      	str	r3, [r4, #8]
 8013064:	6923      	ldr	r3, [r4, #16]
 8013066:	3301      	adds	r3, #1
 8013068:	6123      	str	r3, [r4, #16]
 801306a:	6873      	ldr	r3, [r6, #4]
 801306c:	3b01      	subs	r3, #1
 801306e:	2b00      	cmp	r3, #0
 8013070:	6073      	str	r3, [r6, #4]
 8013072:	f340 80ac 	ble.w	80131ce <_scanf_float+0x22e>
 8013076:	6833      	ldr	r3, [r6, #0]
 8013078:	3301      	adds	r3, #1
 801307a:	6033      	str	r3, [r6, #0]
 801307c:	e7b5      	b.n	8012fea <_scanf_float+0x4a>
 801307e:	2b45      	cmp	r3, #69	; 0x45
 8013080:	f000 8085 	beq.w	801318e <_scanf_float+0x1ee>
 8013084:	2b46      	cmp	r3, #70	; 0x46
 8013086:	d06a      	beq.n	801315e <_scanf_float+0x1be>
 8013088:	2b41      	cmp	r3, #65	; 0x41
 801308a:	d1c1      	bne.n	8013010 <_scanf_float+0x70>
 801308c:	2a01      	cmp	r2, #1
 801308e:	d1bf      	bne.n	8013010 <_scanf_float+0x70>
 8013090:	2202      	movs	r2, #2
 8013092:	e046      	b.n	8013122 <_scanf_float+0x182>
 8013094:	2b65      	cmp	r3, #101	; 0x65
 8013096:	d07a      	beq.n	801318e <_scanf_float+0x1ee>
 8013098:	d818      	bhi.n	80130cc <_scanf_float+0x12c>
 801309a:	2b54      	cmp	r3, #84	; 0x54
 801309c:	d066      	beq.n	801316c <_scanf_float+0x1cc>
 801309e:	d811      	bhi.n	80130c4 <_scanf_float+0x124>
 80130a0:	2b4e      	cmp	r3, #78	; 0x4e
 80130a2:	d1b5      	bne.n	8013010 <_scanf_float+0x70>
 80130a4:	2a00      	cmp	r2, #0
 80130a6:	d146      	bne.n	8013136 <_scanf_float+0x196>
 80130a8:	f1b9 0f00 	cmp.w	r9, #0
 80130ac:	d145      	bne.n	801313a <_scanf_float+0x19a>
 80130ae:	6821      	ldr	r1, [r4, #0]
 80130b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80130b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80130b8:	d13f      	bne.n	801313a <_scanf_float+0x19a>
 80130ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80130be:	6021      	str	r1, [r4, #0]
 80130c0:	2201      	movs	r2, #1
 80130c2:	e02e      	b.n	8013122 <_scanf_float+0x182>
 80130c4:	2b59      	cmp	r3, #89	; 0x59
 80130c6:	d01e      	beq.n	8013106 <_scanf_float+0x166>
 80130c8:	2b61      	cmp	r3, #97	; 0x61
 80130ca:	e7de      	b.n	801308a <_scanf_float+0xea>
 80130cc:	2b6e      	cmp	r3, #110	; 0x6e
 80130ce:	d0e9      	beq.n	80130a4 <_scanf_float+0x104>
 80130d0:	d815      	bhi.n	80130fe <_scanf_float+0x15e>
 80130d2:	2b66      	cmp	r3, #102	; 0x66
 80130d4:	d043      	beq.n	801315e <_scanf_float+0x1be>
 80130d6:	2b69      	cmp	r3, #105	; 0x69
 80130d8:	d19a      	bne.n	8013010 <_scanf_float+0x70>
 80130da:	f1bb 0f00 	cmp.w	fp, #0
 80130de:	d138      	bne.n	8013152 <_scanf_float+0x1b2>
 80130e0:	f1b9 0f00 	cmp.w	r9, #0
 80130e4:	d197      	bne.n	8013016 <_scanf_float+0x76>
 80130e6:	6821      	ldr	r1, [r4, #0]
 80130e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80130ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80130f0:	d195      	bne.n	801301e <_scanf_float+0x7e>
 80130f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80130f6:	6021      	str	r1, [r4, #0]
 80130f8:	f04f 0b01 	mov.w	fp, #1
 80130fc:	e011      	b.n	8013122 <_scanf_float+0x182>
 80130fe:	2b74      	cmp	r3, #116	; 0x74
 8013100:	d034      	beq.n	801316c <_scanf_float+0x1cc>
 8013102:	2b79      	cmp	r3, #121	; 0x79
 8013104:	d184      	bne.n	8013010 <_scanf_float+0x70>
 8013106:	f1bb 0f07 	cmp.w	fp, #7
 801310a:	d181      	bne.n	8013010 <_scanf_float+0x70>
 801310c:	f04f 0b08 	mov.w	fp, #8
 8013110:	e007      	b.n	8013122 <_scanf_float+0x182>
 8013112:	eb12 0f0b 	cmn.w	r2, fp
 8013116:	f47f af7b 	bne.w	8013010 <_scanf_float+0x70>
 801311a:	6821      	ldr	r1, [r4, #0]
 801311c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013120:	6021      	str	r1, [r4, #0]
 8013122:	702b      	strb	r3, [r5, #0]
 8013124:	3501      	adds	r5, #1
 8013126:	e79a      	b.n	801305e <_scanf_float+0xbe>
 8013128:	6821      	ldr	r1, [r4, #0]
 801312a:	0608      	lsls	r0, r1, #24
 801312c:	f57f af70 	bpl.w	8013010 <_scanf_float+0x70>
 8013130:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013134:	e7f4      	b.n	8013120 <_scanf_float+0x180>
 8013136:	2a02      	cmp	r2, #2
 8013138:	d047      	beq.n	80131ca <_scanf_float+0x22a>
 801313a:	f1bb 0f01 	cmp.w	fp, #1
 801313e:	d003      	beq.n	8013148 <_scanf_float+0x1a8>
 8013140:	f1bb 0f04 	cmp.w	fp, #4
 8013144:	f47f af64 	bne.w	8013010 <_scanf_float+0x70>
 8013148:	f10b 0b01 	add.w	fp, fp, #1
 801314c:	fa5f fb8b 	uxtb.w	fp, fp
 8013150:	e7e7      	b.n	8013122 <_scanf_float+0x182>
 8013152:	f1bb 0f03 	cmp.w	fp, #3
 8013156:	d0f7      	beq.n	8013148 <_scanf_float+0x1a8>
 8013158:	f1bb 0f05 	cmp.w	fp, #5
 801315c:	e7f2      	b.n	8013144 <_scanf_float+0x1a4>
 801315e:	f1bb 0f02 	cmp.w	fp, #2
 8013162:	f47f af55 	bne.w	8013010 <_scanf_float+0x70>
 8013166:	f04f 0b03 	mov.w	fp, #3
 801316a:	e7da      	b.n	8013122 <_scanf_float+0x182>
 801316c:	f1bb 0f06 	cmp.w	fp, #6
 8013170:	f47f af4e 	bne.w	8013010 <_scanf_float+0x70>
 8013174:	f04f 0b07 	mov.w	fp, #7
 8013178:	e7d3      	b.n	8013122 <_scanf_float+0x182>
 801317a:	6821      	ldr	r1, [r4, #0]
 801317c:	0588      	lsls	r0, r1, #22
 801317e:	f57f af47 	bpl.w	8013010 <_scanf_float+0x70>
 8013182:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013186:	6021      	str	r1, [r4, #0]
 8013188:	f8cd 9008 	str.w	r9, [sp, #8]
 801318c:	e7c9      	b.n	8013122 <_scanf_float+0x182>
 801318e:	6821      	ldr	r1, [r4, #0]
 8013190:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013194:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013198:	d006      	beq.n	80131a8 <_scanf_float+0x208>
 801319a:	0548      	lsls	r0, r1, #21
 801319c:	f57f af38 	bpl.w	8013010 <_scanf_float+0x70>
 80131a0:	f1b9 0f00 	cmp.w	r9, #0
 80131a4:	f43f af3b 	beq.w	801301e <_scanf_float+0x7e>
 80131a8:	0588      	lsls	r0, r1, #22
 80131aa:	bf58      	it	pl
 80131ac:	9802      	ldrpl	r0, [sp, #8]
 80131ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80131b2:	bf58      	it	pl
 80131b4:	eba9 0000 	subpl.w	r0, r9, r0
 80131b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80131bc:	bf58      	it	pl
 80131be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80131c2:	6021      	str	r1, [r4, #0]
 80131c4:	f04f 0900 	mov.w	r9, #0
 80131c8:	e7ab      	b.n	8013122 <_scanf_float+0x182>
 80131ca:	2203      	movs	r2, #3
 80131cc:	e7a9      	b.n	8013122 <_scanf_float+0x182>
 80131ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80131d2:	9205      	str	r2, [sp, #20]
 80131d4:	4631      	mov	r1, r6
 80131d6:	4638      	mov	r0, r7
 80131d8:	4798      	blx	r3
 80131da:	9a05      	ldr	r2, [sp, #20]
 80131dc:	2800      	cmp	r0, #0
 80131de:	f43f af04 	beq.w	8012fea <_scanf_float+0x4a>
 80131e2:	e715      	b.n	8013010 <_scanf_float+0x70>
 80131e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80131ec:	4632      	mov	r2, r6
 80131ee:	4638      	mov	r0, r7
 80131f0:	4798      	blx	r3
 80131f2:	6923      	ldr	r3, [r4, #16]
 80131f4:	3b01      	subs	r3, #1
 80131f6:	6123      	str	r3, [r4, #16]
 80131f8:	e715      	b.n	8013026 <_scanf_float+0x86>
 80131fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80131fe:	2b06      	cmp	r3, #6
 8013200:	d80a      	bhi.n	8013218 <_scanf_float+0x278>
 8013202:	f1bb 0f02 	cmp.w	fp, #2
 8013206:	d966      	bls.n	80132d6 <_scanf_float+0x336>
 8013208:	f1ab 0b03 	sub.w	fp, fp, #3
 801320c:	fa5f fb8b 	uxtb.w	fp, fp
 8013210:	eba5 0b0b 	sub.w	fp, r5, fp
 8013214:	455d      	cmp	r5, fp
 8013216:	d149      	bne.n	80132ac <_scanf_float+0x30c>
 8013218:	6823      	ldr	r3, [r4, #0]
 801321a:	05da      	lsls	r2, r3, #23
 801321c:	d51f      	bpl.n	801325e <_scanf_float+0x2be>
 801321e:	055b      	lsls	r3, r3, #21
 8013220:	d466      	bmi.n	80132f0 <_scanf_float+0x350>
 8013222:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013226:	6923      	ldr	r3, [r4, #16]
 8013228:	2965      	cmp	r1, #101	; 0x65
 801322a:	f103 33ff 	add.w	r3, r3, #4294967295
 801322e:	f105 3bff 	add.w	fp, r5, #4294967295
 8013232:	6123      	str	r3, [r4, #16]
 8013234:	d00d      	beq.n	8013252 <_scanf_float+0x2b2>
 8013236:	2945      	cmp	r1, #69	; 0x45
 8013238:	d00b      	beq.n	8013252 <_scanf_float+0x2b2>
 801323a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801323e:	4632      	mov	r2, r6
 8013240:	4638      	mov	r0, r7
 8013242:	4798      	blx	r3
 8013244:	6923      	ldr	r3, [r4, #16]
 8013246:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801324a:	3b01      	subs	r3, #1
 801324c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013250:	6123      	str	r3, [r4, #16]
 8013252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013256:	4632      	mov	r2, r6
 8013258:	4638      	mov	r0, r7
 801325a:	4798      	blx	r3
 801325c:	465d      	mov	r5, fp
 801325e:	6826      	ldr	r6, [r4, #0]
 8013260:	f016 0610 	ands.w	r6, r6, #16
 8013264:	d170      	bne.n	8013348 <_scanf_float+0x3a8>
 8013266:	702e      	strb	r6, [r5, #0]
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801326e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013272:	d140      	bne.n	80132f6 <_scanf_float+0x356>
 8013274:	9b02      	ldr	r3, [sp, #8]
 8013276:	eba9 0303 	sub.w	r3, r9, r3
 801327a:	425a      	negs	r2, r3
 801327c:	2b00      	cmp	r3, #0
 801327e:	d147      	bne.n	8013310 <_scanf_float+0x370>
 8013280:	2200      	movs	r2, #0
 8013282:	4638      	mov	r0, r7
 8013284:	4641      	mov	r1, r8
 8013286:	f000 fecf 	bl	8014028 <_strtod_r>
 801328a:	6820      	ldr	r0, [r4, #0]
 801328c:	f8da 3000 	ldr.w	r3, [sl]
 8013290:	f010 0f02 	tst.w	r0, #2
 8013294:	f103 0204 	add.w	r2, r3, #4
 8013298:	f8ca 2000 	str.w	r2, [sl]
 801329c:	d043      	beq.n	8013326 <_scanf_float+0x386>
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	ed83 0b00 	vstr	d0, [r3]
 80132a4:	68e3      	ldr	r3, [r4, #12]
 80132a6:	3301      	adds	r3, #1
 80132a8:	60e3      	str	r3, [r4, #12]
 80132aa:	e6c0      	b.n	801302e <_scanf_float+0x8e>
 80132ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80132b4:	4632      	mov	r2, r6
 80132b6:	4638      	mov	r0, r7
 80132b8:	4798      	blx	r3
 80132ba:	6923      	ldr	r3, [r4, #16]
 80132bc:	3b01      	subs	r3, #1
 80132be:	6123      	str	r3, [r4, #16]
 80132c0:	e7a8      	b.n	8013214 <_scanf_float+0x274>
 80132c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132c6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80132ca:	4632      	mov	r2, r6
 80132cc:	4638      	mov	r0, r7
 80132ce:	4798      	blx	r3
 80132d0:	6923      	ldr	r3, [r4, #16]
 80132d2:	3b01      	subs	r3, #1
 80132d4:	6123      	str	r3, [r4, #16]
 80132d6:	4545      	cmp	r5, r8
 80132d8:	d8f3      	bhi.n	80132c2 <_scanf_float+0x322>
 80132da:	e6a7      	b.n	801302c <_scanf_float+0x8c>
 80132dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80132e4:	4632      	mov	r2, r6
 80132e6:	4638      	mov	r0, r7
 80132e8:	4798      	blx	r3
 80132ea:	6923      	ldr	r3, [r4, #16]
 80132ec:	3b01      	subs	r3, #1
 80132ee:	6123      	str	r3, [r4, #16]
 80132f0:	4545      	cmp	r5, r8
 80132f2:	d8f3      	bhi.n	80132dc <_scanf_float+0x33c>
 80132f4:	e69a      	b.n	801302c <_scanf_float+0x8c>
 80132f6:	9b03      	ldr	r3, [sp, #12]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d0c1      	beq.n	8013280 <_scanf_float+0x2e0>
 80132fc:	9904      	ldr	r1, [sp, #16]
 80132fe:	230a      	movs	r3, #10
 8013300:	4632      	mov	r2, r6
 8013302:	3101      	adds	r1, #1
 8013304:	4638      	mov	r0, r7
 8013306:	f000 ff1b 	bl	8014140 <_strtol_r>
 801330a:	9b03      	ldr	r3, [sp, #12]
 801330c:	9d04      	ldr	r5, [sp, #16]
 801330e:	1ac2      	subs	r2, r0, r3
 8013310:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013314:	429d      	cmp	r5, r3
 8013316:	bf28      	it	cs
 8013318:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801331c:	490b      	ldr	r1, [pc, #44]	; (801334c <_scanf_float+0x3ac>)
 801331e:	4628      	mov	r0, r5
 8013320:	f000 f880 	bl	8013424 <siprintf>
 8013324:	e7ac      	b.n	8013280 <_scanf_float+0x2e0>
 8013326:	f010 0004 	ands.w	r0, r0, #4
 801332a:	d1b8      	bne.n	801329e <_scanf_float+0x2fe>
 801332c:	eeb4 0b40 	vcmp.f64	d0, d0
 8013330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013334:	681d      	ldr	r5, [r3, #0]
 8013336:	d704      	bvc.n	8013342 <_scanf_float+0x3a2>
 8013338:	f000 f86e 	bl	8013418 <nanf>
 801333c:	ed85 0a00 	vstr	s0, [r5]
 8013340:	e7b0      	b.n	80132a4 <_scanf_float+0x304>
 8013342:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013346:	e7f9      	b.n	801333c <_scanf_float+0x39c>
 8013348:	2600      	movs	r6, #0
 801334a:	e670      	b.n	801302e <_scanf_float+0x8e>
 801334c:	080176f0 	.word	0x080176f0

08013350 <_puts_r>:
 8013350:	b570      	push	{r4, r5, r6, lr}
 8013352:	460e      	mov	r6, r1
 8013354:	4605      	mov	r5, r0
 8013356:	b118      	cbz	r0, 8013360 <_puts_r+0x10>
 8013358:	6983      	ldr	r3, [r0, #24]
 801335a:	b90b      	cbnz	r3, 8013360 <_puts_r+0x10>
 801335c:	f001 fe8c 	bl	8015078 <__sinit>
 8013360:	69ab      	ldr	r3, [r5, #24]
 8013362:	68ac      	ldr	r4, [r5, #8]
 8013364:	b913      	cbnz	r3, 801336c <_puts_r+0x1c>
 8013366:	4628      	mov	r0, r5
 8013368:	f001 fe86 	bl	8015078 <__sinit>
 801336c:	4b23      	ldr	r3, [pc, #140]	; (80133fc <_puts_r+0xac>)
 801336e:	429c      	cmp	r4, r3
 8013370:	d117      	bne.n	80133a2 <_puts_r+0x52>
 8013372:	686c      	ldr	r4, [r5, #4]
 8013374:	89a3      	ldrh	r3, [r4, #12]
 8013376:	071b      	lsls	r3, r3, #28
 8013378:	d51d      	bpl.n	80133b6 <_puts_r+0x66>
 801337a:	6923      	ldr	r3, [r4, #16]
 801337c:	b1db      	cbz	r3, 80133b6 <_puts_r+0x66>
 801337e:	3e01      	subs	r6, #1
 8013380:	68a3      	ldr	r3, [r4, #8]
 8013382:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013386:	3b01      	subs	r3, #1
 8013388:	60a3      	str	r3, [r4, #8]
 801338a:	b9e9      	cbnz	r1, 80133c8 <_puts_r+0x78>
 801338c:	2b00      	cmp	r3, #0
 801338e:	da2e      	bge.n	80133ee <_puts_r+0x9e>
 8013390:	4622      	mov	r2, r4
 8013392:	210a      	movs	r1, #10
 8013394:	4628      	mov	r0, r5
 8013396:	f000 fee5 	bl	8014164 <__swbuf_r>
 801339a:	3001      	adds	r0, #1
 801339c:	d011      	beq.n	80133c2 <_puts_r+0x72>
 801339e:	200a      	movs	r0, #10
 80133a0:	e011      	b.n	80133c6 <_puts_r+0x76>
 80133a2:	4b17      	ldr	r3, [pc, #92]	; (8013400 <_puts_r+0xb0>)
 80133a4:	429c      	cmp	r4, r3
 80133a6:	d101      	bne.n	80133ac <_puts_r+0x5c>
 80133a8:	68ac      	ldr	r4, [r5, #8]
 80133aa:	e7e3      	b.n	8013374 <_puts_r+0x24>
 80133ac:	4b15      	ldr	r3, [pc, #84]	; (8013404 <_puts_r+0xb4>)
 80133ae:	429c      	cmp	r4, r3
 80133b0:	bf08      	it	eq
 80133b2:	68ec      	ldreq	r4, [r5, #12]
 80133b4:	e7de      	b.n	8013374 <_puts_r+0x24>
 80133b6:	4621      	mov	r1, r4
 80133b8:	4628      	mov	r0, r5
 80133ba:	f000 ff25 	bl	8014208 <__swsetup_r>
 80133be:	2800      	cmp	r0, #0
 80133c0:	d0dd      	beq.n	801337e <_puts_r+0x2e>
 80133c2:	f04f 30ff 	mov.w	r0, #4294967295
 80133c6:	bd70      	pop	{r4, r5, r6, pc}
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	da04      	bge.n	80133d6 <_puts_r+0x86>
 80133cc:	69a2      	ldr	r2, [r4, #24]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	dc06      	bgt.n	80133e0 <_puts_r+0x90>
 80133d2:	290a      	cmp	r1, #10
 80133d4:	d004      	beq.n	80133e0 <_puts_r+0x90>
 80133d6:	6823      	ldr	r3, [r4, #0]
 80133d8:	1c5a      	adds	r2, r3, #1
 80133da:	6022      	str	r2, [r4, #0]
 80133dc:	7019      	strb	r1, [r3, #0]
 80133de:	e7cf      	b.n	8013380 <_puts_r+0x30>
 80133e0:	4622      	mov	r2, r4
 80133e2:	4628      	mov	r0, r5
 80133e4:	f000 febe 	bl	8014164 <__swbuf_r>
 80133e8:	3001      	adds	r0, #1
 80133ea:	d1c9      	bne.n	8013380 <_puts_r+0x30>
 80133ec:	e7e9      	b.n	80133c2 <_puts_r+0x72>
 80133ee:	6823      	ldr	r3, [r4, #0]
 80133f0:	200a      	movs	r0, #10
 80133f2:	1c5a      	adds	r2, r3, #1
 80133f4:	6022      	str	r2, [r4, #0]
 80133f6:	7018      	strb	r0, [r3, #0]
 80133f8:	e7e5      	b.n	80133c6 <_puts_r+0x76>
 80133fa:	bf00      	nop
 80133fc:	08017778 	.word	0x08017778
 8013400:	08017798 	.word	0x08017798
 8013404:	08017758 	.word	0x08017758

08013408 <puts>:
 8013408:	4b02      	ldr	r3, [pc, #8]	; (8013414 <puts+0xc>)
 801340a:	4601      	mov	r1, r0
 801340c:	6818      	ldr	r0, [r3, #0]
 801340e:	f7ff bf9f 	b.w	8013350 <_puts_r>
 8013412:	bf00      	nop
 8013414:	200001a8 	.word	0x200001a8

08013418 <nanf>:
 8013418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013420 <nanf+0x8>
 801341c:	4770      	bx	lr
 801341e:	bf00      	nop
 8013420:	7fc00000 	.word	0x7fc00000

08013424 <siprintf>:
 8013424:	b40e      	push	{r1, r2, r3}
 8013426:	b500      	push	{lr}
 8013428:	b09c      	sub	sp, #112	; 0x70
 801342a:	ab1d      	add	r3, sp, #116	; 0x74
 801342c:	9002      	str	r0, [sp, #8]
 801342e:	9006      	str	r0, [sp, #24]
 8013430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013434:	4809      	ldr	r0, [pc, #36]	; (801345c <siprintf+0x38>)
 8013436:	9107      	str	r1, [sp, #28]
 8013438:	9104      	str	r1, [sp, #16]
 801343a:	4909      	ldr	r1, [pc, #36]	; (8013460 <siprintf+0x3c>)
 801343c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013440:	9105      	str	r1, [sp, #20]
 8013442:	6800      	ldr	r0, [r0, #0]
 8013444:	9301      	str	r3, [sp, #4]
 8013446:	a902      	add	r1, sp, #8
 8013448:	f002 ff68 	bl	801631c <_svfiprintf_r>
 801344c:	9b02      	ldr	r3, [sp, #8]
 801344e:	2200      	movs	r2, #0
 8013450:	701a      	strb	r2, [r3, #0]
 8013452:	b01c      	add	sp, #112	; 0x70
 8013454:	f85d eb04 	ldr.w	lr, [sp], #4
 8013458:	b003      	add	sp, #12
 801345a:	4770      	bx	lr
 801345c:	200001a8 	.word	0x200001a8
 8013460:	ffff0208 	.word	0xffff0208

08013464 <sulp>:
 8013464:	b570      	push	{r4, r5, r6, lr}
 8013466:	4604      	mov	r4, r0
 8013468:	460d      	mov	r5, r1
 801346a:	4616      	mov	r6, r2
 801346c:	ec45 4b10 	vmov	d0, r4, r5
 8013470:	f002 fd10 	bl	8015e94 <__ulp>
 8013474:	b17e      	cbz	r6, 8013496 <sulp+0x32>
 8013476:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801347a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801347e:	2b00      	cmp	r3, #0
 8013480:	dd09      	ble.n	8013496 <sulp+0x32>
 8013482:	051b      	lsls	r3, r3, #20
 8013484:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013488:	2000      	movs	r0, #0
 801348a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801348e:	ec41 0b17 	vmov	d7, r0, r1
 8013492:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013496:	bd70      	pop	{r4, r5, r6, pc}

08013498 <_strtod_l>:
 8013498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349c:	ed2d 8b0c 	vpush	{d8-d13}
 80134a0:	4698      	mov	r8, r3
 80134a2:	b09d      	sub	sp, #116	; 0x74
 80134a4:	2300      	movs	r3, #0
 80134a6:	4604      	mov	r4, r0
 80134a8:	4640      	mov	r0, r8
 80134aa:	460e      	mov	r6, r1
 80134ac:	9214      	str	r2, [sp, #80]	; 0x50
 80134ae:	9318      	str	r3, [sp, #96]	; 0x60
 80134b0:	f002 f995 	bl	80157de <__localeconv_l>
 80134b4:	4681      	mov	r9, r0
 80134b6:	6800      	ldr	r0, [r0, #0]
 80134b8:	f7ec fec2 	bl	8000240 <strlen>
 80134bc:	f04f 0a00 	mov.w	sl, #0
 80134c0:	4607      	mov	r7, r0
 80134c2:	f04f 0b00 	mov.w	fp, #0
 80134c6:	9617      	str	r6, [sp, #92]	; 0x5c
 80134c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80134ca:	781a      	ldrb	r2, [r3, #0]
 80134cc:	2a0d      	cmp	r2, #13
 80134ce:	d834      	bhi.n	801353a <_strtod_l+0xa2>
 80134d0:	2a09      	cmp	r2, #9
 80134d2:	d238      	bcs.n	8013546 <_strtod_l+0xae>
 80134d4:	2a00      	cmp	r2, #0
 80134d6:	d040      	beq.n	801355a <_strtod_l+0xc2>
 80134d8:	2300      	movs	r3, #0
 80134da:	930d      	str	r3, [sp, #52]	; 0x34
 80134dc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80134de:	782b      	ldrb	r3, [r5, #0]
 80134e0:	2b30      	cmp	r3, #48	; 0x30
 80134e2:	f040 80b3 	bne.w	801364c <_strtod_l+0x1b4>
 80134e6:	786b      	ldrb	r3, [r5, #1]
 80134e8:	2b58      	cmp	r3, #88	; 0x58
 80134ea:	d001      	beq.n	80134f0 <_strtod_l+0x58>
 80134ec:	2b78      	cmp	r3, #120	; 0x78
 80134ee:	d169      	bne.n	80135c4 <_strtod_l+0x12c>
 80134f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134f2:	9301      	str	r3, [sp, #4]
 80134f4:	ab18      	add	r3, sp, #96	; 0x60
 80134f6:	9300      	str	r3, [sp, #0]
 80134f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80134fc:	ab19      	add	r3, sp, #100	; 0x64
 80134fe:	4a8f      	ldr	r2, [pc, #572]	; (801373c <_strtod_l+0x2a4>)
 8013500:	a917      	add	r1, sp, #92	; 0x5c
 8013502:	4620      	mov	r0, r4
 8013504:	f001 fe91 	bl	801522a <__gethex>
 8013508:	f010 0607 	ands.w	r6, r0, #7
 801350c:	4607      	mov	r7, r0
 801350e:	d005      	beq.n	801351c <_strtod_l+0x84>
 8013510:	2e06      	cmp	r6, #6
 8013512:	d12c      	bne.n	801356e <_strtod_l+0xd6>
 8013514:	3501      	adds	r5, #1
 8013516:	2300      	movs	r3, #0
 8013518:	9517      	str	r5, [sp, #92]	; 0x5c
 801351a:	930d      	str	r3, [sp, #52]	; 0x34
 801351c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801351e:	2b00      	cmp	r3, #0
 8013520:	f040 855e 	bne.w	8013fe0 <_strtod_l+0xb48>
 8013524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013526:	b1eb      	cbz	r3, 8013564 <_strtod_l+0xcc>
 8013528:	ec4b ab17 	vmov	d7, sl, fp
 801352c:	eeb1 0b47 	vneg.f64	d0, d7
 8013530:	b01d      	add	sp, #116	; 0x74
 8013532:	ecbd 8b0c 	vpop	{d8-d13}
 8013536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801353a:	2a2b      	cmp	r2, #43	; 0x2b
 801353c:	d015      	beq.n	801356a <_strtod_l+0xd2>
 801353e:	2a2d      	cmp	r2, #45	; 0x2d
 8013540:	d004      	beq.n	801354c <_strtod_l+0xb4>
 8013542:	2a20      	cmp	r2, #32
 8013544:	d1c8      	bne.n	80134d8 <_strtod_l+0x40>
 8013546:	3301      	adds	r3, #1
 8013548:	9317      	str	r3, [sp, #92]	; 0x5c
 801354a:	e7bd      	b.n	80134c8 <_strtod_l+0x30>
 801354c:	2201      	movs	r2, #1
 801354e:	920d      	str	r2, [sp, #52]	; 0x34
 8013550:	1c5a      	adds	r2, r3, #1
 8013552:	9217      	str	r2, [sp, #92]	; 0x5c
 8013554:	785b      	ldrb	r3, [r3, #1]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d1c0      	bne.n	80134dc <_strtod_l+0x44>
 801355a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801355c:	9617      	str	r6, [sp, #92]	; 0x5c
 801355e:	2b00      	cmp	r3, #0
 8013560:	f040 853c 	bne.w	8013fdc <_strtod_l+0xb44>
 8013564:	ec4b ab10 	vmov	d0, sl, fp
 8013568:	e7e2      	b.n	8013530 <_strtod_l+0x98>
 801356a:	2200      	movs	r2, #0
 801356c:	e7ef      	b.n	801354e <_strtod_l+0xb6>
 801356e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013570:	b13a      	cbz	r2, 8013582 <_strtod_l+0xea>
 8013572:	2135      	movs	r1, #53	; 0x35
 8013574:	a81a      	add	r0, sp, #104	; 0x68
 8013576:	f002 fd86 	bl	8016086 <__copybits>
 801357a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801357c:	4620      	mov	r0, r4
 801357e:	f002 f9f1 	bl	8015964 <_Bfree>
 8013582:	3e01      	subs	r6, #1
 8013584:	2e04      	cmp	r6, #4
 8013586:	d806      	bhi.n	8013596 <_strtod_l+0xfe>
 8013588:	e8df f006 	tbb	[pc, r6]
 801358c:	1714030a 	.word	0x1714030a
 8013590:	0a          	.byte	0x0a
 8013591:	00          	.byte	0x00
 8013592:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8013596:	073b      	lsls	r3, r7, #28
 8013598:	d5c0      	bpl.n	801351c <_strtod_l+0x84>
 801359a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801359e:	e7bd      	b.n	801351c <_strtod_l+0x84>
 80135a0:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80135a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80135a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80135aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80135ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80135b2:	e7f0      	b.n	8013596 <_strtod_l+0xfe>
 80135b4:	f8df b188 	ldr.w	fp, [pc, #392]	; 8013740 <_strtod_l+0x2a8>
 80135b8:	e7ed      	b.n	8013596 <_strtod_l+0xfe>
 80135ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80135be:	f04f 3aff 	mov.w	sl, #4294967295
 80135c2:	e7e8      	b.n	8013596 <_strtod_l+0xfe>
 80135c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80135c6:	1c5a      	adds	r2, r3, #1
 80135c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80135ca:	785b      	ldrb	r3, [r3, #1]
 80135cc:	2b30      	cmp	r3, #48	; 0x30
 80135ce:	d0f9      	beq.n	80135c4 <_strtod_l+0x12c>
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d0a3      	beq.n	801351c <_strtod_l+0x84>
 80135d4:	2301      	movs	r3, #1
 80135d6:	930a      	str	r3, [sp, #40]	; 0x28
 80135d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80135da:	930c      	str	r3, [sp, #48]	; 0x30
 80135dc:	2300      	movs	r3, #0
 80135de:	9306      	str	r3, [sp, #24]
 80135e0:	9308      	str	r3, [sp, #32]
 80135e2:	461d      	mov	r5, r3
 80135e4:	220a      	movs	r2, #10
 80135e6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80135e8:	f890 8000 	ldrb.w	r8, [r0]
 80135ec:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 80135f0:	b2d9      	uxtb	r1, r3
 80135f2:	2909      	cmp	r1, #9
 80135f4:	d92c      	bls.n	8013650 <_strtod_l+0x1b8>
 80135f6:	463a      	mov	r2, r7
 80135f8:	f8d9 1000 	ldr.w	r1, [r9]
 80135fc:	f002 ffd9 	bl	80165b2 <strncmp>
 8013600:	2800      	cmp	r0, #0
 8013602:	d035      	beq.n	8013670 <_strtod_l+0x1d8>
 8013604:	2000      	movs	r0, #0
 8013606:	4642      	mov	r2, r8
 8013608:	462b      	mov	r3, r5
 801360a:	4601      	mov	r1, r0
 801360c:	9004      	str	r0, [sp, #16]
 801360e:	2a65      	cmp	r2, #101	; 0x65
 8013610:	d001      	beq.n	8013616 <_strtod_l+0x17e>
 8013612:	2a45      	cmp	r2, #69	; 0x45
 8013614:	d117      	bne.n	8013646 <_strtod_l+0x1ae>
 8013616:	b923      	cbnz	r3, 8013622 <_strtod_l+0x18a>
 8013618:	b910      	cbnz	r0, 8013620 <_strtod_l+0x188>
 801361a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801361c:	2b00      	cmp	r3, #0
 801361e:	d09c      	beq.n	801355a <_strtod_l+0xc2>
 8013620:	2300      	movs	r3, #0
 8013622:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013624:	1c72      	adds	r2, r6, #1
 8013626:	9217      	str	r2, [sp, #92]	; 0x5c
 8013628:	7872      	ldrb	r2, [r6, #1]
 801362a:	2a2b      	cmp	r2, #43	; 0x2b
 801362c:	f000 8082 	beq.w	8013734 <_strtod_l+0x29c>
 8013630:	2a2d      	cmp	r2, #45	; 0x2d
 8013632:	d079      	beq.n	8013728 <_strtod_l+0x290>
 8013634:	f04f 0e00 	mov.w	lr, #0
 8013638:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801363c:	f1bc 0f09 	cmp.w	ip, #9
 8013640:	f240 8086 	bls.w	8013750 <_strtod_l+0x2b8>
 8013644:	9617      	str	r6, [sp, #92]	; 0x5c
 8013646:	f04f 0800 	mov.w	r8, #0
 801364a:	e0a8      	b.n	801379e <_strtod_l+0x306>
 801364c:	2300      	movs	r3, #0
 801364e:	e7c2      	b.n	80135d6 <_strtod_l+0x13e>
 8013650:	2d08      	cmp	r5, #8
 8013652:	bfd5      	itete	le
 8013654:	9908      	ldrle	r1, [sp, #32]
 8013656:	9906      	ldrgt	r1, [sp, #24]
 8013658:	fb02 3301 	mlale	r3, r2, r1, r3
 801365c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013660:	f100 0001 	add.w	r0, r0, #1
 8013664:	bfd4      	ite	le
 8013666:	9308      	strle	r3, [sp, #32]
 8013668:	9306      	strgt	r3, [sp, #24]
 801366a:	3501      	adds	r5, #1
 801366c:	9017      	str	r0, [sp, #92]	; 0x5c
 801366e:	e7ba      	b.n	80135e6 <_strtod_l+0x14e>
 8013670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013672:	19da      	adds	r2, r3, r7
 8013674:	9217      	str	r2, [sp, #92]	; 0x5c
 8013676:	5dda      	ldrb	r2, [r3, r7]
 8013678:	2d00      	cmp	r5, #0
 801367a:	d038      	beq.n	80136ee <_strtod_l+0x256>
 801367c:	4601      	mov	r1, r0
 801367e:	462b      	mov	r3, r5
 8013680:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8013684:	2f09      	cmp	r7, #9
 8013686:	d913      	bls.n	80136b0 <_strtod_l+0x218>
 8013688:	2701      	movs	r7, #1
 801368a:	9704      	str	r7, [sp, #16]
 801368c:	e7bf      	b.n	801360e <_strtod_l+0x176>
 801368e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013690:	1c5a      	adds	r2, r3, #1
 8013692:	9217      	str	r2, [sp, #92]	; 0x5c
 8013694:	785a      	ldrb	r2, [r3, #1]
 8013696:	3001      	adds	r0, #1
 8013698:	2a30      	cmp	r2, #48	; 0x30
 801369a:	d0f8      	beq.n	801368e <_strtod_l+0x1f6>
 801369c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80136a0:	2b08      	cmp	r3, #8
 80136a2:	f200 84a2 	bhi.w	8013fea <_strtod_l+0xb52>
 80136a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80136a8:	930c      	str	r3, [sp, #48]	; 0x30
 80136aa:	4601      	mov	r1, r0
 80136ac:	2000      	movs	r0, #0
 80136ae:	4603      	mov	r3, r0
 80136b0:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 80136b4:	f100 0701 	add.w	r7, r0, #1
 80136b8:	d013      	beq.n	80136e2 <_strtod_l+0x24a>
 80136ba:	4439      	add	r1, r7
 80136bc:	eb00 0e03 	add.w	lr, r0, r3
 80136c0:	461f      	mov	r7, r3
 80136c2:	f04f 0c0a 	mov.w	ip, #10
 80136c6:	45be      	cmp	lr, r7
 80136c8:	d113      	bne.n	80136f2 <_strtod_l+0x25a>
 80136ca:	181f      	adds	r7, r3, r0
 80136cc:	2f08      	cmp	r7, #8
 80136ce:	f103 0301 	add.w	r3, r3, #1
 80136d2:	4403      	add	r3, r0
 80136d4:	dc1d      	bgt.n	8013712 <_strtod_l+0x27a>
 80136d6:	9a08      	ldr	r2, [sp, #32]
 80136d8:	200a      	movs	r0, #10
 80136da:	fb00 8202 	mla	r2, r0, r2, r8
 80136de:	9208      	str	r2, [sp, #32]
 80136e0:	2700      	movs	r7, #0
 80136e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80136e4:	1c50      	adds	r0, r2, #1
 80136e6:	9017      	str	r0, [sp, #92]	; 0x5c
 80136e8:	7852      	ldrb	r2, [r2, #1]
 80136ea:	4638      	mov	r0, r7
 80136ec:	e7c8      	b.n	8013680 <_strtod_l+0x1e8>
 80136ee:	4628      	mov	r0, r5
 80136f0:	e7d2      	b.n	8013698 <_strtod_l+0x200>
 80136f2:	2f08      	cmp	r7, #8
 80136f4:	f107 0701 	add.w	r7, r7, #1
 80136f8:	dc04      	bgt.n	8013704 <_strtod_l+0x26c>
 80136fa:	9a08      	ldr	r2, [sp, #32]
 80136fc:	fb0c f202 	mul.w	r2, ip, r2
 8013700:	9208      	str	r2, [sp, #32]
 8013702:	e7e0      	b.n	80136c6 <_strtod_l+0x22e>
 8013704:	2f10      	cmp	r7, #16
 8013706:	bfde      	ittt	le
 8013708:	9a06      	ldrle	r2, [sp, #24]
 801370a:	fb0c f202 	mulle.w	r2, ip, r2
 801370e:	9206      	strle	r2, [sp, #24]
 8013710:	e7d9      	b.n	80136c6 <_strtod_l+0x22e>
 8013712:	2b10      	cmp	r3, #16
 8013714:	bfdf      	itttt	le
 8013716:	9a06      	ldrle	r2, [sp, #24]
 8013718:	200a      	movle	r0, #10
 801371a:	fb00 8202 	mlale	r2, r0, r2, r8
 801371e:	9206      	strle	r2, [sp, #24]
 8013720:	e7de      	b.n	80136e0 <_strtod_l+0x248>
 8013722:	2301      	movs	r3, #1
 8013724:	9304      	str	r3, [sp, #16]
 8013726:	e777      	b.n	8013618 <_strtod_l+0x180>
 8013728:	f04f 0e01 	mov.w	lr, #1
 801372c:	1cb2      	adds	r2, r6, #2
 801372e:	9217      	str	r2, [sp, #92]	; 0x5c
 8013730:	78b2      	ldrb	r2, [r6, #2]
 8013732:	e781      	b.n	8013638 <_strtod_l+0x1a0>
 8013734:	f04f 0e00 	mov.w	lr, #0
 8013738:	e7f8      	b.n	801372c <_strtod_l+0x294>
 801373a:	bf00      	nop
 801373c:	080176f8 	.word	0x080176f8
 8013740:	7ff00000 	.word	0x7ff00000
 8013744:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013746:	f102 0c01 	add.w	ip, r2, #1
 801374a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801374e:	7852      	ldrb	r2, [r2, #1]
 8013750:	2a30      	cmp	r2, #48	; 0x30
 8013752:	d0f7      	beq.n	8013744 <_strtod_l+0x2ac>
 8013754:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8013758:	f1bc 0f08 	cmp.w	ip, #8
 801375c:	f63f af73 	bhi.w	8013646 <_strtod_l+0x1ae>
 8013760:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8013764:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013766:	920e      	str	r2, [sp, #56]	; 0x38
 8013768:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801376a:	f102 0c01 	add.w	ip, r2, #1
 801376e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8013772:	7852      	ldrb	r2, [r2, #1]
 8013774:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8013778:	f1b9 0f09 	cmp.w	r9, #9
 801377c:	d939      	bls.n	80137f2 <_strtod_l+0x35a>
 801377e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8013780:	ebac 0c07 	sub.w	ip, ip, r7
 8013784:	f1bc 0f08 	cmp.w	ip, #8
 8013788:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 801378c:	dc37      	bgt.n	80137fe <_strtod_l+0x366>
 801378e:	45e0      	cmp	r8, ip
 8013790:	bfa8      	it	ge
 8013792:	46e0      	movge	r8, ip
 8013794:	f1be 0f00 	cmp.w	lr, #0
 8013798:	d001      	beq.n	801379e <_strtod_l+0x306>
 801379a:	f1c8 0800 	rsb	r8, r8, #0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d151      	bne.n	8013846 <_strtod_l+0x3ae>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	f47f aeba 	bne.w	801351c <_strtod_l+0x84>
 80137a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	f47f aeb6 	bne.w	801351c <_strtod_l+0x84>
 80137b0:	9b04      	ldr	r3, [sp, #16]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f47f aed1 	bne.w	801355a <_strtod_l+0xc2>
 80137b8:	2a4e      	cmp	r2, #78	; 0x4e
 80137ba:	d027      	beq.n	801380c <_strtod_l+0x374>
 80137bc:	dc21      	bgt.n	8013802 <_strtod_l+0x36a>
 80137be:	2a49      	cmp	r2, #73	; 0x49
 80137c0:	f47f aecb 	bne.w	801355a <_strtod_l+0xc2>
 80137c4:	499a      	ldr	r1, [pc, #616]	; (8013a30 <_strtod_l+0x598>)
 80137c6:	a817      	add	r0, sp, #92	; 0x5c
 80137c8:	f001 ff62 	bl	8015690 <__match>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	f43f aec4 	beq.w	801355a <_strtod_l+0xc2>
 80137d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137d4:	4997      	ldr	r1, [pc, #604]	; (8013a34 <_strtod_l+0x59c>)
 80137d6:	3b01      	subs	r3, #1
 80137d8:	a817      	add	r0, sp, #92	; 0x5c
 80137da:	9317      	str	r3, [sp, #92]	; 0x5c
 80137dc:	f001 ff58 	bl	8015690 <__match>
 80137e0:	b910      	cbnz	r0, 80137e8 <_strtod_l+0x350>
 80137e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137e4:	3301      	adds	r3, #1
 80137e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80137e8:	f8df b260 	ldr.w	fp, [pc, #608]	; 8013a4c <_strtod_l+0x5b4>
 80137ec:	f04f 0a00 	mov.w	sl, #0
 80137f0:	e694      	b.n	801351c <_strtod_l+0x84>
 80137f2:	270a      	movs	r7, #10
 80137f4:	fb07 2808 	mla	r8, r7, r8, r2
 80137f8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80137fc:	e7b4      	b.n	8013768 <_strtod_l+0x2d0>
 80137fe:	46e0      	mov	r8, ip
 8013800:	e7c8      	b.n	8013794 <_strtod_l+0x2fc>
 8013802:	2a69      	cmp	r2, #105	; 0x69
 8013804:	d0de      	beq.n	80137c4 <_strtod_l+0x32c>
 8013806:	2a6e      	cmp	r2, #110	; 0x6e
 8013808:	f47f aea7 	bne.w	801355a <_strtod_l+0xc2>
 801380c:	498a      	ldr	r1, [pc, #552]	; (8013a38 <_strtod_l+0x5a0>)
 801380e:	a817      	add	r0, sp, #92	; 0x5c
 8013810:	f001 ff3e 	bl	8015690 <__match>
 8013814:	2800      	cmp	r0, #0
 8013816:	f43f aea0 	beq.w	801355a <_strtod_l+0xc2>
 801381a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	2b28      	cmp	r3, #40	; 0x28
 8013820:	d10e      	bne.n	8013840 <_strtod_l+0x3a8>
 8013822:	aa1a      	add	r2, sp, #104	; 0x68
 8013824:	4985      	ldr	r1, [pc, #532]	; (8013a3c <_strtod_l+0x5a4>)
 8013826:	a817      	add	r0, sp, #92	; 0x5c
 8013828:	f001 ff46 	bl	80156b8 <__hexnan>
 801382c:	2805      	cmp	r0, #5
 801382e:	d107      	bne.n	8013840 <_strtod_l+0x3a8>
 8013830:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013832:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013836:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801383a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801383e:	e66d      	b.n	801351c <_strtod_l+0x84>
 8013840:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8013a50 <_strtod_l+0x5b8>
 8013844:	e7d2      	b.n	80137ec <_strtod_l+0x354>
 8013846:	eddd 7a08 	vldr	s15, [sp, #32]
 801384a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801384e:	eba8 0201 	sub.w	r2, r8, r1
 8013852:	2d00      	cmp	r5, #0
 8013854:	bf08      	it	eq
 8013856:	461d      	moveq	r5, r3
 8013858:	2b10      	cmp	r3, #16
 801385a:	9204      	str	r2, [sp, #16]
 801385c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013860:	461a      	mov	r2, r3
 8013862:	bfa8      	it	ge
 8013864:	2210      	movge	r2, #16
 8013866:	2b09      	cmp	r3, #9
 8013868:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801386c:	dc14      	bgt.n	8013898 <_strtod_l+0x400>
 801386e:	9904      	ldr	r1, [sp, #16]
 8013870:	2900      	cmp	r1, #0
 8013872:	f43f ae53 	beq.w	801351c <_strtod_l+0x84>
 8013876:	9904      	ldr	r1, [sp, #16]
 8013878:	dd72      	ble.n	8013960 <_strtod_l+0x4c8>
 801387a:	2916      	cmp	r1, #22
 801387c:	dc5a      	bgt.n	8013934 <_strtod_l+0x49c>
 801387e:	4970      	ldr	r1, [pc, #448]	; (8013a40 <_strtod_l+0x5a8>)
 8013880:	9b04      	ldr	r3, [sp, #16]
 8013882:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013886:	ed91 7b00 	vldr	d7, [r1]
 801388a:	ec4b ab16 	vmov	d6, sl, fp
 801388e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013892:	ec5b ab17 	vmov	sl, fp, d7
 8013896:	e641      	b.n	801351c <_strtod_l+0x84>
 8013898:	4969      	ldr	r1, [pc, #420]	; (8013a40 <_strtod_l+0x5a8>)
 801389a:	eddd 7a06 	vldr	s15, [sp, #24]
 801389e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80138a2:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80138a6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80138aa:	2b0f      	cmp	r3, #15
 80138ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80138b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80138b4:	ec5b ab17 	vmov	sl, fp, d7
 80138b8:	ddd9      	ble.n	801386e <_strtod_l+0x3d6>
 80138ba:	9904      	ldr	r1, [sp, #16]
 80138bc:	1a9a      	subs	r2, r3, r2
 80138be:	440a      	add	r2, r1
 80138c0:	2a00      	cmp	r2, #0
 80138c2:	f340 8096 	ble.w	80139f2 <_strtod_l+0x55a>
 80138c6:	f012 000f 	ands.w	r0, r2, #15
 80138ca:	d00a      	beq.n	80138e2 <_strtod_l+0x44a>
 80138cc:	495c      	ldr	r1, [pc, #368]	; (8013a40 <_strtod_l+0x5a8>)
 80138ce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80138d2:	ed91 7b00 	vldr	d7, [r1]
 80138d6:	ec4b ab16 	vmov	d6, sl, fp
 80138da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80138de:	ec5b ab17 	vmov	sl, fp, d7
 80138e2:	f032 020f 	bics.w	r2, r2, #15
 80138e6:	d072      	beq.n	80139ce <_strtod_l+0x536>
 80138e8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80138ec:	dd45      	ble.n	801397a <_strtod_l+0x4e2>
 80138ee:	2500      	movs	r5, #0
 80138f0:	46a8      	mov	r8, r5
 80138f2:	9506      	str	r5, [sp, #24]
 80138f4:	46a9      	mov	r9, r5
 80138f6:	2322      	movs	r3, #34	; 0x22
 80138f8:	f8df b150 	ldr.w	fp, [pc, #336]	; 8013a4c <_strtod_l+0x5b4>
 80138fc:	6023      	str	r3, [r4, #0]
 80138fe:	f04f 0a00 	mov.w	sl, #0
 8013902:	9b06      	ldr	r3, [sp, #24]
 8013904:	2b00      	cmp	r3, #0
 8013906:	f43f ae09 	beq.w	801351c <_strtod_l+0x84>
 801390a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801390c:	4620      	mov	r0, r4
 801390e:	f002 f829 	bl	8015964 <_Bfree>
 8013912:	4649      	mov	r1, r9
 8013914:	4620      	mov	r0, r4
 8013916:	f002 f825 	bl	8015964 <_Bfree>
 801391a:	4641      	mov	r1, r8
 801391c:	4620      	mov	r0, r4
 801391e:	f002 f821 	bl	8015964 <_Bfree>
 8013922:	9906      	ldr	r1, [sp, #24]
 8013924:	4620      	mov	r0, r4
 8013926:	f002 f81d 	bl	8015964 <_Bfree>
 801392a:	4629      	mov	r1, r5
 801392c:	4620      	mov	r0, r4
 801392e:	f002 f819 	bl	8015964 <_Bfree>
 8013932:	e5f3      	b.n	801351c <_strtod_l+0x84>
 8013934:	9804      	ldr	r0, [sp, #16]
 8013936:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801393a:	4281      	cmp	r1, r0
 801393c:	dbbd      	blt.n	80138ba <_strtod_l+0x422>
 801393e:	4a40      	ldr	r2, [pc, #256]	; (8013a40 <_strtod_l+0x5a8>)
 8013940:	f1c3 030f 	rsb	r3, r3, #15
 8013944:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013948:	ed91 7b00 	vldr	d7, [r1]
 801394c:	ec4b ab16 	vmov	d6, sl, fp
 8013950:	1ac3      	subs	r3, r0, r3
 8013952:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013956:	ee27 7b06 	vmul.f64	d7, d7, d6
 801395a:	ed92 6b00 	vldr	d6, [r2]
 801395e:	e796      	b.n	801388e <_strtod_l+0x3f6>
 8013960:	3116      	adds	r1, #22
 8013962:	dbaa      	blt.n	80138ba <_strtod_l+0x422>
 8013964:	4936      	ldr	r1, [pc, #216]	; (8013a40 <_strtod_l+0x5a8>)
 8013966:	9b04      	ldr	r3, [sp, #16]
 8013968:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 801396c:	ed91 7b00 	vldr	d7, [r1]
 8013970:	ec4b ab16 	vmov	d6, sl, fp
 8013974:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013978:	e78b      	b.n	8013892 <_strtod_l+0x3fa>
 801397a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801397e:	2000      	movs	r0, #0
 8013980:	4e30      	ldr	r6, [pc, #192]	; (8013a44 <_strtod_l+0x5ac>)
 8013982:	1112      	asrs	r2, r2, #4
 8013984:	4601      	mov	r1, r0
 8013986:	2a01      	cmp	r2, #1
 8013988:	dc23      	bgt.n	80139d2 <_strtod_l+0x53a>
 801398a:	b108      	cbz	r0, 8013990 <_strtod_l+0x4f8>
 801398c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8013990:	4a2c      	ldr	r2, [pc, #176]	; (8013a44 <_strtod_l+0x5ac>)
 8013992:	482d      	ldr	r0, [pc, #180]	; (8013a48 <_strtod_l+0x5b0>)
 8013994:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8013998:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801399c:	ed91 7b00 	vldr	d7, [r1]
 80139a0:	ec4b ab16 	vmov	d6, sl, fp
 80139a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139ac:	9907      	ldr	r1, [sp, #28]
 80139ae:	4a27      	ldr	r2, [pc, #156]	; (8013a4c <_strtod_l+0x5b4>)
 80139b0:	400a      	ands	r2, r1
 80139b2:	4282      	cmp	r2, r0
 80139b4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80139b8:	d899      	bhi.n	80138ee <_strtod_l+0x456>
 80139ba:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80139be:	4282      	cmp	r2, r0
 80139c0:	bf86      	itte	hi
 80139c2:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8013a54 <_strtod_l+0x5bc>
 80139c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80139ca:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 80139ce:	2700      	movs	r7, #0
 80139d0:	e070      	b.n	8013ab4 <_strtod_l+0x61c>
 80139d2:	07d7      	lsls	r7, r2, #31
 80139d4:	d50a      	bpl.n	80139ec <_strtod_l+0x554>
 80139d6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 80139da:	ed90 7b00 	vldr	d7, [r0]
 80139de:	ed9d 6b06 	vldr	d6, [sp, #24]
 80139e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80139e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139ea:	2001      	movs	r0, #1
 80139ec:	3101      	adds	r1, #1
 80139ee:	1052      	asrs	r2, r2, #1
 80139f0:	e7c9      	b.n	8013986 <_strtod_l+0x4ee>
 80139f2:	d0ec      	beq.n	80139ce <_strtod_l+0x536>
 80139f4:	4252      	negs	r2, r2
 80139f6:	f012 000f 	ands.w	r0, r2, #15
 80139fa:	d00a      	beq.n	8013a12 <_strtod_l+0x57a>
 80139fc:	4910      	ldr	r1, [pc, #64]	; (8013a40 <_strtod_l+0x5a8>)
 80139fe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013a02:	ed91 7b00 	vldr	d7, [r1]
 8013a06:	ec4b ab16 	vmov	d6, sl, fp
 8013a0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013a0e:	ec5b ab17 	vmov	sl, fp, d7
 8013a12:	1112      	asrs	r2, r2, #4
 8013a14:	d0db      	beq.n	80139ce <_strtod_l+0x536>
 8013a16:	2a1f      	cmp	r2, #31
 8013a18:	dd1e      	ble.n	8013a58 <_strtod_l+0x5c0>
 8013a1a:	2500      	movs	r5, #0
 8013a1c:	46a8      	mov	r8, r5
 8013a1e:	9506      	str	r5, [sp, #24]
 8013a20:	46a9      	mov	r9, r5
 8013a22:	2322      	movs	r3, #34	; 0x22
 8013a24:	f04f 0a00 	mov.w	sl, #0
 8013a28:	f04f 0b00 	mov.w	fp, #0
 8013a2c:	6023      	str	r3, [r4, #0]
 8013a2e:	e768      	b.n	8013902 <_strtod_l+0x46a>
 8013a30:	080176c1 	.word	0x080176c1
 8013a34:	0801774b 	.word	0x0801774b
 8013a38:	080176c9 	.word	0x080176c9
 8013a3c:	0801770c 	.word	0x0801770c
 8013a40:	080177f0 	.word	0x080177f0
 8013a44:	080177c8 	.word	0x080177c8
 8013a48:	7ca00000 	.word	0x7ca00000
 8013a4c:	7ff00000 	.word	0x7ff00000
 8013a50:	fff80000 	.word	0xfff80000
 8013a54:	7fefffff 	.word	0x7fefffff
 8013a58:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8013a5c:	f012 0710 	ands.w	r7, r2, #16
 8013a60:	49ab      	ldr	r1, [pc, #684]	; (8013d10 <_strtod_l+0x878>)
 8013a62:	bf18      	it	ne
 8013a64:	276a      	movne	r7, #106	; 0x6a
 8013a66:	2000      	movs	r0, #0
 8013a68:	2a00      	cmp	r2, #0
 8013a6a:	f300 8113 	bgt.w	8013c94 <_strtod_l+0x7fc>
 8013a6e:	b108      	cbz	r0, 8013a74 <_strtod_l+0x5dc>
 8013a70:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8013a74:	b1bf      	cbz	r7, 8013aa6 <_strtod_l+0x60e>
 8013a76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013a7a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8013a7e:	2a00      	cmp	r2, #0
 8013a80:	4659      	mov	r1, fp
 8013a82:	dd10      	ble.n	8013aa6 <_strtod_l+0x60e>
 8013a84:	2a1f      	cmp	r2, #31
 8013a86:	f340 8113 	ble.w	8013cb0 <_strtod_l+0x818>
 8013a8a:	2a34      	cmp	r2, #52	; 0x34
 8013a8c:	bfde      	ittt	le
 8013a8e:	3a20      	suble	r2, #32
 8013a90:	f04f 30ff 	movle.w	r0, #4294967295
 8013a94:	fa00 f202 	lslle.w	r2, r0, r2
 8013a98:	f04f 0a00 	mov.w	sl, #0
 8013a9c:	bfcc      	ite	gt
 8013a9e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013aa2:	ea02 0b01 	andle.w	fp, r2, r1
 8013aa6:	ec4b ab17 	vmov	d7, sl, fp
 8013aaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab2:	d0b2      	beq.n	8013a1a <_strtod_l+0x582>
 8013ab4:	9a08      	ldr	r2, [sp, #32]
 8013ab6:	9200      	str	r2, [sp, #0]
 8013ab8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013aba:	462a      	mov	r2, r5
 8013abc:	4620      	mov	r0, r4
 8013abe:	f001 ffa3 	bl	8015a08 <__s2b>
 8013ac2:	9006      	str	r0, [sp, #24]
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	f43f af12 	beq.w	80138ee <_strtod_l+0x456>
 8013aca:	9a04      	ldr	r2, [sp, #16]
 8013acc:	9b04      	ldr	r3, [sp, #16]
 8013ace:	2a00      	cmp	r2, #0
 8013ad0:	f1c3 0300 	rsb	r3, r3, #0
 8013ad4:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8013cf8 <_strtod_l+0x860>
 8013ad8:	bfa8      	it	ge
 8013ada:	2300      	movge	r3, #0
 8013adc:	ed9f ab88 	vldr	d10, [pc, #544]	; 8013d00 <_strtod_l+0x868>
 8013ae0:	ed9f bb89 	vldr	d11, [pc, #548]	; 8013d08 <_strtod_l+0x870>
 8013ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8013ae6:	2500      	movs	r5, #0
 8013ae8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013aec:	9310      	str	r3, [sp, #64]	; 0x40
 8013aee:	46a8      	mov	r8, r5
 8013af0:	9b06      	ldr	r3, [sp, #24]
 8013af2:	4620      	mov	r0, r4
 8013af4:	6859      	ldr	r1, [r3, #4]
 8013af6:	f001 ff01 	bl	80158fc <_Balloc>
 8013afa:	4681      	mov	r9, r0
 8013afc:	2800      	cmp	r0, #0
 8013afe:	f43f aefa 	beq.w	80138f6 <_strtod_l+0x45e>
 8013b02:	9b06      	ldr	r3, [sp, #24]
 8013b04:	691a      	ldr	r2, [r3, #16]
 8013b06:	3202      	adds	r2, #2
 8013b08:	f103 010c 	add.w	r1, r3, #12
 8013b0c:	0092      	lsls	r2, r2, #2
 8013b0e:	300c      	adds	r0, #12
 8013b10:	f7fe fdf8 	bl	8012704 <memcpy>
 8013b14:	aa1a      	add	r2, sp, #104	; 0x68
 8013b16:	a919      	add	r1, sp, #100	; 0x64
 8013b18:	ec4b ab10 	vmov	d0, sl, fp
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013b22:	f002 fa2d 	bl	8015f80 <__d2b>
 8013b26:	9018      	str	r0, [sp, #96]	; 0x60
 8013b28:	2800      	cmp	r0, #0
 8013b2a:	f43f aee4 	beq.w	80138f6 <_strtod_l+0x45e>
 8013b2e:	2101      	movs	r1, #1
 8013b30:	4620      	mov	r0, r4
 8013b32:	f001 fff5 	bl	8015b20 <__i2b>
 8013b36:	4680      	mov	r8, r0
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	f43f aedc 	beq.w	80138f6 <_strtod_l+0x45e>
 8013b3e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8013b40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b42:	2e00      	cmp	r6, #0
 8013b44:	bfb1      	iteee	lt
 8013b46:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8013b48:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013b4a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8013b4c:	18f3      	addge	r3, r6, r3
 8013b4e:	bfba      	itte	lt
 8013b50:	1b98      	sublt	r0, r3, r6
 8013b52:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013b54:	9308      	strge	r3, [sp, #32]
 8013b56:	eba6 0607 	sub.w	r6, r6, r7
 8013b5a:	bfb8      	it	lt
 8013b5c:	9308      	strlt	r3, [sp, #32]
 8013b5e:	4416      	add	r6, r2
 8013b60:	4b6c      	ldr	r3, [pc, #432]	; (8013d14 <_strtod_l+0x87c>)
 8013b62:	3e01      	subs	r6, #1
 8013b64:	429e      	cmp	r6, r3
 8013b66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013b6a:	f280 80b4 	bge.w	8013cd6 <_strtod_l+0x83e>
 8013b6e:	1b9b      	subs	r3, r3, r6
 8013b70:	2b1f      	cmp	r3, #31
 8013b72:	eba2 0203 	sub.w	r2, r2, r3
 8013b76:	f04f 0101 	mov.w	r1, #1
 8013b7a:	f300 80a0 	bgt.w	8013cbe <_strtod_l+0x826>
 8013b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8013b82:	9311      	str	r3, [sp, #68]	; 0x44
 8013b84:	2300      	movs	r3, #0
 8013b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b88:	9b08      	ldr	r3, [sp, #32]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	4402      	add	r2, r0
 8013b8e:	18be      	adds	r6, r7, r2
 8013b90:	9a08      	ldr	r2, [sp, #32]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	bfa8      	it	ge
 8013b96:	461a      	movge	r2, r3
 8013b98:	42b2      	cmp	r2, r6
 8013b9a:	bfa8      	it	ge
 8013b9c:	4632      	movge	r2, r6
 8013b9e:	2a00      	cmp	r2, #0
 8013ba0:	dd04      	ble.n	8013bac <_strtod_l+0x714>
 8013ba2:	9908      	ldr	r1, [sp, #32]
 8013ba4:	1a9b      	subs	r3, r3, r2
 8013ba6:	1ab6      	subs	r6, r6, r2
 8013ba8:	1a8a      	subs	r2, r1, r2
 8013baa:	9208      	str	r2, [sp, #32]
 8013bac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013bae:	b1c2      	cbz	r2, 8013be2 <_strtod_l+0x74a>
 8013bb0:	4641      	mov	r1, r8
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	9315      	str	r3, [sp, #84]	; 0x54
 8013bb6:	f002 f853 	bl	8015c60 <__pow5mult>
 8013bba:	4680      	mov	r8, r0
 8013bbc:	2800      	cmp	r0, #0
 8013bbe:	f43f ae9a 	beq.w	80138f6 <_strtod_l+0x45e>
 8013bc2:	4601      	mov	r1, r0
 8013bc4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f001 ffb3 	bl	8015b32 <__multiply>
 8013bcc:	900c      	str	r0, [sp, #48]	; 0x30
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	f43f ae91 	beq.w	80138f6 <_strtod_l+0x45e>
 8013bd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	f001 fec4 	bl	8015964 <_Bfree>
 8013bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013be0:	9218      	str	r2, [sp, #96]	; 0x60
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	dc7c      	bgt.n	8013ce0 <_strtod_l+0x848>
 8013be6:	9b04      	ldr	r3, [sp, #16]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	dd08      	ble.n	8013bfe <_strtod_l+0x766>
 8013bec:	4649      	mov	r1, r9
 8013bee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f002 f835 	bl	8015c60 <__pow5mult>
 8013bf6:	4681      	mov	r9, r0
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	f43f ae7c 	beq.w	80138f6 <_strtod_l+0x45e>
 8013bfe:	2e00      	cmp	r6, #0
 8013c00:	dd08      	ble.n	8013c14 <_strtod_l+0x77c>
 8013c02:	4649      	mov	r1, r9
 8013c04:	4632      	mov	r2, r6
 8013c06:	4620      	mov	r0, r4
 8013c08:	f002 f878 	bl	8015cfc <__lshift>
 8013c0c:	4681      	mov	r9, r0
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	f43f ae71 	beq.w	80138f6 <_strtod_l+0x45e>
 8013c14:	9b08      	ldr	r3, [sp, #32]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	dd08      	ble.n	8013c2c <_strtod_l+0x794>
 8013c1a:	4641      	mov	r1, r8
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	4620      	mov	r0, r4
 8013c20:	f002 f86c 	bl	8015cfc <__lshift>
 8013c24:	4680      	mov	r8, r0
 8013c26:	2800      	cmp	r0, #0
 8013c28:	f43f ae65 	beq.w	80138f6 <_strtod_l+0x45e>
 8013c2c:	464a      	mov	r2, r9
 8013c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013c30:	4620      	mov	r0, r4
 8013c32:	f002 f8d1 	bl	8015dd8 <__mdiff>
 8013c36:	4605      	mov	r5, r0
 8013c38:	2800      	cmp	r0, #0
 8013c3a:	f43f ae5c 	beq.w	80138f6 <_strtod_l+0x45e>
 8013c3e:	68c3      	ldr	r3, [r0, #12]
 8013c40:	930c      	str	r3, [sp, #48]	; 0x30
 8013c42:	2300      	movs	r3, #0
 8013c44:	60c3      	str	r3, [r0, #12]
 8013c46:	4641      	mov	r1, r8
 8013c48:	f002 f8ac 	bl	8015da4 <__mcmp>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	da63      	bge.n	8013d18 <_strtod_l+0x880>
 8013c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c52:	b9e3      	cbnz	r3, 8013c8e <_strtod_l+0x7f6>
 8013c54:	f1ba 0f00 	cmp.w	sl, #0
 8013c58:	d119      	bne.n	8013c8e <_strtod_l+0x7f6>
 8013c5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c5e:	b9b3      	cbnz	r3, 8013c8e <_strtod_l+0x7f6>
 8013c60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c64:	0d1b      	lsrs	r3, r3, #20
 8013c66:	051b      	lsls	r3, r3, #20
 8013c68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013c6c:	d90f      	bls.n	8013c8e <_strtod_l+0x7f6>
 8013c6e:	696b      	ldr	r3, [r5, #20]
 8013c70:	b913      	cbnz	r3, 8013c78 <_strtod_l+0x7e0>
 8013c72:	692b      	ldr	r3, [r5, #16]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	dd0a      	ble.n	8013c8e <_strtod_l+0x7f6>
 8013c78:	4629      	mov	r1, r5
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f002 f83d 	bl	8015cfc <__lshift>
 8013c82:	4641      	mov	r1, r8
 8013c84:	4605      	mov	r5, r0
 8013c86:	f002 f88d 	bl	8015da4 <__mcmp>
 8013c8a:	2800      	cmp	r0, #0
 8013c8c:	dc75      	bgt.n	8013d7a <_strtod_l+0x8e2>
 8013c8e:	2f00      	cmp	r7, #0
 8013c90:	d17f      	bne.n	8013d92 <_strtod_l+0x8fa>
 8013c92:	e63a      	b.n	801390a <_strtod_l+0x472>
 8013c94:	07d6      	lsls	r6, r2, #31
 8013c96:	d508      	bpl.n	8013caa <_strtod_l+0x812>
 8013c98:	ed9d 6b06 	vldr	d6, [sp, #24]
 8013c9c:	ed91 7b00 	vldr	d7, [r1]
 8013ca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013ca4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ca8:	2001      	movs	r0, #1
 8013caa:	1052      	asrs	r2, r2, #1
 8013cac:	3108      	adds	r1, #8
 8013cae:	e6db      	b.n	8013a68 <_strtod_l+0x5d0>
 8013cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8013cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8013cb8:	ea02 0a0a 	and.w	sl, r2, sl
 8013cbc:	e6f3      	b.n	8013aa6 <_strtod_l+0x60e>
 8013cbe:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013cc2:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013cc6:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013cca:	36e2      	adds	r6, #226	; 0xe2
 8013ccc:	fa01 f306 	lsl.w	r3, r1, r6
 8013cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cd2:	9111      	str	r1, [sp, #68]	; 0x44
 8013cd4:	e758      	b.n	8013b88 <_strtod_l+0x6f0>
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cda:	2301      	movs	r3, #1
 8013cdc:	9311      	str	r3, [sp, #68]	; 0x44
 8013cde:	e753      	b.n	8013b88 <_strtod_l+0x6f0>
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	f002 f809 	bl	8015cfc <__lshift>
 8013cea:	9018      	str	r0, [sp, #96]	; 0x60
 8013cec:	2800      	cmp	r0, #0
 8013cee:	f47f af7a 	bne.w	8013be6 <_strtod_l+0x74e>
 8013cf2:	e600      	b.n	80138f6 <_strtod_l+0x45e>
 8013cf4:	f3af 8000 	nop.w
 8013cf8:	94a03595 	.word	0x94a03595
 8013cfc:	3fdfffff 	.word	0x3fdfffff
 8013d00:	35afe535 	.word	0x35afe535
 8013d04:	3fe00000 	.word	0x3fe00000
 8013d08:	94a03595 	.word	0x94a03595
 8013d0c:	3fcfffff 	.word	0x3fcfffff
 8013d10:	08017720 	.word	0x08017720
 8013d14:	fffffc02 	.word	0xfffffc02
 8013d18:	f8cd b020 	str.w	fp, [sp, #32]
 8013d1c:	f040 8085 	bne.w	8013e2a <_strtod_l+0x992>
 8013d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d26:	b322      	cbz	r2, 8013d72 <_strtod_l+0x8da>
 8013d28:	4ab7      	ldr	r2, [pc, #732]	; (8014008 <_strtod_l+0xb70>)
 8013d2a:	4293      	cmp	r3, r2
 8013d2c:	d154      	bne.n	8013dd8 <_strtod_l+0x940>
 8013d2e:	4651      	mov	r1, sl
 8013d30:	b1e7      	cbz	r7, 8013d6c <_strtod_l+0x8d4>
 8013d32:	4bb6      	ldr	r3, [pc, #728]	; (801400c <_strtod_l+0xb74>)
 8013d34:	465a      	mov	r2, fp
 8013d36:	4013      	ands	r3, r2
 8013d38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d40:	d803      	bhi.n	8013d4a <_strtod_l+0x8b2>
 8013d42:	0d1b      	lsrs	r3, r3, #20
 8013d44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013d48:	409a      	lsls	r2, r3
 8013d4a:	4291      	cmp	r1, r2
 8013d4c:	d144      	bne.n	8013dd8 <_strtod_l+0x940>
 8013d4e:	4bb0      	ldr	r3, [pc, #704]	; (8014010 <_strtod_l+0xb78>)
 8013d50:	9a08      	ldr	r2, [sp, #32]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d102      	bne.n	8013d5c <_strtod_l+0x8c4>
 8013d56:	3101      	adds	r1, #1
 8013d58:	f43f adcd 	beq.w	80138f6 <_strtod_l+0x45e>
 8013d5c:	4bab      	ldr	r3, [pc, #684]	; (801400c <_strtod_l+0xb74>)
 8013d5e:	9a08      	ldr	r2, [sp, #32]
 8013d60:	401a      	ands	r2, r3
 8013d62:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8013d66:	f04f 0a00 	mov.w	sl, #0
 8013d6a:	e790      	b.n	8013c8e <_strtod_l+0x7f6>
 8013d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d70:	e7eb      	b.n	8013d4a <_strtod_l+0x8b2>
 8013d72:	bb8b      	cbnz	r3, 8013dd8 <_strtod_l+0x940>
 8013d74:	f1ba 0f00 	cmp.w	sl, #0
 8013d78:	d12e      	bne.n	8013dd8 <_strtod_l+0x940>
 8013d7a:	465b      	mov	r3, fp
 8013d7c:	4aa3      	ldr	r2, [pc, #652]	; (801400c <_strtod_l+0xb74>)
 8013d7e:	b30f      	cbz	r7, 8013dc4 <_strtod_l+0x92c>
 8013d80:	ea02 010b 	and.w	r1, r2, fp
 8013d84:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013d88:	dc1c      	bgt.n	8013dc4 <_strtod_l+0x92c>
 8013d8a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013d8e:	f77f ae48 	ble.w	8013a22 <_strtod_l+0x58a>
 8013d92:	4aa0      	ldr	r2, [pc, #640]	; (8014014 <_strtod_l+0xb7c>)
 8013d94:	2300      	movs	r3, #0
 8013d96:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8013d9a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8013d9e:	ec4b ab17 	vmov	d7, sl, fp
 8013da2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013da6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013daa:	9b05      	ldr	r3, [sp, #20]
 8013dac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	f47f adaa 	bne.w	801390a <_strtod_l+0x472>
 8013db6:	9b04      	ldr	r3, [sp, #16]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f47f ada6 	bne.w	801390a <_strtod_l+0x472>
 8013dbe:	2322      	movs	r3, #34	; 0x22
 8013dc0:	6023      	str	r3, [r4, #0]
 8013dc2:	e5a2      	b.n	801390a <_strtod_l+0x472>
 8013dc4:	4013      	ands	r3, r2
 8013dc6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013dca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013dce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013dd2:	f04f 3aff 	mov.w	sl, #4294967295
 8013dd6:	e75a      	b.n	8013c8e <_strtod_l+0x7f6>
 8013dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013dda:	b18b      	cbz	r3, 8013e00 <_strtod_l+0x968>
 8013ddc:	9a08      	ldr	r2, [sp, #32]
 8013dde:	4213      	tst	r3, r2
 8013de0:	f43f af55 	beq.w	8013c8e <_strtod_l+0x7f6>
 8013de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013de6:	463a      	mov	r2, r7
 8013de8:	4650      	mov	r0, sl
 8013dea:	4659      	mov	r1, fp
 8013dec:	b163      	cbz	r3, 8013e08 <_strtod_l+0x970>
 8013dee:	f7ff fb39 	bl	8013464 <sulp>
 8013df2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013df6:	ee37 7b00 	vadd.f64	d7, d7, d0
 8013dfa:	ec5b ab17 	vmov	sl, fp, d7
 8013dfe:	e746      	b.n	8013c8e <_strtod_l+0x7f6>
 8013e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e02:	ea13 0f0a 	tst.w	r3, sl
 8013e06:	e7eb      	b.n	8013de0 <_strtod_l+0x948>
 8013e08:	f7ff fb2c 	bl	8013464 <sulp>
 8013e0c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013e10:	ee37 7b40 	vsub.f64	d7, d7, d0
 8013e14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013e18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e20:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013e24:	f43f adfd 	beq.w	8013a22 <_strtod_l+0x58a>
 8013e28:	e731      	b.n	8013c8e <_strtod_l+0x7f6>
 8013e2a:	4641      	mov	r1, r8
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	f002 f8f6 	bl	801601e <__ratio>
 8013e32:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013e36:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e3e:	d869      	bhi.n	8013f14 <_strtod_l+0xa7c>
 8013e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d045      	beq.n	8013ed2 <_strtod_l+0xa3a>
 8013e46:	4b74      	ldr	r3, [pc, #464]	; (8014018 <_strtod_l+0xb80>)
 8013e48:	2200      	movs	r2, #0
 8013e4a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8013e4e:	9808      	ldr	r0, [sp, #32]
 8013e50:	496e      	ldr	r1, [pc, #440]	; (801400c <_strtod_l+0xb74>)
 8013e52:	ea00 0601 	and.w	r6, r0, r1
 8013e56:	4871      	ldr	r0, [pc, #452]	; (801401c <_strtod_l+0xb84>)
 8013e58:	4286      	cmp	r6, r0
 8013e5a:	f040 8089 	bne.w	8013f70 <_strtod_l+0xad8>
 8013e5e:	910f      	str	r1, [sp, #60]	; 0x3c
 8013e60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013e64:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8013e68:	9908      	ldr	r1, [sp, #32]
 8013e6a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8013e6e:	ec4b ab10 	vmov	d0, sl, fp
 8013e72:	ec43 2b1c 	vmov	d12, r2, r3
 8013e76:	f002 f80d 	bl	8015e94 <__ulp>
 8013e7a:	ec4b ab1d 	vmov	d13, sl, fp
 8013e7e:	eeac db00 	vfma.f64	d13, d12, d0
 8013e82:	ed8d db08 	vstr	d13, [sp, #32]
 8013e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e8a:	4a65      	ldr	r2, [pc, #404]	; (8014020 <_strtod_l+0xb88>)
 8013e8c:	4019      	ands	r1, r3
 8013e8e:	4291      	cmp	r1, r2
 8013e90:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8013e94:	d948      	bls.n	8013f28 <_strtod_l+0xa90>
 8013e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e98:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013e9c:	4293      	cmp	r3, r2
 8013e9e:	d103      	bne.n	8013ea8 <_strtod_l+0xa10>
 8013ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	f43f ad27 	beq.w	80138f6 <_strtod_l+0x45e>
 8013ea8:	f8df b164 	ldr.w	fp, [pc, #356]	; 8014010 <_strtod_l+0xb78>
 8013eac:	f04f 3aff 	mov.w	sl, #4294967295
 8013eb0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013eb2:	4620      	mov	r0, r4
 8013eb4:	f001 fd56 	bl	8015964 <_Bfree>
 8013eb8:	4649      	mov	r1, r9
 8013eba:	4620      	mov	r0, r4
 8013ebc:	f001 fd52 	bl	8015964 <_Bfree>
 8013ec0:	4641      	mov	r1, r8
 8013ec2:	4620      	mov	r0, r4
 8013ec4:	f001 fd4e 	bl	8015964 <_Bfree>
 8013ec8:	4629      	mov	r1, r5
 8013eca:	4620      	mov	r0, r4
 8013ecc:	f001 fd4a 	bl	8015964 <_Bfree>
 8013ed0:	e60e      	b.n	8013af0 <_strtod_l+0x658>
 8013ed2:	f1ba 0f00 	cmp.w	sl, #0
 8013ed6:	d113      	bne.n	8013f00 <_strtod_l+0xa68>
 8013ed8:	9b08      	ldr	r3, [sp, #32]
 8013eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ede:	b9b3      	cbnz	r3, 8013f0e <_strtod_l+0xa76>
 8013ee0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013ee4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eec:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013ef0:	d401      	bmi.n	8013ef6 <_strtod_l+0xa5e>
 8013ef2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013ef6:	eeb1 7b48 	vneg.f64	d7, d8
 8013efa:	ec53 2b17 	vmov	r2, r3, d7
 8013efe:	e7a6      	b.n	8013e4e <_strtod_l+0x9b6>
 8013f00:	f1ba 0f01 	cmp.w	sl, #1
 8013f04:	d103      	bne.n	8013f0e <_strtod_l+0xa76>
 8013f06:	9b08      	ldr	r3, [sp, #32]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	f43f ad8a 	beq.w	8013a22 <_strtod_l+0x58a>
 8013f0e:	2200      	movs	r2, #0
 8013f10:	4b44      	ldr	r3, [pc, #272]	; (8014024 <_strtod_l+0xb8c>)
 8013f12:	e79a      	b.n	8013e4a <_strtod_l+0x9b2>
 8013f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f16:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013f1a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d0e9      	beq.n	8013ef6 <_strtod_l+0xa5e>
 8013f22:	ec53 2b18 	vmov	r2, r3, d8
 8013f26:	e792      	b.n	8013e4e <_strtod_l+0x9b6>
 8013f28:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013f2c:	2f00      	cmp	r7, #0
 8013f2e:	d1bf      	bne.n	8013eb0 <_strtod_l+0xa18>
 8013f30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f34:	0d1b      	lsrs	r3, r3, #20
 8013f36:	051b      	lsls	r3, r3, #20
 8013f38:	429e      	cmp	r6, r3
 8013f3a:	d1b9      	bne.n	8013eb0 <_strtod_l+0xa18>
 8013f3c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8013f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f42:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8013f46:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013f4a:	b92b      	cbnz	r3, 8013f58 <_strtod_l+0xac0>
 8013f4c:	f1ba 0f00 	cmp.w	sl, #0
 8013f50:	d102      	bne.n	8013f58 <_strtod_l+0xac0>
 8013f52:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8013f56:	b3d2      	cbz	r2, 8013fce <_strtod_l+0xb36>
 8013f58:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f60:	f53f acd3 	bmi.w	801390a <_strtod_l+0x472>
 8013f64:	eeb4 8bca 	vcmpe.f64	d8, d10
 8013f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6c:	dda0      	ble.n	8013eb0 <_strtod_l+0xa18>
 8013f6e:	e4cc      	b.n	801390a <_strtod_l+0x472>
 8013f70:	b1ef      	cbz	r7, 8013fae <_strtod_l+0xb16>
 8013f72:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8013f76:	d81a      	bhi.n	8013fae <_strtod_l+0xb16>
 8013f78:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014000 <_strtod_l+0xb68>
 8013f7c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f84:	d810      	bhi.n	8013fa8 <_strtod_l+0xb10>
 8013f86:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8013f8a:	ee17 3a90 	vmov	r3, s15
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	bf08      	it	eq
 8013f92:	2301      	moveq	r3, #1
 8013f94:	ee07 3a90 	vmov	s15, r3
 8013f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f9a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8013f9e:	b99b      	cbnz	r3, 8013fc8 <_strtod_l+0xb30>
 8013fa0:	eeb1 7b48 	vneg.f64	d7, d8
 8013fa4:	ec53 2b17 	vmov	r2, r3, d7
 8013fa8:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8013fac:	1b8b      	subs	r3, r1, r6
 8013fae:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013fb2:	ec43 2b1c 	vmov	d12, r2, r3
 8013fb6:	f001 ff6d 	bl	8015e94 <__ulp>
 8013fba:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013fbe:	eeac 7b00 	vfma.f64	d7, d12, d0
 8013fc2:	ec5b ab17 	vmov	sl, fp, d7
 8013fc6:	e7b1      	b.n	8013f2c <_strtod_l+0xa94>
 8013fc8:	ec53 2b18 	vmov	r2, r3, d8
 8013fcc:	e7ec      	b.n	8013fa8 <_strtod_l+0xb10>
 8013fce:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd6:	f57f af6b 	bpl.w	8013eb0 <_strtod_l+0xa18>
 8013fda:	e496      	b.n	801390a <_strtod_l+0x472>
 8013fdc:	2300      	movs	r3, #0
 8013fde:	930d      	str	r3, [sp, #52]	; 0x34
 8013fe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013fe2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fe4:	6013      	str	r3, [r2, #0]
 8013fe6:	f7ff ba9d 	b.w	8013524 <_strtod_l+0x8c>
 8013fea:	2a65      	cmp	r2, #101	; 0x65
 8013fec:	f04f 0100 	mov.w	r1, #0
 8013ff0:	f43f ab97 	beq.w	8013722 <_strtod_l+0x28a>
 8013ff4:	2701      	movs	r7, #1
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	9704      	str	r7, [sp, #16]
 8013ffa:	f7ff bb0a 	b.w	8013612 <_strtod_l+0x17a>
 8013ffe:	bf00      	nop
 8014000:	ffc00000 	.word	0xffc00000
 8014004:	41dfffff 	.word	0x41dfffff
 8014008:	000fffff 	.word	0x000fffff
 801400c:	7ff00000 	.word	0x7ff00000
 8014010:	7fefffff 	.word	0x7fefffff
 8014014:	39500000 	.word	0x39500000
 8014018:	3ff00000 	.word	0x3ff00000
 801401c:	7fe00000 	.word	0x7fe00000
 8014020:	7c9fffff 	.word	0x7c9fffff
 8014024:	bff00000 	.word	0xbff00000

08014028 <_strtod_r>:
 8014028:	4b05      	ldr	r3, [pc, #20]	; (8014040 <_strtod_r+0x18>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	b410      	push	{r4}
 801402e:	6a1b      	ldr	r3, [r3, #32]
 8014030:	4c04      	ldr	r4, [pc, #16]	; (8014044 <_strtod_r+0x1c>)
 8014032:	2b00      	cmp	r3, #0
 8014034:	bf08      	it	eq
 8014036:	4623      	moveq	r3, r4
 8014038:	f85d 4b04 	ldr.w	r4, [sp], #4
 801403c:	f7ff ba2c 	b.w	8013498 <_strtod_l>
 8014040:	200001a8 	.word	0x200001a8
 8014044:	2000020c 	.word	0x2000020c

08014048 <_strtol_l.isra.0>:
 8014048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801404c:	4680      	mov	r8, r0
 801404e:	4689      	mov	r9, r1
 8014050:	4692      	mov	sl, r2
 8014052:	461e      	mov	r6, r3
 8014054:	460f      	mov	r7, r1
 8014056:	463d      	mov	r5, r7
 8014058:	9808      	ldr	r0, [sp, #32]
 801405a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801405e:	f001 fbbb 	bl	80157d8 <__locale_ctype_ptr_l>
 8014062:	4420      	add	r0, r4
 8014064:	7843      	ldrb	r3, [r0, #1]
 8014066:	f013 0308 	ands.w	r3, r3, #8
 801406a:	d132      	bne.n	80140d2 <_strtol_l.isra.0+0x8a>
 801406c:	2c2d      	cmp	r4, #45	; 0x2d
 801406e:	d132      	bne.n	80140d6 <_strtol_l.isra.0+0x8e>
 8014070:	787c      	ldrb	r4, [r7, #1]
 8014072:	1cbd      	adds	r5, r7, #2
 8014074:	2201      	movs	r2, #1
 8014076:	2e00      	cmp	r6, #0
 8014078:	d05d      	beq.n	8014136 <_strtol_l.isra.0+0xee>
 801407a:	2e10      	cmp	r6, #16
 801407c:	d109      	bne.n	8014092 <_strtol_l.isra.0+0x4a>
 801407e:	2c30      	cmp	r4, #48	; 0x30
 8014080:	d107      	bne.n	8014092 <_strtol_l.isra.0+0x4a>
 8014082:	782b      	ldrb	r3, [r5, #0]
 8014084:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014088:	2b58      	cmp	r3, #88	; 0x58
 801408a:	d14f      	bne.n	801412c <_strtol_l.isra.0+0xe4>
 801408c:	786c      	ldrb	r4, [r5, #1]
 801408e:	2610      	movs	r6, #16
 8014090:	3502      	adds	r5, #2
 8014092:	2a00      	cmp	r2, #0
 8014094:	bf14      	ite	ne
 8014096:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801409a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801409e:	2700      	movs	r7, #0
 80140a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80140a4:	4638      	mov	r0, r7
 80140a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80140aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80140ae:	2b09      	cmp	r3, #9
 80140b0:	d817      	bhi.n	80140e2 <_strtol_l.isra.0+0x9a>
 80140b2:	461c      	mov	r4, r3
 80140b4:	42a6      	cmp	r6, r4
 80140b6:	dd23      	ble.n	8014100 <_strtol_l.isra.0+0xb8>
 80140b8:	1c7b      	adds	r3, r7, #1
 80140ba:	d007      	beq.n	80140cc <_strtol_l.isra.0+0x84>
 80140bc:	4584      	cmp	ip, r0
 80140be:	d31c      	bcc.n	80140fa <_strtol_l.isra.0+0xb2>
 80140c0:	d101      	bne.n	80140c6 <_strtol_l.isra.0+0x7e>
 80140c2:	45a6      	cmp	lr, r4
 80140c4:	db19      	blt.n	80140fa <_strtol_l.isra.0+0xb2>
 80140c6:	fb00 4006 	mla	r0, r0, r6, r4
 80140ca:	2701      	movs	r7, #1
 80140cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140d0:	e7eb      	b.n	80140aa <_strtol_l.isra.0+0x62>
 80140d2:	462f      	mov	r7, r5
 80140d4:	e7bf      	b.n	8014056 <_strtol_l.isra.0+0xe>
 80140d6:	2c2b      	cmp	r4, #43	; 0x2b
 80140d8:	bf04      	itt	eq
 80140da:	1cbd      	addeq	r5, r7, #2
 80140dc:	787c      	ldrbeq	r4, [r7, #1]
 80140de:	461a      	mov	r2, r3
 80140e0:	e7c9      	b.n	8014076 <_strtol_l.isra.0+0x2e>
 80140e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80140e6:	2b19      	cmp	r3, #25
 80140e8:	d801      	bhi.n	80140ee <_strtol_l.isra.0+0xa6>
 80140ea:	3c37      	subs	r4, #55	; 0x37
 80140ec:	e7e2      	b.n	80140b4 <_strtol_l.isra.0+0x6c>
 80140ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80140f2:	2b19      	cmp	r3, #25
 80140f4:	d804      	bhi.n	8014100 <_strtol_l.isra.0+0xb8>
 80140f6:	3c57      	subs	r4, #87	; 0x57
 80140f8:	e7dc      	b.n	80140b4 <_strtol_l.isra.0+0x6c>
 80140fa:	f04f 37ff 	mov.w	r7, #4294967295
 80140fe:	e7e5      	b.n	80140cc <_strtol_l.isra.0+0x84>
 8014100:	1c7b      	adds	r3, r7, #1
 8014102:	d108      	bne.n	8014116 <_strtol_l.isra.0+0xce>
 8014104:	2322      	movs	r3, #34	; 0x22
 8014106:	f8c8 3000 	str.w	r3, [r8]
 801410a:	4608      	mov	r0, r1
 801410c:	f1ba 0f00 	cmp.w	sl, #0
 8014110:	d107      	bne.n	8014122 <_strtol_l.isra.0+0xda>
 8014112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014116:	b102      	cbz	r2, 801411a <_strtol_l.isra.0+0xd2>
 8014118:	4240      	negs	r0, r0
 801411a:	f1ba 0f00 	cmp.w	sl, #0
 801411e:	d0f8      	beq.n	8014112 <_strtol_l.isra.0+0xca>
 8014120:	b10f      	cbz	r7, 8014126 <_strtol_l.isra.0+0xde>
 8014122:	f105 39ff 	add.w	r9, r5, #4294967295
 8014126:	f8ca 9000 	str.w	r9, [sl]
 801412a:	e7f2      	b.n	8014112 <_strtol_l.isra.0+0xca>
 801412c:	2430      	movs	r4, #48	; 0x30
 801412e:	2e00      	cmp	r6, #0
 8014130:	d1af      	bne.n	8014092 <_strtol_l.isra.0+0x4a>
 8014132:	2608      	movs	r6, #8
 8014134:	e7ad      	b.n	8014092 <_strtol_l.isra.0+0x4a>
 8014136:	2c30      	cmp	r4, #48	; 0x30
 8014138:	d0a3      	beq.n	8014082 <_strtol_l.isra.0+0x3a>
 801413a:	260a      	movs	r6, #10
 801413c:	e7a9      	b.n	8014092 <_strtol_l.isra.0+0x4a>
	...

08014140 <_strtol_r>:
 8014140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014142:	4c06      	ldr	r4, [pc, #24]	; (801415c <_strtol_r+0x1c>)
 8014144:	4d06      	ldr	r5, [pc, #24]	; (8014160 <_strtol_r+0x20>)
 8014146:	6824      	ldr	r4, [r4, #0]
 8014148:	6a24      	ldr	r4, [r4, #32]
 801414a:	2c00      	cmp	r4, #0
 801414c:	bf08      	it	eq
 801414e:	462c      	moveq	r4, r5
 8014150:	9400      	str	r4, [sp, #0]
 8014152:	f7ff ff79 	bl	8014048 <_strtol_l.isra.0>
 8014156:	b003      	add	sp, #12
 8014158:	bd30      	pop	{r4, r5, pc}
 801415a:	bf00      	nop
 801415c:	200001a8 	.word	0x200001a8
 8014160:	2000020c 	.word	0x2000020c

08014164 <__swbuf_r>:
 8014164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014166:	460e      	mov	r6, r1
 8014168:	4614      	mov	r4, r2
 801416a:	4605      	mov	r5, r0
 801416c:	b118      	cbz	r0, 8014176 <__swbuf_r+0x12>
 801416e:	6983      	ldr	r3, [r0, #24]
 8014170:	b90b      	cbnz	r3, 8014176 <__swbuf_r+0x12>
 8014172:	f000 ff81 	bl	8015078 <__sinit>
 8014176:	4b21      	ldr	r3, [pc, #132]	; (80141fc <__swbuf_r+0x98>)
 8014178:	429c      	cmp	r4, r3
 801417a:	d12a      	bne.n	80141d2 <__swbuf_r+0x6e>
 801417c:	686c      	ldr	r4, [r5, #4]
 801417e:	69a3      	ldr	r3, [r4, #24]
 8014180:	60a3      	str	r3, [r4, #8]
 8014182:	89a3      	ldrh	r3, [r4, #12]
 8014184:	071a      	lsls	r2, r3, #28
 8014186:	d52e      	bpl.n	80141e6 <__swbuf_r+0x82>
 8014188:	6923      	ldr	r3, [r4, #16]
 801418a:	b363      	cbz	r3, 80141e6 <__swbuf_r+0x82>
 801418c:	6923      	ldr	r3, [r4, #16]
 801418e:	6820      	ldr	r0, [r4, #0]
 8014190:	1ac0      	subs	r0, r0, r3
 8014192:	6963      	ldr	r3, [r4, #20]
 8014194:	b2f6      	uxtb	r6, r6
 8014196:	4283      	cmp	r3, r0
 8014198:	4637      	mov	r7, r6
 801419a:	dc04      	bgt.n	80141a6 <__swbuf_r+0x42>
 801419c:	4621      	mov	r1, r4
 801419e:	4628      	mov	r0, r5
 80141a0:	f000 ff00 	bl	8014fa4 <_fflush_r>
 80141a4:	bb28      	cbnz	r0, 80141f2 <__swbuf_r+0x8e>
 80141a6:	68a3      	ldr	r3, [r4, #8]
 80141a8:	3b01      	subs	r3, #1
 80141aa:	60a3      	str	r3, [r4, #8]
 80141ac:	6823      	ldr	r3, [r4, #0]
 80141ae:	1c5a      	adds	r2, r3, #1
 80141b0:	6022      	str	r2, [r4, #0]
 80141b2:	701e      	strb	r6, [r3, #0]
 80141b4:	6963      	ldr	r3, [r4, #20]
 80141b6:	3001      	adds	r0, #1
 80141b8:	4283      	cmp	r3, r0
 80141ba:	d004      	beq.n	80141c6 <__swbuf_r+0x62>
 80141bc:	89a3      	ldrh	r3, [r4, #12]
 80141be:	07db      	lsls	r3, r3, #31
 80141c0:	d519      	bpl.n	80141f6 <__swbuf_r+0x92>
 80141c2:	2e0a      	cmp	r6, #10
 80141c4:	d117      	bne.n	80141f6 <__swbuf_r+0x92>
 80141c6:	4621      	mov	r1, r4
 80141c8:	4628      	mov	r0, r5
 80141ca:	f000 feeb 	bl	8014fa4 <_fflush_r>
 80141ce:	b190      	cbz	r0, 80141f6 <__swbuf_r+0x92>
 80141d0:	e00f      	b.n	80141f2 <__swbuf_r+0x8e>
 80141d2:	4b0b      	ldr	r3, [pc, #44]	; (8014200 <__swbuf_r+0x9c>)
 80141d4:	429c      	cmp	r4, r3
 80141d6:	d101      	bne.n	80141dc <__swbuf_r+0x78>
 80141d8:	68ac      	ldr	r4, [r5, #8]
 80141da:	e7d0      	b.n	801417e <__swbuf_r+0x1a>
 80141dc:	4b09      	ldr	r3, [pc, #36]	; (8014204 <__swbuf_r+0xa0>)
 80141de:	429c      	cmp	r4, r3
 80141e0:	bf08      	it	eq
 80141e2:	68ec      	ldreq	r4, [r5, #12]
 80141e4:	e7cb      	b.n	801417e <__swbuf_r+0x1a>
 80141e6:	4621      	mov	r1, r4
 80141e8:	4628      	mov	r0, r5
 80141ea:	f000 f80d 	bl	8014208 <__swsetup_r>
 80141ee:	2800      	cmp	r0, #0
 80141f0:	d0cc      	beq.n	801418c <__swbuf_r+0x28>
 80141f2:	f04f 37ff 	mov.w	r7, #4294967295
 80141f6:	4638      	mov	r0, r7
 80141f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141fa:	bf00      	nop
 80141fc:	08017778 	.word	0x08017778
 8014200:	08017798 	.word	0x08017798
 8014204:	08017758 	.word	0x08017758

08014208 <__swsetup_r>:
 8014208:	4b32      	ldr	r3, [pc, #200]	; (80142d4 <__swsetup_r+0xcc>)
 801420a:	b570      	push	{r4, r5, r6, lr}
 801420c:	681d      	ldr	r5, [r3, #0]
 801420e:	4606      	mov	r6, r0
 8014210:	460c      	mov	r4, r1
 8014212:	b125      	cbz	r5, 801421e <__swsetup_r+0x16>
 8014214:	69ab      	ldr	r3, [r5, #24]
 8014216:	b913      	cbnz	r3, 801421e <__swsetup_r+0x16>
 8014218:	4628      	mov	r0, r5
 801421a:	f000 ff2d 	bl	8015078 <__sinit>
 801421e:	4b2e      	ldr	r3, [pc, #184]	; (80142d8 <__swsetup_r+0xd0>)
 8014220:	429c      	cmp	r4, r3
 8014222:	d10f      	bne.n	8014244 <__swsetup_r+0x3c>
 8014224:	686c      	ldr	r4, [r5, #4]
 8014226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801422a:	b29a      	uxth	r2, r3
 801422c:	0715      	lsls	r5, r2, #28
 801422e:	d42c      	bmi.n	801428a <__swsetup_r+0x82>
 8014230:	06d0      	lsls	r0, r2, #27
 8014232:	d411      	bmi.n	8014258 <__swsetup_r+0x50>
 8014234:	2209      	movs	r2, #9
 8014236:	6032      	str	r2, [r6, #0]
 8014238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801423c:	81a3      	strh	r3, [r4, #12]
 801423e:	f04f 30ff 	mov.w	r0, #4294967295
 8014242:	e03e      	b.n	80142c2 <__swsetup_r+0xba>
 8014244:	4b25      	ldr	r3, [pc, #148]	; (80142dc <__swsetup_r+0xd4>)
 8014246:	429c      	cmp	r4, r3
 8014248:	d101      	bne.n	801424e <__swsetup_r+0x46>
 801424a:	68ac      	ldr	r4, [r5, #8]
 801424c:	e7eb      	b.n	8014226 <__swsetup_r+0x1e>
 801424e:	4b24      	ldr	r3, [pc, #144]	; (80142e0 <__swsetup_r+0xd8>)
 8014250:	429c      	cmp	r4, r3
 8014252:	bf08      	it	eq
 8014254:	68ec      	ldreq	r4, [r5, #12]
 8014256:	e7e6      	b.n	8014226 <__swsetup_r+0x1e>
 8014258:	0751      	lsls	r1, r2, #29
 801425a:	d512      	bpl.n	8014282 <__swsetup_r+0x7a>
 801425c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801425e:	b141      	cbz	r1, 8014272 <__swsetup_r+0x6a>
 8014260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014264:	4299      	cmp	r1, r3
 8014266:	d002      	beq.n	801426e <__swsetup_r+0x66>
 8014268:	4630      	mov	r0, r6
 801426a:	f001 ff55 	bl	8016118 <_free_r>
 801426e:	2300      	movs	r3, #0
 8014270:	6363      	str	r3, [r4, #52]	; 0x34
 8014272:	89a3      	ldrh	r3, [r4, #12]
 8014274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014278:	81a3      	strh	r3, [r4, #12]
 801427a:	2300      	movs	r3, #0
 801427c:	6063      	str	r3, [r4, #4]
 801427e:	6923      	ldr	r3, [r4, #16]
 8014280:	6023      	str	r3, [r4, #0]
 8014282:	89a3      	ldrh	r3, [r4, #12]
 8014284:	f043 0308 	orr.w	r3, r3, #8
 8014288:	81a3      	strh	r3, [r4, #12]
 801428a:	6923      	ldr	r3, [r4, #16]
 801428c:	b94b      	cbnz	r3, 80142a2 <__swsetup_r+0x9a>
 801428e:	89a3      	ldrh	r3, [r4, #12]
 8014290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014298:	d003      	beq.n	80142a2 <__swsetup_r+0x9a>
 801429a:	4621      	mov	r1, r4
 801429c:	4630      	mov	r0, r6
 801429e:	f001 fad3 	bl	8015848 <__smakebuf_r>
 80142a2:	89a2      	ldrh	r2, [r4, #12]
 80142a4:	f012 0301 	ands.w	r3, r2, #1
 80142a8:	d00c      	beq.n	80142c4 <__swsetup_r+0xbc>
 80142aa:	2300      	movs	r3, #0
 80142ac:	60a3      	str	r3, [r4, #8]
 80142ae:	6963      	ldr	r3, [r4, #20]
 80142b0:	425b      	negs	r3, r3
 80142b2:	61a3      	str	r3, [r4, #24]
 80142b4:	6923      	ldr	r3, [r4, #16]
 80142b6:	b953      	cbnz	r3, 80142ce <__swsetup_r+0xc6>
 80142b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80142c0:	d1ba      	bne.n	8014238 <__swsetup_r+0x30>
 80142c2:	bd70      	pop	{r4, r5, r6, pc}
 80142c4:	0792      	lsls	r2, r2, #30
 80142c6:	bf58      	it	pl
 80142c8:	6963      	ldrpl	r3, [r4, #20]
 80142ca:	60a3      	str	r3, [r4, #8]
 80142cc:	e7f2      	b.n	80142b4 <__swsetup_r+0xac>
 80142ce:	2000      	movs	r0, #0
 80142d0:	e7f7      	b.n	80142c2 <__swsetup_r+0xba>
 80142d2:	bf00      	nop
 80142d4:	200001a8 	.word	0x200001a8
 80142d8:	08017778 	.word	0x08017778
 80142dc:	08017798 	.word	0x08017798
 80142e0:	08017758 	.word	0x08017758

080142e4 <quorem>:
 80142e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e8:	6903      	ldr	r3, [r0, #16]
 80142ea:	690c      	ldr	r4, [r1, #16]
 80142ec:	42a3      	cmp	r3, r4
 80142ee:	4680      	mov	r8, r0
 80142f0:	f2c0 8082 	blt.w	80143f8 <quorem+0x114>
 80142f4:	3c01      	subs	r4, #1
 80142f6:	f101 0714 	add.w	r7, r1, #20
 80142fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80142fe:	f100 0614 	add.w	r6, r0, #20
 8014302:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014306:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801430a:	eb06 030c 	add.w	r3, r6, ip
 801430e:	3501      	adds	r5, #1
 8014310:	eb07 090c 	add.w	r9, r7, ip
 8014314:	9301      	str	r3, [sp, #4]
 8014316:	fbb0 f5f5 	udiv	r5, r0, r5
 801431a:	b395      	cbz	r5, 8014382 <quorem+0x9e>
 801431c:	f04f 0a00 	mov.w	sl, #0
 8014320:	4638      	mov	r0, r7
 8014322:	46b6      	mov	lr, r6
 8014324:	46d3      	mov	fp, sl
 8014326:	f850 2b04 	ldr.w	r2, [r0], #4
 801432a:	b293      	uxth	r3, r2
 801432c:	fb05 a303 	mla	r3, r5, r3, sl
 8014330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014334:	b29b      	uxth	r3, r3
 8014336:	ebab 0303 	sub.w	r3, fp, r3
 801433a:	0c12      	lsrs	r2, r2, #16
 801433c:	f8de b000 	ldr.w	fp, [lr]
 8014340:	fb05 a202 	mla	r2, r5, r2, sl
 8014344:	fa13 f38b 	uxtah	r3, r3, fp
 8014348:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801434c:	fa1f fb82 	uxth.w	fp, r2
 8014350:	f8de 2000 	ldr.w	r2, [lr]
 8014354:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801435c:	b29b      	uxth	r3, r3
 801435e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014362:	4581      	cmp	r9, r0
 8014364:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014368:	f84e 3b04 	str.w	r3, [lr], #4
 801436c:	d2db      	bcs.n	8014326 <quorem+0x42>
 801436e:	f856 300c 	ldr.w	r3, [r6, ip]
 8014372:	b933      	cbnz	r3, 8014382 <quorem+0x9e>
 8014374:	9b01      	ldr	r3, [sp, #4]
 8014376:	3b04      	subs	r3, #4
 8014378:	429e      	cmp	r6, r3
 801437a:	461a      	mov	r2, r3
 801437c:	d330      	bcc.n	80143e0 <quorem+0xfc>
 801437e:	f8c8 4010 	str.w	r4, [r8, #16]
 8014382:	4640      	mov	r0, r8
 8014384:	f001 fd0e 	bl	8015da4 <__mcmp>
 8014388:	2800      	cmp	r0, #0
 801438a:	db25      	blt.n	80143d8 <quorem+0xf4>
 801438c:	3501      	adds	r5, #1
 801438e:	4630      	mov	r0, r6
 8014390:	f04f 0c00 	mov.w	ip, #0
 8014394:	f857 2b04 	ldr.w	r2, [r7], #4
 8014398:	f8d0 e000 	ldr.w	lr, [r0]
 801439c:	b293      	uxth	r3, r2
 801439e:	ebac 0303 	sub.w	r3, ip, r3
 80143a2:	0c12      	lsrs	r2, r2, #16
 80143a4:	fa13 f38e 	uxtah	r3, r3, lr
 80143a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80143ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80143b0:	b29b      	uxth	r3, r3
 80143b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143b6:	45b9      	cmp	r9, r7
 80143b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80143bc:	f840 3b04 	str.w	r3, [r0], #4
 80143c0:	d2e8      	bcs.n	8014394 <quorem+0xb0>
 80143c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80143c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80143ca:	b92a      	cbnz	r2, 80143d8 <quorem+0xf4>
 80143cc:	3b04      	subs	r3, #4
 80143ce:	429e      	cmp	r6, r3
 80143d0:	461a      	mov	r2, r3
 80143d2:	d30b      	bcc.n	80143ec <quorem+0x108>
 80143d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80143d8:	4628      	mov	r0, r5
 80143da:	b003      	add	sp, #12
 80143dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e0:	6812      	ldr	r2, [r2, #0]
 80143e2:	3b04      	subs	r3, #4
 80143e4:	2a00      	cmp	r2, #0
 80143e6:	d1ca      	bne.n	801437e <quorem+0x9a>
 80143e8:	3c01      	subs	r4, #1
 80143ea:	e7c5      	b.n	8014378 <quorem+0x94>
 80143ec:	6812      	ldr	r2, [r2, #0]
 80143ee:	3b04      	subs	r3, #4
 80143f0:	2a00      	cmp	r2, #0
 80143f2:	d1ef      	bne.n	80143d4 <quorem+0xf0>
 80143f4:	3c01      	subs	r4, #1
 80143f6:	e7ea      	b.n	80143ce <quorem+0xea>
 80143f8:	2000      	movs	r0, #0
 80143fa:	e7ee      	b.n	80143da <quorem+0xf6>
 80143fc:	0000      	movs	r0, r0
	...

08014400 <_dtoa_r>:
 8014400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014404:	ec57 6b10 	vmov	r6, r7, d0
 8014408:	b095      	sub	sp, #84	; 0x54
 801440a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801440c:	9108      	str	r1, [sp, #32]
 801440e:	4604      	mov	r4, r0
 8014410:	920a      	str	r2, [sp, #40]	; 0x28
 8014412:	9311      	str	r3, [sp, #68]	; 0x44
 8014414:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8014418:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801441c:	b93d      	cbnz	r5, 801442e <_dtoa_r+0x2e>
 801441e:	2010      	movs	r0, #16
 8014420:	f001 fa52 	bl	80158c8 <malloc>
 8014424:	6260      	str	r0, [r4, #36]	; 0x24
 8014426:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801442a:	6005      	str	r5, [r0, #0]
 801442c:	60c5      	str	r5, [r0, #12]
 801442e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014430:	6819      	ldr	r1, [r3, #0]
 8014432:	b151      	cbz	r1, 801444a <_dtoa_r+0x4a>
 8014434:	685a      	ldr	r2, [r3, #4]
 8014436:	604a      	str	r2, [r1, #4]
 8014438:	2301      	movs	r3, #1
 801443a:	4093      	lsls	r3, r2
 801443c:	608b      	str	r3, [r1, #8]
 801443e:	4620      	mov	r0, r4
 8014440:	f001 fa90 	bl	8015964 <_Bfree>
 8014444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014446:	2200      	movs	r2, #0
 8014448:	601a      	str	r2, [r3, #0]
 801444a:	1e3b      	subs	r3, r7, #0
 801444c:	bfb9      	ittee	lt
 801444e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014452:	9303      	strlt	r3, [sp, #12]
 8014454:	2300      	movge	r3, #0
 8014456:	f8c8 3000 	strge.w	r3, [r8]
 801445a:	9d03      	ldr	r5, [sp, #12]
 801445c:	4bac      	ldr	r3, [pc, #688]	; (8014710 <_dtoa_r+0x310>)
 801445e:	bfbc      	itt	lt
 8014460:	2201      	movlt	r2, #1
 8014462:	f8c8 2000 	strlt.w	r2, [r8]
 8014466:	43ab      	bics	r3, r5
 8014468:	d11b      	bne.n	80144a2 <_dtoa_r+0xa2>
 801446a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801446c:	f242 730f 	movw	r3, #9999	; 0x270f
 8014470:	6013      	str	r3, [r2, #0]
 8014472:	9b02      	ldr	r3, [sp, #8]
 8014474:	b923      	cbnz	r3, 8014480 <_dtoa_r+0x80>
 8014476:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801447a:	2d00      	cmp	r5, #0
 801447c:	f000 84dd 	beq.w	8014e3a <_dtoa_r+0xa3a>
 8014480:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014482:	b953      	cbnz	r3, 801449a <_dtoa_r+0x9a>
 8014484:	4ba3      	ldr	r3, [pc, #652]	; (8014714 <_dtoa_r+0x314>)
 8014486:	e020      	b.n	80144ca <_dtoa_r+0xca>
 8014488:	4ba3      	ldr	r3, [pc, #652]	; (8014718 <_dtoa_r+0x318>)
 801448a:	9304      	str	r3, [sp, #16]
 801448c:	3308      	adds	r3, #8
 801448e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014490:	6013      	str	r3, [r2, #0]
 8014492:	9804      	ldr	r0, [sp, #16]
 8014494:	b015      	add	sp, #84	; 0x54
 8014496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801449a:	4b9e      	ldr	r3, [pc, #632]	; (8014714 <_dtoa_r+0x314>)
 801449c:	9304      	str	r3, [sp, #16]
 801449e:	3303      	adds	r3, #3
 80144a0:	e7f5      	b.n	801448e <_dtoa_r+0x8e>
 80144a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80144aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80144b2:	d10c      	bne.n	80144ce <_dtoa_r+0xce>
 80144b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80144b6:	2301      	movs	r3, #1
 80144b8:	6013      	str	r3, [r2, #0]
 80144ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f000 84b9 	beq.w	8014e34 <_dtoa_r+0xa34>
 80144c2:	4b96      	ldr	r3, [pc, #600]	; (801471c <_dtoa_r+0x31c>)
 80144c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80144c6:	6013      	str	r3, [r2, #0]
 80144c8:	3b01      	subs	r3, #1
 80144ca:	9304      	str	r3, [sp, #16]
 80144cc:	e7e1      	b.n	8014492 <_dtoa_r+0x92>
 80144ce:	a913      	add	r1, sp, #76	; 0x4c
 80144d0:	aa12      	add	r2, sp, #72	; 0x48
 80144d2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80144d6:	4620      	mov	r0, r4
 80144d8:	f001 fd52 	bl	8015f80 <__d2b>
 80144dc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80144e0:	9001      	str	r0, [sp, #4]
 80144e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80144e4:	2e00      	cmp	r6, #0
 80144e6:	d046      	beq.n	8014576 <_dtoa_r+0x176>
 80144e8:	9805      	ldr	r0, [sp, #20]
 80144ea:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80144ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144f2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80144f6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80144fa:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80144fe:	2700      	movs	r7, #0
 8014500:	ee07 aa90 	vmov	s15, sl
 8014504:	ec43 2b16 	vmov	d6, r2, r3
 8014508:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801450c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80146f8 <_dtoa_r+0x2f8>
 8014510:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014514:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014518:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8014700 <_dtoa_r+0x300>
 801451c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014520:	eeb0 7b46 	vmov.f64	d7, d6
 8014524:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8014708 <_dtoa_r+0x308>
 8014528:	eea5 7b06 	vfma.f64	d7, d5, d6
 801452c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014530:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014538:	ee16 ba90 	vmov	fp, s13
 801453c:	d508      	bpl.n	8014550 <_dtoa_r+0x150>
 801453e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014542:	eeb4 6b47 	vcmp.f64	d6, d7
 8014546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454a:	bf18      	it	ne
 801454c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014550:	f1bb 0f16 	cmp.w	fp, #22
 8014554:	d834      	bhi.n	80145c0 <_dtoa_r+0x1c0>
 8014556:	4b72      	ldr	r3, [pc, #456]	; (8014720 <_dtoa_r+0x320>)
 8014558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801455c:	ed93 7b00 	vldr	d7, [r3]
 8014560:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014564:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456c:	dd01      	ble.n	8014572 <_dtoa_r+0x172>
 801456e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014572:	2300      	movs	r3, #0
 8014574:	e025      	b.n	80145c2 <_dtoa_r+0x1c2>
 8014576:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014578:	eb01 0a03 	add.w	sl, r1, r3
 801457c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8014580:	2b20      	cmp	r3, #32
 8014582:	dd17      	ble.n	80145b4 <_dtoa_r+0x1b4>
 8014584:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8014588:	9a02      	ldr	r2, [sp, #8]
 801458a:	409d      	lsls	r5, r3
 801458c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8014590:	fa22 f303 	lsr.w	r3, r2, r3
 8014594:	432b      	orrs	r3, r5
 8014596:	ee07 3a90 	vmov	s15, r3
 801459a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801459e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80145a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80145a6:	9805      	ldr	r0, [sp, #20]
 80145a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145ac:	2701      	movs	r7, #1
 80145ae:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80145b2:	e7a5      	b.n	8014500 <_dtoa_r+0x100>
 80145b4:	9a02      	ldr	r2, [sp, #8]
 80145b6:	f1c3 0320 	rsb	r3, r3, #32
 80145ba:	fa02 f303 	lsl.w	r3, r2, r3
 80145be:	e7ea      	b.n	8014596 <_dtoa_r+0x196>
 80145c0:	2301      	movs	r3, #1
 80145c2:	eba1 0a0a 	sub.w	sl, r1, sl
 80145c6:	9310      	str	r3, [sp, #64]	; 0x40
 80145c8:	f1ba 0301 	subs.w	r3, sl, #1
 80145cc:	9307      	str	r3, [sp, #28]
 80145ce:	bf43      	ittte	mi
 80145d0:	2300      	movmi	r3, #0
 80145d2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80145d6:	9307      	strmi	r3, [sp, #28]
 80145d8:	f04f 0a00 	movpl.w	sl, #0
 80145dc:	f1bb 0f00 	cmp.w	fp, #0
 80145e0:	db19      	blt.n	8014616 <_dtoa_r+0x216>
 80145e2:	9b07      	ldr	r3, [sp, #28]
 80145e4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80145e8:	445b      	add	r3, fp
 80145ea:	9307      	str	r3, [sp, #28]
 80145ec:	f04f 0800 	mov.w	r8, #0
 80145f0:	9b08      	ldr	r3, [sp, #32]
 80145f2:	2b09      	cmp	r3, #9
 80145f4:	d866      	bhi.n	80146c4 <_dtoa_r+0x2c4>
 80145f6:	2b05      	cmp	r3, #5
 80145f8:	bfc4      	itt	gt
 80145fa:	3b04      	subgt	r3, #4
 80145fc:	9308      	strgt	r3, [sp, #32]
 80145fe:	9b08      	ldr	r3, [sp, #32]
 8014600:	f1a3 0302 	sub.w	r3, r3, #2
 8014604:	bfcc      	ite	gt
 8014606:	2500      	movgt	r5, #0
 8014608:	2501      	movle	r5, #1
 801460a:	2b03      	cmp	r3, #3
 801460c:	d866      	bhi.n	80146dc <_dtoa_r+0x2dc>
 801460e:	e8df f003 	tbb	[pc, r3]
 8014612:	5755      	.short	0x5755
 8014614:	4909      	.short	0x4909
 8014616:	2300      	movs	r3, #0
 8014618:	ebaa 0a0b 	sub.w	sl, sl, fp
 801461c:	f1cb 0800 	rsb	r8, fp, #0
 8014620:	930b      	str	r3, [sp, #44]	; 0x2c
 8014622:	e7e5      	b.n	80145f0 <_dtoa_r+0x1f0>
 8014624:	2301      	movs	r3, #1
 8014626:	9309      	str	r3, [sp, #36]	; 0x24
 8014628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801462a:	2b00      	cmp	r3, #0
 801462c:	dd59      	ble.n	80146e2 <_dtoa_r+0x2e2>
 801462e:	9306      	str	r3, [sp, #24]
 8014630:	4699      	mov	r9, r3
 8014632:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014634:	2200      	movs	r2, #0
 8014636:	6072      	str	r2, [r6, #4]
 8014638:	2204      	movs	r2, #4
 801463a:	f102 0014 	add.w	r0, r2, #20
 801463e:	4298      	cmp	r0, r3
 8014640:	6871      	ldr	r1, [r6, #4]
 8014642:	d953      	bls.n	80146ec <_dtoa_r+0x2ec>
 8014644:	4620      	mov	r0, r4
 8014646:	f001 f959 	bl	80158fc <_Balloc>
 801464a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801464c:	6030      	str	r0, [r6, #0]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	9304      	str	r3, [sp, #16]
 8014652:	f1b9 0f0e 	cmp.w	r9, #14
 8014656:	f200 80c2 	bhi.w	80147de <_dtoa_r+0x3de>
 801465a:	2d00      	cmp	r5, #0
 801465c:	f000 80bf 	beq.w	80147de <_dtoa_r+0x3de>
 8014660:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014664:	f1bb 0f00 	cmp.w	fp, #0
 8014668:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801466c:	f340 80e6 	ble.w	801483c <_dtoa_r+0x43c>
 8014670:	4a2b      	ldr	r2, [pc, #172]	; (8014720 <_dtoa_r+0x320>)
 8014672:	f00b 030f 	and.w	r3, fp, #15
 8014676:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801467a:	ed93 7b00 	vldr	d7, [r3]
 801467e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8014682:	06da      	lsls	r2, r3, #27
 8014684:	f140 80d8 	bpl.w	8014838 <_dtoa_r+0x438>
 8014688:	4a26      	ldr	r2, [pc, #152]	; (8014724 <_dtoa_r+0x324>)
 801468a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801468e:	ed92 6b08 	vldr	d6, [r2, #32]
 8014692:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8014696:	ed8d 6b02 	vstr	d6, [sp, #8]
 801469a:	f003 030f 	and.w	r3, r3, #15
 801469e:	2203      	movs	r2, #3
 80146a0:	4920      	ldr	r1, [pc, #128]	; (8014724 <_dtoa_r+0x324>)
 80146a2:	e04a      	b.n	801473a <_dtoa_r+0x33a>
 80146a4:	2301      	movs	r3, #1
 80146a6:	9309      	str	r3, [sp, #36]	; 0x24
 80146a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146aa:	445b      	add	r3, fp
 80146ac:	f103 0901 	add.w	r9, r3, #1
 80146b0:	9306      	str	r3, [sp, #24]
 80146b2:	464b      	mov	r3, r9
 80146b4:	2b01      	cmp	r3, #1
 80146b6:	bfb8      	it	lt
 80146b8:	2301      	movlt	r3, #1
 80146ba:	e7ba      	b.n	8014632 <_dtoa_r+0x232>
 80146bc:	2300      	movs	r3, #0
 80146be:	e7b2      	b.n	8014626 <_dtoa_r+0x226>
 80146c0:	2300      	movs	r3, #0
 80146c2:	e7f0      	b.n	80146a6 <_dtoa_r+0x2a6>
 80146c4:	2501      	movs	r5, #1
 80146c6:	2300      	movs	r3, #0
 80146c8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80146cc:	f04f 33ff 	mov.w	r3, #4294967295
 80146d0:	9306      	str	r3, [sp, #24]
 80146d2:	4699      	mov	r9, r3
 80146d4:	2200      	movs	r2, #0
 80146d6:	2312      	movs	r3, #18
 80146d8:	920a      	str	r2, [sp, #40]	; 0x28
 80146da:	e7aa      	b.n	8014632 <_dtoa_r+0x232>
 80146dc:	2301      	movs	r3, #1
 80146de:	9309      	str	r3, [sp, #36]	; 0x24
 80146e0:	e7f4      	b.n	80146cc <_dtoa_r+0x2cc>
 80146e2:	2301      	movs	r3, #1
 80146e4:	9306      	str	r3, [sp, #24]
 80146e6:	4699      	mov	r9, r3
 80146e8:	461a      	mov	r2, r3
 80146ea:	e7f5      	b.n	80146d8 <_dtoa_r+0x2d8>
 80146ec:	3101      	adds	r1, #1
 80146ee:	6071      	str	r1, [r6, #4]
 80146f0:	0052      	lsls	r2, r2, #1
 80146f2:	e7a2      	b.n	801463a <_dtoa_r+0x23a>
 80146f4:	f3af 8000 	nop.w
 80146f8:	636f4361 	.word	0x636f4361
 80146fc:	3fd287a7 	.word	0x3fd287a7
 8014700:	8b60c8b3 	.word	0x8b60c8b3
 8014704:	3fc68a28 	.word	0x3fc68a28
 8014708:	509f79fb 	.word	0x509f79fb
 801470c:	3fd34413 	.word	0x3fd34413
 8014710:	7ff00000 	.word	0x7ff00000
 8014714:	08017751 	.word	0x08017751
 8014718:	08017748 	.word	0x08017748
 801471c:	080176cd 	.word	0x080176cd
 8014720:	080177f0 	.word	0x080177f0
 8014724:	080177c8 	.word	0x080177c8
 8014728:	07de      	lsls	r6, r3, #31
 801472a:	d504      	bpl.n	8014736 <_dtoa_r+0x336>
 801472c:	ed91 6b00 	vldr	d6, [r1]
 8014730:	3201      	adds	r2, #1
 8014732:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014736:	105b      	asrs	r3, r3, #1
 8014738:	3108      	adds	r1, #8
 801473a:	2b00      	cmp	r3, #0
 801473c:	d1f4      	bne.n	8014728 <_dtoa_r+0x328>
 801473e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014742:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014746:	ed8d 7b02 	vstr	d7, [sp, #8]
 801474a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801474c:	2b00      	cmp	r3, #0
 801474e:	f000 80a7 	beq.w	80148a0 <_dtoa_r+0x4a0>
 8014752:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014756:	ed9d 7b02 	vldr	d7, [sp, #8]
 801475a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014762:	f140 809d 	bpl.w	80148a0 <_dtoa_r+0x4a0>
 8014766:	f1b9 0f00 	cmp.w	r9, #0
 801476a:	f000 8099 	beq.w	80148a0 <_dtoa_r+0x4a0>
 801476e:	9b06      	ldr	r3, [sp, #24]
 8014770:	2b00      	cmp	r3, #0
 8014772:	dd30      	ble.n	80147d6 <_dtoa_r+0x3d6>
 8014774:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014778:	ee27 7b06 	vmul.f64	d7, d7, d6
 801477c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014780:	9d06      	ldr	r5, [sp, #24]
 8014782:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014786:	3201      	adds	r2, #1
 8014788:	ed9d 6b02 	vldr	d6, [sp, #8]
 801478c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8014790:	ee07 2a90 	vmov	s15, r2
 8014794:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014798:	eea7 5b06 	vfma.f64	d5, d7, d6
 801479c:	ed8d 5b02 	vstr	d5, [sp, #8]
 80147a0:	9a03      	ldr	r2, [sp, #12]
 80147a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147a6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80147aa:	2d00      	cmp	r5, #0
 80147ac:	d17b      	bne.n	80148a6 <_dtoa_r+0x4a6>
 80147ae:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80147b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80147b6:	ec41 0b17 	vmov	d7, r0, r1
 80147ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80147be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147c2:	f300 8253 	bgt.w	8014c6c <_dtoa_r+0x86c>
 80147c6:	eeb1 7b47 	vneg.f64	d7, d7
 80147ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80147ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d2:	f100 8249 	bmi.w	8014c68 <_dtoa_r+0x868>
 80147d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80147da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80147de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	f2c0 8119 	blt.w	8014a18 <_dtoa_r+0x618>
 80147e6:	f1bb 0f0e 	cmp.w	fp, #14
 80147ea:	f300 8115 	bgt.w	8014a18 <_dtoa_r+0x618>
 80147ee:	4bc3      	ldr	r3, [pc, #780]	; (8014afc <_dtoa_r+0x6fc>)
 80147f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80147f4:	ed93 6b00 	vldr	d6, [r3]
 80147f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	f280 80ba 	bge.w	8014974 <_dtoa_r+0x574>
 8014800:	f1b9 0f00 	cmp.w	r9, #0
 8014804:	f300 80b6 	bgt.w	8014974 <_dtoa_r+0x574>
 8014808:	f040 822d 	bne.w	8014c66 <_dtoa_r+0x866>
 801480c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014810:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014814:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014818:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801481c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014820:	464d      	mov	r5, r9
 8014822:	464f      	mov	r7, r9
 8014824:	f280 8204 	bge.w	8014c30 <_dtoa_r+0x830>
 8014828:	9b04      	ldr	r3, [sp, #16]
 801482a:	9a04      	ldr	r2, [sp, #16]
 801482c:	1c5e      	adds	r6, r3, #1
 801482e:	2331      	movs	r3, #49	; 0x31
 8014830:	7013      	strb	r3, [r2, #0]
 8014832:	f10b 0b01 	add.w	fp, fp, #1
 8014836:	e1ff      	b.n	8014c38 <_dtoa_r+0x838>
 8014838:	2202      	movs	r2, #2
 801483a:	e731      	b.n	80146a0 <_dtoa_r+0x2a0>
 801483c:	d02e      	beq.n	801489c <_dtoa_r+0x49c>
 801483e:	f1cb 0300 	rsb	r3, fp, #0
 8014842:	4aae      	ldr	r2, [pc, #696]	; (8014afc <_dtoa_r+0x6fc>)
 8014844:	f003 010f 	and.w	r1, r3, #15
 8014848:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801484c:	ed92 7b00 	vldr	d7, [r2]
 8014850:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8014854:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014858:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801485c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8014860:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014864:	49a6      	ldr	r1, [pc, #664]	; (8014b00 <_dtoa_r+0x700>)
 8014866:	111b      	asrs	r3, r3, #4
 8014868:	2000      	movs	r0, #0
 801486a:	2202      	movs	r2, #2
 801486c:	b93b      	cbnz	r3, 801487e <_dtoa_r+0x47e>
 801486e:	2800      	cmp	r0, #0
 8014870:	f43f af6b 	beq.w	801474a <_dtoa_r+0x34a>
 8014874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801487c:	e765      	b.n	801474a <_dtoa_r+0x34a>
 801487e:	07dd      	lsls	r5, r3, #31
 8014880:	d509      	bpl.n	8014896 <_dtoa_r+0x496>
 8014882:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8014886:	ed91 7b00 	vldr	d7, [r1]
 801488a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801488e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014892:	3201      	adds	r2, #1
 8014894:	2001      	movs	r0, #1
 8014896:	105b      	asrs	r3, r3, #1
 8014898:	3108      	adds	r1, #8
 801489a:	e7e7      	b.n	801486c <_dtoa_r+0x46c>
 801489c:	2202      	movs	r2, #2
 801489e:	e754      	b.n	801474a <_dtoa_r+0x34a>
 80148a0:	465b      	mov	r3, fp
 80148a2:	464d      	mov	r5, r9
 80148a4:	e770      	b.n	8014788 <_dtoa_r+0x388>
 80148a6:	4a95      	ldr	r2, [pc, #596]	; (8014afc <_dtoa_r+0x6fc>)
 80148a8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80148ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 80148b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148b2:	ec41 0b17 	vmov	d7, r0, r1
 80148b6:	b35a      	cbz	r2, 8014910 <_dtoa_r+0x510>
 80148b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80148bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80148c0:	9e04      	ldr	r6, [sp, #16]
 80148c2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80148c6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80148ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80148ce:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80148d2:	ee14 2a90 	vmov	r2, s9
 80148d6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80148da:	3230      	adds	r2, #48	; 0x30
 80148dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80148e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80148e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e8:	f806 2b01 	strb.w	r2, [r6], #1
 80148ec:	d43b      	bmi.n	8014966 <_dtoa_r+0x566>
 80148ee:	ee32 5b46 	vsub.f64	d5, d2, d6
 80148f2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80148f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148fa:	d472      	bmi.n	80149e2 <_dtoa_r+0x5e2>
 80148fc:	9a04      	ldr	r2, [sp, #16]
 80148fe:	1ab2      	subs	r2, r6, r2
 8014900:	4295      	cmp	r5, r2
 8014902:	f77f af68 	ble.w	80147d6 <_dtoa_r+0x3d6>
 8014906:	ee27 7b03 	vmul.f64	d7, d7, d3
 801490a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801490e:	e7de      	b.n	80148ce <_dtoa_r+0x4ce>
 8014910:	9a04      	ldr	r2, [sp, #16]
 8014912:	ee24 7b07 	vmul.f64	d7, d4, d7
 8014916:	1956      	adds	r6, r2, r5
 8014918:	4611      	mov	r1, r2
 801491a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801491e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014922:	ee14 2a90 	vmov	r2, s9
 8014926:	3230      	adds	r2, #48	; 0x30
 8014928:	f801 2b01 	strb.w	r2, [r1], #1
 801492c:	42b1      	cmp	r1, r6
 801492e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014932:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014936:	d11a      	bne.n	801496e <_dtoa_r+0x56e>
 8014938:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801493c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014940:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014948:	dc4b      	bgt.n	80149e2 <_dtoa_r+0x5e2>
 801494a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801494e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014956:	f57f af3e 	bpl.w	80147d6 <_dtoa_r+0x3d6>
 801495a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801495e:	2a30      	cmp	r2, #48	; 0x30
 8014960:	f106 31ff 	add.w	r1, r6, #4294967295
 8014964:	d001      	beq.n	801496a <_dtoa_r+0x56a>
 8014966:	469b      	mov	fp, r3
 8014968:	e02a      	b.n	80149c0 <_dtoa_r+0x5c0>
 801496a:	460e      	mov	r6, r1
 801496c:	e7f5      	b.n	801495a <_dtoa_r+0x55a>
 801496e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014972:	e7d4      	b.n	801491e <_dtoa_r+0x51e>
 8014974:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014978:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801497c:	9e04      	ldr	r6, [sp, #16]
 801497e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014982:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014986:	ee15 3a10 	vmov	r3, s10
 801498a:	3330      	adds	r3, #48	; 0x30
 801498c:	f806 3b01 	strb.w	r3, [r6], #1
 8014990:	9b04      	ldr	r3, [sp, #16]
 8014992:	1af3      	subs	r3, r6, r3
 8014994:	4599      	cmp	r9, r3
 8014996:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801499a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801499e:	d133      	bne.n	8014a08 <_dtoa_r+0x608>
 80149a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80149a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80149a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ac:	dc18      	bgt.n	80149e0 <_dtoa_r+0x5e0>
 80149ae:	eeb4 7b46 	vcmp.f64	d7, d6
 80149b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b6:	d103      	bne.n	80149c0 <_dtoa_r+0x5c0>
 80149b8:	ee15 3a10 	vmov	r3, s10
 80149bc:	07db      	lsls	r3, r3, #31
 80149be:	d40f      	bmi.n	80149e0 <_dtoa_r+0x5e0>
 80149c0:	9901      	ldr	r1, [sp, #4]
 80149c2:	4620      	mov	r0, r4
 80149c4:	f000 ffce 	bl	8015964 <_Bfree>
 80149c8:	2300      	movs	r3, #0
 80149ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80149cc:	7033      	strb	r3, [r6, #0]
 80149ce:	f10b 0301 	add.w	r3, fp, #1
 80149d2:	6013      	str	r3, [r2, #0]
 80149d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	f43f ad5b 	beq.w	8014492 <_dtoa_r+0x92>
 80149dc:	601e      	str	r6, [r3, #0]
 80149de:	e558      	b.n	8014492 <_dtoa_r+0x92>
 80149e0:	465b      	mov	r3, fp
 80149e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80149e6:	2939      	cmp	r1, #57	; 0x39
 80149e8:	f106 32ff 	add.w	r2, r6, #4294967295
 80149ec:	d106      	bne.n	80149fc <_dtoa_r+0x5fc>
 80149ee:	9904      	ldr	r1, [sp, #16]
 80149f0:	4291      	cmp	r1, r2
 80149f2:	d107      	bne.n	8014a04 <_dtoa_r+0x604>
 80149f4:	2230      	movs	r2, #48	; 0x30
 80149f6:	700a      	strb	r2, [r1, #0]
 80149f8:	3301      	adds	r3, #1
 80149fa:	460a      	mov	r2, r1
 80149fc:	7811      	ldrb	r1, [r2, #0]
 80149fe:	3101      	adds	r1, #1
 8014a00:	7011      	strb	r1, [r2, #0]
 8014a02:	e7b0      	b.n	8014966 <_dtoa_r+0x566>
 8014a04:	4616      	mov	r6, r2
 8014a06:	e7ec      	b.n	80149e2 <_dtoa_r+0x5e2>
 8014a08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014a0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a14:	d1b3      	bne.n	801497e <_dtoa_r+0x57e>
 8014a16:	e7d3      	b.n	80149c0 <_dtoa_r+0x5c0>
 8014a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a1a:	2a00      	cmp	r2, #0
 8014a1c:	f000 808d 	beq.w	8014b3a <_dtoa_r+0x73a>
 8014a20:	9a08      	ldr	r2, [sp, #32]
 8014a22:	2a01      	cmp	r2, #1
 8014a24:	dc72      	bgt.n	8014b0c <_dtoa_r+0x70c>
 8014a26:	2f00      	cmp	r7, #0
 8014a28:	d06c      	beq.n	8014b04 <_dtoa_r+0x704>
 8014a2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014a2e:	4645      	mov	r5, r8
 8014a30:	4656      	mov	r6, sl
 8014a32:	9a07      	ldr	r2, [sp, #28]
 8014a34:	2101      	movs	r1, #1
 8014a36:	441a      	add	r2, r3
 8014a38:	4620      	mov	r0, r4
 8014a3a:	449a      	add	sl, r3
 8014a3c:	9207      	str	r2, [sp, #28]
 8014a3e:	f001 f86f 	bl	8015b20 <__i2b>
 8014a42:	4607      	mov	r7, r0
 8014a44:	2e00      	cmp	r6, #0
 8014a46:	dd0b      	ble.n	8014a60 <_dtoa_r+0x660>
 8014a48:	9b07      	ldr	r3, [sp, #28]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	dd08      	ble.n	8014a60 <_dtoa_r+0x660>
 8014a4e:	42b3      	cmp	r3, r6
 8014a50:	9a07      	ldr	r2, [sp, #28]
 8014a52:	bfa8      	it	ge
 8014a54:	4633      	movge	r3, r6
 8014a56:	ebaa 0a03 	sub.w	sl, sl, r3
 8014a5a:	1af6      	subs	r6, r6, r3
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	9307      	str	r3, [sp, #28]
 8014a60:	f1b8 0f00 	cmp.w	r8, #0
 8014a64:	d01d      	beq.n	8014aa2 <_dtoa_r+0x6a2>
 8014a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d06a      	beq.n	8014b42 <_dtoa_r+0x742>
 8014a6c:	b18d      	cbz	r5, 8014a92 <_dtoa_r+0x692>
 8014a6e:	4639      	mov	r1, r7
 8014a70:	462a      	mov	r2, r5
 8014a72:	4620      	mov	r0, r4
 8014a74:	f001 f8f4 	bl	8015c60 <__pow5mult>
 8014a78:	9a01      	ldr	r2, [sp, #4]
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	4607      	mov	r7, r0
 8014a7e:	4620      	mov	r0, r4
 8014a80:	f001 f857 	bl	8015b32 <__multiply>
 8014a84:	9901      	ldr	r1, [sp, #4]
 8014a86:	900c      	str	r0, [sp, #48]	; 0x30
 8014a88:	4620      	mov	r0, r4
 8014a8a:	f000 ff6b 	bl	8015964 <_Bfree>
 8014a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a90:	9301      	str	r3, [sp, #4]
 8014a92:	ebb8 0205 	subs.w	r2, r8, r5
 8014a96:	d004      	beq.n	8014aa2 <_dtoa_r+0x6a2>
 8014a98:	9901      	ldr	r1, [sp, #4]
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	f001 f8e0 	bl	8015c60 <__pow5mult>
 8014aa0:	9001      	str	r0, [sp, #4]
 8014aa2:	2101      	movs	r1, #1
 8014aa4:	4620      	mov	r0, r4
 8014aa6:	f001 f83b 	bl	8015b20 <__i2b>
 8014aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aac:	4605      	mov	r5, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	f000 81ca 	beq.w	8014e48 <_dtoa_r+0xa48>
 8014ab4:	461a      	mov	r2, r3
 8014ab6:	4601      	mov	r1, r0
 8014ab8:	4620      	mov	r0, r4
 8014aba:	f001 f8d1 	bl	8015c60 <__pow5mult>
 8014abe:	9b08      	ldr	r3, [sp, #32]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	4605      	mov	r5, r0
 8014ac4:	dc44      	bgt.n	8014b50 <_dtoa_r+0x750>
 8014ac6:	9b02      	ldr	r3, [sp, #8]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d13c      	bne.n	8014b46 <_dtoa_r+0x746>
 8014acc:	9b03      	ldr	r3, [sp, #12]
 8014ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d137      	bne.n	8014b46 <_dtoa_r+0x746>
 8014ad6:	9b03      	ldr	r3, [sp, #12]
 8014ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014adc:	0d1b      	lsrs	r3, r3, #20
 8014ade:	051b      	lsls	r3, r3, #20
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d033      	beq.n	8014b4c <_dtoa_r+0x74c>
 8014ae4:	9b07      	ldr	r3, [sp, #28]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	f10a 0a01 	add.w	sl, sl, #1
 8014aec:	9307      	str	r3, [sp, #28]
 8014aee:	f04f 0801 	mov.w	r8, #1
 8014af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014af4:	bb73      	cbnz	r3, 8014b54 <_dtoa_r+0x754>
 8014af6:	2001      	movs	r0, #1
 8014af8:	e034      	b.n	8014b64 <_dtoa_r+0x764>
 8014afa:	bf00      	nop
 8014afc:	080177f0 	.word	0x080177f0
 8014b00:	080177c8 	.word	0x080177c8
 8014b04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014b06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014b0a:	e790      	b.n	8014a2e <_dtoa_r+0x62e>
 8014b0c:	f109 35ff 	add.w	r5, r9, #4294967295
 8014b10:	45a8      	cmp	r8, r5
 8014b12:	bfbf      	itttt	lt
 8014b14:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8014b16:	eba5 0808 	sublt.w	r8, r5, r8
 8014b1a:	4443      	addlt	r3, r8
 8014b1c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8014b1e:	bfb6      	itet	lt
 8014b20:	46a8      	movlt	r8, r5
 8014b22:	eba8 0505 	subge.w	r5, r8, r5
 8014b26:	2500      	movlt	r5, #0
 8014b28:	f1b9 0f00 	cmp.w	r9, #0
 8014b2c:	bfb9      	ittee	lt
 8014b2e:	ebaa 0609 	sublt.w	r6, sl, r9
 8014b32:	2300      	movlt	r3, #0
 8014b34:	4656      	movge	r6, sl
 8014b36:	464b      	movge	r3, r9
 8014b38:	e77b      	b.n	8014a32 <_dtoa_r+0x632>
 8014b3a:	4645      	mov	r5, r8
 8014b3c:	4656      	mov	r6, sl
 8014b3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014b40:	e780      	b.n	8014a44 <_dtoa_r+0x644>
 8014b42:	4642      	mov	r2, r8
 8014b44:	e7a8      	b.n	8014a98 <_dtoa_r+0x698>
 8014b46:	f04f 0800 	mov.w	r8, #0
 8014b4a:	e7d2      	b.n	8014af2 <_dtoa_r+0x6f2>
 8014b4c:	4698      	mov	r8, r3
 8014b4e:	e7d0      	b.n	8014af2 <_dtoa_r+0x6f2>
 8014b50:	f04f 0800 	mov.w	r8, #0
 8014b54:	692b      	ldr	r3, [r5, #16]
 8014b56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014b5a:	6918      	ldr	r0, [r3, #16]
 8014b5c:	f000 ff92 	bl	8015a84 <__hi0bits>
 8014b60:	f1c0 0020 	rsb	r0, r0, #32
 8014b64:	9b07      	ldr	r3, [sp, #28]
 8014b66:	4418      	add	r0, r3
 8014b68:	f010 001f 	ands.w	r0, r0, #31
 8014b6c:	d047      	beq.n	8014bfe <_dtoa_r+0x7fe>
 8014b6e:	f1c0 0320 	rsb	r3, r0, #32
 8014b72:	2b04      	cmp	r3, #4
 8014b74:	dd3b      	ble.n	8014bee <_dtoa_r+0x7ee>
 8014b76:	9b07      	ldr	r3, [sp, #28]
 8014b78:	f1c0 001c 	rsb	r0, r0, #28
 8014b7c:	4482      	add	sl, r0
 8014b7e:	4406      	add	r6, r0
 8014b80:	4403      	add	r3, r0
 8014b82:	9307      	str	r3, [sp, #28]
 8014b84:	f1ba 0f00 	cmp.w	sl, #0
 8014b88:	dd05      	ble.n	8014b96 <_dtoa_r+0x796>
 8014b8a:	4652      	mov	r2, sl
 8014b8c:	9901      	ldr	r1, [sp, #4]
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f001 f8b4 	bl	8015cfc <__lshift>
 8014b94:	9001      	str	r0, [sp, #4]
 8014b96:	9b07      	ldr	r3, [sp, #28]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	dd05      	ble.n	8014ba8 <_dtoa_r+0x7a8>
 8014b9c:	4629      	mov	r1, r5
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f001 f8ab 	bl	8015cfc <__lshift>
 8014ba6:	4605      	mov	r5, r0
 8014ba8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014baa:	b353      	cbz	r3, 8014c02 <_dtoa_r+0x802>
 8014bac:	4629      	mov	r1, r5
 8014bae:	9801      	ldr	r0, [sp, #4]
 8014bb0:	f001 f8f8 	bl	8015da4 <__mcmp>
 8014bb4:	2800      	cmp	r0, #0
 8014bb6:	da24      	bge.n	8014c02 <_dtoa_r+0x802>
 8014bb8:	2300      	movs	r3, #0
 8014bba:	220a      	movs	r2, #10
 8014bbc:	9901      	ldr	r1, [sp, #4]
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	f000 fee7 	bl	8015992 <__multadd>
 8014bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bc6:	9001      	str	r0, [sp, #4]
 8014bc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	f000 8142 	beq.w	8014e56 <_dtoa_r+0xa56>
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	220a      	movs	r2, #10
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f000 feda 	bl	8015992 <__multadd>
 8014bde:	9b06      	ldr	r3, [sp, #24]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	4607      	mov	r7, r0
 8014be4:	dc4b      	bgt.n	8014c7e <_dtoa_r+0x87e>
 8014be6:	9b08      	ldr	r3, [sp, #32]
 8014be8:	2b02      	cmp	r3, #2
 8014bea:	dd48      	ble.n	8014c7e <_dtoa_r+0x87e>
 8014bec:	e011      	b.n	8014c12 <_dtoa_r+0x812>
 8014bee:	d0c9      	beq.n	8014b84 <_dtoa_r+0x784>
 8014bf0:	9a07      	ldr	r2, [sp, #28]
 8014bf2:	331c      	adds	r3, #28
 8014bf4:	441a      	add	r2, r3
 8014bf6:	449a      	add	sl, r3
 8014bf8:	441e      	add	r6, r3
 8014bfa:	4613      	mov	r3, r2
 8014bfc:	e7c1      	b.n	8014b82 <_dtoa_r+0x782>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	e7f6      	b.n	8014bf0 <_dtoa_r+0x7f0>
 8014c02:	f1b9 0f00 	cmp.w	r9, #0
 8014c06:	dc34      	bgt.n	8014c72 <_dtoa_r+0x872>
 8014c08:	9b08      	ldr	r3, [sp, #32]
 8014c0a:	2b02      	cmp	r3, #2
 8014c0c:	dd31      	ble.n	8014c72 <_dtoa_r+0x872>
 8014c0e:	f8cd 9018 	str.w	r9, [sp, #24]
 8014c12:	9b06      	ldr	r3, [sp, #24]
 8014c14:	b963      	cbnz	r3, 8014c30 <_dtoa_r+0x830>
 8014c16:	4629      	mov	r1, r5
 8014c18:	2205      	movs	r2, #5
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f000 feb9 	bl	8015992 <__multadd>
 8014c20:	4601      	mov	r1, r0
 8014c22:	4605      	mov	r5, r0
 8014c24:	9801      	ldr	r0, [sp, #4]
 8014c26:	f001 f8bd 	bl	8015da4 <__mcmp>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	f73f adfc 	bgt.w	8014828 <_dtoa_r+0x428>
 8014c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c32:	9e04      	ldr	r6, [sp, #16]
 8014c34:	ea6f 0b03 	mvn.w	fp, r3
 8014c38:	f04f 0900 	mov.w	r9, #0
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	4620      	mov	r0, r4
 8014c40:	f000 fe90 	bl	8015964 <_Bfree>
 8014c44:	2f00      	cmp	r7, #0
 8014c46:	f43f aebb 	beq.w	80149c0 <_dtoa_r+0x5c0>
 8014c4a:	f1b9 0f00 	cmp.w	r9, #0
 8014c4e:	d005      	beq.n	8014c5c <_dtoa_r+0x85c>
 8014c50:	45b9      	cmp	r9, r7
 8014c52:	d003      	beq.n	8014c5c <_dtoa_r+0x85c>
 8014c54:	4649      	mov	r1, r9
 8014c56:	4620      	mov	r0, r4
 8014c58:	f000 fe84 	bl	8015964 <_Bfree>
 8014c5c:	4639      	mov	r1, r7
 8014c5e:	4620      	mov	r0, r4
 8014c60:	f000 fe80 	bl	8015964 <_Bfree>
 8014c64:	e6ac      	b.n	80149c0 <_dtoa_r+0x5c0>
 8014c66:	2500      	movs	r5, #0
 8014c68:	462f      	mov	r7, r5
 8014c6a:	e7e1      	b.n	8014c30 <_dtoa_r+0x830>
 8014c6c:	469b      	mov	fp, r3
 8014c6e:	462f      	mov	r7, r5
 8014c70:	e5da      	b.n	8014828 <_dtoa_r+0x428>
 8014c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c74:	f8cd 9018 	str.w	r9, [sp, #24]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f000 80f3 	beq.w	8014e64 <_dtoa_r+0xa64>
 8014c7e:	2e00      	cmp	r6, #0
 8014c80:	dd05      	ble.n	8014c8e <_dtoa_r+0x88e>
 8014c82:	4639      	mov	r1, r7
 8014c84:	4632      	mov	r2, r6
 8014c86:	4620      	mov	r0, r4
 8014c88:	f001 f838 	bl	8015cfc <__lshift>
 8014c8c:	4607      	mov	r7, r0
 8014c8e:	f1b8 0f00 	cmp.w	r8, #0
 8014c92:	d04c      	beq.n	8014d2e <_dtoa_r+0x92e>
 8014c94:	6879      	ldr	r1, [r7, #4]
 8014c96:	4620      	mov	r0, r4
 8014c98:	f000 fe30 	bl	80158fc <_Balloc>
 8014c9c:	693a      	ldr	r2, [r7, #16]
 8014c9e:	3202      	adds	r2, #2
 8014ca0:	4606      	mov	r6, r0
 8014ca2:	0092      	lsls	r2, r2, #2
 8014ca4:	f107 010c 	add.w	r1, r7, #12
 8014ca8:	300c      	adds	r0, #12
 8014caa:	f7fd fd2b 	bl	8012704 <memcpy>
 8014cae:	2201      	movs	r2, #1
 8014cb0:	4631      	mov	r1, r6
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f001 f822 	bl	8015cfc <__lshift>
 8014cb8:	9b02      	ldr	r3, [sp, #8]
 8014cba:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014cbe:	f003 0301 	and.w	r3, r3, #1
 8014cc2:	46b9      	mov	r9, r7
 8014cc4:	9307      	str	r3, [sp, #28]
 8014cc6:	4607      	mov	r7, r0
 8014cc8:	4629      	mov	r1, r5
 8014cca:	9801      	ldr	r0, [sp, #4]
 8014ccc:	f7ff fb0a 	bl	80142e4 <quorem>
 8014cd0:	4649      	mov	r1, r9
 8014cd2:	4606      	mov	r6, r0
 8014cd4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014cd8:	9801      	ldr	r0, [sp, #4]
 8014cda:	f001 f863 	bl	8015da4 <__mcmp>
 8014cde:	463a      	mov	r2, r7
 8014ce0:	9002      	str	r0, [sp, #8]
 8014ce2:	4629      	mov	r1, r5
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	f001 f877 	bl	8015dd8 <__mdiff>
 8014cea:	68c3      	ldr	r3, [r0, #12]
 8014cec:	4602      	mov	r2, r0
 8014cee:	bb03      	cbnz	r3, 8014d32 <_dtoa_r+0x932>
 8014cf0:	4601      	mov	r1, r0
 8014cf2:	9009      	str	r0, [sp, #36]	; 0x24
 8014cf4:	9801      	ldr	r0, [sp, #4]
 8014cf6:	f001 f855 	bl	8015da4 <__mcmp>
 8014cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	4611      	mov	r1, r2
 8014d00:	4620      	mov	r0, r4
 8014d02:	9309      	str	r3, [sp, #36]	; 0x24
 8014d04:	f000 fe2e 	bl	8015964 <_Bfree>
 8014d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d0a:	b9a3      	cbnz	r3, 8014d36 <_dtoa_r+0x936>
 8014d0c:	9a08      	ldr	r2, [sp, #32]
 8014d0e:	b992      	cbnz	r2, 8014d36 <_dtoa_r+0x936>
 8014d10:	9a07      	ldr	r2, [sp, #28]
 8014d12:	b982      	cbnz	r2, 8014d36 <_dtoa_r+0x936>
 8014d14:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d18:	d029      	beq.n	8014d6e <_dtoa_r+0x96e>
 8014d1a:	9b02      	ldr	r3, [sp, #8]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	dd01      	ble.n	8014d24 <_dtoa_r+0x924>
 8014d20:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8014d24:	f10a 0601 	add.w	r6, sl, #1
 8014d28:	f88a 8000 	strb.w	r8, [sl]
 8014d2c:	e786      	b.n	8014c3c <_dtoa_r+0x83c>
 8014d2e:	4638      	mov	r0, r7
 8014d30:	e7c2      	b.n	8014cb8 <_dtoa_r+0x8b8>
 8014d32:	2301      	movs	r3, #1
 8014d34:	e7e3      	b.n	8014cfe <_dtoa_r+0x8fe>
 8014d36:	9a02      	ldr	r2, [sp, #8]
 8014d38:	2a00      	cmp	r2, #0
 8014d3a:	db04      	blt.n	8014d46 <_dtoa_r+0x946>
 8014d3c:	d124      	bne.n	8014d88 <_dtoa_r+0x988>
 8014d3e:	9a08      	ldr	r2, [sp, #32]
 8014d40:	bb12      	cbnz	r2, 8014d88 <_dtoa_r+0x988>
 8014d42:	9a07      	ldr	r2, [sp, #28]
 8014d44:	bb02      	cbnz	r2, 8014d88 <_dtoa_r+0x988>
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	ddec      	ble.n	8014d24 <_dtoa_r+0x924>
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	9901      	ldr	r1, [sp, #4]
 8014d4e:	4620      	mov	r0, r4
 8014d50:	f000 ffd4 	bl	8015cfc <__lshift>
 8014d54:	4629      	mov	r1, r5
 8014d56:	9001      	str	r0, [sp, #4]
 8014d58:	f001 f824 	bl	8015da4 <__mcmp>
 8014d5c:	2800      	cmp	r0, #0
 8014d5e:	dc03      	bgt.n	8014d68 <_dtoa_r+0x968>
 8014d60:	d1e0      	bne.n	8014d24 <_dtoa_r+0x924>
 8014d62:	f018 0f01 	tst.w	r8, #1
 8014d66:	d0dd      	beq.n	8014d24 <_dtoa_r+0x924>
 8014d68:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d6c:	d1d8      	bne.n	8014d20 <_dtoa_r+0x920>
 8014d6e:	2339      	movs	r3, #57	; 0x39
 8014d70:	f10a 0601 	add.w	r6, sl, #1
 8014d74:	f88a 3000 	strb.w	r3, [sl]
 8014d78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014d7c:	2b39      	cmp	r3, #57	; 0x39
 8014d7e:	f106 32ff 	add.w	r2, r6, #4294967295
 8014d82:	d04c      	beq.n	8014e1e <_dtoa_r+0xa1e>
 8014d84:	3301      	adds	r3, #1
 8014d86:	e051      	b.n	8014e2c <_dtoa_r+0xa2c>
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	f10a 0601 	add.w	r6, sl, #1
 8014d8e:	dd05      	ble.n	8014d9c <_dtoa_r+0x99c>
 8014d90:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d94:	d0eb      	beq.n	8014d6e <_dtoa_r+0x96e>
 8014d96:	f108 0801 	add.w	r8, r8, #1
 8014d9a:	e7c5      	b.n	8014d28 <_dtoa_r+0x928>
 8014d9c:	9b04      	ldr	r3, [sp, #16]
 8014d9e:	9a06      	ldr	r2, [sp, #24]
 8014da0:	f806 8c01 	strb.w	r8, [r6, #-1]
 8014da4:	1af3      	subs	r3, r6, r3
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d021      	beq.n	8014dee <_dtoa_r+0x9ee>
 8014daa:	2300      	movs	r3, #0
 8014dac:	220a      	movs	r2, #10
 8014dae:	9901      	ldr	r1, [sp, #4]
 8014db0:	4620      	mov	r0, r4
 8014db2:	f000 fdee 	bl	8015992 <__multadd>
 8014db6:	45b9      	cmp	r9, r7
 8014db8:	9001      	str	r0, [sp, #4]
 8014dba:	f04f 0300 	mov.w	r3, #0
 8014dbe:	f04f 020a 	mov.w	r2, #10
 8014dc2:	4649      	mov	r1, r9
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	d105      	bne.n	8014dd4 <_dtoa_r+0x9d4>
 8014dc8:	f000 fde3 	bl	8015992 <__multadd>
 8014dcc:	4681      	mov	r9, r0
 8014dce:	4607      	mov	r7, r0
 8014dd0:	46b2      	mov	sl, r6
 8014dd2:	e779      	b.n	8014cc8 <_dtoa_r+0x8c8>
 8014dd4:	f000 fddd 	bl	8015992 <__multadd>
 8014dd8:	4639      	mov	r1, r7
 8014dda:	4681      	mov	r9, r0
 8014ddc:	2300      	movs	r3, #0
 8014dde:	220a      	movs	r2, #10
 8014de0:	4620      	mov	r0, r4
 8014de2:	f000 fdd6 	bl	8015992 <__multadd>
 8014de6:	4607      	mov	r7, r0
 8014de8:	e7f2      	b.n	8014dd0 <_dtoa_r+0x9d0>
 8014dea:	f04f 0900 	mov.w	r9, #0
 8014dee:	2201      	movs	r2, #1
 8014df0:	9901      	ldr	r1, [sp, #4]
 8014df2:	4620      	mov	r0, r4
 8014df4:	f000 ff82 	bl	8015cfc <__lshift>
 8014df8:	4629      	mov	r1, r5
 8014dfa:	9001      	str	r0, [sp, #4]
 8014dfc:	f000 ffd2 	bl	8015da4 <__mcmp>
 8014e00:	2800      	cmp	r0, #0
 8014e02:	dcb9      	bgt.n	8014d78 <_dtoa_r+0x978>
 8014e04:	d102      	bne.n	8014e0c <_dtoa_r+0xa0c>
 8014e06:	f018 0f01 	tst.w	r8, #1
 8014e0a:	d1b5      	bne.n	8014d78 <_dtoa_r+0x978>
 8014e0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014e10:	2b30      	cmp	r3, #48	; 0x30
 8014e12:	f106 32ff 	add.w	r2, r6, #4294967295
 8014e16:	f47f af11 	bne.w	8014c3c <_dtoa_r+0x83c>
 8014e1a:	4616      	mov	r6, r2
 8014e1c:	e7f6      	b.n	8014e0c <_dtoa_r+0xa0c>
 8014e1e:	9b04      	ldr	r3, [sp, #16]
 8014e20:	4293      	cmp	r3, r2
 8014e22:	d105      	bne.n	8014e30 <_dtoa_r+0xa30>
 8014e24:	9a04      	ldr	r2, [sp, #16]
 8014e26:	f10b 0b01 	add.w	fp, fp, #1
 8014e2a:	2331      	movs	r3, #49	; 0x31
 8014e2c:	7013      	strb	r3, [r2, #0]
 8014e2e:	e705      	b.n	8014c3c <_dtoa_r+0x83c>
 8014e30:	4616      	mov	r6, r2
 8014e32:	e7a1      	b.n	8014d78 <_dtoa_r+0x978>
 8014e34:	4b16      	ldr	r3, [pc, #88]	; (8014e90 <_dtoa_r+0xa90>)
 8014e36:	f7ff bb48 	b.w	80144ca <_dtoa_r+0xca>
 8014e3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	f47f ab23 	bne.w	8014488 <_dtoa_r+0x88>
 8014e42:	4b14      	ldr	r3, [pc, #80]	; (8014e94 <_dtoa_r+0xa94>)
 8014e44:	f7ff bb41 	b.w	80144ca <_dtoa_r+0xca>
 8014e48:	9b08      	ldr	r3, [sp, #32]
 8014e4a:	2b01      	cmp	r3, #1
 8014e4c:	f77f ae3b 	ble.w	8014ac6 <_dtoa_r+0x6c6>
 8014e50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014e54:	e64f      	b.n	8014af6 <_dtoa_r+0x6f6>
 8014e56:	9b06      	ldr	r3, [sp, #24]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	dc03      	bgt.n	8014e64 <_dtoa_r+0xa64>
 8014e5c:	9b08      	ldr	r3, [sp, #32]
 8014e5e:	2b02      	cmp	r3, #2
 8014e60:	f73f aed7 	bgt.w	8014c12 <_dtoa_r+0x812>
 8014e64:	9e04      	ldr	r6, [sp, #16]
 8014e66:	9801      	ldr	r0, [sp, #4]
 8014e68:	4629      	mov	r1, r5
 8014e6a:	f7ff fa3b 	bl	80142e4 <quorem>
 8014e6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014e72:	f806 8b01 	strb.w	r8, [r6], #1
 8014e76:	9b04      	ldr	r3, [sp, #16]
 8014e78:	9a06      	ldr	r2, [sp, #24]
 8014e7a:	1af3      	subs	r3, r6, r3
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	ddb4      	ble.n	8014dea <_dtoa_r+0x9ea>
 8014e80:	2300      	movs	r3, #0
 8014e82:	220a      	movs	r2, #10
 8014e84:	9901      	ldr	r1, [sp, #4]
 8014e86:	4620      	mov	r0, r4
 8014e88:	f000 fd83 	bl	8015992 <__multadd>
 8014e8c:	9001      	str	r0, [sp, #4]
 8014e8e:	e7ea      	b.n	8014e66 <_dtoa_r+0xa66>
 8014e90:	080176cc 	.word	0x080176cc
 8014e94:	08017748 	.word	0x08017748

08014e98 <__sflush_r>:
 8014e98:	898a      	ldrh	r2, [r1, #12]
 8014e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e9e:	4605      	mov	r5, r0
 8014ea0:	0710      	lsls	r0, r2, #28
 8014ea2:	460c      	mov	r4, r1
 8014ea4:	d458      	bmi.n	8014f58 <__sflush_r+0xc0>
 8014ea6:	684b      	ldr	r3, [r1, #4]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	dc05      	bgt.n	8014eb8 <__sflush_r+0x20>
 8014eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	dc02      	bgt.n	8014eb8 <__sflush_r+0x20>
 8014eb2:	2000      	movs	r0, #0
 8014eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014eba:	2e00      	cmp	r6, #0
 8014ebc:	d0f9      	beq.n	8014eb2 <__sflush_r+0x1a>
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014ec4:	682f      	ldr	r7, [r5, #0]
 8014ec6:	6a21      	ldr	r1, [r4, #32]
 8014ec8:	602b      	str	r3, [r5, #0]
 8014eca:	d032      	beq.n	8014f32 <__sflush_r+0x9a>
 8014ecc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ece:	89a3      	ldrh	r3, [r4, #12]
 8014ed0:	075a      	lsls	r2, r3, #29
 8014ed2:	d505      	bpl.n	8014ee0 <__sflush_r+0x48>
 8014ed4:	6863      	ldr	r3, [r4, #4]
 8014ed6:	1ac0      	subs	r0, r0, r3
 8014ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014eda:	b10b      	cbz	r3, 8014ee0 <__sflush_r+0x48>
 8014edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ede:	1ac0      	subs	r0, r0, r3
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	4602      	mov	r2, r0
 8014ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ee6:	6a21      	ldr	r1, [r4, #32]
 8014ee8:	4628      	mov	r0, r5
 8014eea:	47b0      	blx	r6
 8014eec:	1c43      	adds	r3, r0, #1
 8014eee:	89a3      	ldrh	r3, [r4, #12]
 8014ef0:	d106      	bne.n	8014f00 <__sflush_r+0x68>
 8014ef2:	6829      	ldr	r1, [r5, #0]
 8014ef4:	291d      	cmp	r1, #29
 8014ef6:	d848      	bhi.n	8014f8a <__sflush_r+0xf2>
 8014ef8:	4a29      	ldr	r2, [pc, #164]	; (8014fa0 <__sflush_r+0x108>)
 8014efa:	40ca      	lsrs	r2, r1
 8014efc:	07d6      	lsls	r6, r2, #31
 8014efe:	d544      	bpl.n	8014f8a <__sflush_r+0xf2>
 8014f00:	2200      	movs	r2, #0
 8014f02:	6062      	str	r2, [r4, #4]
 8014f04:	04d9      	lsls	r1, r3, #19
 8014f06:	6922      	ldr	r2, [r4, #16]
 8014f08:	6022      	str	r2, [r4, #0]
 8014f0a:	d504      	bpl.n	8014f16 <__sflush_r+0x7e>
 8014f0c:	1c42      	adds	r2, r0, #1
 8014f0e:	d101      	bne.n	8014f14 <__sflush_r+0x7c>
 8014f10:	682b      	ldr	r3, [r5, #0]
 8014f12:	b903      	cbnz	r3, 8014f16 <__sflush_r+0x7e>
 8014f14:	6560      	str	r0, [r4, #84]	; 0x54
 8014f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f18:	602f      	str	r7, [r5, #0]
 8014f1a:	2900      	cmp	r1, #0
 8014f1c:	d0c9      	beq.n	8014eb2 <__sflush_r+0x1a>
 8014f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f22:	4299      	cmp	r1, r3
 8014f24:	d002      	beq.n	8014f2c <__sflush_r+0x94>
 8014f26:	4628      	mov	r0, r5
 8014f28:	f001 f8f6 	bl	8016118 <_free_r>
 8014f2c:	2000      	movs	r0, #0
 8014f2e:	6360      	str	r0, [r4, #52]	; 0x34
 8014f30:	e7c0      	b.n	8014eb4 <__sflush_r+0x1c>
 8014f32:	2301      	movs	r3, #1
 8014f34:	4628      	mov	r0, r5
 8014f36:	47b0      	blx	r6
 8014f38:	1c41      	adds	r1, r0, #1
 8014f3a:	d1c8      	bne.n	8014ece <__sflush_r+0x36>
 8014f3c:	682b      	ldr	r3, [r5, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d0c5      	beq.n	8014ece <__sflush_r+0x36>
 8014f42:	2b1d      	cmp	r3, #29
 8014f44:	d001      	beq.n	8014f4a <__sflush_r+0xb2>
 8014f46:	2b16      	cmp	r3, #22
 8014f48:	d101      	bne.n	8014f4e <__sflush_r+0xb6>
 8014f4a:	602f      	str	r7, [r5, #0]
 8014f4c:	e7b1      	b.n	8014eb2 <__sflush_r+0x1a>
 8014f4e:	89a3      	ldrh	r3, [r4, #12]
 8014f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f54:	81a3      	strh	r3, [r4, #12]
 8014f56:	e7ad      	b.n	8014eb4 <__sflush_r+0x1c>
 8014f58:	690f      	ldr	r7, [r1, #16]
 8014f5a:	2f00      	cmp	r7, #0
 8014f5c:	d0a9      	beq.n	8014eb2 <__sflush_r+0x1a>
 8014f5e:	0793      	lsls	r3, r2, #30
 8014f60:	680e      	ldr	r6, [r1, #0]
 8014f62:	bf08      	it	eq
 8014f64:	694b      	ldreq	r3, [r1, #20]
 8014f66:	600f      	str	r7, [r1, #0]
 8014f68:	bf18      	it	ne
 8014f6a:	2300      	movne	r3, #0
 8014f6c:	eba6 0807 	sub.w	r8, r6, r7
 8014f70:	608b      	str	r3, [r1, #8]
 8014f72:	f1b8 0f00 	cmp.w	r8, #0
 8014f76:	dd9c      	ble.n	8014eb2 <__sflush_r+0x1a>
 8014f78:	4643      	mov	r3, r8
 8014f7a:	463a      	mov	r2, r7
 8014f7c:	6a21      	ldr	r1, [r4, #32]
 8014f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f80:	4628      	mov	r0, r5
 8014f82:	47b0      	blx	r6
 8014f84:	2800      	cmp	r0, #0
 8014f86:	dc06      	bgt.n	8014f96 <__sflush_r+0xfe>
 8014f88:	89a3      	ldrh	r3, [r4, #12]
 8014f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f8e:	81a3      	strh	r3, [r4, #12]
 8014f90:	f04f 30ff 	mov.w	r0, #4294967295
 8014f94:	e78e      	b.n	8014eb4 <__sflush_r+0x1c>
 8014f96:	4407      	add	r7, r0
 8014f98:	eba8 0800 	sub.w	r8, r8, r0
 8014f9c:	e7e9      	b.n	8014f72 <__sflush_r+0xda>
 8014f9e:	bf00      	nop
 8014fa0:	20400001 	.word	0x20400001

08014fa4 <_fflush_r>:
 8014fa4:	b538      	push	{r3, r4, r5, lr}
 8014fa6:	690b      	ldr	r3, [r1, #16]
 8014fa8:	4605      	mov	r5, r0
 8014faa:	460c      	mov	r4, r1
 8014fac:	b1db      	cbz	r3, 8014fe6 <_fflush_r+0x42>
 8014fae:	b118      	cbz	r0, 8014fb8 <_fflush_r+0x14>
 8014fb0:	6983      	ldr	r3, [r0, #24]
 8014fb2:	b90b      	cbnz	r3, 8014fb8 <_fflush_r+0x14>
 8014fb4:	f000 f860 	bl	8015078 <__sinit>
 8014fb8:	4b0c      	ldr	r3, [pc, #48]	; (8014fec <_fflush_r+0x48>)
 8014fba:	429c      	cmp	r4, r3
 8014fbc:	d109      	bne.n	8014fd2 <_fflush_r+0x2e>
 8014fbe:	686c      	ldr	r4, [r5, #4]
 8014fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fc4:	b17b      	cbz	r3, 8014fe6 <_fflush_r+0x42>
 8014fc6:	4621      	mov	r1, r4
 8014fc8:	4628      	mov	r0, r5
 8014fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fce:	f7ff bf63 	b.w	8014e98 <__sflush_r>
 8014fd2:	4b07      	ldr	r3, [pc, #28]	; (8014ff0 <_fflush_r+0x4c>)
 8014fd4:	429c      	cmp	r4, r3
 8014fd6:	d101      	bne.n	8014fdc <_fflush_r+0x38>
 8014fd8:	68ac      	ldr	r4, [r5, #8]
 8014fda:	e7f1      	b.n	8014fc0 <_fflush_r+0x1c>
 8014fdc:	4b05      	ldr	r3, [pc, #20]	; (8014ff4 <_fflush_r+0x50>)
 8014fde:	429c      	cmp	r4, r3
 8014fe0:	bf08      	it	eq
 8014fe2:	68ec      	ldreq	r4, [r5, #12]
 8014fe4:	e7ec      	b.n	8014fc0 <_fflush_r+0x1c>
 8014fe6:	2000      	movs	r0, #0
 8014fe8:	bd38      	pop	{r3, r4, r5, pc}
 8014fea:	bf00      	nop
 8014fec:	08017778 	.word	0x08017778
 8014ff0:	08017798 	.word	0x08017798
 8014ff4:	08017758 	.word	0x08017758

08014ff8 <std>:
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	4604      	mov	r4, r0
 8014ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8015002:	6083      	str	r3, [r0, #8]
 8015004:	8181      	strh	r1, [r0, #12]
 8015006:	6643      	str	r3, [r0, #100]	; 0x64
 8015008:	81c2      	strh	r2, [r0, #14]
 801500a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801500e:	6183      	str	r3, [r0, #24]
 8015010:	4619      	mov	r1, r3
 8015012:	2208      	movs	r2, #8
 8015014:	305c      	adds	r0, #92	; 0x5c
 8015016:	f7fd fb80 	bl	801271a <memset>
 801501a:	4b05      	ldr	r3, [pc, #20]	; (8015030 <std+0x38>)
 801501c:	6263      	str	r3, [r4, #36]	; 0x24
 801501e:	4b05      	ldr	r3, [pc, #20]	; (8015034 <std+0x3c>)
 8015020:	62a3      	str	r3, [r4, #40]	; 0x28
 8015022:	4b05      	ldr	r3, [pc, #20]	; (8015038 <std+0x40>)
 8015024:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015026:	4b05      	ldr	r3, [pc, #20]	; (801503c <std+0x44>)
 8015028:	6224      	str	r4, [r4, #32]
 801502a:	6323      	str	r3, [r4, #48]	; 0x30
 801502c:	bd10      	pop	{r4, pc}
 801502e:	bf00      	nop
 8015030:	0801652d 	.word	0x0801652d
 8015034:	0801654f 	.word	0x0801654f
 8015038:	08016587 	.word	0x08016587
 801503c:	080165ab 	.word	0x080165ab

08015040 <_cleanup_r>:
 8015040:	4901      	ldr	r1, [pc, #4]	; (8015048 <_cleanup_r+0x8>)
 8015042:	f000 b885 	b.w	8015150 <_fwalk_reent>
 8015046:	bf00      	nop
 8015048:	08014fa5 	.word	0x08014fa5

0801504c <__sfmoreglue>:
 801504c:	b570      	push	{r4, r5, r6, lr}
 801504e:	1e4a      	subs	r2, r1, #1
 8015050:	2568      	movs	r5, #104	; 0x68
 8015052:	4355      	muls	r5, r2
 8015054:	460e      	mov	r6, r1
 8015056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801505a:	f001 f8ab 	bl	80161b4 <_malloc_r>
 801505e:	4604      	mov	r4, r0
 8015060:	b140      	cbz	r0, 8015074 <__sfmoreglue+0x28>
 8015062:	2100      	movs	r1, #0
 8015064:	e9c0 1600 	strd	r1, r6, [r0]
 8015068:	300c      	adds	r0, #12
 801506a:	60a0      	str	r0, [r4, #8]
 801506c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015070:	f7fd fb53 	bl	801271a <memset>
 8015074:	4620      	mov	r0, r4
 8015076:	bd70      	pop	{r4, r5, r6, pc}

08015078 <__sinit>:
 8015078:	6983      	ldr	r3, [r0, #24]
 801507a:	b510      	push	{r4, lr}
 801507c:	4604      	mov	r4, r0
 801507e:	bb33      	cbnz	r3, 80150ce <__sinit+0x56>
 8015080:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015084:	6503      	str	r3, [r0, #80]	; 0x50
 8015086:	4b12      	ldr	r3, [pc, #72]	; (80150d0 <__sinit+0x58>)
 8015088:	4a12      	ldr	r2, [pc, #72]	; (80150d4 <__sinit+0x5c>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	6282      	str	r2, [r0, #40]	; 0x28
 801508e:	4298      	cmp	r0, r3
 8015090:	bf04      	itt	eq
 8015092:	2301      	moveq	r3, #1
 8015094:	6183      	streq	r3, [r0, #24]
 8015096:	f000 f81f 	bl	80150d8 <__sfp>
 801509a:	6060      	str	r0, [r4, #4]
 801509c:	4620      	mov	r0, r4
 801509e:	f000 f81b 	bl	80150d8 <__sfp>
 80150a2:	60a0      	str	r0, [r4, #8]
 80150a4:	4620      	mov	r0, r4
 80150a6:	f000 f817 	bl	80150d8 <__sfp>
 80150aa:	2200      	movs	r2, #0
 80150ac:	60e0      	str	r0, [r4, #12]
 80150ae:	2104      	movs	r1, #4
 80150b0:	6860      	ldr	r0, [r4, #4]
 80150b2:	f7ff ffa1 	bl	8014ff8 <std>
 80150b6:	2201      	movs	r2, #1
 80150b8:	2109      	movs	r1, #9
 80150ba:	68a0      	ldr	r0, [r4, #8]
 80150bc:	f7ff ff9c 	bl	8014ff8 <std>
 80150c0:	2202      	movs	r2, #2
 80150c2:	2112      	movs	r1, #18
 80150c4:	68e0      	ldr	r0, [r4, #12]
 80150c6:	f7ff ff97 	bl	8014ff8 <std>
 80150ca:	2301      	movs	r3, #1
 80150cc:	61a3      	str	r3, [r4, #24]
 80150ce:	bd10      	pop	{r4, pc}
 80150d0:	080176b8 	.word	0x080176b8
 80150d4:	08015041 	.word	0x08015041

080150d8 <__sfp>:
 80150d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150da:	4b1b      	ldr	r3, [pc, #108]	; (8015148 <__sfp+0x70>)
 80150dc:	681e      	ldr	r6, [r3, #0]
 80150de:	69b3      	ldr	r3, [r6, #24]
 80150e0:	4607      	mov	r7, r0
 80150e2:	b913      	cbnz	r3, 80150ea <__sfp+0x12>
 80150e4:	4630      	mov	r0, r6
 80150e6:	f7ff ffc7 	bl	8015078 <__sinit>
 80150ea:	3648      	adds	r6, #72	; 0x48
 80150ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80150f0:	3b01      	subs	r3, #1
 80150f2:	d503      	bpl.n	80150fc <__sfp+0x24>
 80150f4:	6833      	ldr	r3, [r6, #0]
 80150f6:	b133      	cbz	r3, 8015106 <__sfp+0x2e>
 80150f8:	6836      	ldr	r6, [r6, #0]
 80150fa:	e7f7      	b.n	80150ec <__sfp+0x14>
 80150fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015100:	b16d      	cbz	r5, 801511e <__sfp+0x46>
 8015102:	3468      	adds	r4, #104	; 0x68
 8015104:	e7f4      	b.n	80150f0 <__sfp+0x18>
 8015106:	2104      	movs	r1, #4
 8015108:	4638      	mov	r0, r7
 801510a:	f7ff ff9f 	bl	801504c <__sfmoreglue>
 801510e:	6030      	str	r0, [r6, #0]
 8015110:	2800      	cmp	r0, #0
 8015112:	d1f1      	bne.n	80150f8 <__sfp+0x20>
 8015114:	230c      	movs	r3, #12
 8015116:	603b      	str	r3, [r7, #0]
 8015118:	4604      	mov	r4, r0
 801511a:	4620      	mov	r0, r4
 801511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801511e:	4b0b      	ldr	r3, [pc, #44]	; (801514c <__sfp+0x74>)
 8015120:	6665      	str	r5, [r4, #100]	; 0x64
 8015122:	e9c4 5500 	strd	r5, r5, [r4]
 8015126:	60a5      	str	r5, [r4, #8]
 8015128:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801512c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015130:	2208      	movs	r2, #8
 8015132:	4629      	mov	r1, r5
 8015134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015138:	f7fd faef 	bl	801271a <memset>
 801513c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015144:	e7e9      	b.n	801511a <__sfp+0x42>
 8015146:	bf00      	nop
 8015148:	080176b8 	.word	0x080176b8
 801514c:	ffff0001 	.word	0xffff0001

08015150 <_fwalk_reent>:
 8015150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015154:	4680      	mov	r8, r0
 8015156:	4689      	mov	r9, r1
 8015158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801515c:	2600      	movs	r6, #0
 801515e:	b914      	cbnz	r4, 8015166 <_fwalk_reent+0x16>
 8015160:	4630      	mov	r0, r6
 8015162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015166:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801516a:	3f01      	subs	r7, #1
 801516c:	d501      	bpl.n	8015172 <_fwalk_reent+0x22>
 801516e:	6824      	ldr	r4, [r4, #0]
 8015170:	e7f5      	b.n	801515e <_fwalk_reent+0xe>
 8015172:	89ab      	ldrh	r3, [r5, #12]
 8015174:	2b01      	cmp	r3, #1
 8015176:	d907      	bls.n	8015188 <_fwalk_reent+0x38>
 8015178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801517c:	3301      	adds	r3, #1
 801517e:	d003      	beq.n	8015188 <_fwalk_reent+0x38>
 8015180:	4629      	mov	r1, r5
 8015182:	4640      	mov	r0, r8
 8015184:	47c8      	blx	r9
 8015186:	4306      	orrs	r6, r0
 8015188:	3568      	adds	r5, #104	; 0x68
 801518a:	e7ee      	b.n	801516a <_fwalk_reent+0x1a>

0801518c <rshift>:
 801518c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801518e:	6906      	ldr	r6, [r0, #16]
 8015190:	114b      	asrs	r3, r1, #5
 8015192:	429e      	cmp	r6, r3
 8015194:	f100 0414 	add.w	r4, r0, #20
 8015198:	dd30      	ble.n	80151fc <rshift+0x70>
 801519a:	f011 011f 	ands.w	r1, r1, #31
 801519e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80151a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80151a6:	d108      	bne.n	80151ba <rshift+0x2e>
 80151a8:	4621      	mov	r1, r4
 80151aa:	42b2      	cmp	r2, r6
 80151ac:	460b      	mov	r3, r1
 80151ae:	d211      	bcs.n	80151d4 <rshift+0x48>
 80151b0:	f852 3b04 	ldr.w	r3, [r2], #4
 80151b4:	f841 3b04 	str.w	r3, [r1], #4
 80151b8:	e7f7      	b.n	80151aa <rshift+0x1e>
 80151ba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80151be:	f1c1 0c20 	rsb	ip, r1, #32
 80151c2:	40cd      	lsrs	r5, r1
 80151c4:	3204      	adds	r2, #4
 80151c6:	4623      	mov	r3, r4
 80151c8:	42b2      	cmp	r2, r6
 80151ca:	4617      	mov	r7, r2
 80151cc:	d30c      	bcc.n	80151e8 <rshift+0x5c>
 80151ce:	601d      	str	r5, [r3, #0]
 80151d0:	b105      	cbz	r5, 80151d4 <rshift+0x48>
 80151d2:	3304      	adds	r3, #4
 80151d4:	1b1a      	subs	r2, r3, r4
 80151d6:	42a3      	cmp	r3, r4
 80151d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80151dc:	bf08      	it	eq
 80151de:	2300      	moveq	r3, #0
 80151e0:	6102      	str	r2, [r0, #16]
 80151e2:	bf08      	it	eq
 80151e4:	6143      	streq	r3, [r0, #20]
 80151e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151e8:	683f      	ldr	r7, [r7, #0]
 80151ea:	fa07 f70c 	lsl.w	r7, r7, ip
 80151ee:	433d      	orrs	r5, r7
 80151f0:	f843 5b04 	str.w	r5, [r3], #4
 80151f4:	f852 5b04 	ldr.w	r5, [r2], #4
 80151f8:	40cd      	lsrs	r5, r1
 80151fa:	e7e5      	b.n	80151c8 <rshift+0x3c>
 80151fc:	4623      	mov	r3, r4
 80151fe:	e7e9      	b.n	80151d4 <rshift+0x48>

08015200 <__hexdig_fun>:
 8015200:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015204:	2b09      	cmp	r3, #9
 8015206:	d802      	bhi.n	801520e <__hexdig_fun+0xe>
 8015208:	3820      	subs	r0, #32
 801520a:	b2c0      	uxtb	r0, r0
 801520c:	4770      	bx	lr
 801520e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015212:	2b05      	cmp	r3, #5
 8015214:	d801      	bhi.n	801521a <__hexdig_fun+0x1a>
 8015216:	3847      	subs	r0, #71	; 0x47
 8015218:	e7f7      	b.n	801520a <__hexdig_fun+0xa>
 801521a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801521e:	2b05      	cmp	r3, #5
 8015220:	d801      	bhi.n	8015226 <__hexdig_fun+0x26>
 8015222:	3827      	subs	r0, #39	; 0x27
 8015224:	e7f1      	b.n	801520a <__hexdig_fun+0xa>
 8015226:	2000      	movs	r0, #0
 8015228:	4770      	bx	lr

0801522a <__gethex>:
 801522a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522e:	b08b      	sub	sp, #44	; 0x2c
 8015230:	468a      	mov	sl, r1
 8015232:	9002      	str	r0, [sp, #8]
 8015234:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015236:	9306      	str	r3, [sp, #24]
 8015238:	4690      	mov	r8, r2
 801523a:	f000 fad0 	bl	80157de <__localeconv_l>
 801523e:	6803      	ldr	r3, [r0, #0]
 8015240:	9303      	str	r3, [sp, #12]
 8015242:	4618      	mov	r0, r3
 8015244:	f7ea fffc 	bl	8000240 <strlen>
 8015248:	9b03      	ldr	r3, [sp, #12]
 801524a:	9001      	str	r0, [sp, #4]
 801524c:	4403      	add	r3, r0
 801524e:	f04f 0b00 	mov.w	fp, #0
 8015252:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015256:	9307      	str	r3, [sp, #28]
 8015258:	f8da 3000 	ldr.w	r3, [sl]
 801525c:	3302      	adds	r3, #2
 801525e:	461f      	mov	r7, r3
 8015260:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015264:	2830      	cmp	r0, #48	; 0x30
 8015266:	d06c      	beq.n	8015342 <__gethex+0x118>
 8015268:	f7ff ffca 	bl	8015200 <__hexdig_fun>
 801526c:	4604      	mov	r4, r0
 801526e:	2800      	cmp	r0, #0
 8015270:	d16a      	bne.n	8015348 <__gethex+0x11e>
 8015272:	9a01      	ldr	r2, [sp, #4]
 8015274:	9903      	ldr	r1, [sp, #12]
 8015276:	4638      	mov	r0, r7
 8015278:	f001 f99b 	bl	80165b2 <strncmp>
 801527c:	2800      	cmp	r0, #0
 801527e:	d166      	bne.n	801534e <__gethex+0x124>
 8015280:	9b01      	ldr	r3, [sp, #4]
 8015282:	5cf8      	ldrb	r0, [r7, r3]
 8015284:	18fe      	adds	r6, r7, r3
 8015286:	f7ff ffbb 	bl	8015200 <__hexdig_fun>
 801528a:	2800      	cmp	r0, #0
 801528c:	d062      	beq.n	8015354 <__gethex+0x12a>
 801528e:	4633      	mov	r3, r6
 8015290:	7818      	ldrb	r0, [r3, #0]
 8015292:	2830      	cmp	r0, #48	; 0x30
 8015294:	461f      	mov	r7, r3
 8015296:	f103 0301 	add.w	r3, r3, #1
 801529a:	d0f9      	beq.n	8015290 <__gethex+0x66>
 801529c:	f7ff ffb0 	bl	8015200 <__hexdig_fun>
 80152a0:	fab0 f580 	clz	r5, r0
 80152a4:	096d      	lsrs	r5, r5, #5
 80152a6:	4634      	mov	r4, r6
 80152a8:	f04f 0b01 	mov.w	fp, #1
 80152ac:	463a      	mov	r2, r7
 80152ae:	4616      	mov	r6, r2
 80152b0:	3201      	adds	r2, #1
 80152b2:	7830      	ldrb	r0, [r6, #0]
 80152b4:	f7ff ffa4 	bl	8015200 <__hexdig_fun>
 80152b8:	2800      	cmp	r0, #0
 80152ba:	d1f8      	bne.n	80152ae <__gethex+0x84>
 80152bc:	9a01      	ldr	r2, [sp, #4]
 80152be:	9903      	ldr	r1, [sp, #12]
 80152c0:	4630      	mov	r0, r6
 80152c2:	f001 f976 	bl	80165b2 <strncmp>
 80152c6:	b950      	cbnz	r0, 80152de <__gethex+0xb4>
 80152c8:	b954      	cbnz	r4, 80152e0 <__gethex+0xb6>
 80152ca:	9b01      	ldr	r3, [sp, #4]
 80152cc:	18f4      	adds	r4, r6, r3
 80152ce:	4622      	mov	r2, r4
 80152d0:	4616      	mov	r6, r2
 80152d2:	3201      	adds	r2, #1
 80152d4:	7830      	ldrb	r0, [r6, #0]
 80152d6:	f7ff ff93 	bl	8015200 <__hexdig_fun>
 80152da:	2800      	cmp	r0, #0
 80152dc:	d1f8      	bne.n	80152d0 <__gethex+0xa6>
 80152de:	b10c      	cbz	r4, 80152e4 <__gethex+0xba>
 80152e0:	1ba4      	subs	r4, r4, r6
 80152e2:	00a4      	lsls	r4, r4, #2
 80152e4:	7833      	ldrb	r3, [r6, #0]
 80152e6:	2b50      	cmp	r3, #80	; 0x50
 80152e8:	d001      	beq.n	80152ee <__gethex+0xc4>
 80152ea:	2b70      	cmp	r3, #112	; 0x70
 80152ec:	d140      	bne.n	8015370 <__gethex+0x146>
 80152ee:	7873      	ldrb	r3, [r6, #1]
 80152f0:	2b2b      	cmp	r3, #43	; 0x2b
 80152f2:	d031      	beq.n	8015358 <__gethex+0x12e>
 80152f4:	2b2d      	cmp	r3, #45	; 0x2d
 80152f6:	d033      	beq.n	8015360 <__gethex+0x136>
 80152f8:	1c71      	adds	r1, r6, #1
 80152fa:	f04f 0900 	mov.w	r9, #0
 80152fe:	7808      	ldrb	r0, [r1, #0]
 8015300:	f7ff ff7e 	bl	8015200 <__hexdig_fun>
 8015304:	1e43      	subs	r3, r0, #1
 8015306:	b2db      	uxtb	r3, r3
 8015308:	2b18      	cmp	r3, #24
 801530a:	d831      	bhi.n	8015370 <__gethex+0x146>
 801530c:	f1a0 0210 	sub.w	r2, r0, #16
 8015310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015314:	f7ff ff74 	bl	8015200 <__hexdig_fun>
 8015318:	1e43      	subs	r3, r0, #1
 801531a:	b2db      	uxtb	r3, r3
 801531c:	2b18      	cmp	r3, #24
 801531e:	d922      	bls.n	8015366 <__gethex+0x13c>
 8015320:	f1b9 0f00 	cmp.w	r9, #0
 8015324:	d000      	beq.n	8015328 <__gethex+0xfe>
 8015326:	4252      	negs	r2, r2
 8015328:	4414      	add	r4, r2
 801532a:	f8ca 1000 	str.w	r1, [sl]
 801532e:	b30d      	cbz	r5, 8015374 <__gethex+0x14a>
 8015330:	f1bb 0f00 	cmp.w	fp, #0
 8015334:	bf0c      	ite	eq
 8015336:	2706      	moveq	r7, #6
 8015338:	2700      	movne	r7, #0
 801533a:	4638      	mov	r0, r7
 801533c:	b00b      	add	sp, #44	; 0x2c
 801533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015342:	f10b 0b01 	add.w	fp, fp, #1
 8015346:	e78a      	b.n	801525e <__gethex+0x34>
 8015348:	2500      	movs	r5, #0
 801534a:	462c      	mov	r4, r5
 801534c:	e7ae      	b.n	80152ac <__gethex+0x82>
 801534e:	463e      	mov	r6, r7
 8015350:	2501      	movs	r5, #1
 8015352:	e7c7      	b.n	80152e4 <__gethex+0xba>
 8015354:	4604      	mov	r4, r0
 8015356:	e7fb      	b.n	8015350 <__gethex+0x126>
 8015358:	f04f 0900 	mov.w	r9, #0
 801535c:	1cb1      	adds	r1, r6, #2
 801535e:	e7ce      	b.n	80152fe <__gethex+0xd4>
 8015360:	f04f 0901 	mov.w	r9, #1
 8015364:	e7fa      	b.n	801535c <__gethex+0x132>
 8015366:	230a      	movs	r3, #10
 8015368:	fb03 0202 	mla	r2, r3, r2, r0
 801536c:	3a10      	subs	r2, #16
 801536e:	e7cf      	b.n	8015310 <__gethex+0xe6>
 8015370:	4631      	mov	r1, r6
 8015372:	e7da      	b.n	801532a <__gethex+0x100>
 8015374:	1bf3      	subs	r3, r6, r7
 8015376:	3b01      	subs	r3, #1
 8015378:	4629      	mov	r1, r5
 801537a:	2b07      	cmp	r3, #7
 801537c:	dc49      	bgt.n	8015412 <__gethex+0x1e8>
 801537e:	9802      	ldr	r0, [sp, #8]
 8015380:	f000 fabc 	bl	80158fc <_Balloc>
 8015384:	9b01      	ldr	r3, [sp, #4]
 8015386:	f100 0914 	add.w	r9, r0, #20
 801538a:	f04f 0b00 	mov.w	fp, #0
 801538e:	f1c3 0301 	rsb	r3, r3, #1
 8015392:	4605      	mov	r5, r0
 8015394:	f8cd 9010 	str.w	r9, [sp, #16]
 8015398:	46da      	mov	sl, fp
 801539a:	9308      	str	r3, [sp, #32]
 801539c:	42b7      	cmp	r7, r6
 801539e:	d33b      	bcc.n	8015418 <__gethex+0x1ee>
 80153a0:	9804      	ldr	r0, [sp, #16]
 80153a2:	f840 ab04 	str.w	sl, [r0], #4
 80153a6:	eba0 0009 	sub.w	r0, r0, r9
 80153aa:	1080      	asrs	r0, r0, #2
 80153ac:	6128      	str	r0, [r5, #16]
 80153ae:	0147      	lsls	r7, r0, #5
 80153b0:	4650      	mov	r0, sl
 80153b2:	f000 fb67 	bl	8015a84 <__hi0bits>
 80153b6:	f8d8 6000 	ldr.w	r6, [r8]
 80153ba:	1a3f      	subs	r7, r7, r0
 80153bc:	42b7      	cmp	r7, r6
 80153be:	dd64      	ble.n	801548a <__gethex+0x260>
 80153c0:	1bbf      	subs	r7, r7, r6
 80153c2:	4639      	mov	r1, r7
 80153c4:	4628      	mov	r0, r5
 80153c6:	f000 fe78 	bl	80160ba <__any_on>
 80153ca:	4682      	mov	sl, r0
 80153cc:	b178      	cbz	r0, 80153ee <__gethex+0x1c4>
 80153ce:	1e7b      	subs	r3, r7, #1
 80153d0:	1159      	asrs	r1, r3, #5
 80153d2:	f003 021f 	and.w	r2, r3, #31
 80153d6:	f04f 0a01 	mov.w	sl, #1
 80153da:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80153de:	fa0a f202 	lsl.w	r2, sl, r2
 80153e2:	420a      	tst	r2, r1
 80153e4:	d003      	beq.n	80153ee <__gethex+0x1c4>
 80153e6:	4553      	cmp	r3, sl
 80153e8:	dc46      	bgt.n	8015478 <__gethex+0x24e>
 80153ea:	f04f 0a02 	mov.w	sl, #2
 80153ee:	4639      	mov	r1, r7
 80153f0:	4628      	mov	r0, r5
 80153f2:	f7ff fecb 	bl	801518c <rshift>
 80153f6:	443c      	add	r4, r7
 80153f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153fc:	42a3      	cmp	r3, r4
 80153fe:	da52      	bge.n	80154a6 <__gethex+0x27c>
 8015400:	4629      	mov	r1, r5
 8015402:	9802      	ldr	r0, [sp, #8]
 8015404:	f000 faae 	bl	8015964 <_Bfree>
 8015408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801540a:	2300      	movs	r3, #0
 801540c:	6013      	str	r3, [r2, #0]
 801540e:	27a3      	movs	r7, #163	; 0xa3
 8015410:	e793      	b.n	801533a <__gethex+0x110>
 8015412:	3101      	adds	r1, #1
 8015414:	105b      	asrs	r3, r3, #1
 8015416:	e7b0      	b.n	801537a <__gethex+0x150>
 8015418:	1e73      	subs	r3, r6, #1
 801541a:	9305      	str	r3, [sp, #20]
 801541c:	9a07      	ldr	r2, [sp, #28]
 801541e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015422:	4293      	cmp	r3, r2
 8015424:	d018      	beq.n	8015458 <__gethex+0x22e>
 8015426:	f1bb 0f20 	cmp.w	fp, #32
 801542a:	d107      	bne.n	801543c <__gethex+0x212>
 801542c:	9b04      	ldr	r3, [sp, #16]
 801542e:	f8c3 a000 	str.w	sl, [r3]
 8015432:	3304      	adds	r3, #4
 8015434:	f04f 0a00 	mov.w	sl, #0
 8015438:	9304      	str	r3, [sp, #16]
 801543a:	46d3      	mov	fp, sl
 801543c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015440:	f7ff fede 	bl	8015200 <__hexdig_fun>
 8015444:	f000 000f 	and.w	r0, r0, #15
 8015448:	fa00 f00b 	lsl.w	r0, r0, fp
 801544c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015450:	f10b 0b04 	add.w	fp, fp, #4
 8015454:	9b05      	ldr	r3, [sp, #20]
 8015456:	e00d      	b.n	8015474 <__gethex+0x24a>
 8015458:	9b05      	ldr	r3, [sp, #20]
 801545a:	9a08      	ldr	r2, [sp, #32]
 801545c:	4413      	add	r3, r2
 801545e:	42bb      	cmp	r3, r7
 8015460:	d3e1      	bcc.n	8015426 <__gethex+0x1fc>
 8015462:	4618      	mov	r0, r3
 8015464:	9a01      	ldr	r2, [sp, #4]
 8015466:	9903      	ldr	r1, [sp, #12]
 8015468:	9309      	str	r3, [sp, #36]	; 0x24
 801546a:	f001 f8a2 	bl	80165b2 <strncmp>
 801546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015470:	2800      	cmp	r0, #0
 8015472:	d1d8      	bne.n	8015426 <__gethex+0x1fc>
 8015474:	461e      	mov	r6, r3
 8015476:	e791      	b.n	801539c <__gethex+0x172>
 8015478:	1eb9      	subs	r1, r7, #2
 801547a:	4628      	mov	r0, r5
 801547c:	f000 fe1d 	bl	80160ba <__any_on>
 8015480:	2800      	cmp	r0, #0
 8015482:	d0b2      	beq.n	80153ea <__gethex+0x1c0>
 8015484:	f04f 0a03 	mov.w	sl, #3
 8015488:	e7b1      	b.n	80153ee <__gethex+0x1c4>
 801548a:	da09      	bge.n	80154a0 <__gethex+0x276>
 801548c:	1bf7      	subs	r7, r6, r7
 801548e:	4629      	mov	r1, r5
 8015490:	463a      	mov	r2, r7
 8015492:	9802      	ldr	r0, [sp, #8]
 8015494:	f000 fc32 	bl	8015cfc <__lshift>
 8015498:	1be4      	subs	r4, r4, r7
 801549a:	4605      	mov	r5, r0
 801549c:	f100 0914 	add.w	r9, r0, #20
 80154a0:	f04f 0a00 	mov.w	sl, #0
 80154a4:	e7a8      	b.n	80153f8 <__gethex+0x1ce>
 80154a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80154aa:	42a0      	cmp	r0, r4
 80154ac:	dd6a      	ble.n	8015584 <__gethex+0x35a>
 80154ae:	1b04      	subs	r4, r0, r4
 80154b0:	42a6      	cmp	r6, r4
 80154b2:	dc2e      	bgt.n	8015512 <__gethex+0x2e8>
 80154b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154b8:	2b02      	cmp	r3, #2
 80154ba:	d022      	beq.n	8015502 <__gethex+0x2d8>
 80154bc:	2b03      	cmp	r3, #3
 80154be:	d024      	beq.n	801550a <__gethex+0x2e0>
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d115      	bne.n	80154f0 <__gethex+0x2c6>
 80154c4:	42a6      	cmp	r6, r4
 80154c6:	d113      	bne.n	80154f0 <__gethex+0x2c6>
 80154c8:	2e01      	cmp	r6, #1
 80154ca:	dc0b      	bgt.n	80154e4 <__gethex+0x2ba>
 80154cc:	9a06      	ldr	r2, [sp, #24]
 80154ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80154d2:	6013      	str	r3, [r2, #0]
 80154d4:	2301      	movs	r3, #1
 80154d6:	612b      	str	r3, [r5, #16]
 80154d8:	f8c9 3000 	str.w	r3, [r9]
 80154dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80154de:	2762      	movs	r7, #98	; 0x62
 80154e0:	601d      	str	r5, [r3, #0]
 80154e2:	e72a      	b.n	801533a <__gethex+0x110>
 80154e4:	1e71      	subs	r1, r6, #1
 80154e6:	4628      	mov	r0, r5
 80154e8:	f000 fde7 	bl	80160ba <__any_on>
 80154ec:	2800      	cmp	r0, #0
 80154ee:	d1ed      	bne.n	80154cc <__gethex+0x2a2>
 80154f0:	4629      	mov	r1, r5
 80154f2:	9802      	ldr	r0, [sp, #8]
 80154f4:	f000 fa36 	bl	8015964 <_Bfree>
 80154f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80154fa:	2300      	movs	r3, #0
 80154fc:	6013      	str	r3, [r2, #0]
 80154fe:	2750      	movs	r7, #80	; 0x50
 8015500:	e71b      	b.n	801533a <__gethex+0x110>
 8015502:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015504:	2b00      	cmp	r3, #0
 8015506:	d0e1      	beq.n	80154cc <__gethex+0x2a2>
 8015508:	e7f2      	b.n	80154f0 <__gethex+0x2c6>
 801550a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801550c:	2b00      	cmp	r3, #0
 801550e:	d1dd      	bne.n	80154cc <__gethex+0x2a2>
 8015510:	e7ee      	b.n	80154f0 <__gethex+0x2c6>
 8015512:	1e67      	subs	r7, r4, #1
 8015514:	f1ba 0f00 	cmp.w	sl, #0
 8015518:	d131      	bne.n	801557e <__gethex+0x354>
 801551a:	b127      	cbz	r7, 8015526 <__gethex+0x2fc>
 801551c:	4639      	mov	r1, r7
 801551e:	4628      	mov	r0, r5
 8015520:	f000 fdcb 	bl	80160ba <__any_on>
 8015524:	4682      	mov	sl, r0
 8015526:	117a      	asrs	r2, r7, #5
 8015528:	2301      	movs	r3, #1
 801552a:	f007 071f 	and.w	r7, r7, #31
 801552e:	fa03 f707 	lsl.w	r7, r3, r7
 8015532:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015536:	4621      	mov	r1, r4
 8015538:	421f      	tst	r7, r3
 801553a:	4628      	mov	r0, r5
 801553c:	bf18      	it	ne
 801553e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015542:	1b36      	subs	r6, r6, r4
 8015544:	f7ff fe22 	bl	801518c <rshift>
 8015548:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801554c:	2702      	movs	r7, #2
 801554e:	f1ba 0f00 	cmp.w	sl, #0
 8015552:	d048      	beq.n	80155e6 <__gethex+0x3bc>
 8015554:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015558:	2b02      	cmp	r3, #2
 801555a:	d015      	beq.n	8015588 <__gethex+0x35e>
 801555c:	2b03      	cmp	r3, #3
 801555e:	d017      	beq.n	8015590 <__gethex+0x366>
 8015560:	2b01      	cmp	r3, #1
 8015562:	d109      	bne.n	8015578 <__gethex+0x34e>
 8015564:	f01a 0f02 	tst.w	sl, #2
 8015568:	d006      	beq.n	8015578 <__gethex+0x34e>
 801556a:	f8d9 3000 	ldr.w	r3, [r9]
 801556e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015572:	f01a 0f01 	tst.w	sl, #1
 8015576:	d10e      	bne.n	8015596 <__gethex+0x36c>
 8015578:	f047 0710 	orr.w	r7, r7, #16
 801557c:	e033      	b.n	80155e6 <__gethex+0x3bc>
 801557e:	f04f 0a01 	mov.w	sl, #1
 8015582:	e7d0      	b.n	8015526 <__gethex+0x2fc>
 8015584:	2701      	movs	r7, #1
 8015586:	e7e2      	b.n	801554e <__gethex+0x324>
 8015588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801558a:	f1c3 0301 	rsb	r3, r3, #1
 801558e:	9315      	str	r3, [sp, #84]	; 0x54
 8015590:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015592:	2b00      	cmp	r3, #0
 8015594:	d0f0      	beq.n	8015578 <__gethex+0x34e>
 8015596:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801559a:	f105 0314 	add.w	r3, r5, #20
 801559e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80155a2:	eb03 010a 	add.w	r1, r3, sl
 80155a6:	f04f 0c00 	mov.w	ip, #0
 80155aa:	4618      	mov	r0, r3
 80155ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80155b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80155b4:	d01c      	beq.n	80155f0 <__gethex+0x3c6>
 80155b6:	3201      	adds	r2, #1
 80155b8:	6002      	str	r2, [r0, #0]
 80155ba:	2f02      	cmp	r7, #2
 80155bc:	f105 0314 	add.w	r3, r5, #20
 80155c0:	d138      	bne.n	8015634 <__gethex+0x40a>
 80155c2:	f8d8 2000 	ldr.w	r2, [r8]
 80155c6:	3a01      	subs	r2, #1
 80155c8:	42b2      	cmp	r2, r6
 80155ca:	d10a      	bne.n	80155e2 <__gethex+0x3b8>
 80155cc:	1171      	asrs	r1, r6, #5
 80155ce:	2201      	movs	r2, #1
 80155d0:	f006 061f 	and.w	r6, r6, #31
 80155d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80155d8:	fa02 f606 	lsl.w	r6, r2, r6
 80155dc:	421e      	tst	r6, r3
 80155de:	bf18      	it	ne
 80155e0:	4617      	movne	r7, r2
 80155e2:	f047 0720 	orr.w	r7, r7, #32
 80155e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155e8:	601d      	str	r5, [r3, #0]
 80155ea:	9b06      	ldr	r3, [sp, #24]
 80155ec:	601c      	str	r4, [r3, #0]
 80155ee:	e6a4      	b.n	801533a <__gethex+0x110>
 80155f0:	4299      	cmp	r1, r3
 80155f2:	f843 cc04 	str.w	ip, [r3, #-4]
 80155f6:	d8d8      	bhi.n	80155aa <__gethex+0x380>
 80155f8:	68ab      	ldr	r3, [r5, #8]
 80155fa:	4599      	cmp	r9, r3
 80155fc:	db12      	blt.n	8015624 <__gethex+0x3fa>
 80155fe:	6869      	ldr	r1, [r5, #4]
 8015600:	9802      	ldr	r0, [sp, #8]
 8015602:	3101      	adds	r1, #1
 8015604:	f000 f97a 	bl	80158fc <_Balloc>
 8015608:	692a      	ldr	r2, [r5, #16]
 801560a:	3202      	adds	r2, #2
 801560c:	f105 010c 	add.w	r1, r5, #12
 8015610:	4683      	mov	fp, r0
 8015612:	0092      	lsls	r2, r2, #2
 8015614:	300c      	adds	r0, #12
 8015616:	f7fd f875 	bl	8012704 <memcpy>
 801561a:	4629      	mov	r1, r5
 801561c:	9802      	ldr	r0, [sp, #8]
 801561e:	f000 f9a1 	bl	8015964 <_Bfree>
 8015622:	465d      	mov	r5, fp
 8015624:	692b      	ldr	r3, [r5, #16]
 8015626:	1c5a      	adds	r2, r3, #1
 8015628:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801562c:	612a      	str	r2, [r5, #16]
 801562e:	2201      	movs	r2, #1
 8015630:	615a      	str	r2, [r3, #20]
 8015632:	e7c2      	b.n	80155ba <__gethex+0x390>
 8015634:	692a      	ldr	r2, [r5, #16]
 8015636:	454a      	cmp	r2, r9
 8015638:	dd0b      	ble.n	8015652 <__gethex+0x428>
 801563a:	2101      	movs	r1, #1
 801563c:	4628      	mov	r0, r5
 801563e:	f7ff fda5 	bl	801518c <rshift>
 8015642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015646:	3401      	adds	r4, #1
 8015648:	42a3      	cmp	r3, r4
 801564a:	f6ff aed9 	blt.w	8015400 <__gethex+0x1d6>
 801564e:	2701      	movs	r7, #1
 8015650:	e7c7      	b.n	80155e2 <__gethex+0x3b8>
 8015652:	f016 061f 	ands.w	r6, r6, #31
 8015656:	d0fa      	beq.n	801564e <__gethex+0x424>
 8015658:	449a      	add	sl, r3
 801565a:	f1c6 0620 	rsb	r6, r6, #32
 801565e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015662:	f000 fa0f 	bl	8015a84 <__hi0bits>
 8015666:	42b0      	cmp	r0, r6
 8015668:	dbe7      	blt.n	801563a <__gethex+0x410>
 801566a:	e7f0      	b.n	801564e <__gethex+0x424>

0801566c <L_shift>:
 801566c:	f1c2 0208 	rsb	r2, r2, #8
 8015670:	0092      	lsls	r2, r2, #2
 8015672:	b570      	push	{r4, r5, r6, lr}
 8015674:	f1c2 0620 	rsb	r6, r2, #32
 8015678:	6843      	ldr	r3, [r0, #4]
 801567a:	6804      	ldr	r4, [r0, #0]
 801567c:	fa03 f506 	lsl.w	r5, r3, r6
 8015680:	432c      	orrs	r4, r5
 8015682:	40d3      	lsrs	r3, r2
 8015684:	6004      	str	r4, [r0, #0]
 8015686:	f840 3f04 	str.w	r3, [r0, #4]!
 801568a:	4288      	cmp	r0, r1
 801568c:	d3f4      	bcc.n	8015678 <L_shift+0xc>
 801568e:	bd70      	pop	{r4, r5, r6, pc}

08015690 <__match>:
 8015690:	b530      	push	{r4, r5, lr}
 8015692:	6803      	ldr	r3, [r0, #0]
 8015694:	3301      	adds	r3, #1
 8015696:	f811 4b01 	ldrb.w	r4, [r1], #1
 801569a:	b914      	cbnz	r4, 80156a2 <__match+0x12>
 801569c:	6003      	str	r3, [r0, #0]
 801569e:	2001      	movs	r0, #1
 80156a0:	bd30      	pop	{r4, r5, pc}
 80156a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80156aa:	2d19      	cmp	r5, #25
 80156ac:	bf98      	it	ls
 80156ae:	3220      	addls	r2, #32
 80156b0:	42a2      	cmp	r2, r4
 80156b2:	d0f0      	beq.n	8015696 <__match+0x6>
 80156b4:	2000      	movs	r0, #0
 80156b6:	e7f3      	b.n	80156a0 <__match+0x10>

080156b8 <__hexnan>:
 80156b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156bc:	680b      	ldr	r3, [r1, #0]
 80156be:	6801      	ldr	r1, [r0, #0]
 80156c0:	115f      	asrs	r7, r3, #5
 80156c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80156c6:	f013 031f 	ands.w	r3, r3, #31
 80156ca:	b087      	sub	sp, #28
 80156cc:	bf18      	it	ne
 80156ce:	3704      	addne	r7, #4
 80156d0:	2500      	movs	r5, #0
 80156d2:	1f3e      	subs	r6, r7, #4
 80156d4:	4682      	mov	sl, r0
 80156d6:	4690      	mov	r8, r2
 80156d8:	9301      	str	r3, [sp, #4]
 80156da:	f847 5c04 	str.w	r5, [r7, #-4]
 80156de:	46b1      	mov	r9, r6
 80156e0:	4634      	mov	r4, r6
 80156e2:	9502      	str	r5, [sp, #8]
 80156e4:	46ab      	mov	fp, r5
 80156e6:	784a      	ldrb	r2, [r1, #1]
 80156e8:	1c4b      	adds	r3, r1, #1
 80156ea:	9303      	str	r3, [sp, #12]
 80156ec:	b342      	cbz	r2, 8015740 <__hexnan+0x88>
 80156ee:	4610      	mov	r0, r2
 80156f0:	9105      	str	r1, [sp, #20]
 80156f2:	9204      	str	r2, [sp, #16]
 80156f4:	f7ff fd84 	bl	8015200 <__hexdig_fun>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	d143      	bne.n	8015784 <__hexnan+0xcc>
 80156fc:	9a04      	ldr	r2, [sp, #16]
 80156fe:	9905      	ldr	r1, [sp, #20]
 8015700:	2a20      	cmp	r2, #32
 8015702:	d818      	bhi.n	8015736 <__hexnan+0x7e>
 8015704:	9b02      	ldr	r3, [sp, #8]
 8015706:	459b      	cmp	fp, r3
 8015708:	dd13      	ble.n	8015732 <__hexnan+0x7a>
 801570a:	454c      	cmp	r4, r9
 801570c:	d206      	bcs.n	801571c <__hexnan+0x64>
 801570e:	2d07      	cmp	r5, #7
 8015710:	dc04      	bgt.n	801571c <__hexnan+0x64>
 8015712:	462a      	mov	r2, r5
 8015714:	4649      	mov	r1, r9
 8015716:	4620      	mov	r0, r4
 8015718:	f7ff ffa8 	bl	801566c <L_shift>
 801571c:	4544      	cmp	r4, r8
 801571e:	d944      	bls.n	80157aa <__hexnan+0xf2>
 8015720:	2300      	movs	r3, #0
 8015722:	f1a4 0904 	sub.w	r9, r4, #4
 8015726:	f844 3c04 	str.w	r3, [r4, #-4]
 801572a:	f8cd b008 	str.w	fp, [sp, #8]
 801572e:	464c      	mov	r4, r9
 8015730:	461d      	mov	r5, r3
 8015732:	9903      	ldr	r1, [sp, #12]
 8015734:	e7d7      	b.n	80156e6 <__hexnan+0x2e>
 8015736:	2a29      	cmp	r2, #41	; 0x29
 8015738:	d14a      	bne.n	80157d0 <__hexnan+0x118>
 801573a:	3102      	adds	r1, #2
 801573c:	f8ca 1000 	str.w	r1, [sl]
 8015740:	f1bb 0f00 	cmp.w	fp, #0
 8015744:	d044      	beq.n	80157d0 <__hexnan+0x118>
 8015746:	454c      	cmp	r4, r9
 8015748:	d206      	bcs.n	8015758 <__hexnan+0xa0>
 801574a:	2d07      	cmp	r5, #7
 801574c:	dc04      	bgt.n	8015758 <__hexnan+0xa0>
 801574e:	462a      	mov	r2, r5
 8015750:	4649      	mov	r1, r9
 8015752:	4620      	mov	r0, r4
 8015754:	f7ff ff8a 	bl	801566c <L_shift>
 8015758:	4544      	cmp	r4, r8
 801575a:	d928      	bls.n	80157ae <__hexnan+0xf6>
 801575c:	4643      	mov	r3, r8
 801575e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015762:	f843 2b04 	str.w	r2, [r3], #4
 8015766:	42a6      	cmp	r6, r4
 8015768:	d2f9      	bcs.n	801575e <__hexnan+0xa6>
 801576a:	2200      	movs	r2, #0
 801576c:	f843 2b04 	str.w	r2, [r3], #4
 8015770:	429e      	cmp	r6, r3
 8015772:	d2fb      	bcs.n	801576c <__hexnan+0xb4>
 8015774:	6833      	ldr	r3, [r6, #0]
 8015776:	b91b      	cbnz	r3, 8015780 <__hexnan+0xc8>
 8015778:	4546      	cmp	r6, r8
 801577a:	d127      	bne.n	80157cc <__hexnan+0x114>
 801577c:	2301      	movs	r3, #1
 801577e:	6033      	str	r3, [r6, #0]
 8015780:	2005      	movs	r0, #5
 8015782:	e026      	b.n	80157d2 <__hexnan+0x11a>
 8015784:	3501      	adds	r5, #1
 8015786:	2d08      	cmp	r5, #8
 8015788:	f10b 0b01 	add.w	fp, fp, #1
 801578c:	dd06      	ble.n	801579c <__hexnan+0xe4>
 801578e:	4544      	cmp	r4, r8
 8015790:	d9cf      	bls.n	8015732 <__hexnan+0x7a>
 8015792:	2300      	movs	r3, #0
 8015794:	f844 3c04 	str.w	r3, [r4, #-4]
 8015798:	2501      	movs	r5, #1
 801579a:	3c04      	subs	r4, #4
 801579c:	6822      	ldr	r2, [r4, #0]
 801579e:	f000 000f 	and.w	r0, r0, #15
 80157a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80157a6:	6020      	str	r0, [r4, #0]
 80157a8:	e7c3      	b.n	8015732 <__hexnan+0x7a>
 80157aa:	2508      	movs	r5, #8
 80157ac:	e7c1      	b.n	8015732 <__hexnan+0x7a>
 80157ae:	9b01      	ldr	r3, [sp, #4]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d0df      	beq.n	8015774 <__hexnan+0xbc>
 80157b4:	f04f 32ff 	mov.w	r2, #4294967295
 80157b8:	f1c3 0320 	rsb	r3, r3, #32
 80157bc:	fa22 f303 	lsr.w	r3, r2, r3
 80157c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80157c4:	401a      	ands	r2, r3
 80157c6:	f847 2c04 	str.w	r2, [r7, #-4]
 80157ca:	e7d3      	b.n	8015774 <__hexnan+0xbc>
 80157cc:	3e04      	subs	r6, #4
 80157ce:	e7d1      	b.n	8015774 <__hexnan+0xbc>
 80157d0:	2004      	movs	r0, #4
 80157d2:	b007      	add	sp, #28
 80157d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157d8 <__locale_ctype_ptr_l>:
 80157d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80157dc:	4770      	bx	lr

080157de <__localeconv_l>:
 80157de:	30f0      	adds	r0, #240	; 0xf0
 80157e0:	4770      	bx	lr
	...

080157e4 <_localeconv_r>:
 80157e4:	4b04      	ldr	r3, [pc, #16]	; (80157f8 <_localeconv_r+0x14>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	6a18      	ldr	r0, [r3, #32]
 80157ea:	4b04      	ldr	r3, [pc, #16]	; (80157fc <_localeconv_r+0x18>)
 80157ec:	2800      	cmp	r0, #0
 80157ee:	bf08      	it	eq
 80157f0:	4618      	moveq	r0, r3
 80157f2:	30f0      	adds	r0, #240	; 0xf0
 80157f4:	4770      	bx	lr
 80157f6:	bf00      	nop
 80157f8:	200001a8 	.word	0x200001a8
 80157fc:	2000020c 	.word	0x2000020c

08015800 <__swhatbuf_r>:
 8015800:	b570      	push	{r4, r5, r6, lr}
 8015802:	460e      	mov	r6, r1
 8015804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015808:	2900      	cmp	r1, #0
 801580a:	b096      	sub	sp, #88	; 0x58
 801580c:	4614      	mov	r4, r2
 801580e:	461d      	mov	r5, r3
 8015810:	da07      	bge.n	8015822 <__swhatbuf_r+0x22>
 8015812:	2300      	movs	r3, #0
 8015814:	602b      	str	r3, [r5, #0]
 8015816:	89b3      	ldrh	r3, [r6, #12]
 8015818:	061a      	lsls	r2, r3, #24
 801581a:	d410      	bmi.n	801583e <__swhatbuf_r+0x3e>
 801581c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015820:	e00e      	b.n	8015840 <__swhatbuf_r+0x40>
 8015822:	466a      	mov	r2, sp
 8015824:	f000 ff06 	bl	8016634 <_fstat_r>
 8015828:	2800      	cmp	r0, #0
 801582a:	dbf2      	blt.n	8015812 <__swhatbuf_r+0x12>
 801582c:	9a01      	ldr	r2, [sp, #4]
 801582e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015832:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015836:	425a      	negs	r2, r3
 8015838:	415a      	adcs	r2, r3
 801583a:	602a      	str	r2, [r5, #0]
 801583c:	e7ee      	b.n	801581c <__swhatbuf_r+0x1c>
 801583e:	2340      	movs	r3, #64	; 0x40
 8015840:	2000      	movs	r0, #0
 8015842:	6023      	str	r3, [r4, #0]
 8015844:	b016      	add	sp, #88	; 0x58
 8015846:	bd70      	pop	{r4, r5, r6, pc}

08015848 <__smakebuf_r>:
 8015848:	898b      	ldrh	r3, [r1, #12]
 801584a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801584c:	079d      	lsls	r5, r3, #30
 801584e:	4606      	mov	r6, r0
 8015850:	460c      	mov	r4, r1
 8015852:	d507      	bpl.n	8015864 <__smakebuf_r+0x1c>
 8015854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015858:	6023      	str	r3, [r4, #0]
 801585a:	6123      	str	r3, [r4, #16]
 801585c:	2301      	movs	r3, #1
 801585e:	6163      	str	r3, [r4, #20]
 8015860:	b002      	add	sp, #8
 8015862:	bd70      	pop	{r4, r5, r6, pc}
 8015864:	ab01      	add	r3, sp, #4
 8015866:	466a      	mov	r2, sp
 8015868:	f7ff ffca 	bl	8015800 <__swhatbuf_r>
 801586c:	9900      	ldr	r1, [sp, #0]
 801586e:	4605      	mov	r5, r0
 8015870:	4630      	mov	r0, r6
 8015872:	f000 fc9f 	bl	80161b4 <_malloc_r>
 8015876:	b948      	cbnz	r0, 801588c <__smakebuf_r+0x44>
 8015878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801587c:	059a      	lsls	r2, r3, #22
 801587e:	d4ef      	bmi.n	8015860 <__smakebuf_r+0x18>
 8015880:	f023 0303 	bic.w	r3, r3, #3
 8015884:	f043 0302 	orr.w	r3, r3, #2
 8015888:	81a3      	strh	r3, [r4, #12]
 801588a:	e7e3      	b.n	8015854 <__smakebuf_r+0xc>
 801588c:	4b0d      	ldr	r3, [pc, #52]	; (80158c4 <__smakebuf_r+0x7c>)
 801588e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015890:	89a3      	ldrh	r3, [r4, #12]
 8015892:	6020      	str	r0, [r4, #0]
 8015894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015898:	81a3      	strh	r3, [r4, #12]
 801589a:	9b00      	ldr	r3, [sp, #0]
 801589c:	6163      	str	r3, [r4, #20]
 801589e:	9b01      	ldr	r3, [sp, #4]
 80158a0:	6120      	str	r0, [r4, #16]
 80158a2:	b15b      	cbz	r3, 80158bc <__smakebuf_r+0x74>
 80158a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158a8:	4630      	mov	r0, r6
 80158aa:	f000 fed5 	bl	8016658 <_isatty_r>
 80158ae:	b128      	cbz	r0, 80158bc <__smakebuf_r+0x74>
 80158b0:	89a3      	ldrh	r3, [r4, #12]
 80158b2:	f023 0303 	bic.w	r3, r3, #3
 80158b6:	f043 0301 	orr.w	r3, r3, #1
 80158ba:	81a3      	strh	r3, [r4, #12]
 80158bc:	89a3      	ldrh	r3, [r4, #12]
 80158be:	431d      	orrs	r5, r3
 80158c0:	81a5      	strh	r5, [r4, #12]
 80158c2:	e7cd      	b.n	8015860 <__smakebuf_r+0x18>
 80158c4:	08015041 	.word	0x08015041

080158c8 <malloc>:
 80158c8:	4b02      	ldr	r3, [pc, #8]	; (80158d4 <malloc+0xc>)
 80158ca:	4601      	mov	r1, r0
 80158cc:	6818      	ldr	r0, [r3, #0]
 80158ce:	f000 bc71 	b.w	80161b4 <_malloc_r>
 80158d2:	bf00      	nop
 80158d4:	200001a8 	.word	0x200001a8

080158d8 <__ascii_mbtowc>:
 80158d8:	b082      	sub	sp, #8
 80158da:	b901      	cbnz	r1, 80158de <__ascii_mbtowc+0x6>
 80158dc:	a901      	add	r1, sp, #4
 80158de:	b142      	cbz	r2, 80158f2 <__ascii_mbtowc+0x1a>
 80158e0:	b14b      	cbz	r3, 80158f6 <__ascii_mbtowc+0x1e>
 80158e2:	7813      	ldrb	r3, [r2, #0]
 80158e4:	600b      	str	r3, [r1, #0]
 80158e6:	7812      	ldrb	r2, [r2, #0]
 80158e8:	1c10      	adds	r0, r2, #0
 80158ea:	bf18      	it	ne
 80158ec:	2001      	movne	r0, #1
 80158ee:	b002      	add	sp, #8
 80158f0:	4770      	bx	lr
 80158f2:	4610      	mov	r0, r2
 80158f4:	e7fb      	b.n	80158ee <__ascii_mbtowc+0x16>
 80158f6:	f06f 0001 	mvn.w	r0, #1
 80158fa:	e7f8      	b.n	80158ee <__ascii_mbtowc+0x16>

080158fc <_Balloc>:
 80158fc:	b570      	push	{r4, r5, r6, lr}
 80158fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015900:	4604      	mov	r4, r0
 8015902:	460e      	mov	r6, r1
 8015904:	b93d      	cbnz	r5, 8015916 <_Balloc+0x1a>
 8015906:	2010      	movs	r0, #16
 8015908:	f7ff ffde 	bl	80158c8 <malloc>
 801590c:	6260      	str	r0, [r4, #36]	; 0x24
 801590e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015912:	6005      	str	r5, [r0, #0]
 8015914:	60c5      	str	r5, [r0, #12]
 8015916:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015918:	68eb      	ldr	r3, [r5, #12]
 801591a:	b183      	cbz	r3, 801593e <_Balloc+0x42>
 801591c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801591e:	68db      	ldr	r3, [r3, #12]
 8015920:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015924:	b9b8      	cbnz	r0, 8015956 <_Balloc+0x5a>
 8015926:	2101      	movs	r1, #1
 8015928:	fa01 f506 	lsl.w	r5, r1, r6
 801592c:	1d6a      	adds	r2, r5, #5
 801592e:	0092      	lsls	r2, r2, #2
 8015930:	4620      	mov	r0, r4
 8015932:	f000 fbe3 	bl	80160fc <_calloc_r>
 8015936:	b160      	cbz	r0, 8015952 <_Balloc+0x56>
 8015938:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801593c:	e00e      	b.n	801595c <_Balloc+0x60>
 801593e:	2221      	movs	r2, #33	; 0x21
 8015940:	2104      	movs	r1, #4
 8015942:	4620      	mov	r0, r4
 8015944:	f000 fbda 	bl	80160fc <_calloc_r>
 8015948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801594a:	60e8      	str	r0, [r5, #12]
 801594c:	68db      	ldr	r3, [r3, #12]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d1e4      	bne.n	801591c <_Balloc+0x20>
 8015952:	2000      	movs	r0, #0
 8015954:	bd70      	pop	{r4, r5, r6, pc}
 8015956:	6802      	ldr	r2, [r0, #0]
 8015958:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801595c:	2300      	movs	r3, #0
 801595e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015962:	e7f7      	b.n	8015954 <_Balloc+0x58>

08015964 <_Bfree>:
 8015964:	b570      	push	{r4, r5, r6, lr}
 8015966:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015968:	4606      	mov	r6, r0
 801596a:	460d      	mov	r5, r1
 801596c:	b93c      	cbnz	r4, 801597e <_Bfree+0x1a>
 801596e:	2010      	movs	r0, #16
 8015970:	f7ff ffaa 	bl	80158c8 <malloc>
 8015974:	6270      	str	r0, [r6, #36]	; 0x24
 8015976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801597a:	6004      	str	r4, [r0, #0]
 801597c:	60c4      	str	r4, [r0, #12]
 801597e:	b13d      	cbz	r5, 8015990 <_Bfree+0x2c>
 8015980:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015982:	686a      	ldr	r2, [r5, #4]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801598a:	6029      	str	r1, [r5, #0]
 801598c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015990:	bd70      	pop	{r4, r5, r6, pc}

08015992 <__multadd>:
 8015992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015996:	690d      	ldr	r5, [r1, #16]
 8015998:	461f      	mov	r7, r3
 801599a:	4606      	mov	r6, r0
 801599c:	460c      	mov	r4, r1
 801599e:	f101 0c14 	add.w	ip, r1, #20
 80159a2:	2300      	movs	r3, #0
 80159a4:	f8dc 0000 	ldr.w	r0, [ip]
 80159a8:	b281      	uxth	r1, r0
 80159aa:	fb02 7101 	mla	r1, r2, r1, r7
 80159ae:	0c0f      	lsrs	r7, r1, #16
 80159b0:	0c00      	lsrs	r0, r0, #16
 80159b2:	fb02 7000 	mla	r0, r2, r0, r7
 80159b6:	b289      	uxth	r1, r1
 80159b8:	3301      	adds	r3, #1
 80159ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80159be:	429d      	cmp	r5, r3
 80159c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80159c4:	f84c 1b04 	str.w	r1, [ip], #4
 80159c8:	dcec      	bgt.n	80159a4 <__multadd+0x12>
 80159ca:	b1d7      	cbz	r7, 8015a02 <__multadd+0x70>
 80159cc:	68a3      	ldr	r3, [r4, #8]
 80159ce:	42ab      	cmp	r3, r5
 80159d0:	dc12      	bgt.n	80159f8 <__multadd+0x66>
 80159d2:	6861      	ldr	r1, [r4, #4]
 80159d4:	4630      	mov	r0, r6
 80159d6:	3101      	adds	r1, #1
 80159d8:	f7ff ff90 	bl	80158fc <_Balloc>
 80159dc:	6922      	ldr	r2, [r4, #16]
 80159de:	3202      	adds	r2, #2
 80159e0:	f104 010c 	add.w	r1, r4, #12
 80159e4:	4680      	mov	r8, r0
 80159e6:	0092      	lsls	r2, r2, #2
 80159e8:	300c      	adds	r0, #12
 80159ea:	f7fc fe8b 	bl	8012704 <memcpy>
 80159ee:	4621      	mov	r1, r4
 80159f0:	4630      	mov	r0, r6
 80159f2:	f7ff ffb7 	bl	8015964 <_Bfree>
 80159f6:	4644      	mov	r4, r8
 80159f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80159fc:	3501      	adds	r5, #1
 80159fe:	615f      	str	r7, [r3, #20]
 8015a00:	6125      	str	r5, [r4, #16]
 8015a02:	4620      	mov	r0, r4
 8015a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a08 <__s2b>:
 8015a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a0c:	460c      	mov	r4, r1
 8015a0e:	4615      	mov	r5, r2
 8015a10:	461f      	mov	r7, r3
 8015a12:	2209      	movs	r2, #9
 8015a14:	3308      	adds	r3, #8
 8015a16:	4606      	mov	r6, r0
 8015a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a1c:	2100      	movs	r1, #0
 8015a1e:	2201      	movs	r2, #1
 8015a20:	429a      	cmp	r2, r3
 8015a22:	db20      	blt.n	8015a66 <__s2b+0x5e>
 8015a24:	4630      	mov	r0, r6
 8015a26:	f7ff ff69 	bl	80158fc <_Balloc>
 8015a2a:	9b08      	ldr	r3, [sp, #32]
 8015a2c:	6143      	str	r3, [r0, #20]
 8015a2e:	2d09      	cmp	r5, #9
 8015a30:	f04f 0301 	mov.w	r3, #1
 8015a34:	6103      	str	r3, [r0, #16]
 8015a36:	dd19      	ble.n	8015a6c <__s2b+0x64>
 8015a38:	f104 0809 	add.w	r8, r4, #9
 8015a3c:	46c1      	mov	r9, r8
 8015a3e:	442c      	add	r4, r5
 8015a40:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015a44:	4601      	mov	r1, r0
 8015a46:	3b30      	subs	r3, #48	; 0x30
 8015a48:	220a      	movs	r2, #10
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f7ff ffa1 	bl	8015992 <__multadd>
 8015a50:	45a1      	cmp	r9, r4
 8015a52:	d1f5      	bne.n	8015a40 <__s2b+0x38>
 8015a54:	eb08 0405 	add.w	r4, r8, r5
 8015a58:	3c08      	subs	r4, #8
 8015a5a:	1b2d      	subs	r5, r5, r4
 8015a5c:	1963      	adds	r3, r4, r5
 8015a5e:	42bb      	cmp	r3, r7
 8015a60:	db07      	blt.n	8015a72 <__s2b+0x6a>
 8015a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a66:	0052      	lsls	r2, r2, #1
 8015a68:	3101      	adds	r1, #1
 8015a6a:	e7d9      	b.n	8015a20 <__s2b+0x18>
 8015a6c:	340a      	adds	r4, #10
 8015a6e:	2509      	movs	r5, #9
 8015a70:	e7f3      	b.n	8015a5a <__s2b+0x52>
 8015a72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015a76:	4601      	mov	r1, r0
 8015a78:	3b30      	subs	r3, #48	; 0x30
 8015a7a:	220a      	movs	r2, #10
 8015a7c:	4630      	mov	r0, r6
 8015a7e:	f7ff ff88 	bl	8015992 <__multadd>
 8015a82:	e7eb      	b.n	8015a5c <__s2b+0x54>

08015a84 <__hi0bits>:
 8015a84:	0c02      	lsrs	r2, r0, #16
 8015a86:	0412      	lsls	r2, r2, #16
 8015a88:	4603      	mov	r3, r0
 8015a8a:	b9b2      	cbnz	r2, 8015aba <__hi0bits+0x36>
 8015a8c:	0403      	lsls	r3, r0, #16
 8015a8e:	2010      	movs	r0, #16
 8015a90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015a94:	bf04      	itt	eq
 8015a96:	021b      	lsleq	r3, r3, #8
 8015a98:	3008      	addeq	r0, #8
 8015a9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015a9e:	bf04      	itt	eq
 8015aa0:	011b      	lsleq	r3, r3, #4
 8015aa2:	3004      	addeq	r0, #4
 8015aa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015aa8:	bf04      	itt	eq
 8015aaa:	009b      	lsleq	r3, r3, #2
 8015aac:	3002      	addeq	r0, #2
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	db06      	blt.n	8015ac0 <__hi0bits+0x3c>
 8015ab2:	005b      	lsls	r3, r3, #1
 8015ab4:	d503      	bpl.n	8015abe <__hi0bits+0x3a>
 8015ab6:	3001      	adds	r0, #1
 8015ab8:	4770      	bx	lr
 8015aba:	2000      	movs	r0, #0
 8015abc:	e7e8      	b.n	8015a90 <__hi0bits+0xc>
 8015abe:	2020      	movs	r0, #32
 8015ac0:	4770      	bx	lr

08015ac2 <__lo0bits>:
 8015ac2:	6803      	ldr	r3, [r0, #0]
 8015ac4:	f013 0207 	ands.w	r2, r3, #7
 8015ac8:	4601      	mov	r1, r0
 8015aca:	d00b      	beq.n	8015ae4 <__lo0bits+0x22>
 8015acc:	07da      	lsls	r2, r3, #31
 8015ace:	d423      	bmi.n	8015b18 <__lo0bits+0x56>
 8015ad0:	0798      	lsls	r0, r3, #30
 8015ad2:	bf49      	itett	mi
 8015ad4:	085b      	lsrmi	r3, r3, #1
 8015ad6:	089b      	lsrpl	r3, r3, #2
 8015ad8:	2001      	movmi	r0, #1
 8015ada:	600b      	strmi	r3, [r1, #0]
 8015adc:	bf5c      	itt	pl
 8015ade:	600b      	strpl	r3, [r1, #0]
 8015ae0:	2002      	movpl	r0, #2
 8015ae2:	4770      	bx	lr
 8015ae4:	b298      	uxth	r0, r3
 8015ae6:	b9a8      	cbnz	r0, 8015b14 <__lo0bits+0x52>
 8015ae8:	0c1b      	lsrs	r3, r3, #16
 8015aea:	2010      	movs	r0, #16
 8015aec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015af0:	bf04      	itt	eq
 8015af2:	0a1b      	lsreq	r3, r3, #8
 8015af4:	3008      	addeq	r0, #8
 8015af6:	071a      	lsls	r2, r3, #28
 8015af8:	bf04      	itt	eq
 8015afa:	091b      	lsreq	r3, r3, #4
 8015afc:	3004      	addeq	r0, #4
 8015afe:	079a      	lsls	r2, r3, #30
 8015b00:	bf04      	itt	eq
 8015b02:	089b      	lsreq	r3, r3, #2
 8015b04:	3002      	addeq	r0, #2
 8015b06:	07da      	lsls	r2, r3, #31
 8015b08:	d402      	bmi.n	8015b10 <__lo0bits+0x4e>
 8015b0a:	085b      	lsrs	r3, r3, #1
 8015b0c:	d006      	beq.n	8015b1c <__lo0bits+0x5a>
 8015b0e:	3001      	adds	r0, #1
 8015b10:	600b      	str	r3, [r1, #0]
 8015b12:	4770      	bx	lr
 8015b14:	4610      	mov	r0, r2
 8015b16:	e7e9      	b.n	8015aec <__lo0bits+0x2a>
 8015b18:	2000      	movs	r0, #0
 8015b1a:	4770      	bx	lr
 8015b1c:	2020      	movs	r0, #32
 8015b1e:	4770      	bx	lr

08015b20 <__i2b>:
 8015b20:	b510      	push	{r4, lr}
 8015b22:	460c      	mov	r4, r1
 8015b24:	2101      	movs	r1, #1
 8015b26:	f7ff fee9 	bl	80158fc <_Balloc>
 8015b2a:	2201      	movs	r2, #1
 8015b2c:	6144      	str	r4, [r0, #20]
 8015b2e:	6102      	str	r2, [r0, #16]
 8015b30:	bd10      	pop	{r4, pc}

08015b32 <__multiply>:
 8015b32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b36:	4614      	mov	r4, r2
 8015b38:	690a      	ldr	r2, [r1, #16]
 8015b3a:	6923      	ldr	r3, [r4, #16]
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	bfb8      	it	lt
 8015b40:	460b      	movlt	r3, r1
 8015b42:	4688      	mov	r8, r1
 8015b44:	bfbc      	itt	lt
 8015b46:	46a0      	movlt	r8, r4
 8015b48:	461c      	movlt	r4, r3
 8015b4a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015b4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b56:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b5a:	eb07 0609 	add.w	r6, r7, r9
 8015b5e:	42b3      	cmp	r3, r6
 8015b60:	bfb8      	it	lt
 8015b62:	3101      	addlt	r1, #1
 8015b64:	f7ff feca 	bl	80158fc <_Balloc>
 8015b68:	f100 0514 	add.w	r5, r0, #20
 8015b6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015b70:	462b      	mov	r3, r5
 8015b72:	2200      	movs	r2, #0
 8015b74:	4573      	cmp	r3, lr
 8015b76:	d316      	bcc.n	8015ba6 <__multiply+0x74>
 8015b78:	f104 0214 	add.w	r2, r4, #20
 8015b7c:	f108 0114 	add.w	r1, r8, #20
 8015b80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015b84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	9b00      	ldr	r3, [sp, #0]
 8015b8c:	9201      	str	r2, [sp, #4]
 8015b8e:	4293      	cmp	r3, r2
 8015b90:	d80c      	bhi.n	8015bac <__multiply+0x7a>
 8015b92:	2e00      	cmp	r6, #0
 8015b94:	dd03      	ble.n	8015b9e <__multiply+0x6c>
 8015b96:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d05d      	beq.n	8015c5a <__multiply+0x128>
 8015b9e:	6106      	str	r6, [r0, #16]
 8015ba0:	b003      	add	sp, #12
 8015ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba6:	f843 2b04 	str.w	r2, [r3], #4
 8015baa:	e7e3      	b.n	8015b74 <__multiply+0x42>
 8015bac:	f8b2 b000 	ldrh.w	fp, [r2]
 8015bb0:	f1bb 0f00 	cmp.w	fp, #0
 8015bb4:	d023      	beq.n	8015bfe <__multiply+0xcc>
 8015bb6:	4689      	mov	r9, r1
 8015bb8:	46ac      	mov	ip, r5
 8015bba:	f04f 0800 	mov.w	r8, #0
 8015bbe:	f859 4b04 	ldr.w	r4, [r9], #4
 8015bc2:	f8dc a000 	ldr.w	sl, [ip]
 8015bc6:	b2a3      	uxth	r3, r4
 8015bc8:	fa1f fa8a 	uxth.w	sl, sl
 8015bcc:	fb0b a303 	mla	r3, fp, r3, sl
 8015bd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015bd4:	f8dc 4000 	ldr.w	r4, [ip]
 8015bd8:	4443      	add	r3, r8
 8015bda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015bde:	fb0b 840a 	mla	r4, fp, sl, r8
 8015be2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015be6:	46e2      	mov	sl, ip
 8015be8:	b29b      	uxth	r3, r3
 8015bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015bee:	454f      	cmp	r7, r9
 8015bf0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015bf4:	f84a 3b04 	str.w	r3, [sl], #4
 8015bf8:	d82b      	bhi.n	8015c52 <__multiply+0x120>
 8015bfa:	f8cc 8004 	str.w	r8, [ip, #4]
 8015bfe:	9b01      	ldr	r3, [sp, #4]
 8015c00:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015c04:	3204      	adds	r2, #4
 8015c06:	f1ba 0f00 	cmp.w	sl, #0
 8015c0a:	d020      	beq.n	8015c4e <__multiply+0x11c>
 8015c0c:	682b      	ldr	r3, [r5, #0]
 8015c0e:	4689      	mov	r9, r1
 8015c10:	46a8      	mov	r8, r5
 8015c12:	f04f 0b00 	mov.w	fp, #0
 8015c16:	f8b9 c000 	ldrh.w	ip, [r9]
 8015c1a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015c1e:	fb0a 440c 	mla	r4, sl, ip, r4
 8015c22:	445c      	add	r4, fp
 8015c24:	46c4      	mov	ip, r8
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015c2c:	f84c 3b04 	str.w	r3, [ip], #4
 8015c30:	f859 3b04 	ldr.w	r3, [r9], #4
 8015c34:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015c38:	0c1b      	lsrs	r3, r3, #16
 8015c3a:	fb0a b303 	mla	r3, sl, r3, fp
 8015c3e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015c42:	454f      	cmp	r7, r9
 8015c44:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015c48:	d805      	bhi.n	8015c56 <__multiply+0x124>
 8015c4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8015c4e:	3504      	adds	r5, #4
 8015c50:	e79b      	b.n	8015b8a <__multiply+0x58>
 8015c52:	46d4      	mov	ip, sl
 8015c54:	e7b3      	b.n	8015bbe <__multiply+0x8c>
 8015c56:	46e0      	mov	r8, ip
 8015c58:	e7dd      	b.n	8015c16 <__multiply+0xe4>
 8015c5a:	3e01      	subs	r6, #1
 8015c5c:	e799      	b.n	8015b92 <__multiply+0x60>
	...

08015c60 <__pow5mult>:
 8015c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c64:	4615      	mov	r5, r2
 8015c66:	f012 0203 	ands.w	r2, r2, #3
 8015c6a:	4606      	mov	r6, r0
 8015c6c:	460f      	mov	r7, r1
 8015c6e:	d007      	beq.n	8015c80 <__pow5mult+0x20>
 8015c70:	3a01      	subs	r2, #1
 8015c72:	4c21      	ldr	r4, [pc, #132]	; (8015cf8 <__pow5mult+0x98>)
 8015c74:	2300      	movs	r3, #0
 8015c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c7a:	f7ff fe8a 	bl	8015992 <__multadd>
 8015c7e:	4607      	mov	r7, r0
 8015c80:	10ad      	asrs	r5, r5, #2
 8015c82:	d035      	beq.n	8015cf0 <__pow5mult+0x90>
 8015c84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015c86:	b93c      	cbnz	r4, 8015c98 <__pow5mult+0x38>
 8015c88:	2010      	movs	r0, #16
 8015c8a:	f7ff fe1d 	bl	80158c8 <malloc>
 8015c8e:	6270      	str	r0, [r6, #36]	; 0x24
 8015c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015c94:	6004      	str	r4, [r0, #0]
 8015c96:	60c4      	str	r4, [r0, #12]
 8015c98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015ca0:	b94c      	cbnz	r4, 8015cb6 <__pow5mult+0x56>
 8015ca2:	f240 2171 	movw	r1, #625	; 0x271
 8015ca6:	4630      	mov	r0, r6
 8015ca8:	f7ff ff3a 	bl	8015b20 <__i2b>
 8015cac:	2300      	movs	r3, #0
 8015cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8015cb2:	4604      	mov	r4, r0
 8015cb4:	6003      	str	r3, [r0, #0]
 8015cb6:	f04f 0800 	mov.w	r8, #0
 8015cba:	07eb      	lsls	r3, r5, #31
 8015cbc:	d50a      	bpl.n	8015cd4 <__pow5mult+0x74>
 8015cbe:	4639      	mov	r1, r7
 8015cc0:	4622      	mov	r2, r4
 8015cc2:	4630      	mov	r0, r6
 8015cc4:	f7ff ff35 	bl	8015b32 <__multiply>
 8015cc8:	4639      	mov	r1, r7
 8015cca:	4681      	mov	r9, r0
 8015ccc:	4630      	mov	r0, r6
 8015cce:	f7ff fe49 	bl	8015964 <_Bfree>
 8015cd2:	464f      	mov	r7, r9
 8015cd4:	106d      	asrs	r5, r5, #1
 8015cd6:	d00b      	beq.n	8015cf0 <__pow5mult+0x90>
 8015cd8:	6820      	ldr	r0, [r4, #0]
 8015cda:	b938      	cbnz	r0, 8015cec <__pow5mult+0x8c>
 8015cdc:	4622      	mov	r2, r4
 8015cde:	4621      	mov	r1, r4
 8015ce0:	4630      	mov	r0, r6
 8015ce2:	f7ff ff26 	bl	8015b32 <__multiply>
 8015ce6:	6020      	str	r0, [r4, #0]
 8015ce8:	f8c0 8000 	str.w	r8, [r0]
 8015cec:	4604      	mov	r4, r0
 8015cee:	e7e4      	b.n	8015cba <__pow5mult+0x5a>
 8015cf0:	4638      	mov	r0, r7
 8015cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cf6:	bf00      	nop
 8015cf8:	080178b8 	.word	0x080178b8

08015cfc <__lshift>:
 8015cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d00:	460c      	mov	r4, r1
 8015d02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d06:	6923      	ldr	r3, [r4, #16]
 8015d08:	6849      	ldr	r1, [r1, #4]
 8015d0a:	eb0a 0903 	add.w	r9, sl, r3
 8015d0e:	68a3      	ldr	r3, [r4, #8]
 8015d10:	4607      	mov	r7, r0
 8015d12:	4616      	mov	r6, r2
 8015d14:	f109 0501 	add.w	r5, r9, #1
 8015d18:	42ab      	cmp	r3, r5
 8015d1a:	db32      	blt.n	8015d82 <__lshift+0x86>
 8015d1c:	4638      	mov	r0, r7
 8015d1e:	f7ff fded 	bl	80158fc <_Balloc>
 8015d22:	2300      	movs	r3, #0
 8015d24:	4680      	mov	r8, r0
 8015d26:	f100 0114 	add.w	r1, r0, #20
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	4553      	cmp	r3, sl
 8015d2e:	db2b      	blt.n	8015d88 <__lshift+0x8c>
 8015d30:	6920      	ldr	r0, [r4, #16]
 8015d32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d36:	f104 0314 	add.w	r3, r4, #20
 8015d3a:	f016 021f 	ands.w	r2, r6, #31
 8015d3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015d46:	d025      	beq.n	8015d94 <__lshift+0x98>
 8015d48:	f1c2 0e20 	rsb	lr, r2, #32
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	681e      	ldr	r6, [r3, #0]
 8015d50:	468a      	mov	sl, r1
 8015d52:	4096      	lsls	r6, r2
 8015d54:	4330      	orrs	r0, r6
 8015d56:	f84a 0b04 	str.w	r0, [sl], #4
 8015d5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8015d5e:	459c      	cmp	ip, r3
 8015d60:	fa20 f00e 	lsr.w	r0, r0, lr
 8015d64:	d814      	bhi.n	8015d90 <__lshift+0x94>
 8015d66:	6048      	str	r0, [r1, #4]
 8015d68:	b108      	cbz	r0, 8015d6e <__lshift+0x72>
 8015d6a:	f109 0502 	add.w	r5, r9, #2
 8015d6e:	3d01      	subs	r5, #1
 8015d70:	4638      	mov	r0, r7
 8015d72:	f8c8 5010 	str.w	r5, [r8, #16]
 8015d76:	4621      	mov	r1, r4
 8015d78:	f7ff fdf4 	bl	8015964 <_Bfree>
 8015d7c:	4640      	mov	r0, r8
 8015d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d82:	3101      	adds	r1, #1
 8015d84:	005b      	lsls	r3, r3, #1
 8015d86:	e7c7      	b.n	8015d18 <__lshift+0x1c>
 8015d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	e7cd      	b.n	8015d2c <__lshift+0x30>
 8015d90:	4651      	mov	r1, sl
 8015d92:	e7dc      	b.n	8015d4e <__lshift+0x52>
 8015d94:	3904      	subs	r1, #4
 8015d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8015d9e:	459c      	cmp	ip, r3
 8015da0:	d8f9      	bhi.n	8015d96 <__lshift+0x9a>
 8015da2:	e7e4      	b.n	8015d6e <__lshift+0x72>

08015da4 <__mcmp>:
 8015da4:	6903      	ldr	r3, [r0, #16]
 8015da6:	690a      	ldr	r2, [r1, #16]
 8015da8:	1a9b      	subs	r3, r3, r2
 8015daa:	b530      	push	{r4, r5, lr}
 8015dac:	d10c      	bne.n	8015dc8 <__mcmp+0x24>
 8015dae:	0092      	lsls	r2, r2, #2
 8015db0:	3014      	adds	r0, #20
 8015db2:	3114      	adds	r1, #20
 8015db4:	1884      	adds	r4, r0, r2
 8015db6:	4411      	add	r1, r2
 8015db8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015dc0:	4295      	cmp	r5, r2
 8015dc2:	d003      	beq.n	8015dcc <__mcmp+0x28>
 8015dc4:	d305      	bcc.n	8015dd2 <__mcmp+0x2e>
 8015dc6:	2301      	movs	r3, #1
 8015dc8:	4618      	mov	r0, r3
 8015dca:	bd30      	pop	{r4, r5, pc}
 8015dcc:	42a0      	cmp	r0, r4
 8015dce:	d3f3      	bcc.n	8015db8 <__mcmp+0x14>
 8015dd0:	e7fa      	b.n	8015dc8 <__mcmp+0x24>
 8015dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8015dd6:	e7f7      	b.n	8015dc8 <__mcmp+0x24>

08015dd8 <__mdiff>:
 8015dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ddc:	460d      	mov	r5, r1
 8015dde:	4607      	mov	r7, r0
 8015de0:	4611      	mov	r1, r2
 8015de2:	4628      	mov	r0, r5
 8015de4:	4614      	mov	r4, r2
 8015de6:	f7ff ffdd 	bl	8015da4 <__mcmp>
 8015dea:	1e06      	subs	r6, r0, #0
 8015dec:	d108      	bne.n	8015e00 <__mdiff+0x28>
 8015dee:	4631      	mov	r1, r6
 8015df0:	4638      	mov	r0, r7
 8015df2:	f7ff fd83 	bl	80158fc <_Balloc>
 8015df6:	2301      	movs	r3, #1
 8015df8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e00:	bfa4      	itt	ge
 8015e02:	4623      	movge	r3, r4
 8015e04:	462c      	movge	r4, r5
 8015e06:	4638      	mov	r0, r7
 8015e08:	6861      	ldr	r1, [r4, #4]
 8015e0a:	bfa6      	itte	ge
 8015e0c:	461d      	movge	r5, r3
 8015e0e:	2600      	movge	r6, #0
 8015e10:	2601      	movlt	r6, #1
 8015e12:	f7ff fd73 	bl	80158fc <_Balloc>
 8015e16:	692b      	ldr	r3, [r5, #16]
 8015e18:	60c6      	str	r6, [r0, #12]
 8015e1a:	6926      	ldr	r6, [r4, #16]
 8015e1c:	f105 0914 	add.w	r9, r5, #20
 8015e20:	f104 0214 	add.w	r2, r4, #20
 8015e24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015e28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015e2c:	f100 0514 	add.w	r5, r0, #20
 8015e30:	f04f 0e00 	mov.w	lr, #0
 8015e34:	f852 ab04 	ldr.w	sl, [r2], #4
 8015e38:	f859 4b04 	ldr.w	r4, [r9], #4
 8015e3c:	fa1e f18a 	uxtah	r1, lr, sl
 8015e40:	b2a3      	uxth	r3, r4
 8015e42:	1ac9      	subs	r1, r1, r3
 8015e44:	0c23      	lsrs	r3, r4, #16
 8015e46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015e4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015e4e:	b289      	uxth	r1, r1
 8015e50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015e54:	45c8      	cmp	r8, r9
 8015e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015e5a:	4694      	mov	ip, r2
 8015e5c:	f845 3b04 	str.w	r3, [r5], #4
 8015e60:	d8e8      	bhi.n	8015e34 <__mdiff+0x5c>
 8015e62:	45bc      	cmp	ip, r7
 8015e64:	d304      	bcc.n	8015e70 <__mdiff+0x98>
 8015e66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015e6a:	b183      	cbz	r3, 8015e8e <__mdiff+0xb6>
 8015e6c:	6106      	str	r6, [r0, #16]
 8015e6e:	e7c5      	b.n	8015dfc <__mdiff+0x24>
 8015e70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015e74:	fa1e f381 	uxtah	r3, lr, r1
 8015e78:	141a      	asrs	r2, r3, #16
 8015e7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015e84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015e88:	f845 3b04 	str.w	r3, [r5], #4
 8015e8c:	e7e9      	b.n	8015e62 <__mdiff+0x8a>
 8015e8e:	3e01      	subs	r6, #1
 8015e90:	e7e9      	b.n	8015e66 <__mdiff+0x8e>
	...

08015e94 <__ulp>:
 8015e94:	4b12      	ldr	r3, [pc, #72]	; (8015ee0 <__ulp+0x4c>)
 8015e96:	ee10 2a90 	vmov	r2, s1
 8015e9a:	401a      	ands	r2, r3
 8015e9c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	dd04      	ble.n	8015eae <__ulp+0x1a>
 8015ea4:	2000      	movs	r0, #0
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	ec41 0b10 	vmov	d0, r0, r1
 8015eac:	4770      	bx	lr
 8015eae:	425b      	negs	r3, r3
 8015eb0:	151b      	asrs	r3, r3, #20
 8015eb2:	2b13      	cmp	r3, #19
 8015eb4:	f04f 0000 	mov.w	r0, #0
 8015eb8:	f04f 0100 	mov.w	r1, #0
 8015ebc:	dc04      	bgt.n	8015ec8 <__ulp+0x34>
 8015ebe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015ec2:	fa42 f103 	asr.w	r1, r2, r3
 8015ec6:	e7ef      	b.n	8015ea8 <__ulp+0x14>
 8015ec8:	3b14      	subs	r3, #20
 8015eca:	2b1e      	cmp	r3, #30
 8015ecc:	f04f 0201 	mov.w	r2, #1
 8015ed0:	bfda      	itte	le
 8015ed2:	f1c3 031f 	rsble	r3, r3, #31
 8015ed6:	fa02 f303 	lslle.w	r3, r2, r3
 8015eda:	4613      	movgt	r3, r2
 8015edc:	4618      	mov	r0, r3
 8015ede:	e7e3      	b.n	8015ea8 <__ulp+0x14>
 8015ee0:	7ff00000 	.word	0x7ff00000

08015ee4 <__b2d>:
 8015ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ee6:	6905      	ldr	r5, [r0, #16]
 8015ee8:	f100 0714 	add.w	r7, r0, #20
 8015eec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015ef0:	1f2e      	subs	r6, r5, #4
 8015ef2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f7ff fdc4 	bl	8015a84 <__hi0bits>
 8015efc:	f1c0 0320 	rsb	r3, r0, #32
 8015f00:	280a      	cmp	r0, #10
 8015f02:	600b      	str	r3, [r1, #0]
 8015f04:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015f7c <__b2d+0x98>
 8015f08:	dc14      	bgt.n	8015f34 <__b2d+0x50>
 8015f0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8015f0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015f12:	42b7      	cmp	r7, r6
 8015f14:	ea41 030c 	orr.w	r3, r1, ip
 8015f18:	bf34      	ite	cc
 8015f1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015f1e:	2100      	movcs	r1, #0
 8015f20:	3015      	adds	r0, #21
 8015f22:	fa04 f000 	lsl.w	r0, r4, r0
 8015f26:	fa21 f10e 	lsr.w	r1, r1, lr
 8015f2a:	ea40 0201 	orr.w	r2, r0, r1
 8015f2e:	ec43 2b10 	vmov	d0, r2, r3
 8015f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f34:	42b7      	cmp	r7, r6
 8015f36:	bf3a      	itte	cc
 8015f38:	f1a5 0608 	subcc.w	r6, r5, #8
 8015f3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015f40:	2100      	movcs	r1, #0
 8015f42:	380b      	subs	r0, #11
 8015f44:	d015      	beq.n	8015f72 <__b2d+0x8e>
 8015f46:	4084      	lsls	r4, r0
 8015f48:	f1c0 0520 	rsb	r5, r0, #32
 8015f4c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015f50:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015f54:	42be      	cmp	r6, r7
 8015f56:	fa21 fc05 	lsr.w	ip, r1, r5
 8015f5a:	ea44 030c 	orr.w	r3, r4, ip
 8015f5e:	bf8c      	ite	hi
 8015f60:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015f64:	2400      	movls	r4, #0
 8015f66:	fa01 f000 	lsl.w	r0, r1, r0
 8015f6a:	40ec      	lsrs	r4, r5
 8015f6c:	ea40 0204 	orr.w	r2, r0, r4
 8015f70:	e7dd      	b.n	8015f2e <__b2d+0x4a>
 8015f72:	ea44 030c 	orr.w	r3, r4, ip
 8015f76:	460a      	mov	r2, r1
 8015f78:	e7d9      	b.n	8015f2e <__b2d+0x4a>
 8015f7a:	bf00      	nop
 8015f7c:	3ff00000 	.word	0x3ff00000

08015f80 <__d2b>:
 8015f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f84:	460e      	mov	r6, r1
 8015f86:	2101      	movs	r1, #1
 8015f88:	ec59 8b10 	vmov	r8, r9, d0
 8015f8c:	4615      	mov	r5, r2
 8015f8e:	f7ff fcb5 	bl	80158fc <_Balloc>
 8015f92:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015f96:	4607      	mov	r7, r0
 8015f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f9c:	bb34      	cbnz	r4, 8015fec <__d2b+0x6c>
 8015f9e:	9301      	str	r3, [sp, #4]
 8015fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8015fa4:	d027      	beq.n	8015ff6 <__d2b+0x76>
 8015fa6:	a802      	add	r0, sp, #8
 8015fa8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015fac:	f7ff fd89 	bl	8015ac2 <__lo0bits>
 8015fb0:	9900      	ldr	r1, [sp, #0]
 8015fb2:	b1f0      	cbz	r0, 8015ff2 <__d2b+0x72>
 8015fb4:	9a01      	ldr	r2, [sp, #4]
 8015fb6:	f1c0 0320 	rsb	r3, r0, #32
 8015fba:	fa02 f303 	lsl.w	r3, r2, r3
 8015fbe:	430b      	orrs	r3, r1
 8015fc0:	40c2      	lsrs	r2, r0
 8015fc2:	617b      	str	r3, [r7, #20]
 8015fc4:	9201      	str	r2, [sp, #4]
 8015fc6:	9b01      	ldr	r3, [sp, #4]
 8015fc8:	61bb      	str	r3, [r7, #24]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	bf14      	ite	ne
 8015fce:	2102      	movne	r1, #2
 8015fd0:	2101      	moveq	r1, #1
 8015fd2:	6139      	str	r1, [r7, #16]
 8015fd4:	b1c4      	cbz	r4, 8016008 <__d2b+0x88>
 8015fd6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015fda:	4404      	add	r4, r0
 8015fdc:	6034      	str	r4, [r6, #0]
 8015fde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015fe2:	6028      	str	r0, [r5, #0]
 8015fe4:	4638      	mov	r0, r7
 8015fe6:	b003      	add	sp, #12
 8015fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015ff0:	e7d5      	b.n	8015f9e <__d2b+0x1e>
 8015ff2:	6179      	str	r1, [r7, #20]
 8015ff4:	e7e7      	b.n	8015fc6 <__d2b+0x46>
 8015ff6:	a801      	add	r0, sp, #4
 8015ff8:	f7ff fd63 	bl	8015ac2 <__lo0bits>
 8015ffc:	9b01      	ldr	r3, [sp, #4]
 8015ffe:	617b      	str	r3, [r7, #20]
 8016000:	2101      	movs	r1, #1
 8016002:	6139      	str	r1, [r7, #16]
 8016004:	3020      	adds	r0, #32
 8016006:	e7e5      	b.n	8015fd4 <__d2b+0x54>
 8016008:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801600c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016010:	6030      	str	r0, [r6, #0]
 8016012:	6918      	ldr	r0, [r3, #16]
 8016014:	f7ff fd36 	bl	8015a84 <__hi0bits>
 8016018:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801601c:	e7e1      	b.n	8015fe2 <__d2b+0x62>

0801601e <__ratio>:
 801601e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016022:	4688      	mov	r8, r1
 8016024:	4669      	mov	r1, sp
 8016026:	4681      	mov	r9, r0
 8016028:	f7ff ff5c 	bl	8015ee4 <__b2d>
 801602c:	a901      	add	r1, sp, #4
 801602e:	4640      	mov	r0, r8
 8016030:	ec57 6b10 	vmov	r6, r7, d0
 8016034:	ee10 4a10 	vmov	r4, s0
 8016038:	f7ff ff54 	bl	8015ee4 <__b2d>
 801603c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016040:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016044:	eba3 0c02 	sub.w	ip, r3, r2
 8016048:	e9dd 3200 	ldrd	r3, r2, [sp]
 801604c:	1a9b      	subs	r3, r3, r2
 801604e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016052:	ec51 0b10 	vmov	r0, r1, d0
 8016056:	2b00      	cmp	r3, #0
 8016058:	ee10 aa10 	vmov	sl, s0
 801605c:	bfce      	itee	gt
 801605e:	463a      	movgt	r2, r7
 8016060:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016064:	460a      	movle	r2, r1
 8016066:	463d      	mov	r5, r7
 8016068:	468b      	mov	fp, r1
 801606a:	bfcc      	ite	gt
 801606c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016070:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016074:	ec45 4b17 	vmov	d7, r4, r5
 8016078:	ec4b ab16 	vmov	d6, sl, fp
 801607c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8016080:	b003      	add	sp, #12
 8016082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016086 <__copybits>:
 8016086:	3901      	subs	r1, #1
 8016088:	b510      	push	{r4, lr}
 801608a:	1149      	asrs	r1, r1, #5
 801608c:	6914      	ldr	r4, [r2, #16]
 801608e:	3101      	adds	r1, #1
 8016090:	f102 0314 	add.w	r3, r2, #20
 8016094:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016098:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801609c:	42a3      	cmp	r3, r4
 801609e:	4602      	mov	r2, r0
 80160a0:	d303      	bcc.n	80160aa <__copybits+0x24>
 80160a2:	2300      	movs	r3, #0
 80160a4:	428a      	cmp	r2, r1
 80160a6:	d305      	bcc.n	80160b4 <__copybits+0x2e>
 80160a8:	bd10      	pop	{r4, pc}
 80160aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80160ae:	f840 2b04 	str.w	r2, [r0], #4
 80160b2:	e7f3      	b.n	801609c <__copybits+0x16>
 80160b4:	f842 3b04 	str.w	r3, [r2], #4
 80160b8:	e7f4      	b.n	80160a4 <__copybits+0x1e>

080160ba <__any_on>:
 80160ba:	f100 0214 	add.w	r2, r0, #20
 80160be:	6900      	ldr	r0, [r0, #16]
 80160c0:	114b      	asrs	r3, r1, #5
 80160c2:	4298      	cmp	r0, r3
 80160c4:	b510      	push	{r4, lr}
 80160c6:	db11      	blt.n	80160ec <__any_on+0x32>
 80160c8:	dd0a      	ble.n	80160e0 <__any_on+0x26>
 80160ca:	f011 011f 	ands.w	r1, r1, #31
 80160ce:	d007      	beq.n	80160e0 <__any_on+0x26>
 80160d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80160d4:	fa24 f001 	lsr.w	r0, r4, r1
 80160d8:	fa00 f101 	lsl.w	r1, r0, r1
 80160dc:	428c      	cmp	r4, r1
 80160de:	d10b      	bne.n	80160f8 <__any_on+0x3e>
 80160e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80160e4:	4293      	cmp	r3, r2
 80160e6:	d803      	bhi.n	80160f0 <__any_on+0x36>
 80160e8:	2000      	movs	r0, #0
 80160ea:	bd10      	pop	{r4, pc}
 80160ec:	4603      	mov	r3, r0
 80160ee:	e7f7      	b.n	80160e0 <__any_on+0x26>
 80160f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80160f4:	2900      	cmp	r1, #0
 80160f6:	d0f5      	beq.n	80160e4 <__any_on+0x2a>
 80160f8:	2001      	movs	r0, #1
 80160fa:	e7f6      	b.n	80160ea <__any_on+0x30>

080160fc <_calloc_r>:
 80160fc:	b538      	push	{r3, r4, r5, lr}
 80160fe:	fb02 f401 	mul.w	r4, r2, r1
 8016102:	4621      	mov	r1, r4
 8016104:	f000 f856 	bl	80161b4 <_malloc_r>
 8016108:	4605      	mov	r5, r0
 801610a:	b118      	cbz	r0, 8016114 <_calloc_r+0x18>
 801610c:	4622      	mov	r2, r4
 801610e:	2100      	movs	r1, #0
 8016110:	f7fc fb03 	bl	801271a <memset>
 8016114:	4628      	mov	r0, r5
 8016116:	bd38      	pop	{r3, r4, r5, pc}

08016118 <_free_r>:
 8016118:	b538      	push	{r3, r4, r5, lr}
 801611a:	4605      	mov	r5, r0
 801611c:	2900      	cmp	r1, #0
 801611e:	d045      	beq.n	80161ac <_free_r+0x94>
 8016120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016124:	1f0c      	subs	r4, r1, #4
 8016126:	2b00      	cmp	r3, #0
 8016128:	bfb8      	it	lt
 801612a:	18e4      	addlt	r4, r4, r3
 801612c:	f000 facf 	bl	80166ce <__malloc_lock>
 8016130:	4a1f      	ldr	r2, [pc, #124]	; (80161b0 <_free_r+0x98>)
 8016132:	6813      	ldr	r3, [r2, #0]
 8016134:	4610      	mov	r0, r2
 8016136:	b933      	cbnz	r3, 8016146 <_free_r+0x2e>
 8016138:	6063      	str	r3, [r4, #4]
 801613a:	6014      	str	r4, [r2, #0]
 801613c:	4628      	mov	r0, r5
 801613e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016142:	f000 bac5 	b.w	80166d0 <__malloc_unlock>
 8016146:	42a3      	cmp	r3, r4
 8016148:	d90c      	bls.n	8016164 <_free_r+0x4c>
 801614a:	6821      	ldr	r1, [r4, #0]
 801614c:	1862      	adds	r2, r4, r1
 801614e:	4293      	cmp	r3, r2
 8016150:	bf04      	itt	eq
 8016152:	681a      	ldreq	r2, [r3, #0]
 8016154:	685b      	ldreq	r3, [r3, #4]
 8016156:	6063      	str	r3, [r4, #4]
 8016158:	bf04      	itt	eq
 801615a:	1852      	addeq	r2, r2, r1
 801615c:	6022      	streq	r2, [r4, #0]
 801615e:	6004      	str	r4, [r0, #0]
 8016160:	e7ec      	b.n	801613c <_free_r+0x24>
 8016162:	4613      	mov	r3, r2
 8016164:	685a      	ldr	r2, [r3, #4]
 8016166:	b10a      	cbz	r2, 801616c <_free_r+0x54>
 8016168:	42a2      	cmp	r2, r4
 801616a:	d9fa      	bls.n	8016162 <_free_r+0x4a>
 801616c:	6819      	ldr	r1, [r3, #0]
 801616e:	1858      	adds	r0, r3, r1
 8016170:	42a0      	cmp	r0, r4
 8016172:	d10b      	bne.n	801618c <_free_r+0x74>
 8016174:	6820      	ldr	r0, [r4, #0]
 8016176:	4401      	add	r1, r0
 8016178:	1858      	adds	r0, r3, r1
 801617a:	4282      	cmp	r2, r0
 801617c:	6019      	str	r1, [r3, #0]
 801617e:	d1dd      	bne.n	801613c <_free_r+0x24>
 8016180:	6810      	ldr	r0, [r2, #0]
 8016182:	6852      	ldr	r2, [r2, #4]
 8016184:	605a      	str	r2, [r3, #4]
 8016186:	4401      	add	r1, r0
 8016188:	6019      	str	r1, [r3, #0]
 801618a:	e7d7      	b.n	801613c <_free_r+0x24>
 801618c:	d902      	bls.n	8016194 <_free_r+0x7c>
 801618e:	230c      	movs	r3, #12
 8016190:	602b      	str	r3, [r5, #0]
 8016192:	e7d3      	b.n	801613c <_free_r+0x24>
 8016194:	6820      	ldr	r0, [r4, #0]
 8016196:	1821      	adds	r1, r4, r0
 8016198:	428a      	cmp	r2, r1
 801619a:	bf04      	itt	eq
 801619c:	6811      	ldreq	r1, [r2, #0]
 801619e:	6852      	ldreq	r2, [r2, #4]
 80161a0:	6062      	str	r2, [r4, #4]
 80161a2:	bf04      	itt	eq
 80161a4:	1809      	addeq	r1, r1, r0
 80161a6:	6021      	streq	r1, [r4, #0]
 80161a8:	605c      	str	r4, [r3, #4]
 80161aa:	e7c7      	b.n	801613c <_free_r+0x24>
 80161ac:	bd38      	pop	{r3, r4, r5, pc}
 80161ae:	bf00      	nop
 80161b0:	20028aa0 	.word	0x20028aa0

080161b4 <_malloc_r>:
 80161b4:	b570      	push	{r4, r5, r6, lr}
 80161b6:	1ccd      	adds	r5, r1, #3
 80161b8:	f025 0503 	bic.w	r5, r5, #3
 80161bc:	3508      	adds	r5, #8
 80161be:	2d0c      	cmp	r5, #12
 80161c0:	bf38      	it	cc
 80161c2:	250c      	movcc	r5, #12
 80161c4:	2d00      	cmp	r5, #0
 80161c6:	4606      	mov	r6, r0
 80161c8:	db01      	blt.n	80161ce <_malloc_r+0x1a>
 80161ca:	42a9      	cmp	r1, r5
 80161cc:	d903      	bls.n	80161d6 <_malloc_r+0x22>
 80161ce:	230c      	movs	r3, #12
 80161d0:	6033      	str	r3, [r6, #0]
 80161d2:	2000      	movs	r0, #0
 80161d4:	bd70      	pop	{r4, r5, r6, pc}
 80161d6:	f000 fa7a 	bl	80166ce <__malloc_lock>
 80161da:	4a21      	ldr	r2, [pc, #132]	; (8016260 <_malloc_r+0xac>)
 80161dc:	6814      	ldr	r4, [r2, #0]
 80161de:	4621      	mov	r1, r4
 80161e0:	b991      	cbnz	r1, 8016208 <_malloc_r+0x54>
 80161e2:	4c20      	ldr	r4, [pc, #128]	; (8016264 <_malloc_r+0xb0>)
 80161e4:	6823      	ldr	r3, [r4, #0]
 80161e6:	b91b      	cbnz	r3, 80161f0 <_malloc_r+0x3c>
 80161e8:	4630      	mov	r0, r6
 80161ea:	f000 f98f 	bl	801650c <_sbrk_r>
 80161ee:	6020      	str	r0, [r4, #0]
 80161f0:	4629      	mov	r1, r5
 80161f2:	4630      	mov	r0, r6
 80161f4:	f000 f98a 	bl	801650c <_sbrk_r>
 80161f8:	1c43      	adds	r3, r0, #1
 80161fa:	d124      	bne.n	8016246 <_malloc_r+0x92>
 80161fc:	230c      	movs	r3, #12
 80161fe:	6033      	str	r3, [r6, #0]
 8016200:	4630      	mov	r0, r6
 8016202:	f000 fa65 	bl	80166d0 <__malloc_unlock>
 8016206:	e7e4      	b.n	80161d2 <_malloc_r+0x1e>
 8016208:	680b      	ldr	r3, [r1, #0]
 801620a:	1b5b      	subs	r3, r3, r5
 801620c:	d418      	bmi.n	8016240 <_malloc_r+0x8c>
 801620e:	2b0b      	cmp	r3, #11
 8016210:	d90f      	bls.n	8016232 <_malloc_r+0x7e>
 8016212:	600b      	str	r3, [r1, #0]
 8016214:	50cd      	str	r5, [r1, r3]
 8016216:	18cc      	adds	r4, r1, r3
 8016218:	4630      	mov	r0, r6
 801621a:	f000 fa59 	bl	80166d0 <__malloc_unlock>
 801621e:	f104 000b 	add.w	r0, r4, #11
 8016222:	1d23      	adds	r3, r4, #4
 8016224:	f020 0007 	bic.w	r0, r0, #7
 8016228:	1ac3      	subs	r3, r0, r3
 801622a:	d0d3      	beq.n	80161d4 <_malloc_r+0x20>
 801622c:	425a      	negs	r2, r3
 801622e:	50e2      	str	r2, [r4, r3]
 8016230:	e7d0      	b.n	80161d4 <_malloc_r+0x20>
 8016232:	428c      	cmp	r4, r1
 8016234:	684b      	ldr	r3, [r1, #4]
 8016236:	bf16      	itet	ne
 8016238:	6063      	strne	r3, [r4, #4]
 801623a:	6013      	streq	r3, [r2, #0]
 801623c:	460c      	movne	r4, r1
 801623e:	e7eb      	b.n	8016218 <_malloc_r+0x64>
 8016240:	460c      	mov	r4, r1
 8016242:	6849      	ldr	r1, [r1, #4]
 8016244:	e7cc      	b.n	80161e0 <_malloc_r+0x2c>
 8016246:	1cc4      	adds	r4, r0, #3
 8016248:	f024 0403 	bic.w	r4, r4, #3
 801624c:	42a0      	cmp	r0, r4
 801624e:	d005      	beq.n	801625c <_malloc_r+0xa8>
 8016250:	1a21      	subs	r1, r4, r0
 8016252:	4630      	mov	r0, r6
 8016254:	f000 f95a 	bl	801650c <_sbrk_r>
 8016258:	3001      	adds	r0, #1
 801625a:	d0cf      	beq.n	80161fc <_malloc_r+0x48>
 801625c:	6025      	str	r5, [r4, #0]
 801625e:	e7db      	b.n	8016218 <_malloc_r+0x64>
 8016260:	20028aa0 	.word	0x20028aa0
 8016264:	20028aa4 	.word	0x20028aa4

08016268 <__ssputs_r>:
 8016268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801626c:	688e      	ldr	r6, [r1, #8]
 801626e:	429e      	cmp	r6, r3
 8016270:	4682      	mov	sl, r0
 8016272:	460c      	mov	r4, r1
 8016274:	4690      	mov	r8, r2
 8016276:	4699      	mov	r9, r3
 8016278:	d837      	bhi.n	80162ea <__ssputs_r+0x82>
 801627a:	898a      	ldrh	r2, [r1, #12]
 801627c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016280:	d031      	beq.n	80162e6 <__ssputs_r+0x7e>
 8016282:	6825      	ldr	r5, [r4, #0]
 8016284:	6909      	ldr	r1, [r1, #16]
 8016286:	1a6f      	subs	r7, r5, r1
 8016288:	6965      	ldr	r5, [r4, #20]
 801628a:	2302      	movs	r3, #2
 801628c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016290:	fb95 f5f3 	sdiv	r5, r5, r3
 8016294:	f109 0301 	add.w	r3, r9, #1
 8016298:	443b      	add	r3, r7
 801629a:	429d      	cmp	r5, r3
 801629c:	bf38      	it	cc
 801629e:	461d      	movcc	r5, r3
 80162a0:	0553      	lsls	r3, r2, #21
 80162a2:	d530      	bpl.n	8016306 <__ssputs_r+0x9e>
 80162a4:	4629      	mov	r1, r5
 80162a6:	f7ff ff85 	bl	80161b4 <_malloc_r>
 80162aa:	4606      	mov	r6, r0
 80162ac:	b950      	cbnz	r0, 80162c4 <__ssputs_r+0x5c>
 80162ae:	230c      	movs	r3, #12
 80162b0:	f8ca 3000 	str.w	r3, [sl]
 80162b4:	89a3      	ldrh	r3, [r4, #12]
 80162b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162ba:	81a3      	strh	r3, [r4, #12]
 80162bc:	f04f 30ff 	mov.w	r0, #4294967295
 80162c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162c4:	463a      	mov	r2, r7
 80162c6:	6921      	ldr	r1, [r4, #16]
 80162c8:	f7fc fa1c 	bl	8012704 <memcpy>
 80162cc:	89a3      	ldrh	r3, [r4, #12]
 80162ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80162d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162d6:	81a3      	strh	r3, [r4, #12]
 80162d8:	6126      	str	r6, [r4, #16]
 80162da:	6165      	str	r5, [r4, #20]
 80162dc:	443e      	add	r6, r7
 80162de:	1bed      	subs	r5, r5, r7
 80162e0:	6026      	str	r6, [r4, #0]
 80162e2:	60a5      	str	r5, [r4, #8]
 80162e4:	464e      	mov	r6, r9
 80162e6:	454e      	cmp	r6, r9
 80162e8:	d900      	bls.n	80162ec <__ssputs_r+0x84>
 80162ea:	464e      	mov	r6, r9
 80162ec:	4632      	mov	r2, r6
 80162ee:	4641      	mov	r1, r8
 80162f0:	6820      	ldr	r0, [r4, #0]
 80162f2:	f000 f9d3 	bl	801669c <memmove>
 80162f6:	68a3      	ldr	r3, [r4, #8]
 80162f8:	1b9b      	subs	r3, r3, r6
 80162fa:	60a3      	str	r3, [r4, #8]
 80162fc:	6823      	ldr	r3, [r4, #0]
 80162fe:	441e      	add	r6, r3
 8016300:	6026      	str	r6, [r4, #0]
 8016302:	2000      	movs	r0, #0
 8016304:	e7dc      	b.n	80162c0 <__ssputs_r+0x58>
 8016306:	462a      	mov	r2, r5
 8016308:	f000 f9e3 	bl	80166d2 <_realloc_r>
 801630c:	4606      	mov	r6, r0
 801630e:	2800      	cmp	r0, #0
 8016310:	d1e2      	bne.n	80162d8 <__ssputs_r+0x70>
 8016312:	6921      	ldr	r1, [r4, #16]
 8016314:	4650      	mov	r0, sl
 8016316:	f7ff feff 	bl	8016118 <_free_r>
 801631a:	e7c8      	b.n	80162ae <__ssputs_r+0x46>

0801631c <_svfiprintf_r>:
 801631c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016320:	461d      	mov	r5, r3
 8016322:	898b      	ldrh	r3, [r1, #12]
 8016324:	061f      	lsls	r7, r3, #24
 8016326:	b09d      	sub	sp, #116	; 0x74
 8016328:	4680      	mov	r8, r0
 801632a:	460c      	mov	r4, r1
 801632c:	4616      	mov	r6, r2
 801632e:	d50f      	bpl.n	8016350 <_svfiprintf_r+0x34>
 8016330:	690b      	ldr	r3, [r1, #16]
 8016332:	b96b      	cbnz	r3, 8016350 <_svfiprintf_r+0x34>
 8016334:	2140      	movs	r1, #64	; 0x40
 8016336:	f7ff ff3d 	bl	80161b4 <_malloc_r>
 801633a:	6020      	str	r0, [r4, #0]
 801633c:	6120      	str	r0, [r4, #16]
 801633e:	b928      	cbnz	r0, 801634c <_svfiprintf_r+0x30>
 8016340:	230c      	movs	r3, #12
 8016342:	f8c8 3000 	str.w	r3, [r8]
 8016346:	f04f 30ff 	mov.w	r0, #4294967295
 801634a:	e0c8      	b.n	80164de <_svfiprintf_r+0x1c2>
 801634c:	2340      	movs	r3, #64	; 0x40
 801634e:	6163      	str	r3, [r4, #20]
 8016350:	2300      	movs	r3, #0
 8016352:	9309      	str	r3, [sp, #36]	; 0x24
 8016354:	2320      	movs	r3, #32
 8016356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801635a:	2330      	movs	r3, #48	; 0x30
 801635c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016360:	9503      	str	r5, [sp, #12]
 8016362:	f04f 0b01 	mov.w	fp, #1
 8016366:	4637      	mov	r7, r6
 8016368:	463d      	mov	r5, r7
 801636a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801636e:	b10b      	cbz	r3, 8016374 <_svfiprintf_r+0x58>
 8016370:	2b25      	cmp	r3, #37	; 0x25
 8016372:	d13e      	bne.n	80163f2 <_svfiprintf_r+0xd6>
 8016374:	ebb7 0a06 	subs.w	sl, r7, r6
 8016378:	d00b      	beq.n	8016392 <_svfiprintf_r+0x76>
 801637a:	4653      	mov	r3, sl
 801637c:	4632      	mov	r2, r6
 801637e:	4621      	mov	r1, r4
 8016380:	4640      	mov	r0, r8
 8016382:	f7ff ff71 	bl	8016268 <__ssputs_r>
 8016386:	3001      	adds	r0, #1
 8016388:	f000 80a4 	beq.w	80164d4 <_svfiprintf_r+0x1b8>
 801638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801638e:	4453      	add	r3, sl
 8016390:	9309      	str	r3, [sp, #36]	; 0x24
 8016392:	783b      	ldrb	r3, [r7, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	f000 809d 	beq.w	80164d4 <_svfiprintf_r+0x1b8>
 801639a:	2300      	movs	r3, #0
 801639c:	f04f 32ff 	mov.w	r2, #4294967295
 80163a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163a4:	9304      	str	r3, [sp, #16]
 80163a6:	9307      	str	r3, [sp, #28]
 80163a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80163ac:	931a      	str	r3, [sp, #104]	; 0x68
 80163ae:	462f      	mov	r7, r5
 80163b0:	2205      	movs	r2, #5
 80163b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80163b6:	4850      	ldr	r0, [pc, #320]	; (80164f8 <_svfiprintf_r+0x1dc>)
 80163b8:	f7e9 ff4a 	bl	8000250 <memchr>
 80163bc:	9b04      	ldr	r3, [sp, #16]
 80163be:	b9d0      	cbnz	r0, 80163f6 <_svfiprintf_r+0xda>
 80163c0:	06d9      	lsls	r1, r3, #27
 80163c2:	bf44      	itt	mi
 80163c4:	2220      	movmi	r2, #32
 80163c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80163ca:	071a      	lsls	r2, r3, #28
 80163cc:	bf44      	itt	mi
 80163ce:	222b      	movmi	r2, #43	; 0x2b
 80163d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80163d4:	782a      	ldrb	r2, [r5, #0]
 80163d6:	2a2a      	cmp	r2, #42	; 0x2a
 80163d8:	d015      	beq.n	8016406 <_svfiprintf_r+0xea>
 80163da:	9a07      	ldr	r2, [sp, #28]
 80163dc:	462f      	mov	r7, r5
 80163de:	2000      	movs	r0, #0
 80163e0:	250a      	movs	r5, #10
 80163e2:	4639      	mov	r1, r7
 80163e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80163e8:	3b30      	subs	r3, #48	; 0x30
 80163ea:	2b09      	cmp	r3, #9
 80163ec:	d94d      	bls.n	801648a <_svfiprintf_r+0x16e>
 80163ee:	b1b8      	cbz	r0, 8016420 <_svfiprintf_r+0x104>
 80163f0:	e00f      	b.n	8016412 <_svfiprintf_r+0xf6>
 80163f2:	462f      	mov	r7, r5
 80163f4:	e7b8      	b.n	8016368 <_svfiprintf_r+0x4c>
 80163f6:	4a40      	ldr	r2, [pc, #256]	; (80164f8 <_svfiprintf_r+0x1dc>)
 80163f8:	1a80      	subs	r0, r0, r2
 80163fa:	fa0b f000 	lsl.w	r0, fp, r0
 80163fe:	4318      	orrs	r0, r3
 8016400:	9004      	str	r0, [sp, #16]
 8016402:	463d      	mov	r5, r7
 8016404:	e7d3      	b.n	80163ae <_svfiprintf_r+0x92>
 8016406:	9a03      	ldr	r2, [sp, #12]
 8016408:	1d11      	adds	r1, r2, #4
 801640a:	6812      	ldr	r2, [r2, #0]
 801640c:	9103      	str	r1, [sp, #12]
 801640e:	2a00      	cmp	r2, #0
 8016410:	db01      	blt.n	8016416 <_svfiprintf_r+0xfa>
 8016412:	9207      	str	r2, [sp, #28]
 8016414:	e004      	b.n	8016420 <_svfiprintf_r+0x104>
 8016416:	4252      	negs	r2, r2
 8016418:	f043 0302 	orr.w	r3, r3, #2
 801641c:	9207      	str	r2, [sp, #28]
 801641e:	9304      	str	r3, [sp, #16]
 8016420:	783b      	ldrb	r3, [r7, #0]
 8016422:	2b2e      	cmp	r3, #46	; 0x2e
 8016424:	d10c      	bne.n	8016440 <_svfiprintf_r+0x124>
 8016426:	787b      	ldrb	r3, [r7, #1]
 8016428:	2b2a      	cmp	r3, #42	; 0x2a
 801642a:	d133      	bne.n	8016494 <_svfiprintf_r+0x178>
 801642c:	9b03      	ldr	r3, [sp, #12]
 801642e:	1d1a      	adds	r2, r3, #4
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	9203      	str	r2, [sp, #12]
 8016434:	2b00      	cmp	r3, #0
 8016436:	bfb8      	it	lt
 8016438:	f04f 33ff 	movlt.w	r3, #4294967295
 801643c:	3702      	adds	r7, #2
 801643e:	9305      	str	r3, [sp, #20]
 8016440:	4d2e      	ldr	r5, [pc, #184]	; (80164fc <_svfiprintf_r+0x1e0>)
 8016442:	7839      	ldrb	r1, [r7, #0]
 8016444:	2203      	movs	r2, #3
 8016446:	4628      	mov	r0, r5
 8016448:	f7e9 ff02 	bl	8000250 <memchr>
 801644c:	b138      	cbz	r0, 801645e <_svfiprintf_r+0x142>
 801644e:	2340      	movs	r3, #64	; 0x40
 8016450:	1b40      	subs	r0, r0, r5
 8016452:	fa03 f000 	lsl.w	r0, r3, r0
 8016456:	9b04      	ldr	r3, [sp, #16]
 8016458:	4303      	orrs	r3, r0
 801645a:	3701      	adds	r7, #1
 801645c:	9304      	str	r3, [sp, #16]
 801645e:	7839      	ldrb	r1, [r7, #0]
 8016460:	4827      	ldr	r0, [pc, #156]	; (8016500 <_svfiprintf_r+0x1e4>)
 8016462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016466:	2206      	movs	r2, #6
 8016468:	1c7e      	adds	r6, r7, #1
 801646a:	f7e9 fef1 	bl	8000250 <memchr>
 801646e:	2800      	cmp	r0, #0
 8016470:	d038      	beq.n	80164e4 <_svfiprintf_r+0x1c8>
 8016472:	4b24      	ldr	r3, [pc, #144]	; (8016504 <_svfiprintf_r+0x1e8>)
 8016474:	bb13      	cbnz	r3, 80164bc <_svfiprintf_r+0x1a0>
 8016476:	9b03      	ldr	r3, [sp, #12]
 8016478:	3307      	adds	r3, #7
 801647a:	f023 0307 	bic.w	r3, r3, #7
 801647e:	3308      	adds	r3, #8
 8016480:	9303      	str	r3, [sp, #12]
 8016482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016484:	444b      	add	r3, r9
 8016486:	9309      	str	r3, [sp, #36]	; 0x24
 8016488:	e76d      	b.n	8016366 <_svfiprintf_r+0x4a>
 801648a:	fb05 3202 	mla	r2, r5, r2, r3
 801648e:	2001      	movs	r0, #1
 8016490:	460f      	mov	r7, r1
 8016492:	e7a6      	b.n	80163e2 <_svfiprintf_r+0xc6>
 8016494:	2300      	movs	r3, #0
 8016496:	3701      	adds	r7, #1
 8016498:	9305      	str	r3, [sp, #20]
 801649a:	4619      	mov	r1, r3
 801649c:	250a      	movs	r5, #10
 801649e:	4638      	mov	r0, r7
 80164a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164a4:	3a30      	subs	r2, #48	; 0x30
 80164a6:	2a09      	cmp	r2, #9
 80164a8:	d903      	bls.n	80164b2 <_svfiprintf_r+0x196>
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d0c8      	beq.n	8016440 <_svfiprintf_r+0x124>
 80164ae:	9105      	str	r1, [sp, #20]
 80164b0:	e7c6      	b.n	8016440 <_svfiprintf_r+0x124>
 80164b2:	fb05 2101 	mla	r1, r5, r1, r2
 80164b6:	2301      	movs	r3, #1
 80164b8:	4607      	mov	r7, r0
 80164ba:	e7f0      	b.n	801649e <_svfiprintf_r+0x182>
 80164bc:	ab03      	add	r3, sp, #12
 80164be:	9300      	str	r3, [sp, #0]
 80164c0:	4622      	mov	r2, r4
 80164c2:	4b11      	ldr	r3, [pc, #68]	; (8016508 <_svfiprintf_r+0x1ec>)
 80164c4:	a904      	add	r1, sp, #16
 80164c6:	4640      	mov	r0, r8
 80164c8:	f7fc f9b6 	bl	8012838 <_printf_float>
 80164cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80164d0:	4681      	mov	r9, r0
 80164d2:	d1d6      	bne.n	8016482 <_svfiprintf_r+0x166>
 80164d4:	89a3      	ldrh	r3, [r4, #12]
 80164d6:	065b      	lsls	r3, r3, #25
 80164d8:	f53f af35 	bmi.w	8016346 <_svfiprintf_r+0x2a>
 80164dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164de:	b01d      	add	sp, #116	; 0x74
 80164e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164e4:	ab03      	add	r3, sp, #12
 80164e6:	9300      	str	r3, [sp, #0]
 80164e8:	4622      	mov	r2, r4
 80164ea:	4b07      	ldr	r3, [pc, #28]	; (8016508 <_svfiprintf_r+0x1ec>)
 80164ec:	a904      	add	r1, sp, #16
 80164ee:	4640      	mov	r0, r8
 80164f0:	f7fc fc44 	bl	8012d7c <_printf_i>
 80164f4:	e7ea      	b.n	80164cc <_svfiprintf_r+0x1b0>
 80164f6:	bf00      	nop
 80164f8:	080178c4 	.word	0x080178c4
 80164fc:	080178ca 	.word	0x080178ca
 8016500:	080178ce 	.word	0x080178ce
 8016504:	08012839 	.word	0x08012839
 8016508:	08016269 	.word	0x08016269

0801650c <_sbrk_r>:
 801650c:	b538      	push	{r3, r4, r5, lr}
 801650e:	4c06      	ldr	r4, [pc, #24]	; (8016528 <_sbrk_r+0x1c>)
 8016510:	2300      	movs	r3, #0
 8016512:	4605      	mov	r5, r0
 8016514:	4608      	mov	r0, r1
 8016516:	6023      	str	r3, [r4, #0]
 8016518:	f7f2 fb68 	bl	8008bec <_sbrk>
 801651c:	1c43      	adds	r3, r0, #1
 801651e:	d102      	bne.n	8016526 <_sbrk_r+0x1a>
 8016520:	6823      	ldr	r3, [r4, #0]
 8016522:	b103      	cbz	r3, 8016526 <_sbrk_r+0x1a>
 8016524:	602b      	str	r3, [r5, #0]
 8016526:	bd38      	pop	{r3, r4, r5, pc}
 8016528:	20030b78 	.word	0x20030b78

0801652c <__sread>:
 801652c:	b510      	push	{r4, lr}
 801652e:	460c      	mov	r4, r1
 8016530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016534:	f000 f8f4 	bl	8016720 <_read_r>
 8016538:	2800      	cmp	r0, #0
 801653a:	bfab      	itete	ge
 801653c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801653e:	89a3      	ldrhlt	r3, [r4, #12]
 8016540:	181b      	addge	r3, r3, r0
 8016542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016546:	bfac      	ite	ge
 8016548:	6563      	strge	r3, [r4, #84]	; 0x54
 801654a:	81a3      	strhlt	r3, [r4, #12]
 801654c:	bd10      	pop	{r4, pc}

0801654e <__swrite>:
 801654e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016552:	461f      	mov	r7, r3
 8016554:	898b      	ldrh	r3, [r1, #12]
 8016556:	05db      	lsls	r3, r3, #23
 8016558:	4605      	mov	r5, r0
 801655a:	460c      	mov	r4, r1
 801655c:	4616      	mov	r6, r2
 801655e:	d505      	bpl.n	801656c <__swrite+0x1e>
 8016560:	2302      	movs	r3, #2
 8016562:	2200      	movs	r2, #0
 8016564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016568:	f000 f886 	bl	8016678 <_lseek_r>
 801656c:	89a3      	ldrh	r3, [r4, #12]
 801656e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016576:	81a3      	strh	r3, [r4, #12]
 8016578:	4632      	mov	r2, r6
 801657a:	463b      	mov	r3, r7
 801657c:	4628      	mov	r0, r5
 801657e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016582:	f000 b835 	b.w	80165f0 <_write_r>

08016586 <__sseek>:
 8016586:	b510      	push	{r4, lr}
 8016588:	460c      	mov	r4, r1
 801658a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801658e:	f000 f873 	bl	8016678 <_lseek_r>
 8016592:	1c43      	adds	r3, r0, #1
 8016594:	89a3      	ldrh	r3, [r4, #12]
 8016596:	bf15      	itete	ne
 8016598:	6560      	strne	r0, [r4, #84]	; 0x54
 801659a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801659e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80165a2:	81a3      	strheq	r3, [r4, #12]
 80165a4:	bf18      	it	ne
 80165a6:	81a3      	strhne	r3, [r4, #12]
 80165a8:	bd10      	pop	{r4, pc}

080165aa <__sclose>:
 80165aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165ae:	f000 b831 	b.w	8016614 <_close_r>

080165b2 <strncmp>:
 80165b2:	b510      	push	{r4, lr}
 80165b4:	b16a      	cbz	r2, 80165d2 <strncmp+0x20>
 80165b6:	3901      	subs	r1, #1
 80165b8:	1884      	adds	r4, r0, r2
 80165ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 80165be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80165c2:	4293      	cmp	r3, r2
 80165c4:	d103      	bne.n	80165ce <strncmp+0x1c>
 80165c6:	42a0      	cmp	r0, r4
 80165c8:	d001      	beq.n	80165ce <strncmp+0x1c>
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d1f5      	bne.n	80165ba <strncmp+0x8>
 80165ce:	1a98      	subs	r0, r3, r2
 80165d0:	bd10      	pop	{r4, pc}
 80165d2:	4610      	mov	r0, r2
 80165d4:	e7fc      	b.n	80165d0 <strncmp+0x1e>

080165d6 <__ascii_wctomb>:
 80165d6:	b149      	cbz	r1, 80165ec <__ascii_wctomb+0x16>
 80165d8:	2aff      	cmp	r2, #255	; 0xff
 80165da:	bf85      	ittet	hi
 80165dc:	238a      	movhi	r3, #138	; 0x8a
 80165de:	6003      	strhi	r3, [r0, #0]
 80165e0:	700a      	strbls	r2, [r1, #0]
 80165e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80165e6:	bf98      	it	ls
 80165e8:	2001      	movls	r0, #1
 80165ea:	4770      	bx	lr
 80165ec:	4608      	mov	r0, r1
 80165ee:	4770      	bx	lr

080165f0 <_write_r>:
 80165f0:	b538      	push	{r3, r4, r5, lr}
 80165f2:	4c07      	ldr	r4, [pc, #28]	; (8016610 <_write_r+0x20>)
 80165f4:	4605      	mov	r5, r0
 80165f6:	4608      	mov	r0, r1
 80165f8:	4611      	mov	r1, r2
 80165fa:	2200      	movs	r2, #0
 80165fc:	6022      	str	r2, [r4, #0]
 80165fe:	461a      	mov	r2, r3
 8016600:	f7f2 faa3 	bl	8008b4a <_write>
 8016604:	1c43      	adds	r3, r0, #1
 8016606:	d102      	bne.n	801660e <_write_r+0x1e>
 8016608:	6823      	ldr	r3, [r4, #0]
 801660a:	b103      	cbz	r3, 801660e <_write_r+0x1e>
 801660c:	602b      	str	r3, [r5, #0]
 801660e:	bd38      	pop	{r3, r4, r5, pc}
 8016610:	20030b78 	.word	0x20030b78

08016614 <_close_r>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	4c06      	ldr	r4, [pc, #24]	; (8016630 <_close_r+0x1c>)
 8016618:	2300      	movs	r3, #0
 801661a:	4605      	mov	r5, r0
 801661c:	4608      	mov	r0, r1
 801661e:	6023      	str	r3, [r4, #0]
 8016620:	f7f2 faaf 	bl	8008b82 <_close>
 8016624:	1c43      	adds	r3, r0, #1
 8016626:	d102      	bne.n	801662e <_close_r+0x1a>
 8016628:	6823      	ldr	r3, [r4, #0]
 801662a:	b103      	cbz	r3, 801662e <_close_r+0x1a>
 801662c:	602b      	str	r3, [r5, #0]
 801662e:	bd38      	pop	{r3, r4, r5, pc}
 8016630:	20030b78 	.word	0x20030b78

08016634 <_fstat_r>:
 8016634:	b538      	push	{r3, r4, r5, lr}
 8016636:	4c07      	ldr	r4, [pc, #28]	; (8016654 <_fstat_r+0x20>)
 8016638:	2300      	movs	r3, #0
 801663a:	4605      	mov	r5, r0
 801663c:	4608      	mov	r0, r1
 801663e:	4611      	mov	r1, r2
 8016640:	6023      	str	r3, [r4, #0]
 8016642:	f7f2 faaa 	bl	8008b9a <_fstat>
 8016646:	1c43      	adds	r3, r0, #1
 8016648:	d102      	bne.n	8016650 <_fstat_r+0x1c>
 801664a:	6823      	ldr	r3, [r4, #0]
 801664c:	b103      	cbz	r3, 8016650 <_fstat_r+0x1c>
 801664e:	602b      	str	r3, [r5, #0]
 8016650:	bd38      	pop	{r3, r4, r5, pc}
 8016652:	bf00      	nop
 8016654:	20030b78 	.word	0x20030b78

08016658 <_isatty_r>:
 8016658:	b538      	push	{r3, r4, r5, lr}
 801665a:	4c06      	ldr	r4, [pc, #24]	; (8016674 <_isatty_r+0x1c>)
 801665c:	2300      	movs	r3, #0
 801665e:	4605      	mov	r5, r0
 8016660:	4608      	mov	r0, r1
 8016662:	6023      	str	r3, [r4, #0]
 8016664:	f7f2 faa9 	bl	8008bba <_isatty>
 8016668:	1c43      	adds	r3, r0, #1
 801666a:	d102      	bne.n	8016672 <_isatty_r+0x1a>
 801666c:	6823      	ldr	r3, [r4, #0]
 801666e:	b103      	cbz	r3, 8016672 <_isatty_r+0x1a>
 8016670:	602b      	str	r3, [r5, #0]
 8016672:	bd38      	pop	{r3, r4, r5, pc}
 8016674:	20030b78 	.word	0x20030b78

08016678 <_lseek_r>:
 8016678:	b538      	push	{r3, r4, r5, lr}
 801667a:	4c07      	ldr	r4, [pc, #28]	; (8016698 <_lseek_r+0x20>)
 801667c:	4605      	mov	r5, r0
 801667e:	4608      	mov	r0, r1
 8016680:	4611      	mov	r1, r2
 8016682:	2200      	movs	r2, #0
 8016684:	6022      	str	r2, [r4, #0]
 8016686:	461a      	mov	r2, r3
 8016688:	f7f2 faa2 	bl	8008bd0 <_lseek>
 801668c:	1c43      	adds	r3, r0, #1
 801668e:	d102      	bne.n	8016696 <_lseek_r+0x1e>
 8016690:	6823      	ldr	r3, [r4, #0]
 8016692:	b103      	cbz	r3, 8016696 <_lseek_r+0x1e>
 8016694:	602b      	str	r3, [r5, #0]
 8016696:	bd38      	pop	{r3, r4, r5, pc}
 8016698:	20030b78 	.word	0x20030b78

0801669c <memmove>:
 801669c:	4288      	cmp	r0, r1
 801669e:	b510      	push	{r4, lr}
 80166a0:	eb01 0302 	add.w	r3, r1, r2
 80166a4:	d807      	bhi.n	80166b6 <memmove+0x1a>
 80166a6:	1e42      	subs	r2, r0, #1
 80166a8:	4299      	cmp	r1, r3
 80166aa:	d00a      	beq.n	80166c2 <memmove+0x26>
 80166ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80166b4:	e7f8      	b.n	80166a8 <memmove+0xc>
 80166b6:	4283      	cmp	r3, r0
 80166b8:	d9f5      	bls.n	80166a6 <memmove+0xa>
 80166ba:	1881      	adds	r1, r0, r2
 80166bc:	1ad2      	subs	r2, r2, r3
 80166be:	42d3      	cmn	r3, r2
 80166c0:	d100      	bne.n	80166c4 <memmove+0x28>
 80166c2:	bd10      	pop	{r4, pc}
 80166c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80166c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80166cc:	e7f7      	b.n	80166be <memmove+0x22>

080166ce <__malloc_lock>:
 80166ce:	4770      	bx	lr

080166d0 <__malloc_unlock>:
 80166d0:	4770      	bx	lr

080166d2 <_realloc_r>:
 80166d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166d4:	4607      	mov	r7, r0
 80166d6:	4614      	mov	r4, r2
 80166d8:	460e      	mov	r6, r1
 80166da:	b921      	cbnz	r1, 80166e6 <_realloc_r+0x14>
 80166dc:	4611      	mov	r1, r2
 80166de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80166e2:	f7ff bd67 	b.w	80161b4 <_malloc_r>
 80166e6:	b922      	cbnz	r2, 80166f2 <_realloc_r+0x20>
 80166e8:	f7ff fd16 	bl	8016118 <_free_r>
 80166ec:	4625      	mov	r5, r4
 80166ee:	4628      	mov	r0, r5
 80166f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166f2:	f000 f827 	bl	8016744 <_malloc_usable_size_r>
 80166f6:	42a0      	cmp	r0, r4
 80166f8:	d20f      	bcs.n	801671a <_realloc_r+0x48>
 80166fa:	4621      	mov	r1, r4
 80166fc:	4638      	mov	r0, r7
 80166fe:	f7ff fd59 	bl	80161b4 <_malloc_r>
 8016702:	4605      	mov	r5, r0
 8016704:	2800      	cmp	r0, #0
 8016706:	d0f2      	beq.n	80166ee <_realloc_r+0x1c>
 8016708:	4631      	mov	r1, r6
 801670a:	4622      	mov	r2, r4
 801670c:	f7fb fffa 	bl	8012704 <memcpy>
 8016710:	4631      	mov	r1, r6
 8016712:	4638      	mov	r0, r7
 8016714:	f7ff fd00 	bl	8016118 <_free_r>
 8016718:	e7e9      	b.n	80166ee <_realloc_r+0x1c>
 801671a:	4635      	mov	r5, r6
 801671c:	e7e7      	b.n	80166ee <_realloc_r+0x1c>
	...

08016720 <_read_r>:
 8016720:	b538      	push	{r3, r4, r5, lr}
 8016722:	4c07      	ldr	r4, [pc, #28]	; (8016740 <_read_r+0x20>)
 8016724:	4605      	mov	r5, r0
 8016726:	4608      	mov	r0, r1
 8016728:	4611      	mov	r1, r2
 801672a:	2200      	movs	r2, #0
 801672c:	6022      	str	r2, [r4, #0]
 801672e:	461a      	mov	r2, r3
 8016730:	f7f2 f9ee 	bl	8008b10 <_read>
 8016734:	1c43      	adds	r3, r0, #1
 8016736:	d102      	bne.n	801673e <_read_r+0x1e>
 8016738:	6823      	ldr	r3, [r4, #0]
 801673a:	b103      	cbz	r3, 801673e <_read_r+0x1e>
 801673c:	602b      	str	r3, [r5, #0]
 801673e:	bd38      	pop	{r3, r4, r5, pc}
 8016740:	20030b78 	.word	0x20030b78

08016744 <_malloc_usable_size_r>:
 8016744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016748:	1f18      	subs	r0, r3, #4
 801674a:	2b00      	cmp	r3, #0
 801674c:	bfbc      	itt	lt
 801674e:	580b      	ldrlt	r3, [r1, r0]
 8016750:	18c0      	addlt	r0, r0, r3
 8016752:	4770      	bx	lr

08016754 <_init>:
 8016754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016756:	bf00      	nop
 8016758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801675a:	bc08      	pop	{r3}
 801675c:	469e      	mov	lr, r3
 801675e:	4770      	bx	lr

08016760 <_fini>:
 8016760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016762:	bf00      	nop
 8016764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016766:	bc08      	pop	{r3}
 8016768:	469e      	mov	lr, r3
 801676a:	4770      	bx	lr
