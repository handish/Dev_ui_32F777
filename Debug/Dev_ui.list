
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153bc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d8  080155c0  080155c0  000255c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016698  08016698  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08016698  08016698  00026698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080166a0  080166a0  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080166a0  080166a0  000266a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080166a4  080166a4  000266a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  080166a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000307bc  20000350  080169f8  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20030b0c  080169f8  00030b0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031acc  00000000  00000000  0003037e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052f5  00000000  00000000  00061e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a0  00000000  00000000  00067140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002058  00000000  00000000  000693e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000700c  00000000  00000000  0006b438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d4e0  00000000  00000000  00072444  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011b5c1  00000000  00000000  0008f924  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aaee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2e0  00000000  00000000  001aaf60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000350 	.word	0x20000350
 800021c:	00000000 	.word	0x00000000
 8000220:	080155a4 	.word	0x080155a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000354 	.word	0x20000354
 800023c:	080155a4 	.word	0x080155a4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f009 f9df 	bl	80099e4 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f009 f9da 	bl	80099e4 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f009 f9d5 	bl	80099e4 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f009 f9cf 	bl	80099e4 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f010 ff6c 	bl	8011554 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20028a38 	.word	0x20028a38
 8000694:	20028a40 	.word	0x20028a40

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f009 f99e 	bl	80099e4 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00b fcde 	bl	800c078 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f009 f98f 	bl	80099e4 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20028a40 	.word	0x20028a40

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f010 ff05 	bl	801156a <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f009 f909 	bl	80099e4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00b fc4d 	bl	800c078 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f009 f8fe 	bl	80099e4 <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00b fc36 	bl	800c078 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00b fc2b 	bl	800c078 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00b fc22 	bl	800c078 <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00b fc10 	bl	800c078 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00b fc05 	bl	800c078 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00b fbfc 	bl	800c078 <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f009 f885 	bl	80099e4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00b fbc9 	bl	800c078 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f009 f87a 	bl	80099e4 <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	2000036c 	.word	0x2000036c
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20028a40 	.word	0x20028a40
 8000918:	2000324b 	.word	0x2000324b

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20028a3a 	.word	0x20028a3a
 8000964:	20028a3c 	.word	0x20028a3c
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f010 fdf6 	bl	801156a <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000036c 	.word	0x2000036c

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20028a38 	.word	0x20028a38
 8000a3c:	2000036c 	.word	0x2000036c
 8000a40:	08015bc0 	.word	0x08015bc0
 8000a44:	08015bb8 	.word	0x08015bb8

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	2000036c 	.word	0x2000036c
 8000aec:	20028a38 	.word	0x20028a38
 8000af0:	08015bc0 	.word	0x08015bc0
 8000af4:	08015bb8 	.word	0x08015bb8

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	2000036c 	.word	0x2000036c
 8000cc4:	08015bc8 	.word	0x08015bc8
 8000cc8:	08015bd0 	.word	0x08015bd0
 8000ccc:	20028a38 	.word	0x20028a38

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	08015bd8 	.word	0x08015bd8
 8001154:	08015be0 	.word	0x08015be0
 8001158:	2000036c 	.word	0x2000036c
 800115c:	20028a38 	.word	0x20028a38

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20028a3a 	.word	0x20028a3a

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f006 f9c8 	bl	8008096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f9af 	bl	8002068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 ffe5 	bl	8002cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f000 ffa1 	bl	8002c54 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 fa51 	bl	80021b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fb2d 	bl	8002374 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 fba7 	bl	800246c <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fc3d 	bl	800259c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fc7b 	bl	800261c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fcb9 	bl	800269c <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fcf9 	bl	8002720 <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fd37 	bl	80027a0 <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fd5b 	bl	80027ec <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fd97 	bl	8002868 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fdd3 	bl	80028e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fe49 	bl	80029d4 <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 fec9 	bl	8002ad8 <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 fef7 	bl	8002b38 <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 ff25 	bl	8002b98 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 ff53 	bl	8002bf8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f971 	bl	8003038 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8001d56:	220c      	movs	r2, #12
 8001d58:	2100      	movs	r1, #0
 8001d5a:	48a3      	ldr	r0, [pc, #652]	; (8001fe8 <main+0x2ec>)
 8001d5c:	f00f fc05 	bl	801156a <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	49a1      	ldr	r1, [pc, #644]	; (8001fec <main+0x2f0>)
 8001d66:	48a2      	ldr	r0, [pc, #648]	; (8001ff0 <main+0x2f4>)
 8001d68:	f006 fb6a 	bl	8008440 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	49a0      	ldr	r1, [pc, #640]	; (8001ff4 <main+0x2f8>)
 8001d72:	48a1      	ldr	r0, [pc, #644]	; (8001ff8 <main+0x2fc>)
 8001d74:	f006 fb64 	bl	8008440 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	499f      	ldr	r1, [pc, #636]	; (8001ffc <main+0x300>)
 8001d7e:	48a0      	ldr	r0, [pc, #640]	; (8002000 <main+0x304>)
 8001d80:	f006 fb5e 	bl	8008440 <HAL_ADC_Start_DMA>
   int x=1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	607b      	str	r3, [r7, #4]



  configureLEDDriver();
 8001d88:	f001 fac0 	bl	800330c <configureLEDDriver>
    setErrorLED(4,OFF);
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2004      	movs	r0, #4
 8001d90:	f001 fb48 	bl	8003424 <setErrorLED>
    HAL_Delay(1000);
 8001d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d98:	f006 f9aa 	bl	80080f0 <HAL_Delay>
    setErrorLED(7,OFF);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2007      	movs	r0, #7
 8001da0:	f001 fb40 	bl	8003424 <setErrorLED>
    setErrorLED(8,ON);
 8001da4:	2101      	movs	r1, #1
 8001da6:	2008      	movs	r0, #8
 8001da8:	f001 fb3c 	bl	8003424 <setErrorLED>
    HAL_Delay(1000);
 8001dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db0:	f006 f99e 	bl	80080f0 <HAL_Delay>
    setErrorLED(8,OFF);
 8001db4:	2100      	movs	r1, #0
 8001db6:	2008      	movs	r0, #8
 8001db8:	f001 fb34 	bl	8003424 <setErrorLED>
    setErrorLED(9,ON);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	2009      	movs	r0, #9
 8001dc0:	f001 fb30 	bl	8003424 <setErrorLED>
    HAL_Delay(1000);
 8001dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc8:	f006 f992 	bl	80080f0 <HAL_Delay>
    setErrorLED(8,ON);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2008      	movs	r0, #8
 8001dd0:	f001 fb28 	bl	8003424 <setErrorLED>
    setErrorLED(9,ON);
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2009      	movs	r0, #9
 8001dd8:	f001 fb24 	bl	8003424 <setErrorLED>
    HAL_Delay(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de0:	f006 f986 	bl	80080f0 <HAL_Delay>
    setErrorLED(9,OFF);
 8001de4:	2100      	movs	r1, #0
 8001de6:	2009      	movs	r0, #9
 8001de8:	f001 fb1c 	bl	8003424 <setErrorLED>

    BTN0_ON;
 8001dec:	2201      	movs	r2, #1
 8001dee:	2104      	movs	r1, #4
 8001df0:	4884      	ldr	r0, [pc, #528]	; (8002004 <main+0x308>)
 8001df2:	f007 fdf7 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001df6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dfa:	f006 f979 	bl	80080f0 <HAL_Delay>
    BTN1_ON;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2108      	movs	r1, #8
 8001e02:	4880      	ldr	r0, [pc, #512]	; (8002004 <main+0x308>)
 8001e04:	f007 fdee 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e0c:	f006 f970 	bl	80080f0 <HAL_Delay>
    BTN2_ON;
 8001e10:	2201      	movs	r2, #1
 8001e12:	2110      	movs	r1, #16
 8001e14:	487b      	ldr	r0, [pc, #492]	; (8002004 <main+0x308>)
 8001e16:	f007 fde5 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e1e:	f006 f967 	bl	80080f0 <HAL_Delay>
    BTN3_ON;
 8001e22:	2201      	movs	r2, #1
 8001e24:	2120      	movs	r1, #32
 8001e26:	4877      	ldr	r0, [pc, #476]	; (8002004 <main+0x308>)
 8001e28:	f007 fddc 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e30:	f006 f95e 	bl	80080f0 <HAL_Delay>
    BTN4_ON;
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3a:	4872      	ldr	r0, [pc, #456]	; (8002004 <main+0x308>)
 8001e3c:	f007 fdd2 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e44:	f006 f954 	bl	80080f0 <HAL_Delay>
    BTN5_ON;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	486d      	ldr	r0, [pc, #436]	; (8002004 <main+0x308>)
 8001e50:	f007 fdc8 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e58:	f006 f94a 	bl	80080f0 <HAL_Delay>
    EDL_SW_ON;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e62:	4869      	ldr	r0, [pc, #420]	; (8002008 <main+0x30c>)
 8001e64:	f007 fdbe 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e6c:	f006 f940 	bl	80080f0 <HAL_Delay>
    EX_SW_ON;
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e76:	4864      	ldr	r0, [pc, #400]	; (8002008 <main+0x30c>)
 8001e78:	f007 fdb4 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e80:	f006 f936 	bl	80080f0 <HAL_Delay>
    BTN0_OFF;
 8001e84:	2200      	movs	r2, #0
 8001e86:	2104      	movs	r1, #4
 8001e88:	485e      	ldr	r0, [pc, #376]	; (8002004 <main+0x308>)
 8001e8a:	f007 fdab 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e92:	f006 f92d 	bl	80080f0 <HAL_Delay>
    BTN1_OFF;
 8001e96:	2200      	movs	r2, #0
 8001e98:	2108      	movs	r1, #8
 8001e9a:	485a      	ldr	r0, [pc, #360]	; (8002004 <main+0x308>)
 8001e9c:	f007 fda2 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ea0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ea4:	f006 f924 	bl	80080f0 <HAL_Delay>
    BTN2_OFF;
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2110      	movs	r1, #16
 8001eac:	4855      	ldr	r0, [pc, #340]	; (8002004 <main+0x308>)
 8001eae:	f007 fd99 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001eb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001eb6:	f006 f91b 	bl	80080f0 <HAL_Delay>
    BTN3_OFF;
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4851      	ldr	r0, [pc, #324]	; (8002004 <main+0x308>)
 8001ec0:	f007 fd90 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ec4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ec8:	f006 f912 	bl	80080f0 <HAL_Delay>
    BTN4_OFF;
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	484c      	ldr	r0, [pc, #304]	; (8002004 <main+0x308>)
 8001ed4:	f007 fd86 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ed8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001edc:	f006 f908 	bl	80080f0 <HAL_Delay>
    BTN5_OFF;
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee6:	4847      	ldr	r0, [pc, #284]	; (8002004 <main+0x308>)
 8001ee8:	f007 fd7c 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001eec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ef0:	f006 f8fe 	bl	80080f0 <HAL_Delay>
    EDL_SW_OFF;
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efa:	4843      	ldr	r0, [pc, #268]	; (8002008 <main+0x30c>)
 8001efc:	f007 fd72 	bl	80099e4 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f04:	f006 f8f4 	bl	80080f0 <HAL_Delay>
    EX_SW_OFF;
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f0e:	483e      	ldr	r0, [pc, #248]	; (8002008 <main+0x30c>)
 8001f10:	f007 fd68 	bl	80099e4 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f14:	f00c fbde 	bl	800e6d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001f18:	4a3c      	ldr	r2, [pc, #240]	; (800200c <main+0x310>)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	483c      	ldr	r0, [pc, #240]	; (8002010 <main+0x314>)
 8001f1e:	f00c fc43 	bl	800e7a8 <osThreadNew>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <main+0x318>)
 8001f26:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001f28:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <main+0x31c>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	483b      	ldr	r0, [pc, #236]	; (800201c <main+0x320>)
 8001f2e:	f00c fc3b 	bl	800e7a8 <osThreadNew>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <main+0x324>)
 8001f36:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001f38:	4a3a      	ldr	r2, [pc, #232]	; (8002024 <main+0x328>)
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	483a      	ldr	r0, [pc, #232]	; (8002028 <main+0x32c>)
 8001f3e:	f00c fc33 	bl	800e7a8 <osThreadNew>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b39      	ldr	r3, [pc, #228]	; (800202c <main+0x330>)
 8001f46:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001f48:	4a39      	ldr	r2, [pc, #228]	; (8002030 <main+0x334>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4839      	ldr	r0, [pc, #228]	; (8002034 <main+0x338>)
 8001f4e:	f00c fc2b 	bl	800e7a8 <osThreadNew>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <main+0x33c>)
 8001f56:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001f58:	4a38      	ldr	r2, [pc, #224]	; (800203c <main+0x340>)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4838      	ldr	r0, [pc, #224]	; (8002040 <main+0x344>)
 8001f5e:	f00c fc23 	bl	800e7a8 <osThreadNew>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b37      	ldr	r3, [pc, #220]	; (8002044 <main+0x348>)
 8001f66:	601a      	str	r2, [r3, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 8001f68:	4a37      	ldr	r2, [pc, #220]	; (8002048 <main+0x34c>)
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4837      	ldr	r0, [pc, #220]	; (800204c <main+0x350>)
 8001f6e:	f00c fc1b 	bl	800e7a8 <osThreadNew>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <main+0x354>)
 8001f76:	601a      	str	r2, [r3, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 8001f78:	4a36      	ldr	r2, [pc, #216]	; (8002054 <main+0x358>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4836      	ldr	r0, [pc, #216]	; (8002058 <main+0x35c>)
 8001f7e:	f00c fc13 	bl	800e7a8 <osThreadNew>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b35      	ldr	r3, [pc, #212]	; (800205c <main+0x360>)
 8001f86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f88:	f00c fbd8 	bl	800e73c <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8001f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f90:	f006 f8ae 	bl	80080f0 <HAL_Delay>
	  if (!x) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d112      	bne.n	8001fc0 <main+0x2c4>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa0:	482f      	ldr	r0, [pc, #188]	; (8002060 <main+0x364>)
 8001fa2:	f007 fd1f 	bl	80099e4 <HAL_GPIO_WritePin>
		  x=1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2110      	movs	r1, #16
 8001fae:	482d      	ldr	r0, [pc, #180]	; (8002064 <main+0x368>)
 8001fb0:	f007 fd18 	bl	80099e4 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	482a      	ldr	r0, [pc, #168]	; (8002064 <main+0x368>)
 8001fba:	f007 fd13 	bl	80099e4 <HAL_GPIO_WritePin>
 8001fbe:	e7e5      	b.n	8001f8c <main+0x290>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc6:	4826      	ldr	r0, [pc, #152]	; (8002060 <main+0x364>)
 8001fc8:	f007 fd0c 	bl	80099e4 <HAL_GPIO_WritePin>
		  x=0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	4823      	ldr	r0, [pc, #140]	; (8002064 <main+0x368>)
 8001fd6:	f007 fd05 	bl	80099e4 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2110      	movs	r1, #16
 8001fde:	4821      	ldr	r0, [pc, #132]	; (8002064 <main+0x368>)
 8001fe0:	f007 fd00 	bl	80099e4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001fe4:	e7d2      	b.n	8001f8c <main+0x290>
 8001fe6:	bf00      	nop
 8001fe8:	2002e1c4 	.word	0x2002e1c4
 8001fec:	200291f8 	.word	0x200291f8
 8001ff0:	2002b98c 	.word	0x2002b98c
 8001ff4:	2002e258 	.word	0x2002e258
 8001ff8:	20028c70 	.word	0x20028c70
 8001ffc:	2002bab4 	.word	0x2002bab4
 8002000:	2002b9d8 	.word	0x2002b9d8
 8002004:	40021400 	.word	0x40021400
 8002008:	40020400 	.word	0x40020400
 800200c:	08015be8 	.word	0x08015be8
 8002010:	08003ee5 	.word	0x08003ee5
 8002014:	2002e254 	.word	0x2002e254
 8002018:	08015c0c 	.word	0x08015c0c
 800201c:	08003f05 	.word	0x08003f05
 8002020:	20030a2c 	.word	0x20030a2c
 8002024:	08015c30 	.word	0x08015c30
 8002028:	08003f85 	.word	0x08003f85
 800202c:	20030a28 	.word	0x20030a28
 8002030:	08015c54 	.word	0x08015c54
 8002034:	0800409d 	.word	0x0800409d
 8002038:	2002b9d4 	.word	0x2002b9d4
 800203c:	08015c78 	.word	0x08015c78
 8002040:	080041c9 	.word	0x080041c9
 8002044:	2002bab0 	.word	0x2002bab0
 8002048:	08015c9c 	.word	0x08015c9c
 800204c:	08004331 	.word	0x08004331
 8002050:	20028c60 	.word	0x20028c60
 8002054:	08015cc0 	.word	0x08015cc0
 8002058:	08004379 	.word	0x08004379
 800205c:	2002e1d0 	.word	0x2002e1d0
 8002060:	40022000 	.word	0x40022000
 8002064:	40021000 	.word	0x40021000

08002068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0b8      	sub	sp, #224	; 0xe0
 800206c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002072:	2234      	movs	r2, #52	; 0x34
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f00f fa77 	bl	801156a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800207c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	2290      	movs	r2, #144	; 0x90
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f00f fa68 	bl	801156a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800209a:	f008 fdcb 	bl	800ac34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <SystemClock_Config+0x144>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a42      	ldr	r2, [pc, #264]	; (80021ac <SystemClock_Config+0x144>)
 80020a4:	f023 0318 	bic.w	r3, r3, #24
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b40      	ldr	r3, [pc, #256]	; (80021ac <SystemClock_Config+0x144>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a3f      	ldr	r2, [pc, #252]	; (80021ac <SystemClock_Config+0x144>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <SystemClock_Config+0x144>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <SystemClock_Config+0x148>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020ca:	4a39      	ldr	r2, [pc, #228]	; (80021b0 <SystemClock_Config+0x148>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <SystemClock_Config+0x148>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80020de:	2305      	movs	r3, #5
 80020e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002100:	230f      	movs	r3, #15
 8002102:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002106:	2390      	movs	r3, #144	; 0x90
 8002108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002112:	2305      	movs	r3, #5
 8002114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002118:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800211c:	4618      	mov	r0, r3
 800211e:	f008 fd99 	bl	800ac54 <HAL_RCC_OscConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002128:	f002 fa40 	bl	80045ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212c:	230f      	movs	r3, #15
 800212e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800213e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800214e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002152:	2103      	movs	r1, #3
 8002154:	4618      	mov	r0, r3
 8002156:	f009 f82b 	bl	800b1b0 <HAL_RCC_ClockConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002160:	f002 fa24 	bl	80045ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <SystemClock_Config+0x14c>)
 8002166:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800216e:	2300      	movs	r3, #0
 8002170:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002172:	2300      	movs	r3, #0
 8002174:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002176:	2300      	movs	r3, #0
 8002178:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800217a:	2300      	movs	r3, #0
 800217c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800217e:	2300      	movs	r3, #0
 8002180:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002182:	2300      	movs	r3, #0
 8002184:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002186:	2300      	movs	r3, #0
 8002188:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4618      	mov	r0, r3
 8002196:	f009 fa0f 	bl	800b5b8 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80021a0:	f002 fa04 	bl	80045ac <Error_Handler>
  }
}
 80021a4:	bf00      	nop
 80021a6:	37e0      	adds	r7, #224	; 0xe0
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40007000 	.word	0x40007000
 80021b4:	0023d620 	.word	0x0023d620

080021b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021be:	463b      	mov	r3, r7
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80021cc:	4a67      	ldr	r2, [pc, #412]	; (800236c <MX_ADC1_Init+0x1b4>)
 80021ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021d0:	4b65      	ldr	r3, [pc, #404]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80021d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021d8:	4b63      	ldr	r3, [pc, #396]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021de:	4b62      	ldr	r3, [pc, #392]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80021e4:	4b60      	ldr	r3, [pc, #384]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021f2:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021f8:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80021fa:	4a5d      	ldr	r2, [pc, #372]	; (8002370 <MX_ADC1_Init+0x1b8>)
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021fe:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <MX_ADC1_Init+0x1b0>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8002204:	4b58      	ldr	r3, [pc, #352]	; (8002368 <MX_ADC1_Init+0x1b0>)
 8002206:	220b      	movs	r2, #11
 8002208:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <MX_ADC1_Init+0x1b0>)
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002212:	4b55      	ldr	r3, [pc, #340]	; (8002368 <MX_ADC1_Init+0x1b0>)
 8002214:	2201      	movs	r2, #1
 8002216:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002218:	4853      	ldr	r0, [pc, #332]	; (8002368 <MX_ADC1_Init+0x1b0>)
 800221a:	f005 ff8b 	bl	8008134 <HAL_ADC_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002224:	f002 f9c2 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002228:	2303      	movs	r3, #3
 800222a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800222c:	2301      	movs	r3, #1
 800222e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002230:	2307      	movs	r3, #7
 8002232:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002234:	463b      	mov	r3, r7
 8002236:	4619      	mov	r1, r3
 8002238:	484b      	ldr	r0, [pc, #300]	; (8002368 <MX_ADC1_Init+0x1b0>)
 800223a:	f006 fa57 	bl	80086ec <HAL_ADC_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002244:	f002 f9b2 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002248:	2304      	movs	r3, #4
 800224a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800224c:	2302      	movs	r3, #2
 800224e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	4619      	mov	r1, r3
 8002254:	4844      	ldr	r0, [pc, #272]	; (8002368 <MX_ADC1_Init+0x1b0>)
 8002256:	f006 fa49 	bl	80086ec <HAL_ADC_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002260:	f002 f9a4 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002264:	2305      	movs	r3, #5
 8002266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002268:	2303      	movs	r3, #3
 800226a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800226c:	463b      	mov	r3, r7
 800226e:	4619      	mov	r1, r3
 8002270:	483d      	ldr	r0, [pc, #244]	; (8002368 <MX_ADC1_Init+0x1b0>)
 8002272:	f006 fa3b 	bl	80086ec <HAL_ADC_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800227c:	f002 f996 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002280:	2306      	movs	r3, #6
 8002282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002284:	2304      	movs	r3, #4
 8002286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002288:	463b      	mov	r3, r7
 800228a:	4619      	mov	r1, r3
 800228c:	4836      	ldr	r0, [pc, #216]	; (8002368 <MX_ADC1_Init+0x1b0>)
 800228e:	f006 fa2d 	bl	80086ec <HAL_ADC_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002298:	f002 f988 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800229c:	2307      	movs	r3, #7
 800229e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80022a0:	2305      	movs	r3, #5
 80022a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022a4:	463b      	mov	r3, r7
 80022a6:	4619      	mov	r1, r3
 80022a8:	482f      	ldr	r0, [pc, #188]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80022aa:	f006 fa1f 	bl	80086ec <HAL_ADC_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80022b4:	f002 f97a 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80022b8:	2308      	movs	r3, #8
 80022ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80022bc:	2306      	movs	r3, #6
 80022be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	4619      	mov	r1, r3
 80022c4:	4828      	ldr	r0, [pc, #160]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80022c6:	f006 fa11 	bl	80086ec <HAL_ADC_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80022d0:	f002 f96c 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022d4:	2309      	movs	r3, #9
 80022d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80022d8:	2307      	movs	r3, #7
 80022da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022dc:	463b      	mov	r3, r7
 80022de:	4619      	mov	r1, r3
 80022e0:	4821      	ldr	r0, [pc, #132]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80022e2:	f006 fa03 	bl	80086ec <HAL_ADC_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80022ec:	f002 f95e 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80022f0:	230a      	movs	r3, #10
 80022f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80022f4:	2308      	movs	r3, #8
 80022f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	481a      	ldr	r0, [pc, #104]	; (8002368 <MX_ADC1_Init+0x1b0>)
 80022fe:	f006 f9f5 	bl	80086ec <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002308:	f002 f950 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800230c:	230b      	movs	r3, #11
 800230e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002310:	2309      	movs	r3, #9
 8002312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	4619      	mov	r1, r3
 8002318:	4813      	ldr	r0, [pc, #76]	; (8002368 <MX_ADC1_Init+0x1b0>)
 800231a:	f006 f9e7 	bl	80086ec <HAL_ADC_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002324:	f002 f942 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002328:	230c      	movs	r3, #12
 800232a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800232c:	230a      	movs	r3, #10
 800232e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002330:	463b      	mov	r3, r7
 8002332:	4619      	mov	r1, r3
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <MX_ADC1_Init+0x1b0>)
 8002336:	f006 f9d9 	bl	80086ec <HAL_ADC_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002340:	f002 f934 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002344:	230d      	movs	r3, #13
 8002346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002348:	230b      	movs	r3, #11
 800234a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_ADC1_Init+0x1b0>)
 8002352:	f006 f9cb 	bl	80086ec <HAL_ADC_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800235c:	f002 f926 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2002b98c 	.word	0x2002b98c
 800236c:	40012000 	.word	0x40012000
 8002370:	0f000001 	.word	0x0f000001

08002374 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800237a:	463b      	mov	r3, r7
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002386:	4b36      	ldr	r3, [pc, #216]	; (8002460 <MX_ADC2_Init+0xec>)
 8002388:	4a36      	ldr	r2, [pc, #216]	; (8002464 <MX_ADC2_Init+0xf0>)
 800238a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <MX_ADC2_Init+0xec>)
 800238e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002392:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002394:	4b32      	ldr	r3, [pc, #200]	; (8002460 <MX_ADC2_Init+0xec>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <MX_ADC2_Init+0xec>)
 800239c:	2201      	movs	r2, #1
 800239e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80023a0:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <MX_ADC2_Init+0xec>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <MX_ADC2_Init+0xec>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <MX_ADC2_Init+0xec>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <MX_ADC2_Init+0xec>)
 80023b6:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <MX_ADC2_Init+0xf4>)
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <MX_ADC2_Init+0xec>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <MX_ADC2_Init+0xec>)
 80023c2:	2204      	movs	r2, #4
 80023c4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <MX_ADC2_Init+0xec>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <MX_ADC2_Init+0xec>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023d4:	4822      	ldr	r0, [pc, #136]	; (8002460 <MX_ADC2_Init+0xec>)
 80023d6:	f005 fead 	bl	8008134 <HAL_ADC_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80023e0:	f002 f8e4 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80023ec:	2307      	movs	r3, #7
 80023ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023f0:	463b      	mov	r3, r7
 80023f2:	4619      	mov	r1, r3
 80023f4:	481a      	ldr	r0, [pc, #104]	; (8002460 <MX_ADC2_Init+0xec>)
 80023f6:	f006 f979 	bl	80086ec <HAL_ADC_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002400:	f002 f8d4 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002404:	2301      	movs	r3, #1
 8002406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002408:	2302      	movs	r3, #2
 800240a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	4813      	ldr	r0, [pc, #76]	; (8002460 <MX_ADC2_Init+0xec>)
 8002412:	f006 f96b 	bl	80086ec <HAL_ADC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800241c:	f002 f8c6 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002420:	230e      	movs	r3, #14
 8002422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002424:	2303      	movs	r3, #3
 8002426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002428:	463b      	mov	r3, r7
 800242a:	4619      	mov	r1, r3
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <MX_ADC2_Init+0xec>)
 800242e:	f006 f95d 	bl	80086ec <HAL_ADC_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002438:	f002 f8b8 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800243c:	230f      	movs	r3, #15
 800243e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002440:	2304      	movs	r3, #4
 8002442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002444:	463b      	mov	r3, r7
 8002446:	4619      	mov	r1, r3
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_ADC2_Init+0xec>)
 800244a:	f006 f94f 	bl	80086ec <HAL_ADC_ConfigChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002454:	f002 f8aa 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20028c70 	.word	0x20028c70
 8002464:	40012100 	.word	0x40012100
 8002468:	0f000001 	.word	0x0f000001

0800246c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002472:	463b      	mov	r3, r7
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800247e:	4b44      	ldr	r3, [pc, #272]	; (8002590 <MX_ADC3_Init+0x124>)
 8002480:	4a44      	ldr	r2, [pc, #272]	; (8002594 <MX_ADC3_Init+0x128>)
 8002482:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002484:	4b42      	ldr	r3, [pc, #264]	; (8002590 <MX_ADC3_Init+0x124>)
 8002486:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800248a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800248c:	4b40      	ldr	r3, [pc, #256]	; (8002590 <MX_ADC3_Init+0x124>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <MX_ADC3_Init+0x124>)
 8002494:	2201      	movs	r2, #1
 8002496:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <MX_ADC3_Init+0x124>)
 800249a:	2201      	movs	r2, #1
 800249c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800249e:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <MX_ADC3_Init+0x124>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <MX_ADC3_Init+0x124>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <MX_ADC3_Init+0x124>)
 80024ae:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <MX_ADC3_Init+0x12c>)
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <MX_ADC3_Init+0x124>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <MX_ADC3_Init+0x124>)
 80024ba:	2206      	movs	r2, #6
 80024bc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <MX_ADC3_Init+0x124>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024c6:	4b32      	ldr	r3, [pc, #200]	; (8002590 <MX_ADC3_Init+0x124>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80024cc:	4830      	ldr	r0, [pc, #192]	; (8002590 <MX_ADC3_Init+0x124>)
 80024ce:	f005 fe31 	bl	8008134 <HAL_ADC_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80024d8:	f002 f868 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024dc:	2302      	movs	r3, #2
 80024de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024e4:	2307      	movs	r3, #7
 80024e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	4619      	mov	r1, r3
 80024ec:	4828      	ldr	r0, [pc, #160]	; (8002590 <MX_ADC3_Init+0x124>)
 80024ee:	f006 f8fd 	bl	80086ec <HAL_ADC_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80024f8:	f002 f858 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80024fc:	2304      	movs	r3, #4
 80024fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002500:	2302      	movs	r3, #2
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4821      	ldr	r0, [pc, #132]	; (8002590 <MX_ADC3_Init+0x124>)
 800250a:	f006 f8ef 	bl	80086ec <HAL_ADC_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8002514:	f002 f84a 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002518:	2305      	movs	r3, #5
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800251c:	2303      	movs	r3, #3
 800251e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	481a      	ldr	r0, [pc, #104]	; (8002590 <MX_ADC3_Init+0x124>)
 8002526:	f006 f8e1 	bl	80086ec <HAL_ADC_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002530:	f002 f83c 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002534:	2306      	movs	r3, #6
 8002536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002538:	2304      	movs	r3, #4
 800253a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	4813      	ldr	r0, [pc, #76]	; (8002590 <MX_ADC3_Init+0x124>)
 8002542:	f006 f8d3 	bl	80086ec <HAL_ADC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800254c:	f002 f82e 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002550:	2307      	movs	r3, #7
 8002552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002554:	2305      	movs	r3, #5
 8002556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <MX_ADC3_Init+0x124>)
 800255e:	f006 f8c5 	bl	80086ec <HAL_ADC_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002568:	f002 f820 	bl	80045ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800256c:	2308      	movs	r3, #8
 800256e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002570:	2306      	movs	r3, #6
 8002572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002574:	463b      	mov	r3, r7
 8002576:	4619      	mov	r1, r3
 8002578:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_ADC3_Init+0x124>)
 800257a:	f006 f8b7 	bl	80086ec <HAL_ADC_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8002584:	f002 f812 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	2002b9d8 	.word	0x2002b9d8
 8002594:	40012200 	.word	0x40012200
 8002598:	0f000001 	.word	0x0f000001

0800259c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <MX_I2C1_Init+0x74>)
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <MX_I2C1_Init+0x78>)
 80025a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <MX_I2C1_Init+0x74>)
 80025a8:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <MX_I2C1_Init+0x7c>)
 80025aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025ac:	4b18      	ldr	r3, [pc, #96]	; (8002610 <MX_I2C1_Init+0x74>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <MX_I2C1_Init+0x74>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <MX_I2C1_Init+0x74>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_I2C1_Init+0x74>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MX_I2C1_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_I2C1_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_I2C1_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <MX_I2C1_Init+0x74>)
 80025d8:	f007 fa5c 	bl	8009a94 <HAL_I2C_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025e2:	f001 ffe3 	bl	80045ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025e6:	2100      	movs	r1, #0
 80025e8:	4809      	ldr	r0, [pc, #36]	; (8002610 <MX_I2C1_Init+0x74>)
 80025ea:	f008 f923 	bl	800a834 <HAL_I2CEx_ConfigAnalogFilter>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025f4:	f001 ffda 	bl	80045ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025f8:	2100      	movs	r1, #0
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_I2C1_Init+0x74>)
 80025fc:	f008 f965 	bl	800a8ca <HAL_I2CEx_ConfigDigitalFilter>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002606:	f001 ffd1 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20028cb8 	.word	0x20028cb8
 8002614:	40005400 	.word	0x40005400
 8002618:	007074af 	.word	0x007074af

0800261c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <MX_I2C2_Init+0x74>)
 8002622:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <MX_I2C2_Init+0x78>)
 8002624:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_I2C2_Init+0x74>)
 8002628:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <MX_I2C2_Init+0x7c>)
 800262a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <MX_I2C2_Init+0x74>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_I2C2_Init+0x74>)
 8002634:	2201      	movs	r2, #1
 8002636:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <MX_I2C2_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_I2C2_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <MX_I2C2_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_I2C2_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <MX_I2C2_Init+0x74>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002656:	480e      	ldr	r0, [pc, #56]	; (8002690 <MX_I2C2_Init+0x74>)
 8002658:	f007 fa1c 	bl	8009a94 <HAL_I2C_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002662:	f001 ffa3 	bl	80045ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002666:	2100      	movs	r1, #0
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <MX_I2C2_Init+0x74>)
 800266a:	f008 f8e3 	bl	800a834 <HAL_I2CEx_ConfigAnalogFilter>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002674:	f001 ff9a 	bl	80045ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002678:	2100      	movs	r1, #0
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_I2C2_Init+0x74>)
 800267c:	f008 f925 	bl	800a8ca <HAL_I2CEx_ConfigDigitalFilter>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002686:	f001 ff91 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20029108 	.word	0x20029108
 8002694:	40005800 	.word	0x40005800
 8002698:	007074af 	.word	0x007074af

0800269c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <MX_I2C3_Init+0x78>)
 80026a2:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <MX_I2C3_Init+0x7c>)
 80026a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <MX_I2C3_Init+0x78>)
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <MX_I2C3_Init+0x80>)
 80026aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <MX_I2C3_Init+0x78>)
 80026ae:	2298      	movs	r2, #152	; 0x98
 80026b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <MX_I2C3_Init+0x78>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <MX_I2C3_Init+0x78>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_I2C3_Init+0x78>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <MX_I2C3_Init+0x78>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_I2C3_Init+0x78>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <MX_I2C3_Init+0x78>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026d6:	480f      	ldr	r0, [pc, #60]	; (8002714 <MX_I2C3_Init+0x78>)
 80026d8:	f007 f9dc 	bl	8009a94 <HAL_I2C_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026e2:	f001 ff63 	bl	80045ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026e6:	2100      	movs	r1, #0
 80026e8:	480a      	ldr	r0, [pc, #40]	; (8002714 <MX_I2C3_Init+0x78>)
 80026ea:	f008 f8a3 	bl	800a834 <HAL_I2CEx_ConfigAnalogFilter>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80026f4:	f001 ff5a 	bl	80045ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026f8:	2100      	movs	r1, #0
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <MX_I2C3_Init+0x78>)
 80026fc:	f008 f8e5 	bl	800a8ca <HAL_I2CEx_ConfigDigitalFilter>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002706:	f001 ff51 	bl	80045ac <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 800270a:	2004      	movs	r0, #4
 800270c:	f008 f92a 	bl	800a964 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20028aa4 	.word	0x20028aa4
 8002718:	40005c00 	.word	0x40005c00
 800271c:	100029fe 	.word	0x100029fe

08002720 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <MX_I2C4_Init+0x74>)
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <MX_I2C4_Init+0x78>)
 8002728:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <MX_I2C4_Init+0x74>)
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <MX_I2C4_Init+0x7c>)
 800272e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <MX_I2C4_Init+0x74>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <MX_I2C4_Init+0x74>)
 8002738:	2201      	movs	r2, #1
 800273a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_I2C4_Init+0x74>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <MX_I2C4_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <MX_I2C4_Init+0x74>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_I2C4_Init+0x74>)
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <MX_I2C4_Init+0x74>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800275a:	480e      	ldr	r0, [pc, #56]	; (8002794 <MX_I2C4_Init+0x74>)
 800275c:	f007 f99a 	bl	8009a94 <HAL_I2C_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002766:	f001 ff21 	bl	80045ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800276a:	2100      	movs	r1, #0
 800276c:	4809      	ldr	r0, [pc, #36]	; (8002794 <MX_I2C4_Init+0x74>)
 800276e:	f008 f861 	bl	800a834 <HAL_I2CEx_ConfigAnalogFilter>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002778:	f001 ff18 	bl	80045ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800277c:	2100      	movs	r1, #0
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <MX_I2C4_Init+0x74>)
 8002780:	f008 f8a3 	bl	800a8ca <HAL_I2CEx_ConfigDigitalFilter>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800278a:	f001 ff0f 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20028af0 	.word	0x20028af0
 8002798:	40006000 	.word	0x40006000
 800279c:	007074af 	.word	0x007074af

080027a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <MX_RTC_Init+0x44>)
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <MX_RTC_Init+0x48>)
 80027a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <MX_RTC_Init+0x44>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <MX_RTC_Init+0x44>)
 80027b2:	227f      	movs	r2, #127	; 0x7f
 80027b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <MX_RTC_Init+0x44>)
 80027b8:	22ff      	movs	r2, #255	; 0xff
 80027ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <MX_RTC_Init+0x44>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <MX_RTC_Init+0x44>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <MX_RTC_Init+0x44>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <MX_RTC_Init+0x44>)
 80027d0:	f009 fb18 	bl	800be04 <HAL_RTC_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80027da:	f001 fee7 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2002ba90 	.word	0x2002ba90
 80027e8:	40002800 	.word	0x40002800

080027ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <MX_SPI4_Init+0x74>)
 80027f2:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <MX_SPI4_Init+0x78>)
 80027f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_SPI4_Init+0x74>)
 80027f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_SPI4_Init+0x74>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_SPI4_Init+0x74>)
 8002806:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800280a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_SPI4_Init+0x74>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <MX_SPI4_Init+0x74>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_SPI4_Init+0x74>)
 800281a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_SPI4_Init+0x74>)
 8002822:	2210      	movs	r2, #16
 8002824:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_SPI4_Init+0x74>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_SPI4_Init+0x74>)
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <MX_SPI4_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_SPI4_Init+0x74>)
 800283a:	2207      	movs	r2, #7
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <MX_SPI4_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_SPI4_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_SPI4_Init+0x74>)
 800284c:	f009 fb82 	bl	800bf54 <HAL_SPI_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002856:	f001 fea9 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20028a40 	.word	0x20028a40
 8002864:	40013400 	.word	0x40013400

08002868 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <MX_SPI5_Init+0x74>)
 800286e:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <MX_SPI5_Init+0x78>)
 8002870:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MX_SPI5_Init+0x74>)
 8002874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002878:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <MX_SPI5_Init+0x74>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002880:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_SPI5_Init+0x74>)
 8002882:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002886:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <MX_SPI5_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <MX_SPI5_Init+0x74>)
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_SPI5_Init+0x74>)
 8002896:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800289a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <MX_SPI5_Init+0x74>)
 800289e:	2218      	movs	r2, #24
 80028a0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_SPI5_Init+0x74>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_SPI5_Init+0x74>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <MX_SPI5_Init+0x74>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_SPI5_Init+0x74>)
 80028b6:	2207      	movs	r2, #7
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <MX_SPI5_Init+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_SPI5_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <MX_SPI5_Init+0x74>)
 80028c8:	f009 fb44 	bl	800bf54 <HAL_SPI_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80028d2:	f001 fe6b 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20028bbc 	.word	0x20028bbc
 80028e0:	40015000 	.word	0x40015000

080028e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08e      	sub	sp, #56	; 0x38
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002904:	463b      	mov	r3, r7
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	615a      	str	r2, [r3, #20]
 8002914:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <MX_TIM4_Init+0xe8>)
 8002918:	4a2d      	ldr	r2, [pc, #180]	; (80029d0 <MX_TIM4_Init+0xec>)
 800291a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <MX_TIM4_Init+0xe8>)
 800291e:	2200      	movs	r2, #0
 8002920:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <MX_TIM4_Init+0xe8>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <MX_TIM4_Init+0xe8>)
 800292a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800292e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <MX_TIM4_Init+0xe8>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002936:	4b25      	ldr	r3, [pc, #148]	; (80029cc <MX_TIM4_Init+0xe8>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800293c:	4823      	ldr	r0, [pc, #140]	; (80029cc <MX_TIM4_Init+0xe8>)
 800293e:	f009 ff3d 	bl	800c7bc <HAL_TIM_Base_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002948:	f001 fe30 	bl	80045ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800294c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002956:	4619      	mov	r1, r3
 8002958:	481c      	ldr	r0, [pc, #112]	; (80029cc <MX_TIM4_Init+0xe8>)
 800295a:	f00a f9f1 	bl	800cd40 <HAL_TIM_ConfigClockSource>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002964:	f001 fe22 	bl	80045ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002968:	4818      	ldr	r0, [pc, #96]	; (80029cc <MX_TIM4_Init+0xe8>)
 800296a:	f009 ff7d 	bl	800c868 <HAL_TIM_PWM_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002974:	f001 fe1a 	bl	80045ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	4619      	mov	r1, r3
 8002986:	4811      	ldr	r0, [pc, #68]	; (80029cc <MX_TIM4_Init+0xe8>)
 8002988:	f00a fe54 	bl	800d634 <HAL_TIMEx_MasterConfigSynchronization>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002992:	f001 fe0b 	bl	80045ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002996:	2360      	movs	r3, #96	; 0x60
 8002998:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029a6:	463b      	mov	r3, r7
 80029a8:	2200      	movs	r2, #0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4807      	ldr	r0, [pc, #28]	; (80029cc <MX_TIM4_Init+0xe8>)
 80029ae:	f00a f8af 	bl	800cb10 <HAL_TIM_PWM_ConfigChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80029b8:	f001 fdf8 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029bc:	4803      	ldr	r0, [pc, #12]	; (80029cc <MX_TIM4_Init+0xe8>)
 80029be:	f004 fcd5 	bl	800736c <HAL_TIM_MspPostInit>

}
 80029c2:	bf00      	nop
 80029c4:	3738      	adds	r7, #56	; 0x38
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20028c20 	.word	0x20028c20
 80029d0:	40000800 	.word	0x40000800

080029d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	; 0x38
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f4:	463b      	mov	r3, r7
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	615a      	str	r2, [r3, #20]
 8002a04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a08:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <MX_TIM5_Init+0x100>)
 8002a0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a2c:	4828      	ldr	r0, [pc, #160]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a2e:	f009 fec5 	bl	800c7bc <HAL_TIM_Base_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002a38:	f001 fdb8 	bl	80045ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a46:	4619      	mov	r1, r3
 8002a48:	4821      	ldr	r0, [pc, #132]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a4a:	f00a f979 	bl	800cd40 <HAL_TIM_ConfigClockSource>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002a54:	f001 fdaa 	bl	80045ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a58:	481d      	ldr	r0, [pc, #116]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a5a:	f009 ff05 	bl	800c868 <HAL_TIM_PWM_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002a64:	f001 fda2 	bl	80045ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4619      	mov	r1, r3
 8002a76:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a78:	f00a fddc 	bl	800d634 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002a82:	f001 fd93 	bl	80045ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a86:	2360      	movs	r3, #96	; 0x60
 8002a88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a96:	463b      	mov	r3, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002a9e:	f00a f837 	bl	800cb10 <HAL_TIM_PWM_ConfigChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002aa8:	f001 fd80 	bl	80045ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aac:	463b      	mov	r3, r7
 8002aae:	2204      	movs	r2, #4
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002ab4:	f00a f82c 	bl	800cb10 <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002abe:	f001 fd75 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <MX_TIM5_Init+0xfc>)
 8002ac4:	f004 fc52 	bl	800736c <HAL_TIM_MspPostInit>

}
 8002ac8:	bf00      	nop
 8002aca:	3738      	adds	r7, #56	; 0x38
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200291b8 	.word	0x200291b8
 8002ad4:	40000c00 	.word	0x40000c00

08002ad8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MX_UART4_Init+0x58>)
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <MX_UART4_Init+0x5c>)
 8002ae0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <MX_UART4_Init+0x58>)
 8002ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ae8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_UART4_Init+0x58>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_UART4_Init+0x58>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_UART4_Init+0x58>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_UART4_Init+0x58>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <MX_UART4_Init+0x58>)
 8002b1c:	f00a fe36 	bl	800d78c <HAL_UART_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002b26:	f001 fd41 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2002e1d4 	.word	0x2002e1d4
 8002b34:	40004c00 	.word	0x40004c00

08002b38 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <MX_UART5_Init+0x5c>)
 8002b40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b5e:	220c      	movs	r2, #12
 8002b60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	; (8002b90 <MX_UART5_Init+0x58>)
 8002b7c:	f00a fe06 	bl	800d78c <HAL_UART_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002b86:	f001 fd11 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2002b90c 	.word	0x2002b90c
 8002b94:	40005000 	.word	0x40005000

08002b98 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <MX_UART7_Init+0x5c>)
 8002ba0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ba8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bc4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002bc8:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002bdc:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <MX_UART7_Init+0x58>)
 8002bde:	f00a fdd5 	bl	800d78c <HAL_UART_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002be8:	f001 fce0 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20028b3c 	.word	0x20028b3c
 8002bf4:	40007800 	.word	0x40007800

08002bf8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002bfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c06:	2206      	movs	r2, #6
 8002c08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c18:	2202      	movs	r2, #2
 8002c1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c3c:	f007 feb2 	bl	800a9a4 <HAL_PCD_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002c46:	f001 fcb1 	bl	80045ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20028d04 	.word	0x20028d04

08002c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <MX_DMA_Init+0x80>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <MX_DMA_Init+0x80>)
 8002c60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <MX_DMA_Init+0x80>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <MX_DMA_Init+0x80>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <MX_DMA_Init+0x80>)
 8002c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <MX_DMA_Init+0x80>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2105      	movs	r1, #5
 8002c8e:	200b      	movs	r0, #11
 8002c90:	f006 f8b4 	bl	8008dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c94:	200b      	movs	r0, #11
 8002c96:	f006 f8cd 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2105      	movs	r1, #5
 8002c9e:	2038      	movs	r0, #56	; 0x38
 8002ca0:	f006 f8ac 	bl	8008dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ca4:	2038      	movs	r0, #56	; 0x38
 8002ca6:	f006 f8c5 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2105      	movs	r1, #5
 8002cae:	2039      	movs	r0, #57	; 0x39
 8002cb0:	f006 f8a4 	bl	8008dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002cb4:	2039      	movs	r0, #57	; 0x39
 8002cb6:	f006 f8bd 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	203a      	movs	r0, #58	; 0x3a
 8002cc0:	f006 f89c 	bl	8008dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002cc4:	203a      	movs	r0, #58	; 0x3a
 8002cc6:	f006 f8b5 	bl	8008e34 <HAL_NVIC_EnableIRQ>

}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b090      	sub	sp, #64	; 0x40
 8002cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cee:	4bb0      	ldr	r3, [pc, #704]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4aaf      	ldr	r2, [pc, #700]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002cf4:	f043 0310 	orr.w	r3, r3, #16
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4bad      	ldr	r3, [pc, #692]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d06:	4baa      	ldr	r3, [pc, #680]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4aa9      	ldr	r2, [pc, #676]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4ba7      	ldr	r3, [pc, #668]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	4ba4      	ldr	r3, [pc, #656]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4aa3      	ldr	r2, [pc, #652]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4ba1      	ldr	r3, [pc, #644]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d36:	4b9e      	ldr	r3, [pc, #632]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a9d      	ldr	r2, [pc, #628]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b9b      	ldr	r3, [pc, #620]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b98      	ldr	r3, [pc, #608]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a97      	ldr	r2, [pc, #604]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b95      	ldr	r3, [pc, #596]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d66:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a91      	ldr	r2, [pc, #580]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d7e:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a8b      	ldr	r2, [pc, #556]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d96:	4b86      	ldr	r3, [pc, #536]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a85      	ldr	r2, [pc, #532]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002d9c:	f043 0320 	orr.w	r3, r3, #32
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b83      	ldr	r3, [pc, #524]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dae:	4b80      	ldr	r3, [pc, #512]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a7f      	ldr	r2, [pc, #508]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dc6:	4b7a      	ldr	r3, [pc, #488]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a79      	ldr	r2, [pc, #484]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b77      	ldr	r3, [pc, #476]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dde:	4b74      	ldr	r3, [pc, #464]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a73      	ldr	r2, [pc, #460]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002de4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b71      	ldr	r3, [pc, #452]	; (8002fb0 <MX_GPIO_Init+0x2d8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2110      	movs	r1, #16
 8002dfa:	486e      	ldr	r0, [pc, #440]	; (8002fb4 <MX_GPIO_Init+0x2dc>)
 8002dfc:	f006 fdf2 	bl	80099e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002e00:	2200      	movs	r2, #0
 8002e02:	f244 012f 	movw	r1, #16431	; 0x402f
 8002e06:	486c      	ldr	r0, [pc, #432]	; (8002fb8 <MX_GPIO_Init+0x2e0>)
 8002e08:	f006 fdec 	bl	80099e4 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f241 1150 	movw	r1, #4432	; 0x1150
 8002e12:	486a      	ldr	r0, [pc, #424]	; (8002fbc <MX_GPIO_Init+0x2e4>)
 8002e14:	f006 fde6 	bl	80099e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2103      	movs	r1, #3
 8002e1c:	4868      	ldr	r0, [pc, #416]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002e1e:	f006 fde1 	bl	80099e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002e22:	2200      	movs	r2, #0
 8002e24:	f243 013c 	movw	r1, #12348	; 0x303c
 8002e28:	4866      	ldr	r0, [pc, #408]	; (8002fc4 <MX_GPIO_Init+0x2ec>)
 8002e2a:	f006 fddb 	bl	80099e4 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f241 0104 	movw	r1, #4100	; 0x1004
 8002e34:	4864      	ldr	r0, [pc, #400]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002e36:	f006 fdd5 	bl	80099e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002e40:	4862      	ldr	r0, [pc, #392]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002e42:	f006 fdcf 	bl	80099e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002e46:	2200      	movs	r2, #0
 8002e48:	211b      	movs	r1, #27
 8002e4a:	4861      	ldr	r0, [pc, #388]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002e4c:	f006 fdca 	bl	80099e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002e50:	2310      	movs	r3, #16
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e54:	2301      	movs	r3, #1
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e64:	4619      	mov	r1, r3
 8002e66:	4853      	ldr	r0, [pc, #332]	; (8002fb4 <MX_GPIO_Init+0x2dc>)
 8002e68:	f006 fbfa 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e70:	2300      	movs	r3, #0
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	484d      	ldr	r0, [pc, #308]	; (8002fb4 <MX_GPIO_Init+0x2dc>)
 8002e80:	f006 fbee 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002e84:	f244 032f 	movw	r3, #16431	; 0x402f
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e92:	2300      	movs	r3, #0
 8002e94:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4846      	ldr	r0, [pc, #280]	; (8002fb8 <MX_GPIO_Init+0x2e0>)
 8002e9e:	f006 fbdf 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4845      	ldr	r0, [pc, #276]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002eb6:	f006 fbd3 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002eba:	f241 1350 	movw	r3, #4432	; 0x1150
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	483a      	ldr	r0, [pc, #232]	; (8002fbc <MX_GPIO_Init+0x2e4>)
 8002ed4:	f006 fbc4 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002ed8:	23f0      	movs	r3, #240	; 0xf0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002edc:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4835      	ldr	r0, [pc, #212]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002eec:	f006 fbb8 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f02:	4619      	mov	r1, r3
 8002f04:	4834      	ldr	r0, [pc, #208]	; (8002fd8 <MX_GPIO_Init+0x300>)
 8002f06:	f006 fbab 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002f0a:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	482f      	ldr	r0, [pc, #188]	; (8002fdc <MX_GPIO_Init+0x304>)
 8002f20:	f006 fb9e 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8002f24:	2303      	movs	r3, #3
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4821      	ldr	r0, [pc, #132]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002f3c:	f006 fb90 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002f40:	f243 033c 	movw	r3, #12348	; 0x303c
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f46:	2301      	movs	r3, #1
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f56:	4619      	mov	r1, r3
 8002f58:	481a      	ldr	r0, [pc, #104]	; (8002fc4 <MX_GPIO_Init+0x2ec>)
 8002f5a:	f006 fb81 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8002f5e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f74:	4619      	mov	r1, r3
 8002f76:	4814      	ldr	r0, [pc, #80]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002f78:	f006 fb72 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8002f7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f82:	2301      	movs	r3, #1
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f92:	4619      	mov	r1, r3
 8002f94:	480d      	ldr	r0, [pc, #52]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002f96:	f006 fb63 	bl	8009660 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8002f9a:	231b      	movs	r3, #27
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fae:	e017      	b.n	8002fe0 <MX_GPIO_Init+0x308>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40021800 	.word	0x40021800
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40022800 	.word	0x40022800
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021c00 	.word	0x40021c00
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40022400 	.word	0x40022400
 8002fd4:	10210000 	.word	0x10210000
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480b      	ldr	r0, [pc, #44]	; (8003010 <MX_GPIO_Init+0x338>)
 8002fe4:	f006 fb3c 	bl	8009660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2105      	movs	r1, #5
 8002fec:	200a      	movs	r0, #10
 8002fee:	f005 ff05 	bl	8008dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ff2:	200a      	movs	r0, #10
 8002ff4:	f005 ff1e 	bl	8008e34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2105      	movs	r1, #5
 8002ffc:	2017      	movs	r0, #23
 8002ffe:	f005 fefd 	bl	8008dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003002:	2017      	movs	r0, #23
 8003004:	f005 ff16 	bl	8008e34 <HAL_NVIC_EnableIRQ>

}
 8003008:	bf00      	nop
 800300a:	3740      	adds	r7, #64	; 0x40
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40022400 	.word	0x40022400

08003014 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 800301c:	1d39      	adds	r1, r7, #4
 800301e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003022:	2201      	movs	r2, #1
 8003024:	4803      	ldr	r0, [pc, #12]	; (8003034 <__io_putchar+0x20>)
 8003026:	f00a fbff 	bl	800d828 <HAL_UART_Transmit>

	return ch;
 800302a:	687b      	ldr	r3, [r7, #4]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20028b3c 	.word	0x20028b3c

08003038 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 800303c:	220e      	movs	r2, #14
 800303e:	2100      	movs	r1, #0
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <outputGPIOBufInitialization+0x14>)
 8003042:	f00e fa92 	bl	801156a <memset>
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	2002ba80 	.word	0x2002ba80

08003050 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 8003050:	b580      	push	{r7, lr}
 8003052:	b098      	sub	sp, #96	; 0x60
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4909      	ldr	r1, [pc, #36]	; (8003088 <uartTransmitInt+0x38>)
 8003062:	4618      	mov	r0, r3
 8003064:	f00f f906 	bl	8012274 <siprintf>
 8003068:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b07      	cmp	r3, #7
 800306e:	d107      	bne.n	8003080 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8003070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003072:	b29a      	uxth	r2, r3
 8003074:	f107 010c 	add.w	r1, r7, #12
 8003078:	2364      	movs	r3, #100	; 0x64
 800307a:	4804      	ldr	r0, [pc, #16]	; (800308c <uartTransmitInt+0x3c>)
 800307c:	f00a fbd4 	bl	800d828 <HAL_UART_Transmit>
	}

}
 8003080:	bf00      	nop
 8003082:	3760      	adds	r7, #96	; 0x60
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	08015628 	.word	0x08015628
 800308c:	20028b3c 	.word	0x20028b3c

08003090 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af02      	add	r7, sp, #8
 8003096:	60ba      	str	r2, [r7, #8]
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	460b      	mov	r3, r1
 80030a0:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 80030a2:	4a4f      	ldr	r2, [pc, #316]	; (80031e0 <readI2CRegister+0x150>)
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10c      	bne.n	80030c8 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	b299      	uxth	r1, r3
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	4a49      	ldr	r2, [pc, #292]	; (80031e0 <readI2CRegister+0x150>)
 80030bc:	4849      	ldr	r0, [pc, #292]	; (80031e4 <readI2CRegister+0x154>)
 80030be:	f006 fd79 	bl	8009bb4 <HAL_I2C_Master_Transmit>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]
 80030c6:	e02e      	b.n	8003126 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d10c      	bne.n	80030e8 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	b299      	uxth	r1, r3
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2301      	movs	r3, #1
 80030da:	4a41      	ldr	r2, [pc, #260]	; (80031e0 <readI2CRegister+0x150>)
 80030dc:	4842      	ldr	r0, [pc, #264]	; (80031e8 <readI2CRegister+0x158>)
 80030de:	f006 fd69 	bl	8009bb4 <HAL_I2C_Master_Transmit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	75fb      	strb	r3, [r7, #23]
 80030e6:	e01e      	b.n	8003126 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d10c      	bne.n	8003108 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	b299      	uxth	r1, r3
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2301      	movs	r3, #1
 80030fa:	4a39      	ldr	r2, [pc, #228]	; (80031e0 <readI2CRegister+0x150>)
 80030fc:	483b      	ldr	r0, [pc, #236]	; (80031ec <readI2CRegister+0x15c>)
 80030fe:	f006 fd59 	bl	8009bb4 <HAL_I2C_Master_Transmit>
 8003102:	4603      	mov	r3, r0
 8003104:	75fb      	strb	r3, [r7, #23]
 8003106:	e00e      	b.n	8003126 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b04      	cmp	r3, #4
 800310c:	d10b      	bne.n	8003126 <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	b299      	uxth	r1, r3
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	2301      	movs	r3, #1
 800311a:	4a31      	ldr	r2, [pc, #196]	; (80031e0 <readI2CRegister+0x150>)
 800311c:	4834      	ldr	r0, [pc, #208]	; (80031f0 <readI2CRegister+0x160>)
 800311e:	f006 fd49 	bl	8009bb4 <HAL_I2C_Master_Transmit>
 8003122:	4603      	mov	r3, r0
 8003124:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <readI2CRegister+0xa0>
	          return 0xfe;
 800312c:	23fe      	movs	r3, #254	; 0xfe
 800312e:	e052      	b.n	80031d6 <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10e      	bne.n	8003154 <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	b299      	uxth	r1, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	b29a      	uxth	r2, r3
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	4a26      	ldr	r2, [pc, #152]	; (80031e0 <readI2CRegister+0x150>)
 8003148:	4826      	ldr	r0, [pc, #152]	; (80031e4 <readI2CRegister+0x154>)
 800314a:	f006 fe27 	bl	8009d9c <HAL_I2C_Master_Receive>
 800314e:	4603      	mov	r3, r0
 8003150:	75fb      	strb	r3, [r7, #23]
 8003152:	e034      	b.n	80031be <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d10e      	bne.n	8003178 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	b299      	uxth	r1, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	b29a      	uxth	r2, r3
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <readI2CRegister+0x150>)
 800316c:	481e      	ldr	r0, [pc, #120]	; (80031e8 <readI2CRegister+0x158>)
 800316e:	f006 fe15 	bl	8009d9c <HAL_I2C_Master_Receive>
 8003172:	4603      	mov	r3, r0
 8003174:	75fb      	strb	r3, [r7, #23]
 8003176:	e022      	b.n	80031be <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d10e      	bne.n	800319c <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	b299      	uxth	r1, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	b29a      	uxth	r2, r3
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <readI2CRegister+0x150>)
 8003190:	4816      	ldr	r0, [pc, #88]	; (80031ec <readI2CRegister+0x15c>)
 8003192:	f006 fe03 	bl	8009d9c <HAL_I2C_Master_Receive>
 8003196:	4603      	mov	r3, r0
 8003198:	75fb      	strb	r3, [r7, #23]
 800319a:	e010      	b.n	80031be <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d10d      	bne.n	80031be <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	b299      	uxth	r1, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <readI2CRegister+0x150>)
 80031b4:	480e      	ldr	r0, [pc, #56]	; (80031f0 <readI2CRegister+0x160>)
 80031b6:	f006 fdf1 	bl	8009d9c <HAL_I2C_Master_Receive>
 80031ba:	4603      	mov	r3, r0
 80031bc:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <readI2CRegister+0x138>
		          return 0xfe;
 80031c4:	23fe      	movs	r3, #254	; 0xfe
 80031c6:	e006      	b.n	80031d6 <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <readI2CRegister+0x150>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2107      	movs	r1, #7
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff3e 	bl	8003050 <uartTransmitInt>
			  return buf;
 80031d4:	4b02      	ldr	r3, [pc, #8]	; (80031e0 <readI2CRegister+0x150>)
		  }
}
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200032a4 	.word	0x200032a4
 80031e4:	20028cb8 	.word	0x20028cb8
 80031e8:	20029108 	.word	0x20029108
 80031ec:	20028aa4 	.word	0x20028aa4
 80031f0:	20028af0 	.word	0x20028af0

080031f4 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08e      	sub	sp, #56	; 0x38
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60ba      	str	r2, [r7, #8]
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	4603      	mov	r3, r0
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	460b      	mov	r3, r1
 8003204:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 8003206:	7bbb      	ldrb	r3, [r7, #14]
 8003208:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 800320e:	2300      	movs	r3, #0
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
 8003212:	e00d      	b.n	8003230 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	441a      	add	r2, r3
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	3301      	adds	r3, #1
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003224:	440b      	add	r3, r1
 8003226:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	3301      	adds	r3, #1
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	2b02      	cmp	r3, #2
 8003234:	d9ee      	bls.n	8003214 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	2b01      	cmp	r3, #1
 800323a:	d112      	bne.n	8003262 <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	b299      	uxth	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	b29b      	uxth	r3, r3
 8003244:	3301      	adds	r3, #1
 8003246:	b298      	uxth	r0, r3
 8003248:	f107 0214 	add.w	r2, r7, #20
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4603      	mov	r3, r0
 8003254:	4829      	ldr	r0, [pc, #164]	; (80032fc <writeI2CRegister+0x108>)
 8003256:	f006 fcad 	bl	8009bb4 <HAL_I2C_Master_Transmit>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003260:	e040      	b.n	80032e4 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	2b02      	cmp	r3, #2
 8003266:	d112      	bne.n	800328e <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	b299      	uxth	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	b29b      	uxth	r3, r3
 8003270:	3301      	adds	r3, #1
 8003272:	b298      	uxth	r0, r3
 8003274:	f107 0214 	add.w	r2, r7, #20
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4603      	mov	r3, r0
 8003280:	481f      	ldr	r0, [pc, #124]	; (8003300 <writeI2CRegister+0x10c>)
 8003282:	f006 fc97 	bl	8009bb4 <HAL_I2C_Master_Transmit>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800328c:	e02a      	b.n	80032e4 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	2b03      	cmp	r3, #3
 8003292:	d112      	bne.n	80032ba <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	b299      	uxth	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	b29b      	uxth	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	b298      	uxth	r0, r3
 80032a0:	f107 0214 	add.w	r2, r7, #20
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4603      	mov	r3, r0
 80032ac:	4815      	ldr	r0, [pc, #84]	; (8003304 <writeI2CRegister+0x110>)
 80032ae:	f006 fc81 	bl	8009bb4 <HAL_I2C_Master_Transmit>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80032b8:	e014      	b.n	80032e4 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d111      	bne.n	80032e4 <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	b299      	uxth	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	b298      	uxth	r0, r3
 80032cc:	f107 0214 	add.w	r2, r7, #20
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4603      	mov	r3, r0
 80032d8:	480b      	ldr	r0, [pc, #44]	; (8003308 <writeI2CRegister+0x114>)
 80032da:	f006 fc6b 	bl	8009bb4 <HAL_I2C_Master_Transmit>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 80032e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <writeI2CRegister+0xfc>
	  	          return 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 80032f0:	2301      	movs	r3, #1
	  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3730      	adds	r7, #48	; 0x30
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20028cb8 	.word	0x20028cb8
 8003300:	20029108 	.word	0x20029108
 8003304:	20028aa4 	.word	0x20028aa4
 8003308:	20028af0 	.word	0x20028af0

0800330c <configureLEDDriver>:
void configureLEDDriver(){
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8003312:	2301      	movs	r3, #1
 8003314:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <configureLEDDriver+0x110>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <configureLEDDriver+0x114>)
 800331e:	7818      	ldrb	r0, [r3, #0]
 8003320:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <configureLEDDriver+0x114>)
 8003322:	7999      	ldrb	r1, [r3, #6]
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	461a      	mov	r2, r3
 8003328:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <configureLEDDriver+0x114>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2301      	movs	r3, #1
 8003330:	f7ff ff60 	bl	80031f4 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 8003334:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <configureLEDDriver+0x114>)
 8003336:	7818      	ldrb	r0, [r3, #0]
 8003338:	4b39      	ldr	r3, [pc, #228]	; (8003420 <configureLEDDriver+0x114>)
 800333a:	7999      	ldrb	r1, [r3, #6]
 800333c:	4b38      	ldr	r3, [pc, #224]	; (8003420 <configureLEDDriver+0x114>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f7ff fea5 	bl	8003090 <readI2CRegister>
 8003346:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2107      	movs	r1, #7
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fe7e 	bl	8003050 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 8003354:	4b32      	ldr	r3, [pc, #200]	; (8003420 <configureLEDDriver+0x114>)
 8003356:	7818      	ldrb	r0, [r3, #0]
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <configureLEDDriver+0x114>)
 800335a:	7859      	ldrb	r1, [r3, #1]
 800335c:	4b30      	ldr	r3, [pc, #192]	; (8003420 <configureLEDDriver+0x114>)
 800335e:	79db      	ldrb	r3, [r3, #7]
 8003360:	461a      	mov	r2, r3
 8003362:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <configureLEDDriver+0x114>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2301      	movs	r3, #1
 800336a:	f7ff ff43 	bl	80031f4 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 800336e:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <configureLEDDriver+0x114>)
 8003370:	7818      	ldrb	r0, [r3, #0]
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <configureLEDDriver+0x114>)
 8003374:	7899      	ldrb	r1, [r3, #2]
 8003376:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <configureLEDDriver+0x114>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2301      	movs	r3, #1
 800337e:	4a27      	ldr	r2, [pc, #156]	; (800341c <configureLEDDriver+0x110>)
 8003380:	f7ff ff38 	bl	80031f4 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 8003384:	4b26      	ldr	r3, [pc, #152]	; (8003420 <configureLEDDriver+0x114>)
 8003386:	7818      	ldrb	r0, [r3, #0]
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <configureLEDDriver+0x114>)
 800338a:	78d9      	ldrb	r1, [r3, #3]
 800338c:	4b24      	ldr	r3, [pc, #144]	; (8003420 <configureLEDDriver+0x114>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2301      	movs	r3, #1
 8003394:	4a21      	ldr	r2, [pc, #132]	; (800341c <configureLEDDriver+0x110>)
 8003396:	f7ff ff2d 	bl	80031f4 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 800339a:	4b21      	ldr	r3, [pc, #132]	; (8003420 <configureLEDDriver+0x114>)
 800339c:	7818      	ldrb	r0, [r3, #0]
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <configureLEDDriver+0x114>)
 80033a0:	7919      	ldrb	r1, [r3, #4]
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <configureLEDDriver+0x114>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2301      	movs	r3, #1
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <configureLEDDriver+0x110>)
 80033ac:	f7ff ff22 	bl	80031f4 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <configureLEDDriver+0x114>)
 80033b2:	7818      	ldrb	r0, [r3, #0]
 80033b4:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <configureLEDDriver+0x114>)
 80033b6:	7959      	ldrb	r1, [r3, #5]
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <configureLEDDriver+0x114>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2301      	movs	r3, #1
 80033c0:	4a16      	ldr	r2, [pc, #88]	; (800341c <configureLEDDriver+0x110>)
 80033c2:	f7ff ff17 	bl	80031f4 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <configureLEDDriver+0x114>)
 80033c8:	7818      	ldrb	r0, [r3, #0]
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <configureLEDDriver+0x114>)
 80033cc:	7a19      	ldrb	r1, [r3, #8]
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <configureLEDDriver+0x114>)
 80033d0:	7adb      	ldrb	r3, [r3, #11]
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b12      	ldr	r3, [pc, #72]	; (8003420 <configureLEDDriver+0x114>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2301      	movs	r3, #1
 80033dc:	f7ff ff0a 	bl	80031f4 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <configureLEDDriver+0x114>)
 80033e2:	7818      	ldrb	r0, [r3, #0]
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <configureLEDDriver+0x114>)
 80033e6:	7a59      	ldrb	r1, [r3, #9]
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <configureLEDDriver+0x114>)
 80033ea:	7adb      	ldrb	r3, [r3, #11]
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <configureLEDDriver+0x114>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	f7ff fefd 	bl	80031f4 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <configureLEDDriver+0x114>)
 80033fc:	7818      	ldrb	r0, [r3, #0]
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <configureLEDDriver+0x114>)
 8003400:	7a99      	ldrb	r1, [r3, #10]
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <configureLEDDriver+0x114>)
 8003404:	7adb      	ldrb	r3, [r3, #11]
 8003406:	461a      	mov	r2, r3
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <configureLEDDriver+0x114>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2301      	movs	r3, #1
 8003410:	f7ff fef0 	bl	80031f4 <writeI2CRegister>
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200032b8 	.word	0x200032b8
 8003420:	20000004 	.word	0x20000004

08003424 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af02      	add	r7, sp, #8
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 8003430:	2301      	movs	r3, #1
 8003432:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 8003434:	2304      	movs	r3, #4
 8003436:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 8003438:	2310      	movs	r3, #16
 800343a:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 800343c:	2340      	movs	r3, #64	; 0x40
 800343e:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 8003440:	2302      	movs	r3, #2
 8003442:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8003444:	2308      	movs	r3, #8
 8003446:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 8003448:	2320      	movs	r3, #32
 800344a:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b03      	cmp	r3, #3
 8003454:	dc05      	bgt.n	8003462 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 8003456:	4b80      	ldr	r3, [pc, #512]	; (8003658 <setErrorLED+0x234>)
 8003458:	789b      	ldrb	r3, [r3, #2]
 800345a:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	e019      	b.n	8003496 <setErrorLED+0x72>
	}
	else if(led <8){
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b07      	cmp	r3, #7
 8003466:	dc06      	bgt.n	8003476 <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8003468:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <setErrorLED+0x234>)
 800346a:	78db      	ldrb	r3, [r3, #3]
 800346c:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3b04      	subs	r3, #4
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e00f      	b.n	8003496 <setErrorLED+0x72>
	}
	else if(led <12){
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b0b      	cmp	r3, #11
 800347a:	dc06      	bgt.n	800348a <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 800347c:	4b76      	ldr	r3, [pc, #472]	; (8003658 <setErrorLED+0x234>)
 800347e:	791b      	ldrb	r3, [r3, #4]
 8003480:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3b08      	subs	r3, #8
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e005      	b.n	8003496 <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 800348a:	4b73      	ldr	r3, [pc, #460]	; (8003658 <setErrorLED+0x234>)
 800348c:	795b      	ldrb	r3, [r3, #5]
 800348e:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b0c      	subs	r3, #12
 8003494:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003496:	4b70      	ldr	r3, [pc, #448]	; (8003658 <setErrorLED+0x234>)
 8003498:	7818      	ldrb	r0, [r3, #0]
 800349a:	4b6f      	ldr	r3, [pc, #444]	; (8003658 <setErrorLED+0x234>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	7ef9      	ldrb	r1, [r7, #27]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f7ff fdf5 	bl	8003090 <readI2CRegister>
 80034a6:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	f200 80bd 	bhi.w	800362a <setErrorLED+0x206>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <setErrorLED+0x94>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	0800352f 	.word	0x0800352f
 80034c0:	08003595 	.word	0x08003595
 80034c4:	080035c5 	.word	0x080035c5

	case 0:
		if(change){
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d012      	beq.n	80034f4 <setErrorLED+0xd0>
			if(led == 8){
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d107      	bne.n	80034e4 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	7dbb      	ldrb	r3, [r7, #22]
 80034da:	4313      	orrs	r3, r2
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 80034e2:	e0a2      	b.n	800362a <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	7ebb      	ldrb	r3, [r7, #26]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	701a      	strb	r2, [r3, #0]
		break;
 80034f2:	e09a      	b.n	800362a <setErrorLED+0x206>
			if(led == 8){
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d10c      	bne.n	8003514 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b25a      	sxtb	r2, r3
 8003500:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003504:	43db      	mvns	r3, r3
 8003506:	b25b      	sxtb	r3, r3
 8003508:	4013      	ands	r3, r2
 800350a:	b25b      	sxtb	r3, r3
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	701a      	strb	r2, [r3, #0]
		break;
 8003512:	e08a      	b.n	800362a <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b25a      	sxtb	r2, r3
 800351a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800351e:	43db      	mvns	r3, r3
 8003520:	b25b      	sxtb	r3, r3
 8003522:	4013      	ands	r3, r2
 8003524:	b25b      	sxtb	r3, r3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	701a      	strb	r2, [r3, #0]
		break;
 800352c:	e07d      	b.n	800362a <setErrorLED+0x206>

	case 1:
		if(change){
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <setErrorLED+0x136>
			if(led == 9){
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b09      	cmp	r3, #9
 8003538:	d107      	bne.n	800354a <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	7d7b      	ldrb	r3, [r7, #21]
 8003540:	4313      	orrs	r3, r2
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 8003548:	e06f      	b.n	800362a <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	7e7b      	ldrb	r3, [r7, #25]
 8003550:	4313      	orrs	r3, r2
 8003552:	b2da      	uxtb	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	701a      	strb	r2, [r3, #0]
		break;
 8003558:	e067      	b.n	800362a <setErrorLED+0x206>
			if(led == 9){
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b09      	cmp	r3, #9
 800355e:	d10c      	bne.n	800357a <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b25a      	sxtb	r2, r3
 8003566:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800356a:	43db      	mvns	r3, r3
 800356c:	b25b      	sxtb	r3, r3
 800356e:	4013      	ands	r3, r2
 8003570:	b25b      	sxtb	r3, r3
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	701a      	strb	r2, [r3, #0]
		break;
 8003578:	e057      	b.n	800362a <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	b25a      	sxtb	r2, r3
 8003580:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003584:	43db      	mvns	r3, r3
 8003586:	b25b      	sxtb	r3, r3
 8003588:	4013      	ands	r3, r2
 800358a:	b25b      	sxtb	r3, r3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	701a      	strb	r2, [r3, #0]
		break;
 8003592:	e04a      	b.n	800362a <setErrorLED+0x206>

	case 2:
		if(change){
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	7e3b      	ldrb	r3, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 80035a8:	e03f      	b.n	800362a <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b25a      	sxtb	r2, r3
 80035b0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	4013      	ands	r3, r2
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	701a      	strb	r2, [r3, #0]
		break;
 80035c2:	e032      	b.n	800362a <setErrorLED+0x206>

	case 3:
		if(change){
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d012      	beq.n	80035f0 <setErrorLED+0x1cc>
			if(led == 7){
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b07      	cmp	r3, #7
 80035ce:	d107      	bne.n	80035e0 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 80035de:	e023      	b.n	8003628 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	701a      	strb	r2, [r3, #0]
		break;
 80035ee:	e01b      	b.n	8003628 <setErrorLED+0x204>
			if(led == 7){
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	d10c      	bne.n	8003610 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b25a      	sxtb	r2, r3
 80035fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003600:	43db      	mvns	r3, r3
 8003602:	b25b      	sxtb	r3, r3
 8003604:	4013      	ands	r3, r2
 8003606:	b25b      	sxtb	r3, r3
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	701a      	strb	r2, [r3, #0]
		break;
 800360e:	e00b      	b.n	8003628 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b25a      	sxtb	r2, r3
 8003616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800361a:	43db      	mvns	r3, r3
 800361c:	b25b      	sxtb	r3, r3
 800361e:	4013      	ands	r3, r2
 8003620:	b25b      	sxtb	r3, r3
 8003622:	b2da      	uxtb	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	701a      	strb	r2, [r3, #0]
		break;
 8003628:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <setErrorLED+0x234>)
 800362c:	7818      	ldrb	r0, [r3, #0]
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <setErrorLED+0x234>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	7ef9      	ldrb	r1, [r7, #27]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2301      	movs	r3, #1
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	f7ff fddb 	bl	80031f4 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <setErrorLED+0x234>)
 8003640:	7818      	ldrb	r0, [r3, #0]
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <setErrorLED+0x234>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	7ef9      	ldrb	r1, [r7, #27]
 8003648:	2201      	movs	r2, #1
 800364a:	f7ff fd21 	bl	8003090 <readI2CRegister>
 800364e:	60f8      	str	r0, [r7, #12]
}
 8003650:	bf00      	nop
 8003652:	3720      	adds	r7, #32
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000004 	.word	0x20000004

0800365c <getADCValues>:


float* getADCValues(){
 800365c:	b580      	push	{r7, lr}
 800365e:	b09e      	sub	sp, #120	; 0x78
 8003660:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 8003662:	463b      	mov	r3, r7
 8003664:	2254      	movs	r2, #84	; 0x54
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f00d ff7e 	bl	801156a <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 800366e:	2316      	movs	r3, #22
 8003670:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8003672:	2308      	movs	r3, #8
 8003674:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8003676:	230c      	movs	r3, #12
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 800367a:	2300      	movs	r3, #0
 800367c:	677b      	str	r3, [r7, #116]	; 0x74
 800367e:	e171      	b.n	8003964 <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003680:	4b97      	ldr	r3, [pc, #604]	; (80038e0 <getADCValues+0x284>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003686:	429a      	cmp	r2, r3
 8003688:	d009      	beq.n	800369e <getADCValues+0x42>
 800368a:	4b95      	ldr	r3, [pc, #596]	; (80038e0 <getADCValues+0x284>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003690:	429a      	cmp	r2, r3
 8003692:	d004      	beq.n	800369e <getADCValues+0x42>
 8003694:	4b92      	ldr	r3, [pc, #584]	; (80038e0 <getADCValues+0x284>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800369a:	429a      	cmp	r2, r3
 800369c:	d102      	bne.n	80036a4 <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 800369e:	2300      	movs	r3, #0
 80036a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036a2:	e071      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 80036a4:	4b8e      	ldr	r3, [pc, #568]	; (80038e0 <getADCValues+0x284>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d009      	beq.n	80036c2 <getADCValues+0x66>
 80036ae:	4b8c      	ldr	r3, [pc, #560]	; (80038e0 <getADCValues+0x284>)
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d004      	beq.n	80036c2 <getADCValues+0x66>
 80036b8:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <getADCValues+0x284>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036be:	429a      	cmp	r2, r3
 80036c0:	d102      	bne.n	80036c8 <getADCValues+0x6c>
			adcIndex=2;
 80036c2:	2302      	movs	r3, #2
 80036c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c6:	e05f      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 80036c8:	4b85      	ldr	r3, [pc, #532]	; (80038e0 <getADCValues+0x284>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d009      	beq.n	80036e6 <getADCValues+0x8a>
 80036d2:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <getADCValues+0x284>)
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036d8:	429a      	cmp	r2, r3
 80036da:	d004      	beq.n	80036e6 <getADCValues+0x8a>
 80036dc:	4b80      	ldr	r3, [pc, #512]	; (80038e0 <getADCValues+0x284>)
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d102      	bne.n	80036ec <getADCValues+0x90>
			adcIndex=4;
 80036e6:	2304      	movs	r3, #4
 80036e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ea:	e04d      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 80036ec:	4b7c      	ldr	r3, [pc, #496]	; (80038e0 <getADCValues+0x284>)
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d009      	beq.n	800370a <getADCValues+0xae>
 80036f6:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <getADCValues+0x284>)
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d004      	beq.n	800370a <getADCValues+0xae>
 8003700:	4b77      	ldr	r3, [pc, #476]	; (80038e0 <getADCValues+0x284>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003706:	429a      	cmp	r2, r3
 8003708:	d102      	bne.n	8003710 <getADCValues+0xb4>
			adcIndex=6;
 800370a:	2306      	movs	r3, #6
 800370c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800370e:	e03b      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003710:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <getADCValues+0x284>)
 8003712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003714:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003716:	429a      	cmp	r2, r3
 8003718:	d004      	beq.n	8003724 <getADCValues+0xc8>
 800371a:	4b71      	ldr	r3, [pc, #452]	; (80038e0 <getADCValues+0x284>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003720:	429a      	cmp	r2, r3
 8003722:	d102      	bne.n	800372a <getADCValues+0xce>
			adcIndex=8;
 8003724:	2308      	movs	r3, #8
 8003726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003728:	e02e      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 800372a:	4b6d      	ldr	r3, [pc, #436]	; (80038e0 <getADCValues+0x284>)
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003730:	429a      	cmp	r2, r3
 8003732:	d004      	beq.n	800373e <getADCValues+0xe2>
 8003734:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <getADCValues+0x284>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800373a:	429a      	cmp	r2, r3
 800373c:	d102      	bne.n	8003744 <getADCValues+0xe8>
			adcIndex=10;
 800373e:	230a      	movs	r3, #10
 8003740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003742:	e021      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 8003744:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <getADCValues+0x284>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800374a:	429a      	cmp	r2, r3
 800374c:	d102      	bne.n	8003754 <getADCValues+0xf8>
			adcIndex=12;
 800374e:	230c      	movs	r3, #12
 8003750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003752:	e019      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 8003754:	4b62      	ldr	r3, [pc, #392]	; (80038e0 <getADCValues+0x284>)
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800375a:	429a      	cmp	r2, r3
 800375c:	d102      	bne.n	8003764 <getADCValues+0x108>
			adcIndex=14;
 800375e:	230e      	movs	r3, #14
 8003760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003762:	e011      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 8003764:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <getADCValues+0x284>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800376a:	429a      	cmp	r2, r3
 800376c:	d102      	bne.n	8003774 <getADCValues+0x118>
			adcIndex=16;
 800376e:	2310      	movs	r3, #16
 8003770:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003772:	e009      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 8003774:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <getADCValues+0x284>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800377a:	429a      	cmp	r2, r3
 800377c:	d102      	bne.n	8003784 <getADCValues+0x128>
			adcIndex=18;
 800377e:	2312      	movs	r3, #18
 8003780:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003782:	e001      	b.n	8003788 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 8003784:	2314      	movs	r3, #20
 8003786:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003788:	4b55      	ldr	r3, [pc, #340]	; (80038e0 <getADCValues+0x284>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800378e:	429a      	cmp	r2, r3
 8003790:	d00e      	beq.n	80037b0 <getADCValues+0x154>
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <getADCValues+0x284>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003798:	429a      	cmp	r2, r3
 800379a:	d009      	beq.n	80037b0 <getADCValues+0x154>
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <getADCValues+0x284>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d004      	beq.n	80037b0 <getADCValues+0x154>
 80037a6:	4b4e      	ldr	r3, [pc, #312]	; (80038e0 <getADCValues+0x284>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d13a      	bne.n	8003826 <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80037b0:	2300      	movs	r3, #0
 80037b2:	673b      	str	r3, [r7, #112]	; 0x70
 80037b4:	e033      	b.n	800381e <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 80037b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037c0:	4413      	add	r3, r2
 80037c2:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 80037c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037cc:	4413      	add	r3, r2
 80037ce:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80037d2:	4944      	ldr	r1, [pc, #272]	; (80038e4 <getADCValues+0x288>)
 80037d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037d6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80037da:	441a      	add	r2, r3
 80037dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037e4:	440b      	add	r3, r1
 80037e6:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80037ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ec:	2b13      	cmp	r3, #19
 80037ee:	d113      	bne.n	8003818 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80037f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037f8:	4413      	add	r3, r2
 80037fa:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80037fe:	4a3a      	ldr	r2, [pc, #232]	; (80038e8 <getADCValues+0x28c>)
 8003800:	fb82 1203 	smull	r1, r2, r2, r3
 8003804:	10d2      	asrs	r2, r2, #3
 8003806:	17db      	asrs	r3, r3, #31
 8003808:	1ad2      	subs	r2, r2, r3
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003812:	440b      	add	r3, r1
 8003814:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800381a:	3301      	adds	r3, #1
 800381c:	673b      	str	r3, [r7, #112]	; 0x70
 800381e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003820:	2b13      	cmp	r3, #19
 8003822:	ddc8      	ble.n	80037b6 <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003824:	e09b      	b.n	800395e <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <getADCValues+0x284>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800382c:	429a      	cmp	r2, r3
 800382e:	d018      	beq.n	8003862 <getADCValues+0x206>
 8003830:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <getADCValues+0x284>)
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003836:	429a      	cmp	r2, r3
 8003838:	d013      	beq.n	8003862 <getADCValues+0x206>
 800383a:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <getADCValues+0x284>)
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003840:	429a      	cmp	r2, r3
 8003842:	d00e      	beq.n	8003862 <getADCValues+0x206>
 8003844:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <getADCValues+0x284>)
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800384a:	429a      	cmp	r2, r3
 800384c:	d009      	beq.n	8003862 <getADCValues+0x206>
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <getADCValues+0x284>)
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003854:	429a      	cmp	r2, r3
 8003856:	d004      	beq.n	8003862 <getADCValues+0x206>
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <getADCValues+0x284>)
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800385e:	429a      	cmp	r2, r3
 8003860:	d13a      	bne.n	80038d8 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003862:	2300      	movs	r3, #0
 8003864:	673b      	str	r3, [r7, #112]	; 0x70
 8003866:	e033      	b.n	80038d0 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8003868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800386a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003872:	4413      	add	r3, r2
 8003874:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8003876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800387e:	4413      	add	r3, r2
 8003880:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003884:	4919      	ldr	r1, [pc, #100]	; (80038ec <getADCValues+0x290>)
 8003886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003888:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800388c:	441a      	add	r2, r3
 800388e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003896:	440b      	add	r3, r1
 8003898:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 800389c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389e:	2b13      	cmp	r3, #19
 80038a0:	d113      	bne.n	80038ca <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80038a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038aa:	4413      	add	r3, r2
 80038ac:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <getADCValues+0x28c>)
 80038b2:	fb82 1203 	smull	r1, r2, r2, r3
 80038b6:	10d2      	asrs	r2, r2, #3
 80038b8:	17db      	asrs	r3, r3, #31
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80038c4:	440b      	add	r3, r1
 80038c6:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80038ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038cc:	3301      	adds	r3, #1
 80038ce:	673b      	str	r3, [r7, #112]	; 0x70
 80038d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d2:	2b13      	cmp	r3, #19
 80038d4:	ddc8      	ble.n	8003868 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80038d6:	e042      	b.n	800395e <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80038d8:	2300      	movs	r3, #0
 80038da:	673b      	str	r3, [r7, #112]	; 0x70
 80038dc:	e03c      	b.n	8003958 <getADCValues+0x2fc>
 80038de:	bf00      	nop
 80038e0:	20000044 	.word	0x20000044
 80038e4:	2002e258 	.word	0x2002e258
 80038e8:	66666667 	.word	0x66666667
 80038ec:	2002bab4 	.word	0x2002bab4
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 80038f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038fa:	4413      	add	r3, r2
 80038fc:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 80038fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003906:	4413      	add	r3, r2
 8003908:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800390c:	49c9      	ldr	r1, [pc, #804]	; (8003c34 <getADCValues+0x5d8>)
 800390e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003910:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003914:	441a      	add	r2, r3
 8003916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800391e:	440b      	add	r3, r1
 8003920:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003926:	2b13      	cmp	r3, #19
 8003928:	d113      	bne.n	8003952 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 800392a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003932:	4413      	add	r3, r2
 8003934:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003938:	4abf      	ldr	r2, [pc, #764]	; (8003c38 <getADCValues+0x5dc>)
 800393a:	fb82 1203 	smull	r1, r2, r2, r3
 800393e:	10d2      	asrs	r2, r2, #3
 8003940:	17db      	asrs	r3, r3, #31
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800394c:	440b      	add	r3, r1
 800394e:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003954:	3301      	adds	r3, #1
 8003956:	673b      	str	r3, [r7, #112]	; 0x70
 8003958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800395a:	2b13      	cmp	r3, #19
 800395c:	ddc8      	ble.n	80038f0 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 800395e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003960:	3301      	adds	r3, #1
 8003962:	677b      	str	r3, [r7, #116]	; 0x74
 8003964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003966:	2b14      	cmp	r3, #20
 8003968:	f77f ae8a 	ble.w	8003680 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800396c:	4bb3      	ldr	r3, [pc, #716]	; (8003c3c <getADCValues+0x5e0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003976:	4413      	add	r3, r2
 8003978:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003984:	4bad      	ldr	r3, [pc, #692]	; (8003c3c <getADCValues+0x5e0>)
 8003986:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800398a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800398e:	4bab      	ldr	r3, [pc, #684]	; (8003c3c <getADCValues+0x5e0>)
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800399a:	4ba8      	ldr	r3, [pc, #672]	; (8003c3c <getADCValues+0x5e0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	4aa7      	ldr	r2, [pc, #668]	; (8003c40 <getADCValues+0x5e4>)
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039ac:	4ba3      	ldr	r3, [pc, #652]	; (8003c3c <getADCValues+0x5e0>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039b6:	4413      	add	r3, r2
 80039b8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039bc:	ee07 3a90 	vmov	s15, r3
 80039c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039c4:	4b9d      	ldr	r3, [pc, #628]	; (8003c3c <getADCValues+0x5e0>)
 80039c6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80039ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ce:	4b9b      	ldr	r3, [pc, #620]	; (8003c3c <getADCValues+0x5e0>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039da:	4b98      	ldr	r3, [pc, #608]	; (8003c3c <getADCValues+0x5e0>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e2:	4a97      	ldr	r2, [pc, #604]	; (8003c40 <getADCValues+0x5e4>)
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039ec:	4b93      	ldr	r3, [pc, #588]	; (8003c3c <getADCValues+0x5e0>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039f6:	4413      	add	r3, r2
 80039f8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a04:	4b8d      	ldr	r3, [pc, #564]	; (8003c3c <getADCValues+0x5e0>)
 8003a06:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a0e:	4b8b      	ldr	r3, [pc, #556]	; (8003c3c <getADCValues+0x5e0>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1a:	4b88      	ldr	r3, [pc, #544]	; (8003c3c <getADCValues+0x5e0>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <getADCValues+0x5e4>)
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a2c:	4b83      	ldr	r3, [pc, #524]	; (8003c3c <getADCValues+0x5e0>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a36:	4413      	add	r3, r2
 8003a38:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a44:	4b7d      	ldr	r3, [pc, #500]	; (8003c3c <getADCValues+0x5e0>)
 8003a46:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a4e:	4b7b      	ldr	r3, [pc, #492]	; (8003c3c <getADCValues+0x5e0>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5a:	4b78      	ldr	r3, [pc, #480]	; (8003c3c <getADCValues+0x5e0>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	4a77      	ldr	r2, [pc, #476]	; (8003c40 <getADCValues+0x5e4>)
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a6c:	4b73      	ldr	r3, [pc, #460]	; (8003c3c <getADCValues+0x5e0>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a76:	4413      	add	r3, r2
 8003a78:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a84:	4b6d      	ldr	r3, [pc, #436]	; (8003c3c <getADCValues+0x5e0>)
 8003a86:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a8e:	4b6b      	ldr	r3, [pc, #428]	; (8003c3c <getADCValues+0x5e0>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a9a:	4b68      	ldr	r3, [pc, #416]	; (8003c3c <getADCValues+0x5e0>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	4a67      	ldr	r2, [pc, #412]	; (8003c40 <getADCValues+0x5e4>)
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003aac:	4b63      	ldr	r3, [pc, #396]	; (8003c3c <getADCValues+0x5e0>)
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ac4:	4b5d      	ldr	r3, [pc, #372]	; (8003c3c <getADCValues+0x5e0>)
 8003ac6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ace:	4b5b      	ldr	r3, [pc, #364]	; (8003c3c <getADCValues+0x5e0>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ada:	4b58      	ldr	r3, [pc, #352]	; (8003c3c <getADCValues+0x5e0>)
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <getADCValues+0x5e4>)
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003aec:	4b53      	ldr	r3, [pc, #332]	; (8003c3c <getADCValues+0x5e0>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003af6:	4413      	add	r3, r2
 8003af8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b04:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <getADCValues+0x5e0>)
 8003b06:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b0e:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <getADCValues+0x5e0>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b1a:	4b48      	ldr	r3, [pc, #288]	; (8003c3c <getADCValues+0x5e0>)
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	4a47      	ldr	r2, [pc, #284]	; (8003c40 <getADCValues+0x5e4>)
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b2c:	4b43      	ldr	r3, [pc, #268]	; (8003c3c <getADCValues+0x5e0>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b36:	4413      	add	r3, r2
 8003b38:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b44:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <getADCValues+0x5e0>)
 8003b46:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	; (8003c3c <getADCValues+0x5e0>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b5a:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <getADCValues+0x5e0>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <getADCValues+0x5e4>)
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b6c:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <getADCValues+0x5e0>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b76:	4413      	add	r3, r2
 8003b78:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b84:	4b2d      	ldr	r3, [pc, #180]	; (8003c3c <getADCValues+0x5e0>)
 8003b86:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <getADCValues+0x5e0>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b9a:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <getADCValues+0x5e0>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	4a27      	ldr	r2, [pc, #156]	; (8003c40 <getADCValues+0x5e4>)
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <getADCValues+0x5e0>)
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <getADCValues+0x5e0>)
 8003bc6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <getADCValues+0x5e0>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <getADCValues+0x5e0>)
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <getADCValues+0x5e4>)
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <getADCValues+0x5e0>)
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bfc:	ee07 3a90 	vmov	s15, r3
 8003c00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <getADCValues+0x5e0>)
 8003c06:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <getADCValues+0x5e0>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <getADCValues+0x5e0>)
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <getADCValues+0x5e4>)
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <getADCValues+0x5e0>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	e007      	b.n	8003c44 <getADCValues+0x5e8>
 8003c34:	200291f8 	.word	0x200291f8
 8003c38:	66666667 	.word	0x66666667
 8003c3c:	20000044 	.word	0x20000044
 8003c40:	200032bc 	.word	0x200032bc
 8003c44:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c48:	4413      	add	r3, r2
 8003c4a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c56:	4b9c      	ldr	r3, [pc, #624]	; (8003ec8 <getADCValues+0x86c>)
 8003c58:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c60:	4b99      	ldr	r3, [pc, #612]	; (8003ec8 <getADCValues+0x86c>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6c:	4b96      	ldr	r3, [pc, #600]	; (8003ec8 <getADCValues+0x86c>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	4a95      	ldr	r2, [pc, #596]	; (8003ecc <getADCValues+0x870>)
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003c7e:	4b92      	ldr	r3, [pc, #584]	; (8003ec8 <getADCValues+0x86c>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c88:	4413      	add	r3, r2
 8003c8a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c96:	4b8c      	ldr	r3, [pc, #560]	; (8003ec8 <getADCValues+0x86c>)
 8003c98:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca0:	4b89      	ldr	r3, [pc, #548]	; (8003ec8 <getADCValues+0x86c>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cac:	4b86      	ldr	r3, [pc, #536]	; (8003ec8 <getADCValues+0x86c>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb4:	4a85      	ldr	r2, [pc, #532]	; (8003ecc <getADCValues+0x870>)
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003cbe:	4b82      	ldr	r3, [pc, #520]	; (8003ec8 <getADCValues+0x86c>)
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cc8:	4413      	add	r3, r2
 8003cca:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd6:	4b7c      	ldr	r3, [pc, #496]	; (8003ec8 <getADCValues+0x86c>)
 8003cd8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce0:	4b79      	ldr	r3, [pc, #484]	; (8003ec8 <getADCValues+0x86c>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cec:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <getADCValues+0x86c>)
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	4a75      	ldr	r2, [pc, #468]	; (8003ecc <getADCValues+0x870>)
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003cfe:	4b72      	ldr	r3, [pc, #456]	; (8003ec8 <getADCValues+0x86c>)
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d08:	4413      	add	r3, r2
 8003d0a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d16:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <getADCValues+0x86c>)
 8003d18:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d20:	4b69      	ldr	r3, [pc, #420]	; (8003ec8 <getADCValues+0x86c>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d2c:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <getADCValues+0x86c>)
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d34:	4a65      	ldr	r2, [pc, #404]	; (8003ecc <getADCValues+0x870>)
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d3e:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <getADCValues+0x86c>)
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d48:	4413      	add	r3, r2
 8003d4a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d56:	4b5c      	ldr	r3, [pc, #368]	; (8003ec8 <getADCValues+0x86c>)
 8003d58:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d60:	4b59      	ldr	r3, [pc, #356]	; (8003ec8 <getADCValues+0x86c>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	ee07 3a90 	vmov	s15, r3
 8003d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6c:	4b56      	ldr	r3, [pc, #344]	; (8003ec8 <getADCValues+0x86c>)
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d74:	4a55      	ldr	r2, [pc, #340]	; (8003ecc <getADCValues+0x870>)
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003d7e:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <getADCValues+0x86c>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d88:	4413      	add	r3, r2
 8003d8a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d96:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <getADCValues+0x86c>)
 8003d98:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da0:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <getADCValues+0x86c>)
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	ee07 3a90 	vmov	s15, r3
 8003da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dac:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <getADCValues+0x86c>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db4:	4a45      	ldr	r2, [pc, #276]	; (8003ecc <getADCValues+0x870>)
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003dbe:	4b42      	ldr	r3, [pc, #264]	; (8003ec8 <getADCValues+0x86c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003dc8:	4413      	add	r3, r2
 8003dca:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <getADCValues+0x86c>)
 8003dd8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003de0:	4b39      	ldr	r3, [pc, #228]	; (8003ec8 <getADCValues+0x86c>)
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	ee07 3a90 	vmov	s15, r3
 8003de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <getADCValues+0x86c>)
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df4:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <getADCValues+0x870>)
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003dfe:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <getADCValues+0x86c>)
 8003e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e08:	4413      	add	r3, r2
 8003e0a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e16:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <getADCValues+0x86c>)
 8003e18:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e20:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <getADCValues+0x86c>)
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2c:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <getADCValues+0x86c>)
 8003e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e34:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <getADCValues+0x870>)
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003e3e:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <getADCValues+0x86c>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e48:	4413      	add	r3, r2
 8003e4a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e56:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <getADCValues+0x86c>)
 8003e58:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <getADCValues+0x86c>)
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <getADCValues+0x86c>)
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e74:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <getADCValues+0x870>)
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <getADCValues+0x86c>)
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e88:	4413      	add	r3, r2
 8003e8a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <getADCValues+0x86c>)
 8003e98:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <getADCValues+0x86c>)
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <getADCValues+0x86c>)
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb4:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <getADCValues+0x870>)
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8003ebe:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <getADCValues+0x870>)
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3778      	adds	r7, #120	; 0x78
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000044 	.word	0x20000044
 8003ecc:	200032bc 	.word	0x200032bc

08003ed0 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ef0:	4803      	ldr	r0, [pc, #12]	; (8003f00 <startHeartbeat+0x1c>)
 8003ef2:	f005 fd90 	bl	8009a16 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8003ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003efa:	f00a fd01 	bl	800e900 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003efe:	e7f5      	b.n	8003eec <startHeartbeat+0x8>
 8003f00:	40022000 	.word	0x40022000

08003f04 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4815      	ldr	r0, [pc, #84]	; (8003f68 <startADCRead+0x64>)
 8003f12:	f00d fb2a 	bl	801156a <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8003f16:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4813      	ldr	r0, [pc, #76]	; (8003f6c <startADCRead+0x68>)
 8003f1e:	f00d fb24 	bl	801156a <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 8003f22:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f26:	2100      	movs	r1, #0
 8003f28:	4811      	ldr	r0, [pc, #68]	; (8003f70 <startADCRead+0x6c>)
 8003f2a:	f00d fb1e 	bl	801156a <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 8003f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f32:	2100      	movs	r1, #0
 8003f34:	480f      	ldr	r0, [pc, #60]	; (8003f74 <startADCRead+0x70>)
 8003f36:	f00d fb18 	bl	801156a <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	490b      	ldr	r1, [pc, #44]	; (8003f6c <startADCRead+0x68>)
 8003f40:	480d      	ldr	r0, [pc, #52]	; (8003f78 <startADCRead+0x74>)
 8003f42:	f004 fa7d 	bl	8008440 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4909      	ldr	r1, [pc, #36]	; (8003f70 <startADCRead+0x6c>)
 8003f4c:	480b      	ldr	r0, [pc, #44]	; (8003f7c <startADCRead+0x78>)
 8003f4e:	f004 fa77 	bl	8008440 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4907      	ldr	r1, [pc, #28]	; (8003f74 <startADCRead+0x70>)
 8003f58:	4809      	ldr	r0, [pc, #36]	; (8003f80 <startADCRead+0x7c>)
 8003f5a:	f004 fa71 	bl	8008440 <HAL_ADC_Start_DMA>
    osDelay(600);
 8003f5e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003f62:	f00a fccd 	bl	800e900 <osDelay>
	memset(adcRestart,0,sizeof(adcRestart));
 8003f66:	e7d1      	b.n	8003f0c <startADCRead+0x8>
 8003f68:	200291b4 	.word	0x200291b4
 8003f6c:	200291f8 	.word	0x200291f8
 8003f70:	2002e258 	.word	0x2002e258
 8003f74:	2002bab4 	.word	0x2002bab4
 8003f78:	2002b98c 	.word	0x2002b98c
 8003f7c:	20028c70 	.word	0x20028c70
 8003f80:	2002b9d8 	.word	0x2002b9d8

08003f84 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
	 int x = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
	 float *adcValues;
	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8003f90:	f000 fb1c 	bl	80045cc <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
	 uint8_t menu_val = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73bb      	strb	r3, [r7, #14]
	 uint8_t running_menu = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	737b      	strb	r3, [r7, #13]
	 int *readI2c;
	 int zionCleared=0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
	   for(;;)
	   {
		if((ZION.zionFinished) && (!zionCleared)){
 8003fa4:	4b36      	ldr	r3, [pc, #216]	; (8004080 <GetDaScreenBlink+0xfc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <GetDaScreenBlink+0x32>
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <GetDaScreenBlink+0x32>
				  //osThreadSuspend(zionReadHandle);
				  zionCleared=1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	613b      	str	r3, [r7, #16]
		}
	 	  ulNotifiedValue = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8003fba:	f107 0208 	add.w	r2, r7, #8
 8003fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc2:	21ff      	movs	r1, #255	; 0xff
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f00c f9d1 	bl	801036c <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	73fb      	strb	r3, [r7, #15]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	73bb      	strb	r3, [r7, #14]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	737b      	strb	r3, [r7, #13]
	 	  if(!(x%400)){
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4b25      	ldr	r3, [pc, #148]	; (8004084 <GetDaScreenBlink+0x100>)
 8003ff0:	fb83 1302 	smull	r1, r3, r3, r2
 8003ff4:	11d9      	asrs	r1, r3, #7
 8003ff6:	17d3      	asrs	r3, r2, #31
 8003ff8:	1acb      	subs	r3, r1, r3
 8003ffa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003ffe:	fb01 f303 	mul.w	r3, r1, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <GetDaScreenBlink+0x90>
	 		  bootButtons.btn5=1;
 8004008:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <GetDaScreenBlink+0x104>)
 800400a:	2201      	movs	r2, #1
 800400c:	615a      	str	r2, [r3, #20]
	 		  x++;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	3301      	adds	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 8004014:	7b7b      	ldrb	r3, [r7, #13]
 8004016:	3b01      	subs	r3, #1
 8004018:	2b03      	cmp	r3, #3
 800401a:	d82d      	bhi.n	8004078 <GetDaScreenBlink+0xf4>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <GetDaScreenBlink+0xa0>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004049 	.word	0x08004049
 8004028:	08004035 	.word	0x08004035
 800402c:	08004059 	.word	0x08004059
 8004030:	08004069 	.word	0x08004069
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 8004034:	4815      	ldr	r0, [pc, #84]	; (800408c <GetDaScreenBlink+0x108>)
 8004036:	f00e f90f 	bl	8012258 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 800403a:	7bbb      	ldrb	r3, [r7, #14]
 800403c:	7b7a      	ldrb	r2, [r7, #13]
 800403e:	7bf9      	ldrb	r1, [r7, #15]
 8004040:	4618      	mov	r0, r3
 8004042:	f002 fbdd 	bl	8006800 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 8004046:	e017      	b.n	8004078 <GetDaScreenBlink+0xf4>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 8004048:	4811      	ldr	r0, [pc, #68]	; (8004090 <GetDaScreenBlink+0x10c>)
 800404a:	f00e f905 	bl	8012258 <puts>
			  drawMainMenu(menu_val);
 800404e:	7bbb      	ldrb	r3, [r7, #14]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fae5 	bl	8004620 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 8004056:	e00f      	b.n	8004078 <GetDaScreenBlink+0xf4>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 8004058:	480e      	ldr	r0, [pc, #56]	; (8004094 <GetDaScreenBlink+0x110>)
 800405a:	f00e f8fd 	bl	8012258 <puts>
			  drawStatusMenu(menu_val);
 800405e:	7bbb      	ldrb	r3, [r7, #14]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fd89 	bl	8004b78 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 8004066:	e007      	b.n	8004078 <GetDaScreenBlink+0xf4>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 8004068:	480b      	ldr	r0, [pc, #44]	; (8004098 <GetDaScreenBlink+0x114>)
 800406a:	f00e f8f5 	bl	8012258 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 800406e:	7bbb      	ldrb	r3, [r7, #14]
 8004070:	4618      	mov	r0, r3
 8004072:	f001 feed 	bl	8005e50 <drawSystemInfoMenu>
			  break;
 8004076:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8004078:	2064      	movs	r0, #100	; 0x64
 800407a:	f00a fc41 	bl	800e900 <osDelay>
		if((ZION.zionFinished) && (!zionCleared)){
 800407e:	e791      	b.n	8003fa4 <GetDaScreenBlink+0x20>
 8004080:	2000324c 	.word	0x2000324c
 8004084:	51eb851f 	.word	0x51eb851f
 8004088:	20003284 	.word	0x20003284
 800408c:	08015638 	.word	0x08015638
 8004090:	08015644 	.word	0x08015644
 8004094:	08015650 	.word	0x08015650
 8004098:	08015660 	.word	0x08015660

0800409c <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <startGpioInputRead+0x114>)
 80040a6:	681c      	ldr	r4, [r3, #0]
 80040a8:	2180      	movs	r1, #128	; 0x80
 80040aa:	4842      	ldr	r0, [pc, #264]	; (80041b4 <startGpioInputRead+0x118>)
 80040ac:	f005 fc82 	bl	80099b4 <HAL_GPIO_ReadPin>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <startGpioInputRead+0x11c>)
 80040b6:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 80040b8:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <startGpioInputRead+0x114>)
 80040ba:	685c      	ldr	r4, [r3, #4]
 80040bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040c0:	483e      	ldr	r0, [pc, #248]	; (80041bc <startGpioInputRead+0x120>)
 80040c2:	f005 fc77 	bl	80099b4 <HAL_GPIO_ReadPin>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <startGpioInputRead+0x11c>)
 80040cc:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 80040ce:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <startGpioInputRead+0x114>)
 80040d0:	689c      	ldr	r4, [r3, #8]
 80040d2:	2110      	movs	r1, #16
 80040d4:	483a      	ldr	r0, [pc, #232]	; (80041c0 <startGpioInputRead+0x124>)
 80040d6:	f005 fc6d 	bl	80099b4 <HAL_GPIO_ReadPin>
 80040da:	4603      	mov	r3, r0
 80040dc:	461a      	mov	r2, r3
 80040de:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <startGpioInputRead+0x11c>)
 80040e0:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 80040e2:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <startGpioInputRead+0x114>)
 80040e4:	68dc      	ldr	r4, [r3, #12]
 80040e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040ea:	4835      	ldr	r0, [pc, #212]	; (80041c0 <startGpioInputRead+0x124>)
 80040ec:	f005 fc62 	bl	80099b4 <HAL_GPIO_ReadPin>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <startGpioInputRead+0x11c>)
 80040f6:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <startGpioInputRead+0x114>)
 80040fa:	691c      	ldr	r4, [r3, #16]
 80040fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004100:	482f      	ldr	r0, [pc, #188]	; (80041c0 <startGpioInputRead+0x124>)
 8004102:	f005 fc57 	bl	80099b4 <HAL_GPIO_ReadPin>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <startGpioInputRead+0x11c>)
 800410c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 800410e:	4b28      	ldr	r3, [pc, #160]	; (80041b0 <startGpioInputRead+0x114>)
 8004110:	695c      	ldr	r4, [r3, #20]
 8004112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004116:	482a      	ldr	r0, [pc, #168]	; (80041c0 <startGpioInputRead+0x124>)
 8004118:	f005 fc4c 	bl	80099b4 <HAL_GPIO_ReadPin>
 800411c:	4603      	mov	r3, r0
 800411e:	461a      	mov	r2, r3
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <startGpioInputRead+0x11c>)
 8004122:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004124:	4b22      	ldr	r3, [pc, #136]	; (80041b0 <startGpioInputRead+0x114>)
 8004126:	699c      	ldr	r4, [r3, #24]
 8004128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800412c:	4824      	ldr	r0, [pc, #144]	; (80041c0 <startGpioInputRead+0x124>)
 800412e:	f005 fc41 	bl	80099b4 <HAL_GPIO_ReadPin>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <startGpioInputRead+0x11c>)
 8004138:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 800413a:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <startGpioInputRead+0x114>)
 800413c:	69dc      	ldr	r4, [r3, #28]
 800413e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004142:	481f      	ldr	r0, [pc, #124]	; (80041c0 <startGpioInputRead+0x124>)
 8004144:	f005 fc36 	bl	80099b4 <HAL_GPIO_ReadPin>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <startGpioInputRead+0x11c>)
 800414e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8004150:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <startGpioInputRead+0x114>)
 8004152:	6a1c      	ldr	r4, [r3, #32]
 8004154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004158:	4819      	ldr	r0, [pc, #100]	; (80041c0 <startGpioInputRead+0x124>)
 800415a:	f005 fc2b 	bl	80099b4 <HAL_GPIO_ReadPin>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <startGpioInputRead+0x11c>)
 8004164:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <startGpioInputRead+0x114>)
 8004168:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800416a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800416e:	4814      	ldr	r0, [pc, #80]	; (80041c0 <startGpioInputRead+0x124>)
 8004170:	f005 fc20 	bl	80099b4 <HAL_GPIO_ReadPin>
 8004174:	4603      	mov	r3, r0
 8004176:	461a      	mov	r2, r3
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <startGpioInputRead+0x11c>)
 800417a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <startGpioInputRead+0x114>)
 800417e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004184:	480e      	ldr	r0, [pc, #56]	; (80041c0 <startGpioInputRead+0x124>)
 8004186:	f005 fc15 	bl	80099b4 <HAL_GPIO_ReadPin>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <startGpioInputRead+0x11c>)
 8004190:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <startGpioInputRead+0x114>)
 8004194:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004196:	2108      	movs	r1, #8
 8004198:	480a      	ldr	r0, [pc, #40]	; (80041c4 <startGpioInputRead+0x128>)
 800419a:	f005 fc0b 	bl	80099b4 <HAL_GPIO_ReadPin>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <startGpioInputRead+0x11c>)
 80041a4:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 80041a6:	f240 30b6 	movw	r0, #950	; 0x3b6
 80041aa:	f00a fba9 	bl	800e900 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 80041ae:	e779      	b.n	80040a4 <startGpioInputRead+0x8>
 80041b0:	20000014 	.word	0x20000014
 80041b4:	40020400 	.word	0x40020400
 80041b8:	20028c64 	.word	0x20028c64
 80041bc:	40020800 	.word	0x40020800
 80041c0:	40020c00 	.word	0x40020c00
 80041c4:	40021000 	.word	0x40021000

080041c8 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 80041d0:	2301      	movs	r3, #1
 80041d2:	75fb      	strb	r3, [r7, #23]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 80041d4:	2301      	movs	r3, #1
 80041d6:	75bb      	strb	r3, [r7, #22]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 80041d8:	7dbb      	ldrb	r3, [r7, #22]
 80041da:	757b      	strb	r3, [r7, #21]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 80041dc:	2303      	movs	r3, #3
 80041de:	753b      	strb	r3, [r7, #20]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	74fb      	strb	r3, [r7, #19]
	int zionCleared=0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 80041e8:	4b4f      	ldr	r3, [pc, #316]	; (8004328 <startNavigationTask+0x160>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d863      	bhi.n	80042ba <startNavigationTask+0xf2>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <startNavigationTask+0x30>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004209 	.word	0x08004209
 80041fc:	08004233 	.word	0x08004233
 8004200:	0800425f 	.word	0x0800425f
 8004204:	08004285 	.word	0x08004285
	{
	case UP:
	{
		if (menu_highlight == MENU_TOP)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d064      	beq.n	80042d8 <startNavigationTask+0x110>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	3b01      	subs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004214:	4b45      	ldr	r3, [pc, #276]	; (800432c <startNavigationTask+0x164>)
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	7dbb      	ldrb	r3, [r7, #22]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	4313      	orrs	r3, r2
 8004226:	4619      	mov	r1, r3
 8004228:	2300      	movs	r3, #0
 800422a:	2204      	movs	r2, #4
 800422c:	f00c f8f8 	bl	8010420 <xTaskGenericNotify>
		}
		break;
 8004230:	e052      	b.n	80042d8 <startNavigationTask+0x110>
	}
	case DWN:
	{
		if (menu_highlight >= menu_Max_Items)
 8004232:	7dfa      	ldrb	r2, [r7, #23]
 8004234:	7d3b      	ldrb	r3, [r7, #20]
 8004236:	429a      	cmp	r2, r3
 8004238:	d250      	bcs.n	80042dc <startNavigationTask+0x114>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	3301      	adds	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004240:	4b3a      	ldr	r3, [pc, #232]	; (800432c <startNavigationTask+0x164>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	f043 0202 	orr.w	r2, r3, #2
 800424c:	7dbb      	ldrb	r3, [r7, #22]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	4313      	orrs	r3, r2
 8004252:	4619      	mov	r1, r3
 8004254:	2300      	movs	r3, #0
 8004256:	2204      	movs	r2, #4
 8004258:	f00c f8e2 	bl	8010420 <xTaskGenericNotify>
		}
		break;
 800425c:	e03e      	b.n	80042dc <startNavigationTask+0x114>
	}
	case BACK:
	{
		menu_run = prev_menu;
 800425e:	7d7b      	ldrb	r3, [r7, #21]
 8004260:	75bb      	strb	r3, [r7, #22]
		menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	75fb      	strb	r3, [r7, #23]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004266:	4b31      	ldr	r3, [pc, #196]	; (800432c <startNavigationTask+0x164>)
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	f043 0203 	orr.w	r2, r3, #3
 8004272:	7dbb      	ldrb	r3, [r7, #22]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	4313      	orrs	r3, r2
 8004278:	4619      	mov	r1, r3
 800427a:	2300      	movs	r3, #0
 800427c:	2204      	movs	r2, #4
 800427e:	f00c f8cf 	bl	8010420 <xTaskGenericNotify>
		break;
 8004282:	e02c      	b.n	80042de <startNavigationTask+0x116>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 8004284:	7dbb      	ldrb	r3, [r7, #22]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d108      	bne.n	800429c <startNavigationTask+0xd4>
			prev_menu = menu_run;		// save currently running menu for BACK button
 800428a:	7dbb      	ldrb	r3, [r7, #22]
 800428c:	757b      	strb	r3, [r7, #21]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	3301      	adds	r3, #1
 8004292:	75bb      	strb	r3, [r7, #22]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	74fb      	strb	r3, [r7, #19]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 8004298:	2301      	movs	r3, #1
 800429a:	75fb      	strb	r3, [r7, #23]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800429c:	4b23      	ldr	r3, [pc, #140]	; (800432c <startNavigationTask+0x164>)
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	7dbb      	ldrb	r3, [r7, #22]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	4313      	orrs	r3, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	2204      	movs	r2, #4
 80042b4:	f00c f8b4 	bl	8010420 <xTaskGenericNotify>
		break;
 80042b8:	e011      	b.n	80042de <startNavigationTask+0x116>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80042ba:	4b1c      	ldr	r3, [pc, #112]	; (800432c <startNavigationTask+0x164>)
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	f043 0205 	orr.w	r2, r3, #5
 80042c6:	7dbb      	ldrb	r3, [r7, #22]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	4313      	orrs	r3, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	2300      	movs	r3, #0
 80042d0:	2204      	movs	r2, #4
 80042d2:	f00c f8a5 	bl	8010420 <xTaskGenericNotify>
		break;
 80042d6:	e002      	b.n	80042de <startNavigationTask+0x116>
		break;
 80042d8:	bf00      	nop
 80042da:	e000      	b.n	80042de <startNavigationTask+0x116>
		break;
 80042dc:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 80042de:	7dbb      	ldrb	r3, [r7, #22]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d816      	bhi.n	8004314 <startNavigationTask+0x14c>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <startNavigationTask+0x124>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004303 	.word	0x08004303
 80042f0:	080042fd 	.word	0x080042fd
 80042f4:	08004309 	.word	0x08004309
 80042f8:	0800430f 	.word	0x0800430f

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 80042fc:	2305      	movs	r3, #5
 80042fe:	753b      	strb	r3, [r7, #20]
		break;
 8004300:	e00b      	b.n	800431a <startNavigationTask+0x152>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004302:	2303      	movs	r3, #3
 8004304:	753b      	strb	r3, [r7, #20]
		break;
 8004306:	e008      	b.n	800431a <startNavigationTask+0x152>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 8004308:	2303      	movs	r3, #3
 800430a:	753b      	strb	r3, [r7, #20]
		break;
 800430c:	e005      	b.n	800431a <startNavigationTask+0x152>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 800430e:	2302      	movs	r3, #2
 8004310:	753b      	strb	r3, [r7, #20]
		break;
 8004312:	e002      	b.n	800431a <startNavigationTask+0x152>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004314:	2305      	movs	r3, #5
 8004316:	753b      	strb	r3, [r7, #20]
		break;
 8004318:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 800431a:	4b03      	ldr	r3, [pc, #12]	; (8004328 <startNavigationTask+0x160>)
 800431c:	2205      	movs	r2, #5
 800431e:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004320:	20c8      	movs	r0, #200	; 0xc8
 8004322:	f00a faed 	bl	800e900 <osDelay>
	switch(inputButtonSet)
 8004326:	e75f      	b.n	80041e8 <startNavigationTask+0x20>
 8004328:	200000a4 	.word	0x200000a4
 800432c:	20030a28 	.word	0x20030a28

08004330 <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startErrorLEDs */
  /* Infinite loop */
	int x;
  for(;;)
  {
	  for(x=0;x<12;x++){
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e012      	b.n	8004364 <startErrorLEDs+0x34>
		  setErrorLED(x, errorLEDState[x]);
 800433e:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <startErrorLEDs+0x44>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	4619      	mov	r1, r3
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff f866 	bl	8003424 <setErrorLED>
		  HAL_Delay(10);
 8004358:	200a      	movs	r0, #10
 800435a:	f003 fec9 	bl	80080f0 <HAL_Delay>
	  for(x=0;x<12;x++){
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3301      	adds	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b0b      	cmp	r3, #11
 8004368:	dde9      	ble.n	800433e <startErrorLEDs+0xe>
	  }
    osDelay(1000);
 800436a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800436e:	f00a fac7 	bl	800e900 <osDelay>
	  for(x=0;x<12;x++){
 8004372:	e7e1      	b.n	8004338 <startErrorLEDs+0x8>
 8004374:	2002e1c4 	.word	0x2002e1c4

08004378 <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 8004384:	4b79      	ldr	r3, [pc, #484]	; (800456c <startZionRead+0x1f4>)
 8004386:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 8004388:	4b79      	ldr	r3, [pc, #484]	; (8004570 <startZionRead+0x1f8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 80e5 	bne.w	800455c <startZionRead+0x1e4>
		  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8004392:	4b78      	ldr	r3, [pc, #480]	; (8004574 <startZionRead+0x1fc>)
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	4b77      	ldr	r3, [pc, #476]	; (8004574 <startZionRead+0x1fc>)
 8004398:	785b      	ldrb	r3, [r3, #1]
 800439a:	4013      	ands	r3, r2
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4b75      	ldr	r3, [pc, #468]	; (8004574 <startZionRead+0x1fc>)
 80043a0:	789b      	ldrb	r3, [r3, #2]
 80043a2:	4013      	ands	r3, r2
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 80043aa:	f7ff f957 	bl	800365c <getADCValues>
 80043ae:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 80043b0:	4b71      	ldr	r3, [pc, #452]	; (8004578 <startZionRead+0x200>)
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4413      	add	r3, r2
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 80043be:	edd7 7a06 	vldr	s15, [r7, #24]
 80043c2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800457c <startZionRead+0x204>
 80043c6:	eef4 7a47 	vcmp.f32	s15, s14
 80043ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ce:	f000 80c8 	beq.w	8004562 <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 80043d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80043d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80043da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e2:	dd5d      	ble.n	80044a0 <startZionRead+0x128>
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d15a      	bne.n	80044a0 <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 80043ea:	f003 fe75 	bl	80080d8 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4b63      	ldr	r3, [pc, #396]	; (8004580 <startZionRead+0x208>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	613b      	str	r3, [r7, #16]
				  if(runtime > 5){
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	f340 80af 	ble.w	8004560 <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 8004402:	f003 fb69 	bl	8007ad8 <zionEEPROMPresence>
 8004406:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d012      	beq.n	8004436 <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 8004410:	4b57      	ldr	r3, [pc, #348]	; (8004570 <startZionRead+0x1f8>)
 8004412:	2201      	movs	r2, #1
 8004414:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004416:	20a6      	movs	r0, #166	; 0xa6
 8004418:	f003 fbae 	bl	8007b78 <parseZionEEPROM>
 800441c:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a53      	ldr	r2, [pc, #332]	; (8004570 <startZionRead+0x1f8>)
 8004424:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4a51      	ldr	r2, [pc, #324]	; (8004570 <startZionRead+0x1f8>)
 800442c:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	4a4f      	ldr	r2, [pc, #316]	; (8004570 <startZionRead+0x1f8>)
 8004434:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3304      	adds	r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d012      	beq.n	8004466 <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <startZionRead+0x1f8>)
 8004442:	2201      	movs	r2, #1
 8004444:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004446:	20a8      	movs	r0, #168	; 0xa8
 8004448:	f003 fb96 	bl	8007b78 <parseZionEEPROM>
 800444c:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a47      	ldr	r2, [pc, #284]	; (8004570 <startZionRead+0x1f8>)
 8004454:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4a45      	ldr	r2, [pc, #276]	; (8004570 <startZionRead+0x1f8>)
 800445c:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	4a43      	ldr	r2, [pc, #268]	; (8004570 <startZionRead+0x1f8>)
 8004464:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3308      	adds	r3, #8
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d012      	beq.n	8004496 <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004470:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <startZionRead+0x1f8>)
 8004472:	2201      	movs	r2, #1
 8004474:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004476:	20aa      	movs	r0, #170	; 0xaa
 8004478:	f003 fb7e 	bl	8007b78 <parseZionEEPROM>
 800447c:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3b      	ldr	r2, [pc, #236]	; (8004570 <startZionRead+0x1f8>)
 8004484:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	4a39      	ldr	r2, [pc, #228]	; (8004570 <startZionRead+0x1f8>)
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4a37      	ldr	r2, [pc, #220]	; (8004570 <startZionRead+0x1f8>)
 8004494:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004496:	4b36      	ldr	r3, [pc, #216]	; (8004570 <startZionRead+0x1f8>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 800449c:	f00a fa2a 	bl	800e8f4 <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10b      	bne.n	80044be <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 80044a6:	2201      	movs	r2, #1
 80044a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044ac:	4835      	ldr	r0, [pc, #212]	; (8004584 <startZionRead+0x20c>)
 80044ae:	f005 fa99 	bl	80099e4 <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 80044b2:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <startZionRead+0x1f8>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 80044b8:	2301      	movs	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	e051      	b.n	8004562 <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 80044be:	f003 fb0b 	bl	8007ad8 <zionEEPROMPresence>
 80044c2:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d012      	beq.n	80044f2 <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 80044cc:	4b28      	ldr	r3, [pc, #160]	; (8004570 <startZionRead+0x1f8>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 80044d2:	20a6      	movs	r0, #166	; 0xa6
 80044d4:	f003 fb50 	bl	8007b78 <parseZionEEPROM>
 80044d8:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a24      	ldr	r2, [pc, #144]	; (8004570 <startZionRead+0x1f8>)
 80044e0:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	4a22      	ldr	r2, [pc, #136]	; (8004570 <startZionRead+0x1f8>)
 80044e8:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	4a20      	ldr	r2, [pc, #128]	; (8004570 <startZionRead+0x1f8>)
 80044f0:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3304      	adds	r3, #4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <startZionRead+0x1f8>)
 80044fe:	2201      	movs	r2, #1
 8004500:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004502:	20a8      	movs	r0, #168	; 0xa8
 8004504:	f003 fb38 	bl	8007b78 <parseZionEEPROM>
 8004508:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <startZionRead+0x1f8>)
 8004510:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <startZionRead+0x1f8>)
 8004518:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <startZionRead+0x1f8>)
 8004520:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3308      	adds	r3, #8
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 800452c:	4b10      	ldr	r3, [pc, #64]	; (8004570 <startZionRead+0x1f8>)
 800452e:	2201      	movs	r2, #1
 8004530:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004532:	20aa      	movs	r0, #170	; 0xaa
 8004534:	f003 fb20 	bl	8007b78 <parseZionEEPROM>
 8004538:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <startZionRead+0x1f8>)
 8004540:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <startZionRead+0x1f8>)
 8004548:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <startZionRead+0x1f8>)
 8004550:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <startZionRead+0x1f8>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004558:	f00a f9cc 	bl	800e8f4 <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 800455c:	f00a f9ca 	bl	800e8f4 <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004560:	bf00      	nop
	  }
    osDelay(400);
 8004562:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004566:	f00a f9cb 	bl	800e900 <osDelay>
	  if(!ZION.zionFinished){
 800456a:	e70d      	b.n	8004388 <startZionRead+0x10>
 800456c:	429a0000 	.word	0x429a0000
 8004570:	2000324c 	.word	0x2000324c
 8004574:	200291b4 	.word	0x200291b4
 8004578:	20000044 	.word	0x20000044
 800457c:	429a0000 	.word	0x429a0000
 8004580:	10624dd3 	.word	0x10624dd3
 8004584:	40020400 	.word	0x40020400

08004588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d101      	bne.n	800459e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800459a:	f003 fd89 	bl	80080b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40001000 	.word	0x40001000

080045ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045b2:	e7fe      	b.n	80045b2 <Error_Handler+0x6>

080045b4 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 80045b8:	2201      	movs	r2, #1
 80045ba:	2102      	movs	r1, #2
 80045bc:	4802      	ldr	r0, [pc, #8]	; (80045c8 <SMLCD_Enable+0x14>)
 80045be:	f005 fa11 	bl	80099e4 <HAL_GPIO_WritePin>
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40022400 	.word	0x40022400

080045cc <initializeDisplay>:
#include "menu.h"

int previousMenu = 0;
float displayAdcValues[21];

void initializeDisplay(){
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b099      	sub	sp, #100	; 0x64
 80045d0:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 80045d2:	f7fc f821 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 80045d6:	4c10      	ldr	r4, [pc, #64]	; (8004618 <initializeDisplay+0x4c>)
 80045d8:	4668      	mov	r0, sp
 80045da:	f104 0310 	add.w	r3, r4, #16
 80045de:	2254      	movs	r2, #84	; 0x54
 80045e0:	4619      	mov	r1, r3
 80045e2:	f00c ffb7 	bl	8011554 <memcpy>
 80045e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045ea:	f7fc f835 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 80045ee:	f7ff ffe1 	bl	80045b4 <SMLCD_Enable>
	SMLCD_Clear();
 80045f2:	f7fc f851 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 80045f6:	2301      	movs	r3, #1
 80045f8:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fc f98d 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 8004602:	f7fc f9b3 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 8004606:	2254      	movs	r2, #84	; 0x54
 8004608:	2100      	movs	r1, #0
 800460a:	4804      	ldr	r0, [pc, #16]	; (800461c <initializeDisplay+0x50>)
 800460c:	f00c ffad 	bl	801156a <memset>
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bd90      	pop	{r4, r7, pc}
 8004618:	20028a40 	.word	0x20028a40
 800461c:	20030a30 	.word	0x20030a30

08004620 <drawMainMenu>:

void drawMainMenu(int indicator){
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 8004628:	4b9a      	ldr	r3, [pc, #616]	; (8004894 <drawMainMenu+0x274>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 800462e:	f7fc f99d 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 8004632:	4b99      	ldr	r3, [pc, #612]	; (8004898 <drawMainMenu+0x278>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8004638:	4b98      	ldr	r3, [pc, #608]	; (800489c <drawMainMenu+0x27c>)
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	4b97      	ldr	r3, [pc, #604]	; (80048a0 <drawMainMenu+0x280>)
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	3b01      	subs	r3, #1
 8004646:	b29b      	uxth	r3, r3
 8004648:	2100      	movs	r1, #0
 800464a:	2000      	movs	r0, #0
 800464c:	f7fc fbe0 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8004650:	4b92      	ldr	r3, [pc, #584]	; (800489c <drawMainMenu+0x27c>)
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	3b03      	subs	r3, #3
 8004656:	b29a      	uxth	r2, r3
 8004658:	4b91      	ldr	r3, [pc, #580]	; (80048a0 <drawMainMenu+0x280>)
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	3b03      	subs	r3, #3
 800465e:	b29b      	uxth	r3, r3
 8004660:	2102      	movs	r1, #2
 8004662:	2002      	movs	r0, #2
 8004664:	f7fc fbd4 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004668:	230a      	movs	r3, #10
 800466a:	60bb      	str	r3, [r7, #8]
	j  = 10;
 800466c:	230a      	movs	r3, #10
 800466e:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	b298      	uxth	r0, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	b299      	uxth	r1, r3
 8004678:	4b8a      	ldr	r3, [pc, #552]	; (80048a4 <drawMainMenu+0x284>)
 800467a:	4a8b      	ldr	r2, [pc, #556]	; (80048a8 <drawMainMenu+0x288>)
 800467c:	f7fc ff56 	bl	800152c <LCD_PutStr>
 8004680:	4603      	mov	r3, r0
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4413      	add	r3, r2
 8004688:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	b298      	uxth	r0, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	b299      	uxth	r1, r3
 8004692:	4b84      	ldr	r3, [pc, #528]	; (80048a4 <drawMainMenu+0x284>)
 8004694:	4a85      	ldr	r2, [pc, #532]	; (80048ac <drawMainMenu+0x28c>)
 8004696:	f7fc ff49 	bl	800152c <LCD_PutStr>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4413      	add	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]
	i+=20;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3314      	adds	r3, #20
 80046a8:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	b298      	uxth	r0, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	b299      	uxth	r1, r3
 80046b2:	4b7c      	ldr	r3, [pc, #496]	; (80048a4 <drawMainMenu+0x284>)
 80046b4:	4a7e      	ldr	r2, [pc, #504]	; (80048b0 <drawMainMenu+0x290>)
 80046b6:	f7fc ff39 	bl	800152c <LCD_PutStr>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	b298      	uxth	r0, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	b299      	uxth	r1, r3
 80046cc:	4b75      	ldr	r3, [pc, #468]	; (80048a4 <drawMainMenu+0x284>)
 80046ce:	4a79      	ldr	r2, [pc, #484]	; (80048b4 <drawMainMenu+0x294>)
 80046d0:	f7fc ff2c 	bl	800152c <LCD_PutStr>
 80046d4:	4603      	mov	r3, r0
 80046d6:	461a      	mov	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4413      	add	r3, r2
 80046dc:	60bb      	str	r3, [r7, #8]
	i  = 135;
 80046de:	2387      	movs	r3, #135	; 0x87
 80046e0:	60bb      	str	r3, [r7, #8]
	j += 14;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	330e      	adds	r3, #14
 80046e6:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	b299      	uxth	r1, r3
 80046ec:	4b6b      	ldr	r3, [pc, #428]	; (800489c <drawMainMenu+0x27c>)
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	3b5e      	subs	r3, #94	; 0x5e
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3303      	adds	r3, #3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2002      	movs	r0, #2
 80046fe:	f7fc fbc9 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	b29b      	uxth	r3, r3
 8004706:	3305      	adds	r3, #5
 8004708:	b298      	uxth	r0, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	b29b      	uxth	r3, r3
 800470e:	3308      	adds	r3, #8
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	b29b      	uxth	r3, r3
 8004716:	2102      	movs	r1, #2
 8004718:	f7fc fbbc 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 800471c:	4b5f      	ldr	r3, [pc, #380]	; (800489c <drawMainMenu+0x27c>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	3b61      	subs	r3, #97	; 0x61
 8004722:	b298      	uxth	r0, r3
 8004724:	4b5d      	ldr	r3, [pc, #372]	; (800489c <drawMainMenu+0x27c>)
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	3b5e      	subs	r3, #94	; 0x5e
 800472a:	b29a      	uxth	r2, r3
 800472c:	4b5c      	ldr	r3, [pc, #368]	; (80048a0 <drawMainMenu+0x280>)
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	3b01      	subs	r3, #1
 8004732:	b29b      	uxth	r3, r3
 8004734:	2102      	movs	r1, #2
 8004736:	f7fc fbad 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-80;
 800473a:	4b58      	ldr	r3, [pc, #352]	; (800489c <drawMainMenu+0x27c>)
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	3b50      	subs	r3, #80	; 0x50
 8004740:	60bb      	str	r3, [r7, #8]
	j  = 3;
 8004742:	2303      	movs	r3, #3
 8004744:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	b298      	uxth	r0, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b02      	subs	r3, #2
 8004750:	b299      	uxth	r1, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	b29b      	uxth	r3, r3
 8004756:	330c      	adds	r3, #12
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	b29b      	uxth	r3, r3
 800475e:	3308      	adds	r3, #8
 8004760:	b29b      	uxth	r3, r3
 8004762:	f7fc fb97 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3314      	adds	r3, #20
 800476a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT1 LED", fnt7x10);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	b298      	uxth	r0, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	b299      	uxth	r1, r3
 8004774:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <drawMainMenu+0x284>)
 8004776:	4a50      	ldr	r2, [pc, #320]	; (80048b8 <drawMainMenu+0x298>)
 8004778:	f7fc fed8 	bl	800152c <LCD_PutStr>
	j+=22;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3316      	adds	r3, #22
 8004780:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004782:	4b46      	ldr	r3, [pc, #280]	; (800489c <drawMainMenu+0x27c>)
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	3b50      	subs	r3, #80	; 0x50
 8004788:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	b298      	uxth	r0, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b02      	subs	r3, #2
 8004794:	b299      	uxth	r1, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	b29b      	uxth	r3, r3
 800479a:	330c      	adds	r3, #12
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3308      	adds	r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f7fc fb75 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3314      	adds	r3, #20
 80047ae:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT2 LED", fnt7x10);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	b298      	uxth	r0, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	b299      	uxth	r1, r3
 80047b8:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <drawMainMenu+0x284>)
 80047ba:	4a40      	ldr	r2, [pc, #256]	; (80048bc <drawMainMenu+0x29c>)
 80047bc:	f7fc feb6 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 80047c0:	4b36      	ldr	r3, [pc, #216]	; (800489c <drawMainMenu+0x27c>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	3b50      	subs	r3, #80	; 0x50
 80047c6:	60bb      	str	r3, [r7, #8]
	j  += 22;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3316      	adds	r3, #22
 80047cc:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	b298      	uxth	r0, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b02      	subs	r3, #2
 80047d8:	b299      	uxth	r1, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	330c      	adds	r3, #12
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3308      	adds	r3, #8
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f7fc fb53 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3314      	adds	r3, #20
 80047f2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3 LED", fnt7x10);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	b298      	uxth	r0, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	b299      	uxth	r1, r3
 80047fc:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <drawMainMenu+0x284>)
 80047fe:	4a30      	ldr	r2, [pc, #192]	; (80048c0 <drawMainMenu+0x2a0>)
 8004800:	f7fc fe94 	bl	800152c <LCD_PutStr>
	j+=22;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3316      	adds	r3, #22
 8004808:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <drawMainMenu+0x27c>)
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	3b50      	subs	r3, #80	; 0x50
 8004810:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	b298      	uxth	r0, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b02      	subs	r3, #2
 800481c:	b299      	uxth	r1, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	b29b      	uxth	r3, r3
 8004822:	330c      	adds	r3, #12
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	b29b      	uxth	r3, r3
 800482a:	3308      	adds	r3, #8
 800482c:	b29b      	uxth	r3, r3
 800482e:	f7fc fb31 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	3314      	adds	r3, #20
 8004836:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4 LED", fnt7x10);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	b298      	uxth	r0, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	b299      	uxth	r1, r3
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <drawMainMenu+0x284>)
 8004842:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <drawMainMenu+0x2a4>)
 8004844:	f7fc fe72 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <drawMainMenu+0x27c>)
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	3b50      	subs	r3, #80	; 0x50
 800484e:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3316      	adds	r3, #22
 8004854:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	b298      	uxth	r0, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b02      	subs	r3, #2
 8004860:	b299      	uxth	r1, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	b29b      	uxth	r3, r3
 8004866:	330c      	adds	r3, #12
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	b29b      	uxth	r3, r3
 800486e:	3308      	adds	r3, #8
 8004870:	b29b      	uxth	r3, r3
 8004872:	f7fc fb0f 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	3314      	adds	r3, #20
 800487a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5 LED", fnt7x10);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	b298      	uxth	r0, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	b299      	uxth	r1, r3
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <drawMainMenu+0x284>)
 8004886:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <drawMainMenu+0x2a8>)
 8004888:	f7fc fe50 	bl	800152c <LCD_PutStr>
	j+=22;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3316      	adds	r3, #22
 8004890:	e01c      	b.n	80048cc <drawMainMenu+0x2ac>
 8004892:	bf00      	nop
 8004894:	20003310 	.word	0x20003310
 8004898:	20028a38 	.word	0x20028a38
 800489c:	20028a3a 	.word	0x20028a3a
 80048a0:	20028a3c 	.word	0x20028a3c
 80048a4:	08015ce4 	.word	0x08015ce4
 80048a8:	08015674 	.word	0x08015674
 80048ac:	0801567c 	.word	0x0801567c
 80048b0:	08015688 	.word	0x08015688
 80048b4:	08015690 	.word	0x08015690
 80048b8:	08015694 	.word	0x08015694
 80048bc:	080156a0 	.word	0x080156a0
 80048c0:	080156ac 	.word	0x080156ac
 80048c4:	080156b8 	.word	0x080156b8
 80048c8:	080156c4 	.word	0x080156c4
 80048cc:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 80048ce:	4b93      	ldr	r3, [pc, #588]	; (8004b1c <drawMainMenu+0x4fc>)
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	3b50      	subs	r3, #80	; 0x50
 80048d4:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	b298      	uxth	r0, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b02      	subs	r3, #2
 80048e0:	b299      	uxth	r1, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	330c      	adds	r3, #12
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3308      	adds	r3, #8
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f7fc facf 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	3314      	adds	r3, #20
 80048fa:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6 LED", fnt7x10);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	b298      	uxth	r0, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	b299      	uxth	r1, r3
 8004904:	4b86      	ldr	r3, [pc, #536]	; (8004b20 <drawMainMenu+0x500>)
 8004906:	4a87      	ldr	r2, [pc, #540]	; (8004b24 <drawMainMenu+0x504>)
 8004908:	f7fc fe10 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 800490c:	4b83      	ldr	r3, [pc, #524]	; (8004b1c <drawMainMenu+0x4fc>)
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	3b50      	subs	r3, #80	; 0x50
 8004912:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3316      	adds	r3, #22
 8004918:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	b298      	uxth	r0, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b02      	subs	r3, #2
 8004924:	b299      	uxth	r1, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	b29b      	uxth	r3, r3
 800492a:	330c      	adds	r3, #12
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	b29b      	uxth	r3, r3
 8004932:	3308      	adds	r3, #8
 8004934:	b29b      	uxth	r3, r3
 8004936:	f7fc faad 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3314      	adds	r3, #20
 800493e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7 LED", fnt7x10);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	b298      	uxth	r0, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	b299      	uxth	r1, r3
 8004948:	4b75      	ldr	r3, [pc, #468]	; (8004b20 <drawMainMenu+0x500>)
 800494a:	4a77      	ldr	r2, [pc, #476]	; (8004b28 <drawMainMenu+0x508>)
 800494c:	f7fc fdee 	bl	800152c <LCD_PutStr>
	j+=22;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3316      	adds	r3, #22
 8004954:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004956:	4b71      	ldr	r3, [pc, #452]	; (8004b1c <drawMainMenu+0x4fc>)
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	3b50      	subs	r3, #80	; 0x50
 800495c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	b298      	uxth	r0, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b02      	subs	r3, #2
 8004968:	b299      	uxth	r1, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	b29b      	uxth	r3, r3
 800496e:	330c      	adds	r3, #12
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	b29b      	uxth	r3, r3
 8004976:	3308      	adds	r3, #8
 8004978:	b29b      	uxth	r3, r3
 800497a:	f7fc fa8b 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3314      	adds	r3, #20
 8004982:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8 LED", fnt7x10);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	b298      	uxth	r0, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	b299      	uxth	r1, r3
 800498c:	4b64      	ldr	r3, [pc, #400]	; (8004b20 <drawMainMenu+0x500>)
 800498e:	4a67      	ldr	r2, [pc, #412]	; (8004b2c <drawMainMenu+0x50c>)
 8004990:	f7fc fdcc 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004994:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <drawMainMenu+0x4fc>)
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	3b50      	subs	r3, #80	; 0x50
 800499a:	60bb      	str	r3, [r7, #8]
	j  +=22;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3316      	adds	r3, #22
 80049a0:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	b298      	uxth	r0, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b02      	subs	r3, #2
 80049ac:	b299      	uxth	r1, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	330c      	adds	r3, #12
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3308      	adds	r3, #8
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f7fc fa69 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3314      	adds	r3, #20
 80049c6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9 LED", fnt7x10);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	b298      	uxth	r0, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	b299      	uxth	r1, r3
 80049d0:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <drawMainMenu+0x500>)
 80049d2:	4a57      	ldr	r2, [pc, #348]	; (8004b30 <drawMainMenu+0x510>)
 80049d4:	f7fc fdaa 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 80049d8:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <drawMainMenu+0x514>)
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	3b14      	subs	r3, #20
 80049de:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 80049e0:	4b4e      	ldr	r3, [pc, #312]	; (8004b1c <drawMainMenu+0x4fc>)
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	3b50      	subs	r3, #80	; 0x50
 80049e6:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	b298      	uxth	r0, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b02      	subs	r3, #2
 80049f2:	b299      	uxth	r1, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	330c      	adds	r3, #12
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3308      	adds	r3, #8
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f7fc fa46 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	b298      	uxth	r0, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	b299      	uxth	r1, r3
 8004a16:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <drawMainMenu+0x500>)
 8004a18:	4a47      	ldr	r2, [pc, #284]	; (8004b38 <drawMainMenu+0x518>)
 8004a1a:	f7fc fd87 	bl	800152c <LCD_PutStr>

	i=100;
 8004a1e:	2364      	movs	r3, #100	; 0x64
 8004a20:	60bb      	str	r3, [r7, #8]
	j=75;
 8004a22:	234b      	movs	r3, #75	; 0x4b
 8004a24:	60fb      	str	r3, [r7, #12]
	i+=20;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	b298      	uxth	r0, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	b299      	uxth	r1, r3
 8004a34:	4b3a      	ldr	r3, [pc, #232]	; (8004b20 <drawMainMenu+0x500>)
 8004a36:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <drawMainMenu+0x51c>)
 8004a38:	f7fc fd78 	bl	800152c <LCD_PutStr>
	j+=15;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	330f      	adds	r3, #15
 8004a40:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b03      	subs	r3, #3
 8004a48:	b298      	uxth	r0, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b02      	subs	r3, #2
 8004a50:	b299      	uxth	r1, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3347      	adds	r3, #71	; 0x47
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3302      	adds	r3, #2
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f7fc fa17 	bl	8000e94 <LCD_FillRect>

	i=100;
 8004a66:	2364      	movs	r3, #100	; 0x64
 8004a68:	60bb      	str	r3, [r7, #8]
	j=110;
 8004a6a:	236e      	movs	r3, #110	; 0x6e
 8004a6c:	60fb      	str	r3, [r7, #12]
	i+=20;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3314      	adds	r3, #20
 8004a72:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	b298      	uxth	r0, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	b299      	uxth	r1, r3
 8004a7c:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <drawMainMenu+0x500>)
 8004a7e:	4a30      	ldr	r2, [pc, #192]	; (8004b40 <drawMainMenu+0x520>)
 8004a80:	f7fc fd54 	bl	800152c <LCD_PutStr>
	j+=15;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	330f      	adds	r3, #15
 8004a88:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b03      	subs	r3, #3
 8004a90:	b298      	uxth	r0, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b02      	subs	r3, #2
 8004a98:	b299      	uxth	r1, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3332      	adds	r3, #50	; 0x32
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3302      	adds	r3, #2
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f7fc f9f3 	bl	8000e94 <LCD_FillRect>

	i=100;
 8004aae:	2364      	movs	r3, #100	; 0x64
 8004ab0:	60bb      	str	r3, [r7, #8]
	j=145;
 8004ab2:	2391      	movs	r3, #145	; 0x91
 8004ab4:	60fb      	str	r3, [r7, #12]
	i+=20;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	3314      	adds	r3, #20
 8004aba:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	b298      	uxth	r0, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	b299      	uxth	r1, r3
 8004ac4:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <drawMainMenu+0x500>)
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <drawMainMenu+0x524>)
 8004ac8:	f7fc fd30 	bl	800152c <LCD_PutStr>
	j+=15;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	330f      	adds	r3, #15
 8004ad0:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b03      	subs	r3, #3
 8004ad8:	b298      	uxth	r0, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b02      	subs	r3, #2
 8004ae0:	b299      	uxth	r1, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3355      	adds	r3, #85	; 0x55
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3302      	adds	r3, #2
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f7fc f9cf 	bl	8000e94 <LCD_FillRect>
	i=100;
 8004af6:	2364      	movs	r3, #100	; 0x64
 8004af8:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d006      	beq.n	8004b0e <drawMainMenu+0x4ee>
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d007      	beq.n	8004b14 <drawMainMenu+0x4f4>
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d11f      	bne.n	8004b48 <drawMainMenu+0x528>
	case FIRST:
	{
		j=75;
 8004b08:	234b      	movs	r3, #75	; 0x4b
 8004b0a:	60fb      	str	r3, [r7, #12]
		break;
 8004b0c:	e01f      	b.n	8004b4e <drawMainMenu+0x52e>
	}
	case SECOND:
	{
		j=110;
 8004b0e:	236e      	movs	r3, #110	; 0x6e
 8004b10:	60fb      	str	r3, [r7, #12]
		break;
 8004b12:	e01c      	b.n	8004b4e <drawMainMenu+0x52e>
	}
	case THIRD:
	{
		j=145;
 8004b14:	2391      	movs	r3, #145	; 0x91
 8004b16:	60fb      	str	r3, [r7, #12]
		break;
 8004b18:	e019      	b.n	8004b4e <drawMainMenu+0x52e>
 8004b1a:	bf00      	nop
 8004b1c:	20028a3a 	.word	0x20028a3a
 8004b20:	08015ce4 	.word	0x08015ce4
 8004b24:	080156d0 	.word	0x080156d0
 8004b28:	080156dc 	.word	0x080156dc
 8004b2c:	080156e8 	.word	0x080156e8
 8004b30:	080156f4 	.word	0x080156f4
 8004b34:	20028a3c 	.word	0x20028a3c
 8004b38:	08015700 	.word	0x08015700
 8004b3c:	08015708 	.word	0x08015708
 8004b40:	08015714 	.word	0x08015714
 8004b44:	0801571c 	.word	0x0801571c
	}
	default:
	{
		j=75;
 8004b48:	234b      	movs	r3, #75	; 0x4b
 8004b4a:	60fb      	str	r3, [r7, #12]
		break;
 8004b4c:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	b298      	uxth	r0, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	b299      	uxth	r1, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	330a      	adds	r3, #10
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f7fc f995 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 8004b6a:	f7fb fdb5 	bl	80006d8 <SMLCD_Flush>
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop

08004b78 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b090      	sub	sp, #64	; 0x40
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8004b80:	2314      	movs	r3, #20
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
	int inputGpioAlignment=245;
 8004b84:	23f5      	movs	r3, #245	; 0xf5
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
	int daughterCardAlignment=240;
 8004b88:	23f0      	movs	r3, #240	; 0xf0
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
	int i2cCheck;
	int arrowUp = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	623b      	str	r3, [r7, #32]
	int arrowDown=1;
 8004b90:	2301      	movs	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
	int arrowSize=3;
 8004b94:	2303      	movs	r3, #3
 8004b96:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <drawStatusMenu+0x50>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8004b9e:	f7fb fee5 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <drawStatusMenu+0x54>)
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <drawStatusMenu+0x54>)
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	4013      	ands	r3, r2
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <drawStatusMenu+0x54>)
 8004bb0:	789b      	ldrb	r3, [r3, #2]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01a      	beq.n	8004bf0 <drawStatusMenu+0x78>
 		  adcValuePointer = getADCValues();
 8004bba:	f7fe fd4f 	bl	800365c <getADCValues>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc6:	e010      	b.n	8004bea <drawStatusMenu+0x72>
 8004bc8:	20003310 	.word	0x20003310
 8004bcc:	200291b4 	.word	0x200291b4
	  		  displayAdcValues[i]=*adcValuePointer;
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	499d      	ldr	r1, [pc, #628]	; (8004e4c <drawStatusMenu+0x2d4>)
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	3304      	adds	r3, #4
 8004be2:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 8004be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be6:	3301      	adds	r3, #1
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	2b13      	cmp	r3, #19
 8004bee:	ddef      	ble.n	8004bd0 <drawStatusMenu+0x58>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 8004bf0:	4b97      	ldr	r3, [pc, #604]	; (8004e50 <drawStatusMenu+0x2d8>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8004bf6:	4b97      	ldr	r3, [pc, #604]	; (8004e54 <drawStatusMenu+0x2dc>)
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	4b96      	ldr	r3, [pc, #600]	; (8004e58 <drawStatusMenu+0x2e0>)
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2100      	movs	r1, #0
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f7fc f901 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8004c0e:	4b91      	ldr	r3, [pc, #580]	; (8004e54 <drawStatusMenu+0x2dc>)
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	3b03      	subs	r3, #3
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	4b90      	ldr	r3, [pc, #576]	; (8004e58 <drawStatusMenu+0x2e0>)
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	3b03      	subs	r3, #3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2102      	movs	r1, #2
 8004c20:	2002      	movs	r0, #2
 8004c22:	f7fc f8f5 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004c26:	230a      	movs	r3, #10
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
	j  = 10;
 8004c2a:	230a      	movs	r3, #10
 8004c2c:	617b      	str	r3, [r7, #20]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	b298      	uxth	r0, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	b299      	uxth	r1, r3
 8004c36:	4b89      	ldr	r3, [pc, #548]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004c38:	4a89      	ldr	r2, [pc, #548]	; (8004e60 <drawStatusMenu+0x2e8>)
 8004c3a:	f7fc fc77 	bl	800152c <LCD_PutStr>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	461a      	mov	r2, r3
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	4413      	add	r3, r2
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	b298      	uxth	r0, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	4b82      	ldr	r3, [pc, #520]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004c52:	4a84      	ldr	r2, [pc, #528]	; (8004e64 <drawStatusMenu+0x2ec>)
 8004c54:	f7fc fc6a 	bl	800152c <LCD_PutStr>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5e:	4413      	add	r3, r2
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
	i+=170;
 8004c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c64:	33aa      	adds	r3, #170	; 0xaa
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8004c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6a:	b298      	uxth	r0, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	b299      	uxth	r1, r3
 8004c70:	4b7a      	ldr	r3, [pc, #488]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004c72:	4a7d      	ldr	r2, [pc, #500]	; (8004e68 <drawStatusMenu+0x2f0>)
 8004c74:	f7fc fc5a 	bl	800152c <LCD_PutStr>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	4413      	add	r3, r2
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8004c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c84:	b298      	uxth	r0, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	b299      	uxth	r1, r3
 8004c8a:	4b74      	ldr	r3, [pc, #464]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004c8c:	4a77      	ldr	r2, [pc, #476]	; (8004e6c <drawStatusMenu+0x2f4>)
 8004c8e:	f7fc fc4d 	bl	800152c <LCD_PutStr>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c98:	4413      	add	r3, r2
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
	i  = 135;
 8004c9c:	2387      	movs	r3, #135	; 0x87
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
	j += 12;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	617b      	str	r3, [r7, #20]

	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	b299      	uxth	r1, r3
 8004caa:	4b6a      	ldr	r3, [pc, #424]	; (8004e54 <drawStatusMenu+0x2dc>)
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	3b02      	subs	r3, #2
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3303      	adds	r3, #3
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2002      	movs	r0, #2
 8004cbc:	f7fc f8ea 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	f000 81e6 	beq.w	8005094 <drawStatusMenu+0x51c>
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	f000 8783 	beq.w	8005bd4 <drawStatusMenu+0x105c>
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	f041 8096 	bne.w	8005e00 <drawStatusMenu+0x1288>
	case 1:{
		i=35;
 8004cd4:	2323      	movs	r3, #35	; 0x23
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 8004cd8:	235a      	movs	r3, #90	; 0x5a
 8004cda:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b02      	subs	r3, #2
 8004ce2:	b299      	uxth	r1, r3
 8004ce4:	4b5b      	ldr	r3, [pc, #364]	; (8004e54 <drawStatusMenu+0x2dc>)
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	3b02      	subs	r3, #2
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2002      	movs	r0, #2
 8004cf6:	f7fc f8cd 	bl	8000e94 <LCD_FillRect>
		j=75;
 8004cfa:	234b      	movs	r3, #75	; 0x4b
 8004cfc:	617b      	str	r3, [r7, #20]
		i=62;
 8004cfe:	233e      	movs	r3, #62	; 0x3e
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	b298      	uxth	r0, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	b299      	uxth	r1, r3
 8004d0a:	4b54      	ldr	r3, [pc, #336]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004d0c:	4a54      	ldr	r2, [pc, #336]	; (8004e60 <drawStatusMenu+0x2e8>)
 8004d0e:	f7fc fc0d 	bl	800152c <LCD_PutStr>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461a      	mov	r2, r3
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	4413      	add	r3, r2
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=145;
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	3391      	adds	r3, #145	; 0x91
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	b298      	uxth	r0, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	b299      	uxth	r1, r3
 8004d2a:	4b4c      	ldr	r3, [pc, #304]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004d2c:	4a50      	ldr	r2, [pc, #320]	; (8004e70 <drawStatusMenu+0x2f8>)
 8004d2e:	f7fc fbfd 	bl	800152c <LCD_PutStr>

		i=10;
 8004d32:	230a      	movs	r3, #10
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 8004d36:	235f      	movs	r3, #95	; 0x5f
 8004d38:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault0: ", fnt7x10);
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3c:	b298      	uxth	r0, r3
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	b299      	uxth	r1, r3
 8004d42:	4b46      	ldr	r3, [pc, #280]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004d44:	4a4b      	ldr	r2, [pc, #300]	; (8004e74 <drawStatusMenu+0x2fc>)
 8004d46:	f7fc fbf1 	bl	800152c <LCD_PutStr>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	4413      	add	r3, r2
 8004d52:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d56:	b298      	uxth	r0, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	b299      	uxth	r1, r3
 8004d5c:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004d5e:	4a46      	ldr	r2, [pc, #280]	; (8004e78 <drawStatusMenu+0x300>)
 8004d60:	f7fc fbe4 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	b298      	uxth	r0, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	b299      	uxth	r1, r3
 8004d70:	4b3a      	ldr	r3, [pc, #232]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004d72:	4a42      	ldr	r2, [pc, #264]	; (8004e7c <drawStatusMenu+0x304>)
 8004d74:	f7fc fbda 	bl	800152c <LCD_PutStr>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	4413      	add	r3, r2
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	b298      	uxth	r0, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	b299      	uxth	r1, r3
 8004d8a:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004d8c:	4a3a      	ldr	r2, [pc, #232]	; (8004e78 <drawStatusMenu+0x300>)
 8004d8e:	f7fc fbcd 	bl	800152c <LCD_PutStr>

		i=10;
 8004d92:	230a      	movs	r3, #10
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	330f      	adds	r3, #15
 8004d9a:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault1: ", fnt7x10);
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	b298      	uxth	r0, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	b299      	uxth	r1, r3
 8004da4:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004da6:	4a36      	ldr	r2, [pc, #216]	; (8004e80 <drawStatusMenu+0x308>)
 8004da8:	f7fc fbc0 	bl	800152c <LCD_PutStr>
 8004dac:	4603      	mov	r3, r0
 8004dae:	461a      	mov	r2, r3
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	4413      	add	r3, r2
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db8:	b298      	uxth	r0, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	b299      	uxth	r1, r3
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <drawStatusMenu+0x300>)
 8004dc2:	f7fc fbb3 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	b298      	uxth	r0, r3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	b299      	uxth	r1, r3
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004dd4:	4a2b      	ldr	r2, [pc, #172]	; (8004e84 <drawStatusMenu+0x30c>)
 8004dd6:	f7fc fba9 	bl	800152c <LCD_PutStr>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de0:	4413      	add	r3, r2
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	b298      	uxth	r0, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	b299      	uxth	r1, r3
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004dee:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <drawStatusMenu+0x300>)
 8004df0:	f7fc fb9c 	bl	800152c <LCD_PutStr>

		i=10;
 8004df4:	230a      	movs	r3, #10
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	330f      	adds	r3, #15
 8004dfc:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault2: ", fnt7x10);
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	b298      	uxth	r0, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	b299      	uxth	r1, r3
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <drawStatusMenu+0x310>)
 8004e0a:	f7fc fb8f 	bl	800152c <LCD_PutStr>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461a      	mov	r2, r3
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	4413      	add	r3, r2
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	b298      	uxth	r0, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	b299      	uxth	r1, r3
 8004e20:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <drawStatusMenu+0x300>)
 8004e24:	f7fc fb82 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	b298      	uxth	r0, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	b299      	uxth	r1, r3
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <drawStatusMenu+0x2e4>)
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <drawStatusMenu+0x314>)
 8004e38:	f7fc fb78 	bl	800152c <LCD_PutStr>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e42:	4413      	add	r3, r2
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	b298      	uxth	r0, r3
 8004e4a:	e021      	b.n	8004e90 <drawStatusMenu+0x318>
 8004e4c:	20030a30 	.word	0x20030a30
 8004e50:	20028a38 	.word	0x20028a38
 8004e54:	20028a3a 	.word	0x20028a3a
 8004e58:	20028a3c 	.word	0x20028a3c
 8004e5c:	08015ce4 	.word	0x08015ce4
 8004e60:	08015674 	.word	0x08015674
 8004e64:	0801567c 	.word	0x0801567c
 8004e68:	08015688 	.word	0x08015688
 8004e6c:	08015690 	.word	0x08015690
 8004e70:	08015728 	.word	0x08015728
 8004e74:	08015738 	.word	0x08015738
 8004e78:	08015744 	.word	0x08015744
 8004e7c:	08015750 	.word	0x08015750
 8004e80:	08015758 	.word	0x08015758
 8004e84:	08015764 	.word	0x08015764
 8004e88:	0801576c 	.word	0x0801576c
 8004e8c:	08015778 	.word	0x08015778
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	b299      	uxth	r1, r3
 8004e94:	4b75      	ldr	r3, [pc, #468]	; (800506c <drawStatusMenu+0x4f4>)
 8004e96:	4a76      	ldr	r2, [pc, #472]	; (8005070 <drawStatusMenu+0x4f8>)
 8004e98:	f7fc fb48 	bl	800152c <LCD_PutStr>

		i=10;
 8004e9c:	230a      	movs	r3, #10
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	330f      	adds	r3, #15
 8004ea4:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea8:	b298      	uxth	r0, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	b299      	uxth	r1, r3
 8004eae:	4b6f      	ldr	r3, [pc, #444]	; (800506c <drawStatusMenu+0x4f4>)
 8004eb0:	4a70      	ldr	r2, [pc, #448]	; (8005074 <drawStatusMenu+0x4fc>)
 8004eb2:	f7fc fb3b 	bl	800152c <LCD_PutStr>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebc:	4413      	add	r3, r2
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	b298      	uxth	r0, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	b299      	uxth	r1, r3
 8004ec8:	4b68      	ldr	r3, [pc, #416]	; (800506c <drawStatusMenu+0x4f4>)
 8004eca:	4a69      	ldr	r2, [pc, #420]	; (8005070 <drawStatusMenu+0x4f8>)
 8004ecc:	f7fc fb2e 	bl	800152c <LCD_PutStr>

		i=10;
 8004ed0:	230a      	movs	r3, #10
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	330f      	adds	r3, #15
 8004ed8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	b298      	uxth	r0, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	b299      	uxth	r1, r3
 8004ee2:	4b62      	ldr	r3, [pc, #392]	; (800506c <drawStatusMenu+0x4f4>)
 8004ee4:	4a64      	ldr	r2, [pc, #400]	; (8005078 <drawStatusMenu+0x500>)
 8004ee6:	f7fc fb21 	bl	800152c <LCD_PutStr>
 8004eea:	4603      	mov	r3, r0
 8004eec:	461a      	mov	r2, r3
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	4413      	add	r3, r2
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef6:	b298      	uxth	r0, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	b299      	uxth	r1, r3
 8004efc:	4b5b      	ldr	r3, [pc, #364]	; (800506c <drawStatusMenu+0x4f4>)
 8004efe:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <drawStatusMenu+0x4f8>)
 8004f00:	f7fc fb14 	bl	800152c <LCD_PutStr>

		i=10;
 8004f04:	230a      	movs	r3, #10
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	330f      	adds	r3, #15
 8004f0c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	b298      	uxth	r0, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	b299      	uxth	r1, r3
 8004f16:	4b55      	ldr	r3, [pc, #340]	; (800506c <drawStatusMenu+0x4f4>)
 8004f18:	4a58      	ldr	r2, [pc, #352]	; (800507c <drawStatusMenu+0x504>)
 8004f1a:	f7fc fb07 	bl	800152c <LCD_PutStr>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	461a      	mov	r2, r3
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	4413      	add	r3, r2
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	b298      	uxth	r0, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	b299      	uxth	r1, r3
 8004f30:	4b4e      	ldr	r3, [pc, #312]	; (800506c <drawStatusMenu+0x4f4>)
 8004f32:	4a4f      	ldr	r2, [pc, #316]	; (8005070 <drawStatusMenu+0x4f8>)
 8004f34:	f7fc fafa 	bl	800152c <LCD_PutStr>

		i=10;
 8004f38:	230a      	movs	r3, #10
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	330f      	adds	r3, #15
 8004f40:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 8004f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f44:	b298      	uxth	r0, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	b299      	uxth	r1, r3
 8004f4a:	4b48      	ldr	r3, [pc, #288]	; (800506c <drawStatusMenu+0x4f4>)
 8004f4c:	4a4c      	ldr	r2, [pc, #304]	; (8005080 <drawStatusMenu+0x508>)
 8004f4e:	f7fc faed 	bl	800152c <LCD_PutStr>
 8004f52:	4603      	mov	r3, r0
 8004f54:	461a      	mov	r2, r3
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	4413      	add	r3, r2
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	b298      	uxth	r0, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	b299      	uxth	r1, r3
 8004f64:	4b41      	ldr	r3, [pc, #260]	; (800506c <drawStatusMenu+0x4f4>)
 8004f66:	4a42      	ldr	r2, [pc, #264]	; (8005070 <drawStatusMenu+0x4f8>)
 8004f68:	f7fc fae0 	bl	800152c <LCD_PutStr>

		i=10;
 8004f6c:	230a      	movs	r3, #10
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	330f      	adds	r3, #15
 8004f74:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	b298      	uxth	r0, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	b299      	uxth	r1, r3
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <drawStatusMenu+0x4f4>)
 8004f80:	4a40      	ldr	r2, [pc, #256]	; (8005084 <drawStatusMenu+0x50c>)
 8004f82:	f7fc fad3 	bl	800152c <LCD_PutStr>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	4413      	add	r3, r2
 8004f8e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f92:	b298      	uxth	r0, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	b299      	uxth	r1, r3
 8004f98:	4b34      	ldr	r3, [pc, #208]	; (800506c <drawStatusMenu+0x4f4>)
 8004f9a:	4a35      	ldr	r2, [pc, #212]	; (8005070 <drawStatusMenu+0x4f8>)
 8004f9c:	f7fc fac6 	bl	800152c <LCD_PutStr>

		i=10;
 8004fa0:	230a      	movs	r3, #10
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	330f      	adds	r3, #15
 8004fa8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	b298      	uxth	r0, r3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	b299      	uxth	r1, r3
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	; (800506c <drawStatusMenu+0x4f4>)
 8004fb4:	4a34      	ldr	r2, [pc, #208]	; (8005088 <drawStatusMenu+0x510>)
 8004fb6:	f7fc fab9 	bl	800152c <LCD_PutStr>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc0:	4413      	add	r3, r2
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc6:	b298      	uxth	r0, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	b299      	uxth	r1, r3
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <drawStatusMenu+0x4f4>)
 8004fce:	4a28      	ldr	r2, [pc, #160]	; (8005070 <drawStatusMenu+0x4f8>)
 8004fd0:	f7fc faac 	bl	800152c <LCD_PutStr>


		//horizontal divider
		j=65;
 8004fd4:	2341      	movs	r3, #65	; 0x41
 8004fd6:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b299      	uxth	r1, r3
 8004fe0:	4b2a      	ldr	r3, [pc, #168]	; (800508c <drawStatusMenu+0x514>)
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	3b02      	subs	r3, #2
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3301      	adds	r3, #1
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2002      	movs	r0, #2
 8004ff2:	f7fb ff4f 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8004ff6:	23e6      	movs	r3, #230	; 0xe6
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b03      	subs	r3, #3
 8005000:	b298      	uxth	r0, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	b299      	uxth	r1, r3
 8005006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005008:	b29b      	uxth	r3, r3
 800500a:	3303      	adds	r3, #3
 800500c:	b29a      	uxth	r2, r3
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <drawStatusMenu+0x518>)
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	3b02      	subs	r3, #2
 8005014:	b29b      	uxth	r3, r3
 8005016:	f7fb ff3d 	bl	8000e94 <LCD_FillRect>

		i=200;
 800501a:	23c8      	movs	r3, #200	; 0xc8
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 800501e:	23dc      	movs	r3, #220	; 0xdc
 8005020:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	b298      	uxth	r0, r3
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	b299      	uxth	r1, r3
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	b29a      	uxth	r2, r3
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f7fc fbcb 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005036:	23b4      	movs	r3, #180	; 0xb4
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503c:	b298      	uxth	r0, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	b299      	uxth	r1, r3
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	b29a      	uxth	r2, r3
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f7fc fbbf 	bl	80017cc <drawUpDownArrow>
		i=220;
 800504e:	23dc      	movs	r3, #220	; 0xdc
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	b298      	uxth	r0, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	b299      	uxth	r1, r3
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	b29a      	uxth	r2, r3
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f7fc fbb3 	bl	80017cc <drawUpDownArrow>
		break;
 8005066:	f000 becb 	b.w	8005e00 <drawStatusMenu+0x1288>
 800506a:	bf00      	nop
 800506c:	08015ce4 	.word	0x08015ce4
 8005070:	08015744 	.word	0x08015744
 8005074:	08015784 	.word	0x08015784
 8005078:	08015790 	.word	0x08015790
 800507c:	0801579c 	.word	0x0801579c
 8005080:	080157a8 	.word	0x080157a8
 8005084:	080157b4 	.word	0x080157b4
 8005088:	080157c0 	.word	0x080157c0
 800508c:	20028a3a 	.word	0x20028a3a
 8005090:	20028a3c 	.word	0x20028a3c
	}
	case 2:{
		i=35;
 8005094:	2323      	movs	r3, #35	; 0x23
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 8005098:	235a      	movs	r3, #90	; 0x5a
 800509a:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b02      	subs	r3, #2
 80050a2:	b299      	uxth	r1, r3
 80050a4:	4ba4      	ldr	r3, [pc, #656]	; (8005338 <drawStatusMenu+0x7c0>)
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	3b02      	subs	r3, #2
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3302      	adds	r3, #2
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2002      	movs	r0, #2
 80050b6:	f7fb feed 	bl	8000e94 <LCD_FillRect>
		j=75;
 80050ba:	234b      	movs	r3, #75	; 0x4b
 80050bc:	617b      	str	r3, [r7, #20]
		i=42;
 80050be:	232a      	movs	r3, #42	; 0x2a
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	b298      	uxth	r0, r3
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	b299      	uxth	r1, r3
 80050ca:	4b9c      	ldr	r3, [pc, #624]	; (800533c <drawStatusMenu+0x7c4>)
 80050cc:	4a9c      	ldr	r2, [pc, #624]	; (8005340 <drawStatusMenu+0x7c8>)
 80050ce:	f7fc fa2d 	bl	800152c <LCD_PutStr>
 80050d2:	4603      	mov	r3, r0
 80050d4:	461a      	mov	r2, r3
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	4413      	add	r3, r2
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
		i+=125;
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	337d      	adds	r3, #125	; 0x7d
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	b298      	uxth	r0, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	b299      	uxth	r1, r3
 80050ea:	4b94      	ldr	r3, [pc, #592]	; (800533c <drawStatusMenu+0x7c4>)
 80050ec:	4a95      	ldr	r2, [pc, #596]	; (8005344 <drawStatusMenu+0x7cc>)
 80050ee:	f7fc fa1d 	bl	800152c <LCD_PutStr>

		i=10;
 80050f2:	230a      	movs	r3, #10
 80050f4:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 80050f6:	235f      	movs	r3, #95	; 0x5f
 80050f8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 80050fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fc:	b298      	uxth	r0, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	b299      	uxth	r1, r3
 8005102:	4b8e      	ldr	r3, [pc, #568]	; (800533c <drawStatusMenu+0x7c4>)
 8005104:	4a90      	ldr	r2, [pc, #576]	; (8005348 <drawStatusMenu+0x7d0>)
 8005106:	f7fc fa11 	bl	800152c <LCD_PutStr>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	4413      	add	r3, r2
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8005114:	4b8d      	ldr	r3, [pc, #564]	; (800534c <drawStatusMenu+0x7d4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a8d      	ldr	r2, [pc, #564]	; (8005350 <drawStatusMenu+0x7d8>)
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	edd3 7a00 	vldr	s15, [r3]
 8005122:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005354 <drawStatusMenu+0x7dc>
 8005126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800512a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800512e:	ee17 3a90 	vmov	r3, s15
 8005132:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	b298      	uxth	r0, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	b299      	uxth	r1, r3
 800513c:	4b7f      	ldr	r3, [pc, #508]	; (800533c <drawStatusMenu+0x7c4>)
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2303      	movs	r3, #3
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	f7fc fa90 	bl	8001668 <LCD_PutIntF>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	4413      	add	r3, r2
 8005150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005152:	4413      	add	r3, r2
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	b298      	uxth	r0, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	b299      	uxth	r1, r3
 800515e:	4b77      	ldr	r3, [pc, #476]	; (800533c <drawStatusMenu+0x7c4>)
 8005160:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <drawStatusMenu+0x7e0>)
 8005162:	f7fc f9e3 	bl	800152c <LCD_PutStr>
 8005166:	4603      	mov	r3, r0
 8005168:	461a      	mov	r2, r3
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	4413      	add	r3, r2
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8005170:	4b76      	ldr	r3, [pc, #472]	; (800534c <drawStatusMenu+0x7d4>)
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	4a76      	ldr	r2, [pc, #472]	; (8005350 <drawStatusMenu+0x7d8>)
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	edd3 7a00 	vldr	s15, [r3]
 800517e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005354 <drawStatusMenu+0x7dc>
 8005182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800518a:	ee17 3a90 	vmov	r3, s15
 800518e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005192:	b298      	uxth	r0, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	b299      	uxth	r1, r3
 8005198:	4b68      	ldr	r3, [pc, #416]	; (800533c <drawStatusMenu+0x7c4>)
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	2303      	movs	r3, #3
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	f7fc fa62 	bl	8001668 <LCD_PutIntF>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	4413      	add	r3, r2
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 80051b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b4:	b298      	uxth	r0, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	b299      	uxth	r1, r3
 80051ba:	4b60      	ldr	r3, [pc, #384]	; (800533c <drawStatusMenu+0x7c4>)
 80051bc:	4a67      	ldr	r2, [pc, #412]	; (800535c <drawStatusMenu+0x7e4>)
 80051be:	f7fc f9b5 	bl	800152c <LCD_PutStr>
 80051c2:	4603      	mov	r3, r0
 80051c4:	461a      	mov	r2, r3
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	4413      	add	r3, r2
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	b298      	uxth	r0, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	b299      	uxth	r1, r3
 80051d4:	4b62      	ldr	r3, [pc, #392]	; (8005360 <drawStatusMenu+0x7e8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a62      	ldr	r2, [pc, #392]	; (8005364 <drawStatusMenu+0x7ec>)
 80051da:	5cd3      	ldrb	r3, [r2, r3]
 80051dc:	461a      	mov	r2, r3
 80051de:	4b57      	ldr	r3, [pc, #348]	; (800533c <drawStatusMenu+0x7c4>)
 80051e0:	f7fc f9dc 	bl	800159c <LCD_PutInt>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	4413      	add	r3, r2
 80051ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ee:	4413      	add	r3, r2
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	b298      	uxth	r0, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	b299      	uxth	r1, r3
 80051fa:	4b50      	ldr	r3, [pc, #320]	; (800533c <drawStatusMenu+0x7c4>)
 80051fc:	4a5a      	ldr	r2, [pc, #360]	; (8005368 <drawStatusMenu+0x7f0>)
 80051fe:	f7fc f995 	bl	800152c <LCD_PutStr>
 8005202:	4603      	mov	r3, r0
 8005204:	461a      	mov	r2, r3
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005208:	4413      	add	r3, r2
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	b298      	uxth	r0, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	b299      	uxth	r1, r3
 8005214:	4b52      	ldr	r3, [pc, #328]	; (8005360 <drawStatusMenu+0x7e8>)
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	4a52      	ldr	r2, [pc, #328]	; (8005364 <drawStatusMenu+0x7ec>)
 800521a:	5cd3      	ldrb	r3, [r2, r3]
 800521c:	461a      	mov	r2, r3
 800521e:	4b47      	ldr	r3, [pc, #284]	; (800533c <drawStatusMenu+0x7c4>)
 8005220:	f7fc f9bc 	bl	800159c <LCD_PutInt>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522a:	4413      	add	r3, r2
 800522c:	637b      	str	r3, [r7, #52]	; 0x34


		i=10;
 800522e:	230a      	movs	r3, #10
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	330f      	adds	r3, #15
 8005236:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 8005238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523a:	b298      	uxth	r0, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	b299      	uxth	r1, r3
 8005240:	4b3e      	ldr	r3, [pc, #248]	; (800533c <drawStatusMenu+0x7c4>)
 8005242:	4a4a      	ldr	r2, [pc, #296]	; (800536c <drawStatusMenu+0x7f4>)
 8005244:	f7fc f972 	bl	800152c <LCD_PutStr>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	4413      	add	r3, r2
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8005252:	4b3e      	ldr	r3, [pc, #248]	; (800534c <drawStatusMenu+0x7d4>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	4a3e      	ldr	r2, [pc, #248]	; (8005350 <drawStatusMenu+0x7d8>)
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005354 <drawStatusMenu+0x7dc>
 8005264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800526c:	ee17 3a90 	vmov	r3, s15
 8005270:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	b298      	uxth	r0, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	b299      	uxth	r1, r3
 800527a:	4b30      	ldr	r3, [pc, #192]	; (800533c <drawStatusMenu+0x7c4>)
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2303      	movs	r3, #3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	f7fc f9f1 	bl	8001668 <LCD_PutIntF>
 8005286:	4603      	mov	r3, r0
 8005288:	461a      	mov	r2, r3
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	4413      	add	r3, r2
 800528e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005290:	4413      	add	r3, r2
 8005292:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	b298      	uxth	r0, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	b299      	uxth	r1, r3
 800529c:	4b27      	ldr	r3, [pc, #156]	; (800533c <drawStatusMenu+0x7c4>)
 800529e:	4a34      	ldr	r2, [pc, #208]	; (8005370 <drawStatusMenu+0x7f8>)
 80052a0:	f7fc f944 	bl	800152c <LCD_PutStr>
 80052a4:	4603      	mov	r3, r0
 80052a6:	461a      	mov	r2, r3
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	4413      	add	r3, r2
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 80052ae:	4b27      	ldr	r3, [pc, #156]	; (800534c <drawStatusMenu+0x7d4>)
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	4a27      	ldr	r2, [pc, #156]	; (8005350 <drawStatusMenu+0x7d8>)
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	edd3 7a00 	vldr	s15, [r3]
 80052bc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005354 <drawStatusMenu+0x7dc>
 80052c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052c8:	ee17 3a90 	vmov	r3, s15
 80052cc:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	b298      	uxth	r0, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	b299      	uxth	r1, r3
 80052d6:	4b19      	ldr	r3, [pc, #100]	; (800533c <drawStatusMenu+0x7c4>)
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2303      	movs	r3, #3
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	f7fc f9c3 	bl	8001668 <LCD_PutIntF>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	4413      	add	r3, r2
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	b298      	uxth	r0, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	b299      	uxth	r1, r3
 80052f8:	4b10      	ldr	r3, [pc, #64]	; (800533c <drawStatusMenu+0x7c4>)
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <drawStatusMenu+0x7fc>)
 80052fc:	f7fc f916 	bl	800152c <LCD_PutStr>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	4413      	add	r3, r2
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	b298      	uxth	r0, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	b299      	uxth	r1, r3
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <drawStatusMenu+0x7e8>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4a13      	ldr	r2, [pc, #76]	; (8005364 <drawStatusMenu+0x7ec>)
 8005318:	5cd3      	ldrb	r3, [r2, r3]
 800531a:	461a      	mov	r2, r3
 800531c:	4b07      	ldr	r3, [pc, #28]	; (800533c <drawStatusMenu+0x7c4>)
 800531e:	f7fc f93d 	bl	800159c <LCD_PutInt>
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	4413      	add	r3, r2
 800532a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532c:	4413      	add	r3, r2
 800532e:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	b298      	uxth	r0, r3
 8005334:	e020      	b.n	8005378 <drawStatusMenu+0x800>
 8005336:	bf00      	nop
 8005338:	20028a3a 	.word	0x20028a3a
 800533c:	08015ce4 	.word	0x08015ce4
 8005340:	080157cc 	.word	0x080157cc
 8005344:	080157dc 	.word	0x080157dc
 8005348:	080157ec 	.word	0x080157ec
 800534c:	20000100 	.word	0x20000100
 8005350:	20030a30 	.word	0x20030a30
 8005354:	447a0000 	.word	0x447a0000
 8005358:	080157f4 	.word	0x080157f4
 800535c:	080157fc 	.word	0x080157fc
 8005360:	200000d0 	.word	0x200000d0
 8005364:	20028c64 	.word	0x20028c64
 8005368:	08015804 	.word	0x08015804
 800536c:	0801580c 	.word	0x0801580c
 8005370:	08015814 	.word	0x08015814
 8005374:	0801581c 	.word	0x0801581c
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	b299      	uxth	r1, r3
 800537c:	4ba3      	ldr	r3, [pc, #652]	; (800560c <drawStatusMenu+0xa94>)
 800537e:	4aa4      	ldr	r2, [pc, #656]	; (8005610 <drawStatusMenu+0xa98>)
 8005380:	f7fc f8d4 	bl	800152c <LCD_PutStr>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538a:	4413      	add	r3, r2
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 800538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005390:	b298      	uxth	r0, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	b299      	uxth	r1, r3
 8005396:	4b9f      	ldr	r3, [pc, #636]	; (8005614 <drawStatusMenu+0xa9c>)
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	4a9f      	ldr	r2, [pc, #636]	; (8005618 <drawStatusMenu+0xaa0>)
 800539c:	5cd3      	ldrb	r3, [r2, r3]
 800539e:	461a      	mov	r2, r3
 80053a0:	4b9a      	ldr	r3, [pc, #616]	; (800560c <drawStatusMenu+0xa94>)
 80053a2:	f7fc f8fb 	bl	800159c <LCD_PutInt>
 80053a6:	4603      	mov	r3, r0
 80053a8:	461a      	mov	r2, r3
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	4413      	add	r3, r2
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 80053b0:	230a      	movs	r3, #10
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	330f      	adds	r3, #15
 80053b8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	b298      	uxth	r0, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	b299      	uxth	r1, r3
 80053c2:	4b92      	ldr	r3, [pc, #584]	; (800560c <drawStatusMenu+0xa94>)
 80053c4:	4a95      	ldr	r2, [pc, #596]	; (800561c <drawStatusMenu+0xaa4>)
 80053c6:	f7fc f8b1 	bl	800152c <LCD_PutStr>
 80053ca:	4603      	mov	r3, r0
 80053cc:	461a      	mov	r2, r3
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	4413      	add	r3, r2
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 80053d4:	4b92      	ldr	r3, [pc, #584]	; (8005620 <drawStatusMenu+0xaa8>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a92      	ldr	r2, [pc, #584]	; (8005624 <drawStatusMenu+0xaac>)
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	edd3 7a00 	vldr	s15, [r3]
 80053e2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005628 <drawStatusMenu+0xab0>
 80053e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ee:	ee17 3a90 	vmov	r3, s15
 80053f2:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f6:	b298      	uxth	r0, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	b299      	uxth	r1, r3
 80053fc:	4b83      	ldr	r3, [pc, #524]	; (800560c <drawStatusMenu+0xa94>)
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2303      	movs	r3, #3
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	f7fc f930 	bl	8001668 <LCD_PutIntF>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	4413      	add	r3, r2
 8005410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005412:	4413      	add	r3, r2
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 8005416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005418:	b298      	uxth	r0, r3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	b299      	uxth	r1, r3
 800541e:	4b7b      	ldr	r3, [pc, #492]	; (800560c <drawStatusMenu+0xa94>)
 8005420:	4a82      	ldr	r2, [pc, #520]	; (800562c <drawStatusMenu+0xab4>)
 8005422:	f7fc f883 	bl	800152c <LCD_PutStr>
 8005426:	4603      	mov	r3, r0
 8005428:	461a      	mov	r2, r3
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	4413      	add	r3, r2
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 8005430:	4b7b      	ldr	r3, [pc, #492]	; (8005620 <drawStatusMenu+0xaa8>)
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	4a7b      	ldr	r2, [pc, #492]	; (8005624 <drawStatusMenu+0xaac>)
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	edd3 7a00 	vldr	s15, [r3]
 800543e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8005628 <drawStatusMenu+0xab0>
 8005442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800544a:	ee17 3a90 	vmov	r3, s15
 800544e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005452:	b298      	uxth	r0, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	b299      	uxth	r1, r3
 8005458:	4b6c      	ldr	r3, [pc, #432]	; (800560c <drawStatusMenu+0xa94>)
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	2303      	movs	r3, #3
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	f7fc f902 	bl	8001668 <LCD_PutIntF>
 8005464:	4603      	mov	r3, r0
 8005466:	461a      	mov	r2, r3
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	4413      	add	r3, r2
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 8005472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005474:	b298      	uxth	r0, r3
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	b299      	uxth	r1, r3
 800547a:	4b64      	ldr	r3, [pc, #400]	; (800560c <drawStatusMenu+0xa94>)
 800547c:	4a6c      	ldr	r2, [pc, #432]	; (8005630 <drawStatusMenu+0xab8>)
 800547e:	f7fc f855 	bl	800152c <LCD_PutStr>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	4413      	add	r3, r2
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	b298      	uxth	r0, r3
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	b299      	uxth	r1, r3
 8005494:	4b5f      	ldr	r3, [pc, #380]	; (8005614 <drawStatusMenu+0xa9c>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4a5f      	ldr	r2, [pc, #380]	; (8005618 <drawStatusMenu+0xaa0>)
 800549a:	5cd3      	ldrb	r3, [r2, r3]
 800549c:	461a      	mov	r2, r3
 800549e:	4b5b      	ldr	r3, [pc, #364]	; (800560c <drawStatusMenu+0xa94>)
 80054a0:	f7fc f87c 	bl	800159c <LCD_PutInt>
 80054a4:	4603      	mov	r3, r0
 80054a6:	461a      	mov	r2, r3
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	4413      	add	r3, r2
 80054ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ae:	4413      	add	r3, r2
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	b298      	uxth	r0, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	b299      	uxth	r1, r3
 80054ba:	4b54      	ldr	r3, [pc, #336]	; (800560c <drawStatusMenu+0xa94>)
 80054bc:	4a5d      	ldr	r2, [pc, #372]	; (8005634 <drawStatusMenu+0xabc>)
 80054be:	f7fc f835 	bl	800152c <LCD_PutStr>
 80054c2:	4603      	mov	r3, r0
 80054c4:	461a      	mov	r2, r3
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	4413      	add	r3, r2
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	b298      	uxth	r0, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	b299      	uxth	r1, r3
 80054d4:	4b4f      	ldr	r3, [pc, #316]	; (8005614 <drawStatusMenu+0xa9c>)
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4a4f      	ldr	r2, [pc, #316]	; (8005618 <drawStatusMenu+0xaa0>)
 80054da:	5cd3      	ldrb	r3, [r2, r3]
 80054dc:	461a      	mov	r2, r3
 80054de:	4b4b      	ldr	r3, [pc, #300]	; (800560c <drawStatusMenu+0xa94>)
 80054e0:	f7fc f85c 	bl	800159c <LCD_PutInt>
 80054e4:	4603      	mov	r3, r0
 80054e6:	461a      	mov	r2, r3
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	4413      	add	r3, r2
 80054ec:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 80054ee:	230a      	movs	r3, #10
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	330f      	adds	r3, #15
 80054f6:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	b298      	uxth	r0, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	b299      	uxth	r1, r3
 8005500:	4b42      	ldr	r3, [pc, #264]	; (800560c <drawStatusMenu+0xa94>)
 8005502:	4a4d      	ldr	r2, [pc, #308]	; (8005638 <drawStatusMenu+0xac0>)
 8005504:	f7fc f812 	bl	800152c <LCD_PutStr>
 8005508:	4603      	mov	r3, r0
 800550a:	461a      	mov	r2, r3
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	4413      	add	r3, r2
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 8005512:	4b43      	ldr	r3, [pc, #268]	; (8005620 <drawStatusMenu+0xaa8>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4a43      	ldr	r2, [pc, #268]	; (8005624 <drawStatusMenu+0xaac>)
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	edd3 7a00 	vldr	s15, [r3]
 8005520:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005628 <drawStatusMenu+0xab0>
 8005524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800552c:	ee17 3a90 	vmov	r3, s15
 8005530:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	b298      	uxth	r0, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	b299      	uxth	r1, r3
 800553a:	4b34      	ldr	r3, [pc, #208]	; (800560c <drawStatusMenu+0xa94>)
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	2303      	movs	r3, #3
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	f7fc f891 	bl	8001668 <LCD_PutIntF>
 8005546:	4603      	mov	r3, r0
 8005548:	461a      	mov	r2, r3
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	4413      	add	r3, r2
 800554e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005550:	4413      	add	r3, r2
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	b298      	uxth	r0, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	b299      	uxth	r1, r3
 800555c:	4b2b      	ldr	r3, [pc, #172]	; (800560c <drawStatusMenu+0xa94>)
 800555e:	4a37      	ldr	r2, [pc, #220]	; (800563c <drawStatusMenu+0xac4>)
 8005560:	f7fb ffe4 	bl	800152c <LCD_PutStr>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	4413      	add	r3, r2
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 800556e:	4b2c      	ldr	r3, [pc, #176]	; (8005620 <drawStatusMenu+0xaa8>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <drawStatusMenu+0xaac>)
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	edd3 7a00 	vldr	s15, [r3]
 800557c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005628 <drawStatusMenu+0xab0>
 8005580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005588:	ee17 3a90 	vmov	r3, s15
 800558c:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	b298      	uxth	r0, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	b299      	uxth	r1, r3
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <drawStatusMenu+0xa94>)
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	2303      	movs	r3, #3
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	f7fc f863 	bl	8001668 <LCD_PutIntF>
 80055a2:	4603      	mov	r3, r0
 80055a4:	461a      	mov	r2, r3
 80055a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a8:	4413      	add	r3, r2
 80055aa:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	b298      	uxth	r0, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	b299      	uxth	r1, r3
 80055b8:	4b14      	ldr	r3, [pc, #80]	; (800560c <drawStatusMenu+0xa94>)
 80055ba:	4a21      	ldr	r2, [pc, #132]	; (8005640 <drawStatusMenu+0xac8>)
 80055bc:	f7fb ffb6 	bl	800152c <LCD_PutStr>
 80055c0:	4603      	mov	r3, r0
 80055c2:	461a      	mov	r2, r3
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	4413      	add	r3, r2
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055cc:	b298      	uxth	r0, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	b299      	uxth	r1, r3
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <drawStatusMenu+0xa9c>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	4a10      	ldr	r2, [pc, #64]	; (8005618 <drawStatusMenu+0xaa0>)
 80055d8:	5cd3      	ldrb	r3, [r2, r3]
 80055da:	461a      	mov	r2, r3
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <drawStatusMenu+0xa94>)
 80055de:	f7fb ffdd 	bl	800159c <LCD_PutInt>


		i=10;
 80055e2:	230a      	movs	r3, #10
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	330f      	adds	r3, #15
 80055ea:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	b298      	uxth	r0, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	b299      	uxth	r1, r3
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <drawStatusMenu+0xa94>)
 80055f6:	4a13      	ldr	r2, [pc, #76]	; (8005644 <drawStatusMenu+0xacc>)
 80055f8:	f7fb ff98 	bl	800152c <LCD_PutStr>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	4413      	add	r3, r2
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <drawStatusMenu+0xaa8>)
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	e01d      	b.n	8005648 <drawStatusMenu+0xad0>
 800560c:	08015ce4 	.word	0x08015ce4
 8005610:	08015824 	.word	0x08015824
 8005614:	200000d0 	.word	0x200000d0
 8005618:	20028c64 	.word	0x20028c64
 800561c:	0801582c 	.word	0x0801582c
 8005620:	20000100 	.word	0x20000100
 8005624:	20030a30 	.word	0x20030a30
 8005628:	447a0000 	.word	0x447a0000
 800562c:	08015834 	.word	0x08015834
 8005630:	0801583c 	.word	0x0801583c
 8005634:	08015844 	.word	0x08015844
 8005638:	0801584c 	.word	0x0801584c
 800563c:	08015854 	.word	0x08015854
 8005640:	0801585c 	.word	0x0801585c
 8005644:	08015864 	.word	0x08015864
 8005648:	4aa7      	ldr	r2, [pc, #668]	; (80058e8 <drawStatusMenu+0xd70>)
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	edd3 7a00 	vldr	s15, [r3]
 8005652:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80058ec <drawStatusMenu+0xd74>
 8005656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800565a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800565e:	ee17 3a90 	vmov	r3, s15
 8005662:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005666:	b298      	uxth	r0, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	b299      	uxth	r1, r3
 800566c:	4ba0      	ldr	r3, [pc, #640]	; (80058f0 <drawStatusMenu+0xd78>)
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2303      	movs	r3, #3
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	f7fb fff8 	bl	8001668 <LCD_PutIntF>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	4413      	add	r3, r2
 8005680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005682:	4413      	add	r3, r2
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	b298      	uxth	r0, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	b299      	uxth	r1, r3
 800568e:	4b98      	ldr	r3, [pc, #608]	; (80058f0 <drawStatusMenu+0xd78>)
 8005690:	4a98      	ldr	r2, [pc, #608]	; (80058f4 <drawStatusMenu+0xd7c>)
 8005692:	f7fb ff4b 	bl	800152c <LCD_PutStr>
 8005696:	4603      	mov	r3, r0
 8005698:	461a      	mov	r2, r3
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569c:	4413      	add	r3, r2
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 80056a0:	4b95      	ldr	r3, [pc, #596]	; (80058f8 <drawStatusMenu+0xd80>)
 80056a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a4:	4a90      	ldr	r2, [pc, #576]	; (80058e8 <drawStatusMenu+0xd70>)
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	edd3 7a00 	vldr	s15, [r3]
 80056ae:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80058ec <drawStatusMenu+0xd74>
 80056b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056ba:	ee17 3a90 	vmov	r3, s15
 80056be:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	b298      	uxth	r0, r3
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	b299      	uxth	r1, r3
 80056c8:	4b89      	ldr	r3, [pc, #548]	; (80058f0 <drawStatusMenu+0xd78>)
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2303      	movs	r3, #3
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	f7fb ffca 	bl	8001668 <LCD_PutIntF>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	4413      	add	r3, r2
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	b298      	uxth	r0, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	b299      	uxth	r1, r3
 80056ea:	4b81      	ldr	r3, [pc, #516]	; (80058f0 <drawStatusMenu+0xd78>)
 80056ec:	4a83      	ldr	r2, [pc, #524]	; (80058fc <drawStatusMenu+0xd84>)
 80056ee:	f7fb ff1d 	bl	800152c <LCD_PutStr>
 80056f2:	4603      	mov	r3, r0
 80056f4:	461a      	mov	r2, r3
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	4413      	add	r3, r2
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 80056fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fe:	b298      	uxth	r0, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	b299      	uxth	r1, r3
 8005704:	4b7e      	ldr	r3, [pc, #504]	; (8005900 <drawStatusMenu+0xd88>)
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	4a7e      	ldr	r2, [pc, #504]	; (8005904 <drawStatusMenu+0xd8c>)
 800570a:	5cd3      	ldrb	r3, [r2, r3]
 800570c:	461a      	mov	r2, r3
 800570e:	4b78      	ldr	r3, [pc, #480]	; (80058f0 <drawStatusMenu+0xd78>)
 8005710:	f7fb ff44 	bl	800159c <LCD_PutInt>

		i=10;
 8005714:	230a      	movs	r3, #10
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	330f      	adds	r3, #15
 800571c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	b298      	uxth	r0, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	b299      	uxth	r1, r3
 8005726:	4b72      	ldr	r3, [pc, #456]	; (80058f0 <drawStatusMenu+0xd78>)
 8005728:	4a77      	ldr	r2, [pc, #476]	; (8005908 <drawStatusMenu+0xd90>)
 800572a:	f7fb feff 	bl	800152c <LCD_PutStr>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	4413      	add	r3, r2
 8005736:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 8005738:	4b6f      	ldr	r3, [pc, #444]	; (80058f8 <drawStatusMenu+0xd80>)
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	4a6a      	ldr	r2, [pc, #424]	; (80058e8 <drawStatusMenu+0xd70>)
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	edd3 7a00 	vldr	s15, [r3]
 8005746:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80058ec <drawStatusMenu+0xd74>
 800574a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800574e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005752:	ee17 3a90 	vmov	r3, s15
 8005756:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	b298      	uxth	r0, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	b299      	uxth	r1, r3
 8005760:	4b63      	ldr	r3, [pc, #396]	; (80058f0 <drawStatusMenu+0xd78>)
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2303      	movs	r3, #3
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	f7fb ff7e 	bl	8001668 <LCD_PutIntF>
 800576c:	4603      	mov	r3, r0
 800576e:	461a      	mov	r2, r3
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	4413      	add	r3, r2
 8005774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005776:	4413      	add	r3, r2
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	b298      	uxth	r0, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	b299      	uxth	r1, r3
 8005782:	4b5b      	ldr	r3, [pc, #364]	; (80058f0 <drawStatusMenu+0xd78>)
 8005784:	4a61      	ldr	r2, [pc, #388]	; (800590c <drawStatusMenu+0xd94>)
 8005786:	f7fb fed1 	bl	800152c <LCD_PutStr>
 800578a:	4603      	mov	r3, r0
 800578c:	461a      	mov	r2, r3
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	4413      	add	r3, r2
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 8005794:	4b58      	ldr	r3, [pc, #352]	; (80058f8 <drawStatusMenu+0xd80>)
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	4a53      	ldr	r2, [pc, #332]	; (80058e8 <drawStatusMenu+0xd70>)
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	edd3 7a00 	vldr	s15, [r3]
 80057a2:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80058ec <drawStatusMenu+0xd74>
 80057a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ae:	ee17 3a90 	vmov	r3, s15
 80057b2:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	b298      	uxth	r0, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	b299      	uxth	r1, r3
 80057bc:	4b4c      	ldr	r3, [pc, #304]	; (80058f0 <drawStatusMenu+0xd78>)
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	2303      	movs	r3, #3
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	f7fb ff50 	bl	8001668 <LCD_PutIntF>
 80057c8:	4603      	mov	r3, r0
 80057ca:	461a      	mov	r2, r3
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	4413      	add	r3, r2
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	b298      	uxth	r0, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	b299      	uxth	r1, r3
 80057de:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <drawStatusMenu+0xd78>)
 80057e0:	4a4b      	ldr	r2, [pc, #300]	; (8005910 <drawStatusMenu+0xd98>)
 80057e2:	f7fb fea3 	bl	800152c <LCD_PutStr>
 80057e6:	4603      	mov	r3, r0
 80057e8:	461a      	mov	r2, r3
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	4413      	add	r3, r2
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	b298      	uxth	r0, r3
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	b299      	uxth	r1, r3
 80057f8:	4b41      	ldr	r3, [pc, #260]	; (8005900 <drawStatusMenu+0xd88>)
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	4a41      	ldr	r2, [pc, #260]	; (8005904 <drawStatusMenu+0xd8c>)
 80057fe:	5cd3      	ldrb	r3, [r2, r3]
 8005800:	461a      	mov	r2, r3
 8005802:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <drawStatusMenu+0xd78>)
 8005804:	f7fb feca 	bl	800159c <LCD_PutInt>

		i=10;
 8005808:	230a      	movs	r3, #10
 800580a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	330f      	adds	r3, #15
 8005810:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	b298      	uxth	r0, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	b299      	uxth	r1, r3
 800581a:	4b35      	ldr	r3, [pc, #212]	; (80058f0 <drawStatusMenu+0xd78>)
 800581c:	4a3d      	ldr	r2, [pc, #244]	; (8005914 <drawStatusMenu+0xd9c>)
 800581e:	f7fb fe85 	bl	800152c <LCD_PutStr>
 8005822:	4603      	mov	r3, r0
 8005824:	461a      	mov	r2, r3
 8005826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005828:	4413      	add	r3, r2
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 800582c:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <drawStatusMenu+0xd80>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	4a2d      	ldr	r2, [pc, #180]	; (80058e8 <drawStatusMenu+0xd70>)
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	edd3 7a00 	vldr	s15, [r3]
 800583a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80058ec <drawStatusMenu+0xd74>
 800583e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005846:	ee17 3a90 	vmov	r3, s15
 800584a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	b298      	uxth	r0, r3
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	b299      	uxth	r1, r3
 8005854:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <drawStatusMenu+0xd78>)
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2303      	movs	r3, #3
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f7fb ff04 	bl	8001668 <LCD_PutIntF>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	4413      	add	r3, r2
 8005868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800586a:	4413      	add	r3, r2
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	b298      	uxth	r0, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	b299      	uxth	r1, r3
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <drawStatusMenu+0xd78>)
 8005878:	4a27      	ldr	r2, [pc, #156]	; (8005918 <drawStatusMenu+0xda0>)
 800587a:	f7fb fe57 	bl	800152c <LCD_PutStr>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	4413      	add	r3, r2
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 8005888:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <drawStatusMenu+0xd80>)
 800588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588c:	4a16      	ldr	r2, [pc, #88]	; (80058e8 <drawStatusMenu+0xd70>)
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	edd3 7a00 	vldr	s15, [r3]
 8005896:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80058ec <drawStatusMenu+0xd74>
 800589a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800589e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a2:	ee17 3a90 	vmov	r3, s15
 80058a6:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	b298      	uxth	r0, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	b299      	uxth	r1, r3
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <drawStatusMenu+0xd78>)
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	2303      	movs	r3, #3
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	f7fb fed6 	bl	8001668 <LCD_PutIntF>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	4413      	add	r3, r2
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	b298      	uxth	r0, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	b299      	uxth	r1, r3
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <drawStatusMenu+0xd78>)
 80058d4:	4a11      	ldr	r2, [pc, #68]	; (800591c <drawStatusMenu+0xda4>)
 80058d6:	f7fb fe29 	bl	800152c <LCD_PutStr>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	4413      	add	r3, r2
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
 80058e4:	e01c      	b.n	8005920 <drawStatusMenu+0xda8>
 80058e6:	bf00      	nop
 80058e8:	20030a30 	.word	0x20030a30
 80058ec:	447a0000 	.word	0x447a0000
 80058f0:	08015ce4 	.word	0x08015ce4
 80058f4:	0801586c 	.word	0x0801586c
 80058f8:	20000100 	.word	0x20000100
 80058fc:	08015874 	.word	0x08015874
 8005900:	200000d0 	.word	0x200000d0
 8005904:	20028c64 	.word	0x20028c64
 8005908:	0801587c 	.word	0x0801587c
 800590c:	08015884 	.word	0x08015884
 8005910:	0801588c 	.word	0x0801588c
 8005914:	08015894 	.word	0x08015894
 8005918:	0801589c 	.word	0x0801589c
 800591c:	080158a4 	.word	0x080158a4
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	b298      	uxth	r0, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	b299      	uxth	r1, r3
 8005928:	4b9b      	ldr	r3, [pc, #620]	; (8005b98 <drawStatusMenu+0x1020>)
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	4a9b      	ldr	r2, [pc, #620]	; (8005b9c <drawStatusMenu+0x1024>)
 800592e:	5cd3      	ldrb	r3, [r2, r3]
 8005930:	461a      	mov	r2, r3
 8005932:	4b9b      	ldr	r3, [pc, #620]	; (8005ba0 <drawStatusMenu+0x1028>)
 8005934:	f7fb fe32 	bl	800159c <LCD_PutInt>

		i=10;
 8005938:	230a      	movs	r3, #10
 800593a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	330f      	adds	r3, #15
 8005940:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	b298      	uxth	r0, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	b299      	uxth	r1, r3
 800594a:	4b95      	ldr	r3, [pc, #596]	; (8005ba0 <drawStatusMenu+0x1028>)
 800594c:	4a95      	ldr	r2, [pc, #596]	; (8005ba4 <drawStatusMenu+0x102c>)
 800594e:	f7fb fded 	bl	800152c <LCD_PutStr>
 8005952:	4603      	mov	r3, r0
 8005954:	461a      	mov	r2, r3
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	4413      	add	r3, r2
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 800595c:	4b92      	ldr	r3, [pc, #584]	; (8005ba8 <drawStatusMenu+0x1030>)
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	4a92      	ldr	r2, [pc, #584]	; (8005bac <drawStatusMenu+0x1034>)
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	edd3 7a00 	vldr	s15, [r3]
 800596a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005bb0 <drawStatusMenu+0x1038>
 800596e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005976:	ee17 3a90 	vmov	r3, s15
 800597a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	b298      	uxth	r0, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	b299      	uxth	r1, r3
 8005984:	4b86      	ldr	r3, [pc, #536]	; (8005ba0 <drawStatusMenu+0x1028>)
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	2303      	movs	r3, #3
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	f7fb fe6c 	bl	8001668 <LCD_PutIntF>
 8005990:	4603      	mov	r3, r0
 8005992:	461a      	mov	r2, r3
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	4413      	add	r3, r2
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	b298      	uxth	r0, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	b299      	uxth	r1, r3
 80059a6:	4b7e      	ldr	r3, [pc, #504]	; (8005ba0 <drawStatusMenu+0x1028>)
 80059a8:	4a82      	ldr	r2, [pc, #520]	; (8005bb4 <drawStatusMenu+0x103c>)
 80059aa:	f7fb fdbf 	bl	800152c <LCD_PutStr>
 80059ae:	4603      	mov	r3, r0
 80059b0:	461a      	mov	r2, r3
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	4413      	add	r3, r2
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 80059b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ba:	b298      	uxth	r0, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	b299      	uxth	r1, r3
 80059c0:	4b75      	ldr	r3, [pc, #468]	; (8005b98 <drawStatusMenu+0x1020>)
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	4a75      	ldr	r2, [pc, #468]	; (8005b9c <drawStatusMenu+0x1024>)
 80059c6:	5cd3      	ldrb	r3, [r2, r3]
 80059c8:	461a      	mov	r2, r3
 80059ca:	4b75      	ldr	r3, [pc, #468]	; (8005ba0 <drawStatusMenu+0x1028>)
 80059cc:	f7fb fde6 	bl	800159c <LCD_PutInt>

		i=10;
 80059d0:	230a      	movs	r3, #10
 80059d2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	330f      	adds	r3, #15
 80059d8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059dc:	b298      	uxth	r0, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	b299      	uxth	r1, r3
 80059e2:	4b6f      	ldr	r3, [pc, #444]	; (8005ba0 <drawStatusMenu+0x1028>)
 80059e4:	4a74      	ldr	r2, [pc, #464]	; (8005bb8 <drawStatusMenu+0x1040>)
 80059e6:	f7fb fda1 	bl	800152c <LCD_PutStr>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f0:	4413      	add	r3, r2
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 80059f4:	4b6c      	ldr	r3, [pc, #432]	; (8005ba8 <drawStatusMenu+0x1030>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	4a6c      	ldr	r2, [pc, #432]	; (8005bac <drawStatusMenu+0x1034>)
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	edd3 7a00 	vldr	s15, [r3]
 8005a02:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8005bb0 <drawStatusMenu+0x1038>
 8005a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a0e:	ee17 3a90 	vmov	r3, s15
 8005a12:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	b298      	uxth	r0, r3
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	b299      	uxth	r1, r3
 8005a1c:	4b60      	ldr	r3, [pc, #384]	; (8005ba0 <drawStatusMenu+0x1028>)
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2303      	movs	r3, #3
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	f7fb fe20 	bl	8001668 <LCD_PutIntF>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	4413      	add	r3, r2
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 8005a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a38:	b298      	uxth	r0, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	b299      	uxth	r1, r3
 8005a3e:	4b58      	ldr	r3, [pc, #352]	; (8005ba0 <drawStatusMenu+0x1028>)
 8005a40:	4a5e      	ldr	r2, [pc, #376]	; (8005bbc <drawStatusMenu+0x1044>)
 8005a42:	f7fb fd73 	bl	800152c <LCD_PutStr>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4c:	4413      	add	r3, r2
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	b298      	uxth	r0, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	b299      	uxth	r1, r3
 8005a58:	4b4f      	ldr	r3, [pc, #316]	; (8005b98 <drawStatusMenu+0x1020>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4a4f      	ldr	r2, [pc, #316]	; (8005b9c <drawStatusMenu+0x1024>)
 8005a5e:	5cd3      	ldrb	r3, [r2, r3]
 8005a60:	461a      	mov	r2, r3
 8005a62:	4b4f      	ldr	r3, [pc, #316]	; (8005ba0 <drawStatusMenu+0x1028>)
 8005a64:	f7fb fd9a 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 8005a68:	2341      	movs	r3, #65	; 0x41
 8005a6a:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b299      	uxth	r1, r3
 8005a74:	4b52      	ldr	r3, [pc, #328]	; (8005bc0 <drawStatusMenu+0x1048>)
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	3b02      	subs	r3, #2
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3301      	adds	r3, #1
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2002      	movs	r0, #2
 8005a86:	f7fb fa05 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8005a8a:	23e6      	movs	r3, #230	; 0xe6
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b03      	subs	r3, #3
 8005a94:	b298      	uxth	r0, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	b299      	uxth	r1, r3
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3303      	adds	r3, #3
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	4b48      	ldr	r3, [pc, #288]	; (8005bc4 <drawStatusMenu+0x104c>)
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	3b02      	subs	r3, #2
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f7fb f9f3 	bl	8000e94 <LCD_FillRect>

		i=155;
 8005aae:	239b      	movs	r3, #155	; 0x9b
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
		j=35;
 8005ab2:	2323      	movs	r3, #35	; 0x23
 8005ab4:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab8:	b298      	uxth	r0, r3
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	b299      	uxth	r1, r3
 8005abe:	4b38      	ldr	r3, [pc, #224]	; (8005ba0 <drawStatusMenu+0x1028>)
 8005ac0:	4a41      	ldr	r2, [pc, #260]	; (8005bc8 <drawStatusMenu+0x1050>)
 8005ac2:	f7fb fd33 	bl	800152c <LCD_PutStr>
		i=155;
 8005ac6:	239b      	movs	r3, #155	; 0x9b
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
		j=50;
 8005aca:	2332      	movs	r3, #50	; 0x32
 8005acc:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	b298      	uxth	r0, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	b299      	uxth	r1, r3
 8005ad6:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <drawStatusMenu+0x1028>)
 8005ad8:	4a3c      	ldr	r2, [pc, #240]	; (8005bcc <drawStatusMenu+0x1054>)
 8005ada:	f7fb fd27 	bl	800152c <LCD_PutStr>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ae4:	4413      	add	r3, r2
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
		j=28;
 8005ae8:	231c      	movs	r3, #28
 8005aea:	617b      	str	r3, [r7, #20]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	b298      	uxth	r0, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	b299      	uxth	r1, r3
 8005af4:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <drawStatusMenu+0x1058>)
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2302      	movs	r3, #2
 8005afa:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005afe:	f7fb fdb3 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 8005b02:	23c8      	movs	r3, #200	; 0xc8
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 8005b06:	23dc      	movs	r3, #220	; 0xdc
 8005b08:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	b298      	uxth	r0, r3
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	b299      	uxth	r1, r3
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f7fb fe57 	bl	80017cc <drawUpDownArrow>
		j=15;
 8005b1e:	230f      	movs	r3, #15
 8005b20:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b24:	b298      	uxth	r0, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	b299      	uxth	r1, r3
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f7fb fe4b 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005b36:	23b4      	movs	r3, #180	; 0xb4
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	b298      	uxth	r0, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	b299      	uxth	r1, r3
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f7fb fe3f 	bl	80017cc <drawUpDownArrow>
		j=220;
 8005b4e:	23dc      	movs	r3, #220	; 0xdc
 8005b50:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b54:	b298      	uxth	r0, r3
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	b299      	uxth	r1, r3
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f7fb fe33 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005b66:	23dc      	movs	r3, #220	; 0xdc
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	b298      	uxth	r0, r3
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	b299      	uxth	r1, r3
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f7fb fe27 	bl	80017cc <drawUpDownArrow>
		j=15;
 8005b7e:	230f      	movs	r3, #15
 8005b80:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b84:	b298      	uxth	r0, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	b299      	uxth	r1, r3
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f7fb fe1b 	bl	80017cc <drawUpDownArrow>
		break;
 8005b96:	e133      	b.n	8005e00 <drawStatusMenu+0x1288>
 8005b98:	200000d0 	.word	0x200000d0
 8005b9c:	20028c64 	.word	0x20028c64
 8005ba0:	08015ce4 	.word	0x08015ce4
 8005ba4:	080158ac 	.word	0x080158ac
 8005ba8:	20000100 	.word	0x20000100
 8005bac:	20030a30 	.word	0x20030a30
 8005bb0:	447a0000 	.word	0x447a0000
 8005bb4:	080158b4 	.word	0x080158b4
 8005bb8:	080158bc 	.word	0x080158bc
 8005bbc:	080158c4 	.word	0x080158c4
 8005bc0:	20028a3a 	.word	0x20028a3a
 8005bc4:	20028a3c 	.word	0x20028a3c
 8005bc8:	080158cc 	.word	0x080158cc
 8005bcc:	080158dc 	.word	0x080158dc
 8005bd0:	080160a4 	.word	0x080160a4
	}
	case 3:{
		i=35;
 8005bd4:	2323      	movs	r3, #35	; 0x23
 8005bd6:	637b      	str	r3, [r7, #52]	; 0x34
		j=75;
 8005bd8:	234b      	movs	r3, #75	; 0x4b
 8005bda:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b02      	subs	r3, #2
 8005be2:	b299      	uxth	r1, r3
 8005be4:	4b89      	ldr	r3, [pc, #548]	; (8005e0c <drawStatusMenu+0x1294>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	3b02      	subs	r3, #2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2002      	movs	r0, #2
 8005bf6:	f7fb f94d 	bl	8000e94 <LCD_FillRect>
		j=55;
 8005bfa:	2337      	movs	r3, #55	; 0x37
 8005bfc:	617b      	str	r3, [r7, #20]
		i=150;
 8005bfe:	2396      	movs	r3, #150	; 0x96
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 8005c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c04:	b298      	uxth	r0, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	b299      	uxth	r1, r3
 8005c0a:	4b81      	ldr	r3, [pc, #516]	; (8005e10 <drawStatusMenu+0x1298>)
 8005c0c:	4a81      	ldr	r2, [pc, #516]	; (8005e14 <drawStatusMenu+0x129c>)
 8005c0e:	f7fb fc8d 	bl	800152c <LCD_PutStr>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	4413      	add	r3, r2
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34

		i=40;
 8005c1c:	2328      	movs	r3, #40	; 0x28
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
		j=85;
 8005c20:	2355      	movs	r3, #85	; 0x55
 8005c22:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	b298      	uxth	r0, r3
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	b299      	uxth	r1, r3
 8005c2c:	4b78      	ldr	r3, [pc, #480]	; (8005e10 <drawStatusMenu+0x1298>)
 8005c2e:	4a7a      	ldr	r2, [pc, #488]	; (8005e18 <drawStatusMenu+0x12a0>)
 8005c30:	f7fb fc7c 	bl	800152c <LCD_PutStr>
 8005c34:	4603      	mov	r3, r0
 8005c36:	461a      	mov	r2, r3
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3a:	4413      	add	r3, r2
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c40:	b298      	uxth	r0, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	b299      	uxth	r1, r3
 8005c46:	4b72      	ldr	r3, [pc, #456]	; (8005e10 <drawStatusMenu+0x1298>)
 8005c48:	4a74      	ldr	r2, [pc, #464]	; (8005e1c <drawStatusMenu+0x12a4>)
 8005c4a:	f7fb fc6f 	bl	800152c <LCD_PutStr>

		i=40;
 8005c4e:	2328      	movs	r3, #40	; 0x28
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	3319      	adds	r3, #25
 8005c56:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	b298      	uxth	r0, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	b299      	uxth	r1, r3
 8005c60:	4b6b      	ldr	r3, [pc, #428]	; (8005e10 <drawStatusMenu+0x1298>)
 8005c62:	4a6f      	ldr	r2, [pc, #444]	; (8005e20 <drawStatusMenu+0x12a8>)
 8005c64:	f7fb fc62 	bl	800152c <LCD_PutStr>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6e:	4413      	add	r3, r2
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
		//ping the LED Driver
		i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8005c72:	4b6c      	ldr	r3, [pc, #432]	; (8005e24 <drawStatusMenu+0x12ac>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	4b6a      	ldr	r3, [pc, #424]	; (8005e24 <drawStatusMenu+0x12ac>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	2301      	movs	r3, #1
 8005c80:	2200      	movs	r2, #0
 8005c82:	21f0      	movs	r1, #240	; 0xf0
 8005c84:	f7fd fab6 	bl	80031f4 <writeI2CRegister>
 8005c88:	6138      	str	r0, [r7, #16]

		if(i2cCheck){
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <drawStatusMenu+0x112a>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	b298      	uxth	r0, r3
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	b299      	uxth	r1, r3
 8005c98:	4b5d      	ldr	r3, [pc, #372]	; (8005e10 <drawStatusMenu+0x1298>)
 8005c9a:	4a63      	ldr	r2, [pc, #396]	; (8005e28 <drawStatusMenu+0x12b0>)
 8005c9c:	f7fb fc46 	bl	800152c <LCD_PutStr>
 8005ca0:	e007      	b.n	8005cb2 <drawStatusMenu+0x113a>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	b298      	uxth	r0, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	b299      	uxth	r1, r3
 8005caa:	4b59      	ldr	r3, [pc, #356]	; (8005e10 <drawStatusMenu+0x1298>)
 8005cac:	4a5f      	ldr	r2, [pc, #380]	; (8005e2c <drawStatusMenu+0x12b4>)
 8005cae:	f7fb fc3d 	bl	800152c <LCD_PutStr>
		}

		i=40;
 8005cb2:	2328      	movs	r3, #40	; 0x28
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	3319      	adds	r3, #25
 8005cba:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	b298      	uxth	r0, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	b299      	uxth	r1, r3
 8005cc4:	4b52      	ldr	r3, [pc, #328]	; (8005e10 <drawStatusMenu+0x1298>)
 8005cc6:	4a5a      	ldr	r2, [pc, #360]	; (8005e30 <drawStatusMenu+0x12b8>)
 8005cc8:	f7fb fc30 	bl	800152c <LCD_PutStr>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd2:	4413      	add	r3, r2
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd8:	b298      	uxth	r0, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	b299      	uxth	r1, r3
 8005cde:	4b4c      	ldr	r3, [pc, #304]	; (8005e10 <drawStatusMenu+0x1298>)
 8005ce0:	4a54      	ldr	r2, [pc, #336]	; (8005e34 <drawStatusMenu+0x12bc>)
 8005ce2:	f7fb fc23 	bl	800152c <LCD_PutStr>

		i=40;
 8005ce6:	2328      	movs	r3, #40	; 0x28
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	3319      	adds	r3, #25
 8005cee:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf2:	b298      	uxth	r0, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	b299      	uxth	r1, r3
 8005cf8:	4b45      	ldr	r3, [pc, #276]	; (8005e10 <drawStatusMenu+0x1298>)
 8005cfa:	4a4f      	ldr	r2, [pc, #316]	; (8005e38 <drawStatusMenu+0x12c0>)
 8005cfc:	f7fb fc16 	bl	800152c <LCD_PutStr>
 8005d00:	4603      	mov	r3, r0
 8005d02:	461a      	mov	r2, r3
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	4413      	add	r3, r2
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 8005d0a:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <drawStatusMenu+0x12c4>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	4b4a      	ldr	r3, [pc, #296]	; (8005e3c <drawStatusMenu+0x12c4>)
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	2301      	movs	r3, #1
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2111      	movs	r1, #17
 8005d1c:	f7fd fa6a 	bl	80031f4 <writeI2CRegister>
 8005d20:	6138      	str	r0, [r7, #16]
		if(i2cCheck){
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d008      	beq.n	8005d3a <drawStatusMenu+0x11c2>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	b298      	uxth	r0, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	b299      	uxth	r1, r3
 8005d30:	4b37      	ldr	r3, [pc, #220]	; (8005e10 <drawStatusMenu+0x1298>)
 8005d32:	4a3d      	ldr	r2, [pc, #244]	; (8005e28 <drawStatusMenu+0x12b0>)
 8005d34:	f7fb fbfa 	bl	800152c <LCD_PutStr>
 8005d38:	e007      	b.n	8005d4a <drawStatusMenu+0x11d2>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	b298      	uxth	r0, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	b299      	uxth	r1, r3
 8005d42:	4b33      	ldr	r3, [pc, #204]	; (8005e10 <drawStatusMenu+0x1298>)
 8005d44:	4a3e      	ldr	r2, [pc, #248]	; (8005e40 <drawStatusMenu+0x12c8>)
 8005d46:	f7fb fbf1 	bl	800152c <LCD_PutStr>
		}


		i=40;
 8005d4a:	2328      	movs	r3, #40	; 0x28
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	3319      	adds	r3, #25
 8005d52:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 8005d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d56:	b298      	uxth	r0, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	b299      	uxth	r1, r3
 8005d5c:	4b2c      	ldr	r3, [pc, #176]	; (8005e10 <drawStatusMenu+0x1298>)
 8005d5e:	4a39      	ldr	r2, [pc, #228]	; (8005e44 <drawStatusMenu+0x12cc>)
 8005d60:	f7fb fbe4 	bl	800152c <LCD_PutStr>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	4413      	add	r3, r2
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8005d6e:	f002 f9b3 	bl	80080d8 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	4b34      	ldr	r3, [pc, #208]	; (8005e48 <drawStatusMenu+0x12d0>)
 8005d76:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7a:	099b      	lsrs	r3, r3, #6
 8005d7c:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	b298      	uxth	r0, r3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	b299      	uxth	r1, r3
 8005d86:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <drawStatusMenu+0x1298>)
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f7fb fc07 	bl	800159c <LCD_PutInt>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	461a      	mov	r2, r3
 8005d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d94:	4413      	add	r3, r2
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9a:	b298      	uxth	r0, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	b299      	uxth	r1, r3
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <drawStatusMenu+0x1298>)
 8005da2:	4a2a      	ldr	r2, [pc, #168]	; (8005e4c <drawStatusMenu+0x12d4>)
 8005da4:	f7fb fbc2 	bl	800152c <LCD_PutStr>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461a      	mov	r2, r3
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	4413      	add	r3, r2
 8005db0:	637b      	str	r3, [r7, #52]	; 0x34

		i=200;
 8005db2:	23c8      	movs	r3, #200	; 0xc8
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
		j=15;
 8005db6:	230f      	movs	r3, #15
 8005db8:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbc:	b298      	uxth	r0, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	b299      	uxth	r1, r3
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f7fb fcff 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005dce:	23b4      	movs	r3, #180	; 0xb4
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	b298      	uxth	r0, r3
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	b299      	uxth	r1, r3
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f7fb fcf3 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005de6:	23dc      	movs	r3, #220	; 0xdc
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dec:	b298      	uxth	r0, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	b299      	uxth	r1, r3
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f7fb fce7 	bl	80017cc <drawUpDownArrow>

		break;
 8005dfe:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8005e00:	f7fa fc6a 	bl	80006d8 <SMLCD_Flush>



}
 8005e04:	bf00      	nop
 8005e06:	3738      	adds	r7, #56	; 0x38
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20028a3a 	.word	0x20028a3a
 8005e10:	08015ce4 	.word	0x08015ce4
 8005e14:	080158ec 	.word	0x080158ec
 8005e18:	080158fc 	.word	0x080158fc
 8005e1c:	08015904 	.word	0x08015904
 8005e20:	08015924 	.word	0x08015924
 8005e24:	200000a8 	.word	0x200000a8
 8005e28:	08015934 	.word	0x08015934
 8005e2c:	0801593c 	.word	0x0801593c
 8005e30:	0801594c 	.word	0x0801594c
 8005e34:	08015958 	.word	0x08015958
 8005e38:	08015970 	.word	0x08015970
 8005e3c:	200000b8 	.word	0x200000b8
 8005e40:	0801597c 	.word	0x0801597c
 8005e44:	08015988 	.word	0x08015988
 8005e48:	10624dd3 	.word	0x10624dd3
 8005e4c:	0801599c 	.word	0x0801599c

08005e50 <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08e      	sub	sp, #56	; 0x38
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005e58:	2314      	movs	r3, #20
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
	int indentAlignment=20;
 8005e5c:	2314      	movs	r3, #20
 8005e5e:	623b      	str	r3, [r7, #32]
	int arrowUp = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
	int arrowDown=1;
 8005e64:	2301      	movs	r3, #1
 8005e66:	61bb      	str	r3, [r7, #24]
	int arrowSize=3;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	617b      	str	r3, [r7, #20]
	int otherBoardAlignment = 230;
 8005e6c:	23e6      	movs	r3, #230	; 0xe6
 8005e6e:	613b      	str	r3, [r7, #16]
	previousMenu=0;
 8005e70:	4b78      	ldr	r3, [pc, #480]	; (8006054 <drawSystemInfoMenu+0x204>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005e76:	f7fa fd79 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8005e7a:	4b77      	ldr	r3, [pc, #476]	; (8006058 <drawSystemInfoMenu+0x208>)
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	4b76      	ldr	r3, [pc, #472]	; (8006058 <drawSystemInfoMenu+0x208>)
 8005e80:	785b      	ldrb	r3, [r3, #1]
 8005e82:	4013      	ands	r3, r2
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	4b74      	ldr	r3, [pc, #464]	; (8006058 <drawSystemInfoMenu+0x208>)
 8005e88:	789b      	ldrb	r3, [r3, #2]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <drawSystemInfoMenu+0x70>
 		  adcValuePointer = getADCValues();
 8005e92:	f7fd fbe3 	bl	800365c <getADCValues>
 8005e96:	4603      	mov	r3, r0
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e9e:	e00c      	b.n	8005eba <drawSystemInfoMenu+0x6a>
	  		  displayAdcValues[i]=*adcValuePointer;
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	496d      	ldr	r1, [pc, #436]	; (800605c <drawSystemInfoMenu+0x20c>)
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	2b13      	cmp	r3, #19
 8005ebe:	ddef      	ble.n	8005ea0 <drawSystemInfoMenu+0x50>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 8005ec0:	4b67      	ldr	r3, [pc, #412]	; (8006060 <drawSystemInfoMenu+0x210>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8005ec6:	4b67      	ldr	r3, [pc, #412]	; (8006064 <drawSystemInfoMenu+0x214>)
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	4b66      	ldr	r3, [pc, #408]	; (8006068 <drawSystemInfoMenu+0x218>)
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	2000      	movs	r0, #0
 8005eda:	f7fa ff99 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8005ede:	4b61      	ldr	r3, [pc, #388]	; (8006064 <drawSystemInfoMenu+0x214>)
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	3b03      	subs	r3, #3
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	4b60      	ldr	r3, [pc, #384]	; (8006068 <drawSystemInfoMenu+0x218>)
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	3b03      	subs	r3, #3
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2102      	movs	r1, #2
 8005ef0:	2002      	movs	r0, #2
 8005ef2:	f7fa ff8d 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8005ef6:	230a      	movs	r3, #10
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	j  = 10;
 8005efa:	230a      	movs	r3, #10
 8005efc:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	b298      	uxth	r0, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	b299      	uxth	r1, r3
 8005f06:	4b59      	ldr	r3, [pc, #356]	; (800606c <drawSystemInfoMenu+0x21c>)
 8005f08:	4a59      	ldr	r2, [pc, #356]	; (8006070 <drawSystemInfoMenu+0x220>)
 8005f0a:	f7fb fb0f 	bl	800152c <LCD_PutStr>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	461a      	mov	r2, r3
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	4413      	add	r3, r2
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	b298      	uxth	r0, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	b299      	uxth	r1, r3
 8005f20:	4b52      	ldr	r3, [pc, #328]	; (800606c <drawSystemInfoMenu+0x21c>)
 8005f22:	4a54      	ldr	r2, [pc, #336]	; (8006074 <drawSystemInfoMenu+0x224>)
 8005f24:	f7fb fb02 	bl	800152c <LCD_PutStr>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	4413      	add	r3, r2
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	i+=170;
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	33aa      	adds	r3, #170	; 0xaa
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	b298      	uxth	r0, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	b299      	uxth	r1, r3
 8005f40:	4b4a      	ldr	r3, [pc, #296]	; (800606c <drawSystemInfoMenu+0x21c>)
 8005f42:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <drawSystemInfoMenu+0x228>)
 8005f44:	f7fb faf2 	bl	800152c <LCD_PutStr>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	4413      	add	r3, r2
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	b298      	uxth	r0, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	b299      	uxth	r1, r3
 8005f5a:	4b44      	ldr	r3, [pc, #272]	; (800606c <drawSystemInfoMenu+0x21c>)
 8005f5c:	4a47      	ldr	r2, [pc, #284]	; (800607c <drawSystemInfoMenu+0x22c>)
 8005f5e:	f7fb fae5 	bl	800152c <LCD_PutStr>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	4413      	add	r3, r2
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	i  = 135;
 8005f6c:	2387      	movs	r3, #135	; 0x87
 8005f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	j += 12;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	330c      	adds	r3, #12
 8005f74:	60fb      	str	r3, [r7, #12]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	b299      	uxth	r1, r3
 8005f7a:	4b3a      	ldr	r3, [pc, #232]	; (8006064 <drawSystemInfoMenu+0x214>)
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	3b02      	subs	r3, #2
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3303      	adds	r3, #3
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2002      	movs	r0, #2
 8005f8c:	f7fa ff82 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d004      	beq.n	8005fa0 <drawSystemInfoMenu+0x150>
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	f000 82d0 	beq.w	800653c <drawSystemInfoMenu+0x6ec>
 8005f9c:	f000 bc10 	b.w	80067c0 <drawSystemInfoMenu+0x970>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8005fa0:	232d      	movs	r3, #45	; 0x2d
 8005fa2:	60fb      	str	r3, [r7, #12]
		i=42;
 8005fa4:	232a      	movs	r3, #42	; 0x2a
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	b298      	uxth	r0, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	b299      	uxth	r1, r3
 8005fb0:	4b2e      	ldr	r3, [pc, #184]	; (800606c <drawSystemInfoMenu+0x21c>)
 8005fb2:	4a33      	ldr	r2, [pc, #204]	; (8006080 <drawSystemInfoMenu+0x230>)
 8005fb4:	f7fb faba 	bl	800152c <LCD_PutStr>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	4413      	add	r3, r2
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	b298      	uxth	r0, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	b299      	uxth	r1, r3
 8005fca:	4b28      	ldr	r3, [pc, #160]	; (800606c <drawSystemInfoMenu+0x21c>)
 8005fcc:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <drawSystemInfoMenu+0x234>)
 8005fce:	f7fb faad 	bl	800152c <LCD_PutStr>

		j+=15;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	330f      	adds	r3, #15
 8005fd6:	60fb      	str	r3, [r7, #12]
		i=42;
 8005fd8:	232a      	movs	r3, #42	; 0x2a
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	b298      	uxth	r0, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	b299      	uxth	r1, r3
 8005fe4:	4b21      	ldr	r3, [pc, #132]	; (800606c <drawSystemInfoMenu+0x21c>)
 8005fe6:	4a28      	ldr	r2, [pc, #160]	; (8006088 <drawSystemInfoMenu+0x238>)
 8005fe8:	f7fb faa0 	bl	800152c <LCD_PutStr>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	4413      	add	r3, r2
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	b298      	uxth	r0, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	b299      	uxth	r1, r3
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <drawSystemInfoMenu+0x21c>)
 8006000:	4a22      	ldr	r2, [pc, #136]	; (800608c <drawSystemInfoMenu+0x23c>)
 8006002:	f7fb fa93 	bl	800152c <LCD_PutStr>

		j+=30;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	331e      	adds	r3, #30
 800600a:	60fb      	str	r3, [r7, #12]
		i=10;
 800600c:	230a      	movs	r3, #10
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	b298      	uxth	r0, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	b299      	uxth	r1, r3
 8006018:	4b14      	ldr	r3, [pc, #80]	; (800606c <drawSystemInfoMenu+0x21c>)
 800601a:	4a1d      	ldr	r2, [pc, #116]	; (8006090 <drawSystemInfoMenu+0x240>)
 800601c:	f7fb fa86 	bl	800152c <LCD_PutStr>

		j+=15;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	330f      	adds	r3, #15
 8006024:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
		if((ZION.SOC_BoardID==1) || (ZION.ASIC_BoardID==1) || (ZION.DISPLAY_BoardID==1)){
 800602a:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <drawSystemInfoMenu+0x244>)
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d007      	beq.n	8006042 <drawSystemInfoMenu+0x1f2>
 8006032:	4b18      	ldr	r3, [pc, #96]	; (8006094 <drawSystemInfoMenu+0x244>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d003      	beq.n	8006042 <drawSystemInfoMenu+0x1f2>
 800603a:	4b16      	ldr	r3, [pc, #88]	; (8006094 <drawSystemInfoMenu+0x244>)
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	2b01      	cmp	r3, #1
 8006040:	d12c      	bne.n	800609c <drawSystemInfoMenu+0x24c>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	b298      	uxth	r0, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	b299      	uxth	r1, r3
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <drawSystemInfoMenu+0x21c>)
 800604c:	4a12      	ldr	r2, [pc, #72]	; (8006098 <drawSystemInfoMenu+0x248>)
 800604e:	f7fb fa6d 	bl	800152c <LCD_PutStr>
 8006052:	e02b      	b.n	80060ac <drawSystemInfoMenu+0x25c>
 8006054:	20003310 	.word	0x20003310
 8006058:	200291b4 	.word	0x200291b4
 800605c:	20030a30 	.word	0x20030a30
 8006060:	20028a38 	.word	0x20028a38
 8006064:	20028a3a 	.word	0x20028a3a
 8006068:	20028a3c 	.word	0x20028a3c
 800606c:	08015ce4 	.word	0x08015ce4
 8006070:	08015674 	.word	0x08015674
 8006074:	0801567c 	.word	0x0801567c
 8006078:	08015688 	.word	0x08015688
 800607c:	08015690 	.word	0x08015690
 8006080:	080159a8 	.word	0x080159a8
 8006084:	080159b8 	.word	0x080159b8
 8006088:	080159c0 	.word	0x080159c0
 800608c:	080159d8 	.word	0x080159d8
 8006090:	080159e0 	.word	0x080159e0
 8006094:	2000324c 	.word	0x2000324c
 8006098:	080159ec 	.word	0x080159ec
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	b298      	uxth	r0, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	b299      	uxth	r1, r3
 80060a4:	4b93      	ldr	r3, [pc, #588]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80060a6:	4a94      	ldr	r2, [pc, #592]	; (80062f8 <drawSystemInfoMenu+0x4a8>)
 80060a8:	f7fb fa40 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	330f      	adds	r3, #15
 80060b0:	60fb      	str	r3, [r7, #12]
		i=10;
 80060b2:	230a      	movs	r3, #10
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	b298      	uxth	r0, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	b299      	uxth	r1, r3
 80060be:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80060c0:	4a8e      	ldr	r2, [pc, #568]	; (80062fc <drawSystemInfoMenu+0x4ac>)
 80060c2:	f7fb fa33 	bl	800152c <LCD_PutStr>
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	4413      	add	r3, r2
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		i=otherBoardAlignment;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	b298      	uxth	r0, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	b299      	uxth	r1, r3
 80060dc:	4b85      	ldr	r3, [pc, #532]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80060de:	4a88      	ldr	r2, [pc, #544]	; (8006300 <drawSystemInfoMenu+0x4b0>)
 80060e0:	f7fb fa24 	bl	800152c <LCD_PutStr>

		j+=15;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	330f      	adds	r3, #15
 80060e8:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	b298      	uxth	r0, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	b299      	uxth	r1, r3
 80060f6:	4b7f      	ldr	r3, [pc, #508]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80060f8:	4a82      	ldr	r2, [pc, #520]	; (8006304 <drawSystemInfoMenu+0x4b4>)
 80060fa:	f7fb fa17 	bl	800152c <LCD_PutStr>
 80060fe:	4603      	mov	r3, r0
 8006100:	461a      	mov	r2, r3
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	4413      	add	r3, r2
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(ZION.SOC_BoardID==1){
 8006108:	4b7f      	ldr	r3, [pc, #508]	; (8006308 <drawSystemInfoMenu+0x4b8>)
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d14b      	bne.n	80061a8 <drawSystemInfoMenu+0x358>
			i+=LCD_PutStr(i, j, "TRIDENT ", fnt7x10);
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	b298      	uxth	r0, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	b299      	uxth	r1, r3
 8006118:	4b76      	ldr	r3, [pc, #472]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 800611a:	4a7c      	ldr	r2, [pc, #496]	; (800630c <drawSystemInfoMenu+0x4bc>)
 800611c:	f7fb fa06 	bl	800152c <LCD_PutStr>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	4413      	add	r3, r2
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
			switch(ZION.SOC_BoardFab){
 800612a:	4b77      	ldr	r3, [pc, #476]	; (8006308 <drawSystemInfoMenu+0x4b8>)
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	3b01      	subs	r3, #1
 8006130:	2b03      	cmp	r3, #3
 8006132:	d82f      	bhi.n	8006194 <drawSystemInfoMenu+0x344>
 8006134:	a201      	add	r2, pc, #4	; (adr r2, 800613c <drawSystemInfoMenu+0x2ec>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	0800614d 	.word	0x0800614d
 8006140:	0800615f 	.word	0x0800615f
 8006144:	08006171 	.word	0x08006171
 8006148:	08006183 	.word	0x08006183
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	b298      	uxth	r0, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	b299      	uxth	r1, r3
 8006154:	4b67      	ldr	r3, [pc, #412]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 8006156:	4a6e      	ldr	r2, [pc, #440]	; (8006310 <drawSystemInfoMenu+0x4c0>)
 8006158:	f7fb f9e8 	bl	800152c <LCD_PutStr>
				break;
 800615c:	e04c      	b.n	80061f8 <drawSystemInfoMenu+0x3a8>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	b298      	uxth	r0, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	b299      	uxth	r1, r3
 8006166:	4b63      	ldr	r3, [pc, #396]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 8006168:	4a6a      	ldr	r2, [pc, #424]	; (8006314 <drawSystemInfoMenu+0x4c4>)
 800616a:	f7fb f9df 	bl	800152c <LCD_PutStr>
				break;
 800616e:	e043      	b.n	80061f8 <drawSystemInfoMenu+0x3a8>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	b298      	uxth	r0, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	b299      	uxth	r1, r3
 8006178:	4b5e      	ldr	r3, [pc, #376]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 800617a:	4a67      	ldr	r2, [pc, #412]	; (8006318 <drawSystemInfoMenu+0x4c8>)
 800617c:	f7fb f9d6 	bl	800152c <LCD_PutStr>
				break;
 8006180:	e03a      	b.n	80061f8 <drawSystemInfoMenu+0x3a8>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	b298      	uxth	r0, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	b299      	uxth	r1, r3
 800618a:	4b5a      	ldr	r3, [pc, #360]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 800618c:	4a63      	ldr	r2, [pc, #396]	; (800631c <drawSystemInfoMenu+0x4cc>)
 800618e:	f7fb f9cd 	bl	800152c <LCD_PutStr>
				break;
 8006192:	e031      	b.n	80061f8 <drawSystemInfoMenu+0x3a8>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	b298      	uxth	r0, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	b299      	uxth	r1, r3
 800619c:	4b55      	ldr	r3, [pc, #340]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 800619e:	4a60      	ldr	r2, [pc, #384]	; (8006320 <drawSystemInfoMenu+0x4d0>)
 80061a0:	f7fb f9c4 	bl	800152c <LCD_PutStr>
				break;
 80061a4:	bf00      	nop
 80061a6:	e027      	b.n	80061f8 <drawSystemInfoMenu+0x3a8>
			}
			}
		}
		else{
			if(ZION.SOC_EEPROM_Detected){
 80061a8:	4b57      	ldr	r3, [pc, #348]	; (8006308 <drawSystemInfoMenu+0x4b8>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <drawSystemInfoMenu+0x398>
				if(ZION.SOC_BoardFab == -2){
 80061b0:	4b55      	ldr	r3, [pc, #340]	; (8006308 <drawSystemInfoMenu+0x4b8>)
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f113 0f02 	cmn.w	r3, #2
 80061b8:	d108      	bne.n	80061cc <drawSystemInfoMenu+0x37c>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	b298      	uxth	r0, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	b299      	uxth	r1, r3
 80061c2:	4b4c      	ldr	r3, [pc, #304]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80061c4:	4a57      	ldr	r2, [pc, #348]	; (8006324 <drawSystemInfoMenu+0x4d4>)
 80061c6:	f7fb f9b1 	bl	800152c <LCD_PutStr>
 80061ca:	e015      	b.n	80061f8 <drawSystemInfoMenu+0x3a8>
				}
				else if(ZION.SOC_BoardFab ==-1){
 80061cc:	4b4e      	ldr	r3, [pc, #312]	; (8006308 <drawSystemInfoMenu+0x4b8>)
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d110      	bne.n	80061f8 <drawSystemInfoMenu+0x3a8>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	b298      	uxth	r0, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	b299      	uxth	r1, r3
 80061de:	4b45      	ldr	r3, [pc, #276]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80061e0:	4a51      	ldr	r2, [pc, #324]	; (8006328 <drawSystemInfoMenu+0x4d8>)
 80061e2:	f7fb f9a3 	bl	800152c <LCD_PutStr>
 80061e6:	e007      	b.n	80061f8 <drawSystemInfoMenu+0x3a8>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	b298      	uxth	r0, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	b299      	uxth	r1, r3
 80061f0:	4b40      	ldr	r3, [pc, #256]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80061f2:	4a4e      	ldr	r2, [pc, #312]	; (800632c <drawSystemInfoMenu+0x4dc>)
 80061f4:	f7fb f99a 	bl	800152c <LCD_PutStr>
			}
		}
		i=otherBoardAlignment+indentAlignment;
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	4413      	add	r3, r2
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	b298      	uxth	r0, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	b299      	uxth	r1, r3
 8006208:	4b3a      	ldr	r3, [pc, #232]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 800620a:	4a49      	ldr	r2, [pc, #292]	; (8006330 <drawSystemInfoMenu+0x4e0>)
 800620c:	f7fb f98e 	bl	800152c <LCD_PutStr>
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	4413      	add	r3, r2
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(ZION.zionSwitch){
 800621a:	4b3b      	ldr	r3, [pc, #236]	; (8006308 <drawSystemInfoMenu+0x4b8>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d008      	beq.n	8006234 <drawSystemInfoMenu+0x3e4>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	b298      	uxth	r0, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	b299      	uxth	r1, r3
 800622a:	4b32      	ldr	r3, [pc, #200]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 800622c:	4a41      	ldr	r2, [pc, #260]	; (8006334 <drawSystemInfoMenu+0x4e4>)
 800622e:	f7fb f97d 	bl	800152c <LCD_PutStr>
 8006232:	e007      	b.n	8006244 <drawSystemInfoMenu+0x3f4>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	b298      	uxth	r0, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	b299      	uxth	r1, r3
 800623c:	4b2d      	ldr	r3, [pc, #180]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 800623e:	4a3e      	ldr	r2, [pc, #248]	; (8006338 <drawSystemInfoMenu+0x4e8>)
 8006240:	f7fb f974 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	330f      	adds	r3, #15
 8006248:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	b298      	uxth	r0, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	b299      	uxth	r1, r3
 8006256:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 8006258:	4a38      	ldr	r2, [pc, #224]	; (800633c <drawSystemInfoMenu+0x4ec>)
 800625a:	f7fb f967 	bl	800152c <LCD_PutStr>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	4413      	add	r3, r2
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(ZION.ASIC_BoardID==1){
 8006268:	4b27      	ldr	r3, [pc, #156]	; (8006308 <drawSystemInfoMenu+0x4b8>)
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d173      	bne.n	8006358 <drawSystemInfoMenu+0x508>
			i+=LCD_PutStr(i, j, "TOGA ", fnt7x10);
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	b298      	uxth	r0, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	b299      	uxth	r1, r3
 8006278:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 800627a:	4a31      	ldr	r2, [pc, #196]	; (8006340 <drawSystemInfoMenu+0x4f0>)
 800627c:	f7fb f956 	bl	800152c <LCD_PutStr>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	4413      	add	r3, r2
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
			switch(ZION.ASIC_BoardFab){
 800628a:	4b1f      	ldr	r3, [pc, #124]	; (8006308 <drawSystemInfoMenu+0x4b8>)
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	3b01      	subs	r3, #1
 8006290:	2b03      	cmp	r3, #3
 8006292:	d857      	bhi.n	8006344 <drawSystemInfoMenu+0x4f4>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <drawSystemInfoMenu+0x44c>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062bf 	.word	0x080062bf
 80062a4:	080062d1 	.word	0x080062d1
 80062a8:	080062e3 	.word	0x080062e3
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	b298      	uxth	r0, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	b299      	uxth	r1, r3
 80062b4:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80062b6:	4a16      	ldr	r2, [pc, #88]	; (8006310 <drawSystemInfoMenu+0x4c0>)
 80062b8:	f7fb f938 	bl	800152c <LCD_PutStr>
				break;
 80062bc:	e074      	b.n	80063a8 <drawSystemInfoMenu+0x558>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	b298      	uxth	r0, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	b299      	uxth	r1, r3
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80062c8:	4a12      	ldr	r2, [pc, #72]	; (8006314 <drawSystemInfoMenu+0x4c4>)
 80062ca:	f7fb f92f 	bl	800152c <LCD_PutStr>
				break;
 80062ce:	e06b      	b.n	80063a8 <drawSystemInfoMenu+0x558>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	b298      	uxth	r0, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	b299      	uxth	r1, r3
 80062d8:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80062da:	4a0f      	ldr	r2, [pc, #60]	; (8006318 <drawSystemInfoMenu+0x4c8>)
 80062dc:	f7fb f926 	bl	800152c <LCD_PutStr>
				break;
 80062e0:	e062      	b.n	80063a8 <drawSystemInfoMenu+0x558>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	b298      	uxth	r0, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	b299      	uxth	r1, r3
 80062ea:	4b02      	ldr	r3, [pc, #8]	; (80062f4 <drawSystemInfoMenu+0x4a4>)
 80062ec:	4a0b      	ldr	r2, [pc, #44]	; (800631c <drawSystemInfoMenu+0x4cc>)
 80062ee:	f7fb f91d 	bl	800152c <LCD_PutStr>
				break;
 80062f2:	e059      	b.n	80063a8 <drawSystemInfoMenu+0x558>
 80062f4:	08015ce4 	.word	0x08015ce4
 80062f8:	080159b8 	.word	0x080159b8
 80062fc:	080159f4 	.word	0x080159f4
 8006300:	08015a08 	.word	0x08015a08
 8006304:	08015750 	.word	0x08015750
 8006308:	2000324c 	.word	0x2000324c
 800630c:	08015a18 	.word	0x08015a18
 8006310:	08015a24 	.word	0x08015a24
 8006314:	08015a2c 	.word	0x08015a2c
 8006318:	08015a34 	.word	0x08015a34
 800631c:	08015a3c 	.word	0x08015a3c
 8006320:	08015a44 	.word	0x08015a44
 8006324:	08015a4c 	.word	0x08015a4c
 8006328:	08015a64 	.word	0x08015a64
 800632c:	08015a7c 	.word	0x08015a7c
 8006330:	08015a90 	.word	0x08015a90
 8006334:	08015a98 	.word	0x08015a98
 8006338:	08015aa8 	.word	0x08015aa8
 800633c:	08015764 	.word	0x08015764
 8006340:	08015ab4 	.word	0x08015ab4
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	b298      	uxth	r0, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	b299      	uxth	r1, r3
 800634c:	4b6f      	ldr	r3, [pc, #444]	; (800650c <drawSystemInfoMenu+0x6bc>)
 800634e:	4a70      	ldr	r2, [pc, #448]	; (8006510 <drawSystemInfoMenu+0x6c0>)
 8006350:	f7fb f8ec 	bl	800152c <LCD_PutStr>
				break;
 8006354:	bf00      	nop
 8006356:	e027      	b.n	80063a8 <drawSystemInfoMenu+0x558>
			}
			}
		}
		else{
			if(ZION.ASIC_EEPROM_Detected){
 8006358:	4b6e      	ldr	r3, [pc, #440]	; (8006514 <drawSystemInfoMenu+0x6c4>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01b      	beq.n	8006398 <drawSystemInfoMenu+0x548>
				if(ZION.ASIC_BoardFab == -2){
 8006360:	4b6c      	ldr	r3, [pc, #432]	; (8006514 <drawSystemInfoMenu+0x6c4>)
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f113 0f02 	cmn.w	r3, #2
 8006368:	d108      	bne.n	800637c <drawSystemInfoMenu+0x52c>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	b298      	uxth	r0, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	b299      	uxth	r1, r3
 8006372:	4b66      	ldr	r3, [pc, #408]	; (800650c <drawSystemInfoMenu+0x6bc>)
 8006374:	4a68      	ldr	r2, [pc, #416]	; (8006518 <drawSystemInfoMenu+0x6c8>)
 8006376:	f7fb f8d9 	bl	800152c <LCD_PutStr>
 800637a:	e015      	b.n	80063a8 <drawSystemInfoMenu+0x558>
				}
				else if(ZION.ASIC_BoardFab ==-1){
 800637c:	4b65      	ldr	r3, [pc, #404]	; (8006514 <drawSystemInfoMenu+0x6c4>)
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d110      	bne.n	80063a8 <drawSystemInfoMenu+0x558>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	b298      	uxth	r0, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	b299      	uxth	r1, r3
 800638e:	4b5f      	ldr	r3, [pc, #380]	; (800650c <drawSystemInfoMenu+0x6bc>)
 8006390:	4a62      	ldr	r2, [pc, #392]	; (800651c <drawSystemInfoMenu+0x6cc>)
 8006392:	f7fb f8cb 	bl	800152c <LCD_PutStr>
 8006396:	e007      	b.n	80063a8 <drawSystemInfoMenu+0x558>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	b298      	uxth	r0, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	b299      	uxth	r1, r3
 80063a0:	4b5a      	ldr	r3, [pc, #360]	; (800650c <drawSystemInfoMenu+0x6bc>)
 80063a2:	4a5f      	ldr	r2, [pc, #380]	; (8006520 <drawSystemInfoMenu+0x6d0>)
 80063a4:	f7fb f8c2 	bl	800152c <LCD_PutStr>
			}
		}

		j+=15;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	330f      	adds	r3, #15
 80063ac:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	b298      	uxth	r0, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	b299      	uxth	r1, r3
 80063ba:	4b54      	ldr	r3, [pc, #336]	; (800650c <drawSystemInfoMenu+0x6bc>)
 80063bc:	4a59      	ldr	r2, [pc, #356]	; (8006524 <drawSystemInfoMenu+0x6d4>)
 80063be:	f7fb f8b5 	bl	800152c <LCD_PutStr>
 80063c2:	4603      	mov	r3, r0
 80063c4:	461a      	mov	r2, r3
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	4413      	add	r3, r2
 80063ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(ZION.DISPLAY_BoardID==1){
 80063cc:	4b51      	ldr	r3, [pc, #324]	; (8006514 <drawSystemInfoMenu+0x6c4>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d14b      	bne.n	800646c <drawSystemInfoMenu+0x61c>
			i+=LCD_PutStr(i, j, "KANU ", fnt7x10);
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	b298      	uxth	r0, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	b299      	uxth	r1, r3
 80063dc:	4b4b      	ldr	r3, [pc, #300]	; (800650c <drawSystemInfoMenu+0x6bc>)
 80063de:	4a52      	ldr	r2, [pc, #328]	; (8006528 <drawSystemInfoMenu+0x6d8>)
 80063e0:	f7fb f8a4 	bl	800152c <LCD_PutStr>
 80063e4:	4603      	mov	r3, r0
 80063e6:	461a      	mov	r2, r3
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	4413      	add	r3, r2
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			switch(ZION.DISPLAY_BoardFab){
 80063ee:	4b49      	ldr	r3, [pc, #292]	; (8006514 <drawSystemInfoMenu+0x6c4>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	3b01      	subs	r3, #1
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d82f      	bhi.n	8006458 <drawSystemInfoMenu+0x608>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <drawSystemInfoMenu+0x5b0>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006411 	.word	0x08006411
 8006404:	08006423 	.word	0x08006423
 8006408:	08006435 	.word	0x08006435
 800640c:	08006447 	.word	0x08006447
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	b298      	uxth	r0, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	b299      	uxth	r1, r3
 8006418:	4b3c      	ldr	r3, [pc, #240]	; (800650c <drawSystemInfoMenu+0x6bc>)
 800641a:	4a44      	ldr	r2, [pc, #272]	; (800652c <drawSystemInfoMenu+0x6dc>)
 800641c:	f7fb f886 	bl	800152c <LCD_PutStr>
				break;
 8006420:	e04c      	b.n	80064bc <drawSystemInfoMenu+0x66c>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	b298      	uxth	r0, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	b299      	uxth	r1, r3
 800642a:	4b38      	ldr	r3, [pc, #224]	; (800650c <drawSystemInfoMenu+0x6bc>)
 800642c:	4a40      	ldr	r2, [pc, #256]	; (8006530 <drawSystemInfoMenu+0x6e0>)
 800642e:	f7fb f87d 	bl	800152c <LCD_PutStr>
				break;
 8006432:	e043      	b.n	80064bc <drawSystemInfoMenu+0x66c>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	b298      	uxth	r0, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	b299      	uxth	r1, r3
 800643c:	4b33      	ldr	r3, [pc, #204]	; (800650c <drawSystemInfoMenu+0x6bc>)
 800643e:	4a3d      	ldr	r2, [pc, #244]	; (8006534 <drawSystemInfoMenu+0x6e4>)
 8006440:	f7fb f874 	bl	800152c <LCD_PutStr>
				break;
 8006444:	e03a      	b.n	80064bc <drawSystemInfoMenu+0x66c>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	b298      	uxth	r0, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	b299      	uxth	r1, r3
 800644e:	4b2f      	ldr	r3, [pc, #188]	; (800650c <drawSystemInfoMenu+0x6bc>)
 8006450:	4a39      	ldr	r2, [pc, #228]	; (8006538 <drawSystemInfoMenu+0x6e8>)
 8006452:	f7fb f86b 	bl	800152c <LCD_PutStr>
				break;
 8006456:	e031      	b.n	80064bc <drawSystemInfoMenu+0x66c>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	b298      	uxth	r0, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	b299      	uxth	r1, r3
 8006460:	4b2a      	ldr	r3, [pc, #168]	; (800650c <drawSystemInfoMenu+0x6bc>)
 8006462:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <drawSystemInfoMenu+0x6c0>)
 8006464:	f7fb f862 	bl	800152c <LCD_PutStr>
				break;
 8006468:	bf00      	nop
 800646a:	e027      	b.n	80064bc <drawSystemInfoMenu+0x66c>
			}
			}
		}
		else{
			if(ZION.DISPLAY_EEPROM_Detected){
 800646c:	4b29      	ldr	r3, [pc, #164]	; (8006514 <drawSystemInfoMenu+0x6c4>)
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01b      	beq.n	80064ac <drawSystemInfoMenu+0x65c>
				if(ZION.DISPLAY_BoardFab == -2){
 8006474:	4b27      	ldr	r3, [pc, #156]	; (8006514 <drawSystemInfoMenu+0x6c4>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	f113 0f02 	cmn.w	r3, #2
 800647c:	d108      	bne.n	8006490 <drawSystemInfoMenu+0x640>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	b298      	uxth	r0, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	b299      	uxth	r1, r3
 8006486:	4b21      	ldr	r3, [pc, #132]	; (800650c <drawSystemInfoMenu+0x6bc>)
 8006488:	4a23      	ldr	r2, [pc, #140]	; (8006518 <drawSystemInfoMenu+0x6c8>)
 800648a:	f7fb f84f 	bl	800152c <LCD_PutStr>
 800648e:	e015      	b.n	80064bc <drawSystemInfoMenu+0x66c>
				}
				else if(ZION.DISPLAY_BoardFab ==-1){
 8006490:	4b20      	ldr	r3, [pc, #128]	; (8006514 <drawSystemInfoMenu+0x6c4>)
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006498:	d110      	bne.n	80064bc <drawSystemInfoMenu+0x66c>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	b298      	uxth	r0, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	b299      	uxth	r1, r3
 80064a2:	4b1a      	ldr	r3, [pc, #104]	; (800650c <drawSystemInfoMenu+0x6bc>)
 80064a4:	4a1d      	ldr	r2, [pc, #116]	; (800651c <drawSystemInfoMenu+0x6cc>)
 80064a6:	f7fb f841 	bl	800152c <LCD_PutStr>
 80064aa:	e007      	b.n	80064bc <drawSystemInfoMenu+0x66c>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	b298      	uxth	r0, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	b299      	uxth	r1, r3
 80064b4:	4b15      	ldr	r3, [pc, #84]	; (800650c <drawSystemInfoMenu+0x6bc>)
 80064b6:	4a1a      	ldr	r2, [pc, #104]	; (8006520 <drawSystemInfoMenu+0x6d0>)
 80064b8:	f7fb f838 	bl	800152c <LCD_PutStr>
			}
		}

		i=200;
 80064bc:	23c8      	movs	r3, #200	; 0xc8
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=220;
 80064c0:	23dc      	movs	r3, #220	; 0xdc
 80064c2:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	b298      	uxth	r0, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	b299      	uxth	r1, r3
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f7fb f97a 	bl	80017cc <drawUpDownArrow>
		i=180;
 80064d8:	23b4      	movs	r3, #180	; 0xb4
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	b298      	uxth	r0, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	b299      	uxth	r1, r3
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f7fb f96e 	bl	80017cc <drawUpDownArrow>
		i=220;
 80064f0:	23dc      	movs	r3, #220	; 0xdc
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	b298      	uxth	r0, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	b299      	uxth	r1, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f7fb f962 	bl	80017cc <drawUpDownArrow>
		break;
 8006508:	e15a      	b.n	80067c0 <drawSystemInfoMenu+0x970>
 800650a:	bf00      	nop
 800650c:	08015ce4 	.word	0x08015ce4
 8006510:	08015a44 	.word	0x08015a44
 8006514:	2000324c 	.word	0x2000324c
 8006518:	08015a4c 	.word	0x08015a4c
 800651c:	08015a64 	.word	0x08015a64
 8006520:	08015a7c 	.word	0x08015a7c
 8006524:	08015abc 	.word	0x08015abc
 8006528:	08015ac8 	.word	0x08015ac8
 800652c:	08015a24 	.word	0x08015a24
 8006530:	08015a2c 	.word	0x08015a2c
 8006534:	08015a34 	.word	0x08015a34
 8006538:	08015a3c 	.word	0x08015a3c
	}
	case 2:{
		j=45;
 800653c:	232d      	movs	r3, #45	; 0x2d
 800653e:	60fb      	str	r3, [r7, #12]
		i=10;
 8006540:	230a      	movs	r3, #10
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	b298      	uxth	r0, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	b299      	uxth	r1, r3
 800654c:	4b9f      	ldr	r3, [pc, #636]	; (80067cc <drawSystemInfoMenu+0x97c>)
 800654e:	4aa0      	ldr	r2, [pc, #640]	; (80067d0 <drawSystemInfoMenu+0x980>)
 8006550:	f7fa ffec 	bl	800152c <LCD_PutStr>

		j+=25;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3319      	adds	r3, #25
 8006558:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	b298      	uxth	r0, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	b299      	uxth	r1, r3
 8006566:	4b99      	ldr	r3, [pc, #612]	; (80067cc <drawSystemInfoMenu+0x97c>)
 8006568:	4a9a      	ldr	r2, [pc, #616]	; (80067d4 <drawSystemInfoMenu+0x984>)
 800656a:	f7fa ffdf 	bl	800152c <LCD_PutStr>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	4413      	add	r3, r2
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8006578:	4b97      	ldr	r3, [pc, #604]	; (80067d8 <drawSystemInfoMenu+0x988>)
 800657a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657c:	4a97      	ldr	r2, [pc, #604]	; (80067dc <drawSystemInfoMenu+0x98c>)
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	edd3 7a00 	vldr	s15, [r3]
 8006586:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800658a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800658e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006592:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006596:	ee17 3a90 	vmov	r3, s15
 800659a:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	b298      	uxth	r0, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	b299      	uxth	r1, r3
 80065a4:	4b89      	ldr	r3, [pc, #548]	; (80067cc <drawSystemInfoMenu+0x97c>)
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2301      	movs	r3, #1
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	f7fb f85c 	bl	8001668 <LCD_PutIntF>

		j+=25;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3319      	adds	r3, #25
 80065b4:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	b298      	uxth	r0, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	b299      	uxth	r1, r3
 80065c2:	4b82      	ldr	r3, [pc, #520]	; (80067cc <drawSystemInfoMenu+0x97c>)
 80065c4:	4a86      	ldr	r2, [pc, #536]	; (80067e0 <drawSystemInfoMenu+0x990>)
 80065c6:	f7fa ffb1 	bl	800152c <LCD_PutStr>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	4413      	add	r3, r2
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 80065d4:	4b80      	ldr	r3, [pc, #512]	; (80067d8 <drawSystemInfoMenu+0x988>)
 80065d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d8:	4a80      	ldr	r2, [pc, #512]	; (80067dc <drawSystemInfoMenu+0x98c>)
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	edd3 7a00 	vldr	s15, [r3]
 80065e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80065e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80065ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80065f2:	ee17 3a90 	vmov	r3, s15
 80065f6:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	b298      	uxth	r0, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	b299      	uxth	r1, r3
 8006600:	4b72      	ldr	r3, [pc, #456]	; (80067cc <drawSystemInfoMenu+0x97c>)
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2301      	movs	r3, #1
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	f7fb f82e 	bl	8001668 <LCD_PutIntF>

		j+=25;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3319      	adds	r3, #25
 8006610:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	b298      	uxth	r0, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	b299      	uxth	r1, r3
 800661e:	4b6b      	ldr	r3, [pc, #428]	; (80067cc <drawSystemInfoMenu+0x97c>)
 8006620:	4a70      	ldr	r2, [pc, #448]	; (80067e4 <drawSystemInfoMenu+0x994>)
 8006622:	f7fa ff83 	bl	800152c <LCD_PutStr>
 8006626:	4603      	mov	r3, r0
 8006628:	461a      	mov	r2, r3
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	4413      	add	r3, r2
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8006630:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <drawSystemInfoMenu+0x988>)
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	4a69      	ldr	r2, [pc, #420]	; (80067dc <drawSystemInfoMenu+0x98c>)
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	edd3 7a00 	vldr	s15, [r3]
 800663e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006642:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006646:	ee27 7b06 	vmul.f64	d7, d7, d6
 800664a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800664e:	ee17 3a90 	vmov	r3, s15
 8006652:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	b298      	uxth	r0, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	b299      	uxth	r1, r3
 800665c:	4b5b      	ldr	r3, [pc, #364]	; (80067cc <drawSystemInfoMenu+0x97c>)
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2301      	movs	r3, #1
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	f7fb f800 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3319      	adds	r3, #25
 800666c:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	b298      	uxth	r0, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	b299      	uxth	r1, r3
 800667a:	4b54      	ldr	r3, [pc, #336]	; (80067cc <drawSystemInfoMenu+0x97c>)
 800667c:	4a5a      	ldr	r2, [pc, #360]	; (80067e8 <drawSystemInfoMenu+0x998>)
 800667e:	f7fa ff55 	bl	800152c <LCD_PutStr>
 8006682:	4603      	mov	r3, r0
 8006684:	461a      	mov	r2, r3
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	4413      	add	r3, r2
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 800668c:	4b52      	ldr	r3, [pc, #328]	; (80067d8 <drawSystemInfoMenu+0x988>)
 800668e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006690:	4a52      	ldr	r2, [pc, #328]	; (80067dc <drawSystemInfoMenu+0x98c>)
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	edd3 7a00 	vldr	s15, [r3]
 800669a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800669e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80066a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80066a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80066aa:	ee17 3a90 	vmov	r3, s15
 80066ae:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	b298      	uxth	r0, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	b299      	uxth	r1, r3
 80066b8:	4b44      	ldr	r3, [pc, #272]	; (80067cc <drawSystemInfoMenu+0x97c>)
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2301      	movs	r3, #1
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	f7fa ffd2 	bl	8001668 <LCD_PutIntF>

		j+=25;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3319      	adds	r3, #25
 80066c8:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	b298      	uxth	r0, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	b299      	uxth	r1, r3
 80066d6:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <drawSystemInfoMenu+0x97c>)
 80066d8:	4a44      	ldr	r2, [pc, #272]	; (80067ec <drawSystemInfoMenu+0x99c>)
 80066da:	f7fa ff27 	bl	800152c <LCD_PutStr>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	4413      	add	r3, r2
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 80066e8:	4b3b      	ldr	r3, [pc, #236]	; (80067d8 <drawSystemInfoMenu+0x988>)
 80066ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ec:	4a3b      	ldr	r2, [pc, #236]	; (80067dc <drawSystemInfoMenu+0x98c>)
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	edd3 7a00 	vldr	s15, [r3]
 80066f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80066fa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80066fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006702:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006706:	ee17 3a90 	vmov	r3, s15
 800670a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	b298      	uxth	r0, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	b299      	uxth	r1, r3
 8006714:	4b2d      	ldr	r3, [pc, #180]	; (80067cc <drawSystemInfoMenu+0x97c>)
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2301      	movs	r3, #1
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	f7fa ffa4 	bl	8001668 <LCD_PutIntF>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	4413      	add	r3, r2
 8006728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672a:	4413      	add	r3, r2
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	b298      	uxth	r0, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	b299      	uxth	r1, r3
 8006736:	4b25      	ldr	r3, [pc, #148]	; (80067cc <drawSystemInfoMenu+0x97c>)
 8006738:	4a2d      	ldr	r2, [pc, #180]	; (80067f0 <drawSystemInfoMenu+0x9a0>)
 800673a:	f7fa fef7 	bl	800152c <LCD_PutStr>
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	4413      	add	r3, r2
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(ZION.zionSwitch ==1){
 8006748:	4b2a      	ldr	r3, [pc, #168]	; (80067f4 <drawSystemInfoMenu+0x9a4>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d108      	bne.n	8006762 <drawSystemInfoMenu+0x912>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	b298      	uxth	r0, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	b299      	uxth	r1, r3
 8006758:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <drawSystemInfoMenu+0x97c>)
 800675a:	4a27      	ldr	r2, [pc, #156]	; (80067f8 <drawSystemInfoMenu+0x9a8>)
 800675c:	f7fa fee6 	bl	800152c <LCD_PutStr>
 8006760:	e007      	b.n	8006772 <drawSystemInfoMenu+0x922>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	b298      	uxth	r0, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	b299      	uxth	r1, r3
 800676a:	4b18      	ldr	r3, [pc, #96]	; (80067cc <drawSystemInfoMenu+0x97c>)
 800676c:	4a23      	ldr	r2, [pc, #140]	; (80067fc <drawSystemInfoMenu+0x9ac>)
 800676e:	f7fa fedd 	bl	800152c <LCD_PutStr>
		}



		i=200;
 8006772:	23c8      	movs	r3, #200	; 0xc8
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=15;
 8006776:	230f      	movs	r3, #15
 8006778:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	b298      	uxth	r0, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	b299      	uxth	r1, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	b29a      	uxth	r2, r3
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f7fb f81f 	bl	80017cc <drawUpDownArrow>
		i=180;
 800678e:	23b4      	movs	r3, #180	; 0xb4
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	b298      	uxth	r0, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	b299      	uxth	r1, r3
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	b29a      	uxth	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f7fb f813 	bl	80017cc <drawUpDownArrow>
		i=220;
 80067a6:	23dc      	movs	r3, #220	; 0xdc
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	b298      	uxth	r0, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	b299      	uxth	r1, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f7fb f807 	bl	80017cc <drawUpDownArrow>

		break;
 80067be:	bf00      	nop
	}
	}
	SMLCD_Flush();
 80067c0:	f7f9 ff8a 	bl	80006d8 <SMLCD_Flush>
}
 80067c4:	bf00      	nop
 80067c6:	3730      	adds	r7, #48	; 0x30
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	08015ce4 	.word	0x08015ce4
 80067d0:	08015ad0 	.word	0x08015ad0
 80067d4:	08015ae8 	.word	0x08015ae8
 80067d8:	20000100 	.word	0x20000100
 80067dc:	20030a30 	.word	0x20030a30
 80067e0:	08015af8 	.word	0x08015af8
 80067e4:	08015b04 	.word	0x08015b04
 80067e8:	08015b10 	.word	0x08015b10
 80067ec:	08015a90 	.word	0x08015a90
 80067f0:	08015b1c 	.word	0x08015b1c
 80067f4:	2000324c 	.word	0x2000324c
 80067f8:	08015b2c 	.word	0x08015b2c
 80067fc:	08015b34 	.word	0x08015b34

08006800 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	460b      	mov	r3, r1
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 800680e:	2314      	movs	r3, #20
 8006810:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 8006812:	2332      	movs	r3, #50	; 0x32
 8006814:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 8006816:	f7fa f8a9 	bl	800096c <LCD_Clear>
		LCD_PixelMode = LCD_PSET;
 800681a:	4b94      	ldr	r3, [pc, #592]	; (8006a6c <drawBootMenu+0x26c>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]

		LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8006820:	4b93      	ldr	r3, [pc, #588]	; (8006a70 <drawBootMenu+0x270>)
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	4b92      	ldr	r3, [pc, #584]	; (8006a74 <drawBootMenu+0x274>)
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	3b01      	subs	r3, #1
 800682e:	b29b      	uxth	r3, r3
 8006830:	2100      	movs	r1, #0
 8006832:	2000      	movs	r0, #0
 8006834:	f7fa faec 	bl	8000e10 <LCD_Rect>
		LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8006838:	4b8d      	ldr	r3, [pc, #564]	; (8006a70 <drawBootMenu+0x270>)
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	3b03      	subs	r3, #3
 800683e:	b29a      	uxth	r2, r3
 8006840:	4b8c      	ldr	r3, [pc, #560]	; (8006a74 <drawBootMenu+0x274>)
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	3b03      	subs	r3, #3
 8006846:	b29b      	uxth	r3, r3
 8006848:	2102      	movs	r1, #2
 800684a:	2002      	movs	r0, #2
 800684c:	f7fa fae0 	bl	8000e10 <LCD_Rect>

		// RTC :)
		i  = 10;
 8006850:	230a      	movs	r3, #10
 8006852:	613b      	str	r3, [r7, #16]
		j  = 10;
 8006854:	230a      	movs	r3, #10
 8006856:	61fb      	str	r3, [r7, #28]
		i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	b298      	uxth	r0, r3
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	b299      	uxth	r1, r3
 8006860:	4b85      	ldr	r3, [pc, #532]	; (8006a78 <drawBootMenu+0x278>)
 8006862:	4a86      	ldr	r2, [pc, #536]	; (8006a7c <drawBootMenu+0x27c>)
 8006864:	f7fa fe62 	bl	800152c <LCD_PutStr>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4413      	add	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	b298      	uxth	r0, r3
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	b299      	uxth	r1, r3
 800687a:	4b7f      	ldr	r3, [pc, #508]	; (8006a78 <drawBootMenu+0x278>)
 800687c:	4a80      	ldr	r2, [pc, #512]	; (8006a80 <drawBootMenu+0x280>)
 800687e:	f7fa fe55 	bl	800152c <LCD_PutStr>
 8006882:	4603      	mov	r3, r0
 8006884:	461a      	mov	r2, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
		i+=170;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	33aa      	adds	r3, #170	; 0xaa
 8006890:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	b298      	uxth	r0, r3
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	b299      	uxth	r1, r3
 800689a:	4b77      	ldr	r3, [pc, #476]	; (8006a78 <drawBootMenu+0x278>)
 800689c:	4a79      	ldr	r2, [pc, #484]	; (8006a84 <drawBootMenu+0x284>)
 800689e:	f7fa fe45 	bl	800152c <LCD_PutStr>
 80068a2:	4603      	mov	r3, r0
 80068a4:	461a      	mov	r2, r3
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	4413      	add	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "QED", fnt7x10);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	b298      	uxth	r0, r3
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	b299      	uxth	r1, r3
 80068b4:	4b70      	ldr	r3, [pc, #448]	; (8006a78 <drawBootMenu+0x278>)
 80068b6:	4a74      	ldr	r2, [pc, #464]	; (8006a88 <drawBootMenu+0x288>)
 80068b8:	f7fa fe38 	bl	800152c <LCD_PutStr>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	4413      	add	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
		i  = 135;
 80068c6:	2387      	movs	r3, #135	; 0x87
 80068c8:	613b      	str	r3, [r7, #16]
		j += 12;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	330c      	adds	r3, #12
 80068ce:	61fb      	str	r3, [r7, #28]

		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	b299      	uxth	r1, r3
 80068d4:	4b66      	ldr	r3, [pc, #408]	; (8006a70 <drawBootMenu+0x270>)
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	3b02      	subs	r3, #2
 80068da:	b29a      	uxth	r2, r3
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3303      	adds	r3, #3
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	2002      	movs	r0, #2
 80068e6:	f7fa fad5 	bl	8000e94 <LCD_FillRect>

		j=45;
 80068ea:	232d      	movs	r3, #45	; 0x2d
 80068ec:	61fb      	str	r3, [r7, #28]
		i=42;
 80068ee:	232a      	movs	r3, #42	; 0x2a
 80068f0:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	b298      	uxth	r0, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	b299      	uxth	r1, r3
 80068fa:	4b5f      	ldr	r3, [pc, #380]	; (8006a78 <drawBootMenu+0x278>)
 80068fc:	4a63      	ldr	r2, [pc, #396]	; (8006a8c <drawBootMenu+0x28c>)
 80068fe:	f7fa fe15 	bl	800152c <LCD_PutStr>
		j+=20;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3314      	adds	r3, #20
 8006906:	61fb      	str	r3, [r7, #28]
		i=indentAlignment;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	b298      	uxth	r0, r3
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	b299      	uxth	r1, r3
 8006914:	4b58      	ldr	r3, [pc, #352]	; (8006a78 <drawBootMenu+0x278>)
 8006916:	4a5e      	ldr	r2, [pc, #376]	; (8006a90 <drawBootMenu+0x290>)
 8006918:	f7fa fe08 	bl	800152c <LCD_PutStr>
		j+=20;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	3314      	adds	r3, #20
 8006920:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	b298      	uxth	r0, r3
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	b299      	uxth	r1, r3
 800692a:	4b53      	ldr	r3, [pc, #332]	; (8006a78 <drawBootMenu+0x278>)
 800692c:	4a59      	ldr	r2, [pc, #356]	; (8006a94 <drawBootMenu+0x294>)
 800692e:	f7fa fdfd 	bl	800152c <LCD_PutStr>
		j+=20;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	3314      	adds	r3, #20
 8006936:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	b298      	uxth	r0, r3
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	b299      	uxth	r1, r3
 8006940:	4b4d      	ldr	r3, [pc, #308]	; (8006a78 <drawBootMenu+0x278>)
 8006942:	4a55      	ldr	r2, [pc, #340]	; (8006a98 <drawBootMenu+0x298>)
 8006944:	f7fa fdf2 	bl	800152c <LCD_PutStr>
		j+=20;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	3314      	adds	r3, #20
 800694c:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	b298      	uxth	r0, r3
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	b299      	uxth	r1, r3
 8006956:	4b48      	ldr	r3, [pc, #288]	; (8006a78 <drawBootMenu+0x278>)
 8006958:	4a50      	ldr	r2, [pc, #320]	; (8006a9c <drawBootMenu+0x29c>)
 800695a:	f7fa fde7 	bl	800152c <LCD_PutStr>
		j+=20;
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	3314      	adds	r3, #20
 8006962:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "UEFI", fnt7x10);
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	b298      	uxth	r0, r3
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	b299      	uxth	r1, r3
 800696c:	4b42      	ldr	r3, [pc, #264]	; (8006a78 <drawBootMenu+0x278>)
 800696e:	4a4c      	ldr	r2, [pc, #304]	; (8006aa0 <drawBootMenu+0x2a0>)
 8006970:	f7fa fddc 	bl	800152c <LCD_PutStr>
		i-= 17;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	3b11      	subs	r3, #17
 8006978:	613b      	str	r3, [r7, #16]
		switch(indicator){
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3b01      	subs	r3, #1
 800697e:	2b04      	cmp	r3, #4
 8006980:	f200 80d4 	bhi.w	8006b2c <drawBootMenu+0x32c>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <drawBootMenu+0x18c>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069a1 	.word	0x080069a1
 8006990:	080069e5 	.word	0x080069e5
 8006994:	08006a29 	.word	0x08006a29
 8006998:	08006aa9 	.word	0x08006aa9
 800699c:	08006aeb 	.word	0x08006aeb
		case FIRST:
		{
			j=65;
 80069a0:	2341      	movs	r3, #65	; 0x41
 80069a2:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	bf0c      	ite	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	2300      	movne	r3, #0
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	4b3c      	ldr	r3, [pc, #240]	; (8006aa4 <drawBootMenu+0x2a4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4299      	cmp	r1, r3
 80069b8:	bf0c      	ite	eq
 80069ba:	2301      	moveq	r3, #1
 80069bc:	2300      	movne	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	4013      	ands	r3, r2
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80b4 	beq.w	8006b32 <drawBootMenu+0x332>
				i=140;
 80069ca:	238c      	movs	r3, #140	; 0x8c
 80069cc:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	b298      	uxth	r0, r3
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3305      	adds	r3, #5
 80069d8:	b299      	uxth	r1, r3
 80069da:	2303      	movs	r3, #3
 80069dc:	2203      	movs	r2, #3
 80069de:	f7fa fef5 	bl	80017cc <drawUpDownArrow>
			}
			break;
 80069e2:	e0a6      	b.n	8006b32 <drawBootMenu+0x332>
		}
		case SECOND:
		{
			j=85;
 80069e4:	2355      	movs	r3, #85	; 0x55
 80069e6:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	4b2b      	ldr	r3, [pc, #172]	; (8006aa4 <drawBootMenu+0x2a4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4299      	cmp	r1, r3
 80069fc:	bf0c      	ite	eq
 80069fe:	2301      	moveq	r3, #1
 8006a00:	2300      	movne	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	4013      	ands	r3, r2
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8094 	beq.w	8006b36 <drawBootMenu+0x336>
				i=220;
 8006a0e:	23dc      	movs	r3, #220	; 0xdc
 8006a10:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	b298      	uxth	r0, r3
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3305      	adds	r3, #5
 8006a1c:	b299      	uxth	r1, r3
 8006a1e:	2303      	movs	r3, #3
 8006a20:	2203      	movs	r2, #3
 8006a22:	f7fa fed3 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006a26:	e086      	b.n	8006b36 <drawBootMenu+0x336>
		}
		case THIRD:
		{
			j=105;
 8006a28:	2369      	movs	r3, #105	; 0x69
 8006a2a:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	bf0c      	ite	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	2300      	movne	r3, #0
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <drawBootMenu+0x2a4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4299      	cmp	r1, r3
 8006a40:	bf0c      	ite	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	2300      	movne	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	4013      	ands	r3, r2
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d074      	beq.n	8006b3a <drawBootMenu+0x33a>
				i=130;
 8006a50:	2382      	movs	r3, #130	; 0x82
 8006a52:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	b298      	uxth	r0, r3
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3305      	adds	r3, #5
 8006a5e:	b299      	uxth	r1, r3
 8006a60:	2303      	movs	r3, #3
 8006a62:	2203      	movs	r2, #3
 8006a64:	f7fa feb2 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006a68:	e067      	b.n	8006b3a <drawBootMenu+0x33a>
 8006a6a:	bf00      	nop
 8006a6c:	20028a38 	.word	0x20028a38
 8006a70:	20028a3a 	.word	0x20028a3a
 8006a74:	20028a3c 	.word	0x20028a3c
 8006a78:	08015ce4 	.word	0x08015ce4
 8006a7c:	08015674 	.word	0x08015674
 8006a80:	0801567c 	.word	0x0801567c
 8006a84:	08015688 	.word	0x08015688
 8006a88:	08015690 	.word	0x08015690
 8006a8c:	08015b40 	.word	0x08015b40
 8006a90:	08015b5c 	.word	0x08015b5c
 8006a94:	08015b68 	.word	0x08015b68
 8006a98:	08015b7c 	.word	0x08015b7c
 8006a9c:	08015b88 	.word	0x08015b88
 8006aa0:	08015b98 	.word	0x08015b98
 8006aa4:	20003310 	.word	0x20003310
		}
		case FOURTH:
		{
			j=125;
 8006aa8:	237d      	movs	r3, #125	; 0x7d
 8006aaa:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	bf0c      	ite	eq
 8006ab2:	2301      	moveq	r3, #1
 8006ab4:	2300      	movne	r3, #0
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	4b2f      	ldr	r3, [pc, #188]	; (8006b78 <drawBootMenu+0x378>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4299      	cmp	r1, r3
 8006ac0:	bf0c      	ite	eq
 8006ac2:	2301      	moveq	r3, #1
 8006ac4:	2300      	movne	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	4013      	ands	r3, r2
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d036      	beq.n	8006b3e <drawBootMenu+0x33e>
				i=160;
 8006ad0:	23a0      	movs	r3, #160	; 0xa0
 8006ad2:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	b298      	uxth	r0, r3
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3305      	adds	r3, #5
 8006ade:	b299      	uxth	r1, r3
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	2203      	movs	r2, #3
 8006ae4:	f7fa fe72 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006ae8:	e029      	b.n	8006b3e <drawBootMenu+0x33e>
		}
		case FIFTH:
		{
			j=145;
 8006aea:	2391      	movs	r3, #145	; 0x91
 8006aec:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006aee:	7afb      	ldrb	r3, [r7, #11]
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	bf0c      	ite	eq
 8006af4:	2301      	moveq	r3, #1
 8006af6:	2300      	movne	r3, #0
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <drawBootMenu+0x378>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4299      	cmp	r1, r3
 8006b02:	bf0c      	ite	eq
 8006b04:	2301      	moveq	r3, #1
 8006b06:	2300      	movne	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d017      	beq.n	8006b42 <drawBootMenu+0x342>
				i=100;
 8006b12:	2364      	movs	r3, #100	; 0x64
 8006b14:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	b298      	uxth	r0, r3
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3305      	adds	r3, #5
 8006b20:	b299      	uxth	r1, r3
 8006b22:	2303      	movs	r3, #3
 8006b24:	2203      	movs	r2, #3
 8006b26:	f7fa fe51 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006b2a:	e00a      	b.n	8006b42 <drawBootMenu+0x342>
		}
		default:
		{
			j=75;
 8006b2c:	234b      	movs	r3, #75	; 0x4b
 8006b2e:	61fb      	str	r3, [r7, #28]
			break;
 8006b30:	e008      	b.n	8006b44 <drawBootMenu+0x344>
			break;
 8006b32:	bf00      	nop
 8006b34:	e006      	b.n	8006b44 <drawBootMenu+0x344>
			break;
 8006b36:	bf00      	nop
 8006b38:	e004      	b.n	8006b44 <drawBootMenu+0x344>
			break;
 8006b3a:	bf00      	nop
 8006b3c:	e002      	b.n	8006b44 <drawBootMenu+0x344>
			break;
 8006b3e:	bf00      	nop
 8006b40:	e000      	b.n	8006b44 <drawBootMenu+0x344>
			break;
 8006b42:	bf00      	nop
		}
		}
		previousMenu=menu;
 8006b44:	4a0c      	ldr	r2, [pc, #48]	; (8006b78 <drawBootMenu+0x378>)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6013      	str	r3, [r2, #0]
		i=25;
 8006b4a:	2319      	movs	r3, #25
 8006b4c:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	b298      	uxth	r0, r3
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	b299      	uxth	r1, r3
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	330a      	adds	r3, #10
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f7fa f995 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 8006b6a:	f7f9 fdb5 	bl	80006d8 <SMLCD_Flush>
}
 8006b6e:	bf00      	nop
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20003310 	.word	0x20003310

08006b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b82:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	4a10      	ldr	r2, [pc, #64]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b96:	607b      	str	r3, [r7, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	210f      	movs	r1, #15
 8006bb6:	f06f 0001 	mvn.w	r0, #1
 8006bba:	f002 f91f 	bl	8008dfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40023800 	.word	0x40023800

08006bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b094      	sub	sp, #80	; 0x50
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a91      	ldr	r2, [pc, #580]	; (8006e30 <HAL_ADC_MspInit+0x264>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	f040 808c 	bne.w	8006d08 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006bf0:	4b90      	ldr	r3, [pc, #576]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	4a8f      	ldr	r2, [pc, #572]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8006bfc:	4b8d      	ldr	r3, [pc, #564]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c08:	4b8a      	ldr	r3, [pc, #552]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	4a89      	ldr	r2, [pc, #548]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c0e:	f043 0304 	orr.w	r3, r3, #4
 8006c12:	6313      	str	r3, [r2, #48]	; 0x30
 8006c14:	4b87      	ldr	r3, [pc, #540]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c20:	4b84      	ldr	r3, [pc, #528]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	4a83      	ldr	r2, [pc, #524]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2c:	4b81      	ldr	r3, [pc, #516]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	633b      	str	r3, [r7, #48]	; 0x30
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c38:	4b7e      	ldr	r3, [pc, #504]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	4a7d      	ldr	r2, [pc, #500]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c3e:	f043 0302 	orr.w	r3, r3, #2
 8006c42:	6313      	str	r3, [r2, #48]	; 0x30
 8006c44:	4b7b      	ldr	r3, [pc, #492]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8006c50:	230f      	movs	r3, #15
 8006c52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c54:	2303      	movs	r3, #3
 8006c56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c60:	4619      	mov	r1, r3
 8006c62:	4875      	ldr	r0, [pc, #468]	; (8006e38 <HAL_ADC_MspInit+0x26c>)
 8006c64:	f002 fcfc 	bl	8009660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8006c68:	23f8      	movs	r3, #248	; 0xf8
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4870      	ldr	r0, [pc, #448]	; (8006e3c <HAL_ADC_MspInit+0x270>)
 8006c7c:	f002 fcf0 	bl	8009660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8006c80:	2303      	movs	r3, #3
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c84:	2303      	movs	r3, #3
 8006c86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c90:	4619      	mov	r1, r3
 8006c92:	486b      	ldr	r0, [pc, #428]	; (8006e40 <HAL_ADC_MspInit+0x274>)
 8006c94:	f002 fce4 	bl	8009660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006c98:	4b6a      	ldr	r3, [pc, #424]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006c9a:	4a6b      	ldr	r2, [pc, #428]	; (8006e48 <HAL_ADC_MspInit+0x27c>)
 8006c9c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006c9e:	4b69      	ldr	r3, [pc, #420]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ca4:	4b67      	ldr	r3, [pc, #412]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006caa:	4b66      	ldr	r3, [pc, #408]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006cb0:	4b64      	ldr	r3, [pc, #400]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006cb8:	4b62      	ldr	r3, [pc, #392]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006cc0:	4b60      	ldr	r3, [pc, #384]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006cc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006cc8:	4b5e      	ldr	r3, [pc, #376]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006cce:	4b5d      	ldr	r3, [pc, #372]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cd4:	4b5b      	ldr	r3, [pc, #364]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006cda:	485a      	ldr	r0, [pc, #360]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cdc:	f002 f8b8 	bl	8008e50 <HAL_DMA_Init>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8006ce6:	f7fd fc61 	bl	80045ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a55      	ldr	r2, [pc, #340]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
 8006cf0:	4a54      	ldr	r2, [pc, #336]	; (8006e44 <HAL_ADC_MspInit+0x278>)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2105      	movs	r1, #5
 8006cfa:	2012      	movs	r0, #18
 8006cfc:	f002 f87e 	bl	8008dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006d00:	2012      	movs	r0, #18
 8006d02:	f002 f897 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8006d06:	e13a      	b.n	8006f7e <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a4f      	ldr	r2, [pc, #316]	; (8006e4c <HAL_ADC_MspInit+0x280>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	f040 80a2 	bne.w	8006e58 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006d14:	4b47      	ldr	r3, [pc, #284]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	4a46      	ldr	r2, [pc, #280]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8006d20:	4b44      	ldr	r3, [pc, #272]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d2c:	4b41      	ldr	r3, [pc, #260]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	4a40      	ldr	r2, [pc, #256]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d32:	f043 0304 	orr.w	r3, r3, #4
 8006d36:	6313      	str	r3, [r2, #48]	; 0x30
 8006d38:	4b3e      	ldr	r3, [pc, #248]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d44:	4b3b      	ldr	r3, [pc, #236]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	4a3a      	ldr	r2, [pc, #232]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d50:	4b38      	ldr	r3, [pc, #224]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	623b      	str	r3, [r7, #32]
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	4a34      	ldr	r2, [pc, #208]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d62:	f043 0302 	orr.w	r3, r3, #2
 8006d66:	6313      	str	r3, [r2, #48]	; 0x30
 8006d68:	4b32      	ldr	r3, [pc, #200]	; (8006e34 <HAL_ADC_MspInit+0x268>)
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8006d74:	233f      	movs	r3, #63	; 0x3f
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d84:	4619      	mov	r1, r3
 8006d86:	482c      	ldr	r0, [pc, #176]	; (8006e38 <HAL_ADC_MspInit+0x26c>)
 8006d88:	f002 fc6a 	bl	8009660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8006d8c:	237b      	movs	r3, #123	; 0x7b
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d90:	2303      	movs	r3, #3
 8006d92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4827      	ldr	r0, [pc, #156]	; (8006e3c <HAL_ADC_MspInit+0x270>)
 8006da0:	f002 fc5e 	bl	8009660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8006da4:	2302      	movs	r3, #2
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006da8:	2303      	movs	r3, #3
 8006daa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dac:	2300      	movs	r3, #0
 8006dae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8006db0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006db4:	4619      	mov	r1, r3
 8006db6:	4822      	ldr	r0, [pc, #136]	; (8006e40 <HAL_ADC_MspInit+0x274>)
 8006db8:	f002 fc52 	bl	8009660 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006dbc:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006dbe:	4a25      	ldr	r2, [pc, #148]	; (8006e54 <HAL_ADC_MspInit+0x288>)
 8006dc0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006dc2:	4b23      	ldr	r3, [pc, #140]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dc8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006dca:	4b21      	ldr	r3, [pc, #132]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dd0:	4b1f      	ldr	r3, [pc, #124]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006dd6:	4b1e      	ldr	r3, [pc, #120]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ddc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006dde:	4b1c      	ldr	r3, [pc, #112]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006de0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006de4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006de6:	4b1a      	ldr	r3, [pc, #104]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006de8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006dec:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8006dee:	4b18      	ldr	r3, [pc, #96]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006df4:	4b16      	ldr	r3, [pc, #88]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dfa:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006e00:	4813      	ldr	r0, [pc, #76]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006e02:	f002 f825 	bl	8008e50 <HAL_DMA_Init>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8006e0c:	f7fd fbce 	bl	80045ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a0f      	ldr	r2, [pc, #60]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006e14:	639a      	str	r2, [r3, #56]	; 0x38
 8006e16:	4a0e      	ldr	r2, [pc, #56]	; (8006e50 <HAL_ADC_MspInit+0x284>)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2105      	movs	r1, #5
 8006e20:	2012      	movs	r0, #18
 8006e22:	f001 ffeb 	bl	8008dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006e26:	2012      	movs	r0, #18
 8006e28:	f002 f804 	bl	8008e34 <HAL_NVIC_EnableIRQ>
}
 8006e2c:	e0a7      	b.n	8006f7e <HAL_ADC_MspInit+0x3b2>
 8006e2e:	bf00      	nop
 8006e30:	40012000 	.word	0x40012000
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40020800 	.word	0x40020800
 8006e3c:	40020000 	.word	0x40020000
 8006e40:	40020400 	.word	0x40020400
 8006e44:	2002ba20 	.word	0x2002ba20
 8006e48:	40026410 	.word	0x40026410
 8006e4c:	40012100 	.word	0x40012100
 8006e50:	20030968 	.word	0x20030968
 8006e54:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a4a      	ldr	r2, [pc, #296]	; (8006f88 <HAL_ADC_MspInit+0x3bc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f040 808d 	bne.w	8006f7e <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006e64:	4b49      	ldr	r3, [pc, #292]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e68:	4a48      	ldr	r2, [pc, #288]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e6e:	6453      	str	r3, [r2, #68]	; 0x44
 8006e70:	4b46      	ldr	r3, [pc, #280]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e7c:	4b43      	ldr	r3, [pc, #268]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	4a42      	ldr	r2, [pc, #264]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006e82:	f043 0320 	orr.w	r3, r3, #32
 8006e86:	6313      	str	r3, [r2, #48]	; 0x30
 8006e88:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e94:	4b3d      	ldr	r3, [pc, #244]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	4a3c      	ldr	r2, [pc, #240]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006e9a:	f043 0304 	orr.w	r3, r3, #4
 8006e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8006ea0:	4b3a      	ldr	r3, [pc, #232]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eac:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	4a36      	ldr	r2, [pc, #216]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006eb2:	f043 0301 	orr.w	r3, r3, #1
 8006eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb8:	4b34      	ldr	r3, [pc, #208]	; (8006f8c <HAL_ADC_MspInit+0x3c0>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8006ec4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006ed2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	482d      	ldr	r0, [pc, #180]	; (8006f90 <HAL_ADC_MspInit+0x3c4>)
 8006eda:	f002 fbc1 	bl	8009660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8006ede:	230f      	movs	r3, #15
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4828      	ldr	r0, [pc, #160]	; (8006f94 <HAL_ADC_MspInit+0x3c8>)
 8006ef2:	f002 fbb5 	bl	8009660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006efa:	2303      	movs	r3, #3
 8006efc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f06:	4619      	mov	r1, r3
 8006f08:	4823      	ldr	r0, [pc, #140]	; (8006f98 <HAL_ADC_MspInit+0x3cc>)
 8006f0a:	f002 fba9 	bl	8009660 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8006f0e:	4b23      	ldr	r3, [pc, #140]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f10:	4a23      	ldr	r2, [pc, #140]	; (8006fa0 <HAL_ADC_MspInit+0x3d4>)
 8006f12:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8006f14:	4b21      	ldr	r3, [pc, #132]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006f1a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f1c:	4b1f      	ldr	r3, [pc, #124]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f22:	4b1e      	ldr	r3, [pc, #120]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006f28:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f2e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f30:	4b1a      	ldr	r3, [pc, #104]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f36:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f38:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f3e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8006f40:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8006f46:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f4c:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8006f52:	4812      	ldr	r0, [pc, #72]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f54:	f001 ff7c 	bl	8008e50 <HAL_DMA_Init>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8006f5e:	f7fd fb25 	bl	80045ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a0d      	ldr	r2, [pc, #52]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38
 8006f68:	4a0c      	ldr	r2, [pc, #48]	; (8006f9c <HAL_ADC_MspInit+0x3d0>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2105      	movs	r1, #5
 8006f72:	2012      	movs	r0, #18
 8006f74:	f001 ff42 	bl	8008dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006f78:	2012      	movs	r0, #18
 8006f7a:	f001 ff5b 	bl	8008e34 <HAL_NVIC_EnableIRQ>
}
 8006f7e:	bf00      	nop
 8006f80:	3750      	adds	r7, #80	; 0x50
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40012200 	.word	0x40012200
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40021400 	.word	0x40021400
 8006f94:	40020800 	.word	0x40020800
 8006f98:	40020000 	.word	0x40020000
 8006f9c:	20029154 	.word	0x20029154
 8006fa0:	40026428 	.word	0x40026428

08006fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b090      	sub	sp, #64	; 0x40
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6c      	ldr	r2, [pc, #432]	; (8007174 <HAL_I2C_MspInit+0x1d0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d129      	bne.n	800701a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fc6:	4b6c      	ldr	r3, [pc, #432]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	4a6b      	ldr	r2, [pc, #428]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8006fcc:	f043 0302 	orr.w	r3, r3, #2
 8006fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd2:	4b69      	ldr	r3, [pc, #420]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8006fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fe4:	2312      	movs	r3, #18
 8006fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fec:	2303      	movs	r3, #3
 8006fee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4860      	ldr	r0, [pc, #384]	; (800717c <HAL_I2C_MspInit+0x1d8>)
 8006ffc:	f002 fb30 	bl	8009660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007000:	4b5d      	ldr	r3, [pc, #372]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	4a5c      	ldr	r2, [pc, #368]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800700a:	6413      	str	r3, [r2, #64]	; 0x40
 800700c:	4b5a      	ldr	r3, [pc, #360]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8007018:	e0a7      	b.n	800716a <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a58      	ldr	r2, [pc, #352]	; (8007180 <HAL_I2C_MspInit+0x1dc>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d128      	bne.n	8007076 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007024:	4b54      	ldr	r3, [pc, #336]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	4a53      	ldr	r2, [pc, #332]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800702a:	f043 0320 	orr.w	r3, r3, #32
 800702e:	6313      	str	r3, [r2, #48]	; 0x30
 8007030:	4b51      	ldr	r3, [pc, #324]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	623b      	str	r3, [r7, #32]
 800703a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 800703c:	2303      	movs	r3, #3
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007040:	2312      	movs	r3, #18
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007044:	2301      	movs	r3, #1
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007048:	2303      	movs	r3, #3
 800704a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800704c:	2304      	movs	r3, #4
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007054:	4619      	mov	r1, r3
 8007056:	484b      	ldr	r0, [pc, #300]	; (8007184 <HAL_I2C_MspInit+0x1e0>)
 8007058:	f002 fb02 	bl	8009660 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800705c:	4b46      	ldr	r3, [pc, #280]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	4a45      	ldr	r2, [pc, #276]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007066:	6413      	str	r3, [r2, #64]	; 0x40
 8007068:	4b43      	ldr	r3, [pc, #268]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	69fb      	ldr	r3, [r7, #28]
}
 8007074:	e079      	b.n	800716a <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a43      	ldr	r2, [pc, #268]	; (8007188 <HAL_I2C_MspInit+0x1e4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d146      	bne.n	800710e <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007080:	4b3d      	ldr	r3, [pc, #244]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	4a3c      	ldr	r2, [pc, #240]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007086:	f043 0304 	orr.w	r3, r3, #4
 800708a:	6313      	str	r3, [r2, #48]	; 0x30
 800708c:	4b3a      	ldr	r3, [pc, #232]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	61bb      	str	r3, [r7, #24]
 8007096:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007098:	4b37      	ldr	r3, [pc, #220]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	4a36      	ldr	r2, [pc, #216]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	6313      	str	r3, [r2, #48]	; 0x30
 80070a4:	4b34      	ldr	r3, [pc, #208]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 80070b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070b6:	2312      	movs	r3, #18
 80070b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070ba:	2301      	movs	r3, #1
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070be:	2303      	movs	r3, #3
 80070c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80070c2:	2304      	movs	r3, #4
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 80070c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070ca:	4619      	mov	r1, r3
 80070cc:	482f      	ldr	r0, [pc, #188]	; (800718c <HAL_I2C_MspInit+0x1e8>)
 80070ce:	f002 fac7 	bl	8009660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 80070d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070d8:	2312      	movs	r3, #18
 80070da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070dc:	2301      	movs	r3, #1
 80070de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070e0:	2303      	movs	r3, #3
 80070e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80070e4:	2304      	movs	r3, #4
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 80070e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070ec:	4619      	mov	r1, r3
 80070ee:	4828      	ldr	r0, [pc, #160]	; (8007190 <HAL_I2C_MspInit+0x1ec>)
 80070f0:	f002 fab6 	bl	8009660 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80070f4:	4b20      	ldr	r3, [pc, #128]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	4a1f      	ldr	r2, [pc, #124]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 80070fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070fe:	6413      	str	r3, [r2, #64]	; 0x40
 8007100:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	693b      	ldr	r3, [r7, #16]
}
 800710c:	e02d      	b.n	800716a <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a20      	ldr	r2, [pc, #128]	; (8007194 <HAL_I2C_MspInit+0x1f0>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d128      	bne.n	800716a <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007118:	4b17      	ldr	r3, [pc, #92]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	4a16      	ldr	r2, [pc, #88]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 800711e:	f043 0320 	orr.w	r3, r3, #32
 8007122:	6313      	str	r3, [r2, #48]	; 0x30
 8007124:	4b14      	ldr	r3, [pc, #80]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8007130:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007136:	2312      	movs	r3, #18
 8007138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800713a:	2301      	movs	r3, #1
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713e:	2303      	movs	r3, #3
 8007140:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007142:	2304      	movs	r3, #4
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800714a:	4619      	mov	r1, r3
 800714c:	480d      	ldr	r0, [pc, #52]	; (8007184 <HAL_I2C_MspInit+0x1e0>)
 800714e:	f002 fa87 	bl	8009660 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	4a08      	ldr	r2, [pc, #32]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800715c:	6413      	str	r3, [r2, #64]	; 0x40
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_I2C_MspInit+0x1d4>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007166:	60bb      	str	r3, [r7, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
}
 800716a:	bf00      	nop
 800716c:	3740      	adds	r7, #64	; 0x40
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40005400 	.word	0x40005400
 8007178:	40023800 	.word	0x40023800
 800717c:	40020400 	.word	0x40020400
 8007180:	40005800 	.word	0x40005800
 8007184:	40021400 	.word	0x40021400
 8007188:	40005c00 	.word	0x40005c00
 800718c:	40020800 	.word	0x40020800
 8007190:	40020000 	.word	0x40020000
 8007194:	40006000 	.word	0x40006000

08007198 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a07      	ldr	r2, [pc, #28]	; (80071c4 <HAL_RTC_MspInit+0x2c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d105      	bne.n	80071b6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <HAL_RTC_MspInit+0x30>)
 80071ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ae:	4a06      	ldr	r2, [pc, #24]	; (80071c8 <HAL_RTC_MspInit+0x30>)
 80071b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40002800 	.word	0x40002800
 80071c8:	40023800 	.word	0x40023800

080071cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08c      	sub	sp, #48	; 0x30
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071d4:	f107 031c 	add.w	r3, r7, #28
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a40      	ldr	r2, [pc, #256]	; (80072ec <HAL_SPI_MspInit+0x120>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d130      	bne.n	8007250 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80071ee:	4b40      	ldr	r3, [pc, #256]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	4a3f      	ldr	r2, [pc, #252]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 80071f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071f8:	6453      	str	r3, [r2, #68]	; 0x44
 80071fa:	4b3d      	ldr	r3, [pc, #244]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007206:	4b3a      	ldr	r3, [pc, #232]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	4a39      	ldr	r2, [pc, #228]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 800720c:	f043 0310 	orr.w	r3, r3, #16
 8007210:	6313      	str	r3, [r2, #48]	; 0x30
 8007212:	4b37      	ldr	r3, [pc, #220]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800721e:	2364      	movs	r3, #100	; 0x64
 8007220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007222:	2302      	movs	r3, #2
 8007224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007226:	2300      	movs	r3, #0
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800722a:	2303      	movs	r3, #3
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800722e:	2305      	movs	r3, #5
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007232:	f107 031c 	add.w	r3, r7, #28
 8007236:	4619      	mov	r1, r3
 8007238:	482e      	ldr	r0, [pc, #184]	; (80072f4 <HAL_SPI_MspInit+0x128>)
 800723a:	f002 fa11 	bl	8009660 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800723e:	2200      	movs	r2, #0
 8007240:	2105      	movs	r1, #5
 8007242:	2054      	movs	r0, #84	; 0x54
 8007244:	f001 fdda 	bl	8008dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8007248:	2054      	movs	r0, #84	; 0x54
 800724a:	f001 fdf3 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800724e:	e049      	b.n	80072e4 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <HAL_SPI_MspInit+0x12c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d144      	bne.n	80072e4 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800725a:	4b25      	ldr	r3, [pc, #148]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 800725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725e:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007264:	6453      	str	r3, [r2, #68]	; 0x44
 8007266:	4b22      	ldr	r3, [pc, #136]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007272:	4b1f      	ldr	r3, [pc, #124]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727c:	6313      	str	r3, [r2, #48]	; 0x30
 800727e:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800728a:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007290:	f043 0320 	orr.w	r3, r3, #32
 8007294:	6313      	str	r3, [r2, #48]	; 0x30
 8007296:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <HAL_SPI_MspInit+0x124>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 80072a2:	23e0      	movs	r3, #224	; 0xe0
 80072a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072a6:	2302      	movs	r3, #2
 80072a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ae:	2303      	movs	r3, #3
 80072b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80072b2:	2305      	movs	r3, #5
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80072b6:	f107 031c 	add.w	r3, r7, #28
 80072ba:	4619      	mov	r1, r3
 80072bc:	480f      	ldr	r0, [pc, #60]	; (80072fc <HAL_SPI_MspInit+0x130>)
 80072be:	f002 f9cf 	bl	8009660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 80072c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072c8:	2302      	movs	r3, #2
 80072ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072d0:	2303      	movs	r3, #3
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80072d4:	2305      	movs	r3, #5
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 80072d8:	f107 031c 	add.w	r3, r7, #28
 80072dc:	4619      	mov	r1, r3
 80072de:	4808      	ldr	r0, [pc, #32]	; (8007300 <HAL_SPI_MspInit+0x134>)
 80072e0:	f002 f9be 	bl	8009660 <HAL_GPIO_Init>
}
 80072e4:	bf00      	nop
 80072e6:	3730      	adds	r7, #48	; 0x30
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40013400 	.word	0x40013400
 80072f0:	40023800 	.word	0x40023800
 80072f4:	40021000 	.word	0x40021000
 80072f8:	40015000 	.word	0x40015000
 80072fc:	40021c00 	.word	0x40021c00
 8007300:	40021400 	.word	0x40021400

08007304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a13      	ldr	r2, [pc, #76]	; (8007360 <HAL_TIM_Base_MspInit+0x5c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d10c      	bne.n	8007330 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007316:	4b13      	ldr	r3, [pc, #76]	; (8007364 <HAL_TIM_Base_MspInit+0x60>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	4a12      	ldr	r2, [pc, #72]	; (8007364 <HAL_TIM_Base_MspInit+0x60>)
 800731c:	f043 0304 	orr.w	r3, r3, #4
 8007320:	6413      	str	r3, [r2, #64]	; 0x40
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <HAL_TIM_Base_MspInit+0x60>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800732e:	e010      	b.n	8007352 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a0c      	ldr	r2, [pc, #48]	; (8007368 <HAL_TIM_Base_MspInit+0x64>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d10b      	bne.n	8007352 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800733a:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <HAL_TIM_Base_MspInit+0x60>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	4a09      	ldr	r2, [pc, #36]	; (8007364 <HAL_TIM_Base_MspInit+0x60>)
 8007340:	f043 0308 	orr.w	r3, r3, #8
 8007344:	6413      	str	r3, [r2, #64]	; 0x40
 8007346:	4b07      	ldr	r3, [pc, #28]	; (8007364 <HAL_TIM_Base_MspInit+0x60>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	60bb      	str	r3, [r7, #8]
 8007350:	68bb      	ldr	r3, [r7, #8]
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40000800 	.word	0x40000800
 8007364:	40023800 	.word	0x40023800
 8007368:	40000c00 	.word	0x40000c00

0800736c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	60da      	str	r2, [r3, #12]
 8007382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a22      	ldr	r2, [pc, #136]	; (8007414 <HAL_TIM_MspPostInit+0xa8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d11c      	bne.n	80073c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800738e:	4b22      	ldr	r3, [pc, #136]	; (8007418 <HAL_TIM_MspPostInit+0xac>)
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	4a21      	ldr	r2, [pc, #132]	; (8007418 <HAL_TIM_MspPostInit+0xac>)
 8007394:	f043 0302 	orr.w	r3, r3, #2
 8007398:	6313      	str	r3, [r2, #48]	; 0x30
 800739a:	4b1f      	ldr	r3, [pc, #124]	; (8007418 <HAL_TIM_MspPostInit+0xac>)
 800739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073aa:	2302      	movs	r3, #2
 80073ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b2:	2300      	movs	r3, #0
 80073b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80073b6:	2302      	movs	r3, #2
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 80073ba:	f107 0314 	add.w	r3, r7, #20
 80073be:	4619      	mov	r1, r3
 80073c0:	4816      	ldr	r0, [pc, #88]	; (800741c <HAL_TIM_MspPostInit+0xb0>)
 80073c2:	f002 f94d 	bl	8009660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80073c6:	e021      	b.n	800740c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a14      	ldr	r2, [pc, #80]	; (8007420 <HAL_TIM_MspPostInit+0xb4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d11c      	bne.n	800740c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80073d2:	4b11      	ldr	r3, [pc, #68]	; (8007418 <HAL_TIM_MspPostInit+0xac>)
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	4a10      	ldr	r2, [pc, #64]	; (8007418 <HAL_TIM_MspPostInit+0xac>)
 80073d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073dc:	6313      	str	r3, [r2, #48]	; 0x30
 80073de:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <HAL_TIM_MspPostInit+0xac>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 80073ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f0:	2302      	movs	r3, #2
 80073f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073f8:	2300      	movs	r3, #0
 80073fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80073fc:	2302      	movs	r3, #2
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007400:	f107 0314 	add.w	r3, r7, #20
 8007404:	4619      	mov	r1, r3
 8007406:	4807      	ldr	r0, [pc, #28]	; (8007424 <HAL_TIM_MspPostInit+0xb8>)
 8007408:	f002 f92a 	bl	8009660 <HAL_GPIO_Init>
}
 800740c:	bf00      	nop
 800740e:	3728      	adds	r7, #40	; 0x28
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40000800 	.word	0x40000800
 8007418:	40023800 	.word	0x40023800
 800741c:	40020400 	.word	0x40020400
 8007420:	40000c00 	.word	0x40000c00
 8007424:	40021c00 	.word	0x40021c00

08007428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	; 0x38
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	605a      	str	r2, [r3, #4]
 800743a:	609a      	str	r2, [r3, #8]
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a6c      	ldr	r2, [pc, #432]	; (80075f8 <HAL_UART_MspInit+0x1d0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d129      	bne.n	800749e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800744a:	4b6c      	ldr	r3, [pc, #432]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	4a6b      	ldr	r2, [pc, #428]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 8007450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007454:	6413      	str	r3, [r2, #64]	; 0x40
 8007456:	4b69      	ldr	r3, [pc, #420]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007462:	4b66      	ldr	r3, [pc, #408]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	4a65      	ldr	r2, [pc, #404]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 8007468:	f043 0304 	orr.w	r3, r3, #4
 800746c:	6313      	str	r3, [r2, #48]	; 0x30
 800746e:	4b63      	ldr	r3, [pc, #396]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	f003 0304 	and.w	r3, r3, #4
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 800747a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007480:	2302      	movs	r3, #2
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007484:	2300      	movs	r3, #0
 8007486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007488:	2303      	movs	r3, #3
 800748a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800748c:	2308      	movs	r3, #8
 800748e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007494:	4619      	mov	r1, r3
 8007496:	485a      	ldr	r0, [pc, #360]	; (8007600 <HAL_UART_MspInit+0x1d8>)
 8007498:	f002 f8e2 	bl	8009660 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800749c:	e0a7      	b.n	80075ee <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a58      	ldr	r2, [pc, #352]	; (8007604 <HAL_UART_MspInit+0x1dc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d174      	bne.n	8007592 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 80074a8:	4b54      	ldr	r3, [pc, #336]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	4a53      	ldr	r2, [pc, #332]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074b2:	6413      	str	r3, [r2, #64]	; 0x40
 80074b4:	4b51      	ldr	r3, [pc, #324]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074c0:	4b4e      	ldr	r3, [pc, #312]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	4a4d      	ldr	r2, [pc, #308]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074c6:	f043 0304 	orr.w	r3, r3, #4
 80074ca:	6313      	str	r3, [r2, #48]	; 0x30
 80074cc:	4b4b      	ldr	r3, [pc, #300]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80074d8:	4b48      	ldr	r3, [pc, #288]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	4a47      	ldr	r2, [pc, #284]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074de:	f043 0308 	orr.w	r3, r3, #8
 80074e2:	6313      	str	r3, [r2, #48]	; 0x30
 80074e4:	4b45      	ldr	r3, [pc, #276]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 80074f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f6:	2302      	movs	r3, #2
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074fe:	2303      	movs	r3, #3
 8007500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007502:	2308      	movs	r3, #8
 8007504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8007506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750a:	4619      	mov	r1, r3
 800750c:	483c      	ldr	r0, [pc, #240]	; (8007600 <HAL_UART_MspInit+0x1d8>)
 800750e:	f002 f8a7 	bl	8009660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8007512:	2304      	movs	r3, #4
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007516:	2302      	movs	r3, #2
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751a:	2300      	movs	r3, #0
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800751e:	2303      	movs	r3, #3
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007522:	2308      	movs	r3, #8
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8007526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752a:	4619      	mov	r1, r3
 800752c:	4836      	ldr	r0, [pc, #216]	; (8007608 <HAL_UART_MspInit+0x1e0>)
 800752e:	f002 f897 	bl	8009660 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007532:	4b36      	ldr	r3, [pc, #216]	; (800760c <HAL_UART_MspInit+0x1e4>)
 8007534:	4a36      	ldr	r2, [pc, #216]	; (8007610 <HAL_UART_MspInit+0x1e8>)
 8007536:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007538:	4b34      	ldr	r3, [pc, #208]	; (800760c <HAL_UART_MspInit+0x1e4>)
 800753a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800753e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007540:	4b32      	ldr	r3, [pc, #200]	; (800760c <HAL_UART_MspInit+0x1e4>)
 8007542:	2200      	movs	r2, #0
 8007544:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007546:	4b31      	ldr	r3, [pc, #196]	; (800760c <HAL_UART_MspInit+0x1e4>)
 8007548:	2200      	movs	r2, #0
 800754a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800754c:	4b2f      	ldr	r3, [pc, #188]	; (800760c <HAL_UART_MspInit+0x1e4>)
 800754e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007552:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007554:	4b2d      	ldr	r3, [pc, #180]	; (800760c <HAL_UART_MspInit+0x1e4>)
 8007556:	2200      	movs	r2, #0
 8007558:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800755a:	4b2c      	ldr	r3, [pc, #176]	; (800760c <HAL_UART_MspInit+0x1e4>)
 800755c:	2200      	movs	r2, #0
 800755e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007560:	4b2a      	ldr	r3, [pc, #168]	; (800760c <HAL_UART_MspInit+0x1e4>)
 8007562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007566:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007568:	4b28      	ldr	r3, [pc, #160]	; (800760c <HAL_UART_MspInit+0x1e4>)
 800756a:	2200      	movs	r2, #0
 800756c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800756e:	4b27      	ldr	r3, [pc, #156]	; (800760c <HAL_UART_MspInit+0x1e4>)
 8007570:	2200      	movs	r2, #0
 8007572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007574:	4825      	ldr	r0, [pc, #148]	; (800760c <HAL_UART_MspInit+0x1e4>)
 8007576:	f001 fc6b 	bl	8008e50 <HAL_DMA_Init>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8007580:	f7fd f814 	bl	80045ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a21      	ldr	r2, [pc, #132]	; (800760c <HAL_UART_MspInit+0x1e4>)
 8007588:	66da      	str	r2, [r3, #108]	; 0x6c
 800758a:	4a20      	ldr	r2, [pc, #128]	; (800760c <HAL_UART_MspInit+0x1e4>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007590:	e02d      	b.n	80075ee <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <HAL_UART_MspInit+0x1ec>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d128      	bne.n	80075ee <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 800759c:	4b17      	ldr	r3, [pc, #92]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	4a16      	ldr	r2, [pc, #88]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80075a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075a6:	6413      	str	r3, [r2, #64]	; 0x40
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80075b4:	4b11      	ldr	r3, [pc, #68]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	4a10      	ldr	r2, [pc, #64]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80075ba:	f043 0310 	orr.w	r3, r3, #16
 80075be:	6313      	str	r3, [r2, #48]	; 0x30
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <HAL_UART_MspInit+0x1d4>)
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	f003 0310 	and.w	r3, r3, #16
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 80075cc:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d2:	2302      	movs	r3, #2
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075da:	2303      	movs	r3, #3
 80075dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80075de:	2308      	movs	r3, #8
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075e6:	4619      	mov	r1, r3
 80075e8:	480b      	ldr	r0, [pc, #44]	; (8007618 <HAL_UART_MspInit+0x1f0>)
 80075ea:	f002 f839 	bl	8009660 <HAL_GPIO_Init>
}
 80075ee:	bf00      	nop
 80075f0:	3738      	adds	r7, #56	; 0x38
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	40004c00 	.word	0x40004c00
 80075fc:	40023800 	.word	0x40023800
 8007600:	40020800 	.word	0x40020800
 8007604:	40005000 	.word	0x40005000
 8007608:	40020c00 	.word	0x40020c00
 800760c:	200309c8 	.word	0x200309c8
 8007610:	40026010 	.word	0x40026010
 8007614:	40007800 	.word	0x40007800
 8007618:	40021000 	.word	0x40021000

0800761c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	; 0x28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007624:	f107 0314 	add.w	r3, r7, #20
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	605a      	str	r2, [r3, #4]
 800762e:	609a      	str	r2, [r3, #8]
 8007630:	60da      	str	r2, [r3, #12]
 8007632:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800763c:	d134      	bne.n	80076a8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800763e:	4b1c      	ldr	r3, [pc, #112]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	6313      	str	r3, [r2, #48]	; 0x30
 800764a:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8007656:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800765a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765c:	2302      	movs	r3, #2
 800765e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007660:	2300      	movs	r3, #0
 8007662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007664:	2303      	movs	r3, #3
 8007666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007668:	230a      	movs	r3, #10
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4619      	mov	r1, r3
 8007672:	4810      	ldr	r0, [pc, #64]	; (80076b4 <HAL_PCD_MspInit+0x98>)
 8007674:	f001 fff4 	bl	8009660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007678:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 800767a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767c:	4a0c      	ldr	r2, [pc, #48]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 800767e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007682:	6353      	str	r3, [r2, #52]	; 0x34
 8007684:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 8007686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 8007692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007694:	4a06      	ldr	r2, [pc, #24]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 8007696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800769a:	6453      	str	r3, [r2, #68]	; 0x44
 800769c:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <HAL_PCD_MspInit+0x94>)
 800769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a4:	60bb      	str	r3, [r7, #8]
 80076a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80076a8:	bf00      	nop
 80076aa:	3728      	adds	r7, #40	; 0x28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40023800 	.word	0x40023800
 80076b4:	40020000 	.word	0x40020000

080076b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08c      	sub	sp, #48	; 0x30
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80076c8:	2200      	movs	r2, #0
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	2036      	movs	r0, #54	; 0x36
 80076ce:	f001 fb95 	bl	8008dfc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80076d2:	2036      	movs	r0, #54	; 0x36
 80076d4:	f001 fbae 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80076d8:	4b1f      	ldr	r3, [pc, #124]	; (8007758 <HAL_InitTick+0xa0>)
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	4a1e      	ldr	r2, [pc, #120]	; (8007758 <HAL_InitTick+0xa0>)
 80076de:	f043 0310 	orr.w	r3, r3, #16
 80076e2:	6413      	str	r3, [r2, #64]	; 0x40
 80076e4:	4b1c      	ldr	r3, [pc, #112]	; (8007758 <HAL_InitTick+0xa0>)
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80076f0:	f107 0210 	add.w	r2, r7, #16
 80076f4:	f107 0314 	add.w	r3, r7, #20
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f003 ff2a 	bl	800b554 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007700:	f003 ff00 	bl	800b504 <HAL_RCC_GetPCLK1Freq>
 8007704:	4603      	mov	r3, r0
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	4a13      	ldr	r2, [pc, #76]	; (800775c <HAL_InitTick+0xa4>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	0c9b      	lsrs	r3, r3, #18
 8007714:	3b01      	subs	r3, #1
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007718:	4b11      	ldr	r3, [pc, #68]	; (8007760 <HAL_InitTick+0xa8>)
 800771a:	4a12      	ldr	r2, [pc, #72]	; (8007764 <HAL_InitTick+0xac>)
 800771c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800771e:	4b10      	ldr	r3, [pc, #64]	; (8007760 <HAL_InitTick+0xa8>)
 8007720:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007724:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007726:	4a0e      	ldr	r2, [pc, #56]	; (8007760 <HAL_InitTick+0xa8>)
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800772c:	4b0c      	ldr	r3, [pc, #48]	; (8007760 <HAL_InitTick+0xa8>)
 800772e:	2200      	movs	r2, #0
 8007730:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007732:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <HAL_InitTick+0xa8>)
 8007734:	2200      	movs	r2, #0
 8007736:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007738:	4809      	ldr	r0, [pc, #36]	; (8007760 <HAL_InitTick+0xa8>)
 800773a:	f005 f83f 	bl	800c7bc <HAL_TIM_Base_Init>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007744:	4806      	ldr	r0, [pc, #24]	; (8007760 <HAL_InitTick+0xa8>)
 8007746:	f005 f865 	bl	800c814 <HAL_TIM_Base_Start_IT>
 800774a:	4603      	mov	r3, r0
 800774c:	e000      	b.n	8007750 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
}
 8007750:	4618      	mov	r0, r3
 8007752:	3730      	adds	r7, #48	; 0x30
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	40023800 	.word	0x40023800
 800775c:	431bde83 	.word	0x431bde83
 8007760:	20030a84 	.word	0x20030a84
 8007764:	40001000 	.word	0x40001000

08007768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800776c:	e7fe      	b.n	800776c <NMI_Handler+0x4>

0800776e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800776e:	b480      	push	{r7}
 8007770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007772:	e7fe      	b.n	8007772 <HardFault_Handler+0x4>

08007774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007778:	e7fe      	b.n	8007778 <MemManage_Handler+0x4>

0800777a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800777a:	b480      	push	{r7}
 800777c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800777e:	e7fe      	b.n	800777e <BusFault_Handler+0x4>

08007780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007784:	e7fe      	b.n	8007784 <UsageFault_Handler+0x4>

08007786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007786:	b480      	push	{r7}
 8007788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007798:	2010      	movs	r0, #16
 800779a:	f002 f957 	bl	8009a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(inputButtonSet>buttonPriority.back){
 800779e:	4b07      	ldr	r3, [pc, #28]	; (80077bc <EXTI4_IRQHandler+0x28>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <EXTI4_IRQHandler+0x2c>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	dd04      	ble.n	80077b6 <EXTI4_IRQHandler+0x22>
	  inputButtonSet = buttonPriority.back;
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <EXTI4_IRQHandler+0x2c>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	4b02      	ldr	r3, [pc, #8]	; (80077bc <EXTI4_IRQHandler+0x28>)
 80077b4:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 80077b6:	bf00      	nop
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	200000a4 	.word	0x200000a4
 80077c0:	20000160 	.word	0x20000160

080077c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80077c8:	4802      	ldr	r0, [pc, #8]	; (80077d4 <DMA1_Stream0_IRQHandler+0x10>)
 80077ca:	f001 fce1 	bl	8009190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80077ce:	bf00      	nop
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200309c8 	.word	0x200309c8

080077d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80077dc:	4805      	ldr	r0, [pc, #20]	; (80077f4 <ADC_IRQHandler+0x1c>)
 80077de:	f000 fced 	bl	80081bc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80077e2:	4805      	ldr	r0, [pc, #20]	; (80077f8 <ADC_IRQHandler+0x20>)
 80077e4:	f000 fcea 	bl	80081bc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80077e8:	4804      	ldr	r0, [pc, #16]	; (80077fc <ADC_IRQHandler+0x24>)
 80077ea:	f000 fce7 	bl	80081bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80077ee:	bf00      	nop
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	2002b98c 	.word	0x2002b98c
 80077f8:	20028c70 	.word	0x20028c70
 80077fc:	2002b9d8 	.word	0x2002b9d8

08007800 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 8007806:	2120      	movs	r1, #32
 8007808:	482a      	ldr	r0, [pc, #168]	; (80078b4 <EXTI9_5_IRQHandler+0xb4>)
 800780a:	f002 f8d3 	bl	80099b4 <HAL_GPIO_ReadPin>
 800780e:	4603      	mov	r3, r0
 8007810:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 8007812:	2140      	movs	r1, #64	; 0x40
 8007814:	4827      	ldr	r0, [pc, #156]	; (80078b4 <EXTI9_5_IRQHandler+0xb4>)
 8007816:	f002 f8cd 	bl	80099b4 <HAL_GPIO_ReadPin>
 800781a:	4603      	mov	r3, r0
 800781c:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 800781e:	2180      	movs	r1, #128	; 0x80
 8007820:	4824      	ldr	r0, [pc, #144]	; (80078b4 <EXTI9_5_IRQHandler+0xb4>)
 8007822:	f002 f8c7 	bl	80099b4 <HAL_GPIO_ReadPin>
 8007826:	4603      	mov	r3, r0
 8007828:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5)){ //up button
 800782a:	4b23      	ldr	r3, [pc, #140]	; (80078b8 <EXTI9_5_IRQHandler+0xb8>)
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00c      	beq.n	8007850 <EXTI9_5_IRQHandler+0x50>
		if(inputButtonSet > buttonPriority.up){
 8007836:	4b21      	ldr	r3, [pc, #132]	; (80078bc <EXTI9_5_IRQHandler+0xbc>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	4b20      	ldr	r3, [pc, #128]	; (80078c0 <EXTI9_5_IRQHandler+0xc0>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	dd2a      	ble.n	800789a <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.up;
 8007844:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <EXTI9_5_IRQHandler+0xc0>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	b2da      	uxtb	r2, r3
 800784a:	4b1c      	ldr	r3, [pc, #112]	; (80078bc <EXTI9_5_IRQHandler+0xbc>)
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	e024      	b.n	800789a <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){ //sel button
 8007850:	4b19      	ldr	r3, [pc, #100]	; (80078b8 <EXTI9_5_IRQHandler+0xb8>)
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00c      	beq.n	8007876 <EXTI9_5_IRQHandler+0x76>
		if(inputButtonSet > buttonPriority.sel){
 800785c:	4b17      	ldr	r3, [pc, #92]	; (80078bc <EXTI9_5_IRQHandler+0xbc>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <EXTI9_5_IRQHandler+0xc0>)
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	429a      	cmp	r2, r3
 8007868:	dd17      	ble.n	800789a <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.sel;
 800786a:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <EXTI9_5_IRQHandler+0xc0>)
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	b2da      	uxtb	r2, r3
 8007870:	4b12      	ldr	r3, [pc, #72]	; (80078bc <EXTI9_5_IRQHandler+0xbc>)
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	e011      	b.n	800789a <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){ //down button
 8007876:	4b10      	ldr	r3, [pc, #64]	; (80078b8 <EXTI9_5_IRQHandler+0xb8>)
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <EXTI9_5_IRQHandler+0x9a>
		if(inputButtonSet > buttonPriority.down){
 8007882:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <EXTI9_5_IRQHandler+0xbc>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <EXTI9_5_IRQHandler+0xc0>)
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	dd04      	ble.n	800789a <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.down;
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <EXTI9_5_IRQHandler+0xc0>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	b2da      	uxtb	r2, r3
 8007896:	4b09      	ldr	r3, [pc, #36]	; (80078bc <EXTI9_5_IRQHandler+0xbc>)
 8007898:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800789a:	2020      	movs	r0, #32
 800789c:	f002 f8d6 	bl	8009a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80078a0:	2040      	movs	r0, #64	; 0x40
 80078a2:	f002 f8d3 	bl	8009a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80078a6:	2080      	movs	r0, #128	; 0x80
 80078a8:	f002 f8d0 	bl	8009a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40022800 	.word	0x40022800
 80078b8:	40013c00 	.word	0x40013c00
 80078bc:	200000a4 	.word	0x200000a4
 80078c0:	20000160 	.word	0x20000160

080078c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80078c8:	4802      	ldr	r0, [pc, #8]	; (80078d4 <TIM6_DAC_IRQHandler+0x10>)
 80078ca:	f005 f802 	bl	800c8d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80078ce:	bf00      	nop
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20030a84 	.word	0x20030a84

080078d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80078dc:	4805      	ldr	r0, [pc, #20]	; (80078f4 <DMA2_Stream0_IRQHandler+0x1c>)
 80078de:	f001 fc57 	bl	8009190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 80078e2:	4805      	ldr	r0, [pc, #20]	; (80078f8 <DMA2_Stream0_IRQHandler+0x20>)
 80078e4:	f000 fe9a 	bl	800861c <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <DMA2_Stream0_IRQHandler+0x24>)
 80078ea:	2201      	movs	r2, #1
 80078ec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80078ee:	bf00      	nop
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	2002ba20 	.word	0x2002ba20
 80078f8:	2002b98c 	.word	0x2002b98c
 80078fc:	200291b4 	.word	0x200291b4

08007900 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8007904:	4805      	ldr	r0, [pc, #20]	; (800791c <DMA2_Stream1_IRQHandler+0x1c>)
 8007906:	f001 fc43 	bl	8009190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 800790a:	4805      	ldr	r0, [pc, #20]	; (8007920 <DMA2_Stream1_IRQHandler+0x20>)
 800790c:	f000 fe86 	bl	800861c <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <DMA2_Stream1_IRQHandler+0x24>)
 8007912:	2201      	movs	r2, #1
 8007914:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007916:	bf00      	nop
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20029154 	.word	0x20029154
 8007920:	2002b9d8 	.word	0x2002b9d8
 8007924:	200291b4 	.word	0x200291b4

08007928 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800792c:	4805      	ldr	r0, [pc, #20]	; (8007944 <DMA2_Stream2_IRQHandler+0x1c>)
 800792e:	f001 fc2f 	bl	8009190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8007932:	4805      	ldr	r0, [pc, #20]	; (8007948 <DMA2_Stream2_IRQHandler+0x20>)
 8007934:	f000 fe72 	bl	800861c <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <DMA2_Stream2_IRQHandler+0x24>)
 800793a:	2201      	movs	r2, #1
 800793c:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800793e:	bf00      	nop
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20030968 	.word	0x20030968
 8007948:	20028c70 	.word	0x20028c70
 800794c:	200291b4 	.word	0x200291b4

08007950 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8007954:	4802      	ldr	r0, [pc, #8]	; (8007960 <SPI4_IRQHandler+0x10>)
 8007956:	f004 fcf5 	bl	800c344 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800795a:	bf00      	nop
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20028a40 	.word	0x20028a40

08007964 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e00a      	b.n	800798c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007976:	f3af 8000 	nop.w
 800797a:	4601      	mov	r1, r0
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	60ba      	str	r2, [r7, #8]
 8007982:	b2ca      	uxtb	r2, r1
 8007984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	3301      	adds	r3, #1
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	dbf0      	blt.n	8007976 <_read+0x12>
	}

return len;
 8007994:	687b      	ldr	r3, [r7, #4]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b086      	sub	sp, #24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079aa:	2300      	movs	r3, #0
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	e009      	b.n	80079c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	60ba      	str	r2, [r7, #8]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fb fb2b 	bl	8003014 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	3301      	adds	r3, #1
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	dbf1      	blt.n	80079b0 <_write+0x12>
	}
	return len;
 80079cc:	687b      	ldr	r3, [r7, #4]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <_close>:

int _close(int file)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
	return -1;
 80079de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80079fe:	605a      	str	r2, [r3, #4]
	return 0;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <_isatty>:

int _isatty(int file)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
	return 1;
 8007a16:	2301      	movs	r3, #1
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a48:	4a14      	ldr	r2, [pc, #80]	; (8007a9c <_sbrk+0x5c>)
 8007a4a:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <_sbrk+0x60>)
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a54:	4b13      	ldr	r3, [pc, #76]	; (8007aa4 <_sbrk+0x64>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a5c:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <_sbrk+0x64>)
 8007a5e:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <_sbrk+0x68>)
 8007a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a62:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <_sbrk+0x64>)
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d207      	bcs.n	8007a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a70:	f009 fd46 	bl	8011500 <__errno>
 8007a74:	4602      	mov	r2, r0
 8007a76:	230c      	movs	r3, #12
 8007a78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7e:	e009      	b.n	8007a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a80:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <_sbrk+0x64>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a86:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <_sbrk+0x64>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <_sbrk+0x64>)
 8007a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a92:	68fb      	ldr	r3, [r7, #12]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20080000 	.word	0x20080000
 8007aa0:	00000400 	.word	0x00000400
 8007aa4:	20003314 	.word	0x20003314
 8007aa8:	20030b10 	.word	0x20030b10

08007aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ab0:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <SystemInit+0x28>)
 8007ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab6:	4a07      	ldr	r2, [pc, #28]	; (8007ad4 <SystemInit+0x28>)
 8007ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <SystemInit+0x28>)
 8007ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ac6:	609a      	str	r2, [r3, #8]
#endif
}
 8007ac8:	bf00      	nop
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	e000ed00 	.word	0xe000ed00

08007ad8 <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 8007adc:	220c      	movs	r2, #12
 8007ade:	2100      	movs	r1, #0
 8007ae0:	4814      	ldr	r0, [pc, #80]	; (8007b34 <zionEEPROMPresence+0x5c>)
 8007ae2:	f009 fd42 	bl	801156a <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 8007ae6:	2364      	movs	r3, #100	; 0x64
 8007ae8:	2202      	movs	r2, #2
 8007aea:	21a6      	movs	r1, #166	; 0xa6
 8007aec:	4812      	ldr	r0, [pc, #72]	; (8007b38 <zionEEPROMPresence+0x60>)
 8007aee:	f002 fb65 	bl	800a1bc <HAL_I2C_IsDeviceReady>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d102      	bne.n	8007afe <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 8007af8:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <zionEEPROMPresence+0x5c>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 8007afe:	2364      	movs	r3, #100	; 0x64
 8007b00:	2202      	movs	r2, #2
 8007b02:	21a8      	movs	r1, #168	; 0xa8
 8007b04:	480c      	ldr	r0, [pc, #48]	; (8007b38 <zionEEPROMPresence+0x60>)
 8007b06:	f002 fb59 	bl	800a1bc <HAL_I2C_IsDeviceReady>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 8007b10:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <zionEEPROMPresence+0x5c>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 8007b16:	2364      	movs	r3, #100	; 0x64
 8007b18:	2202      	movs	r2, #2
 8007b1a:	21aa      	movs	r1, #170	; 0xaa
 8007b1c:	4806      	ldr	r0, [pc, #24]	; (8007b38 <zionEEPROMPresence+0x60>)
 8007b1e:	f002 fb4d 	bl	800a1bc <HAL_I2C_IsDeviceReady>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d102      	bne.n	8007b2e <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 8007b28:	4b02      	ldr	r3, [pc, #8]	; (8007b34 <zionEEPROMPresence+0x5c>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 8007b2e:	4b01      	ldr	r3, [pc, #4]	; (8007b34 <zionEEPROMPresence+0x5c>)
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20003318 	.word	0x20003318
 8007b38:	20028af0 	.word	0x20028af0

08007b3c <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af04      	add	r7, sp, #16
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	72fb      	strb	r3, [r7, #11]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 8007b4e:	7afb      	ldrb	r3, [r7, #11]
 8007b50:	b299      	uxth	r1, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8b3a      	ldrh	r2, [r7, #24]
 8007b58:	8938      	ldrh	r0, [r7, #8]
 8007b5a:	9202      	str	r2, [sp, #8]
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	2302      	movs	r3, #2
 8007b64:	4602      	mov	r2, r0
 8007b66:	4803      	ldr	r0, [pc, #12]	; (8007b74 <readDataFromEEPROM+0x38>)
 8007b68:	f002 fa0e 	bl	8009f88 <HAL_I2C_Mem_Read>
}
 8007b6c:	bf00      	nop
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20028af0 	.word	0x20028af0

08007b78 <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 8007b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	b0a6      	sub	sp, #152	; 0x98
 8007b7e:	af02      	add	r7, sp, #8
 8007b80:	4603      	mov	r3, r0
 8007b82:	71fb      	strb	r3, [r7, #7]
 8007b84:	466b      	mov	r3, sp
 8007b86:	4698      	mov	r8, r3
	int foundTheEnd = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 8007b94:	2364      	movs	r3, #100	; 0x64
 8007b96:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 8007b98:	2306      	movs	r3, #6
 8007b9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 8007bb0:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007bb2:	1e6b      	subs	r3, r5, #1
 8007bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bb6:	462b      	mov	r3, r5
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	f04f 0300 	mov.w	r3, #0
 8007bc2:	f04f 0400 	mov.w	r4, #0
 8007bc6:	00d4      	lsls	r4, r2, #3
 8007bc8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007bcc:	00cb      	lsls	r3, r1, #3
 8007bce:	462b      	mov	r3, r5
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	f04f 0300 	mov.w	r3, #0
 8007bda:	f04f 0400 	mov.w	r4, #0
 8007bde:	00d4      	lsls	r4, r2, #3
 8007be0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007be4:	00cb      	lsls	r3, r1, #3
 8007be6:	462b      	mov	r3, r5
 8007be8:	3307      	adds	r3, #7
 8007bea:	08db      	lsrs	r3, r3, #3
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	ebad 0d03 	sub.w	sp, sp, r3
 8007bf2:	ab02      	add	r3, sp, #8
 8007bf4:	3300      	adds	r3, #0
 8007bf6:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 8007bf8:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8007bfa:	1e73      	subs	r3, r6, #1
 8007bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8007bfe:	4633      	mov	r3, r6
 8007c00:	4619      	mov	r1, r3
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	f04f 0400 	mov.w	r4, #0
 8007c0e:	00d4      	lsls	r4, r2, #3
 8007c10:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007c14:	00cb      	lsls	r3, r1, #3
 8007c16:	4633      	mov	r3, r6
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	f04f 0400 	mov.w	r4, #0
 8007c26:	00d4      	lsls	r4, r2, #3
 8007c28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007c2c:	00cb      	lsls	r3, r1, #3
 8007c2e:	4633      	mov	r3, r6
 8007c30:	3307      	adds	r3, #7
 8007c32:	08db      	lsrs	r3, r3, #3
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	ebad 0d03 	sub.w	sp, sp, r3
 8007c3a:	ab02      	add	r3, sp, #8
 8007c3c:	3300      	adds	r3, #0
 8007c3e:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8007c40:	f107 0308 	add.w	r3, r7, #8
 8007c44:	2250      	movs	r2, #80	; 0x50
 8007c46:	2100      	movs	r1, #0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f009 fc8e 	bl	801156a <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 8007c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c50:	4632      	mov	r2, r6
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f009 fc88 	bl	801156a <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 8007c5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f009 fc82 	bl	801156a <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 8007c66:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007c68:	79f9      	ldrb	r1, [r7, #7]
 8007c6a:	2364      	movs	r3, #100	; 0x64
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	462b      	mov	r3, r5
 8007c70:	2200      	movs	r2, #0
 8007c72:	f7ff ff63 	bl	8007b3c <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 8007c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2bff      	cmp	r3, #255	; 0xff
 8007c7c:	f040 811b 	bne.w	8007eb6 <parseZionEEPROM+0x33e>
		foundTheEnd=1;
 8007c80:	2301      	movs	r3, #1
 8007c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 8007c86:	f06f 0301 	mvn.w	r3, #1
 8007c8a:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 8007c8c:	e113      	b.n	8007eb6 <parseZionEEPROM+0x33e>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 8007c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c92:	fb93 f2f2 	sdiv	r2, r3, r2
 8007c96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007c98:	fb01 f202 	mul.w	r2, r1, r2
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bf0c      	ite	eq
 8007ca2:	2301      	moveq	r3, #1
 8007ca4:	2300      	movne	r3, #0
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bfcc      	ite	gt
 8007cae:	2301      	movgt	r3, #1
 8007cb0:	2300      	movle	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d025      	beq.n	8007d08 <parseZionEEPROM+0x190>
			for(x=0;x<size;x++){
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cc2:	e00f      	b.n	8007ce4 <parseZionEEPROM+0x16c>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 8007cc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cca:	4413      	add	r3, r2
 8007ccc:	7819      	ldrb	r1, [r3, #0]
 8007cce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd4:	4413      	add	r3, r2
 8007cd6:	460a      	mov	r2, r1
 8007cd8:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 8007cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ce4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cea:	429a      	cmp	r2, r3
 8007cec:	dbea      	blt.n	8007cc4 <parseZionEEPROM+0x14c>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 8007cee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	79f9      	ldrb	r1, [r7, #7]
 8007cf6:	2364      	movs	r3, #100	; 0x64
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	462b      	mov	r3, r5
 8007cfc:	f7ff ff1e 	bl	8007b3c <readDataFromEEPROM>
			indexSubtractor+=size;
 8007d00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d04:	4413      	add	r3, r2
 8007d06:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 8007d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2bff      	cmp	r3, #255	; 0xff
 8007d0e:	d116      	bne.n	8007d3e <parseZionEEPROM+0x1c6>
 8007d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	2bff      	cmp	r3, #255	; 0xff
 8007d16:	d112      	bne.n	8007d3e <parseZionEEPROM+0x1c6>
 8007d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d1a:	789b      	ldrb	r3, [r3, #2]
 8007d1c:	2bff      	cmp	r3, #255	; 0xff
 8007d1e:	d10e      	bne.n	8007d3e <parseZionEEPROM+0x1c6>
 8007d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d22:	78db      	ldrb	r3, [r3, #3]
 8007d24:	2bff      	cmp	r3, #255	; 0xff
 8007d26:	d10a      	bne.n	8007d3e <parseZionEEPROM+0x1c6>
 8007d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d2a:	795b      	ldrb	r3, [r3, #5]
 8007d2c:	2bff      	cmp	r3, #255	; 0xff
 8007d2e:	d106      	bne.n	8007d3e <parseZionEEPROM+0x1c6>
			previousByteOfHeader[0]=-1;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
 8007d34:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 8007d36:	2301      	movs	r3, #1
 8007d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d3c:	e0b8      	b.n	8007eb0 <parseZionEEPROM+0x338>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 8007d3e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d46:	5cd3      	ldrb	r3, [r2, r3]
 8007d48:	2b5a      	cmp	r3, #90	; 0x5a
 8007d4a:	d023      	beq.n	8007d94 <parseZionEEPROM+0x21c>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d50:	fb93 f2f2 	sdiv	r2, r3, r2
 8007d54:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007d56:	fb01 f202 	mul.w	r2, r1, r2
 8007d5a:	1a9b      	subs	r3, r3, r2
 8007d5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d5e:	5cd3      	ldrb	r3, [r2, r3]
 8007d60:	2b5a      	cmp	r3, #90	; 0x5a
 8007d62:	d104      	bne.n	8007d6e <parseZionEEPROM+0x1f6>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3314      	adds	r3, #20
 8007d68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	db12      	blt.n	8007d94 <parseZionEEPROM+0x21c>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d72:	fb93 f2f2 	sdiv	r2, r3, r2
 8007d76:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007d78:	fb01 f202 	mul.w	r2, r1, r2
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d80:	5cd3      	ldrb	r3, [r2, r3]
 8007d82:	2b5a      	cmp	r3, #90	; 0x5a
 8007d84:	f040 8094 	bne.w	8007eb0 <parseZionEEPROM+0x338>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	3314      	adds	r3, #20
 8007d8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	f280 808e 	bge.w	8007eb0 <parseZionEEPROM+0x338>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bf0c      	ite	eq
 8007da0:	2301      	moveq	r3, #1
 8007da2:	2300      	movne	r3, #0
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007daa:	1acb      	subs	r3, r1, r3
 8007dac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dae:	5ccb      	ldrb	r3, [r1, r3]
 8007db0:	2b5a      	cmp	r3, #90	; 0x5a
 8007db2:	bf0c      	ite	eq
 8007db4:	2301      	moveq	r3, #1
 8007db6:	2300      	movne	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	4013      	ands	r3, r2
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d008      	beq.n	8007dd4 <parseZionEEPROM+0x25c>
				previousByteOfHeader[0] = index;
 8007dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc4:	60bb      	str	r3, [r7, #8]
				if(index==0){
 8007dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d171      	bne.n	8007eb0 <parseZionEEPROM+0x338>
					zeroWas5A=1;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dd2:	e06d      	b.n	8007eb0 <parseZionEEPROM+0x338>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 8007dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d015      	beq.n	8007e06 <parseZionEEPROM+0x28e>
				previousByteOfHeader[counter]=index;
 8007dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007de4:	4413      	add	r3, r2
 8007de6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007de8:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 8007dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007df0:	2b13      	cmp	r3, #19
 8007df2:	d102      	bne.n	8007dfa <parseZionEEPROM+0x282>
					foundTheEnd=1;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 8007dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dfe:	3301      	adds	r3, #1
 8007e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e04:	e054      	b.n	8007eb0 <parseZionEEPROM+0x338>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 8007e06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e0e:	5cd3      	ldrb	r3, [r2, r3]
 8007e10:	2b45      	cmp	r3, #69	; 0x45
 8007e12:	d102      	bne.n	8007e1a <parseZionEEPROM+0x2a2>
					previousByteOfHeader[1] = index;
 8007e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e04a      	b.n	8007eb0 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 8007e1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e22:	5cd3      	ldrb	r3, [r2, r3]
 8007e24:	2b46      	cmp	r3, #70	; 0x46
 8007e26:	d107      	bne.n	8007e38 <parseZionEEPROM+0x2c0>
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d102      	bne.n	8007e38 <parseZionEEPROM+0x2c0>
					previousByteOfHeader[2] = index;
 8007e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	e03b      	b.n	8007eb0 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 8007e38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e40:	5cd3      	ldrb	r3, [r2, r3]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d107      	bne.n	8007e56 <parseZionEEPROM+0x2de>
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d102      	bne.n	8007e56 <parseZionEEPROM+0x2de>
					previousByteOfHeader[3] = index;
 8007e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	e02c      	b.n	8007eb0 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8007e56:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e5e:	5cd3      	ldrb	r3, [r2, r3]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d107      	bne.n	8007e74 <parseZionEEPROM+0x2fc>
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d102      	bne.n	8007e74 <parseZionEEPROM+0x2fc>
					previousByteOfHeader[4] = index;
 8007e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e70:	61bb      	str	r3, [r7, #24]
 8007e72:	e01d      	b.n	8007eb0 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 8007e74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e7c:	5cd3      	ldrb	r3, [r2, r3]
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d109      	bne.n	8007e96 <parseZionEEPROM+0x31e>
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e86:	3b01      	subs	r3, #1
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d104      	bne.n	8007e96 <parseZionEEPROM+0x31e>
					previousByteOfHeader[5] = index;
 8007e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e8e:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 8007e90:	2301      	movs	r3, #1
 8007e92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e94:	e00c      	b.n	8007eb0 <parseZionEEPROM+0x338>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 8007e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <parseZionEEPROM+0x338>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	2250      	movs	r2, #80	; 0x50
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f009 fb60 	bl	801156a <memset>
					zeroWas5A=0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 8007eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 8007eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f43f aee7 	beq.w	8007c8e <parseZionEEPROM+0x116>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f2c0 8085 	blt.w	8007fd2 <parseZionEEPROM+0x45a>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 8007ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ecc:	fb93 f2f2 	sdiv	r2, r3, r2
 8007ed0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007ed2:	fb01 f202 	mul.w	r2, r1, r2
 8007ed6:	1a9b      	subs	r3, r3, r2
 8007ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 8007eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007edc:	3b05      	subs	r3, #5
 8007ede:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	dd50      	ble.n	8007f86 <parseZionEEPROM+0x40e>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 8007ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ee6:	1e5a      	subs	r2, r3, #1
 8007ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ef4:	e01c      	b.n	8007f30 <parseZionEEPROM+0x3b8>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 8007ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007efa:	3310      	adds	r3, #16
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007f02:	4413      	add	r3, r2
 8007f04:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007f08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f0a:	fb93 f2f2 	sdiv	r2, r3, r2
 8007f0e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007f10:	fb01 f202 	mul.w	r2, r1, r2
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f18:	5cd3      	ldrb	r3, [r2, r3]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4a48      	ldr	r2, [pc, #288]	; (8008040 <parseZionEEPROM+0x4c8>)
 8007f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 8007f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f30:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f36:	429a      	cmp	r2, r3
 8007f38:	dbdd      	blt.n	8007ef6 <parseZionEEPROM+0x37e>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 8007f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f40:	e01c      	b.n	8007f7c <parseZionEEPROM+0x404>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8007f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f46:	3310      	adds	r3, #16
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007f4e:	4413      	add	r3, r2
 8007f50:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007f54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f56:	fb93 f2f2 	sdiv	r2, r3, r2
 8007f5a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007f5c:	fb01 f202 	mul.w	r2, r1, r2
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f64:	5cd3      	ldrb	r3, [r2, r3]
 8007f66:	4619      	mov	r1, r3
 8007f68:	4a35      	ldr	r2, [pc, #212]	; (8008040 <parseZionEEPROM+0x4c8>)
 8007f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 8007f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f76:	3301      	adds	r3, #1
 8007f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	ddde      	ble.n	8007f42 <parseZionEEPROM+0x3ca>
 8007f84:	e052      	b.n	800802c <parseZionEEPROM+0x4b4>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 8007f86:	2300      	movs	r3, #0
 8007f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f8c:	e01c      	b.n	8007fc8 <parseZionEEPROM+0x450>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8007f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f92:	3310      	adds	r3, #16
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007fa0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007fa2:	fb93 f2f2 	sdiv	r2, r3, r2
 8007fa6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007fa8:	fb01 f202 	mul.w	r2, r1, r2
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fb0:	5cd3      	ldrb	r3, [r2, r3]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4a22      	ldr	r2, [pc, #136]	; (8008040 <parseZionEEPROM+0x4c8>)
 8007fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8007fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	ddde      	ble.n	8007f8e <parseZionEEPROM+0x416>
 8007fd0:	e02c      	b.n	800802c <parseZionEEPROM+0x4b4>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd8:	d114      	bne.n	8008004 <parseZionEEPROM+0x48c>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007fe0:	e00b      	b.n	8007ffa <parseZionEEPROM+0x482>
				deviceHeaderBytes[x] = -2;
 8007fe2:	4a17      	ldr	r2, [pc, #92]	; (8008040 <parseZionEEPROM+0x4c8>)
 8007fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fe8:	f06f 0101 	mvn.w	r1, #1
 8007fec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8007ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	ddef      	ble.n	8007fe2 <parseZionEEPROM+0x46a>
 8008002:	e013      	b.n	800802c <parseZionEEPROM+0x4b4>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 8008004:	2300      	movs	r3, #0
 8008006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800800a:	e00b      	b.n	8008024 <parseZionEEPROM+0x4ac>
				deviceHeaderBytes[x] = -1;
 800800c:	4a0c      	ldr	r2, [pc, #48]	; (8008040 <parseZionEEPROM+0x4c8>)
 800800e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008012:	f04f 31ff 	mov.w	r1, #4294967295
 8008016:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 800801a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800801e:	3301      	adds	r3, #1
 8008020:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008028:	2b03      	cmp	r3, #3
 800802a:	ddef      	ble.n	800800c <parseZionEEPROM+0x494>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4a04      	ldr	r2, [pc, #16]	; (8008040 <parseZionEEPROM+0x4c8>)
 8008030:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 8008032:	4b03      	ldr	r3, [pc, #12]	; (8008040 <parseZionEEPROM+0x4c8>)
 8008034:	46c5      	mov	sp, r8
}
 8008036:	4618      	mov	r0, r3
 8008038:	3790      	adds	r7, #144	; 0x90
 800803a:	46bd      	mov	sp, r7
 800803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008040:	20003324 	.word	0x20003324

08008044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800807c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008048:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800804a:	e003      	b.n	8008054 <LoopCopyDataInit>

0800804c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800804c:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800804e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008050:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008052:	3104      	adds	r1, #4

08008054 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008054:	480b      	ldr	r0, [pc, #44]	; (8008084 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008058:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800805a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800805c:	d3f6      	bcc.n	800804c <CopyDataInit>
  ldr  r2, =_sbss
 800805e:	4a0b      	ldr	r2, [pc, #44]	; (800808c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008060:	e002      	b.n	8008068 <LoopFillZerobss>

08008062 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008062:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008064:	f842 3b04 	str.w	r3, [r2], #4

08008068 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008068:	4b09      	ldr	r3, [pc, #36]	; (8008090 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800806a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800806c:	d3f9      	bcc.n	8008062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800806e:	f7ff fd1d 	bl	8007aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008072:	f009 fa4b 	bl	801150c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008076:	f7f9 fe41 	bl	8001cfc <main>
  bx  lr    
 800807a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800807c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008080:	080166a8 	.word	0x080166a8
  ldr  r0, =_sdata
 8008084:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008088:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 800808c:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8008090:	20030b0c 	.word	0x20030b0c

08008094 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008094:	e7fe      	b.n	8008094 <CAN1_RX0_IRQHandler>

08008096 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800809a:	2003      	movs	r0, #3
 800809c:	f000 fea3 	bl	8008de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80080a0:	2000      	movs	r0, #0
 80080a2:	f7ff fb09 	bl	80076b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80080a6:	f7fe fd69 	bl	8006b7c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80080b4:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <HAL_IncTick+0x20>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <HAL_IncTick+0x24>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4413      	add	r3, r2
 80080c0:	4a04      	ldr	r2, [pc, #16]	; (80080d4 <HAL_IncTick+0x24>)
 80080c2:	6013      	str	r3, [r2, #0]
}
 80080c4:	bf00      	nop
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20000178 	.word	0x20000178
 80080d4:	20030ac4 	.word	0x20030ac4

080080d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
  return uwTick;
 80080dc:	4b03      	ldr	r3, [pc, #12]	; (80080ec <HAL_GetTick+0x14>)
 80080de:	681b      	ldr	r3, [r3, #0]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20030ac4 	.word	0x20030ac4

080080f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80080f8:	f7ff ffee 	bl	80080d8 <HAL_GetTick>
 80080fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008108:	d005      	beq.n	8008116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <HAL_Delay+0x40>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008116:	bf00      	nop
 8008118:	f7ff ffde 	bl	80080d8 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	429a      	cmp	r2, r3
 8008126:	d8f7      	bhi.n	8008118 <HAL_Delay+0x28>
  {
  }
}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000178 	.word	0x20000178

08008134 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e031      	b.n	80081ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7fe fd3a 	bl	8006bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	2b00      	cmp	r3, #0
 8008170:	d116      	bne.n	80081a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008176:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <HAL_ADC_Init+0x84>)
 8008178:	4013      	ands	r3, r2
 800817a:	f043 0202 	orr.w	r2, r3, #2
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fbfc 	bl	8008980 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	f043 0201 	orr.w	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	641a      	str	r2, [r3, #64]	; 0x40
 800819e:	e001      	b.n	80081a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	ffffeefd 	.word	0xffffeefd

080081bc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	2300      	movs	r3, #0
 80081ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	bf0c      	ite	eq
 80081da:	2301      	moveq	r3, #1
 80081dc:	2300      	movne	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d049      	beq.n	8008292 <HAL_ADC_IRQHandler+0xd6>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d046      	beq.n	8008292 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	f003 0310 	and.w	r3, r3, #16
 800820c:	2b00      	cmp	r3, #0
 800820e:	d105      	bne.n	800821c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d12b      	bne.n	8008282 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800822e:	2b00      	cmp	r3, #0
 8008230:	d127      	bne.n	8008282 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800823c:	2b00      	cmp	r3, #0
 800823e:	d006      	beq.n	800824e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800824a:	2b00      	cmp	r3, #0
 800824c:	d119      	bne.n	8008282 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0220 	bic.w	r2, r2, #32
 800825c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	f043 0201 	orr.w	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fb fe24 	bl	8003ed0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f06f 0212 	mvn.w	r2, #18
 8008290:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b04      	cmp	r3, #4
 800829e:	bf0c      	ite	eq
 80082a0:	2301      	moveq	r3, #1
 80082a2:	2300      	movne	r3, #0
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	bf0c      	ite	eq
 80082b6:	2301      	moveq	r3, #1
 80082b8:	2300      	movne	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d057      	beq.n	8008374 <HAL_ADC_IRQHandler+0x1b8>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d054      	beq.n	8008374 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d105      	bne.n	80082e2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d139      	bne.n	8008364 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d006      	beq.n	800830c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008308:	2b00      	cmp	r3, #0
 800830a:	d12b      	bne.n	8008364 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008316:	2b00      	cmp	r3, #0
 8008318:	d124      	bne.n	8008364 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008324:	2b00      	cmp	r3, #0
 8008326:	d11d      	bne.n	8008364 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800832c:	2b00      	cmp	r3, #0
 800832e:	d119      	bne.n	8008364 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800833e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008344:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008354:	2b00      	cmp	r3, #0
 8008356:	d105      	bne.n	8008364 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	f043 0201 	orr.w	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc87 	bl	8008c78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f06f 020c 	mvn.w	r2, #12
 8008372:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b01      	cmp	r3, #1
 8008380:	bf0c      	ite	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	2300      	movne	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	bf0c      	ite	eq
 8008398:	2301      	moveq	r3, #1
 800839a:	2300      	movne	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d017      	beq.n	80083d6 <HAL_ADC_IRQHandler+0x21a>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d014      	beq.n	80083d6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d10d      	bne.n	80083d6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f97c 	bl	80086c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0201 	mvn.w	r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0320 	and.w	r3, r3, #32
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	bf0c      	ite	eq
 80083e4:	2301      	moveq	r3, #1
 80083e6:	2300      	movne	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083fa:	bf0c      	ite	eq
 80083fc:	2301      	moveq	r3, #1
 80083fe:	2300      	movne	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d015      	beq.n	8008436 <HAL_ADC_IRQHandler+0x27a>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d012      	beq.n	8008436 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008414:	f043 0202 	orr.w	r2, r3, #2
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0220 	mvn.w	r2, #32
 8008424:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f956 	bl	80086d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f06f 0220 	mvn.w	r2, #32
 8008434:	601a      	str	r2, [r3, #0]
  }
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_ADC_Start_DMA+0x1e>
 800845a:	2302      	movs	r3, #2
 800845c:	e0c7      	b.n	80085ee <HAL_ADC_Start_DMA+0x1ae>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b01      	cmp	r3, #1
 8008472:	d018      	beq.n	80084a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0201 	orr.w	r2, r2, #1
 8008482:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008484:	4b5c      	ldr	r3, [pc, #368]	; (80085f8 <HAL_ADC_Start_DMA+0x1b8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a5c      	ldr	r2, [pc, #368]	; (80085fc <HAL_ADC_Start_DMA+0x1bc>)
 800848a:	fba2 2303 	umull	r2, r3, r2, r3
 800848e:	0c9a      	lsrs	r2, r3, #18
 8008490:	4613      	mov	r3, r2
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	4413      	add	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008498:	e002      	b.n	80084a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	3b01      	subs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f9      	bne.n	800849a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	f040 809b 	bne.w	80085ec <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ba:	4b51      	ldr	r3, [pc, #324]	; (8008600 <HAL_ADC_Start_DMA+0x1c0>)
 80084bc:	4013      	ands	r3, r2
 80084be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80084dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f0:	d106      	bne.n	8008500 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f6:	f023 0206 	bic.w	r2, r3, #6
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	645a      	str	r2, [r3, #68]	; 0x44
 80084fe:	e002      	b.n	8008506 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008512:	4a3c      	ldr	r2, [pc, #240]	; (8008604 <HAL_ADC_Start_DMA+0x1c4>)
 8008514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	4a3b      	ldr	r2, [pc, #236]	; (8008608 <HAL_ADC_Start_DMA+0x1c8>)
 800851c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	4a3a      	ldr	r2, [pc, #232]	; (800860c <HAL_ADC_Start_DMA+0x1cc>)
 8008524:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800852e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800853e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800854e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	334c      	adds	r3, #76	; 0x4c
 800855a:	4619      	mov	r1, r3
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f000 fd24 	bl	8008fac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008564:	4b2a      	ldr	r3, [pc, #168]	; (8008610 <HAL_ADC_Start_DMA+0x1d0>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10f      	bne.n	8008590 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d136      	bne.n	80085ec <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800858c:	609a      	str	r2, [r3, #8]
 800858e:	e02d      	b.n	80085ec <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a1f      	ldr	r2, [pc, #124]	; (8008614 <HAL_ADC_Start_DMA+0x1d4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d10e      	bne.n	80085b8 <HAL_ADC_Start_DMA+0x178>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d107      	bne.n	80085b8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689a      	ldr	r2, [r3, #8]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80085b6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80085b8:	4b15      	ldr	r3, [pc, #84]	; (8008610 <HAL_ADC_Start_DMA+0x1d0>)
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f003 0310 	and.w	r3, r3, #16
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d113      	bne.n	80085ec <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a13      	ldr	r2, [pc, #76]	; (8008618 <HAL_ADC_Start_DMA+0x1d8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d10e      	bne.n	80085ec <HAL_ADC_Start_DMA+0x1ac>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d107      	bne.n	80085ec <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689a      	ldr	r2, [r3, #8]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80085ea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000170 	.word	0x20000170
 80085fc:	431bde83 	.word	0x431bde83
 8008600:	fffff8fe 	.word	0xfffff8fe
 8008604:	08008b75 	.word	0x08008b75
 8008608:	08008c2f 	.word	0x08008c2f
 800860c:	08008c4b 	.word	0x08008c4b
 8008610:	40012300 	.word	0x40012300
 8008614:	40012000 	.word	0x40012000
 8008618:	40012200 	.word	0x40012200

0800861c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <HAL_ADC_Stop_DMA+0x1a>
 8008632:	2302      	movs	r3, #2
 8008634:	e036      	b.n	80086a4 <HAL_ADC_Stop_DMA+0x88>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0201 	bic.w	r2, r2, #1
 800864c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d11e      	bne.n	800869a <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800866a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fcfb 	bl	800906c <HAL_DMA_Abort>
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8008688:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <HAL_ADC_Stop_DMA+0x90>)
 8008690:	4013      	ands	r3, r2
 8008692:	f043 0201 	orr.w	r2, r3, #1
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	ffffeefe 	.word	0xffffeefe

080086b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_ADC_ConfigChannel+0x1c>
 8008704:	2302      	movs	r3, #2
 8008706:	e12a      	b.n	800895e <HAL_ADC_ConfigChannel+0x272>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b09      	cmp	r3, #9
 8008716:	d93a      	bls.n	800878e <HAL_ADC_ConfigChannel+0xa2>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008720:	d035      	beq.n	800878e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68d9      	ldr	r1, [r3, #12]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	b29b      	uxth	r3, r3
 800872e:	461a      	mov	r2, r3
 8008730:	4613      	mov	r3, r2
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	4413      	add	r3, r2
 8008736:	3b1e      	subs	r3, #30
 8008738:	2207      	movs	r2, #7
 800873a:	fa02 f303 	lsl.w	r3, r2, r3
 800873e:	43da      	mvns	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	400a      	ands	r2, r1
 8008746:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a87      	ldr	r2, [pc, #540]	; (800896c <HAL_ADC_ConfigChannel+0x280>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d10a      	bne.n	8008768 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68d9      	ldr	r1, [r3, #12]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	061a      	lsls	r2, r3, #24
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008766:	e035      	b.n	80087d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68d9      	ldr	r1, [r3, #12]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	4618      	mov	r0, r3
 800877a:	4603      	mov	r3, r0
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	4403      	add	r3, r0
 8008780:	3b1e      	subs	r3, #30
 8008782:	409a      	lsls	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800878c:	e022      	b.n	80087d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6919      	ldr	r1, [r3, #16]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	461a      	mov	r2, r3
 800879c:	4613      	mov	r3, r2
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	4413      	add	r3, r2
 80087a2:	2207      	movs	r2, #7
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	43da      	mvns	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	400a      	ands	r2, r1
 80087b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6919      	ldr	r1, [r3, #16]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	4618      	mov	r0, r3
 80087c4:	4603      	mov	r3, r0
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	4403      	add	r3, r0
 80087ca:	409a      	lsls	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2b06      	cmp	r3, #6
 80087da:	d824      	bhi.n	8008826 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	3b05      	subs	r3, #5
 80087ee:	221f      	movs	r2, #31
 80087f0:	fa02 f303 	lsl.w	r3, r2, r3
 80087f4:	43da      	mvns	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	400a      	ands	r2, r1
 80087fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	b29b      	uxth	r3, r3
 800880a:	4618      	mov	r0, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	3b05      	subs	r3, #5
 8008818:	fa00 f203 	lsl.w	r2, r0, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	635a      	str	r2, [r3, #52]	; 0x34
 8008824:	e04c      	b.n	80088c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2b0c      	cmp	r3, #12
 800882c:	d824      	bhi.n	8008878 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	3b23      	subs	r3, #35	; 0x23
 8008840:	221f      	movs	r2, #31
 8008842:	fa02 f303 	lsl.w	r3, r2, r3
 8008846:	43da      	mvns	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	400a      	ands	r2, r1
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	4618      	mov	r0, r3
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	3b23      	subs	r3, #35	; 0x23
 800886a:	fa00 f203 	lsl.w	r2, r0, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	631a      	str	r2, [r3, #48]	; 0x30
 8008876:	e023      	b.n	80088c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	3b41      	subs	r3, #65	; 0x41
 800888a:	221f      	movs	r2, #31
 800888c:	fa02 f303 	lsl.w	r3, r2, r3
 8008890:	43da      	mvns	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	400a      	ands	r2, r1
 8008898:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	4618      	mov	r0, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	3b41      	subs	r3, #65	; 0x41
 80088b4:	fa00 f203 	lsl.w	r2, r0, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a2a      	ldr	r2, [pc, #168]	; (8008970 <HAL_ADC_ConfigChannel+0x284>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d10a      	bne.n	80088e0 <HAL_ADC_ConfigChannel+0x1f4>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088d2:	d105      	bne.n	80088e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80088d4:	4b27      	ldr	r3, [pc, #156]	; (8008974 <HAL_ADC_ConfigChannel+0x288>)
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4a26      	ldr	r2, [pc, #152]	; (8008974 <HAL_ADC_ConfigChannel+0x288>)
 80088da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80088de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a22      	ldr	r2, [pc, #136]	; (8008970 <HAL_ADC_ConfigChannel+0x284>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d109      	bne.n	80088fe <HAL_ADC_ConfigChannel+0x212>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b12      	cmp	r3, #18
 80088f0:	d105      	bne.n	80088fe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80088f2:	4b20      	ldr	r3, [pc, #128]	; (8008974 <HAL_ADC_ConfigChannel+0x288>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	4a1f      	ldr	r2, [pc, #124]	; (8008974 <HAL_ADC_ConfigChannel+0x288>)
 80088f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80088fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a1b      	ldr	r2, [pc, #108]	; (8008970 <HAL_ADC_ConfigChannel+0x284>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d125      	bne.n	8008954 <HAL_ADC_ConfigChannel+0x268>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a17      	ldr	r2, [pc, #92]	; (800896c <HAL_ADC_ConfigChannel+0x280>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d003      	beq.n	800891a <HAL_ADC_ConfigChannel+0x22e>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b11      	cmp	r3, #17
 8008918:	d11c      	bne.n	8008954 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800891a:	4b16      	ldr	r3, [pc, #88]	; (8008974 <HAL_ADC_ConfigChannel+0x288>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	4a15      	ldr	r2, [pc, #84]	; (8008974 <HAL_ADC_ConfigChannel+0x288>)
 8008920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008924:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a10      	ldr	r2, [pc, #64]	; (800896c <HAL_ADC_ConfigChannel+0x280>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d111      	bne.n	8008954 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008930:	4b11      	ldr	r3, [pc, #68]	; (8008978 <HAL_ADC_ConfigChannel+0x28c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a11      	ldr	r2, [pc, #68]	; (800897c <HAL_ADC_ConfigChannel+0x290>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	0c9a      	lsrs	r2, r3, #18
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8008946:	e002      	b.n	800894e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3b01      	subs	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f9      	bne.n	8008948 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	10000012 	.word	0x10000012
 8008970:	40012000 	.word	0x40012000
 8008974:	40012300 	.word	0x40012300
 8008978:	20000170 	.word	0x20000170
 800897c:	431bde83 	.word	0x431bde83

08008980 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008988:	4b78      	ldr	r3, [pc, #480]	; (8008b6c <ADC_Init+0x1ec>)
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4a77      	ldr	r2, [pc, #476]	; (8008b6c <ADC_Init+0x1ec>)
 800898e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008992:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008994:	4b75      	ldr	r3, [pc, #468]	; (8008b6c <ADC_Init+0x1ec>)
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	4973      	ldr	r1, [pc, #460]	; (8008b6c <ADC_Init+0x1ec>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6859      	ldr	r1, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	021a      	lsls	r2, r3, #8
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80089d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6859      	ldr	r1, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	430a      	orrs	r2, r1
 80089e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6899      	ldr	r1, [r3, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	4a58      	ldr	r2, [pc, #352]	; (8008b70 <ADC_Init+0x1f0>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d022      	beq.n	8008a5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6899      	ldr	r1, [r3, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008a44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6899      	ldr	r1, [r3, #8]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	609a      	str	r2, [r3, #8]
 8008a58:	e00f      	b.n	8008a7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008a78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0202 	bic.w	r2, r2, #2
 8008a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6899      	ldr	r1, [r3, #8]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	005a      	lsls	r2, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d01b      	beq.n	8008ae0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008ac6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6859      	ldr	r1, [r3, #4]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	035a      	lsls	r2, r3, #13
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	605a      	str	r2, [r3, #4]
 8008ade:	e007      	b.n	8008af0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008aee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	051a      	lsls	r2, r3, #20
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6899      	ldr	r1, [r3, #8]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b32:	025a      	lsls	r2, r3, #9
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6899      	ldr	r1, [r3, #8]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	029a      	lsls	r2, r3, #10
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	609a      	str	r2, [r3, #8]
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	40012300 	.word	0x40012300
 8008b70:	0f000001 	.word	0x0f000001

08008b74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d13c      	bne.n	8008c08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d12b      	bne.n	8008c00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d127      	bne.n	8008c00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d006      	beq.n	8008bcc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d119      	bne.n	8008c00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0220 	bic.w	r2, r2, #32
 8008bda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	f043 0201 	orr.w	r2, r3, #1
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7fb f965 	bl	8003ed0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008c06:	e00e      	b.n	8008c26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	f003 0310 	and.w	r3, r3, #16
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f7ff fd5f 	bl	80086d8 <HAL_ADC_ErrorCallback>
}
 8008c1a:	e004      	b.n	8008c26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	4798      	blx	r3
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f7ff fd37 	bl	80086b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2240      	movs	r2, #64	; 0x40
 8008c5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c62:	f043 0204 	orr.w	r2, r3, #4
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f7ff fd34 	bl	80086d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c70:	bf00      	nop
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <__NVIC_SetPriorityGrouping+0x40>)
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ca8:	4013      	ands	r3, r2
 8008caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008cb4:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cba:	4a04      	ldr	r2, [pc, #16]	; (8008ccc <__NVIC_SetPriorityGrouping+0x40>)
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	60d3      	str	r3, [r2, #12]
}
 8008cc0:	bf00      	nop
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	e000ed00 	.word	0xe000ed00
 8008cd0:	05fa0000 	.word	0x05fa0000

08008cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cd8:	4b04      	ldr	r3, [pc, #16]	; (8008cec <__NVIC_GetPriorityGrouping+0x18>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	0a1b      	lsrs	r3, r3, #8
 8008cde:	f003 0307 	and.w	r3, r3, #7
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	e000ed00 	.word	0xe000ed00

08008cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	db0b      	blt.n	8008d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	f003 021f 	and.w	r2, r3, #31
 8008d08:	4907      	ldr	r1, [pc, #28]	; (8008d28 <__NVIC_EnableIRQ+0x38>)
 8008d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d0e:	095b      	lsrs	r3, r3, #5
 8008d10:	2001      	movs	r0, #1
 8008d12:	fa00 f202 	lsl.w	r2, r0, r2
 8008d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	e000e100 	.word	0xe000e100

08008d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	db0a      	blt.n	8008d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	490c      	ldr	r1, [pc, #48]	; (8008d78 <__NVIC_SetPriority+0x4c>)
 8008d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d4a:	0112      	lsls	r2, r2, #4
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	440b      	add	r3, r1
 8008d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d54:	e00a      	b.n	8008d6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	4908      	ldr	r1, [pc, #32]	; (8008d7c <__NVIC_SetPriority+0x50>)
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	3b04      	subs	r3, #4
 8008d64:	0112      	lsls	r2, r2, #4
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	440b      	add	r3, r1
 8008d6a:	761a      	strb	r2, [r3, #24]
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	e000e100 	.word	0xe000e100
 8008d7c:	e000ed00 	.word	0xe000ed00

08008d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b089      	sub	sp, #36	; 0x24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f1c3 0307 	rsb	r3, r3, #7
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	bf28      	it	cs
 8008d9e:	2304      	movcs	r3, #4
 8008da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	3304      	adds	r3, #4
 8008da6:	2b06      	cmp	r3, #6
 8008da8:	d902      	bls.n	8008db0 <NVIC_EncodePriority+0x30>
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	3b03      	subs	r3, #3
 8008dae:	e000      	b.n	8008db2 <NVIC_EncodePriority+0x32>
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	43da      	mvns	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	401a      	ands	r2, r3
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd2:	43d9      	mvns	r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008dd8:	4313      	orrs	r3, r2
         );
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3724      	adds	r7, #36	; 0x24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff ff4c 	bl	8008c8c <__NVIC_SetPriorityGrouping>
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e0e:	f7ff ff61 	bl	8008cd4 <__NVIC_GetPriorityGrouping>
 8008e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	68b9      	ldr	r1, [r7, #8]
 8008e18:	6978      	ldr	r0, [r7, #20]
 8008e1a:	f7ff ffb1 	bl	8008d80 <NVIC_EncodePriority>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff ff80 	bl	8008d2c <__NVIC_SetPriority>
}
 8008e2c:	bf00      	nop
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff ff54 	bl	8008cf0 <__NVIC_EnableIRQ>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008e5c:	f7ff f93c 	bl	80080d8 <HAL_GetTick>
 8008e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e099      	b.n	8008fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e8c:	e00f      	b.n	8008eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e8e:	f7ff f923 	bl	80080d8 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b05      	cmp	r3, #5
 8008e9a:	d908      	bls.n	8008eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e078      	b.n	8008fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e8      	bne.n	8008e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4b38      	ldr	r3, [pc, #224]	; (8008fa8 <HAL_DMA_Init+0x158>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d107      	bne.n	8008f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	4313      	orrs	r3, r2
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d117      	bne.n	8008f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00e      	beq.n	8008f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fb09 	bl	800956c <DMA_CheckFifoParam>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d008      	beq.n	8008f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2240      	movs	r2, #64	; 0x40
 8008f64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e016      	b.n	8008fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fac0 	bl	8009500 <DMA_CalcBaseAndBitshift>
 8008f80:	4603      	mov	r3, r0
 8008f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f88:	223f      	movs	r2, #63	; 0x3f
 8008f8a:	409a      	lsls	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	e010803f 	.word	0xe010803f

08008fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d101      	bne.n	8008fd2 <HAL_DMA_Start_IT+0x26>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	e048      	b.n	8009064 <HAL_DMA_Start_IT+0xb8>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d137      	bne.n	8009056 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	68b9      	ldr	r1, [r7, #8]
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 fa52 	bl	80094a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009004:	223f      	movs	r2, #63	; 0x3f
 8009006:	409a      	lsls	r2, r3
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0216 	orr.w	r2, r2, #22
 800901a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800902a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0208 	orr.w	r2, r2, #8
 8009042:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	e005      	b.n	8009062 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800905e:	2302      	movs	r3, #2
 8009060:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009062:	7dfb      	ldrb	r3, [r7, #23]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009078:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800907a:	f7ff f82d 	bl	80080d8 <HAL_GetTick>
 800907e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b02      	cmp	r3, #2
 800908a:	d008      	beq.n	800909e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2280      	movs	r2, #128	; 0x80
 8009090:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e052      	b.n	8009144 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0216 	bic.w	r2, r2, #22
 80090ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	695a      	ldr	r2, [r3, #20]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d103      	bne.n	80090ce <HAL_DMA_Abort+0x62>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 0208 	bic.w	r2, r2, #8
 80090dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0201 	bic.w	r2, r2, #1
 80090ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80090ee:	e013      	b.n	8009118 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80090f0:	f7fe fff2 	bl	80080d8 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2b05      	cmp	r3, #5
 80090fc:	d90c      	bls.n	8009118 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2203      	movs	r2, #3
 8009110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e015      	b.n	8009144 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e4      	bne.n	80090f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800912a:	223f      	movs	r2, #63	; 0x3f
 800912c:	409a      	lsls	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b02      	cmp	r3, #2
 800915e:	d004      	beq.n	800916a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2280      	movs	r2, #128	; 0x80
 8009164:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e00c      	b.n	8009184 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2205      	movs	r2, #5
 800916e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 0201 	bic.w	r2, r2, #1
 8009180:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800919c:	4b92      	ldr	r3, [pc, #584]	; (80093e8 <HAL_DMA_IRQHandler+0x258>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a92      	ldr	r2, [pc, #584]	; (80093ec <HAL_DMA_IRQHandler+0x25c>)
 80091a2:	fba2 2303 	umull	r2, r3, r2, r3
 80091a6:	0a9b      	lsrs	r3, r3, #10
 80091a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ba:	2208      	movs	r2, #8
 80091bc:	409a      	lsls	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4013      	ands	r3, r2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01a      	beq.n	80091fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d013      	beq.n	80091fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 0204 	bic.w	r2, r2, #4
 80091e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e8:	2208      	movs	r2, #8
 80091ea:	409a      	lsls	r2, r3
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f4:	f043 0201 	orr.w	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009200:	2201      	movs	r2, #1
 8009202:	409a      	lsls	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4013      	ands	r3, r2
 8009208:	2b00      	cmp	r3, #0
 800920a:	d012      	beq.n	8009232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00b      	beq.n	8009232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800921e:	2201      	movs	r2, #1
 8009220:	409a      	lsls	r2, r3
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922a:	f043 0202 	orr.w	r2, r3, #2
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009236:	2204      	movs	r2, #4
 8009238:	409a      	lsls	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4013      	ands	r3, r2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d012      	beq.n	8009268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00b      	beq.n	8009268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009254:	2204      	movs	r2, #4
 8009256:	409a      	lsls	r2, r3
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009260:	f043 0204 	orr.w	r2, r3, #4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800926c:	2210      	movs	r2, #16
 800926e:	409a      	lsls	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4013      	ands	r3, r2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d043      	beq.n	8009300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0308 	and.w	r3, r3, #8
 8009282:	2b00      	cmp	r3, #0
 8009284:	d03c      	beq.n	8009300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800928a:	2210      	movs	r2, #16
 800928c:	409a      	lsls	r2, r3
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d018      	beq.n	80092d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d108      	bne.n	80092c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d024      	beq.n	8009300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
 80092be:	e01f      	b.n	8009300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d01b      	beq.n	8009300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	4798      	blx	r3
 80092d0:	e016      	b.n	8009300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d107      	bne.n	80092f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0208 	bic.w	r2, r2, #8
 80092ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009304:	2220      	movs	r2, #32
 8009306:	409a      	lsls	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4013      	ands	r3, r2
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 808e 	beq.w	800942e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8086 	beq.w	800942e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009326:	2220      	movs	r2, #32
 8009328:	409a      	lsls	r2, r3
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b05      	cmp	r3, #5
 8009338:	d136      	bne.n	80093a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0216 	bic.w	r2, r2, #22
 8009348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695a      	ldr	r2, [r3, #20]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	2b00      	cmp	r3, #0
 8009360:	d103      	bne.n	800936a <HAL_DMA_IRQHandler+0x1da>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0208 	bic.w	r2, r2, #8
 8009378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800937e:	223f      	movs	r2, #63	; 0x3f
 8009380:	409a      	lsls	r2, r3
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800939a:	2b00      	cmp	r3, #0
 800939c:	d07d      	beq.n	800949a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	4798      	blx	r3
        }
        return;
 80093a6:	e078      	b.n	800949a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01c      	beq.n	80093f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d108      	bne.n	80093d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d030      	beq.n	800942e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	4798      	blx	r3
 80093d4:	e02b      	b.n	800942e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d027      	beq.n	800942e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	4798      	blx	r3
 80093e6:	e022      	b.n	800942e <HAL_DMA_IRQHandler+0x29e>
 80093e8:	20000170 	.word	0x20000170
 80093ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10f      	bne.n	800941e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0210 	bic.w	r2, r2, #16
 800940c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009432:	2b00      	cmp	r3, #0
 8009434:	d032      	beq.n	800949c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d022      	beq.n	8009488 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2205      	movs	r2, #5
 8009446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0201 	bic.w	r2, r2, #1
 8009458:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	3301      	adds	r3, #1
 800945e:	60bb      	str	r3, [r7, #8]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	429a      	cmp	r2, r3
 8009464:	d307      	bcc.n	8009476 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1f2      	bne.n	800945a <HAL_DMA_IRQHandler+0x2ca>
 8009474:	e000      	b.n	8009478 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009476:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d005      	beq.n	800949c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
 8009498:	e000      	b.n	800949c <HAL_DMA_IRQHandler+0x30c>
        return;
 800949a:	bf00      	nop
    }
  }
}
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop

080094a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	2b40      	cmp	r3, #64	; 0x40
 80094d0:	d108      	bne.n	80094e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80094e2:	e007      	b.n	80094f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	60da      	str	r2, [r3, #12]
}
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	3b10      	subs	r3, #16
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <DMA_CalcBaseAndBitshift+0x60>)
 8009512:	fba2 2303 	umull	r2, r3, r2, r3
 8009516:	091b      	lsrs	r3, r3, #4
 8009518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800951a:	4a12      	ldr	r2, [pc, #72]	; (8009564 <DMA_CalcBaseAndBitshift+0x64>)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b03      	cmp	r3, #3
 800952c:	d908      	bls.n	8009540 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <DMA_CalcBaseAndBitshift+0x68>)
 8009536:	4013      	ands	r3, r2
 8009538:	1d1a      	adds	r2, r3, #4
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	659a      	str	r2, [r3, #88]	; 0x58
 800953e:	e006      	b.n	800954e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	4b08      	ldr	r3, [pc, #32]	; (8009568 <DMA_CalcBaseAndBitshift+0x68>)
 8009548:	4013      	ands	r3, r2
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	aaaaaaab 	.word	0xaaaaaaab
 8009564:	0801636c 	.word	0x0801636c
 8009568:	fffffc00 	.word	0xfffffc00

0800956c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d11f      	bne.n	80095c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b03      	cmp	r3, #3
 800958a:	d855      	bhi.n	8009638 <DMA_CheckFifoParam+0xcc>
 800958c:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <DMA_CheckFifoParam+0x28>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	080095a5 	.word	0x080095a5
 8009598:	080095b7 	.word	0x080095b7
 800959c:	080095a5 	.word	0x080095a5
 80095a0:	08009639 	.word	0x08009639
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d045      	beq.n	800963c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095b4:	e042      	b.n	800963c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80095be:	d13f      	bne.n	8009640 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095c4:	e03c      	b.n	8009640 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ce:	d121      	bne.n	8009614 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d836      	bhi.n	8009644 <DMA_CheckFifoParam+0xd8>
 80095d6:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <DMA_CheckFifoParam+0x70>)
 80095d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095dc:	080095ed 	.word	0x080095ed
 80095e0:	080095f3 	.word	0x080095f3
 80095e4:	080095ed 	.word	0x080095ed
 80095e8:	08009605 	.word	0x08009605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	73fb      	strb	r3, [r7, #15]
      break;
 80095f0:	e02f      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d024      	beq.n	8009648 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009602:	e021      	b.n	8009648 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800960c:	d11e      	bne.n	800964c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009612:	e01b      	b.n	800964c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d902      	bls.n	8009620 <DMA_CheckFifoParam+0xb4>
 800961a:	2b03      	cmp	r3, #3
 800961c:	d003      	beq.n	8009626 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800961e:	e018      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	73fb      	strb	r3, [r7, #15]
      break;
 8009624:	e015      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00e      	beq.n	8009650 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	73fb      	strb	r3, [r7, #15]
      break;
 8009636:	e00b      	b.n	8009650 <DMA_CheckFifoParam+0xe4>
      break;
 8009638:	bf00      	nop
 800963a:	e00a      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
      break;
 800963c:	bf00      	nop
 800963e:	e008      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
      break;
 8009640:	bf00      	nop
 8009642:	e006      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
      break;
 8009644:	bf00      	nop
 8009646:	e004      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
      break;
 8009648:	bf00      	nop
 800964a:	e002      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
      break;   
 800964c:	bf00      	nop
 800964e:	e000      	b.n	8009652 <DMA_CheckFifoParam+0xe6>
      break;
 8009650:	bf00      	nop
    }
  } 
  
  return status; 
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009660:	b480      	push	{r7}
 8009662:	b089      	sub	sp, #36	; 0x24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800966a:	2300      	movs	r3, #0
 800966c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009672:	2300      	movs	r3, #0
 8009674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009676:	2300      	movs	r3, #0
 8009678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800967a:	2300      	movs	r3, #0
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	e175      	b.n	800996c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009680:	2201      	movs	r2, #1
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	fa02 f303 	lsl.w	r3, r2, r3
 8009688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4013      	ands	r3, r2
 8009692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	429a      	cmp	r2, r3
 800969a:	f040 8164 	bne.w	8009966 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d00b      	beq.n	80096be <HAL_GPIO_Init+0x5e>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d007      	beq.n	80096be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80096b2:	2b11      	cmp	r3, #17
 80096b4:	d003      	beq.n	80096be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2b12      	cmp	r3, #18
 80096bc:	d130      	bne.n	8009720 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	2203      	movs	r2, #3
 80096ca:	fa02 f303 	lsl.w	r3, r2, r3
 80096ce:	43db      	mvns	r3, r3
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	4013      	ands	r3, r2
 80096d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68da      	ldr	r2, [r3, #12]
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80096f4:	2201      	movs	r2, #1
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	fa02 f303 	lsl.w	r3, r2, r3
 80096fc:	43db      	mvns	r3, r3
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	4013      	ands	r3, r2
 8009702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	091b      	lsrs	r3, r3, #4
 800970a:	f003 0201 	and.w	r2, r3, #1
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	fa02 f303 	lsl.w	r3, r2, r3
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	4313      	orrs	r3, r2
 8009718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	2203      	movs	r2, #3
 800972c:	fa02 f303 	lsl.w	r3, r2, r3
 8009730:	43db      	mvns	r3, r3
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	4013      	ands	r3, r2
 8009736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	fa02 f303 	lsl.w	r3, r2, r3
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	4313      	orrs	r3, r2
 8009748:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d003      	beq.n	8009760 <HAL_GPIO_Init+0x100>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	2b12      	cmp	r3, #18
 800975e:	d123      	bne.n	80097a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	08da      	lsrs	r2, r3, #3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3208      	adds	r2, #8
 8009768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	220f      	movs	r2, #15
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	43db      	mvns	r3, r3
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	4013      	ands	r3, r2
 8009782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	691a      	ldr	r2, [r3, #16]
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	69ba      	ldr	r2, [r7, #24]
 8009796:	4313      	orrs	r3, r2
 8009798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	08da      	lsrs	r2, r3, #3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3208      	adds	r2, #8
 80097a2:	69b9      	ldr	r1, [r7, #24]
 80097a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	2203      	movs	r2, #3
 80097b4:	fa02 f303 	lsl.w	r3, r2, r3
 80097b8:	43db      	mvns	r3, r3
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	4013      	ands	r3, r2
 80097be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f003 0203 	and.w	r2, r3, #3
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	fa02 f303 	lsl.w	r3, r2, r3
 80097d0:	69ba      	ldr	r2, [r7, #24]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 80be 	beq.w	8009966 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097ea:	4b65      	ldr	r3, [pc, #404]	; (8009980 <HAL_GPIO_Init+0x320>)
 80097ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ee:	4a64      	ldr	r2, [pc, #400]	; (8009980 <HAL_GPIO_Init+0x320>)
 80097f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097f4:	6453      	str	r3, [r2, #68]	; 0x44
 80097f6:	4b62      	ldr	r3, [pc, #392]	; (8009980 <HAL_GPIO_Init+0x320>)
 80097f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009802:	4a60      	ldr	r2, [pc, #384]	; (8009984 <HAL_GPIO_Init+0x324>)
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	089b      	lsrs	r3, r3, #2
 8009808:	3302      	adds	r3, #2
 800980a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800980e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	220f      	movs	r2, #15
 800981a:	fa02 f303 	lsl.w	r3, r2, r3
 800981e:	43db      	mvns	r3, r3
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	4013      	ands	r3, r2
 8009824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a57      	ldr	r2, [pc, #348]	; (8009988 <HAL_GPIO_Init+0x328>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d037      	beq.n	800989e <HAL_GPIO_Init+0x23e>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a56      	ldr	r2, [pc, #344]	; (800998c <HAL_GPIO_Init+0x32c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d031      	beq.n	800989a <HAL_GPIO_Init+0x23a>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a55      	ldr	r2, [pc, #340]	; (8009990 <HAL_GPIO_Init+0x330>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d02b      	beq.n	8009896 <HAL_GPIO_Init+0x236>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a54      	ldr	r2, [pc, #336]	; (8009994 <HAL_GPIO_Init+0x334>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d025      	beq.n	8009892 <HAL_GPIO_Init+0x232>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a53      	ldr	r2, [pc, #332]	; (8009998 <HAL_GPIO_Init+0x338>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d01f      	beq.n	800988e <HAL_GPIO_Init+0x22e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a52      	ldr	r2, [pc, #328]	; (800999c <HAL_GPIO_Init+0x33c>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d019      	beq.n	800988a <HAL_GPIO_Init+0x22a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a51      	ldr	r2, [pc, #324]	; (80099a0 <HAL_GPIO_Init+0x340>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d013      	beq.n	8009886 <HAL_GPIO_Init+0x226>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a50      	ldr	r2, [pc, #320]	; (80099a4 <HAL_GPIO_Init+0x344>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00d      	beq.n	8009882 <HAL_GPIO_Init+0x222>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a4f      	ldr	r2, [pc, #316]	; (80099a8 <HAL_GPIO_Init+0x348>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d007      	beq.n	800987e <HAL_GPIO_Init+0x21e>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a4e      	ldr	r2, [pc, #312]	; (80099ac <HAL_GPIO_Init+0x34c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d101      	bne.n	800987a <HAL_GPIO_Init+0x21a>
 8009876:	2309      	movs	r3, #9
 8009878:	e012      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 800987a:	230a      	movs	r3, #10
 800987c:	e010      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 800987e:	2308      	movs	r3, #8
 8009880:	e00e      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 8009882:	2307      	movs	r3, #7
 8009884:	e00c      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 8009886:	2306      	movs	r3, #6
 8009888:	e00a      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 800988a:	2305      	movs	r3, #5
 800988c:	e008      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 800988e:	2304      	movs	r3, #4
 8009890:	e006      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 8009892:	2303      	movs	r3, #3
 8009894:	e004      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 8009896:	2302      	movs	r3, #2
 8009898:	e002      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <HAL_GPIO_Init+0x240>
 800989e:	2300      	movs	r3, #0
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	f002 0203 	and.w	r2, r2, #3
 80098a6:	0092      	lsls	r2, r2, #2
 80098a8:	4093      	lsls	r3, r2
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80098b0:	4934      	ldr	r1, [pc, #208]	; (8009984 <HAL_GPIO_Init+0x324>)
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	089b      	lsrs	r3, r3, #2
 80098b6:	3302      	adds	r3, #2
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80098be:	4b3c      	ldr	r3, [pc, #240]	; (80099b0 <HAL_GPIO_Init+0x350>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	43db      	mvns	r3, r3
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	4013      	ands	r3, r2
 80098cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	4313      	orrs	r3, r2
 80098e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80098e2:	4a33      	ldr	r2, [pc, #204]	; (80099b0 <HAL_GPIO_Init+0x350>)
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80098e8:	4b31      	ldr	r3, [pc, #196]	; (80099b0 <HAL_GPIO_Init+0x350>)
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	43db      	mvns	r3, r3
 80098f2:	69ba      	ldr	r2, [r7, #24]
 80098f4:	4013      	ands	r3, r2
 80098f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800990c:	4a28      	ldr	r2, [pc, #160]	; (80099b0 <HAL_GPIO_Init+0x350>)
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009912:	4b27      	ldr	r3, [pc, #156]	; (80099b0 <HAL_GPIO_Init+0x350>)
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	43db      	mvns	r3, r3
 800991c:	69ba      	ldr	r2, [r7, #24]
 800991e:	4013      	ands	r3, r2
 8009920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	4313      	orrs	r3, r2
 8009934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009936:	4a1e      	ldr	r2, [pc, #120]	; (80099b0 <HAL_GPIO_Init+0x350>)
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800993c:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <HAL_GPIO_Init+0x350>)
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	43db      	mvns	r3, r3
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	4013      	ands	r3, r2
 800994a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d003      	beq.n	8009960 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009960:	4a13      	ldr	r2, [pc, #76]	; (80099b0 <HAL_GPIO_Init+0x350>)
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	3301      	adds	r3, #1
 800996a:	61fb      	str	r3, [r7, #28]
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	2b0f      	cmp	r3, #15
 8009970:	f67f ae86 	bls.w	8009680 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009974:	bf00      	nop
 8009976:	3724      	adds	r7, #36	; 0x24
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	40023800 	.word	0x40023800
 8009984:	40013800 	.word	0x40013800
 8009988:	40020000 	.word	0x40020000
 800998c:	40020400 	.word	0x40020400
 8009990:	40020800 	.word	0x40020800
 8009994:	40020c00 	.word	0x40020c00
 8009998:	40021000 	.word	0x40021000
 800999c:	40021400 	.word	0x40021400
 80099a0:	40021800 	.word	0x40021800
 80099a4:	40021c00 	.word	0x40021c00
 80099a8:	40022000 	.word	0x40022000
 80099ac:	40022400 	.word	0x40022400
 80099b0:	40013c00 	.word	0x40013c00

080099b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691a      	ldr	r2, [r3, #16]
 80099c4:	887b      	ldrh	r3, [r7, #2]
 80099c6:	4013      	ands	r3, r2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
 80099d0:	e001      	b.n	80099d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	807b      	strh	r3, [r7, #2]
 80099f0:	4613      	mov	r3, r2
 80099f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80099f4:	787b      	ldrb	r3, [r7, #1]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80099fa:	887a      	ldrh	r2, [r7, #2]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009a00:	e003      	b.n	8009a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009a02:	887b      	ldrh	r3, [r7, #2]
 8009a04:	041a      	lsls	r2, r3, #16
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	619a      	str	r2, [r3, #24]
}
 8009a0a:	bf00      	nop
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	695a      	ldr	r2, [r3, #20]
 8009a26:	887b      	ldrh	r3, [r7, #2]
 8009a28:	4013      	ands	r3, r2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d004      	beq.n	8009a38 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009a2e:	887b      	ldrh	r3, [r7, #2]
 8009a30:	041a      	lsls	r2, r3, #16
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009a36:	e002      	b.n	8009a3e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a38:	887a      	ldrh	r2, [r7, #2]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	619a      	str	r2, [r3, #24]
}
 8009a3e:	bf00      	nop
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
	...

08009a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009a56:	4b08      	ldr	r3, [pc, #32]	; (8009a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a58:	695a      	ldr	r2, [r3, #20]
 8009a5a:	88fb      	ldrh	r3, [r7, #6]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d006      	beq.n	8009a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009a62:	4a05      	ldr	r2, [pc, #20]	; (8009a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a64:	88fb      	ldrh	r3, [r7, #6]
 8009a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009a68:	88fb      	ldrh	r3, [r7, #6]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f806 	bl	8009a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	40013c00 	.word	0x40013c00

08009a7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
	...

08009a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e07f      	b.n	8009ba6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7fd fa72 	bl	8006fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2224      	movs	r2, #36	; 0x24
 8009ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0201 	bic.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009ae4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689a      	ldr	r2, [r3, #8]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009af4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d107      	bne.n	8009b0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689a      	ldr	r2, [r3, #8]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b0a:	609a      	str	r2, [r3, #8]
 8009b0c:	e006      	b.n	8009b1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	689a      	ldr	r2, [r3, #8]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009b1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d104      	bne.n	8009b2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6859      	ldr	r1, [r3, #4]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	4b1d      	ldr	r3, [pc, #116]	; (8009bb0 <HAL_I2C_Init+0x11c>)
 8009b3a:	430b      	orrs	r3, r1
 8009b3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691a      	ldr	r2, [r3, #16]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	ea42 0103 	orr.w	r1, r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	021a      	lsls	r2, r3, #8
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	69d9      	ldr	r1, [r3, #28]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1a      	ldr	r2, [r3, #32]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f042 0201 	orr.w	r2, r2, #1
 8009b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	02008000 	.word	0x02008000

08009bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	607a      	str	r2, [r7, #4]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	817b      	strh	r3, [r7, #10]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b20      	cmp	r3, #32
 8009bd2:	f040 80da 	bne.w	8009d8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d101      	bne.n	8009be4 <HAL_I2C_Master_Transmit+0x30>
 8009be0:	2302      	movs	r3, #2
 8009be2:	e0d3      	b.n	8009d8c <HAL_I2C_Master_Transmit+0x1d8>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009bec:	f7fe fa74 	bl	80080d8 <HAL_GetTick>
 8009bf0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	2319      	movs	r3, #25
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fc5c 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e0be      	b.n	8009d8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2221      	movs	r2, #33	; 0x21
 8009c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2210      	movs	r2, #16
 8009c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	893a      	ldrh	r2, [r7, #8]
 8009c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	2bff      	cmp	r3, #255	; 0xff
 8009c3e:	d90e      	bls.n	8009c5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	22ff      	movs	r2, #255	; 0xff
 8009c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	8979      	ldrh	r1, [r7, #10]
 8009c4e:	4b51      	ldr	r3, [pc, #324]	; (8009d94 <HAL_I2C_Master_Transmit+0x1e0>)
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 fdbe 	bl	800a7d8 <I2C_TransferConfig>
 8009c5c:	e06c      	b.n	8009d38 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	8979      	ldrh	r1, [r7, #10]
 8009c70:	4b48      	ldr	r3, [pc, #288]	; (8009d94 <HAL_I2C_Master_Transmit+0x1e0>)
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 fdad 	bl	800a7d8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009c7e:	e05b      	b.n	8009d38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	6a39      	ldr	r1, [r7, #32]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fc59 	bl	800a53c <I2C_WaitOnTXISFlagUntilTimeout>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e07b      	b.n	8009d8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	781a      	ldrb	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d034      	beq.n	8009d38 <HAL_I2C_Master_Transmit+0x184>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d130      	bne.n	8009d38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2180      	movs	r1, #128	; 0x80
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fbeb 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e04d      	b.n	8009d8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2bff      	cmp	r3, #255	; 0xff
 8009cf8:	d90e      	bls.n	8009d18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	22ff      	movs	r2, #255	; 0xff
 8009cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	8979      	ldrh	r1, [r7, #10]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fd61 	bl	800a7d8 <I2C_TransferConfig>
 8009d16:	e00f      	b.n	8009d38 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	8979      	ldrh	r1, [r7, #10]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fd50 	bl	800a7d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d19e      	bne.n	8009c80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	6a39      	ldr	r1, [r7, #32]
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f000 fc38 	bl	800a5bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e01a      	b.n	8009d8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	6859      	ldr	r1, [r3, #4]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	4b0b      	ldr	r3, [pc, #44]	; (8009d98 <HAL_I2C_Master_Transmit+0x1e4>)
 8009d6a:	400b      	ands	r3, r1
 8009d6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e000      	b.n	8009d8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009d8a:	2302      	movs	r3, #2
  }
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	80002000 	.word	0x80002000
 8009d98:	fe00e800 	.word	0xfe00e800

08009d9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	607a      	str	r2, [r7, #4]
 8009da6:	461a      	mov	r2, r3
 8009da8:	460b      	mov	r3, r1
 8009daa:	817b      	strh	r3, [r7, #10]
 8009dac:	4613      	mov	r3, r2
 8009dae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	f040 80db 	bne.w	8009f74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_I2C_Master_Receive+0x30>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e0d4      	b.n	8009f76 <HAL_I2C_Master_Receive+0x1da>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009dd4:	f7fe f980 	bl	80080d8 <HAL_GetTick>
 8009dd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	2319      	movs	r3, #25
 8009de0:	2201      	movs	r2, #1
 8009de2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 fb68 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e0bf      	b.n	8009f76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2222      	movs	r2, #34	; 0x22
 8009dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2210      	movs	r2, #16
 8009e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	893a      	ldrh	r2, [r7, #8]
 8009e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	2bff      	cmp	r3, #255	; 0xff
 8009e26:	d90e      	bls.n	8009e46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	22ff      	movs	r2, #255	; 0xff
 8009e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	8979      	ldrh	r1, [r7, #10]
 8009e36:	4b52      	ldr	r3, [pc, #328]	; (8009f80 <HAL_I2C_Master_Receive+0x1e4>)
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 fcca 	bl	800a7d8 <I2C_TransferConfig>
 8009e44:	e06d      	b.n	8009f22 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	8979      	ldrh	r1, [r7, #10]
 8009e58:	4b49      	ldr	r3, [pc, #292]	; (8009f80 <HAL_I2C_Master_Receive+0x1e4>)
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 fcb9 	bl	800a7d8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009e66:	e05c      	b.n	8009f22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	6a39      	ldr	r1, [r7, #32]
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fbe1 	bl	800a634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e07c      	b.n	8009f76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	b2d2      	uxtb	r2, r2
 8009e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d034      	beq.n	8009f22 <HAL_I2C_Master_Receive+0x186>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d130      	bne.n	8009f22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2180      	movs	r1, #128	; 0x80
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 faf6 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e04d      	b.n	8009f76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	2bff      	cmp	r3, #255	; 0xff
 8009ee2:	d90e      	bls.n	8009f02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	22ff      	movs	r2, #255	; 0xff
 8009ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	8979      	ldrh	r1, [r7, #10]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fc6c 	bl	800a7d8 <I2C_TransferConfig>
 8009f00:	e00f      	b.n	8009f22 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	8979      	ldrh	r1, [r7, #10]
 8009f14:	2300      	movs	r3, #0
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 fc5b 	bl	800a7d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d19d      	bne.n	8009e68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	6a39      	ldr	r1, [r7, #32]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 fb43 	bl	800a5bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e01a      	b.n	8009f76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2220      	movs	r2, #32
 8009f46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6859      	ldr	r1, [r3, #4]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	4b0c      	ldr	r3, [pc, #48]	; (8009f84 <HAL_I2C_Master_Receive+0x1e8>)
 8009f54:	400b      	ands	r3, r1
 8009f56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	e000      	b.n	8009f76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009f74:	2302      	movs	r3, #2
  }
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	80002400 	.word	0x80002400
 8009f84:	fe00e800 	.word	0xfe00e800

08009f88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b088      	sub	sp, #32
 8009f8c:	af02      	add	r7, sp, #8
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	461a      	mov	r2, r3
 8009f96:	4603      	mov	r3, r0
 8009f98:	817b      	strh	r3, [r7, #10]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	813b      	strh	r3, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b20      	cmp	r3, #32
 8009fac:	f040 80fd 	bne.w	800a1aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <HAL_I2C_Mem_Read+0x34>
 8009fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d105      	bne.n	8009fc8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e0f1      	b.n	800a1ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <HAL_I2C_Mem_Read+0x4e>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e0ea      	b.n	800a1ac <HAL_I2C_Mem_Read+0x224>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009fde:	f7fe f87b 	bl	80080d8 <HAL_GetTick>
 8009fe2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	2319      	movs	r3, #25
 8009fea:	2201      	movs	r2, #1
 8009fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 fa63 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e0d5      	b.n	800a1ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2222      	movs	r2, #34	; 0x22
 800a004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2240      	movs	r2, #64	; 0x40
 800a00c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6a3a      	ldr	r2, [r7, #32]
 800a01a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a028:	88f8      	ldrh	r0, [r7, #6]
 800a02a:	893a      	ldrh	r2, [r7, #8]
 800a02c:	8979      	ldrh	r1, [r7, #10]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	4603      	mov	r3, r0
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 f9c7 	bl	800a3cc <I2C_RequestMemoryRead>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d005      	beq.n	800a050 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e0ad      	b.n	800a1ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a054:	b29b      	uxth	r3, r3
 800a056:	2bff      	cmp	r3, #255	; 0xff
 800a058:	d90e      	bls.n	800a078 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	22ff      	movs	r2, #255	; 0xff
 800a05e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a064:	b2da      	uxtb	r2, r3
 800a066:	8979      	ldrh	r1, [r7, #10]
 800a068:	4b52      	ldr	r3, [pc, #328]	; (800a1b4 <HAL_I2C_Mem_Read+0x22c>)
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 fbb1 	bl	800a7d8 <I2C_TransferConfig>
 800a076:	e00f      	b.n	800a098 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a086:	b2da      	uxtb	r2, r3
 800a088:	8979      	ldrh	r1, [r7, #10]
 800a08a:	4b4a      	ldr	r3, [pc, #296]	; (800a1b4 <HAL_I2C_Mem_Read+0x22c>)
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f000 fba0 	bl	800a7d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2104      	movs	r1, #4
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 fa0a 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e07c      	b.n	800a1ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	b2d2      	uxtb	r2, r2
 800a0be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d034      	beq.n	800a158 <HAL_I2C_Mem_Read+0x1d0>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d130      	bne.n	800a158 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2180      	movs	r1, #128	; 0x80
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f9db 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e04d      	b.n	800a1ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a114:	b29b      	uxth	r3, r3
 800a116:	2bff      	cmp	r3, #255	; 0xff
 800a118:	d90e      	bls.n	800a138 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	22ff      	movs	r2, #255	; 0xff
 800a11e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a124:	b2da      	uxtb	r2, r3
 800a126:	8979      	ldrh	r1, [r7, #10]
 800a128:	2300      	movs	r3, #0
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 fb51 	bl	800a7d8 <I2C_TransferConfig>
 800a136:	e00f      	b.n	800a158 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a146:	b2da      	uxtb	r2, r3
 800a148:	8979      	ldrh	r1, [r7, #10]
 800a14a:	2300      	movs	r3, #0
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 fb40 	bl	800a7d8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d19a      	bne.n	800a098 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 fa28 	bl	800a5bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e01a      	b.n	800a1ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2220      	movs	r2, #32
 800a17c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6859      	ldr	r1, [r3, #4]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	4b0b      	ldr	r3, [pc, #44]	; (800a1b8 <HAL_I2C_Mem_Read+0x230>)
 800a18a:	400b      	ands	r3, r1
 800a18c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2220      	movs	r2, #32
 800a192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e000      	b.n	800a1ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a1aa:	2302      	movs	r3, #2
  }
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3718      	adds	r7, #24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	80002400 	.word	0x80002400
 800a1b8:	fe00e800 	.word	0xfe00e800

0800a1bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	; 0x28
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b20      	cmp	r3, #32
 800a1da:	f040 80ef 	bne.w	800a3bc <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ec:	d101      	bne.n	800a1f2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	e0e5      	b.n	800a3be <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_I2C_IsDeviceReady+0x44>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e0de      	b.n	800a3be <HAL_I2C_IsDeviceReady+0x202>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2224      	movs	r2, #36	; 0x24
 800a20c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d105      	bne.n	800a22a <HAL_I2C_IsDeviceReady+0x6e>
 800a21e:	897b      	ldrh	r3, [r7, #10]
 800a220:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a224:	4b68      	ldr	r3, [pc, #416]	; (800a3c8 <HAL_I2C_IsDeviceReady+0x20c>)
 800a226:	4313      	orrs	r3, r2
 800a228:	e004      	b.n	800a234 <HAL_I2C_IsDeviceReady+0x78>
 800a22a:	897b      	ldrh	r3, [r7, #10]
 800a22c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a230:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800a23a:	f7fd ff4d 	bl	80080d8 <HAL_GetTick>
 800a23e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	2b20      	cmp	r3, #32
 800a24c:	bf0c      	ite	eq
 800a24e:	2301      	moveq	r3, #1
 800a250:	2300      	movne	r3, #0
 800a252:	b2db      	uxtb	r3, r3
 800a254:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	f003 0310 	and.w	r3, r3, #16
 800a260:	2b10      	cmp	r3, #16
 800a262:	bf0c      	ite	eq
 800a264:	2301      	moveq	r3, #1
 800a266:	2300      	movne	r3, #0
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a26c:	e034      	b.n	800a2d8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a274:	d01a      	beq.n	800a2ac <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a276:	f7fd ff2f 	bl	80080d8 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d302      	bcc.n	800a28c <HAL_I2C_IsDeviceReady+0xd0>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10f      	bne.n	800a2ac <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2220      	movs	r2, #32
 800a290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a298:	f043 0220 	orr.w	r2, r3, #32
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e088      	b.n	800a3be <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	bf0c      	ite	eq
 800a2ba:	2301      	moveq	r3, #1
 800a2bc:	2300      	movne	r3, #0
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	f003 0310 	and.w	r3, r3, #16
 800a2cc:	2b10      	cmp	r3, #16
 800a2ce:	bf0c      	ite	eq
 800a2d0:	2301      	moveq	r3, #1
 800a2d2:	2300      	movne	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a2d8:	7ffb      	ldrb	r3, [r7, #31]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d102      	bne.n	800a2e4 <HAL_I2C_IsDeviceReady+0x128>
 800a2de:	7fbb      	ldrb	r3, [r7, #30]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0c4      	beq.n	800a26e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	f003 0310 	and.w	r3, r3, #16
 800a2ee:	2b10      	cmp	r3, #16
 800a2f0:	d01a      	beq.n	800a328 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2120      	movs	r1, #32
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f8dd 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e058      	b.n	800a3be <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2220      	movs	r2, #32
 800a312:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2220      	movs	r2, #32
 800a318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	e04a      	b.n	800a3be <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2200      	movs	r2, #0
 800a330:	2120      	movs	r1, #32
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 f8c2 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e03d      	b.n	800a3be <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2210      	movs	r2, #16
 800a348:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2220      	movs	r2, #32
 800a350:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d118      	bne.n	800a38c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a368:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2200      	movs	r2, #0
 800a372:	2120      	movs	r1, #32
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 f8a1 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e01c      	b.n	800a3be <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2220      	movs	r2, #32
 800a38a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	3301      	adds	r3, #1
 800a390:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	429a      	cmp	r2, r3
 800a398:	f63f af3d 	bhi.w	800a216 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2220      	movs	r2, #32
 800a3a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a8:	f043 0220 	orr.w	r2, r3, #32
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e000      	b.n	800a3be <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800a3bc:	2302      	movs	r3, #2
  }
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3720      	adds	r7, #32
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	02002000 	.word	0x02002000

0800a3cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af02      	add	r7, sp, #8
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	4608      	mov	r0, r1
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4603      	mov	r3, r0
 800a3dc:	817b      	strh	r3, [r7, #10]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	813b      	strh	r3, [r7, #8]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	8979      	ldrh	r1, [r7, #10]
 800a3ec:	4b20      	ldr	r3, [pc, #128]	; (800a470 <I2C_RequestMemoryRead+0xa4>)
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f9f0 	bl	800a7d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3f8:	69fa      	ldr	r2, [r7, #28]
 800a3fa:	69b9      	ldr	r1, [r7, #24]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 f89d 	bl	800a53c <I2C_WaitOnTXISFlagUntilTimeout>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e02c      	b.n	800a466 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a40c:	88fb      	ldrh	r3, [r7, #6]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d105      	bne.n	800a41e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a412:	893b      	ldrh	r3, [r7, #8]
 800a414:	b2da      	uxtb	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	629a      	str	r2, [r3, #40]	; 0x28
 800a41c:	e015      	b.n	800a44a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a41e:	893b      	ldrh	r3, [r7, #8]
 800a420:	0a1b      	lsrs	r3, r3, #8
 800a422:	b29b      	uxth	r3, r3
 800a424:	b2da      	uxtb	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	69b9      	ldr	r1, [r7, #24]
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f883 	bl	800a53c <I2C_WaitOnTXISFlagUntilTimeout>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e012      	b.n	800a466 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a440:	893b      	ldrh	r3, [r7, #8]
 800a442:	b2da      	uxtb	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	2200      	movs	r2, #0
 800a452:	2140      	movs	r1, #64	; 0x40
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f000 f831 	bl	800a4bc <I2C_WaitOnFlagUntilTimeout>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e000      	b.n	800a466 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	80002000 	.word	0x80002000

0800a474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b02      	cmp	r3, #2
 800a488:	d103      	bne.n	800a492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2200      	movs	r2, #0
 800a490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d007      	beq.n	800a4b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f042 0201 	orr.w	r2, r2, #1
 800a4ae:	619a      	str	r2, [r3, #24]
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	603b      	str	r3, [r7, #0]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4cc:	e022      	b.n	800a514 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d4:	d01e      	beq.n	800a514 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d6:	f7fd fdff 	bl	80080d8 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d302      	bcc.n	800a4ec <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d113      	bne.n	800a514 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f0:	f043 0220 	orr.w	r2, r3, #32
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e00f      	b.n	800a534 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	699a      	ldr	r2, [r3, #24]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	4013      	ands	r3, r2
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	429a      	cmp	r2, r3
 800a522:	bf0c      	ite	eq
 800a524:	2301      	moveq	r3, #1
 800a526:	2300      	movne	r3, #0
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	461a      	mov	r2, r3
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d0cd      	beq.n	800a4ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a548:	e02c      	b.n	800a5a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	68b9      	ldr	r1, [r7, #8]
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 f8dc 	bl	800a70c <I2C_IsAcknowledgeFailed>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e02a      	b.n	800a5b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a564:	d01e      	beq.n	800a5a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a566:	f7fd fdb7 	bl	80080d8 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	429a      	cmp	r2, r3
 800a574:	d302      	bcc.n	800a57c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d113      	bne.n	800a5a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a580:	f043 0220 	orr.w	r2, r3, #32
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e007      	b.n	800a5b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	f003 0302 	and.w	r3, r3, #2
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d1cb      	bne.n	800a54a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5c8:	e028      	b.n	800a61c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 f89c 	bl	800a70c <I2C_IsAcknowledgeFailed>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e026      	b.n	800a62c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5de:	f7fd fd7b 	bl	80080d8 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d302      	bcc.n	800a5f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d113      	bne.n	800a61c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f8:	f043 0220 	orr.w	r2, r3, #32
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2220      	movs	r2, #32
 800a604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e007      	b.n	800a62c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	f003 0320 	and.w	r3, r3, #32
 800a626:	2b20      	cmp	r3, #32
 800a628:	d1cf      	bne.n	800a5ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a640:	e055      	b.n	800a6ee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	68b9      	ldr	r1, [r7, #8]
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 f860 	bl	800a70c <I2C_IsAcknowledgeFailed>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e053      	b.n	800a6fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b20      	cmp	r3, #32
 800a662:	d129      	bne.n	800a6b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d105      	bne.n	800a67e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e03f      	b.n	800a6fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2220      	movs	r2, #32
 800a684:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6859      	ldr	r1, [r3, #4]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	4b1d      	ldr	r3, [pc, #116]	; (800a708 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a692:	400b      	ands	r3, r1
 800a694:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e022      	b.n	800a6fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6b8:	f7fd fd0e 	bl	80080d8 <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d302      	bcc.n	800a6ce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10f      	bne.n	800a6ee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d2:	f043 0220 	orr.w	r2, r3, #32
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e007      	b.n	800a6fe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d1a2      	bne.n	800a642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	fe00e800 	.word	0xfe00e800

0800a70c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	f003 0310 	and.w	r3, r3, #16
 800a722:	2b10      	cmp	r3, #16
 800a724:	d151      	bne.n	800a7ca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a726:	e022      	b.n	800a76e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d01e      	beq.n	800a76e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a730:	f7fd fcd2 	bl	80080d8 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d302      	bcc.n	800a746 <I2C_IsAcknowledgeFailed+0x3a>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d113      	bne.n	800a76e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a74a:	f043 0220 	orr.w	r2, r3, #32
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2220      	movs	r2, #32
 800a756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e02e      	b.n	800a7cc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	f003 0320 	and.w	r3, r3, #32
 800a778:	2b20      	cmp	r3, #32
 800a77a:	d1d5      	bne.n	800a728 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2210      	movs	r2, #16
 800a782:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2220      	movs	r2, #32
 800a78a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff fe71 	bl	800a474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6859      	ldr	r1, [r3, #4]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	4b0d      	ldr	r3, [pc, #52]	; (800a7d4 <I2C_IsAcknowledgeFailed+0xc8>)
 800a79e:	400b      	ands	r3, r1
 800a7a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a6:	f043 0204 	orr.w	r2, r3, #4
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	fe00e800 	.word	0xfe00e800

0800a7d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	817b      	strh	r3, [r7, #10]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	0d5b      	lsrs	r3, r3, #21
 800a7f4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a7f8:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <I2C_TransferConfig+0x58>)
 800a7fa:	430b      	orrs	r3, r1
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	ea02 0103 	and.w	r1, r2, r3
 800a802:	897b      	ldrh	r3, [r7, #10]
 800a804:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a808:	7a7b      	ldrb	r3, [r7, #9]
 800a80a:	041b      	lsls	r3, r3, #16
 800a80c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a810:	431a      	orrs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	431a      	orrs	r2, r3
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	431a      	orrs	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	430a      	orrs	r2, r1
 800a820:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a822:	bf00      	nop
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	03ff63ff 	.word	0x03ff63ff

0800a834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b20      	cmp	r3, #32
 800a848:	d138      	bne.n	800a8bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a854:	2302      	movs	r3, #2
 800a856:	e032      	b.n	800a8be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2224      	movs	r2, #36	; 0x24
 800a864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f022 0201 	bic.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6819      	ldr	r1, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	430a      	orrs	r2, r1
 800a896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f042 0201 	orr.w	r2, r2, #1
 800a8a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e000      	b.n	800a8be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a8bc:	2302      	movs	r3, #2
  }
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b20      	cmp	r3, #32
 800a8de:	d139      	bne.n	800a954 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e033      	b.n	800a956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2224      	movs	r2, #36	; 0x24
 800a8fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f022 0201 	bic.w	r2, r2, #1
 800a90c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a91c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	021b      	lsls	r3, r3, #8
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	4313      	orrs	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f042 0201 	orr.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2220      	movs	r2, #32
 800a944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	e000      	b.n	800a956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a954:	2302      	movs	r3, #2
  }
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
	...

0800a964 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a96c:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a970:	4a0a      	ldr	r2, [pc, #40]	; (800a99c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a976:	6453      	str	r3, [r2, #68]	; 0x44
 800a978:	4b08      	ldr	r3, [pc, #32]	; (800a99c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800a984:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	4905      	ldr	r1, [pc, #20]	; (800a9a0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	604b      	str	r3, [r1, #4]
}
 800a990:	bf00      	nop
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	40023800 	.word	0x40023800
 800a9a0:	40013800 	.word	0x40013800

0800a9a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a6:	b08f      	sub	sp, #60	; 0x3c
 800a9a8:	af0a      	add	r7, sp, #40	; 0x28
 800a9aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e116      	b.n	800abe4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7fc fe23 	bl	800761c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2203      	movs	r2, #3
 800a9da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d102      	bne.n	800a9f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f003 fc0d 	bl	800e214 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	687e      	ldr	r6, [r7, #4]
 800aa02:	466d      	mov	r5, sp
 800aa04:	f106 0410 	add.w	r4, r6, #16
 800aa08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa10:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa14:	e885 0003 	stmia.w	r5, {r0, r1}
 800aa18:	1d33      	adds	r3, r6, #4
 800aa1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa1c:	6838      	ldr	r0, [r7, #0]
 800aa1e:	f003 fba1 	bl	800e164 <USB_CoreInit>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d005      	beq.n	800aa34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e0d7      	b.n	800abe4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f003 fbfb 	bl	800e236 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
 800aa44:	e04a      	b.n	800aadc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800aa46:	7bfa      	ldrb	r2, [r7, #15]
 800aa48:	6879      	ldr	r1, [r7, #4]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	1a9b      	subs	r3, r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	440b      	add	r3, r1
 800aa54:	333d      	adds	r3, #61	; 0x3d
 800aa56:	2201      	movs	r2, #1
 800aa58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aa5a:	7bfa      	ldrb	r2, [r7, #15]
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	440b      	add	r3, r1
 800aa68:	333c      	adds	r3, #60	; 0x3c
 800aa6a:	7bfa      	ldrb	r2, [r7, #15]
 800aa6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aa6e:	7bfa      	ldrb	r2, [r7, #15]
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	b298      	uxth	r0, r3
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	4613      	mov	r3, r2
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	440b      	add	r3, r1
 800aa80:	3342      	adds	r3, #66	; 0x42
 800aa82:	4602      	mov	r2, r0
 800aa84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa86:	7bfa      	ldrb	r2, [r7, #15]
 800aa88:	6879      	ldr	r1, [r7, #4]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	1a9b      	subs	r3, r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	440b      	add	r3, r1
 800aa94:	333f      	adds	r3, #63	; 0x3f
 800aa96:	2200      	movs	r2, #0
 800aa98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aa9a:	7bfa      	ldrb	r2, [r7, #15]
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	00db      	lsls	r3, r3, #3
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	440b      	add	r3, r1
 800aaa8:	3344      	adds	r3, #68	; 0x44
 800aaaa:	2200      	movs	r2, #0
 800aaac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aaae:	7bfa      	ldrb	r2, [r7, #15]
 800aab0:	6879      	ldr	r1, [r7, #4]
 800aab2:	4613      	mov	r3, r2
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	440b      	add	r3, r1
 800aabc:	3348      	adds	r3, #72	; 0x48
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aac2:	7bfa      	ldrb	r2, [r7, #15]
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	00db      	lsls	r3, r3, #3
 800aaca:	1a9b      	subs	r3, r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	440b      	add	r3, r1
 800aad0:	3350      	adds	r3, #80	; 0x50
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	3301      	adds	r3, #1
 800aada:	73fb      	strb	r3, [r7, #15]
 800aadc:	7bfa      	ldrb	r2, [r7, #15]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d3af      	bcc.n	800aa46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
 800aaea:	e044      	b.n	800ab76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aaec:	7bfa      	ldrb	r2, [r7, #15]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	1a9b      	subs	r3, r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800aafe:	2200      	movs	r2, #0
 800ab00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ab02:	7bfa      	ldrb	r2, [r7, #15]
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	4613      	mov	r3, r2
 800ab08:	00db      	lsls	r3, r3, #3
 800ab0a:	1a9b      	subs	r3, r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	440b      	add	r3, r1
 800ab10:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ab14:	7bfa      	ldrb	r2, [r7, #15]
 800ab16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ab18:	7bfa      	ldrb	r2, [r7, #15]
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	1a9b      	subs	r3, r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	440b      	add	r3, r1
 800ab26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ab2e:	7bfa      	ldrb	r2, [r7, #15]
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4613      	mov	r3, r2
 800ab34:	00db      	lsls	r3, r3, #3
 800ab36:	1a9b      	subs	r3, r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	440b      	add	r3, r1
 800ab3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ab40:	2200      	movs	r2, #0
 800ab42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ab44:	7bfa      	ldrb	r2, [r7, #15]
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	1a9b      	subs	r3, r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	440b      	add	r3, r1
 800ab52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ab5a:	7bfa      	ldrb	r2, [r7, #15]
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	00db      	lsls	r3, r3, #3
 800ab62:	1a9b      	subs	r3, r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	440b      	add	r3, r1
 800ab68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	3301      	adds	r3, #1
 800ab74:	73fb      	strb	r3, [r7, #15]
 800ab76:	7bfa      	ldrb	r2, [r7, #15]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d3b5      	bcc.n	800aaec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	603b      	str	r3, [r7, #0]
 800ab86:	687e      	ldr	r6, [r7, #4]
 800ab88:	466d      	mov	r5, sp
 800ab8a:	f106 0410 	add.w	r4, r6, #16
 800ab8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab96:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab9a:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab9e:	1d33      	adds	r3, r6, #4
 800aba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aba2:	6838      	ldr	r0, [r7, #0]
 800aba4:	f003 fb72 	bl	800e28c <USB_DevInit>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d005      	beq.n	800abba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2202      	movs	r2, #2
 800abb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e014      	b.n	800abe4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d102      	bne.n	800abd8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f80a 	bl	800abec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	f003 fd24 	bl	800e62a <USB_DevDisconnect>

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac1a:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <HAL_PCDEx_ActivateLPM+0x44>)
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	10000003 	.word	0x10000003

0800ac34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac38:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ac3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac42:	6013      	str	r3, [r2, #0]
}
 800ac44:	bf00      	nop
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	40007000 	.word	0x40007000

0800ac54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e29b      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 8087 	beq.w	800ad86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac78:	4b96      	ldr	r3, [pc, #600]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	f003 030c 	and.w	r3, r3, #12
 800ac80:	2b04      	cmp	r3, #4
 800ac82:	d00c      	beq.n	800ac9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac84:	4b93      	ldr	r3, [pc, #588]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f003 030c 	and.w	r3, r3, #12
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d112      	bne.n	800acb6 <HAL_RCC_OscConfig+0x62>
 800ac90:	4b90      	ldr	r3, [pc, #576]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac9c:	d10b      	bne.n	800acb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac9e:	4b8d      	ldr	r3, [pc, #564]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d06c      	beq.n	800ad84 <HAL_RCC_OscConfig+0x130>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d168      	bne.n	800ad84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e275      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acbe:	d106      	bne.n	800acce <HAL_RCC_OscConfig+0x7a>
 800acc0:	4b84      	ldr	r3, [pc, #528]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a83      	ldr	r2, [pc, #524]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800acc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	e02e      	b.n	800ad2c <HAL_RCC_OscConfig+0xd8>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10c      	bne.n	800acf0 <HAL_RCC_OscConfig+0x9c>
 800acd6:	4b7f      	ldr	r3, [pc, #508]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a7e      	ldr	r2, [pc, #504]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800acdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	4b7c      	ldr	r3, [pc, #496]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a7b      	ldr	r2, [pc, #492]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ace8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	e01d      	b.n	800ad2c <HAL_RCC_OscConfig+0xd8>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acf8:	d10c      	bne.n	800ad14 <HAL_RCC_OscConfig+0xc0>
 800acfa:	4b76      	ldr	r3, [pc, #472]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a75      	ldr	r2, [pc, #468]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad04:	6013      	str	r3, [r2, #0]
 800ad06:	4b73      	ldr	r3, [pc, #460]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a72      	ldr	r2, [pc, #456]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	e00b      	b.n	800ad2c <HAL_RCC_OscConfig+0xd8>
 800ad14:	4b6f      	ldr	r3, [pc, #444]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a6e      	ldr	r2, [pc, #440]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	4b6c      	ldr	r3, [pc, #432]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a6b      	ldr	r2, [pc, #428]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d013      	beq.n	800ad5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad34:	f7fd f9d0 	bl	80080d8 <HAL_GetTick>
 800ad38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad3a:	e008      	b.n	800ad4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad3c:	f7fd f9cc 	bl	80080d8 <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	2b64      	cmp	r3, #100	; 0x64
 800ad48:	d901      	bls.n	800ad4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e229      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad4e:	4b61      	ldr	r3, [pc, #388]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0f0      	beq.n	800ad3c <HAL_RCC_OscConfig+0xe8>
 800ad5a:	e014      	b.n	800ad86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad5c:	f7fd f9bc 	bl	80080d8 <HAL_GetTick>
 800ad60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad62:	e008      	b.n	800ad76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad64:	f7fd f9b8 	bl	80080d8 <HAL_GetTick>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	2b64      	cmp	r3, #100	; 0x64
 800ad70:	d901      	bls.n	800ad76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ad72:	2303      	movs	r3, #3
 800ad74:	e215      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad76:	4b57      	ldr	r3, [pc, #348]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1f0      	bne.n	800ad64 <HAL_RCC_OscConfig+0x110>
 800ad82:	e000      	b.n	800ad86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d069      	beq.n	800ae66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad92:	4b50      	ldr	r3, [pc, #320]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f003 030c 	and.w	r3, r3, #12
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00b      	beq.n	800adb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad9e:	4b4d      	ldr	r3, [pc, #308]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f003 030c 	and.w	r3, r3, #12
 800ada6:	2b08      	cmp	r3, #8
 800ada8:	d11c      	bne.n	800ade4 <HAL_RCC_OscConfig+0x190>
 800adaa:	4b4a      	ldr	r3, [pc, #296]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d116      	bne.n	800ade4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adb6:	4b47      	ldr	r3, [pc, #284]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 0302 	and.w	r3, r3, #2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d005      	beq.n	800adce <HAL_RCC_OscConfig+0x17a>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d001      	beq.n	800adce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e1e9      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adce:	4b41      	ldr	r3, [pc, #260]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	493d      	ldr	r1, [pc, #244]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ade2:	e040      	b.n	800ae66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d023      	beq.n	800ae34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adec:	4b39      	ldr	r3, [pc, #228]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a38      	ldr	r2, [pc, #224]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800adf2:	f043 0301 	orr.w	r3, r3, #1
 800adf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adf8:	f7fd f96e 	bl	80080d8 <HAL_GetTick>
 800adfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adfe:	e008      	b.n	800ae12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae00:	f7fd f96a 	bl	80080d8 <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d901      	bls.n	800ae12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e1c7      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae12:	4b30      	ldr	r3, [pc, #192]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 0302 	and.w	r3, r3, #2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0f0      	beq.n	800ae00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae1e:	4b2d      	ldr	r3, [pc, #180]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	4929      	ldr	r1, [pc, #164]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	600b      	str	r3, [r1, #0]
 800ae32:	e018      	b.n	800ae66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae34:	4b27      	ldr	r3, [pc, #156]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a26      	ldr	r2, [pc, #152]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ae3a:	f023 0301 	bic.w	r3, r3, #1
 800ae3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae40:	f7fd f94a 	bl	80080d8 <HAL_GetTick>
 800ae44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae46:	e008      	b.n	800ae5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae48:	f7fd f946 	bl	80080d8 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d901      	bls.n	800ae5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ae56:	2303      	movs	r3, #3
 800ae58:	e1a3      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae5a:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0302 	and.w	r3, r3, #2
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1f0      	bne.n	800ae48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0308 	and.w	r3, r3, #8
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d038      	beq.n	800aee4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d019      	beq.n	800aeae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae7a:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ae7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae7e:	4a15      	ldr	r2, [pc, #84]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800ae80:	f043 0301 	orr.w	r3, r3, #1
 800ae84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae86:	f7fd f927 	bl	80080d8 <HAL_GetTick>
 800ae8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae8c:	e008      	b.n	800aea0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae8e:	f7fd f923 	bl	80080d8 <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d901      	bls.n	800aea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e180      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aea0:	4b0c      	ldr	r3, [pc, #48]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800aea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aea4:	f003 0302 	and.w	r3, r3, #2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d0f0      	beq.n	800ae8e <HAL_RCC_OscConfig+0x23a>
 800aeac:	e01a      	b.n	800aee4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800aeb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeb2:	4a08      	ldr	r2, [pc, #32]	; (800aed4 <HAL_RCC_OscConfig+0x280>)
 800aeb4:	f023 0301 	bic.w	r3, r3, #1
 800aeb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeba:	f7fd f90d 	bl	80080d8 <HAL_GetTick>
 800aebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aec0:	e00a      	b.n	800aed8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aec2:	f7fd f909 	bl	80080d8 <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d903      	bls.n	800aed8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e166      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
 800aed4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aed8:	4b92      	ldr	r3, [pc, #584]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800aeda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1ee      	bne.n	800aec2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 80a4 	beq.w	800b03a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aef2:	4b8c      	ldr	r3, [pc, #560]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800aef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10d      	bne.n	800af1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800aefe:	4b89      	ldr	r3, [pc, #548]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af02:	4a88      	ldr	r2, [pc, #544]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af08:	6413      	str	r3, [r2, #64]	; 0x40
 800af0a:	4b86      	ldr	r3, [pc, #536]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af12:	60bb      	str	r3, [r7, #8]
 800af14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af16:	2301      	movs	r3, #1
 800af18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af1a:	4b83      	ldr	r3, [pc, #524]	; (800b128 <HAL_RCC_OscConfig+0x4d4>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af22:	2b00      	cmp	r3, #0
 800af24:	d118      	bne.n	800af58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800af26:	4b80      	ldr	r3, [pc, #512]	; (800b128 <HAL_RCC_OscConfig+0x4d4>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a7f      	ldr	r2, [pc, #508]	; (800b128 <HAL_RCC_OscConfig+0x4d4>)
 800af2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af32:	f7fd f8d1 	bl	80080d8 <HAL_GetTick>
 800af36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af38:	e008      	b.n	800af4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af3a:	f7fd f8cd 	bl	80080d8 <HAL_GetTick>
 800af3e:	4602      	mov	r2, r0
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	2b64      	cmp	r3, #100	; 0x64
 800af46:	d901      	bls.n	800af4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800af48:	2303      	movs	r3, #3
 800af4a:	e12a      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af4c:	4b76      	ldr	r3, [pc, #472]	; (800b128 <HAL_RCC_OscConfig+0x4d4>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0f0      	beq.n	800af3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d106      	bne.n	800af6e <HAL_RCC_OscConfig+0x31a>
 800af60:	4b70      	ldr	r3, [pc, #448]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af64:	4a6f      	ldr	r2, [pc, #444]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af66:	f043 0301 	orr.w	r3, r3, #1
 800af6a:	6713      	str	r3, [r2, #112]	; 0x70
 800af6c:	e02d      	b.n	800afca <HAL_RCC_OscConfig+0x376>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10c      	bne.n	800af90 <HAL_RCC_OscConfig+0x33c>
 800af76:	4b6b      	ldr	r3, [pc, #428]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7a:	4a6a      	ldr	r2, [pc, #424]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af7c:	f023 0301 	bic.w	r3, r3, #1
 800af80:	6713      	str	r3, [r2, #112]	; 0x70
 800af82:	4b68      	ldr	r3, [pc, #416]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af86:	4a67      	ldr	r2, [pc, #412]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af88:	f023 0304 	bic.w	r3, r3, #4
 800af8c:	6713      	str	r3, [r2, #112]	; 0x70
 800af8e:	e01c      	b.n	800afca <HAL_RCC_OscConfig+0x376>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b05      	cmp	r3, #5
 800af96:	d10c      	bne.n	800afb2 <HAL_RCC_OscConfig+0x35e>
 800af98:	4b62      	ldr	r3, [pc, #392]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9c:	4a61      	ldr	r2, [pc, #388]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800af9e:	f043 0304 	orr.w	r3, r3, #4
 800afa2:	6713      	str	r3, [r2, #112]	; 0x70
 800afa4:	4b5f      	ldr	r3, [pc, #380]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800afa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa8:	4a5e      	ldr	r2, [pc, #376]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800afaa:	f043 0301 	orr.w	r3, r3, #1
 800afae:	6713      	str	r3, [r2, #112]	; 0x70
 800afb0:	e00b      	b.n	800afca <HAL_RCC_OscConfig+0x376>
 800afb2:	4b5c      	ldr	r3, [pc, #368]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800afb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb6:	4a5b      	ldr	r2, [pc, #364]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800afb8:	f023 0301 	bic.w	r3, r3, #1
 800afbc:	6713      	str	r3, [r2, #112]	; 0x70
 800afbe:	4b59      	ldr	r3, [pc, #356]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800afc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc2:	4a58      	ldr	r2, [pc, #352]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800afc4:	f023 0304 	bic.w	r3, r3, #4
 800afc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d015      	beq.n	800affe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afd2:	f7fd f881 	bl	80080d8 <HAL_GetTick>
 800afd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd8:	e00a      	b.n	800aff0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afda:	f7fd f87d 	bl	80080d8 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe8:	4293      	cmp	r3, r2
 800afea:	d901      	bls.n	800aff0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e0d8      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aff0:	4b4c      	ldr	r3, [pc, #304]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800aff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0ee      	beq.n	800afda <HAL_RCC_OscConfig+0x386>
 800affc:	e014      	b.n	800b028 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800affe:	f7fd f86b 	bl	80080d8 <HAL_GetTick>
 800b002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b004:	e00a      	b.n	800b01c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b006:	f7fd f867 	bl	80080d8 <HAL_GetTick>
 800b00a:	4602      	mov	r2, r0
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	f241 3288 	movw	r2, #5000	; 0x1388
 800b014:	4293      	cmp	r3, r2
 800b016:	d901      	bls.n	800b01c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e0c2      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b01c:	4b41      	ldr	r3, [pc, #260]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1ee      	bne.n	800b006 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d105      	bne.n	800b03a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b02e:	4b3d      	ldr	r3, [pc, #244]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	4a3c      	ldr	r2, [pc, #240]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b038:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 80ae 	beq.w	800b1a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b044:	4b37      	ldr	r3, [pc, #220]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f003 030c 	and.w	r3, r3, #12
 800b04c:	2b08      	cmp	r3, #8
 800b04e:	d06d      	beq.n	800b12c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d14b      	bne.n	800b0f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b058:	4b32      	ldr	r3, [pc, #200]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a31      	ldr	r2, [pc, #196]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b05e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b064:	f7fd f838 	bl	80080d8 <HAL_GetTick>
 800b068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b06a:	e008      	b.n	800b07e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b06c:	f7fd f834 	bl	80080d8 <HAL_GetTick>
 800b070:	4602      	mov	r2, r0
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	2b02      	cmp	r3, #2
 800b078:	d901      	bls.n	800b07e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e091      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b07e:	4b29      	ldr	r3, [pc, #164]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1f0      	bne.n	800b06c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	69da      	ldr	r2, [r3, #28]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	431a      	orrs	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	019b      	lsls	r3, r3, #6
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a0:	085b      	lsrs	r3, r3, #1
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	041b      	lsls	r3, r3, #16
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ac:	061b      	lsls	r3, r3, #24
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b4:	071b      	lsls	r3, r3, #28
 800b0b6:	491b      	ldr	r1, [pc, #108]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0bc:	4b19      	ldr	r3, [pc, #100]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a18      	ldr	r2, [pc, #96]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b0c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c8:	f7fd f806 	bl	80080d8 <HAL_GetTick>
 800b0cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0d0:	f7fd f802 	bl	80080d8 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e05f      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0e2:	4b10      	ldr	r3, [pc, #64]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0f0      	beq.n	800b0d0 <HAL_RCC_OscConfig+0x47c>
 800b0ee:	e057      	b.n	800b1a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0f0:	4b0c      	ldr	r3, [pc, #48]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a0b      	ldr	r2, [pc, #44]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b0f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0fc:	f7fc ffec 	bl	80080d8 <HAL_GetTick>
 800b100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b102:	e008      	b.n	800b116 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b104:	f7fc ffe8 	bl	80080d8 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d901      	bls.n	800b116 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800b112:	2303      	movs	r3, #3
 800b114:	e045      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b116:	4b03      	ldr	r3, [pc, #12]	; (800b124 <HAL_RCC_OscConfig+0x4d0>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1f0      	bne.n	800b104 <HAL_RCC_OscConfig+0x4b0>
 800b122:	e03d      	b.n	800b1a0 <HAL_RCC_OscConfig+0x54c>
 800b124:	40023800 	.word	0x40023800
 800b128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b12c:	4b1f      	ldr	r3, [pc, #124]	; (800b1ac <HAL_RCC_OscConfig+0x558>)
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d030      	beq.n	800b19c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b144:	429a      	cmp	r2, r3
 800b146:	d129      	bne.n	800b19c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b152:	429a      	cmp	r2, r3
 800b154:	d122      	bne.n	800b19c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b15c:	4013      	ands	r3, r2
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b162:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b164:	4293      	cmp	r3, r2
 800b166:	d119      	bne.n	800b19c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b172:	085b      	lsrs	r3, r3, #1
 800b174:	3b01      	subs	r3, #1
 800b176:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b178:	429a      	cmp	r2, r3
 800b17a:	d10f      	bne.n	800b19c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b186:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b188:	429a      	cmp	r2, r3
 800b18a:	d107      	bne.n	800b19c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b196:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b198:	429a      	cmp	r2, r3
 800b19a:	d001      	beq.n	800b1a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e000      	b.n	800b1a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40023800 	.word	0x40023800

0800b1b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e0d0      	b.n	800b36a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1c8:	4b6a      	ldr	r3, [pc, #424]	; (800b374 <HAL_RCC_ClockConfig+0x1c4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 030f 	and.w	r3, r3, #15
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d910      	bls.n	800b1f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1d6:	4b67      	ldr	r3, [pc, #412]	; (800b374 <HAL_RCC_ClockConfig+0x1c4>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f023 020f 	bic.w	r2, r3, #15
 800b1de:	4965      	ldr	r1, [pc, #404]	; (800b374 <HAL_RCC_ClockConfig+0x1c4>)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1e6:	4b63      	ldr	r3, [pc, #396]	; (800b374 <HAL_RCC_ClockConfig+0x1c4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 030f 	and.w	r3, r3, #15
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d001      	beq.n	800b1f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e0b8      	b.n	800b36a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d020      	beq.n	800b246 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b210:	4b59      	ldr	r3, [pc, #356]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	4a58      	ldr	r2, [pc, #352]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b21a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 0308 	and.w	r3, r3, #8
 800b224:	2b00      	cmp	r3, #0
 800b226:	d005      	beq.n	800b234 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b228:	4b53      	ldr	r3, [pc, #332]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	4a52      	ldr	r2, [pc, #328]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b22e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b232:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b234:	4b50      	ldr	r3, [pc, #320]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	494d      	ldr	r1, [pc, #308]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b242:	4313      	orrs	r3, r2
 800b244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 0301 	and.w	r3, r3, #1
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d040      	beq.n	800b2d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d107      	bne.n	800b26a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b25a:	4b47      	ldr	r3, [pc, #284]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d115      	bne.n	800b292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e07f      	b.n	800b36a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d107      	bne.n	800b282 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b272:	4b41      	ldr	r3, [pc, #260]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d109      	bne.n	800b292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e073      	b.n	800b36a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b282:	4b3d      	ldr	r3, [pc, #244]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0302 	and.w	r3, r3, #2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	e06b      	b.n	800b36a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b292:	4b39      	ldr	r3, [pc, #228]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f023 0203 	bic.w	r2, r3, #3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	4936      	ldr	r1, [pc, #216]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2a4:	f7fc ff18 	bl	80080d8 <HAL_GetTick>
 800b2a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2aa:	e00a      	b.n	800b2c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2ac:	f7fc ff14 	bl	80080d8 <HAL_GetTick>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d901      	bls.n	800b2c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e053      	b.n	800b36a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2c2:	4b2d      	ldr	r3, [pc, #180]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f003 020c 	and.w	r2, r3, #12
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d1eb      	bne.n	800b2ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2d4:	4b27      	ldr	r3, [pc, #156]	; (800b374 <HAL_RCC_ClockConfig+0x1c4>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 030f 	and.w	r3, r3, #15
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d210      	bcs.n	800b304 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2e2:	4b24      	ldr	r3, [pc, #144]	; (800b374 <HAL_RCC_ClockConfig+0x1c4>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f023 020f 	bic.w	r2, r3, #15
 800b2ea:	4922      	ldr	r1, [pc, #136]	; (800b374 <HAL_RCC_ClockConfig+0x1c4>)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2f2:	4b20      	ldr	r3, [pc, #128]	; (800b374 <HAL_RCC_ClockConfig+0x1c4>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 030f 	and.w	r3, r3, #15
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d001      	beq.n	800b304 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	e032      	b.n	800b36a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d008      	beq.n	800b322 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b310:	4b19      	ldr	r3, [pc, #100]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	4916      	ldr	r1, [pc, #88]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b31e:	4313      	orrs	r3, r2
 800b320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 0308 	and.w	r3, r3, #8
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d009      	beq.n	800b342 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b32e:	4b12      	ldr	r3, [pc, #72]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	00db      	lsls	r3, r3, #3
 800b33c:	490e      	ldr	r1, [pc, #56]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b33e:	4313      	orrs	r3, r2
 800b340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b342:	f000 f821 	bl	800b388 <HAL_RCC_GetSysClockFreq>
 800b346:	4601      	mov	r1, r0
 800b348:	4b0b      	ldr	r3, [pc, #44]	; (800b378 <HAL_RCC_ClockConfig+0x1c8>)
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	091b      	lsrs	r3, r3, #4
 800b34e:	f003 030f 	and.w	r3, r3, #15
 800b352:	4a0a      	ldr	r2, [pc, #40]	; (800b37c <HAL_RCC_ClockConfig+0x1cc>)
 800b354:	5cd3      	ldrb	r3, [r2, r3]
 800b356:	fa21 f303 	lsr.w	r3, r1, r3
 800b35a:	4a09      	ldr	r2, [pc, #36]	; (800b380 <HAL_RCC_ClockConfig+0x1d0>)
 800b35c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b35e:	4b09      	ldr	r3, [pc, #36]	; (800b384 <HAL_RCC_ClockConfig+0x1d4>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7fc f9a8 	bl	80076b8 <HAL_InitTick>

  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	40023c00 	.word	0x40023c00
 800b378:	40023800 	.word	0x40023800
 800b37c:	08016354 	.word	0x08016354
 800b380:	20000170 	.word	0x20000170
 800b384:	20000174 	.word	0x20000174

0800b388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	607b      	str	r3, [r7, #4]
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	2300      	movs	r3, #0
 800b398:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b39e:	4b50      	ldr	r3, [pc, #320]	; (800b4e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f003 030c 	and.w	r3, r3, #12
 800b3a6:	2b04      	cmp	r3, #4
 800b3a8:	d007      	beq.n	800b3ba <HAL_RCC_GetSysClockFreq+0x32>
 800b3aa:	2b08      	cmp	r3, #8
 800b3ac:	d008      	beq.n	800b3c0 <HAL_RCC_GetSysClockFreq+0x38>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f040 808d 	bne.w	800b4ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b3b4:	4b4b      	ldr	r3, [pc, #300]	; (800b4e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800b3b6:	60bb      	str	r3, [r7, #8]
      break;
 800b3b8:	e08c      	b.n	800b4d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b3ba:	4b4b      	ldr	r3, [pc, #300]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800b3bc:	60bb      	str	r3, [r7, #8]
      break;
 800b3be:	e089      	b.n	800b4d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b3c0:	4b47      	ldr	r3, [pc, #284]	; (800b4e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b3ca:	4b45      	ldr	r3, [pc, #276]	; (800b4e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d023      	beq.n	800b41e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3d6:	4b42      	ldr	r3, [pc, #264]	; (800b4e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	099b      	lsrs	r3, r3, #6
 800b3dc:	f04f 0400 	mov.w	r4, #0
 800b3e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b3e4:	f04f 0200 	mov.w	r2, #0
 800b3e8:	ea03 0501 	and.w	r5, r3, r1
 800b3ec:	ea04 0602 	and.w	r6, r4, r2
 800b3f0:	4a3d      	ldr	r2, [pc, #244]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800b3f2:	fb02 f106 	mul.w	r1, r2, r6
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	fb02 f205 	mul.w	r2, r2, r5
 800b3fc:	440a      	add	r2, r1
 800b3fe:	493a      	ldr	r1, [pc, #232]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800b400:	fba5 0101 	umull	r0, r1, r5, r1
 800b404:	1853      	adds	r3, r2, r1
 800b406:	4619      	mov	r1, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f04f 0400 	mov.w	r4, #0
 800b40e:	461a      	mov	r2, r3
 800b410:	4623      	mov	r3, r4
 800b412:	f7f4 ff6d 	bl	80002f0 <__aeabi_uldivmod>
 800b416:	4603      	mov	r3, r0
 800b418:	460c      	mov	r4, r1
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	e049      	b.n	800b4b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b41e:	4b30      	ldr	r3, [pc, #192]	; (800b4e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	099b      	lsrs	r3, r3, #6
 800b424:	f04f 0400 	mov.w	r4, #0
 800b428:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	ea03 0501 	and.w	r5, r3, r1
 800b434:	ea04 0602 	and.w	r6, r4, r2
 800b438:	4629      	mov	r1, r5
 800b43a:	4632      	mov	r2, r6
 800b43c:	f04f 0300 	mov.w	r3, #0
 800b440:	f04f 0400 	mov.w	r4, #0
 800b444:	0154      	lsls	r4, r2, #5
 800b446:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b44a:	014b      	lsls	r3, r1, #5
 800b44c:	4619      	mov	r1, r3
 800b44e:	4622      	mov	r2, r4
 800b450:	1b49      	subs	r1, r1, r5
 800b452:	eb62 0206 	sbc.w	r2, r2, r6
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	f04f 0400 	mov.w	r4, #0
 800b45e:	0194      	lsls	r4, r2, #6
 800b460:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b464:	018b      	lsls	r3, r1, #6
 800b466:	1a5b      	subs	r3, r3, r1
 800b468:	eb64 0402 	sbc.w	r4, r4, r2
 800b46c:	f04f 0100 	mov.w	r1, #0
 800b470:	f04f 0200 	mov.w	r2, #0
 800b474:	00e2      	lsls	r2, r4, #3
 800b476:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b47a:	00d9      	lsls	r1, r3, #3
 800b47c:	460b      	mov	r3, r1
 800b47e:	4614      	mov	r4, r2
 800b480:	195b      	adds	r3, r3, r5
 800b482:	eb44 0406 	adc.w	r4, r4, r6
 800b486:	f04f 0100 	mov.w	r1, #0
 800b48a:	f04f 0200 	mov.w	r2, #0
 800b48e:	02a2      	lsls	r2, r4, #10
 800b490:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b494:	0299      	lsls	r1, r3, #10
 800b496:	460b      	mov	r3, r1
 800b498:	4614      	mov	r4, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	4621      	mov	r1, r4
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f04f 0400 	mov.w	r4, #0
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4623      	mov	r3, r4
 800b4a8:	f7f4 ff22 	bl	80002f0 <__aeabi_uldivmod>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	0c1b      	lsrs	r3, r3, #16
 800b4b8:	f003 0303 	and.w	r3, r3, #3
 800b4bc:	3301      	adds	r3, #1
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ca:	60bb      	str	r3, [r7, #8]
      break;
 800b4cc:	e002      	b.n	800b4d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800b4d0:	60bb      	str	r3, [r7, #8]
      break;
 800b4d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	40023800 	.word	0x40023800
 800b4e4:	00f42400 	.word	0x00f42400
 800b4e8:	017d7840 	.word	0x017d7840

0800b4ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4f0:	4b03      	ldr	r3, [pc, #12]	; (800b500 <HAL_RCC_GetHCLKFreq+0x14>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	20000170 	.word	0x20000170

0800b504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b508:	f7ff fff0 	bl	800b4ec <HAL_RCC_GetHCLKFreq>
 800b50c:	4601      	mov	r1, r0
 800b50e:	4b05      	ldr	r3, [pc, #20]	; (800b524 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	0a9b      	lsrs	r3, r3, #10
 800b514:	f003 0307 	and.w	r3, r3, #7
 800b518:	4a03      	ldr	r2, [pc, #12]	; (800b528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b51a:	5cd3      	ldrb	r3, [r2, r3]
 800b51c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b520:	4618      	mov	r0, r3
 800b522:	bd80      	pop	{r7, pc}
 800b524:	40023800 	.word	0x40023800
 800b528:	08016364 	.word	0x08016364

0800b52c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b530:	f7ff ffdc 	bl	800b4ec <HAL_RCC_GetHCLKFreq>
 800b534:	4601      	mov	r1, r0
 800b536:	4b05      	ldr	r3, [pc, #20]	; (800b54c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	0b5b      	lsrs	r3, r3, #13
 800b53c:	f003 0307 	and.w	r3, r3, #7
 800b540:	4a03      	ldr	r2, [pc, #12]	; (800b550 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b542:	5cd3      	ldrb	r3, [r2, r3]
 800b544:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b548:	4618      	mov	r0, r3
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	40023800 	.word	0x40023800
 800b550:	08016364 	.word	0x08016364

0800b554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	220f      	movs	r2, #15
 800b562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b564:	4b12      	ldr	r3, [pc, #72]	; (800b5b0 <HAL_RCC_GetClockConfig+0x5c>)
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f003 0203 	and.w	r2, r3, #3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b570:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <HAL_RCC_GetClockConfig+0x5c>)
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b57c:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <HAL_RCC_GetClockConfig+0x5c>)
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b588:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <HAL_RCC_GetClockConfig+0x5c>)
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	08db      	lsrs	r3, r3, #3
 800b58e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b596:	4b07      	ldr	r3, [pc, #28]	; (800b5b4 <HAL_RCC_GetClockConfig+0x60>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 020f 	and.w	r2, r3, #15
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	601a      	str	r2, [r3, #0]
}
 800b5a2:	bf00      	nop
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	40023800 	.word	0x40023800
 800b5b4:	40023c00 	.word	0x40023c00

0800b5b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0301 	and.w	r3, r3, #1
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d012      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b5e0:	4b69      	ldr	r3, [pc, #420]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	4a68      	ldr	r2, [pc, #416]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b5ea:	6093      	str	r3, [r2, #8]
 800b5ec:	4b66      	ldr	r3, [pc, #408]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5ee:	689a      	ldr	r2, [r3, #8]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f4:	4964      	ldr	r1, [pc, #400]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b602:	2301      	movs	r3, #1
 800b604:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d017      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b612:	4b5d      	ldr	r3, [pc, #372]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b620:	4959      	ldr	r1, [pc, #356]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b622:	4313      	orrs	r3, r2
 800b624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b630:	d101      	bne.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b632:	2301      	movs	r3, #1
 800b634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b63e:	2301      	movs	r3, #1
 800b640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d017      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b64e:	4b4e      	ldr	r3, [pc, #312]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b654:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65c:	494a      	ldr	r1, [pc, #296]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b66c:	d101      	bne.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b66e:	2301      	movs	r3, #1
 800b670:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b67a:	2301      	movs	r3, #1
 800b67c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d001      	beq.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b68a:	2301      	movs	r3, #1
 800b68c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0320 	and.w	r3, r3, #32
 800b696:	2b00      	cmp	r3, #0
 800b698:	f000 808b 	beq.w	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b69c:	4b3a      	ldr	r3, [pc, #232]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a0:	4a39      	ldr	r2, [pc, #228]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6a6:	6413      	str	r3, [r2, #64]	; 0x40
 800b6a8:	4b37      	ldr	r3, [pc, #220]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6b0:	60bb      	str	r3, [r7, #8]
 800b6b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b6b4:	4b35      	ldr	r3, [pc, #212]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a34      	ldr	r2, [pc, #208]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6c0:	f7fc fd0a 	bl	80080d8 <HAL_GetTick>
 800b6c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b6c6:	e008      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6c8:	f7fc fd06 	bl	80080d8 <HAL_GetTick>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	2b64      	cmp	r3, #100	; 0x64
 800b6d4:	d901      	bls.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e38d      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b6da:	4b2c      	ldr	r3, [pc, #176]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0f0      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b6e6:	4b28      	ldr	r3, [pc, #160]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d035      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	429a      	cmp	r2, r3
 800b702:	d02e      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b704:	4b20      	ldr	r3, [pc, #128]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b70c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b70e:	4b1e      	ldr	r3, [pc, #120]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b712:	4a1d      	ldr	r2, [pc, #116]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b718:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b71a:	4b1b      	ldr	r3, [pc, #108]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b71e:	4a1a      	ldr	r2, [pc, #104]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b724:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b726:	4a18      	ldr	r2, [pc, #96]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b72c:	4b16      	ldr	r3, [pc, #88]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	2b01      	cmp	r3, #1
 800b736:	d114      	bne.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b738:	f7fc fcce 	bl	80080d8 <HAL_GetTick>
 800b73c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b73e:	e00a      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b740:	f7fc fcca 	bl	80080d8 <HAL_GetTick>
 800b744:	4602      	mov	r2, r0
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b74e:	4293      	cmp	r3, r2
 800b750:	d901      	bls.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e34f      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b756:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0ee      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b76a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b76e:	d111      	bne.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b770:	4b05      	ldr	r3, [pc, #20]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b77e:	400b      	ands	r3, r1
 800b780:	4901      	ldr	r1, [pc, #4]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b782:	4313      	orrs	r3, r2
 800b784:	608b      	str	r3, [r1, #8]
 800b786:	e00b      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b788:	40023800 	.word	0x40023800
 800b78c:	40007000 	.word	0x40007000
 800b790:	0ffffcff 	.word	0x0ffffcff
 800b794:	4bb3      	ldr	r3, [pc, #716]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	4ab2      	ldr	r2, [pc, #712]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b79a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b79e:	6093      	str	r3, [r2, #8]
 800b7a0:	4bb0      	ldr	r3, [pc, #704]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7ac:	49ad      	ldr	r1, [pc, #692]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0310 	and.w	r3, r3, #16
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d010      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b7be:	4ba9      	ldr	r3, [pc, #676]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7c4:	4aa7      	ldr	r2, [pc, #668]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b7ce:	4ba5      	ldr	r3, [pc, #660]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d8:	49a2      	ldr	r1, [pc, #648]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00a      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b7ec:	4b9d      	ldr	r3, [pc, #628]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7fa:	499a      	ldr	r1, [pc, #616]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b80e:	4b95      	ldr	r3, [pc, #596]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b814:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b81c:	4991      	ldr	r1, [pc, #580]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00a      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b830:	4b8c      	ldr	r3, [pc, #560]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b83e:	4989      	ldr	r1, [pc, #548]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b840:	4313      	orrs	r3, r2
 800b842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00a      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b852:	4b84      	ldr	r3, [pc, #528]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b860:	4980      	ldr	r1, [pc, #512]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b862:	4313      	orrs	r3, r2
 800b864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00a      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b874:	4b7b      	ldr	r3, [pc, #492]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b87a:	f023 0203 	bic.w	r2, r3, #3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b882:	4978      	ldr	r1, [pc, #480]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b884:	4313      	orrs	r3, r2
 800b886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b896:	4b73      	ldr	r3, [pc, #460]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b89c:	f023 020c 	bic.w	r2, r3, #12
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8a4:	496f      	ldr	r1, [pc, #444]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00a      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b8b8:	4b6a      	ldr	r3, [pc, #424]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8c6:	4967      	ldr	r1, [pc, #412]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00a      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b8da:	4b62      	ldr	r3, [pc, #392]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e8:	495e      	ldr	r1, [pc, #376]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00a      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b8fc:	4b59      	ldr	r3, [pc, #356]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b902:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b90a:	4956      	ldr	r1, [pc, #344]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b90c:	4313      	orrs	r3, r2
 800b90e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00a      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b91e:	4b51      	ldr	r3, [pc, #324]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b924:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b92c:	494d      	ldr	r1, [pc, #308]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00a      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b940:	4b48      	ldr	r3, [pc, #288]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b946:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b94e:	4945      	ldr	r1, [pc, #276]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b950:	4313      	orrs	r3, r2
 800b952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00a      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b962:	4b40      	ldr	r3, [pc, #256]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b968:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b970:	493c      	ldr	r1, [pc, #240]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b972:	4313      	orrs	r3, r2
 800b974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00a      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b984:	4b37      	ldr	r3, [pc, #220]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b98a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b992:	4934      	ldr	r1, [pc, #208]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b994:	4313      	orrs	r3, r2
 800b996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d011      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b9a6:	4b2f      	ldr	r3, [pc, #188]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9b4:	492b      	ldr	r1, [pc, #172]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9c4:	d101      	bne.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0308 	and.w	r3, r3, #8
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b9e6:	4b1f      	ldr	r3, [pc, #124]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9f4:	491b      	ldr	r1, [pc, #108]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00b      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ba08:	4b16      	ldr	r3, [pc, #88]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba18:	4912      	ldr	r1, [pc, #72]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00b      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ba2c:	4b0d      	ldr	r3, [pc, #52]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba3c:	4909      	ldr	r1, [pc, #36]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00f      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba50:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba60:	e002      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ba62:	bf00      	nop
 800ba64:	40023800 	.word	0x40023800
 800ba68:	4985      	ldr	r1, [pc, #532]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00b      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800ba7c:	4b80      	ldr	r3, [pc, #512]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ba7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba8c:	497c      	ldr	r1, [pc, #496]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d005      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baa2:	f040 80d6 	bne.w	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800baa6:	4b76      	ldr	r3, [pc, #472]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a75      	ldr	r2, [pc, #468]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800baac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bab2:	f7fc fb11 	bl	80080d8 <HAL_GetTick>
 800bab6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bab8:	e008      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800baba:	f7fc fb0d 	bl	80080d8 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	2b64      	cmp	r3, #100	; 0x64
 800bac6:	d901      	bls.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e194      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bacc:	4b6c      	ldr	r3, [pc, #432]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1f0      	bne.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d021      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d11d      	bne.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800baec:	4b64      	ldr	r3, [pc, #400]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800baee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baf2:	0c1b      	lsrs	r3, r3, #16
 800baf4:	f003 0303 	and.w	r3, r3, #3
 800baf8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bafa:	4b61      	ldr	r3, [pc, #388]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bafc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb00:	0e1b      	lsrs	r3, r3, #24
 800bb02:	f003 030f 	and.w	r3, r3, #15
 800bb06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	019a      	lsls	r2, r3, #6
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	041b      	lsls	r3, r3, #16
 800bb12:	431a      	orrs	r2, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	061b      	lsls	r3, r3, #24
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	071b      	lsls	r3, r3, #28
 800bb20:	4957      	ldr	r1, [pc, #348]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb22:	4313      	orrs	r3, r2
 800bb24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb3c:	d00a      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d02e      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb52:	d129      	bne.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bb54:	4b4a      	ldr	r3, [pc, #296]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb5a:	0c1b      	lsrs	r3, r3, #16
 800bb5c:	f003 0303 	and.w	r3, r3, #3
 800bb60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bb62:	4b47      	ldr	r3, [pc, #284]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb68:	0f1b      	lsrs	r3, r3, #28
 800bb6a:	f003 0307 	and.w	r3, r3, #7
 800bb6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	019a      	lsls	r2, r3, #6
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	041b      	lsls	r3, r3, #16
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	061b      	lsls	r3, r3, #24
 800bb82:	431a      	orrs	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	071b      	lsls	r3, r3, #28
 800bb88:	493d      	ldr	r1, [pc, #244]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bb90:	4b3b      	ldr	r3, [pc, #236]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb96:	f023 021f 	bic.w	r2, r3, #31
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	4937      	ldr	r1, [pc, #220]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01d      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bbb4:	4b32      	ldr	r3, [pc, #200]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bbb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbba:	0e1b      	lsrs	r3, r3, #24
 800bbbc:	f003 030f 	and.w	r3, r3, #15
 800bbc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bbc2:	4b2f      	ldr	r3, [pc, #188]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bbc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbc8:	0f1b      	lsrs	r3, r3, #28
 800bbca:	f003 0307 	and.w	r3, r3, #7
 800bbce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	019a      	lsls	r2, r3, #6
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	041b      	lsls	r3, r3, #16
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	061b      	lsls	r3, r3, #24
 800bbe2:	431a      	orrs	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	071b      	lsls	r3, r3, #28
 800bbe8:	4925      	ldr	r1, [pc, #148]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d011      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	019a      	lsls	r2, r3, #6
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	041b      	lsls	r3, r3, #16
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	061b      	lsls	r3, r3, #24
 800bc10:	431a      	orrs	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	071b      	lsls	r3, r3, #28
 800bc18:	4919      	ldr	r1, [pc, #100]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bc20:	4b17      	ldr	r3, [pc, #92]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a16      	ldr	r2, [pc, #88]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc2c:	f7fc fa54 	bl	80080d8 <HAL_GetTick>
 800bc30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bc32:	e008      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bc34:	f7fc fa50 	bl	80080d8 <HAL_GetTick>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	2b64      	cmp	r3, #100	; 0x64
 800bc40:	d901      	bls.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc42:	2303      	movs	r3, #3
 800bc44:	e0d7      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bc46:	4b0e      	ldr	r3, [pc, #56]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0f0      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	f040 80cd 	bne.w	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bc5a:	4b09      	ldr	r3, [pc, #36]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a08      	ldr	r2, [pc, #32]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc66:	f7fc fa37 	bl	80080d8 <HAL_GetTick>
 800bc6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bc6c:	e00a      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bc6e:	f7fc fa33 	bl	80080d8 <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	2b64      	cmp	r3, #100	; 0x64
 800bc7a:	d903      	bls.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e0ba      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800bc80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bc84:	4b5e      	ldr	r3, [pc, #376]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc90:	d0ed      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d02e      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d12a      	bne.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bcba:	4b51      	ldr	r3, [pc, #324]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bcbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc0:	0c1b      	lsrs	r3, r3, #16
 800bcc2:	f003 0303 	and.w	r3, r3, #3
 800bcc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bcc8:	4b4d      	ldr	r3, [pc, #308]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bcca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcce:	0f1b      	lsrs	r3, r3, #28
 800bcd0:	f003 0307 	and.w	r3, r3, #7
 800bcd4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	019a      	lsls	r2, r3, #6
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	041b      	lsls	r3, r3, #16
 800bce0:	431a      	orrs	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	061b      	lsls	r3, r3, #24
 800bce8:	431a      	orrs	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	071b      	lsls	r3, r3, #28
 800bcee:	4944      	ldr	r1, [pc, #272]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bcf6:	4b42      	ldr	r3, [pc, #264]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bcf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcfc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd04:	3b01      	subs	r3, #1
 800bd06:	021b      	lsls	r3, r3, #8
 800bd08:	493d      	ldr	r1, [pc, #244]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d022      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd24:	d11d      	bne.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bd26:	4b36      	ldr	r3, [pc, #216]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2c:	0e1b      	lsrs	r3, r3, #24
 800bd2e:	f003 030f 	and.w	r3, r3, #15
 800bd32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bd34:	4b32      	ldr	r3, [pc, #200]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd3a:	0f1b      	lsrs	r3, r3, #28
 800bd3c:	f003 0307 	and.w	r3, r3, #7
 800bd40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	019a      	lsls	r2, r3, #6
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a1b      	ldr	r3, [r3, #32]
 800bd4c:	041b      	lsls	r3, r3, #16
 800bd4e:	431a      	orrs	r2, r3
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	061b      	lsls	r3, r3, #24
 800bd54:	431a      	orrs	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	071b      	lsls	r3, r3, #28
 800bd5a:	4929      	ldr	r1, [pc, #164]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f003 0308 	and.w	r3, r3, #8
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d028      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bd6e:	4b24      	ldr	r3, [pc, #144]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd74:	0e1b      	lsrs	r3, r3, #24
 800bd76:	f003 030f 	and.w	r3, r3, #15
 800bd7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd7c:	4b20      	ldr	r3, [pc, #128]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd82:	0c1b      	lsrs	r3, r3, #16
 800bd84:	f003 0303 	and.w	r3, r3, #3
 800bd88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	019a      	lsls	r2, r3, #6
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	041b      	lsls	r3, r3, #16
 800bd94:	431a      	orrs	r2, r3
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	061b      	lsls	r3, r3, #24
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	071b      	lsls	r3, r3, #28
 800bda2:	4917      	ldr	r1, [pc, #92]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bda4:	4313      	orrs	r3, r2
 800bda6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bdaa:	4b15      	ldr	r3, [pc, #84]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bdac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	4911      	ldr	r1, [pc, #68]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bdc0:	4b0f      	ldr	r3, [pc, #60]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a0e      	ldr	r2, [pc, #56]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bdc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdcc:	f7fc f984 	bl	80080d8 <HAL_GetTick>
 800bdd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bdd2:	e008      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bdd4:	f7fc f980 	bl	80080d8 <HAL_GetTick>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	2b64      	cmp	r3, #100	; 0x64
 800bde0:	d901      	bls.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bde2:	2303      	movs	r3, #3
 800bde4:	e007      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bde6:	4b06      	ldr	r3, [pc, #24]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdf2:	d1ef      	bne.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3720      	adds	r7, #32
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	40023800 	.word	0x40023800

0800be04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e06b      	b.n	800beee <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	7f5b      	ldrb	r3, [r3, #29]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d105      	bne.n	800be2c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f7fb f9b6 	bl	8007198 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2202      	movs	r2, #2
 800be30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	22ca      	movs	r2, #202	; 0xca
 800be38:	625a      	str	r2, [r3, #36]	; 0x24
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2253      	movs	r2, #83	; 0x53
 800be40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f85a 	bl	800befc <RTC_EnterInitMode>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d008      	beq.n	800be60 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	22ff      	movs	r2, #255	; 0xff
 800be54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2204      	movs	r2, #4
 800be5a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e046      	b.n	800beee <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6899      	ldr	r1, [r3, #8]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	4b23      	ldr	r3, [pc, #140]	; (800bef8 <HAL_RTC_Init+0xf4>)
 800be6c:	400b      	ands	r3, r1
 800be6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6899      	ldr	r1, [r3, #8]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	431a      	orrs	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	695b      	ldr	r3, [r3, #20]
 800be84:	431a      	orrs	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	430a      	orrs	r2, r1
 800be8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	68d2      	ldr	r2, [r2, #12]
 800be96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	6919      	ldr	r1, [r3, #16]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	041a      	lsls	r2, r3, #16
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	430a      	orrs	r2, r1
 800beaa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68da      	ldr	r2, [r3, #12]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800beba:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f022 0208 	bic.w	r2, r2, #8
 800beca:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699a      	ldr	r2, [r3, #24]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	430a      	orrs	r2, r1
 800bedc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	22ff      	movs	r2, #255	; 0xff
 800bee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2201      	movs	r2, #1
 800beea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800beec:	2300      	movs	r3, #0
  }
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	ff8fffbf 	.word	0xff8fffbf

0800befc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bf04:	2300      	movs	r3, #0
 800bf06:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d119      	bne.n	800bf4a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bf20:	f7fc f8da 	bl	80080d8 <HAL_GetTick>
 800bf24:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bf26:	e009      	b.n	800bf3c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bf28:	f7fc f8d6 	bl	80080d8 <HAL_GetTick>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf36:	d901      	bls.n	800bf3c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e007      	b.n	800bf4c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d0ee      	beq.n	800bf28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d101      	bne.n	800bf66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e084      	b.n	800c070 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d106      	bne.n	800bf86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7fb f923 	bl	80071cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2202      	movs	r2, #2
 800bf8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf9c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bfa6:	d902      	bls.n	800bfae <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	e002      	b.n	800bfb4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bfae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfb2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bfbc:	d007      	beq.n	800bfce <HAL_SPI_Init+0x7a>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bfc6:	d002      	beq.n	800bfce <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10b      	bne.n	800bfee <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bfde:	d903      	bls.n	800bfe8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	631a      	str	r2, [r3, #48]	; 0x30
 800bfe6:	e002      	b.n	800bfee <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	431a      	orrs	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	431a      	orrs	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	431a      	orrs	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c00c:	431a      	orrs	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	431a      	orrs	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	ea42 0103 	orr.w	r1, r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	0c1b      	lsrs	r3, r3, #16
 800c02e:	f003 0204 	and.w	r2, r3, #4
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c036:	431a      	orrs	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03c:	431a      	orrs	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	ea42 0103 	orr.w	r1, r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	430a      	orrs	r2, r1
 800c04e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	69da      	ldr	r2, [r3, #28]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c05e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b088      	sub	sp, #32
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	4613      	mov	r3, r2
 800c086:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c092:	2b01      	cmp	r3, #1
 800c094:	d101      	bne.n	800c09a <HAL_SPI_Transmit+0x22>
 800c096:	2302      	movs	r3, #2
 800c098:	e150      	b.n	800c33c <HAL_SPI_Transmit+0x2c4>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0a2:	f7fc f819 	bl	80080d8 <HAL_GetTick>
 800c0a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c0a8:	88fb      	ldrh	r3, [r7, #6]
 800c0aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d002      	beq.n	800c0be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c0bc:	e135      	b.n	800c32a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <HAL_SPI_Transmit+0x52>
 800c0c4:	88fb      	ldrh	r3, [r7, #6]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d102      	bne.n	800c0d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c0ce:	e12c      	b.n	800c32a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2203      	movs	r2, #3
 800c0d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	88fa      	ldrh	r2, [r7, #6]
 800c0e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	88fa      	ldrh	r2, [r7, #6]
 800c0ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c11a:	d107      	bne.n	800c12c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c12a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c136:	2b40      	cmp	r3, #64	; 0x40
 800c138:	d007      	beq.n	800c14a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c152:	d94b      	bls.n	800c1ec <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d002      	beq.n	800c162 <HAL_SPI_Transmit+0xea>
 800c15c:	8afb      	ldrh	r3, [r7, #22]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d13e      	bne.n	800c1e0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	881a      	ldrh	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c172:	1c9a      	adds	r2, r3, #2
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	3b01      	subs	r3, #1
 800c180:	b29a      	uxth	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c186:	e02b      	b.n	800c1e0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f003 0302 	and.w	r3, r3, #2
 800c192:	2b02      	cmp	r3, #2
 800c194:	d112      	bne.n	800c1bc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19a:	881a      	ldrh	r2, [r3, #0]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a6:	1c9a      	adds	r2, r3, #2
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c1ba:	e011      	b.n	800c1e0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1bc:	f7fb ff8c 	bl	80080d8 <HAL_GetTick>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d803      	bhi.n	800c1d4 <HAL_SPI_Transmit+0x15c>
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d102      	bne.n	800c1da <HAL_SPI_Transmit+0x162>
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d102      	bne.n	800c1e0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c1de:	e0a4      	b.n	800c32a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1ce      	bne.n	800c188 <HAL_SPI_Transmit+0x110>
 800c1ea:	e07c      	b.n	800c2e6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <HAL_SPI_Transmit+0x182>
 800c1f4:	8afb      	ldrh	r3, [r7, #22]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d170      	bne.n	800c2dc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	2b01      	cmp	r3, #1
 800c202:	d912      	bls.n	800c22a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c208:	881a      	ldrh	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c214:	1c9a      	adds	r2, r3, #2
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c21e:	b29b      	uxth	r3, r3
 800c220:	3b02      	subs	r3, #2
 800c222:	b29a      	uxth	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c228:	e058      	b.n	800c2dc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	330c      	adds	r3, #12
 800c234:	7812      	ldrb	r2, [r2, #0]
 800c236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23c:	1c5a      	adds	r2, r3, #1
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c246:	b29b      	uxth	r3, r3
 800c248:	3b01      	subs	r3, #1
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c250:	e044      	b.n	800c2dc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f003 0302 	and.w	r3, r3, #2
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d12b      	bne.n	800c2b8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c264:	b29b      	uxth	r3, r3
 800c266:	2b01      	cmp	r3, #1
 800c268:	d912      	bls.n	800c290 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26e:	881a      	ldrh	r2, [r3, #0]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27a:	1c9a      	adds	r2, r3, #2
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c284:	b29b      	uxth	r3, r3
 800c286:	3b02      	subs	r3, #2
 800c288:	b29a      	uxth	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c28e:	e025      	b.n	800c2dc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	330c      	adds	r3, #12
 800c29a:	7812      	ldrb	r2, [r2, #0]
 800c29c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2b6:	e011      	b.n	800c2dc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2b8:	f7fb ff0e 	bl	80080d8 <HAL_GetTick>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d803      	bhi.n	800c2d0 <HAL_SPI_Transmit+0x258>
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ce:	d102      	bne.n	800c2d6 <HAL_SPI_Transmit+0x25e>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c2da:	e026      	b.n	800c32a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1b5      	bne.n	800c252 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2e6:	69ba      	ldr	r2, [r7, #24]
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f000 fa20 	bl	800c730 <SPI_EndRxTxTransaction>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d002      	beq.n	800c2fc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2220      	movs	r2, #32
 800c2fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10a      	bne.n	800c31a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c304:	2300      	movs	r3, #0
 800c306:	613b      	str	r3, [r7, #16]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	613b      	str	r3, [r7, #16]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	613b      	str	r3, [r7, #16]
 800c318:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	77fb      	strb	r3, [r7, #31]
 800c326:	e000      	b.n	800c32a <HAL_SPI_Transmit+0x2b2>
  }

error:
 800c328:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2201      	movs	r2, #1
 800c32e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c33a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3720      	adds	r7, #32
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b088      	sub	sp, #32
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	099b      	lsrs	r3, r3, #6
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10f      	bne.n	800c388 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00a      	beq.n	800c388 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	099b      	lsrs	r3, r3, #6
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d004      	beq.n	800c388 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	4798      	blx	r3
    return;
 800c386:	e0d8      	b.n	800c53a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	085b      	lsrs	r3, r3, #1
 800c38c:	f003 0301 	and.w	r3, r3, #1
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00a      	beq.n	800c3aa <HAL_SPI_IRQHandler+0x66>
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	09db      	lsrs	r3, r3, #7
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d004      	beq.n	800c3aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	4798      	blx	r3
    return;
 800c3a8:	e0c7      	b.n	800c53a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	095b      	lsrs	r3, r3, #5
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10c      	bne.n	800c3d0 <HAL_SPI_IRQHandler+0x8c>
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	099b      	lsrs	r3, r3, #6
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d106      	bne.n	800c3d0 <HAL_SPI_IRQHandler+0x8c>
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	0a1b      	lsrs	r3, r3, #8
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 80b5 	beq.w	800c53a <HAL_SPI_IRQHandler+0x1f6>
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	095b      	lsrs	r3, r3, #5
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 80ae 	beq.w	800c53a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	099b      	lsrs	r3, r3, #6
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d023      	beq.n	800c432 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d011      	beq.n	800c41a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3fa:	f043 0204 	orr.w	r2, r3, #4
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c402:	2300      	movs	r3, #0
 800c404:	617b      	str	r3, [r7, #20]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	617b      	str	r3, [r7, #20]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	617b      	str	r3, [r7, #20]
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	e00b      	b.n	800c432 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c41a:	2300      	movs	r3, #0
 800c41c:	613b      	str	r3, [r7, #16]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	613b      	str	r3, [r7, #16]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	613b      	str	r3, [r7, #16]
 800c42e:	693b      	ldr	r3, [r7, #16]
        return;
 800c430:	e083      	b.n	800c53a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	095b      	lsrs	r3, r3, #5
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d014      	beq.n	800c468 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c442:	f043 0201 	orr.w	r2, r3, #1
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c44a:	2300      	movs	r3, #0
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	60fb      	str	r3, [r7, #12]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	0a1b      	lsrs	r3, r3, #8
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00c      	beq.n	800c48e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c478:	f043 0208 	orr.w	r2, r3, #8
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c480:	2300      	movs	r3, #0
 800c482:	60bb      	str	r3, [r7, #8]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	60bb      	str	r3, [r7, #8]
 800c48c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c492:	2b00      	cmp	r3, #0
 800c494:	d050      	beq.n	800c538 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c4a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	f003 0302 	and.w	r3, r3, #2
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d104      	bne.n	800c4c2 <HAL_SPI_IRQHandler+0x17e>
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d034      	beq.n	800c52c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	685a      	ldr	r2, [r3, #4]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f022 0203 	bic.w	r2, r2, #3
 800c4d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d011      	beq.n	800c4fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4de:	4a18      	ldr	r2, [pc, #96]	; (800c540 <HAL_SPI_IRQHandler+0x1fc>)
 800c4e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fc fe30 	bl	800914c <HAL_DMA_Abort_IT>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d005      	beq.n	800c4fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c502:	2b00      	cmp	r3, #0
 800c504:	d016      	beq.n	800c534 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c50a:	4a0d      	ldr	r2, [pc, #52]	; (800c540 <HAL_SPI_IRQHandler+0x1fc>)
 800c50c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c512:	4618      	mov	r0, r3
 800c514:	f7fc fe1a 	bl	800914c <HAL_DMA_Abort_IT>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00a      	beq.n	800c534 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c52a:	e003      	b.n	800c534 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f809 	bl	800c544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c532:	e000      	b.n	800c536 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c534:	bf00      	nop
    return;
 800c536:	bf00      	nop
 800c538:	bf00      	nop
  }
}
 800c53a:	3720      	adds	r7, #32
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	0800c559 	.word	0x0800c559

0800c544 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c564:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff ffe5 	bl	800c544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c57a:	bf00      	nop
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b084      	sub	sp, #16
 800c586:	af00      	add	r7, sp, #0
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	603b      	str	r3, [r7, #0]
 800c58e:	4613      	mov	r3, r2
 800c590:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c592:	e04c      	b.n	800c62e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59a:	d048      	beq.n	800c62e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c59c:	f7fb fd9c 	bl	80080d8 <HAL_GetTick>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d902      	bls.n	800c5b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d13d      	bne.n	800c62e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c5c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5ca:	d111      	bne.n	800c5f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5d4:	d004      	beq.n	800c5e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5de:	d107      	bne.n	800c5f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5f8:	d10f      	bne.n	800c61a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c608:	601a      	str	r2, [r3, #0]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c62a:	2303      	movs	r3, #3
 800c62c:	e00f      	b.n	800c64e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689a      	ldr	r2, [r3, #8]
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	4013      	ands	r3, r2
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	bf0c      	ite	eq
 800c63e:	2301      	moveq	r3, #1
 800c640:	2300      	movne	r3, #0
 800c642:	b2db      	uxtb	r3, r3
 800c644:	461a      	mov	r2, r3
 800c646:	79fb      	ldrb	r3, [r7, #7]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d1a3      	bne.n	800c594 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b084      	sub	sp, #16
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	60f8      	str	r0, [r7, #12]
 800c65e:	60b9      	str	r1, [r7, #8]
 800c660:	607a      	str	r2, [r7, #4]
 800c662:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800c664:	e057      	b.n	800c716 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c66c:	d106      	bne.n	800c67c <SPI_WaitFifoStateUntilTimeout+0x26>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d103      	bne.n	800c67c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	330c      	adds	r3, #12
 800c67a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c682:	d048      	beq.n	800c716 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c684:	f7fb fd28 	bl	80080d8 <HAL_GetTick>
 800c688:	4602      	mov	r2, r0
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d902      	bls.n	800c69a <SPI_WaitFifoStateUntilTimeout+0x44>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d13d      	bne.n	800c716 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c6a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6b2:	d111      	bne.n	800c6d8 <SPI_WaitFifoStateUntilTimeout+0x82>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6bc:	d004      	beq.n	800c6c8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6c6:	d107      	bne.n	800c6d8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6e0:	d10f      	bne.n	800c702 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e008      	b.n	800c728 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	689a      	ldr	r2, [r3, #8]
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	4013      	ands	r3, r2
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	429a      	cmp	r2, r3
 800c724:	d19f      	bne.n	800c666 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af02      	add	r7, sp, #8
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	2200      	movs	r2, #0
 800c744:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f7ff ff84 	bl	800c656 <SPI_WaitFifoStateUntilTimeout>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d007      	beq.n	800c764 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c758:	f043 0220 	orr.w	r2, r3, #32
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c760:	2303      	movs	r3, #3
 800c762:	e027      	b.n	800c7b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2200      	movs	r2, #0
 800c76c:	2180      	movs	r1, #128	; 0x80
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f7ff ff07 	bl	800c582 <SPI_WaitFlagStateUntilTimeout>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d007      	beq.n	800c78a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c77e:	f043 0220 	orr.w	r2, r3, #32
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c786:	2303      	movs	r3, #3
 800c788:	e014      	b.n	800c7b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	2200      	movs	r2, #0
 800c792:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f7ff ff5d 	bl	800c656 <SPI_WaitFifoStateUntilTimeout>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d007      	beq.n	800c7b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7a6:	f043 0220 	orr.w	r2, r3, #32
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	e000      	b.n	800c7b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d101      	bne.n	800c7ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e01d      	b.n	800c80a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d106      	bne.n	800c7e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7fa fd8e 	bl	8007304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	f000 fb82 	bl	800cf04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3708      	adds	r7, #8
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
	...

0800c814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68da      	ldr	r2, [r3, #12]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f042 0201 	orr.w	r2, r2, #1
 800c82a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	4b0c      	ldr	r3, [pc, #48]	; (800c864 <HAL_TIM_Base_Start_IT+0x50>)
 800c834:	4013      	ands	r3, r2
 800c836:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2b06      	cmp	r3, #6
 800c83c:	d00b      	beq.n	800c856 <HAL_TIM_Base_Start_IT+0x42>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c844:	d007      	beq.n	800c856 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f042 0201 	orr.w	r2, r2, #1
 800c854:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	00010007 	.word	0x00010007

0800c868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c876:	2301      	movs	r3, #1
 800c878:	e01d      	b.n	800c8b6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d106      	bne.n	800c894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f815 	bl	800c8be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2202      	movs	r2, #2
 800c898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	f000 fb2c 	bl	800cf04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b083      	sub	sp, #12
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c8c6:	bf00      	nop
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d122      	bne.n	800c92e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	f003 0302 	and.w	r3, r3, #2
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d11b      	bne.n	800c92e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f06f 0202 	mvn.w	r2, #2
 800c8fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	f003 0303 	and.w	r3, r3, #3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fad7 	bl	800cec8 <HAL_TIM_IC_CaptureCallback>
 800c91a:	e005      	b.n	800c928 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fac9 	bl	800ceb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fada 	bl	800cedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	f003 0304 	and.w	r3, r3, #4
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d122      	bne.n	800c982 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f003 0304 	and.w	r3, r3, #4
 800c946:	2b04      	cmp	r3, #4
 800c948:	d11b      	bne.n	800c982 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f06f 0204 	mvn.w	r2, #4
 800c952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 faad 	bl	800cec8 <HAL_TIM_IC_CaptureCallback>
 800c96e:	e005      	b.n	800c97c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fa9f 	bl	800ceb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fab0 	bl	800cedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	f003 0308 	and.w	r3, r3, #8
 800c98c:	2b08      	cmp	r3, #8
 800c98e:	d122      	bne.n	800c9d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	f003 0308 	and.w	r3, r3, #8
 800c99a:	2b08      	cmp	r3, #8
 800c99c:	d11b      	bne.n	800c9d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f06f 0208 	mvn.w	r2, #8
 800c9a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	69db      	ldr	r3, [r3, #28]
 800c9b4:	f003 0303 	and.w	r3, r3, #3
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fa83 	bl	800cec8 <HAL_TIM_IC_CaptureCallback>
 800c9c2:	e005      	b.n	800c9d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fa75 	bl	800ceb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fa86 	bl	800cedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	f003 0310 	and.w	r3, r3, #16
 800c9e0:	2b10      	cmp	r3, #16
 800c9e2:	d122      	bne.n	800ca2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	f003 0310 	and.w	r3, r3, #16
 800c9ee:	2b10      	cmp	r3, #16
 800c9f0:	d11b      	bne.n	800ca2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f06f 0210 	mvn.w	r2, #16
 800c9fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2208      	movs	r2, #8
 800ca00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	69db      	ldr	r3, [r3, #28]
 800ca08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fa59 	bl	800cec8 <HAL_TIM_IC_CaptureCallback>
 800ca16:	e005      	b.n	800ca24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fa4b 	bl	800ceb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fa5c 	bl	800cedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d10e      	bne.n	800ca56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d107      	bne.n	800ca56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f06f 0201 	mvn.w	r2, #1
 800ca4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7f7 fd99 	bl	8004588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca60:	2b80      	cmp	r3, #128	; 0x80
 800ca62:	d10e      	bne.n	800ca82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca6e:	2b80      	cmp	r3, #128	; 0x80
 800ca70:	d107      	bne.n	800ca82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fe71 	bl	800d764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca90:	d10e      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca9c:	2b80      	cmp	r3, #128	; 0x80
 800ca9e:	d107      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800caa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fe64 	bl	800d778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caba:	2b40      	cmp	r3, #64	; 0x40
 800cabc:	d10e      	bne.n	800cadc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac8:	2b40      	cmp	r3, #64	; 0x40
 800caca:	d107      	bne.n	800cadc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fa0a 	bl	800cef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	f003 0320 	and.w	r3, r3, #32
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	d10e      	bne.n	800cb08 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	f003 0320 	and.w	r3, r3, #32
 800caf4:	2b20      	cmp	r3, #32
 800caf6:	d107      	bne.n	800cb08 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f06f 0220 	mvn.w	r2, #32
 800cb00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fe24 	bl	800d750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d101      	bne.n	800cb2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cb26:	2302      	movs	r3, #2
 800cb28:	e105      	b.n	800cd36 <HAL_TIM_PWM_ConfigChannel+0x226>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2202      	movs	r2, #2
 800cb36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b14      	cmp	r3, #20
 800cb3e:	f200 80f0 	bhi.w	800cd22 <HAL_TIM_PWM_ConfigChannel+0x212>
 800cb42:	a201      	add	r2, pc, #4	; (adr r2, 800cb48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb48:	0800cb9d 	.word	0x0800cb9d
 800cb4c:	0800cd23 	.word	0x0800cd23
 800cb50:	0800cd23 	.word	0x0800cd23
 800cb54:	0800cd23 	.word	0x0800cd23
 800cb58:	0800cbdd 	.word	0x0800cbdd
 800cb5c:	0800cd23 	.word	0x0800cd23
 800cb60:	0800cd23 	.word	0x0800cd23
 800cb64:	0800cd23 	.word	0x0800cd23
 800cb68:	0800cc1f 	.word	0x0800cc1f
 800cb6c:	0800cd23 	.word	0x0800cd23
 800cb70:	0800cd23 	.word	0x0800cd23
 800cb74:	0800cd23 	.word	0x0800cd23
 800cb78:	0800cc5f 	.word	0x0800cc5f
 800cb7c:	0800cd23 	.word	0x0800cd23
 800cb80:	0800cd23 	.word	0x0800cd23
 800cb84:	0800cd23 	.word	0x0800cd23
 800cb88:	0800cca1 	.word	0x0800cca1
 800cb8c:	0800cd23 	.word	0x0800cd23
 800cb90:	0800cd23 	.word	0x0800cd23
 800cb94:	0800cd23 	.word	0x0800cd23
 800cb98:	0800cce1 	.word	0x0800cce1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68b9      	ldr	r1, [r7, #8]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 fa4e 	bl	800d044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	699a      	ldr	r2, [r3, #24]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f042 0208 	orr.w	r2, r2, #8
 800cbb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	699a      	ldr	r2, [r3, #24]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f022 0204 	bic.w	r2, r2, #4
 800cbc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6999      	ldr	r1, [r3, #24]
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	691a      	ldr	r2, [r3, #16]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	619a      	str	r2, [r3, #24]
      break;
 800cbda:	e0a3      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68b9      	ldr	r1, [r7, #8]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 faa0 	bl	800d128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	699a      	ldr	r2, [r3, #24]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	699a      	ldr	r2, [r3, #24]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6999      	ldr	r1, [r3, #24]
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	021a      	lsls	r2, r3, #8
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	430a      	orrs	r2, r1
 800cc1a:	619a      	str	r2, [r3, #24]
      break;
 800cc1c:	e082      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 faf7 	bl	800d218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	69da      	ldr	r2, [r3, #28]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f042 0208 	orr.w	r2, r2, #8
 800cc38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	69da      	ldr	r2, [r3, #28]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f022 0204 	bic.w	r2, r2, #4
 800cc48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	69d9      	ldr	r1, [r3, #28]
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	691a      	ldr	r2, [r3, #16]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	430a      	orrs	r2, r1
 800cc5a:	61da      	str	r2, [r3, #28]
      break;
 800cc5c:	e062      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68b9      	ldr	r1, [r7, #8]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 fb4d 	bl	800d304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	69da      	ldr	r2, [r3, #28]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	69da      	ldr	r2, [r3, #28]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	69d9      	ldr	r1, [r3, #28]
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	021a      	lsls	r2, r3, #8
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	430a      	orrs	r2, r1
 800cc9c:	61da      	str	r2, [r3, #28]
      break;
 800cc9e:	e041      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	68b9      	ldr	r1, [r7, #8]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 fb84 	bl	800d3b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f042 0208 	orr.w	r2, r2, #8
 800ccba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f022 0204 	bic.w	r2, r2, #4
 800ccca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	691a      	ldr	r2, [r3, #16]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ccde:	e021      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68b9      	ldr	r1, [r7, #8]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 fbb6 	bl	800d458 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	021a      	lsls	r2, r3, #8
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	430a      	orrs	r2, r1
 800cd1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cd20:	e000      	b.n	800cd24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800cd22:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop

0800cd40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d101      	bne.n	800cd58 <HAL_TIM_ConfigClockSource+0x18>
 800cd54:	2302      	movs	r3, #2
 800cd56:	e0a6      	b.n	800cea6 <HAL_TIM_ConfigClockSource+0x166>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	4b4f      	ldr	r3, [pc, #316]	; (800ceb0 <HAL_TIM_ConfigClockSource+0x170>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b40      	cmp	r3, #64	; 0x40
 800cd8e:	d067      	beq.n	800ce60 <HAL_TIM_ConfigClockSource+0x120>
 800cd90:	2b40      	cmp	r3, #64	; 0x40
 800cd92:	d80b      	bhi.n	800cdac <HAL_TIM_ConfigClockSource+0x6c>
 800cd94:	2b10      	cmp	r3, #16
 800cd96:	d073      	beq.n	800ce80 <HAL_TIM_ConfigClockSource+0x140>
 800cd98:	2b10      	cmp	r3, #16
 800cd9a:	d802      	bhi.n	800cda2 <HAL_TIM_ConfigClockSource+0x62>
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d06f      	beq.n	800ce80 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cda0:	e078      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cda2:	2b20      	cmp	r3, #32
 800cda4:	d06c      	beq.n	800ce80 <HAL_TIM_ConfigClockSource+0x140>
 800cda6:	2b30      	cmp	r3, #48	; 0x30
 800cda8:	d06a      	beq.n	800ce80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800cdaa:	e073      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cdac:	2b70      	cmp	r3, #112	; 0x70
 800cdae:	d00d      	beq.n	800cdcc <HAL_TIM_ConfigClockSource+0x8c>
 800cdb0:	2b70      	cmp	r3, #112	; 0x70
 800cdb2:	d804      	bhi.n	800cdbe <HAL_TIM_ConfigClockSource+0x7e>
 800cdb4:	2b50      	cmp	r3, #80	; 0x50
 800cdb6:	d033      	beq.n	800ce20 <HAL_TIM_ConfigClockSource+0xe0>
 800cdb8:	2b60      	cmp	r3, #96	; 0x60
 800cdba:	d041      	beq.n	800ce40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800cdbc:	e06a      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cdbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdc2:	d066      	beq.n	800ce92 <HAL_TIM_ConfigClockSource+0x152>
 800cdc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdc8:	d017      	beq.n	800cdfa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800cdca:	e063      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6818      	ldr	r0, [r3, #0]
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	6899      	ldr	r1, [r3, #8]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	685a      	ldr	r2, [r3, #4]
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	f000 fc0a 	bl	800d5f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cdee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	609a      	str	r2, [r3, #8]
      break;
 800cdf8:	e04c      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6818      	ldr	r0, [r3, #0]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	6899      	ldr	r1, [r3, #8]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	f000 fbf3 	bl	800d5f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce1c:	609a      	str	r2, [r3, #8]
      break;
 800ce1e:	e039      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6818      	ldr	r0, [r3, #0]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	6859      	ldr	r1, [r3, #4]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	f000 fb67 	bl	800d500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2150      	movs	r1, #80	; 0x50
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 fbc0 	bl	800d5be <TIM_ITRx_SetConfig>
      break;
 800ce3e:	e029      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	6859      	ldr	r1, [r3, #4]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	f000 fb86 	bl	800d55e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2160      	movs	r1, #96	; 0x60
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 fbb0 	bl	800d5be <TIM_ITRx_SetConfig>
      break;
 800ce5e:	e019      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6818      	ldr	r0, [r3, #0]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	6859      	ldr	r1, [r3, #4]
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	f000 fb47 	bl	800d500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2140      	movs	r1, #64	; 0x40
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f000 fba0 	bl	800d5be <TIM_ITRx_SetConfig>
      break;
 800ce7e:	e009      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4619      	mov	r1, r3
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	f000 fb97 	bl	800d5be <TIM_ITRx_SetConfig>
      break;
 800ce90:	e000      	b.n	800ce94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ce92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	fffeff88 	.word	0xfffeff88

0800ceb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cef8:	bf00      	nop
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a40      	ldr	r2, [pc, #256]	; (800d018 <TIM_Base_SetConfig+0x114>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d013      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf22:	d00f      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a3d      	ldr	r2, [pc, #244]	; (800d01c <TIM_Base_SetConfig+0x118>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d00b      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a3c      	ldr	r2, [pc, #240]	; (800d020 <TIM_Base_SetConfig+0x11c>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d007      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4a3b      	ldr	r2, [pc, #236]	; (800d024 <TIM_Base_SetConfig+0x120>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d003      	beq.n	800cf44 <TIM_Base_SetConfig+0x40>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4a3a      	ldr	r2, [pc, #232]	; (800d028 <TIM_Base_SetConfig+0x124>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d108      	bne.n	800cf56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a2f      	ldr	r2, [pc, #188]	; (800d018 <TIM_Base_SetConfig+0x114>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d02b      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf64:	d027      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a2c      	ldr	r2, [pc, #176]	; (800d01c <TIM_Base_SetConfig+0x118>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d023      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a2b      	ldr	r2, [pc, #172]	; (800d020 <TIM_Base_SetConfig+0x11c>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d01f      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a2a      	ldr	r2, [pc, #168]	; (800d024 <TIM_Base_SetConfig+0x120>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d01b      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4a29      	ldr	r2, [pc, #164]	; (800d028 <TIM_Base_SetConfig+0x124>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d017      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a28      	ldr	r2, [pc, #160]	; (800d02c <TIM_Base_SetConfig+0x128>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d013      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4a27      	ldr	r2, [pc, #156]	; (800d030 <TIM_Base_SetConfig+0x12c>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d00f      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a26      	ldr	r2, [pc, #152]	; (800d034 <TIM_Base_SetConfig+0x130>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d00b      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4a25      	ldr	r2, [pc, #148]	; (800d038 <TIM_Base_SetConfig+0x134>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d007      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4a24      	ldr	r2, [pc, #144]	; (800d03c <TIM_Base_SetConfig+0x138>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d003      	beq.n	800cfb6 <TIM_Base_SetConfig+0xb2>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a23      	ldr	r2, [pc, #140]	; (800d040 <TIM_Base_SetConfig+0x13c>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d108      	bne.n	800cfc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	689a      	ldr	r2, [r3, #8]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4a0a      	ldr	r2, [pc, #40]	; (800d018 <TIM_Base_SetConfig+0x114>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d003      	beq.n	800cffc <TIM_Base_SetConfig+0xf8>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4a0c      	ldr	r2, [pc, #48]	; (800d028 <TIM_Base_SetConfig+0x124>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d103      	bne.n	800d004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	691a      	ldr	r2, [r3, #16]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	615a      	str	r2, [r3, #20]
}
 800d00a:	bf00      	nop
 800d00c:	3714      	adds	r7, #20
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	40010000 	.word	0x40010000
 800d01c:	40000400 	.word	0x40000400
 800d020:	40000800 	.word	0x40000800
 800d024:	40000c00 	.word	0x40000c00
 800d028:	40010400 	.word	0x40010400
 800d02c:	40014000 	.word	0x40014000
 800d030:	40014400 	.word	0x40014400
 800d034:	40014800 	.word	0x40014800
 800d038:	40001800 	.word	0x40001800
 800d03c:	40001c00 	.word	0x40001c00
 800d040:	40002000 	.word	0x40002000

0800d044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d044:	b480      	push	{r7}
 800d046:	b087      	sub	sp, #28
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	f023 0201 	bic.w	r2, r3, #1
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	4b2b      	ldr	r3, [pc, #172]	; (800d11c <TIM_OC1_SetConfig+0xd8>)
 800d070:	4013      	ands	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	4313      	orrs	r3, r2
 800d084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f023 0302 	bic.w	r3, r3, #2
 800d08c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	4313      	orrs	r3, r2
 800d096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a21      	ldr	r2, [pc, #132]	; (800d120 <TIM_OC1_SetConfig+0xdc>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d003      	beq.n	800d0a8 <TIM_OC1_SetConfig+0x64>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a20      	ldr	r2, [pc, #128]	; (800d124 <TIM_OC1_SetConfig+0xe0>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d10c      	bne.n	800d0c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f023 0308 	bic.w	r3, r3, #8
 800d0ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	697a      	ldr	r2, [r7, #20]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	f023 0304 	bic.w	r3, r3, #4
 800d0c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a16      	ldr	r2, [pc, #88]	; (800d120 <TIM_OC1_SetConfig+0xdc>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d003      	beq.n	800d0d2 <TIM_OC1_SetConfig+0x8e>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4a15      	ldr	r2, [pc, #84]	; (800d124 <TIM_OC1_SetConfig+0xe0>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d111      	bne.n	800d0f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	693a      	ldr	r2, [r7, #16]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	699b      	ldr	r3, [r3, #24]
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	693a      	ldr	r2, [r7, #16]
 800d0fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	621a      	str	r2, [r3, #32]
}
 800d110:	bf00      	nop
 800d112:	371c      	adds	r7, #28
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	fffeff8f 	.word	0xfffeff8f
 800d120:	40010000 	.word	0x40010000
 800d124:	40010400 	.word	0x40010400

0800d128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	f023 0210 	bic.w	r2, r3, #16
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4b2e      	ldr	r3, [pc, #184]	; (800d20c <TIM_OC2_SetConfig+0xe4>)
 800d154:	4013      	ands	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d15e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	021b      	lsls	r3, r3, #8
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	4313      	orrs	r3, r2
 800d16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	f023 0320 	bic.w	r3, r3, #32
 800d172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	011b      	lsls	r3, r3, #4
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a23      	ldr	r2, [pc, #140]	; (800d210 <TIM_OC2_SetConfig+0xe8>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d003      	beq.n	800d190 <TIM_OC2_SetConfig+0x68>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a22      	ldr	r2, [pc, #136]	; (800d214 <TIM_OC2_SetConfig+0xec>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d10d      	bne.n	800d1ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a18      	ldr	r2, [pc, #96]	; (800d210 <TIM_OC2_SetConfig+0xe8>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d003      	beq.n	800d1bc <TIM_OC2_SetConfig+0x94>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a17      	ldr	r2, [pc, #92]	; (800d214 <TIM_OC2_SetConfig+0xec>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d113      	bne.n	800d1e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	695b      	ldr	r3, [r3, #20]
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	693a      	ldr	r2, [r7, #16]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	693a      	ldr	r2, [r7, #16]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	685a      	ldr	r2, [r3, #4]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	621a      	str	r2, [r3, #32]
}
 800d1fe:	bf00      	nop
 800d200:	371c      	adds	r7, #28
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	feff8fff 	.word	0xfeff8fff
 800d210:	40010000 	.word	0x40010000
 800d214:	40010400 	.word	0x40010400

0800d218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d218:	b480      	push	{r7}
 800d21a:	b087      	sub	sp, #28
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	69db      	ldr	r3, [r3, #28]
 800d23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	4b2d      	ldr	r3, [pc, #180]	; (800d2f8 <TIM_OC3_SetConfig+0xe0>)
 800d244:	4013      	ands	r3, r2
 800d246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f023 0303 	bic.w	r3, r3, #3
 800d24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	4313      	orrs	r3, r2
 800d258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	021b      	lsls	r3, r3, #8
 800d268:	697a      	ldr	r2, [r7, #20]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a22      	ldr	r2, [pc, #136]	; (800d2fc <TIM_OC3_SetConfig+0xe4>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d003      	beq.n	800d27e <TIM_OC3_SetConfig+0x66>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a21      	ldr	r2, [pc, #132]	; (800d300 <TIM_OC3_SetConfig+0xe8>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d10d      	bne.n	800d29a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	021b      	lsls	r3, r3, #8
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	4313      	orrs	r3, r2
 800d290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a17      	ldr	r2, [pc, #92]	; (800d2fc <TIM_OC3_SetConfig+0xe4>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d003      	beq.n	800d2aa <TIM_OC3_SetConfig+0x92>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4a16      	ldr	r2, [pc, #88]	; (800d300 <TIM_OC3_SetConfig+0xe8>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d113      	bne.n	800d2d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	011b      	lsls	r3, r3, #4
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	011b      	lsls	r3, r3, #4
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	693a      	ldr	r2, [r7, #16]
 800d2d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	685a      	ldr	r2, [r3, #4]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	697a      	ldr	r2, [r7, #20]
 800d2ea:	621a      	str	r2, [r3, #32]
}
 800d2ec:	bf00      	nop
 800d2ee:	371c      	adds	r7, #28
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr
 800d2f8:	fffeff8f 	.word	0xfffeff8f
 800d2fc:	40010000 	.word	0x40010000
 800d300:	40010400 	.word	0x40010400

0800d304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d304:	b480      	push	{r7}
 800d306:	b087      	sub	sp, #28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	4b1e      	ldr	r3, [pc, #120]	; (800d3a8 <TIM_OC4_SetConfig+0xa4>)
 800d330:	4013      	ands	r3, r2
 800d332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d33a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	021b      	lsls	r3, r3, #8
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	4313      	orrs	r3, r2
 800d346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d34e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	031b      	lsls	r3, r3, #12
 800d356:	693a      	ldr	r2, [r7, #16]
 800d358:	4313      	orrs	r3, r2
 800d35a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a13      	ldr	r2, [pc, #76]	; (800d3ac <TIM_OC4_SetConfig+0xa8>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d003      	beq.n	800d36c <TIM_OC4_SetConfig+0x68>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a12      	ldr	r2, [pc, #72]	; (800d3b0 <TIM_OC4_SetConfig+0xac>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d109      	bne.n	800d380 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	695b      	ldr	r3, [r3, #20]
 800d378:	019b      	lsls	r3, r3, #6
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	685a      	ldr	r2, [r3, #4]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	693a      	ldr	r2, [r7, #16]
 800d398:	621a      	str	r2, [r3, #32]
}
 800d39a:	bf00      	nop
 800d39c:	371c      	adds	r7, #28
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	feff8fff 	.word	0xfeff8fff
 800d3ac:	40010000 	.word	0x40010000
 800d3b0:	40010400 	.word	0x40010400

0800d3b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a1b      	ldr	r3, [r3, #32]
 800d3c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a1b      	ldr	r3, [r3, #32]
 800d3ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	4b1b      	ldr	r3, [pc, #108]	; (800d44c <TIM_OC5_SetConfig+0x98>)
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d3f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	041b      	lsls	r3, r3, #16
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a12      	ldr	r2, [pc, #72]	; (800d450 <TIM_OC5_SetConfig+0x9c>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d003      	beq.n	800d412 <TIM_OC5_SetConfig+0x5e>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a11      	ldr	r2, [pc, #68]	; (800d454 <TIM_OC5_SetConfig+0xa0>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d109      	bne.n	800d426 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d418:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	697a      	ldr	r2, [r7, #20]
 800d422:	4313      	orrs	r3, r2
 800d424:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	697a      	ldr	r2, [r7, #20]
 800d42a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	621a      	str	r2, [r3, #32]
}
 800d440:	bf00      	nop
 800d442:	371c      	adds	r7, #28
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	fffeff8f 	.word	0xfffeff8f
 800d450:	40010000 	.word	0x40010000
 800d454:	40010400 	.word	0x40010400

0800d458 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d458:	b480      	push	{r7}
 800d45a:	b087      	sub	sp, #28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	4b1c      	ldr	r3, [pc, #112]	; (800d4f4 <TIM_OC6_SetConfig+0x9c>)
 800d484:	4013      	ands	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	021b      	lsls	r3, r3, #8
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	4313      	orrs	r3, r2
 800d492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d49a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	051b      	lsls	r3, r3, #20
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4a13      	ldr	r2, [pc, #76]	; (800d4f8 <TIM_OC6_SetConfig+0xa0>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d003      	beq.n	800d4b8 <TIM_OC6_SetConfig+0x60>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a12      	ldr	r2, [pc, #72]	; (800d4fc <TIM_OC6_SetConfig+0xa4>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d109      	bne.n	800d4cc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d4be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	029b      	lsls	r3, r3, #10
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	693a      	ldr	r2, [r7, #16]
 800d4e4:	621a      	str	r2, [r3, #32]
}
 800d4e6:	bf00      	nop
 800d4e8:	371c      	adds	r7, #28
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	feff8fff 	.word	0xfeff8fff
 800d4f8:	40010000 	.word	0x40010000
 800d4fc:	40010400 	.word	0x40010400

0800d500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d500:	b480      	push	{r7}
 800d502:	b087      	sub	sp, #28
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6a1b      	ldr	r3, [r3, #32]
 800d510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6a1b      	ldr	r3, [r3, #32]
 800d516:	f023 0201 	bic.w	r2, r3, #1
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d52a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	011b      	lsls	r3, r3, #4
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	4313      	orrs	r3, r2
 800d534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f023 030a 	bic.w	r3, r3, #10
 800d53c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	4313      	orrs	r3, r2
 800d544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	697a      	ldr	r2, [r7, #20]
 800d550:	621a      	str	r2, [r3, #32]
}
 800d552:	bf00      	nop
 800d554:	371c      	adds	r7, #28
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr

0800d55e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d55e:	b480      	push	{r7}
 800d560:	b087      	sub	sp, #28
 800d562:	af00      	add	r7, sp, #0
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6a1b      	ldr	r3, [r3, #32]
 800d56e:	f023 0210 	bic.w	r2, r3, #16
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	699b      	ldr	r3, [r3, #24]
 800d57a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6a1b      	ldr	r3, [r3, #32]
 800d580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	031b      	lsls	r3, r3, #12
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	4313      	orrs	r3, r2
 800d592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d59a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	011b      	lsls	r3, r3, #4
 800d5a0:	693a      	ldr	r2, [r7, #16]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	697a      	ldr	r2, [r7, #20]
 800d5aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	621a      	str	r2, [r3, #32]
}
 800d5b2:	bf00      	nop
 800d5b4:	371c      	adds	r7, #28
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b085      	sub	sp, #20
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	f043 0307 	orr.w	r3, r3, #7
 800d5e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	609a      	str	r2, [r3, #8]
}
 800d5e8:	bf00      	nop
 800d5ea:	3714      	adds	r7, #20
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b087      	sub	sp, #28
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
 800d600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d60e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	021a      	lsls	r2, r3, #8
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	431a      	orrs	r2, r3
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	4313      	orrs	r3, r2
 800d620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	609a      	str	r2, [r3, #8]
}
 800d628:	bf00      	nop
 800d62a:	371c      	adds	r7, #28
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d644:	2b01      	cmp	r3, #1
 800d646:	d101      	bne.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d648:	2302      	movs	r3, #2
 800d64a:	e06d      	b.n	800d728 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a30      	ldr	r2, [pc, #192]	; (800d734 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d004      	beq.n	800d680 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a2f      	ldr	r2, [pc, #188]	; (800d738 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d108      	bne.n	800d692 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d686:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	4313      	orrs	r3, r2
 800d690:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d698:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a20      	ldr	r2, [pc, #128]	; (800d734 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d022      	beq.n	800d6fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6be:	d01d      	beq.n	800d6fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a1d      	ldr	r2, [pc, #116]	; (800d73c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d018      	beq.n	800d6fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a1c      	ldr	r2, [pc, #112]	; (800d740 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d013      	beq.n	800d6fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a1a      	ldr	r2, [pc, #104]	; (800d744 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d00e      	beq.n	800d6fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a15      	ldr	r2, [pc, #84]	; (800d738 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d009      	beq.n	800d6fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a16      	ldr	r2, [pc, #88]	; (800d748 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d004      	beq.n	800d6fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a15      	ldr	r2, [pc, #84]	; (800d74c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d10c      	bne.n	800d716 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d702:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68ba      	ldr	r2, [r7, #8]
 800d714:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2201      	movs	r2, #1
 800d71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	40010000 	.word	0x40010000
 800d738:	40010400 	.word	0x40010400
 800d73c:	40000400 	.word	0x40000400
 800d740:	40000800 	.word	0x40000800
 800d744:	40000c00 	.word	0x40000c00
 800d748:	40014000 	.word	0x40014000
 800d74c:	40001800 	.word	0x40001800

0800d750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d758:	bf00      	nop
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d79a:	2301      	movs	r3, #1
 800d79c:	e040      	b.n	800d820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d106      	bne.n	800d7b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7f9 fe3a 	bl	8007428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2224      	movs	r2, #36	; 0x24
 800d7b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f022 0201 	bic.w	r2, r2, #1
 800d7c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f8be 	bl	800d94c <UART_SetConfig>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d101      	bne.n	800d7da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e022      	b.n	800d820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fb5c 	bl	800dea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	685a      	ldr	r2, [r3, #4]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d7f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	689a      	ldr	r2, [r3, #8]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f042 0201 	orr.w	r2, r2, #1
 800d816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fbe3 	bl	800dfe4 <UART_CheckIdleState>
 800d81e:	4603      	mov	r3, r0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08a      	sub	sp, #40	; 0x28
 800d82c:	af02      	add	r7, sp, #8
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	603b      	str	r3, [r7, #0]
 800d834:	4613      	mov	r3, r2
 800d836:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d83c:	2b20      	cmp	r3, #32
 800d83e:	d17f      	bne.n	800d940 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d002      	beq.n	800d84c <HAL_UART_Transmit+0x24>
 800d846:	88fb      	ldrh	r3, [r7, #6]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d101      	bne.n	800d850 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d84c:	2301      	movs	r3, #1
 800d84e:	e078      	b.n	800d942 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d856:	2b01      	cmp	r3, #1
 800d858:	d101      	bne.n	800d85e <HAL_UART_Transmit+0x36>
 800d85a:	2302      	movs	r3, #2
 800d85c:	e071      	b.n	800d942 <HAL_UART_Transmit+0x11a>
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2201      	movs	r2, #1
 800d862:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2221      	movs	r2, #33	; 0x21
 800d870:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800d872:	f7fa fc31 	bl	80080d8 <HAL_GetTick>
 800d876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	88fa      	ldrh	r2, [r7, #6]
 800d87c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	88fa      	ldrh	r2, [r7, #6]
 800d884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d890:	d108      	bne.n	800d8a4 <HAL_UART_Transmit+0x7c>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d104      	bne.n	800d8a4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800d89a:	2300      	movs	r3, #0
 800d89c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	e003      	b.n	800d8ac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800d8b4:	e02c      	b.n	800d910 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	2180      	movs	r1, #128	; 0x80
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f000 fbd4 	bl	800e06e <UART_WaitOnFlagUntilTimeout>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	e038      	b.n	800d942 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10b      	bne.n	800d8ee <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d8e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	3302      	adds	r3, #2
 800d8ea:	61bb      	str	r3, [r7, #24]
 800d8ec:	e007      	b.n	800d8fe <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	781a      	ldrb	r2, [r3, #0]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d904:	b29b      	uxth	r3, r3
 800d906:	3b01      	subs	r3, #1
 800d908:	b29a      	uxth	r2, r3
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d916:	b29b      	uxth	r3, r3
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1cc      	bne.n	800d8b6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	2200      	movs	r2, #0
 800d924:	2140      	movs	r1, #64	; 0x40
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 fba1 	bl	800e06e <UART_WaitOnFlagUntilTimeout>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d932:	2303      	movs	r3, #3
 800d934:	e005      	b.n	800d942 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2220      	movs	r2, #32
 800d93a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	e000      	b.n	800d942 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800d940:	2302      	movs	r3, #2
  }
}
 800d942:	4618      	mov	r0, r3
 800d944:	3720      	adds	r7, #32
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b088      	sub	sp, #32
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d954:	2300      	movs	r3, #0
 800d956:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689a      	ldr	r2, [r3, #8]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	431a      	orrs	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	695b      	ldr	r3, [r3, #20]
 800d96a:	431a      	orrs	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	69db      	ldr	r3, [r3, #28]
 800d970:	4313      	orrs	r3, r2
 800d972:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	4bb1      	ldr	r3, [pc, #708]	; (800dc40 <UART_SetConfig+0x2f4>)
 800d97c:	4013      	ands	r3, r2
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	6812      	ldr	r2, [r2, #0]
 800d982:	6939      	ldr	r1, [r7, #16]
 800d984:	430b      	orrs	r3, r1
 800d986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68da      	ldr	r2, [r3, #12]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	430a      	orrs	r2, r1
 800d99c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a1b      	ldr	r3, [r3, #32]
 800d9a8:	693a      	ldr	r2, [r7, #16]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a9f      	ldr	r2, [pc, #636]	; (800dc44 <UART_SetConfig+0x2f8>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d121      	bne.n	800da10 <UART_SetConfig+0xc4>
 800d9cc:	4b9e      	ldr	r3, [pc, #632]	; (800dc48 <UART_SetConfig+0x2fc>)
 800d9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9d2:	f003 0303 	and.w	r3, r3, #3
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	d816      	bhi.n	800da08 <UART_SetConfig+0xbc>
 800d9da:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <UART_SetConfig+0x94>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800d9f1 	.word	0x0800d9f1
 800d9e4:	0800d9fd 	.word	0x0800d9fd
 800d9e8:	0800d9f7 	.word	0x0800d9f7
 800d9ec:	0800da03 	.word	0x0800da03
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	77fb      	strb	r3, [r7, #31]
 800d9f4:	e151      	b.n	800dc9a <UART_SetConfig+0x34e>
 800d9f6:	2302      	movs	r3, #2
 800d9f8:	77fb      	strb	r3, [r7, #31]
 800d9fa:	e14e      	b.n	800dc9a <UART_SetConfig+0x34e>
 800d9fc:	2304      	movs	r3, #4
 800d9fe:	77fb      	strb	r3, [r7, #31]
 800da00:	e14b      	b.n	800dc9a <UART_SetConfig+0x34e>
 800da02:	2308      	movs	r3, #8
 800da04:	77fb      	strb	r3, [r7, #31]
 800da06:	e148      	b.n	800dc9a <UART_SetConfig+0x34e>
 800da08:	2310      	movs	r3, #16
 800da0a:	77fb      	strb	r3, [r7, #31]
 800da0c:	bf00      	nop
 800da0e:	e144      	b.n	800dc9a <UART_SetConfig+0x34e>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a8d      	ldr	r2, [pc, #564]	; (800dc4c <UART_SetConfig+0x300>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d134      	bne.n	800da84 <UART_SetConfig+0x138>
 800da1a:	4b8b      	ldr	r3, [pc, #556]	; (800dc48 <UART_SetConfig+0x2fc>)
 800da1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da20:	f003 030c 	and.w	r3, r3, #12
 800da24:	2b0c      	cmp	r3, #12
 800da26:	d829      	bhi.n	800da7c <UART_SetConfig+0x130>
 800da28:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <UART_SetConfig+0xe4>)
 800da2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2e:	bf00      	nop
 800da30:	0800da65 	.word	0x0800da65
 800da34:	0800da7d 	.word	0x0800da7d
 800da38:	0800da7d 	.word	0x0800da7d
 800da3c:	0800da7d 	.word	0x0800da7d
 800da40:	0800da71 	.word	0x0800da71
 800da44:	0800da7d 	.word	0x0800da7d
 800da48:	0800da7d 	.word	0x0800da7d
 800da4c:	0800da7d 	.word	0x0800da7d
 800da50:	0800da6b 	.word	0x0800da6b
 800da54:	0800da7d 	.word	0x0800da7d
 800da58:	0800da7d 	.word	0x0800da7d
 800da5c:	0800da7d 	.word	0x0800da7d
 800da60:	0800da77 	.word	0x0800da77
 800da64:	2300      	movs	r3, #0
 800da66:	77fb      	strb	r3, [r7, #31]
 800da68:	e117      	b.n	800dc9a <UART_SetConfig+0x34e>
 800da6a:	2302      	movs	r3, #2
 800da6c:	77fb      	strb	r3, [r7, #31]
 800da6e:	e114      	b.n	800dc9a <UART_SetConfig+0x34e>
 800da70:	2304      	movs	r3, #4
 800da72:	77fb      	strb	r3, [r7, #31]
 800da74:	e111      	b.n	800dc9a <UART_SetConfig+0x34e>
 800da76:	2308      	movs	r3, #8
 800da78:	77fb      	strb	r3, [r7, #31]
 800da7a:	e10e      	b.n	800dc9a <UART_SetConfig+0x34e>
 800da7c:	2310      	movs	r3, #16
 800da7e:	77fb      	strb	r3, [r7, #31]
 800da80:	bf00      	nop
 800da82:	e10a      	b.n	800dc9a <UART_SetConfig+0x34e>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a71      	ldr	r2, [pc, #452]	; (800dc50 <UART_SetConfig+0x304>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d120      	bne.n	800dad0 <UART_SetConfig+0x184>
 800da8e:	4b6e      	ldr	r3, [pc, #440]	; (800dc48 <UART_SetConfig+0x2fc>)
 800da90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800da98:	2b10      	cmp	r3, #16
 800da9a:	d00f      	beq.n	800dabc <UART_SetConfig+0x170>
 800da9c:	2b10      	cmp	r3, #16
 800da9e:	d802      	bhi.n	800daa6 <UART_SetConfig+0x15a>
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d005      	beq.n	800dab0 <UART_SetConfig+0x164>
 800daa4:	e010      	b.n	800dac8 <UART_SetConfig+0x17c>
 800daa6:	2b20      	cmp	r3, #32
 800daa8:	d005      	beq.n	800dab6 <UART_SetConfig+0x16a>
 800daaa:	2b30      	cmp	r3, #48	; 0x30
 800daac:	d009      	beq.n	800dac2 <UART_SetConfig+0x176>
 800daae:	e00b      	b.n	800dac8 <UART_SetConfig+0x17c>
 800dab0:	2300      	movs	r3, #0
 800dab2:	77fb      	strb	r3, [r7, #31]
 800dab4:	e0f1      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dab6:	2302      	movs	r3, #2
 800dab8:	77fb      	strb	r3, [r7, #31]
 800daba:	e0ee      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dabc:	2304      	movs	r3, #4
 800dabe:	77fb      	strb	r3, [r7, #31]
 800dac0:	e0eb      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dac2:	2308      	movs	r3, #8
 800dac4:	77fb      	strb	r3, [r7, #31]
 800dac6:	e0e8      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dac8:	2310      	movs	r3, #16
 800daca:	77fb      	strb	r3, [r7, #31]
 800dacc:	bf00      	nop
 800dace:	e0e4      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a5f      	ldr	r2, [pc, #380]	; (800dc54 <UART_SetConfig+0x308>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d120      	bne.n	800db1c <UART_SetConfig+0x1d0>
 800dada:	4b5b      	ldr	r3, [pc, #364]	; (800dc48 <UART_SetConfig+0x2fc>)
 800dadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dae0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dae4:	2b40      	cmp	r3, #64	; 0x40
 800dae6:	d00f      	beq.n	800db08 <UART_SetConfig+0x1bc>
 800dae8:	2b40      	cmp	r3, #64	; 0x40
 800daea:	d802      	bhi.n	800daf2 <UART_SetConfig+0x1a6>
 800daec:	2b00      	cmp	r3, #0
 800daee:	d005      	beq.n	800dafc <UART_SetConfig+0x1b0>
 800daf0:	e010      	b.n	800db14 <UART_SetConfig+0x1c8>
 800daf2:	2b80      	cmp	r3, #128	; 0x80
 800daf4:	d005      	beq.n	800db02 <UART_SetConfig+0x1b6>
 800daf6:	2bc0      	cmp	r3, #192	; 0xc0
 800daf8:	d009      	beq.n	800db0e <UART_SetConfig+0x1c2>
 800dafa:	e00b      	b.n	800db14 <UART_SetConfig+0x1c8>
 800dafc:	2300      	movs	r3, #0
 800dafe:	77fb      	strb	r3, [r7, #31]
 800db00:	e0cb      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db02:	2302      	movs	r3, #2
 800db04:	77fb      	strb	r3, [r7, #31]
 800db06:	e0c8      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db08:	2304      	movs	r3, #4
 800db0a:	77fb      	strb	r3, [r7, #31]
 800db0c:	e0c5      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db0e:	2308      	movs	r3, #8
 800db10:	77fb      	strb	r3, [r7, #31]
 800db12:	e0c2      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db14:	2310      	movs	r3, #16
 800db16:	77fb      	strb	r3, [r7, #31]
 800db18:	bf00      	nop
 800db1a:	e0be      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a4d      	ldr	r2, [pc, #308]	; (800dc58 <UART_SetConfig+0x30c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d124      	bne.n	800db70 <UART_SetConfig+0x224>
 800db26:	4b48      	ldr	r3, [pc, #288]	; (800dc48 <UART_SetConfig+0x2fc>)
 800db28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db34:	d012      	beq.n	800db5c <UART_SetConfig+0x210>
 800db36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db3a:	d802      	bhi.n	800db42 <UART_SetConfig+0x1f6>
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d007      	beq.n	800db50 <UART_SetConfig+0x204>
 800db40:	e012      	b.n	800db68 <UART_SetConfig+0x21c>
 800db42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db46:	d006      	beq.n	800db56 <UART_SetConfig+0x20a>
 800db48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db4c:	d009      	beq.n	800db62 <UART_SetConfig+0x216>
 800db4e:	e00b      	b.n	800db68 <UART_SetConfig+0x21c>
 800db50:	2300      	movs	r3, #0
 800db52:	77fb      	strb	r3, [r7, #31]
 800db54:	e0a1      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db56:	2302      	movs	r3, #2
 800db58:	77fb      	strb	r3, [r7, #31]
 800db5a:	e09e      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db5c:	2304      	movs	r3, #4
 800db5e:	77fb      	strb	r3, [r7, #31]
 800db60:	e09b      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db62:	2308      	movs	r3, #8
 800db64:	77fb      	strb	r3, [r7, #31]
 800db66:	e098      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db68:	2310      	movs	r3, #16
 800db6a:	77fb      	strb	r3, [r7, #31]
 800db6c:	bf00      	nop
 800db6e:	e094      	b.n	800dc9a <UART_SetConfig+0x34e>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a39      	ldr	r2, [pc, #228]	; (800dc5c <UART_SetConfig+0x310>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d124      	bne.n	800dbc4 <UART_SetConfig+0x278>
 800db7a:	4b33      	ldr	r3, [pc, #204]	; (800dc48 <UART_SetConfig+0x2fc>)
 800db7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800db84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db88:	d012      	beq.n	800dbb0 <UART_SetConfig+0x264>
 800db8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db8e:	d802      	bhi.n	800db96 <UART_SetConfig+0x24a>
 800db90:	2b00      	cmp	r3, #0
 800db92:	d007      	beq.n	800dba4 <UART_SetConfig+0x258>
 800db94:	e012      	b.n	800dbbc <UART_SetConfig+0x270>
 800db96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db9a:	d006      	beq.n	800dbaa <UART_SetConfig+0x25e>
 800db9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dba0:	d009      	beq.n	800dbb6 <UART_SetConfig+0x26a>
 800dba2:	e00b      	b.n	800dbbc <UART_SetConfig+0x270>
 800dba4:	2301      	movs	r3, #1
 800dba6:	77fb      	strb	r3, [r7, #31]
 800dba8:	e077      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dbaa:	2302      	movs	r3, #2
 800dbac:	77fb      	strb	r3, [r7, #31]
 800dbae:	e074      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dbb0:	2304      	movs	r3, #4
 800dbb2:	77fb      	strb	r3, [r7, #31]
 800dbb4:	e071      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dbb6:	2308      	movs	r3, #8
 800dbb8:	77fb      	strb	r3, [r7, #31]
 800dbba:	e06e      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dbbc:	2310      	movs	r3, #16
 800dbbe:	77fb      	strb	r3, [r7, #31]
 800dbc0:	bf00      	nop
 800dbc2:	e06a      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a25      	ldr	r2, [pc, #148]	; (800dc60 <UART_SetConfig+0x314>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d124      	bne.n	800dc18 <UART_SetConfig+0x2cc>
 800dbce:	4b1e      	ldr	r3, [pc, #120]	; (800dc48 <UART_SetConfig+0x2fc>)
 800dbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbd4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800dbd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbdc:	d012      	beq.n	800dc04 <UART_SetConfig+0x2b8>
 800dbde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbe2:	d802      	bhi.n	800dbea <UART_SetConfig+0x29e>
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d007      	beq.n	800dbf8 <UART_SetConfig+0x2ac>
 800dbe8:	e012      	b.n	800dc10 <UART_SetConfig+0x2c4>
 800dbea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbee:	d006      	beq.n	800dbfe <UART_SetConfig+0x2b2>
 800dbf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dbf4:	d009      	beq.n	800dc0a <UART_SetConfig+0x2be>
 800dbf6:	e00b      	b.n	800dc10 <UART_SetConfig+0x2c4>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	77fb      	strb	r3, [r7, #31]
 800dbfc:	e04d      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dbfe:	2302      	movs	r3, #2
 800dc00:	77fb      	strb	r3, [r7, #31]
 800dc02:	e04a      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc04:	2304      	movs	r3, #4
 800dc06:	77fb      	strb	r3, [r7, #31]
 800dc08:	e047      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc0a:	2308      	movs	r3, #8
 800dc0c:	77fb      	strb	r3, [r7, #31]
 800dc0e:	e044      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc10:	2310      	movs	r3, #16
 800dc12:	77fb      	strb	r3, [r7, #31]
 800dc14:	bf00      	nop
 800dc16:	e040      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a11      	ldr	r2, [pc, #68]	; (800dc64 <UART_SetConfig+0x318>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d139      	bne.n	800dc96 <UART_SetConfig+0x34a>
 800dc22:	4b09      	ldr	r3, [pc, #36]	; (800dc48 <UART_SetConfig+0x2fc>)
 800dc24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dc2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc30:	d027      	beq.n	800dc82 <UART_SetConfig+0x336>
 800dc32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc36:	d817      	bhi.n	800dc68 <UART_SetConfig+0x31c>
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d01c      	beq.n	800dc76 <UART_SetConfig+0x32a>
 800dc3c:	e027      	b.n	800dc8e <UART_SetConfig+0x342>
 800dc3e:	bf00      	nop
 800dc40:	efff69f3 	.word	0xefff69f3
 800dc44:	40011000 	.word	0x40011000
 800dc48:	40023800 	.word	0x40023800
 800dc4c:	40004400 	.word	0x40004400
 800dc50:	40004800 	.word	0x40004800
 800dc54:	40004c00 	.word	0x40004c00
 800dc58:	40005000 	.word	0x40005000
 800dc5c:	40011400 	.word	0x40011400
 800dc60:	40007800 	.word	0x40007800
 800dc64:	40007c00 	.word	0x40007c00
 800dc68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc6c:	d006      	beq.n	800dc7c <UART_SetConfig+0x330>
 800dc6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dc72:	d009      	beq.n	800dc88 <UART_SetConfig+0x33c>
 800dc74:	e00b      	b.n	800dc8e <UART_SetConfig+0x342>
 800dc76:	2300      	movs	r3, #0
 800dc78:	77fb      	strb	r3, [r7, #31]
 800dc7a:	e00e      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc7c:	2302      	movs	r3, #2
 800dc7e:	77fb      	strb	r3, [r7, #31]
 800dc80:	e00b      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc82:	2304      	movs	r3, #4
 800dc84:	77fb      	strb	r3, [r7, #31]
 800dc86:	e008      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc88:	2308      	movs	r3, #8
 800dc8a:	77fb      	strb	r3, [r7, #31]
 800dc8c:	e005      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc8e:	2310      	movs	r3, #16
 800dc90:	77fb      	strb	r3, [r7, #31]
 800dc92:	bf00      	nop
 800dc94:	e001      	b.n	800dc9a <UART_SetConfig+0x34e>
 800dc96:	2310      	movs	r3, #16
 800dc98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dca2:	d17f      	bne.n	800dda4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800dca4:	7ffb      	ldrb	r3, [r7, #31]
 800dca6:	2b08      	cmp	r3, #8
 800dca8:	d85c      	bhi.n	800dd64 <UART_SetConfig+0x418>
 800dcaa:	a201      	add	r2, pc, #4	; (adr r2, 800dcb0 <UART_SetConfig+0x364>)
 800dcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb0:	0800dcd5 	.word	0x0800dcd5
 800dcb4:	0800dcf5 	.word	0x0800dcf5
 800dcb8:	0800dd15 	.word	0x0800dd15
 800dcbc:	0800dd65 	.word	0x0800dd65
 800dcc0:	0800dd2d 	.word	0x0800dd2d
 800dcc4:	0800dd65 	.word	0x0800dd65
 800dcc8:	0800dd65 	.word	0x0800dd65
 800dccc:	0800dd65 	.word	0x0800dd65
 800dcd0:	0800dd4d 	.word	0x0800dd4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcd4:	f7fd fc16 	bl	800b504 <HAL_RCC_GetPCLK1Freq>
 800dcd8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	005a      	lsls	r2, r3, #1
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	085b      	lsrs	r3, r3, #1
 800dce4:	441a      	add	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	61bb      	str	r3, [r7, #24]
        break;
 800dcf2:	e03a      	b.n	800dd6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dcf4:	f7fd fc1a 	bl	800b52c <HAL_RCC_GetPCLK2Freq>
 800dcf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	005a      	lsls	r2, r3, #1
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	085b      	lsrs	r3, r3, #1
 800dd04:	441a      	add	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	61bb      	str	r3, [r7, #24]
        break;
 800dd12:	e02a      	b.n	800dd6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	085a      	lsrs	r2, r3, #1
 800dd1a:	4b5f      	ldr	r3, [pc, #380]	; (800de98 <UART_SetConfig+0x54c>)
 800dd1c:	4413      	add	r3, r2
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	6852      	ldr	r2, [r2, #4]
 800dd22:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	61bb      	str	r3, [r7, #24]
        break;
 800dd2a:	e01e      	b.n	800dd6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd2c:	f7fd fb2c 	bl	800b388 <HAL_RCC_GetSysClockFreq>
 800dd30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	005a      	lsls	r2, r3, #1
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	085b      	lsrs	r3, r3, #1
 800dd3c:	441a      	add	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	61bb      	str	r3, [r7, #24]
        break;
 800dd4a:	e00e      	b.n	800dd6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	085b      	lsrs	r3, r3, #1
 800dd52:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	61bb      	str	r3, [r7, #24]
        break;
 800dd62:	e002      	b.n	800dd6a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800dd64:	2301      	movs	r3, #1
 800dd66:	75fb      	strb	r3, [r7, #23]
        break;
 800dd68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	2b0f      	cmp	r3, #15
 800dd6e:	d916      	bls.n	800dd9e <UART_SetConfig+0x452>
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd76:	d212      	bcs.n	800dd9e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	f023 030f 	bic.w	r3, r3, #15
 800dd80:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	085b      	lsrs	r3, r3, #1
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	f003 0307 	and.w	r3, r3, #7
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	897b      	ldrh	r3, [r7, #10]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	897a      	ldrh	r2, [r7, #10]
 800dd9a:	60da      	str	r2, [r3, #12]
 800dd9c:	e070      	b.n	800de80 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	75fb      	strb	r3, [r7, #23]
 800dda2:	e06d      	b.n	800de80 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800dda4:	7ffb      	ldrb	r3, [r7, #31]
 800dda6:	2b08      	cmp	r3, #8
 800dda8:	d859      	bhi.n	800de5e <UART_SetConfig+0x512>
 800ddaa:	a201      	add	r2, pc, #4	; (adr r2, 800ddb0 <UART_SetConfig+0x464>)
 800ddac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb0:	0800ddd5 	.word	0x0800ddd5
 800ddb4:	0800ddf3 	.word	0x0800ddf3
 800ddb8:	0800de11 	.word	0x0800de11
 800ddbc:	0800de5f 	.word	0x0800de5f
 800ddc0:	0800de29 	.word	0x0800de29
 800ddc4:	0800de5f 	.word	0x0800de5f
 800ddc8:	0800de5f 	.word	0x0800de5f
 800ddcc:	0800de5f 	.word	0x0800de5f
 800ddd0:	0800de47 	.word	0x0800de47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddd4:	f7fd fb96 	bl	800b504 <HAL_RCC_GetPCLK1Freq>
 800ddd8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	085a      	lsrs	r2, r3, #1
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	441a      	add	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	61bb      	str	r3, [r7, #24]
        break;
 800ddf0:	e038      	b.n	800de64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddf2:	f7fd fb9b 	bl	800b52c <HAL_RCC_GetPCLK2Freq>
 800ddf6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	085a      	lsrs	r2, r3, #1
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	441a      	add	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	fbb2 f3f3 	udiv	r3, r2, r3
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	61bb      	str	r3, [r7, #24]
        break;
 800de0e:	e029      	b.n	800de64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	085a      	lsrs	r2, r3, #1
 800de16:	4b21      	ldr	r3, [pc, #132]	; (800de9c <UART_SetConfig+0x550>)
 800de18:	4413      	add	r3, r2
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	6852      	ldr	r2, [r2, #4]
 800de1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800de22:	b29b      	uxth	r3, r3
 800de24:	61bb      	str	r3, [r7, #24]
        break;
 800de26:	e01d      	b.n	800de64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de28:	f7fd faae 	bl	800b388 <HAL_RCC_GetSysClockFreq>
 800de2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	085a      	lsrs	r2, r3, #1
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	441a      	add	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800de40:	b29b      	uxth	r3, r3
 800de42:	61bb      	str	r3, [r7, #24]
        break;
 800de44:	e00e      	b.n	800de64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	085b      	lsrs	r3, r3, #1
 800de4c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	fbb2 f3f3 	udiv	r3, r2, r3
 800de58:	b29b      	uxth	r3, r3
 800de5a:	61bb      	str	r3, [r7, #24]
        break;
 800de5c:	e002      	b.n	800de64 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	75fb      	strb	r3, [r7, #23]
        break;
 800de62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	2b0f      	cmp	r3, #15
 800de68:	d908      	bls.n	800de7c <UART_SetConfig+0x530>
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de70:	d204      	bcs.n	800de7c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	69ba      	ldr	r2, [r7, #24]
 800de78:	60da      	str	r2, [r3, #12]
 800de7a:	e001      	b.n	800de80 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3720      	adds	r7, #32
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	01e84800 	.word	0x01e84800
 800de9c:	00f42400 	.word	0x00f42400

0800dea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deac:	f003 0301 	and.w	r3, r3, #1
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00a      	beq.n	800deca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	430a      	orrs	r2, r1
 800dec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dece:	f003 0302 	and.w	r3, r3, #2
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00a      	beq.n	800deec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	430a      	orrs	r2, r1
 800deea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def0:	f003 0304 	and.w	r3, r3, #4
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00a      	beq.n	800df0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	430a      	orrs	r2, r1
 800df0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df12:	f003 0308 	and.w	r3, r3, #8
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	430a      	orrs	r2, r1
 800df2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df34:	f003 0310 	and.w	r3, r3, #16
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00a      	beq.n	800df52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	430a      	orrs	r2, r1
 800df50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df56:	f003 0320 	and.w	r3, r3, #32
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00a      	beq.n	800df74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	430a      	orrs	r2, r1
 800df72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d01a      	beq.n	800dfb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	430a      	orrs	r2, r1
 800df94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df9e:	d10a      	bne.n	800dfb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	430a      	orrs	r2, r1
 800dfb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00a      	beq.n	800dfd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	430a      	orrs	r2, r1
 800dfd6:	605a      	str	r2, [r3, #4]
  }
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af02      	add	r7, sp, #8
 800dfea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800dff2:	f7fa f871 	bl	80080d8 <HAL_GetTick>
 800dff6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f003 0308 	and.w	r3, r3, #8
 800e002:	2b08      	cmp	r3, #8
 800e004:	d10e      	bne.n	800e024 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e006:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e00a:	9300      	str	r3, [sp, #0]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 f82a 	bl	800e06e <UART_WaitOnFlagUntilTimeout>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e020:	2303      	movs	r3, #3
 800e022:	e020      	b.n	800e066 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f003 0304 	and.w	r3, r3, #4
 800e02e:	2b04      	cmp	r3, #4
 800e030:	d10e      	bne.n	800e050 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e032:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 f814 	bl	800e06e <UART_WaitOnFlagUntilTimeout>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d001      	beq.n	800e050 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e00a      	b.n	800e066 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2220      	movs	r2, #32
 800e054:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2220      	movs	r2, #32
 800e05a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b084      	sub	sp, #16
 800e072:	af00      	add	r7, sp, #0
 800e074:	60f8      	str	r0, [r7, #12]
 800e076:	60b9      	str	r1, [r7, #8]
 800e078:	603b      	str	r3, [r7, #0]
 800e07a:	4613      	mov	r3, r2
 800e07c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e07e:	e05d      	b.n	800e13c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e086:	d059      	beq.n	800e13c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e088:	f7fa f826 	bl	80080d8 <HAL_GetTick>
 800e08c:	4602      	mov	r2, r0
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	69ba      	ldr	r2, [r7, #24]
 800e094:	429a      	cmp	r2, r3
 800e096:	d302      	bcc.n	800e09e <UART_WaitOnFlagUntilTimeout+0x30>
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d11b      	bne.n	800e0d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e0ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	689a      	ldr	r2, [r3, #8]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f022 0201 	bic.w	r2, r2, #1
 800e0bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2220      	movs	r2, #32
 800e0c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2220      	movs	r2, #32
 800e0c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	e042      	b.n	800e15c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f003 0304 	and.w	r3, r3, #4
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d02b      	beq.n	800e13c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	69db      	ldr	r3, [r3, #28]
 800e0ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0f2:	d123      	bne.n	800e13c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0fc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e10c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	689a      	ldr	r2, [r3, #8]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f022 0201 	bic.w	r2, r2, #1
 800e11c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2220      	movs	r2, #32
 800e122:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2220      	movs	r2, #32
 800e128:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2220      	movs	r2, #32
 800e12e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800e138:	2303      	movs	r3, #3
 800e13a:	e00f      	b.n	800e15c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	69da      	ldr	r2, [r3, #28]
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	4013      	ands	r3, r2
 800e146:	68ba      	ldr	r2, [r7, #8]
 800e148:	429a      	cmp	r2, r3
 800e14a:	bf0c      	ite	eq
 800e14c:	2301      	moveq	r3, #1
 800e14e:	2300      	movne	r3, #0
 800e150:	b2db      	uxtb	r3, r3
 800e152:	461a      	mov	r2, r3
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	429a      	cmp	r2, r3
 800e158:	d092      	beq.n	800e080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e164:	b084      	sub	sp, #16
 800e166:	b580      	push	{r7, lr}
 800e168:	b084      	sub	sp, #16
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
 800e16e:	f107 001c 	add.w	r0, r7, #28
 800e172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d120      	bne.n	800e1be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	68da      	ldr	r2, [r3, #12]
 800e18c:	4b20      	ldr	r3, [pc, #128]	; (800e210 <USB_CoreInit+0xac>)
 800e18e:	4013      	ands	r3, r2
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d105      	bne.n	800e1b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 fa52 	bl	800e65c <USB_CoreReset>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	73fb      	strb	r3, [r7, #15]
 800e1bc:	e010      	b.n	800e1e0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 fa46 	bl	800e65c <USB_CoreReset>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d10b      	bne.n	800e1fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f043 0206 	orr.w	r2, r3, #6
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	f043 0220 	orr.w	r2, r3, #32
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e20a:	b004      	add	sp, #16
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	ffbdffbf 	.word	0xffbdffbf

0800e214 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	f023 0201 	bic.w	r2, r3, #1
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	370c      	adds	r7, #12
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr

0800e236 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b082      	sub	sp, #8
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	460b      	mov	r3, r1
 800e240:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e24e:	78fb      	ldrb	r3, [r7, #3]
 800e250:	2b01      	cmp	r3, #1
 800e252:	d106      	bne.n	800e262 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	60da      	str	r2, [r3, #12]
 800e260:	e00b      	b.n	800e27a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e262:	78fb      	ldrb	r3, [r7, #3]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d106      	bne.n	800e276 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	60da      	str	r2, [r3, #12]
 800e274:	e001      	b.n	800e27a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	e003      	b.n	800e282 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e27a:	2032      	movs	r0, #50	; 0x32
 800e27c:	f7f9 ff38 	bl	80080f0 <HAL_Delay>

  return HAL_OK;
 800e280:	2300      	movs	r3, #0
}
 800e282:	4618      	mov	r0, r3
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
	...

0800e28c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e28c:	b084      	sub	sp, #16
 800e28e:	b580      	push	{r7, lr}
 800e290:	b086      	sub	sp, #24
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e29a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	613b      	str	r3, [r7, #16]
 800e2aa:	e009      	b.n	800e2c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	3340      	adds	r3, #64	; 0x40
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	4413      	add	r3, r2
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	613b      	str	r3, [r7, #16]
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	2b0e      	cmp	r3, #14
 800e2c4:	d9f2      	bls.n	800e2ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d11c      	bne.n	800e306 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2da:	f043 0302 	orr.w	r3, r3, #2
 800e2de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	e005      	b.n	800e312 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e30a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e318:	461a      	mov	r2, r3
 800e31a:	2300      	movs	r3, #0
 800e31c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e324:	4619      	mov	r1, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e32c:	461a      	mov	r2, r3
 800e32e:	680b      	ldr	r3, [r1, #0]
 800e330:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e334:	2b01      	cmp	r3, #1
 800e336:	d10c      	bne.n	800e352 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d104      	bne.n	800e348 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e33e:	2100      	movs	r1, #0
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 f959 	bl	800e5f8 <USB_SetDevSpeed>
 800e346:	e018      	b.n	800e37a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e348:	2101      	movs	r1, #1
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f954 	bl	800e5f8 <USB_SetDevSpeed>
 800e350:	e013      	b.n	800e37a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e354:	2b03      	cmp	r3, #3
 800e356:	d10c      	bne.n	800e372 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d104      	bne.n	800e368 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e35e:	2100      	movs	r1, #0
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f949 	bl	800e5f8 <USB_SetDevSpeed>
 800e366:	e008      	b.n	800e37a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e368:	2101      	movs	r1, #1
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f944 	bl	800e5f8 <USB_SetDevSpeed>
 800e370:	e003      	b.n	800e37a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e372:	2103      	movs	r1, #3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 f93f 	bl	800e5f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e37a:	2110      	movs	r1, #16
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 f8f3 	bl	800e568 <USB_FlushTxFifo>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d001      	beq.n	800e38c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 f911 	bl	800e5b4 <USB_FlushRxFifo>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	2300      	movs	r3, #0
 800e3be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	613b      	str	r3, [r7, #16]
 800e3c4:	e043      	b.n	800e44e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	015a      	lsls	r2, r3, #5
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3dc:	d118      	bne.n	800e410 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10a      	bne.n	800e3fa <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	015a      	lsls	r2, r3, #5
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e3f6:	6013      	str	r3, [r2, #0]
 800e3f8:	e013      	b.n	800e422 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	015a      	lsls	r2, r3, #5
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	4413      	add	r3, r2
 800e402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e406:	461a      	mov	r2, r3
 800e408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e40c:	6013      	str	r3, [r2, #0]
 800e40e:	e008      	b.n	800e422 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	015a      	lsls	r2, r3, #5
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	4413      	add	r3, r2
 800e418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e41c:	461a      	mov	r2, r3
 800e41e:	2300      	movs	r3, #0
 800e420:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	015a      	lsls	r2, r3, #5
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	4413      	add	r3, r2
 800e42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e42e:	461a      	mov	r2, r3
 800e430:	2300      	movs	r3, #0
 800e432:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	015a      	lsls	r2, r3, #5
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	4413      	add	r3, r2
 800e43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e440:	461a      	mov	r2, r3
 800e442:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e446:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	3301      	adds	r3, #1
 800e44c:	613b      	str	r3, [r7, #16]
 800e44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e450:	693a      	ldr	r2, [r7, #16]
 800e452:	429a      	cmp	r2, r3
 800e454:	d3b7      	bcc.n	800e3c6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e456:	2300      	movs	r3, #0
 800e458:	613b      	str	r3, [r7, #16]
 800e45a:	e043      	b.n	800e4e4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	015a      	lsls	r2, r3, #5
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	4413      	add	r3, r2
 800e464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e46e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e472:	d118      	bne.n	800e4a6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d10a      	bne.n	800e490 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	015a      	lsls	r2, r3, #5
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	4413      	add	r3, r2
 800e482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e486:	461a      	mov	r2, r3
 800e488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e48c:	6013      	str	r3, [r2, #0]
 800e48e:	e013      	b.n	800e4b8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	015a      	lsls	r2, r3, #5
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	4413      	add	r3, r2
 800e498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e49c:	461a      	mov	r2, r3
 800e49e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e4a2:	6013      	str	r3, [r2, #0]
 800e4a4:	e008      	b.n	800e4b8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	015a      	lsls	r2, r3, #5
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	015a      	lsls	r2, r3, #5
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	015a      	lsls	r2, r3, #5
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e4dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	613b      	str	r3, [r7, #16]
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d3b7      	bcc.n	800e45c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e50c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e510:	2b00      	cmp	r3, #0
 800e512:	d105      	bne.n	800e520 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	f043 0210 	orr.w	r2, r3, #16
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	699a      	ldr	r2, [r3, #24]
 800e524:	4b0e      	ldr	r3, [pc, #56]	; (800e560 <USB_DevInit+0x2d4>)
 800e526:	4313      	orrs	r3, r2
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d005      	beq.n	800e53e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	699b      	ldr	r3, [r3, #24]
 800e536:	f043 0208 	orr.w	r2, r3, #8
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e53e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e540:	2b01      	cmp	r3, #1
 800e542:	d105      	bne.n	800e550 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	699a      	ldr	r2, [r3, #24]
 800e548:	4b06      	ldr	r3, [pc, #24]	; (800e564 <USB_DevInit+0x2d8>)
 800e54a:	4313      	orrs	r3, r2
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e550:	7dfb      	ldrb	r3, [r7, #23]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3718      	adds	r7, #24
 800e556:	46bd      	mov	sp, r7
 800e558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e55c:	b004      	add	sp, #16
 800e55e:	4770      	bx	lr
 800e560:	803c3800 	.word	0x803c3800
 800e564:	40000004 	.word	0x40000004

0800e568 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e572:	2300      	movs	r3, #0
 800e574:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	019b      	lsls	r3, r3, #6
 800e57a:	f043 0220 	orr.w	r2, r3, #32
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	3301      	adds	r3, #1
 800e586:	60fb      	str	r3, [r7, #12]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	4a09      	ldr	r2, [pc, #36]	; (800e5b0 <USB_FlushTxFifo+0x48>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d901      	bls.n	800e594 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e590:	2303      	movs	r3, #3
 800e592:	e006      	b.n	800e5a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	691b      	ldr	r3, [r3, #16]
 800e598:	f003 0320 	and.w	r3, r3, #32
 800e59c:	2b20      	cmp	r3, #32
 800e59e:	d0f0      	beq.n	800e582 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3714      	adds	r7, #20
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	00030d40 	.word	0x00030d40

0800e5b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2210      	movs	r2, #16
 800e5c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	60fb      	str	r3, [r7, #12]
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	4a09      	ldr	r2, [pc, #36]	; (800e5f4 <USB_FlushRxFifo+0x40>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d901      	bls.n	800e5d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	e006      	b.n	800e5e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	f003 0310 	and.w	r3, r3, #16
 800e5e0:	2b10      	cmp	r3, #16
 800e5e2:	d0f0      	beq.n	800e5c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop
 800e5f4:	00030d40 	.word	0x00030d40

0800e5f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	460b      	mov	r3, r1
 800e602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	68f9      	ldr	r1, [r7, #12]
 800e614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e618:	4313      	orrs	r3, r2
 800e61a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b084      	sub	sp, #16
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e644:	f043 0302 	orr.w	r3, r3, #2
 800e648:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e64a:	2003      	movs	r0, #3
 800e64c:	f7f9 fd50 	bl	80080f0 <HAL_Delay>

  return HAL_OK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
	...

0800e65c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3301      	adds	r3, #1
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	4a13      	ldr	r2, [pc, #76]	; (800e6c0 <USB_CoreReset+0x64>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d901      	bls.n	800e67a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e676:	2303      	movs	r3, #3
 800e678:	e01b      	b.n	800e6b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	daf2      	bge.n	800e668 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e682:	2300      	movs	r3, #0
 800e684:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	f043 0201 	orr.w	r2, r3, #1
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3301      	adds	r3, #1
 800e696:	60fb      	str	r3, [r7, #12]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	4a09      	ldr	r2, [pc, #36]	; (800e6c0 <USB_CoreReset+0x64>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d901      	bls.n	800e6a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e6a0:	2303      	movs	r3, #3
 800e6a2:	e006      	b.n	800e6b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	f003 0301 	and.w	r3, r3, #1
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d0f0      	beq.n	800e692 <USB_CoreReset+0x36>

  return HAL_OK;
 800e6b0:	2300      	movs	r3, #0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3714      	adds	r7, #20
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	00030d40 	.word	0x00030d40

0800e6c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e6c4:	b480      	push	{r7}
 800e6c6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e6c8:	bf00      	nop
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr
	...

0800e6d4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6da:	f3ef 8305 	mrs	r3, IPSR
 800e6de:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10f      	bne.n	800e706 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ea:	607b      	str	r3, [r7, #4]
  return(result);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d105      	bne.n	800e6fe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6f2:	f3ef 8311 	mrs	r3, BASEPRI
 800e6f6:	603b      	str	r3, [r7, #0]
  return(result);
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d007      	beq.n	800e70e <osKernelInitialize+0x3a>
 800e6fe:	4b0e      	ldr	r3, [pc, #56]	; (800e738 <osKernelInitialize+0x64>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b02      	cmp	r3, #2
 800e704:	d103      	bne.n	800e70e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e706:	f06f 0305 	mvn.w	r3, #5
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	e00c      	b.n	800e728 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e70e:	4b0a      	ldr	r3, [pc, #40]	; (800e738 <osKernelInitialize+0x64>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d105      	bne.n	800e722 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e716:	4b08      	ldr	r3, [pc, #32]	; (800e738 <osKernelInitialize+0x64>)
 800e718:	2201      	movs	r2, #1
 800e71a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e71c:	2300      	movs	r3, #0
 800e71e:	60fb      	str	r3, [r7, #12]
 800e720:	e002      	b.n	800e728 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e722:	f04f 33ff 	mov.w	r3, #4294967295
 800e726:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e728:	68fb      	ldr	r3, [r7, #12]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	20003338 	.word	0x20003338

0800e73c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e742:	f3ef 8305 	mrs	r3, IPSR
 800e746:	60bb      	str	r3, [r7, #8]
  return(result);
 800e748:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10f      	bne.n	800e76e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e74e:	f3ef 8310 	mrs	r3, PRIMASK
 800e752:	607b      	str	r3, [r7, #4]
  return(result);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d105      	bne.n	800e766 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e75a:	f3ef 8311 	mrs	r3, BASEPRI
 800e75e:	603b      	str	r3, [r7, #0]
  return(result);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d007      	beq.n	800e776 <osKernelStart+0x3a>
 800e766:	4b0f      	ldr	r3, [pc, #60]	; (800e7a4 <osKernelStart+0x68>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d103      	bne.n	800e776 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e76e:	f06f 0305 	mvn.w	r3, #5
 800e772:	60fb      	str	r3, [r7, #12]
 800e774:	e010      	b.n	800e798 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e776:	4b0b      	ldr	r3, [pc, #44]	; (800e7a4 <osKernelStart+0x68>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d109      	bne.n	800e792 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e77e:	f7ff ffa1 	bl	800e6c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e782:	4b08      	ldr	r3, [pc, #32]	; (800e7a4 <osKernelStart+0x68>)
 800e784:	2202      	movs	r2, #2
 800e786:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e788:	f001 f916 	bl	800f9b8 <vTaskStartScheduler>
      stat = osOK;
 800e78c:	2300      	movs	r3, #0
 800e78e:	60fb      	str	r3, [r7, #12]
 800e790:	e002      	b.n	800e798 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e792:	f04f 33ff 	mov.w	r3, #4294967295
 800e796:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e798:	68fb      	ldr	r3, [r7, #12]
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20003338 	.word	0x20003338

0800e7a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b090      	sub	sp, #64	; 0x40
 800e7ac:	af04      	add	r7, sp, #16
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7b8:	f3ef 8305 	mrs	r3, IPSR
 800e7bc:	61fb      	str	r3, [r7, #28]
  return(result);
 800e7be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f040 808f 	bne.w	800e8e4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d105      	bne.n	800e7de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7d2:	f3ef 8311 	mrs	r3, BASEPRI
 800e7d6:	617b      	str	r3, [r7, #20]
  return(result);
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <osThreadNew+0x3e>
 800e7de:	4b44      	ldr	r3, [pc, #272]	; (800e8f0 <osThreadNew+0x148>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d07e      	beq.n	800e8e4 <osThreadNew+0x13c>
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d07b      	beq.n	800e8e4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e7ec:	2380      	movs	r3, #128	; 0x80
 800e7ee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e7f0:	2318      	movs	r3, #24
 800e7f2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d045      	beq.n	800e890 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d002      	beq.n	800e812 <osThreadNew+0x6a>
        name = attr->name;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	699b      	ldr	r3, [r3, #24]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d002      	beq.n	800e820 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	699b      	ldr	r3, [r3, #24]
 800e81e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	2b00      	cmp	r3, #0
 800e824:	d008      	beq.n	800e838 <osThreadNew+0x90>
 800e826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e828:	2b38      	cmp	r3, #56	; 0x38
 800e82a:	d805      	bhi.n	800e838 <osThreadNew+0x90>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	f003 0301 	and.w	r3, r3, #1
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <osThreadNew+0x94>
        return (NULL);
 800e838:	2300      	movs	r3, #0
 800e83a:	e054      	b.n	800e8e6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d003      	beq.n	800e84c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	695b      	ldr	r3, [r3, #20]
 800e848:	089b      	lsrs	r3, r3, #2
 800e84a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00e      	beq.n	800e872 <osThreadNew+0xca>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	2b5b      	cmp	r3, #91	; 0x5b
 800e85a:	d90a      	bls.n	800e872 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e860:	2b00      	cmp	r3, #0
 800e862:	d006      	beq.n	800e872 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d002      	beq.n	800e872 <osThreadNew+0xca>
        mem = 1;
 800e86c:	2301      	movs	r3, #1
 800e86e:	623b      	str	r3, [r7, #32]
 800e870:	e010      	b.n	800e894 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d10c      	bne.n	800e894 <osThreadNew+0xec>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d108      	bne.n	800e894 <osThreadNew+0xec>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d104      	bne.n	800e894 <osThreadNew+0xec>
          mem = 0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	623b      	str	r3, [r7, #32]
 800e88e:	e001      	b.n	800e894 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e890:	2300      	movs	r3, #0
 800e892:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e894:	6a3b      	ldr	r3, [r7, #32]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d110      	bne.n	800e8bc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e8a2:	9202      	str	r2, [sp, #8]
 800e8a4:	9301      	str	r3, [sp, #4]
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f000 fe31 	bl	800f518 <xTaskCreateStatic>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	613b      	str	r3, [r7, #16]
 800e8ba:	e013      	b.n	800e8e4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e8bc:	6a3b      	ldr	r3, [r7, #32]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d110      	bne.n	800e8e4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	f107 0310 	add.w	r3, r7, #16
 800e8ca:	9301      	str	r3, [sp, #4]
 800e8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f000 fe7f 	bl	800f5d8 <xTaskCreate>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d001      	beq.n	800e8e4 <osThreadNew+0x13c>
          hTask = NULL;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e8e4:	693b      	ldr	r3, [r7, #16]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3730      	adds	r7, #48	; 0x30
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	20003338 	.word	0x20003338

0800e8f4 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	f000 ffb3 	bl	800f864 <vTaskDelete>
#endif
  for (;;);
 800e8fe:	e7fe      	b.n	800e8fe <osThreadExit+0xa>

0800e900 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e908:	f3ef 8305 	mrs	r3, IPSR
 800e90c:	613b      	str	r3, [r7, #16]
  return(result);
 800e90e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10f      	bne.n	800e934 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e914:	f3ef 8310 	mrs	r3, PRIMASK
 800e918:	60fb      	str	r3, [r7, #12]
  return(result);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d105      	bne.n	800e92c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e920:	f3ef 8311 	mrs	r3, BASEPRI
 800e924:	60bb      	str	r3, [r7, #8]
  return(result);
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d007      	beq.n	800e93c <osDelay+0x3c>
 800e92c:	4b0a      	ldr	r3, [pc, #40]	; (800e958 <osDelay+0x58>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b02      	cmp	r3, #2
 800e932:	d103      	bne.n	800e93c <osDelay+0x3c>
    stat = osErrorISR;
 800e934:	f06f 0305 	mvn.w	r3, #5
 800e938:	617b      	str	r3, [r7, #20]
 800e93a:	e007      	b.n	800e94c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e93c:	2300      	movs	r3, #0
 800e93e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <osDelay+0x4c>
      vTaskDelay(ticks);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f001 f800 	bl	800f94c <vTaskDelay>
    }
  }

  return (stat);
 800e94c:	697b      	ldr	r3, [r7, #20]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3718      	adds	r7, #24
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	20003338 	.word	0x20003338

0800e95c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e95c:	b480      	push	{r7}
 800e95e:	b085      	sub	sp, #20
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	4a07      	ldr	r2, [pc, #28]	; (800e988 <vApplicationGetIdleTaskMemory+0x2c>)
 800e96c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	4a06      	ldr	r2, [pc, #24]	; (800e98c <vApplicationGetIdleTaskMemory+0x30>)
 800e972:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2280      	movs	r2, #128	; 0x80
 800e978:	601a      	str	r2, [r3, #0]
}
 800e97a:	bf00      	nop
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	2000333c 	.word	0x2000333c
 800e98c:	20003398 	.word	0x20003398

0800e990 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	4a07      	ldr	r2, [pc, #28]	; (800e9bc <vApplicationGetTimerTaskMemory+0x2c>)
 800e9a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	4a06      	ldr	r2, [pc, #24]	; (800e9c0 <vApplicationGetTimerTaskMemory+0x30>)
 800e9a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e9ae:	601a      	str	r2, [r3, #0]
}
 800e9b0:	bf00      	nop
 800e9b2:	3714      	adds	r7, #20
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	20003598 	.word	0x20003598
 800e9c0:	200035f4 	.word	0x200035f4

0800e9c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f103 0208 	add.w	r2, r3, #8
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f103 0208 	add.w	r2, r3, #8
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f103 0208 	add.w	r2, r3, #8
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e9f8:	bf00      	nop
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b085      	sub	sp, #20
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	689a      	ldr	r2, [r3, #8]
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	683a      	ldr	r2, [r7, #0]
 800ea42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	683a      	ldr	r2, [r7, #0]
 800ea48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	1c5a      	adds	r2, r3, #1
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	601a      	str	r2, [r3, #0]
}
 800ea5a:	bf00      	nop
 800ea5c:	3714      	adds	r7, #20
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea66:	b480      	push	{r7}
 800ea68:	b085      	sub	sp, #20
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
 800ea6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea7c:	d103      	bne.n	800ea86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	e00c      	b.n	800eaa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3308      	adds	r3, #8
 800ea8a:	60fb      	str	r3, [r7, #12]
 800ea8c:	e002      	b.n	800ea94 <vListInsert+0x2e>
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d2f6      	bcs.n	800ea8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	685a      	ldr	r2, [r3, #4]
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	683a      	ldr	r2, [r7, #0]
 800eaae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	683a      	ldr	r2, [r7, #0]
 800eaba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	1c5a      	adds	r2, r3, #1
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	601a      	str	r2, [r3, #0]
}
 800eacc:	bf00      	nop
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ead8:	b480      	push	{r7}
 800eada:	b085      	sub	sp, #20
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	6892      	ldr	r2, [r2, #8]
 800eaee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	6852      	ldr	r2, [r2, #4]
 800eaf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d103      	bne.n	800eb0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	689a      	ldr	r2, [r3, #8]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	1e5a      	subs	r2, r3, #1
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3714      	adds	r7, #20
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10b      	bne.n	800eb58 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb44:	b672      	cpsid	i
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	b662      	cpsie	i
 800eb54:	60bb      	str	r3, [r7, #8]
 800eb56:	e7fe      	b.n	800eb56 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800eb58:	f002 f9ce 	bl	8010ef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb64:	68f9      	ldr	r1, [r7, #12]
 800eb66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eb68:	fb01 f303 	mul.w	r3, r1, r3
 800eb6c:	441a      	add	r2, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb88:	3b01      	subs	r3, #1
 800eb8a:	68f9      	ldr	r1, [r7, #12]
 800eb8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eb8e:	fb01 f303 	mul.w	r3, r1, r3
 800eb92:	441a      	add	r2, r3
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	22ff      	movs	r2, #255	; 0xff
 800eb9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	22ff      	movs	r2, #255	; 0xff
 800eba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d114      	bne.n	800ebd8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	691b      	ldr	r3, [r3, #16]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d01a      	beq.n	800ebec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	3310      	adds	r3, #16
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f001 f98a 	bl	800fed4 <xTaskRemoveFromEventList>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d012      	beq.n	800ebec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ebc6:	4b0d      	ldr	r3, [pc, #52]	; (800ebfc <xQueueGenericReset+0xd0>)
 800ebc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	e009      	b.n	800ebec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	3310      	adds	r3, #16
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff fef1 	bl	800e9c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	3324      	adds	r3, #36	; 0x24
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff feec 	bl	800e9c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ebec:	f002 f9b6 	bl	8010f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ebf0:	2301      	movs	r3, #1
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	e000ed04 	.word	0xe000ed04

0800ec00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b08e      	sub	sp, #56	; 0x38
 800ec04:	af02      	add	r7, sp, #8
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
 800ec0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10b      	bne.n	800ec2c <xQueueGenericCreateStatic+0x2c>
 800ec14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec18:	b672      	cpsid	i
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	b662      	cpsie	i
 800ec28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec2a:	e7fe      	b.n	800ec2a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10b      	bne.n	800ec4a <xQueueGenericCreateStatic+0x4a>
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	b672      	cpsid	i
 800ec38:	f383 8811 	msr	BASEPRI, r3
 800ec3c:	f3bf 8f6f 	isb	sy
 800ec40:	f3bf 8f4f 	dsb	sy
 800ec44:	b662      	cpsie	i
 800ec46:	627b      	str	r3, [r7, #36]	; 0x24
 800ec48:	e7fe      	b.n	800ec48 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <xQueueGenericCreateStatic+0x56>
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d001      	beq.n	800ec5a <xQueueGenericCreateStatic+0x5a>
 800ec56:	2301      	movs	r3, #1
 800ec58:	e000      	b.n	800ec5c <xQueueGenericCreateStatic+0x5c>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10b      	bne.n	800ec78 <xQueueGenericCreateStatic+0x78>
 800ec60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec64:	b672      	cpsid	i
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	b662      	cpsie	i
 800ec74:	623b      	str	r3, [r7, #32]
 800ec76:	e7fe      	b.n	800ec76 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d102      	bne.n	800ec84 <xQueueGenericCreateStatic+0x84>
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d101      	bne.n	800ec88 <xQueueGenericCreateStatic+0x88>
 800ec84:	2301      	movs	r3, #1
 800ec86:	e000      	b.n	800ec8a <xQueueGenericCreateStatic+0x8a>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10b      	bne.n	800eca6 <xQueueGenericCreateStatic+0xa6>
 800ec8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec92:	b672      	cpsid	i
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	b662      	cpsie	i
 800eca2:	61fb      	str	r3, [r7, #28]
 800eca4:	e7fe      	b.n	800eca4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800eca6:	2350      	movs	r3, #80	; 0x50
 800eca8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	2b50      	cmp	r3, #80	; 0x50
 800ecae:	d00b      	beq.n	800ecc8 <xQueueGenericCreateStatic+0xc8>
 800ecb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb4:	b672      	cpsid	i
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	b662      	cpsie	i
 800ecc4:	61bb      	str	r3, [r7, #24]
 800ecc6:	e7fe      	b.n	800ecc6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ecc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ecce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00d      	beq.n	800ecf0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ecdc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ece0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	4613      	mov	r3, r2
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	68b9      	ldr	r1, [r7, #8]
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f000 f805 	bl	800ecfa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ecf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3730      	adds	r7, #48	; 0x30
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b084      	sub	sp, #16
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	60f8      	str	r0, [r7, #12]
 800ed02:	60b9      	str	r1, [r7, #8]
 800ed04:	607a      	str	r2, [r7, #4]
 800ed06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d103      	bne.n	800ed16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	69ba      	ldr	r2, [r7, #24]
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	e002      	b.n	800ed1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	68fa      	ldr	r2, [r7, #12]
 800ed20:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	68ba      	ldr	r2, [r7, #8]
 800ed26:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ed28:	2101      	movs	r1, #1
 800ed2a:	69b8      	ldr	r0, [r7, #24]
 800ed2c:	f7ff fefe 	bl	800eb2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	78fa      	ldrb	r2, [r7, #3]
 800ed34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ed38:	bf00      	nop
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08e      	sub	sp, #56	; 0x38
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10b      	bne.n	800ed74 <xQueueGenericSend+0x34>
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	b672      	cpsid	i
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	b662      	cpsie	i
 800ed70:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed72:	e7fe      	b.n	800ed72 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d103      	bne.n	800ed82 <xQueueGenericSend+0x42>
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <xQueueGenericSend+0x46>
 800ed82:	2301      	movs	r3, #1
 800ed84:	e000      	b.n	800ed88 <xQueueGenericSend+0x48>
 800ed86:	2300      	movs	r3, #0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d10b      	bne.n	800eda4 <xQueueGenericSend+0x64>
 800ed8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed90:	b672      	cpsid	i
 800ed92:	f383 8811 	msr	BASEPRI, r3
 800ed96:	f3bf 8f6f 	isb	sy
 800ed9a:	f3bf 8f4f 	dsb	sy
 800ed9e:	b662      	cpsie	i
 800eda0:	627b      	str	r3, [r7, #36]	; 0x24
 800eda2:	e7fe      	b.n	800eda2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	d103      	bne.n	800edb2 <xQueueGenericSend+0x72>
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d101      	bne.n	800edb6 <xQueueGenericSend+0x76>
 800edb2:	2301      	movs	r3, #1
 800edb4:	e000      	b.n	800edb8 <xQueueGenericSend+0x78>
 800edb6:	2300      	movs	r3, #0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d10b      	bne.n	800edd4 <xQueueGenericSend+0x94>
 800edbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc0:	b672      	cpsid	i
 800edc2:	f383 8811 	msr	BASEPRI, r3
 800edc6:	f3bf 8f6f 	isb	sy
 800edca:	f3bf 8f4f 	dsb	sy
 800edce:	b662      	cpsie	i
 800edd0:	623b      	str	r3, [r7, #32]
 800edd2:	e7fe      	b.n	800edd2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edd4:	f001 fa3c 	bl	8010250 <xTaskGetSchedulerState>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d102      	bne.n	800ede4 <xQueueGenericSend+0xa4>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d101      	bne.n	800ede8 <xQueueGenericSend+0xa8>
 800ede4:	2301      	movs	r3, #1
 800ede6:	e000      	b.n	800edea <xQueueGenericSend+0xaa>
 800ede8:	2300      	movs	r3, #0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10b      	bne.n	800ee06 <xQueueGenericSend+0xc6>
 800edee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf2:	b672      	cpsid	i
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	b662      	cpsie	i
 800ee02:	61fb      	str	r3, [r7, #28]
 800ee04:	e7fe      	b.n	800ee04 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee06:	f002 f877 	bl	8010ef8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d302      	bcc.n	800ee1c <xQueueGenericSend+0xdc>
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d129      	bne.n	800ee70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee1c:	683a      	ldr	r2, [r7, #0]
 800ee1e:	68b9      	ldr	r1, [r7, #8]
 800ee20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee22:	f000 fa0d 	bl	800f240 <prvCopyDataToQueue>
 800ee26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d010      	beq.n	800ee52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee32:	3324      	adds	r3, #36	; 0x24
 800ee34:	4618      	mov	r0, r3
 800ee36:	f001 f84d 	bl	800fed4 <xTaskRemoveFromEventList>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d013      	beq.n	800ee68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ee40:	4b3f      	ldr	r3, [pc, #252]	; (800ef40 <xQueueGenericSend+0x200>)
 800ee42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee46:	601a      	str	r2, [r3, #0]
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	e00a      	b.n	800ee68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ee58:	4b39      	ldr	r3, [pc, #228]	; (800ef40 <xQueueGenericSend+0x200>)
 800ee5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	f3bf 8f4f 	dsb	sy
 800ee64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee68:	f002 f878 	bl	8010f5c <vPortExitCritical>
				return pdPASS;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e063      	b.n	800ef38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d103      	bne.n	800ee7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee76:	f002 f871 	bl	8010f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e05c      	b.n	800ef38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d106      	bne.n	800ee92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee84:	f107 0314 	add.w	r3, r7, #20
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f001 f887 	bl	800ff9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee92:	f002 f863 	bl	8010f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee96:	f000 fdf7 	bl	800fa88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee9a:	f002 f82d 	bl	8010ef8 <vPortEnterCritical>
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eea4:	b25b      	sxtb	r3, r3
 800eea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeaa:	d103      	bne.n	800eeb4 <xQueueGenericSend+0x174>
 800eeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eeba:	b25b      	sxtb	r3, r3
 800eebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec0:	d103      	bne.n	800eeca <xQueueGenericSend+0x18a>
 800eec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eeca:	f002 f847 	bl	8010f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eece:	1d3a      	adds	r2, r7, #4
 800eed0:	f107 0314 	add.w	r3, r7, #20
 800eed4:	4611      	mov	r1, r2
 800eed6:	4618      	mov	r0, r3
 800eed8:	f001 f876 	bl	800ffc8 <xTaskCheckForTimeOut>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d124      	bne.n	800ef2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eee4:	f000 faa4 	bl	800f430 <prvIsQueueFull>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d018      	beq.n	800ef20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef0:	3310      	adds	r3, #16
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	4611      	mov	r1, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 ff9a 	bl	800fe30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eefc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eefe:	f000 fa2f 	bl	800f360 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ef02:	f000 fdcf 	bl	800faa4 <xTaskResumeAll>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f47f af7c 	bne.w	800ee06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ef0e:	4b0c      	ldr	r3, [pc, #48]	; (800ef40 <xQueueGenericSend+0x200>)
 800ef10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	e772      	b.n	800ee06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ef20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef22:	f000 fa1d 	bl	800f360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef26:	f000 fdbd 	bl	800faa4 <xTaskResumeAll>
 800ef2a:	e76c      	b.n	800ee06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ef2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef2e:	f000 fa17 	bl	800f360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef32:	f000 fdb7 	bl	800faa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ef36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3738      	adds	r7, #56	; 0x38
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	e000ed04 	.word	0xe000ed04

0800ef44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b08e      	sub	sp, #56	; 0x38
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
 800ef50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10b      	bne.n	800ef74 <xQueueGenericSendFromISR+0x30>
 800ef5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef60:	b672      	cpsid	i
 800ef62:	f383 8811 	msr	BASEPRI, r3
 800ef66:	f3bf 8f6f 	isb	sy
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	b662      	cpsie	i
 800ef70:	627b      	str	r3, [r7, #36]	; 0x24
 800ef72:	e7fe      	b.n	800ef72 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d103      	bne.n	800ef82 <xQueueGenericSendFromISR+0x3e>
 800ef7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d101      	bne.n	800ef86 <xQueueGenericSendFromISR+0x42>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e000      	b.n	800ef88 <xQueueGenericSendFromISR+0x44>
 800ef86:	2300      	movs	r3, #0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10b      	bne.n	800efa4 <xQueueGenericSendFromISR+0x60>
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	b672      	cpsid	i
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	b662      	cpsie	i
 800efa0:	623b      	str	r3, [r7, #32]
 800efa2:	e7fe      	b.n	800efa2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	d103      	bne.n	800efb2 <xQueueGenericSendFromISR+0x6e>
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d101      	bne.n	800efb6 <xQueueGenericSendFromISR+0x72>
 800efb2:	2301      	movs	r3, #1
 800efb4:	e000      	b.n	800efb8 <xQueueGenericSendFromISR+0x74>
 800efb6:	2300      	movs	r3, #0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d10b      	bne.n	800efd4 <xQueueGenericSendFromISR+0x90>
 800efbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc0:	b672      	cpsid	i
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	b662      	cpsie	i
 800efd0:	61fb      	str	r3, [r7, #28]
 800efd2:	e7fe      	b.n	800efd2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efd4:	f002 f870 	bl	80110b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800efd8:	f3ef 8211 	mrs	r2, BASEPRI
 800efdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe0:	b672      	cpsid	i
 800efe2:	f383 8811 	msr	BASEPRI, r3
 800efe6:	f3bf 8f6f 	isb	sy
 800efea:	f3bf 8f4f 	dsb	sy
 800efee:	b662      	cpsie	i
 800eff0:	61ba      	str	r2, [r7, #24]
 800eff2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eff4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800effc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f000:	429a      	cmp	r2, r3
 800f002:	d302      	bcc.n	800f00a <xQueueGenericSendFromISR+0xc6>
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	2b02      	cmp	r3, #2
 800f008:	d12c      	bne.n	800f064 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f014:	683a      	ldr	r2, [r7, #0]
 800f016:	68b9      	ldr	r1, [r7, #8]
 800f018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f01a:	f000 f911 	bl	800f240 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f01e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f026:	d112      	bne.n	800f04e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d016      	beq.n	800f05e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f032:	3324      	adds	r3, #36	; 0x24
 800f034:	4618      	mov	r0, r3
 800f036:	f000 ff4d 	bl	800fed4 <xTaskRemoveFromEventList>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00e      	beq.n	800f05e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00b      	beq.n	800f05e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2201      	movs	r2, #1
 800f04a:	601a      	str	r2, [r3, #0]
 800f04c:	e007      	b.n	800f05e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f04e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f052:	3301      	adds	r3, #1
 800f054:	b2db      	uxtb	r3, r3
 800f056:	b25a      	sxtb	r2, r3
 800f058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f05e:	2301      	movs	r3, #1
 800f060:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f062:	e001      	b.n	800f068 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f064:	2300      	movs	r3, #0
 800f066:	637b      	str	r3, [r7, #52]	; 0x34
 800f068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f074:	4618      	mov	r0, r3
 800f076:	3738      	adds	r7, #56	; 0x38
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b08c      	sub	sp, #48	; 0x30
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f088:	2300      	movs	r3, #0
 800f08a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10b      	bne.n	800f0ae <xQueueReceive+0x32>
	__asm volatile
 800f096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09a:	b672      	cpsid	i
 800f09c:	f383 8811 	msr	BASEPRI, r3
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	b662      	cpsie	i
 800f0aa:	623b      	str	r3, [r7, #32]
 800f0ac:	e7fe      	b.n	800f0ac <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d103      	bne.n	800f0bc <xQueueReceive+0x40>
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <xQueueReceive+0x44>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	e000      	b.n	800f0c2 <xQueueReceive+0x46>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d10b      	bne.n	800f0de <xQueueReceive+0x62>
 800f0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ca:	b672      	cpsid	i
 800f0cc:	f383 8811 	msr	BASEPRI, r3
 800f0d0:	f3bf 8f6f 	isb	sy
 800f0d4:	f3bf 8f4f 	dsb	sy
 800f0d8:	b662      	cpsie	i
 800f0da:	61fb      	str	r3, [r7, #28]
 800f0dc:	e7fe      	b.n	800f0dc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0de:	f001 f8b7 	bl	8010250 <xTaskGetSchedulerState>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d102      	bne.n	800f0ee <xQueueReceive+0x72>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d101      	bne.n	800f0f2 <xQueueReceive+0x76>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e000      	b.n	800f0f4 <xQueueReceive+0x78>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d10b      	bne.n	800f110 <xQueueReceive+0x94>
 800f0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fc:	b672      	cpsid	i
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	b662      	cpsie	i
 800f10c:	61bb      	str	r3, [r7, #24]
 800f10e:	e7fe      	b.n	800f10e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f110:	f001 fef2 	bl	8010ef8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f118:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d01f      	beq.n	800f160 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f120:	68b9      	ldr	r1, [r7, #8]
 800f122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f124:	f000 f8f6 	bl	800f314 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12a:	1e5a      	subs	r2, r3, #1
 800f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	691b      	ldr	r3, [r3, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00f      	beq.n	800f158 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	3310      	adds	r3, #16
 800f13c:	4618      	mov	r0, r3
 800f13e:	f000 fec9 	bl	800fed4 <xTaskRemoveFromEventList>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d007      	beq.n	800f158 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f148:	4b3c      	ldr	r3, [pc, #240]	; (800f23c <xQueueReceive+0x1c0>)
 800f14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f14e:	601a      	str	r2, [r3, #0]
 800f150:	f3bf 8f4f 	dsb	sy
 800f154:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f158:	f001 ff00 	bl	8010f5c <vPortExitCritical>
				return pdPASS;
 800f15c:	2301      	movs	r3, #1
 800f15e:	e069      	b.n	800f234 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d103      	bne.n	800f16e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f166:	f001 fef9 	bl	8010f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f16a:	2300      	movs	r3, #0
 800f16c:	e062      	b.n	800f234 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	2b00      	cmp	r3, #0
 800f172:	d106      	bne.n	800f182 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f174:	f107 0310 	add.w	r3, r7, #16
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 ff0f 	bl	800ff9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f17e:	2301      	movs	r3, #1
 800f180:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f182:	f001 feeb 	bl	8010f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f186:	f000 fc7f 	bl	800fa88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f18a:	f001 feb5 	bl	8010ef8 <vPortEnterCritical>
 800f18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f194:	b25b      	sxtb	r3, r3
 800f196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19a:	d103      	bne.n	800f1a4 <xQueueReceive+0x128>
 800f19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1aa:	b25b      	sxtb	r3, r3
 800f1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b0:	d103      	bne.n	800f1ba <xQueueReceive+0x13e>
 800f1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1ba:	f001 fecf 	bl	8010f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1be:	1d3a      	adds	r2, r7, #4
 800f1c0:	f107 0310 	add.w	r3, r7, #16
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f000 fefe 	bl	800ffc8 <xTaskCheckForTimeOut>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d123      	bne.n	800f21a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1d4:	f000 f916 	bl	800f404 <prvIsQueueEmpty>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d017      	beq.n	800f20e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	3324      	adds	r3, #36	; 0x24
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f000 fe22 	bl	800fe30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1ee:	f000 f8b7 	bl	800f360 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1f2:	f000 fc57 	bl	800faa4 <xTaskResumeAll>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d189      	bne.n	800f110 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f1fc:	4b0f      	ldr	r3, [pc, #60]	; (800f23c <xQueueReceive+0x1c0>)
 800f1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	f3bf 8f4f 	dsb	sy
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	e780      	b.n	800f110 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f20e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f210:	f000 f8a6 	bl	800f360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f214:	f000 fc46 	bl	800faa4 <xTaskResumeAll>
 800f218:	e77a      	b.n	800f110 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f21c:	f000 f8a0 	bl	800f360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f220:	f000 fc40 	bl	800faa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f226:	f000 f8ed 	bl	800f404 <prvIsQueueEmpty>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f43f af6f 	beq.w	800f110 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f232:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f234:	4618      	mov	r0, r3
 800f236:	3730      	adds	r7, #48	; 0x30
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	e000ed04 	.word	0xe000ed04

0800f240 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b086      	sub	sp, #24
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f24c:	2300      	movs	r3, #0
 800f24e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f254:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10d      	bne.n	800f27a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d14d      	bne.n	800f302 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f001 f80e 	bl	801028c <xTaskPriorityDisinherit>
 800f270:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2200      	movs	r2, #0
 800f276:	609a      	str	r2, [r3, #8]
 800f278:	e043      	b.n	800f302 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d119      	bne.n	800f2b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6858      	ldr	r0, [r3, #4]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f288:	461a      	mov	r2, r3
 800f28a:	68b9      	ldr	r1, [r7, #8]
 800f28c:	f002 f962 	bl	8011554 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	685a      	ldr	r2, [r3, #4]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f298:	441a      	add	r2, r3
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	685a      	ldr	r2, [r3, #4]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d32b      	bcc.n	800f302 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	605a      	str	r2, [r3, #4]
 800f2b2:	e026      	b.n	800f302 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	68d8      	ldr	r0, [r3, #12]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2bc:	461a      	mov	r2, r3
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	f002 f948 	bl	8011554 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	68da      	ldr	r2, [r3, #12]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2cc:	425b      	negs	r3, r3
 800f2ce:	441a      	add	r2, r3
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	68da      	ldr	r2, [r3, #12]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d207      	bcs.n	800f2f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	689a      	ldr	r2, [r3, #8]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2e8:	425b      	negs	r3, r3
 800f2ea:	441a      	add	r2, r3
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b02      	cmp	r3, #2
 800f2f4:	d105      	bne.n	800f302 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	3b01      	subs	r3, #1
 800f300:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	1c5a      	adds	r2, r3, #1
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f30a:	697b      	ldr	r3, [r7, #20]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3718      	adds	r7, #24
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f322:	2b00      	cmp	r3, #0
 800f324:	d018      	beq.n	800f358 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68da      	ldr	r2, [r3, #12]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f32e:	441a      	add	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	68da      	ldr	r2, [r3, #12]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d303      	bcc.n	800f348 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	68d9      	ldr	r1, [r3, #12]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f350:	461a      	mov	r2, r3
 800f352:	6838      	ldr	r0, [r7, #0]
 800f354:	f002 f8fe 	bl	8011554 <memcpy>
	}
}
 800f358:	bf00      	nop
 800f35a:	3708      	adds	r7, #8
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f368:	f001 fdc6 	bl	8010ef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f372:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f374:	e011      	b.n	800f39a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d012      	beq.n	800f3a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3324      	adds	r3, #36	; 0x24
 800f382:	4618      	mov	r0, r3
 800f384:	f000 fda6 	bl	800fed4 <xTaskRemoveFromEventList>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f38e:	f000 fe7f 	bl	8010090 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f392:	7bfb      	ldrb	r3, [r7, #15]
 800f394:	3b01      	subs	r3, #1
 800f396:	b2db      	uxtb	r3, r3
 800f398:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f39a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	dce9      	bgt.n	800f376 <prvUnlockQueue+0x16>
 800f3a2:	e000      	b.n	800f3a6 <prvUnlockQueue+0x46>
					break;
 800f3a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	22ff      	movs	r2, #255	; 0xff
 800f3aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f3ae:	f001 fdd5 	bl	8010f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f3b2:	f001 fda1 	bl	8010ef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3be:	e011      	b.n	800f3e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d012      	beq.n	800f3ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3310      	adds	r3, #16
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f000 fd81 	bl	800fed4 <xTaskRemoveFromEventList>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d001      	beq.n	800f3dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f3d8:	f000 fe5a 	bl	8010090 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f3dc:	7bbb      	ldrb	r3, [r7, #14]
 800f3de:	3b01      	subs	r3, #1
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	dce9      	bgt.n	800f3c0 <prvUnlockQueue+0x60>
 800f3ec:	e000      	b.n	800f3f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f3ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	22ff      	movs	r2, #255	; 0xff
 800f3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f3f8:	f001 fdb0 	bl	8010f5c <vPortExitCritical>
}
 800f3fc:	bf00      	nop
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f40c:	f001 fd74 	bl	8010ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f414:	2b00      	cmp	r3, #0
 800f416:	d102      	bne.n	800f41e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f418:	2301      	movs	r3, #1
 800f41a:	60fb      	str	r3, [r7, #12]
 800f41c:	e001      	b.n	800f422 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f41e:	2300      	movs	r3, #0
 800f420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f422:	f001 fd9b 	bl	8010f5c <vPortExitCritical>

	return xReturn;
 800f426:	68fb      	ldr	r3, [r7, #12]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f438:	f001 fd5e 	bl	8010ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f444:	429a      	cmp	r2, r3
 800f446:	d102      	bne.n	800f44e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f448:	2301      	movs	r3, #1
 800f44a:	60fb      	str	r3, [r7, #12]
 800f44c:	e001      	b.n	800f452 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f44e:	2300      	movs	r3, #0
 800f450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f452:	f001 fd83 	bl	8010f5c <vPortExitCritical>

	return xReturn;
 800f456:	68fb      	ldr	r3, [r7, #12]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f46a:	2300      	movs	r3, #0
 800f46c:	60fb      	str	r3, [r7, #12]
 800f46e:	e014      	b.n	800f49a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f470:	4a0e      	ldr	r2, [pc, #56]	; (800f4ac <vQueueAddToRegistry+0x4c>)
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d10b      	bne.n	800f494 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f47c:	490b      	ldr	r1, [pc, #44]	; (800f4ac <vQueueAddToRegistry+0x4c>)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	683a      	ldr	r2, [r7, #0]
 800f482:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f486:	4a09      	ldr	r2, [pc, #36]	; (800f4ac <vQueueAddToRegistry+0x4c>)
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	4413      	add	r3, r2
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f492:	e005      	b.n	800f4a0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	3301      	adds	r3, #1
 800f498:	60fb      	str	r3, [r7, #12]
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2b07      	cmp	r3, #7
 800f49e:	d9e7      	bls.n	800f470 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f4a0:	bf00      	nop
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	20030ac8 	.word	0x20030ac8

0800f4b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b086      	sub	sp, #24
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f4c0:	f001 fd1a 	bl	8010ef8 <vPortEnterCritical>
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4ca:	b25b      	sxtb	r3, r3
 800f4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d0:	d103      	bne.n	800f4da <vQueueWaitForMessageRestricted+0x2a>
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4e0:	b25b      	sxtb	r3, r3
 800f4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e6:	d103      	bne.n	800f4f0 <vQueueWaitForMessageRestricted+0x40>
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4f0:	f001 fd34 	bl	8010f5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d106      	bne.n	800f50a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	3324      	adds	r3, #36	; 0x24
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	68b9      	ldr	r1, [r7, #8]
 800f504:	4618      	mov	r0, r3
 800f506:	f000 fcb9 	bl	800fe7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f50a:	6978      	ldr	r0, [r7, #20]
 800f50c:	f7ff ff28 	bl	800f360 <prvUnlockQueue>
	}
 800f510:	bf00      	nop
 800f512:	3718      	adds	r7, #24
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08e      	sub	sp, #56	; 0x38
 800f51c:	af04      	add	r7, sp, #16
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
 800f524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d10b      	bne.n	800f544 <xTaskCreateStatic+0x2c>
 800f52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f530:	b672      	cpsid	i
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	b662      	cpsie	i
 800f540:	623b      	str	r3, [r7, #32]
 800f542:	e7fe      	b.n	800f542 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	2b00      	cmp	r3, #0
 800f548:	d10b      	bne.n	800f562 <xTaskCreateStatic+0x4a>
 800f54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54e:	b672      	cpsid	i
 800f550:	f383 8811 	msr	BASEPRI, r3
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	b662      	cpsie	i
 800f55e:	61fb      	str	r3, [r7, #28]
 800f560:	e7fe      	b.n	800f560 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f562:	235c      	movs	r3, #92	; 0x5c
 800f564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	2b5c      	cmp	r3, #92	; 0x5c
 800f56a:	d00b      	beq.n	800f584 <xTaskCreateStatic+0x6c>
 800f56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f570:	b672      	cpsid	i
 800f572:	f383 8811 	msr	BASEPRI, r3
 800f576:	f3bf 8f6f 	isb	sy
 800f57a:	f3bf 8f4f 	dsb	sy
 800f57e:	b662      	cpsie	i
 800f580:	61bb      	str	r3, [r7, #24]
 800f582:	e7fe      	b.n	800f582 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f584:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d01e      	beq.n	800f5ca <xTaskCreateStatic+0xb2>
 800f58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d01b      	beq.n	800f5ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f594:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f59a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59e:	2202      	movs	r2, #2
 800f5a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	9303      	str	r3, [sp, #12]
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5aa:	9302      	str	r3, [sp, #8]
 800f5ac:	f107 0314 	add.w	r3, r7, #20
 800f5b0:	9301      	str	r3, [sp, #4]
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	68b9      	ldr	r1, [r7, #8]
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	f000 f850 	bl	800f662 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5c4:	f000 f8de 	bl	800f784 <prvAddNewTaskToReadyList>
 800f5c8:	e001      	b.n	800f5ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f5ce:	697b      	ldr	r3, [r7, #20]
	}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3728      	adds	r7, #40	; 0x28
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b08c      	sub	sp, #48	; 0x30
 800f5dc:	af04      	add	r7, sp, #16
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	603b      	str	r3, [r7, #0]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f5e8:	88fb      	ldrh	r3, [r7, #6]
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f001 fda5 	bl	801113c <pvPortMalloc>
 800f5f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00e      	beq.n	800f618 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f5fa:	205c      	movs	r0, #92	; 0x5c
 800f5fc:	f001 fd9e 	bl	801113c <pvPortMalloc>
 800f600:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d003      	beq.n	800f610 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	697a      	ldr	r2, [r7, #20]
 800f60c:	631a      	str	r2, [r3, #48]	; 0x30
 800f60e:	e005      	b.n	800f61c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f610:	6978      	ldr	r0, [r7, #20]
 800f612:	f001 fe5b 	bl	80112cc <vPortFree>
 800f616:	e001      	b.n	800f61c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f618:	2300      	movs	r3, #0
 800f61a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d017      	beq.n	800f652 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	2200      	movs	r2, #0
 800f626:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f62a:	88fa      	ldrh	r2, [r7, #6]
 800f62c:	2300      	movs	r3, #0
 800f62e:	9303      	str	r3, [sp, #12]
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	9302      	str	r3, [sp, #8]
 800f634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f636:	9301      	str	r3, [sp, #4]
 800f638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	68b9      	ldr	r1, [r7, #8]
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f000 f80e 	bl	800f662 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f646:	69f8      	ldr	r0, [r7, #28]
 800f648:	f000 f89c 	bl	800f784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f64c:	2301      	movs	r3, #1
 800f64e:	61bb      	str	r3, [r7, #24]
 800f650:	e002      	b.n	800f658 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f652:	f04f 33ff 	mov.w	r3, #4294967295
 800f656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f658:	69bb      	ldr	r3, [r7, #24]
	}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3720      	adds	r7, #32
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b088      	sub	sp, #32
 800f666:	af00      	add	r7, sp, #0
 800f668:	60f8      	str	r0, [r7, #12]
 800f66a:	60b9      	str	r1, [r7, #8]
 800f66c:	607a      	str	r2, [r7, #4]
 800f66e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	461a      	mov	r2, r3
 800f67a:	21a5      	movs	r1, #165	; 0xa5
 800f67c:	f001 ff75 	bl	801156a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f684:	6879      	ldr	r1, [r7, #4]
 800f686:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f68a:	440b      	add	r3, r1
 800f68c:	009b      	lsls	r3, r3, #2
 800f68e:	4413      	add	r3, r2
 800f690:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	f023 0307 	bic.w	r3, r3, #7
 800f698:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	f003 0307 	and.w	r3, r3, #7
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00b      	beq.n	800f6bc <prvInitialiseNewTask+0x5a>
 800f6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a8:	b672      	cpsid	i
 800f6aa:	f383 8811 	msr	BASEPRI, r3
 800f6ae:	f3bf 8f6f 	isb	sy
 800f6b2:	f3bf 8f4f 	dsb	sy
 800f6b6:	b662      	cpsie	i
 800f6b8:	617b      	str	r3, [r7, #20]
 800f6ba:	e7fe      	b.n	800f6ba <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d01f      	beq.n	800f702 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	61fb      	str	r3, [r7, #28]
 800f6c6:	e012      	b.n	800f6ee <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	7819      	ldrb	r1, [r3, #0]
 800f6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	3334      	adds	r3, #52	; 0x34
 800f6d8:	460a      	mov	r2, r1
 800f6da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f6dc:	68ba      	ldr	r2, [r7, #8]
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d006      	beq.n	800f6f6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	61fb      	str	r3, [r7, #28]
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	2b0f      	cmp	r3, #15
 800f6f2:	d9e9      	bls.n	800f6c8 <prvInitialiseNewTask+0x66>
 800f6f4:	e000      	b.n	800f6f8 <prvInitialiseNewTask+0x96>
			{
				break;
 800f6f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f700:	e003      	b.n	800f70a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f704:	2200      	movs	r2, #0
 800f706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70c:	2b37      	cmp	r3, #55	; 0x37
 800f70e:	d901      	bls.n	800f714 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f710:	2337      	movs	r3, #55	; 0x37
 800f712:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f718:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f71e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f722:	2200      	movs	r2, #0
 800f724:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f728:	3304      	adds	r3, #4
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7ff f96a 	bl	800ea04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f732:	3318      	adds	r3, #24
 800f734:	4618      	mov	r0, r3
 800f736:	f7ff f965 	bl	800ea04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f73e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f742:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f748:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f74e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f752:	2200      	movs	r2, #0
 800f754:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	2200      	movs	r2, #0
 800f75a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	68f9      	ldr	r1, [r7, #12]
 800f762:	69b8      	ldr	r0, [r7, #24]
 800f764:	f001 fabe 	bl	8010ce4 <pxPortInitialiseStack>
 800f768:	4602      	mov	r2, r0
 800f76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f770:	2b00      	cmp	r3, #0
 800f772:	d002      	beq.n	800f77a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f77a:	bf00      	nop
 800f77c:	3720      	adds	r7, #32
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
	...

0800f784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f78c:	f001 fbb4 	bl	8010ef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f790:	4b2d      	ldr	r3, [pc, #180]	; (800f848 <prvAddNewTaskToReadyList+0xc4>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	3301      	adds	r3, #1
 800f796:	4a2c      	ldr	r2, [pc, #176]	; (800f848 <prvAddNewTaskToReadyList+0xc4>)
 800f798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f79a:	4b2c      	ldr	r3, [pc, #176]	; (800f84c <prvAddNewTaskToReadyList+0xc8>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d109      	bne.n	800f7b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f7a2:	4a2a      	ldr	r2, [pc, #168]	; (800f84c <prvAddNewTaskToReadyList+0xc8>)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f7a8:	4b27      	ldr	r3, [pc, #156]	; (800f848 <prvAddNewTaskToReadyList+0xc4>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d110      	bne.n	800f7d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f7b0:	f000 fc92 	bl	80100d8 <prvInitialiseTaskLists>
 800f7b4:	e00d      	b.n	800f7d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f7b6:	4b26      	ldr	r3, [pc, #152]	; (800f850 <prvAddNewTaskToReadyList+0xcc>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d109      	bne.n	800f7d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f7be:	4b23      	ldr	r3, [pc, #140]	; (800f84c <prvAddNewTaskToReadyList+0xc8>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d802      	bhi.n	800f7d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f7cc:	4a1f      	ldr	r2, [pc, #124]	; (800f84c <prvAddNewTaskToReadyList+0xc8>)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f7d2:	4b20      	ldr	r3, [pc, #128]	; (800f854 <prvAddNewTaskToReadyList+0xd0>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	4a1e      	ldr	r2, [pc, #120]	; (800f854 <prvAddNewTaskToReadyList+0xd0>)
 800f7da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f7dc:	4b1d      	ldr	r3, [pc, #116]	; (800f854 <prvAddNewTaskToReadyList+0xd0>)
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7e8:	4b1b      	ldr	r3, [pc, #108]	; (800f858 <prvAddNewTaskToReadyList+0xd4>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d903      	bls.n	800f7f8 <prvAddNewTaskToReadyList+0x74>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f4:	4a18      	ldr	r2, [pc, #96]	; (800f858 <prvAddNewTaskToReadyList+0xd4>)
 800f7f6:	6013      	str	r3, [r2, #0]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	4413      	add	r3, r2
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	4a15      	ldr	r2, [pc, #84]	; (800f85c <prvAddNewTaskToReadyList+0xd8>)
 800f806:	441a      	add	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	3304      	adds	r3, #4
 800f80c:	4619      	mov	r1, r3
 800f80e:	4610      	mov	r0, r2
 800f810:	f7ff f905 	bl	800ea1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f814:	f001 fba2 	bl	8010f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f818:	4b0d      	ldr	r3, [pc, #52]	; (800f850 <prvAddNewTaskToReadyList+0xcc>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00e      	beq.n	800f83e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f820:	4b0a      	ldr	r3, [pc, #40]	; (800f84c <prvAddNewTaskToReadyList+0xc8>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d207      	bcs.n	800f83e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f82e:	4b0c      	ldr	r3, [pc, #48]	; (800f860 <prvAddNewTaskToReadyList+0xdc>)
 800f830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f83e:	bf00      	nop
 800f840:	3708      	adds	r7, #8
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	20003ec8 	.word	0x20003ec8
 800f84c:	200039f4 	.word	0x200039f4
 800f850:	20003ed4 	.word	0x20003ed4
 800f854:	20003ee4 	.word	0x20003ee4
 800f858:	20003ed0 	.word	0x20003ed0
 800f85c:	200039f8 	.word	0x200039f8
 800f860:	e000ed04 	.word	0xe000ed04

0800f864 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f86c:	f001 fb44 	bl	8010ef8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d102      	bne.n	800f87c <vTaskDelete+0x18>
 800f876:	4b2d      	ldr	r3, [pc, #180]	; (800f92c <vTaskDelete+0xc8>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	e000      	b.n	800f87e <vTaskDelete+0x1a>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	3304      	adds	r3, #4
 800f884:	4618      	mov	r0, r3
 800f886:	f7ff f927 	bl	800ead8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d004      	beq.n	800f89c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	3318      	adds	r3, #24
 800f896:	4618      	mov	r0, r3
 800f898:	f7ff f91e 	bl	800ead8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800f89c:	4b24      	ldr	r3, [pc, #144]	; (800f930 <vTaskDelete+0xcc>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	4a23      	ldr	r2, [pc, #140]	; (800f930 <vTaskDelete+0xcc>)
 800f8a4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800f8a6:	4b21      	ldr	r3, [pc, #132]	; (800f92c <vTaskDelete+0xc8>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d10b      	bne.n	800f8c8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	481f      	ldr	r0, [pc, #124]	; (800f934 <vTaskDelete+0xd0>)
 800f8b8:	f7ff f8b1 	bl	800ea1e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800f8bc:	4b1e      	ldr	r3, [pc, #120]	; (800f938 <vTaskDelete+0xd4>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	4a1d      	ldr	r2, [pc, #116]	; (800f938 <vTaskDelete+0xd4>)
 800f8c4:	6013      	str	r3, [r2, #0]
 800f8c6:	e009      	b.n	800f8dc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f8c8:	4b1c      	ldr	r3, [pc, #112]	; (800f93c <vTaskDelete+0xd8>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	4a1b      	ldr	r2, [pc, #108]	; (800f93c <vTaskDelete+0xd8>)
 800f8d0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f000 fc6c 	bl	80101b0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f8d8:	f000 fc9a 	bl	8010210 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800f8dc:	f001 fb3e 	bl	8010f5c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f8e0:	4b17      	ldr	r3, [pc, #92]	; (800f940 <vTaskDelete+0xdc>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d01c      	beq.n	800f922 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800f8e8:	4b10      	ldr	r3, [pc, #64]	; (800f92c <vTaskDelete+0xc8>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d117      	bne.n	800f922 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f8f2:	4b14      	ldr	r3, [pc, #80]	; (800f944 <vTaskDelete+0xe0>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00b      	beq.n	800f912 <vTaskDelete+0xae>
 800f8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fe:	b672      	cpsid	i
 800f900:	f383 8811 	msr	BASEPRI, r3
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	b662      	cpsie	i
 800f90e:	60bb      	str	r3, [r7, #8]
 800f910:	e7fe      	b.n	800f910 <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 800f912:	4b0d      	ldr	r3, [pc, #52]	; (800f948 <vTaskDelete+0xe4>)
 800f914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f918:	601a      	str	r2, [r3, #0]
 800f91a:	f3bf 8f4f 	dsb	sy
 800f91e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f922:	bf00      	nop
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	200039f4 	.word	0x200039f4
 800f930:	20003ee4 	.word	0x20003ee4
 800f934:	20003e9c 	.word	0x20003e9c
 800f938:	20003eb0 	.word	0x20003eb0
 800f93c:	20003ec8 	.word	0x20003ec8
 800f940:	20003ed4 	.word	0x20003ed4
 800f944:	20003ef0 	.word	0x20003ef0
 800f948:	e000ed04 	.word	0xe000ed04

0800f94c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f954:	2300      	movs	r3, #0
 800f956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d018      	beq.n	800f990 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f95e:	4b14      	ldr	r3, [pc, #80]	; (800f9b0 <vTaskDelay+0x64>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00b      	beq.n	800f97e <vTaskDelay+0x32>
 800f966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96a:	b672      	cpsid	i
 800f96c:	f383 8811 	msr	BASEPRI, r3
 800f970:	f3bf 8f6f 	isb	sy
 800f974:	f3bf 8f4f 	dsb	sy
 800f978:	b662      	cpsie	i
 800f97a:	60bb      	str	r3, [r7, #8]
 800f97c:	e7fe      	b.n	800f97c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800f97e:	f000 f883 	bl	800fa88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f982:	2100      	movs	r1, #0
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 fe05 	bl	8010594 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f98a:	f000 f88b 	bl	800faa4 <xTaskResumeAll>
 800f98e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d107      	bne.n	800f9a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f996:	4b07      	ldr	r3, [pc, #28]	; (800f9b4 <vTaskDelay+0x68>)
 800f998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9a6:	bf00      	nop
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	20003ef0 	.word	0x20003ef0
 800f9b4:	e000ed04 	.word	0xe000ed04

0800f9b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b08a      	sub	sp, #40	; 0x28
 800f9bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9c6:	463a      	mov	r2, r7
 800f9c8:	1d39      	adds	r1, r7, #4
 800f9ca:	f107 0308 	add.w	r3, r7, #8
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fe ffc4 	bl	800e95c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9d4:	6839      	ldr	r1, [r7, #0]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	9202      	str	r2, [sp, #8]
 800f9dc:	9301      	str	r3, [sp, #4]
 800f9de:	2300      	movs	r3, #0
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	460a      	mov	r2, r1
 800f9e6:	4922      	ldr	r1, [pc, #136]	; (800fa70 <vTaskStartScheduler+0xb8>)
 800f9e8:	4822      	ldr	r0, [pc, #136]	; (800fa74 <vTaskStartScheduler+0xbc>)
 800f9ea:	f7ff fd95 	bl	800f518 <xTaskCreateStatic>
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	4b21      	ldr	r3, [pc, #132]	; (800fa78 <vTaskStartScheduler+0xc0>)
 800f9f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f9f4:	4b20      	ldr	r3, [pc, #128]	; (800fa78 <vTaskStartScheduler+0xc0>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d002      	beq.n	800fa02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	617b      	str	r3, [r7, #20]
 800fa00:	e001      	b.n	800fa06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa02:	2300      	movs	r3, #0
 800fa04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d102      	bne.n	800fa12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa0c:	f000 fe16 	bl	801063c <xTimerCreateTimerTask>
 800fa10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d117      	bne.n	800fa48 <vTaskStartScheduler+0x90>
 800fa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1c:	b672      	cpsid	i
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	b662      	cpsie	i
 800fa2c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa2e:	4b13      	ldr	r3, [pc, #76]	; (800fa7c <vTaskStartScheduler+0xc4>)
 800fa30:	f04f 32ff 	mov.w	r2, #4294967295
 800fa34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa36:	4b12      	ldr	r3, [pc, #72]	; (800fa80 <vTaskStartScheduler+0xc8>)
 800fa38:	2201      	movs	r2, #1
 800fa3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa3c:	4b11      	ldr	r3, [pc, #68]	; (800fa84 <vTaskStartScheduler+0xcc>)
 800fa3e:	2200      	movs	r2, #0
 800fa40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa42:	f001 f9dd 	bl	8010e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa46:	e00f      	b.n	800fa68 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4e:	d10b      	bne.n	800fa68 <vTaskStartScheduler+0xb0>
 800fa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa54:	b672      	cpsid	i
 800fa56:	f383 8811 	msr	BASEPRI, r3
 800fa5a:	f3bf 8f6f 	isb	sy
 800fa5e:	f3bf 8f4f 	dsb	sy
 800fa62:	b662      	cpsie	i
 800fa64:	60fb      	str	r3, [r7, #12]
 800fa66:	e7fe      	b.n	800fa66 <vTaskStartScheduler+0xae>
}
 800fa68:	bf00      	nop
 800fa6a:	3718      	adds	r7, #24
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	08015ba0 	.word	0x08015ba0
 800fa74:	080100a9 	.word	0x080100a9
 800fa78:	20003eec 	.word	0x20003eec
 800fa7c:	20003ee8 	.word	0x20003ee8
 800fa80:	20003ed4 	.word	0x20003ed4
 800fa84:	20003ecc 	.word	0x20003ecc

0800fa88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa88:	b480      	push	{r7}
 800fa8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fa8c:	4b04      	ldr	r3, [pc, #16]	; (800faa0 <vTaskSuspendAll+0x18>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	3301      	adds	r3, #1
 800fa92:	4a03      	ldr	r2, [pc, #12]	; (800faa0 <vTaskSuspendAll+0x18>)
 800fa94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fa96:	bf00      	nop
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr
 800faa0:	20003ef0 	.word	0x20003ef0

0800faa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800faaa:	2300      	movs	r3, #0
 800faac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800faae:	2300      	movs	r3, #0
 800fab0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fab2:	4b42      	ldr	r3, [pc, #264]	; (800fbbc <xTaskResumeAll+0x118>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10b      	bne.n	800fad2 <xTaskResumeAll+0x2e>
 800faba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fabe:	b672      	cpsid	i
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	b662      	cpsie	i
 800face:	603b      	str	r3, [r7, #0]
 800fad0:	e7fe      	b.n	800fad0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fad2:	f001 fa11 	bl	8010ef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fad6:	4b39      	ldr	r3, [pc, #228]	; (800fbbc <xTaskResumeAll+0x118>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	3b01      	subs	r3, #1
 800fadc:	4a37      	ldr	r2, [pc, #220]	; (800fbbc <xTaskResumeAll+0x118>)
 800fade:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fae0:	4b36      	ldr	r3, [pc, #216]	; (800fbbc <xTaskResumeAll+0x118>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d162      	bne.n	800fbae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fae8:	4b35      	ldr	r3, [pc, #212]	; (800fbc0 <xTaskResumeAll+0x11c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d05e      	beq.n	800fbae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800faf0:	e02f      	b.n	800fb52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faf2:	4b34      	ldr	r3, [pc, #208]	; (800fbc4 <xTaskResumeAll+0x120>)
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	3318      	adds	r3, #24
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fe ffea 	bl	800ead8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	3304      	adds	r3, #4
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fe ffe5 	bl	800ead8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb12:	4b2d      	ldr	r3, [pc, #180]	; (800fbc8 <xTaskResumeAll+0x124>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d903      	bls.n	800fb22 <xTaskResumeAll+0x7e>
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb1e:	4a2a      	ldr	r2, [pc, #168]	; (800fbc8 <xTaskResumeAll+0x124>)
 800fb20:	6013      	str	r3, [r2, #0]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb26:	4613      	mov	r3, r2
 800fb28:	009b      	lsls	r3, r3, #2
 800fb2a:	4413      	add	r3, r2
 800fb2c:	009b      	lsls	r3, r3, #2
 800fb2e:	4a27      	ldr	r2, [pc, #156]	; (800fbcc <xTaskResumeAll+0x128>)
 800fb30:	441a      	add	r2, r3
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	3304      	adds	r3, #4
 800fb36:	4619      	mov	r1, r3
 800fb38:	4610      	mov	r0, r2
 800fb3a:	f7fe ff70 	bl	800ea1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb42:	4b23      	ldr	r3, [pc, #140]	; (800fbd0 <xTaskResumeAll+0x12c>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d302      	bcc.n	800fb52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fb4c:	4b21      	ldr	r3, [pc, #132]	; (800fbd4 <xTaskResumeAll+0x130>)
 800fb4e:	2201      	movs	r2, #1
 800fb50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb52:	4b1c      	ldr	r3, [pc, #112]	; (800fbc4 <xTaskResumeAll+0x120>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1cb      	bne.n	800faf2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb60:	f000 fb56 	bl	8010210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fb64:	4b1c      	ldr	r3, [pc, #112]	; (800fbd8 <xTaskResumeAll+0x134>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d010      	beq.n	800fb92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb70:	f000 f846 	bl	800fc00 <xTaskIncrementTick>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d002      	beq.n	800fb80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fb7a:	4b16      	ldr	r3, [pc, #88]	; (800fbd4 <xTaskResumeAll+0x130>)
 800fb7c:	2201      	movs	r2, #1
 800fb7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	3b01      	subs	r3, #1
 800fb84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1f1      	bne.n	800fb70 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800fb8c:	4b12      	ldr	r3, [pc, #72]	; (800fbd8 <xTaskResumeAll+0x134>)
 800fb8e:	2200      	movs	r2, #0
 800fb90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fb92:	4b10      	ldr	r3, [pc, #64]	; (800fbd4 <xTaskResumeAll+0x130>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d009      	beq.n	800fbae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fb9e:	4b0f      	ldr	r3, [pc, #60]	; (800fbdc <xTaskResumeAll+0x138>)
 800fba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba4:	601a      	str	r2, [r3, #0]
 800fba6:	f3bf 8f4f 	dsb	sy
 800fbaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbae:	f001 f9d5 	bl	8010f5c <vPortExitCritical>

	return xAlreadyYielded;
 800fbb2:	68bb      	ldr	r3, [r7, #8]
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3710      	adds	r7, #16
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	20003ef0 	.word	0x20003ef0
 800fbc0:	20003ec8 	.word	0x20003ec8
 800fbc4:	20003e88 	.word	0x20003e88
 800fbc8:	20003ed0 	.word	0x20003ed0
 800fbcc:	200039f8 	.word	0x200039f8
 800fbd0:	200039f4 	.word	0x200039f4
 800fbd4:	20003edc 	.word	0x20003edc
 800fbd8:	20003ed8 	.word	0x20003ed8
 800fbdc:	e000ed04 	.word	0xe000ed04

0800fbe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b083      	sub	sp, #12
 800fbe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fbe6:	4b05      	ldr	r3, [pc, #20]	; (800fbfc <xTaskGetTickCount+0x1c>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fbec:	687b      	ldr	r3, [r7, #4]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	370c      	adds	r7, #12
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	20003ecc 	.word	0x20003ecc

0800fc00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b086      	sub	sp, #24
 800fc04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc06:	2300      	movs	r3, #0
 800fc08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc0a:	4b4f      	ldr	r3, [pc, #316]	; (800fd48 <xTaskIncrementTick+0x148>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	f040 808a 	bne.w	800fd28 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc14:	4b4d      	ldr	r3, [pc, #308]	; (800fd4c <xTaskIncrementTick+0x14c>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc1c:	4a4b      	ldr	r2, [pc, #300]	; (800fd4c <xTaskIncrementTick+0x14c>)
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d121      	bne.n	800fc6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc28:	4b49      	ldr	r3, [pc, #292]	; (800fd50 <xTaskIncrementTick+0x150>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d00b      	beq.n	800fc4a <xTaskIncrementTick+0x4a>
 800fc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc36:	b672      	cpsid	i
 800fc38:	f383 8811 	msr	BASEPRI, r3
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	b662      	cpsie	i
 800fc46:	603b      	str	r3, [r7, #0]
 800fc48:	e7fe      	b.n	800fc48 <xTaskIncrementTick+0x48>
 800fc4a:	4b41      	ldr	r3, [pc, #260]	; (800fd50 <xTaskIncrementTick+0x150>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	60fb      	str	r3, [r7, #12]
 800fc50:	4b40      	ldr	r3, [pc, #256]	; (800fd54 <xTaskIncrementTick+0x154>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4a3e      	ldr	r2, [pc, #248]	; (800fd50 <xTaskIncrementTick+0x150>)
 800fc56:	6013      	str	r3, [r2, #0]
 800fc58:	4a3e      	ldr	r2, [pc, #248]	; (800fd54 <xTaskIncrementTick+0x154>)
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6013      	str	r3, [r2, #0]
 800fc5e:	4b3e      	ldr	r3, [pc, #248]	; (800fd58 <xTaskIncrementTick+0x158>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	3301      	adds	r3, #1
 800fc64:	4a3c      	ldr	r2, [pc, #240]	; (800fd58 <xTaskIncrementTick+0x158>)
 800fc66:	6013      	str	r3, [r2, #0]
 800fc68:	f000 fad2 	bl	8010210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc6c:	4b3b      	ldr	r3, [pc, #236]	; (800fd5c <xTaskIncrementTick+0x15c>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	693a      	ldr	r2, [r7, #16]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d349      	bcc.n	800fd0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc76:	4b36      	ldr	r3, [pc, #216]	; (800fd50 <xTaskIncrementTick+0x150>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d104      	bne.n	800fc8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc80:	4b36      	ldr	r3, [pc, #216]	; (800fd5c <xTaskIncrementTick+0x15c>)
 800fc82:	f04f 32ff 	mov.w	r2, #4294967295
 800fc86:	601a      	str	r2, [r3, #0]
					break;
 800fc88:	e03f      	b.n	800fd0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc8a:	4b31      	ldr	r3, [pc, #196]	; (800fd50 <xTaskIncrementTick+0x150>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d203      	bcs.n	800fcaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fca2:	4a2e      	ldr	r2, [pc, #184]	; (800fd5c <xTaskIncrementTick+0x15c>)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fca8:	e02f      	b.n	800fd0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	3304      	adds	r3, #4
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7fe ff12 	bl	800ead8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d004      	beq.n	800fcc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	3318      	adds	r3, #24
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7fe ff09 	bl	800ead8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcca:	4b25      	ldr	r3, [pc, #148]	; (800fd60 <xTaskIncrementTick+0x160>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d903      	bls.n	800fcda <xTaskIncrementTick+0xda>
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd6:	4a22      	ldr	r2, [pc, #136]	; (800fd60 <xTaskIncrementTick+0x160>)
 800fcd8:	6013      	str	r3, [r2, #0]
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcde:	4613      	mov	r3, r2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	4413      	add	r3, r2
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	4a1f      	ldr	r2, [pc, #124]	; (800fd64 <xTaskIncrementTick+0x164>)
 800fce8:	441a      	add	r2, r3
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	3304      	adds	r3, #4
 800fcee:	4619      	mov	r1, r3
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	f7fe fe94 	bl	800ea1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcfa:	4b1b      	ldr	r3, [pc, #108]	; (800fd68 <xTaskIncrementTick+0x168>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d3b8      	bcc.n	800fc76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fd04:	2301      	movs	r3, #1
 800fd06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd08:	e7b5      	b.n	800fc76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd0a:	4b17      	ldr	r3, [pc, #92]	; (800fd68 <xTaskIncrementTick+0x168>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd10:	4914      	ldr	r1, [pc, #80]	; (800fd64 <xTaskIncrementTick+0x164>)
 800fd12:	4613      	mov	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4413      	add	r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	440b      	add	r3, r1
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d907      	bls.n	800fd32 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800fd22:	2301      	movs	r3, #1
 800fd24:	617b      	str	r3, [r7, #20]
 800fd26:	e004      	b.n	800fd32 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fd28:	4b10      	ldr	r3, [pc, #64]	; (800fd6c <xTaskIncrementTick+0x16c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	4a0f      	ldr	r2, [pc, #60]	; (800fd6c <xTaskIncrementTick+0x16c>)
 800fd30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fd32:	4b0f      	ldr	r3, [pc, #60]	; (800fd70 <xTaskIncrementTick+0x170>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fd3e:	697b      	ldr	r3, [r7, #20]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3718      	adds	r7, #24
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	20003ef0 	.word	0x20003ef0
 800fd4c:	20003ecc 	.word	0x20003ecc
 800fd50:	20003e80 	.word	0x20003e80
 800fd54:	20003e84 	.word	0x20003e84
 800fd58:	20003ee0 	.word	0x20003ee0
 800fd5c:	20003ee8 	.word	0x20003ee8
 800fd60:	20003ed0 	.word	0x20003ed0
 800fd64:	200039f8 	.word	0x200039f8
 800fd68:	200039f4 	.word	0x200039f4
 800fd6c:	20003ed8 	.word	0x20003ed8
 800fd70:	20003edc 	.word	0x20003edc

0800fd74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd7a:	4b28      	ldr	r3, [pc, #160]	; (800fe1c <vTaskSwitchContext+0xa8>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d003      	beq.n	800fd8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fd82:	4b27      	ldr	r3, [pc, #156]	; (800fe20 <vTaskSwitchContext+0xac>)
 800fd84:	2201      	movs	r2, #1
 800fd86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fd88:	e042      	b.n	800fe10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800fd8a:	4b25      	ldr	r3, [pc, #148]	; (800fe20 <vTaskSwitchContext+0xac>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd90:	4b24      	ldr	r3, [pc, #144]	; (800fe24 <vTaskSwitchContext+0xb0>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	60fb      	str	r3, [r7, #12]
 800fd96:	e011      	b.n	800fdbc <vTaskSwitchContext+0x48>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d10b      	bne.n	800fdb6 <vTaskSwitchContext+0x42>
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	b672      	cpsid	i
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	b662      	cpsie	i
 800fdb2:	607b      	str	r3, [r7, #4]
 800fdb4:	e7fe      	b.n	800fdb4 <vTaskSwitchContext+0x40>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	60fb      	str	r3, [r7, #12]
 800fdbc:	491a      	ldr	r1, [pc, #104]	; (800fe28 <vTaskSwitchContext+0xb4>)
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	4613      	mov	r3, r2
 800fdc2:	009b      	lsls	r3, r3, #2
 800fdc4:	4413      	add	r3, r2
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	440b      	add	r3, r1
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d0e3      	beq.n	800fd98 <vTaskSwitchContext+0x24>
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	4a13      	ldr	r2, [pc, #76]	; (800fe28 <vTaskSwitchContext+0xb4>)
 800fddc:	4413      	add	r3, r2
 800fdde:	60bb      	str	r3, [r7, #8]
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	685a      	ldr	r2, [r3, #4]
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	605a      	str	r2, [r3, #4]
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	685a      	ldr	r2, [r3, #4]
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	3308      	adds	r3, #8
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d104      	bne.n	800fe00 <vTaskSwitchContext+0x8c>
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	685a      	ldr	r2, [r3, #4]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	605a      	str	r2, [r3, #4]
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	4a09      	ldr	r2, [pc, #36]	; (800fe2c <vTaskSwitchContext+0xb8>)
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	4a06      	ldr	r2, [pc, #24]	; (800fe24 <vTaskSwitchContext+0xb0>)
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6013      	str	r3, [r2, #0]
}
 800fe10:	bf00      	nop
 800fe12:	3714      	adds	r7, #20
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr
 800fe1c:	20003ef0 	.word	0x20003ef0
 800fe20:	20003edc 	.word	0x20003edc
 800fe24:	20003ed0 	.word	0x20003ed0
 800fe28:	200039f8 	.word	0x200039f8
 800fe2c:	200039f4 	.word	0x200039f4

0800fe30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d10b      	bne.n	800fe58 <vTaskPlaceOnEventList+0x28>
 800fe40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe44:	b672      	cpsid	i
 800fe46:	f383 8811 	msr	BASEPRI, r3
 800fe4a:	f3bf 8f6f 	isb	sy
 800fe4e:	f3bf 8f4f 	dsb	sy
 800fe52:	b662      	cpsie	i
 800fe54:	60fb      	str	r3, [r7, #12]
 800fe56:	e7fe      	b.n	800fe56 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe58:	4b07      	ldr	r3, [pc, #28]	; (800fe78 <vTaskPlaceOnEventList+0x48>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	3318      	adds	r3, #24
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7fe fe00 	bl	800ea66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe66:	2101      	movs	r1, #1
 800fe68:	6838      	ldr	r0, [r7, #0]
 800fe6a:	f000 fb93 	bl	8010594 <prvAddCurrentTaskToDelayedList>
}
 800fe6e:	bf00      	nop
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	200039f4 	.word	0x200039f4

0800fe7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b086      	sub	sp, #24
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d10b      	bne.n	800fea6 <vTaskPlaceOnEventListRestricted+0x2a>
 800fe8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe92:	b672      	cpsid	i
 800fe94:	f383 8811 	msr	BASEPRI, r3
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	b662      	cpsie	i
 800fea2:	617b      	str	r3, [r7, #20]
 800fea4:	e7fe      	b.n	800fea4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fea6:	4b0a      	ldr	r3, [pc, #40]	; (800fed0 <vTaskPlaceOnEventListRestricted+0x54>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	3318      	adds	r3, #24
 800feac:	4619      	mov	r1, r3
 800feae:	68f8      	ldr	r0, [r7, #12]
 800feb0:	f7fe fdb5 	bl	800ea1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d002      	beq.n	800fec0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800feba:	f04f 33ff 	mov.w	r3, #4294967295
 800febe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fec0:	6879      	ldr	r1, [r7, #4]
 800fec2:	68b8      	ldr	r0, [r7, #8]
 800fec4:	f000 fb66 	bl	8010594 <prvAddCurrentTaskToDelayedList>
	}
 800fec8:	bf00      	nop
 800feca:	3718      	adds	r7, #24
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	200039f4 	.word	0x200039f4

0800fed4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b086      	sub	sp, #24
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d10b      	bne.n	800ff02 <xTaskRemoveFromEventList+0x2e>
 800feea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feee:	b672      	cpsid	i
 800fef0:	f383 8811 	msr	BASEPRI, r3
 800fef4:	f3bf 8f6f 	isb	sy
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	b662      	cpsie	i
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	e7fe      	b.n	800ff00 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	3318      	adds	r3, #24
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fe fde6 	bl	800ead8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff0c:	4b1d      	ldr	r3, [pc, #116]	; (800ff84 <xTaskRemoveFromEventList+0xb0>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d11d      	bne.n	800ff50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	3304      	adds	r3, #4
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fe fddd 	bl	800ead8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff22:	4b19      	ldr	r3, [pc, #100]	; (800ff88 <xTaskRemoveFromEventList+0xb4>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d903      	bls.n	800ff32 <xTaskRemoveFromEventList+0x5e>
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2e:	4a16      	ldr	r2, [pc, #88]	; (800ff88 <xTaskRemoveFromEventList+0xb4>)
 800ff30:	6013      	str	r3, [r2, #0]
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff36:	4613      	mov	r3, r2
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	4413      	add	r3, r2
 800ff3c:	009b      	lsls	r3, r3, #2
 800ff3e:	4a13      	ldr	r2, [pc, #76]	; (800ff8c <xTaskRemoveFromEventList+0xb8>)
 800ff40:	441a      	add	r2, r3
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	3304      	adds	r3, #4
 800ff46:	4619      	mov	r1, r3
 800ff48:	4610      	mov	r0, r2
 800ff4a:	f7fe fd68 	bl	800ea1e <vListInsertEnd>
 800ff4e:	e005      	b.n	800ff5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	3318      	adds	r3, #24
 800ff54:	4619      	mov	r1, r3
 800ff56:	480e      	ldr	r0, [pc, #56]	; (800ff90 <xTaskRemoveFromEventList+0xbc>)
 800ff58:	f7fe fd61 	bl	800ea1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff60:	4b0c      	ldr	r3, [pc, #48]	; (800ff94 <xTaskRemoveFromEventList+0xc0>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d905      	bls.n	800ff76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff6e:	4b0a      	ldr	r3, [pc, #40]	; (800ff98 <xTaskRemoveFromEventList+0xc4>)
 800ff70:	2201      	movs	r2, #1
 800ff72:	601a      	str	r2, [r3, #0]
 800ff74:	e001      	b.n	800ff7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ff76:	2300      	movs	r3, #0
 800ff78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff7a:	697b      	ldr	r3, [r7, #20]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3718      	adds	r7, #24
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	20003ef0 	.word	0x20003ef0
 800ff88:	20003ed0 	.word	0x20003ed0
 800ff8c:	200039f8 	.word	0x200039f8
 800ff90:	20003e88 	.word	0x20003e88
 800ff94:	200039f4 	.word	0x200039f4
 800ff98:	20003edc 	.word	0x20003edc

0800ff9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffa4:	4b06      	ldr	r3, [pc, #24]	; (800ffc0 <vTaskInternalSetTimeOutState+0x24>)
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffac:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <vTaskInternalSetTimeOutState+0x28>)
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	605a      	str	r2, [r3, #4]
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr
 800ffc0:	20003ee0 	.word	0x20003ee0
 800ffc4:	20003ecc 	.word	0x20003ecc

0800ffc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b088      	sub	sp, #32
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d10b      	bne.n	800fff0 <xTaskCheckForTimeOut+0x28>
 800ffd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffdc:	b672      	cpsid	i
 800ffde:	f383 8811 	msr	BASEPRI, r3
 800ffe2:	f3bf 8f6f 	isb	sy
 800ffe6:	f3bf 8f4f 	dsb	sy
 800ffea:	b662      	cpsie	i
 800ffec:	613b      	str	r3, [r7, #16]
 800ffee:	e7fe      	b.n	800ffee <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d10b      	bne.n	801000e <xTaskCheckForTimeOut+0x46>
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	b672      	cpsid	i
 800fffc:	f383 8811 	msr	BASEPRI, r3
 8010000:	f3bf 8f6f 	isb	sy
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	b662      	cpsie	i
 801000a:	60fb      	str	r3, [r7, #12]
 801000c:	e7fe      	b.n	801000c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801000e:	f000 ff73 	bl	8010ef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010012:	4b1d      	ldr	r3, [pc, #116]	; (8010088 <xTaskCheckForTimeOut+0xc0>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	69ba      	ldr	r2, [r7, #24]
 801001e:	1ad3      	subs	r3, r2, r3
 8010020:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801002a:	d102      	bne.n	8010032 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801002c:	2300      	movs	r3, #0
 801002e:	61fb      	str	r3, [r7, #28]
 8010030:	e023      	b.n	801007a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	4b15      	ldr	r3, [pc, #84]	; (801008c <xTaskCheckForTimeOut+0xc4>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	429a      	cmp	r2, r3
 801003c:	d007      	beq.n	801004e <xTaskCheckForTimeOut+0x86>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	429a      	cmp	r2, r3
 8010046:	d302      	bcc.n	801004e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010048:	2301      	movs	r3, #1
 801004a:	61fb      	str	r3, [r7, #28]
 801004c:	e015      	b.n	801007a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	697a      	ldr	r2, [r7, #20]
 8010054:	429a      	cmp	r2, r3
 8010056:	d20b      	bcs.n	8010070 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	1ad2      	subs	r2, r2, r3
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7ff ff99 	bl	800ff9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801006a:	2300      	movs	r3, #0
 801006c:	61fb      	str	r3, [r7, #28]
 801006e:	e004      	b.n	801007a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2200      	movs	r2, #0
 8010074:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010076:	2301      	movs	r3, #1
 8010078:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801007a:	f000 ff6f 	bl	8010f5c <vPortExitCritical>

	return xReturn;
 801007e:	69fb      	ldr	r3, [r7, #28]
}
 8010080:	4618      	mov	r0, r3
 8010082:	3720      	adds	r7, #32
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	20003ecc 	.word	0x20003ecc
 801008c:	20003ee0 	.word	0x20003ee0

08010090 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010090:	b480      	push	{r7}
 8010092:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010094:	4b03      	ldr	r3, [pc, #12]	; (80100a4 <vTaskMissedYield+0x14>)
 8010096:	2201      	movs	r2, #1
 8010098:	601a      	str	r2, [r3, #0]
}
 801009a:	bf00      	nop
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	20003edc 	.word	0x20003edc

080100a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80100b0:	f000 f852 	bl	8010158 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80100b4:	4b06      	ldr	r3, [pc, #24]	; (80100d0 <prvIdleTask+0x28>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d9f9      	bls.n	80100b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80100bc:	4b05      	ldr	r3, [pc, #20]	; (80100d4 <prvIdleTask+0x2c>)
 80100be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c2:	601a      	str	r2, [r3, #0]
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80100cc:	e7f0      	b.n	80100b0 <prvIdleTask+0x8>
 80100ce:	bf00      	nop
 80100d0:	200039f8 	.word	0x200039f8
 80100d4:	e000ed04 	.word	0xe000ed04

080100d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100de:	2300      	movs	r3, #0
 80100e0:	607b      	str	r3, [r7, #4]
 80100e2:	e00c      	b.n	80100fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	4613      	mov	r3, r2
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	4413      	add	r3, r2
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	4a12      	ldr	r2, [pc, #72]	; (8010138 <prvInitialiseTaskLists+0x60>)
 80100f0:	4413      	add	r3, r2
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fe fc66 	bl	800e9c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	3301      	adds	r3, #1
 80100fc:	607b      	str	r3, [r7, #4]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b37      	cmp	r3, #55	; 0x37
 8010102:	d9ef      	bls.n	80100e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010104:	480d      	ldr	r0, [pc, #52]	; (801013c <prvInitialiseTaskLists+0x64>)
 8010106:	f7fe fc5d 	bl	800e9c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801010a:	480d      	ldr	r0, [pc, #52]	; (8010140 <prvInitialiseTaskLists+0x68>)
 801010c:	f7fe fc5a 	bl	800e9c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010110:	480c      	ldr	r0, [pc, #48]	; (8010144 <prvInitialiseTaskLists+0x6c>)
 8010112:	f7fe fc57 	bl	800e9c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010116:	480c      	ldr	r0, [pc, #48]	; (8010148 <prvInitialiseTaskLists+0x70>)
 8010118:	f7fe fc54 	bl	800e9c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801011c:	480b      	ldr	r0, [pc, #44]	; (801014c <prvInitialiseTaskLists+0x74>)
 801011e:	f7fe fc51 	bl	800e9c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010122:	4b0b      	ldr	r3, [pc, #44]	; (8010150 <prvInitialiseTaskLists+0x78>)
 8010124:	4a05      	ldr	r2, [pc, #20]	; (801013c <prvInitialiseTaskLists+0x64>)
 8010126:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010128:	4b0a      	ldr	r3, [pc, #40]	; (8010154 <prvInitialiseTaskLists+0x7c>)
 801012a:	4a05      	ldr	r2, [pc, #20]	; (8010140 <prvInitialiseTaskLists+0x68>)
 801012c:	601a      	str	r2, [r3, #0]
}
 801012e:	bf00      	nop
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	200039f8 	.word	0x200039f8
 801013c:	20003e58 	.word	0x20003e58
 8010140:	20003e6c 	.word	0x20003e6c
 8010144:	20003e88 	.word	0x20003e88
 8010148:	20003e9c 	.word	0x20003e9c
 801014c:	20003eb4 	.word	0x20003eb4
 8010150:	20003e80 	.word	0x20003e80
 8010154:	20003e84 	.word	0x20003e84

08010158 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801015e:	e019      	b.n	8010194 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010160:	f000 feca 	bl	8010ef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010164:	4b0f      	ldr	r3, [pc, #60]	; (80101a4 <prvCheckTasksWaitingTermination+0x4c>)
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	3304      	adds	r3, #4
 8010170:	4618      	mov	r0, r3
 8010172:	f7fe fcb1 	bl	800ead8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010176:	4b0c      	ldr	r3, [pc, #48]	; (80101a8 <prvCheckTasksWaitingTermination+0x50>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3b01      	subs	r3, #1
 801017c:	4a0a      	ldr	r2, [pc, #40]	; (80101a8 <prvCheckTasksWaitingTermination+0x50>)
 801017e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010180:	4b0a      	ldr	r3, [pc, #40]	; (80101ac <prvCheckTasksWaitingTermination+0x54>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	3b01      	subs	r3, #1
 8010186:	4a09      	ldr	r2, [pc, #36]	; (80101ac <prvCheckTasksWaitingTermination+0x54>)
 8010188:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801018a:	f000 fee7 	bl	8010f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 f80e 	bl	80101b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010194:	4b05      	ldr	r3, [pc, #20]	; (80101ac <prvCheckTasksWaitingTermination+0x54>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d1e1      	bne.n	8010160 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801019c:	bf00      	nop
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	20003e9c 	.word	0x20003e9c
 80101a8:	20003ec8 	.word	0x20003ec8
 80101ac:	20003eb0 	.word	0x20003eb0

080101b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d108      	bne.n	80101d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101c6:	4618      	mov	r0, r3
 80101c8:	f001 f880 	bl	80112cc <vPortFree>
				vPortFree( pxTCB );
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f001 f87d 	bl	80112cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101d2:	e019      	b.n	8010208 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d103      	bne.n	80101e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f001 f874 	bl	80112cc <vPortFree>
	}
 80101e4:	e010      	b.n	8010208 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80101ec:	2b02      	cmp	r3, #2
 80101ee:	d00b      	beq.n	8010208 <prvDeleteTCB+0x58>
 80101f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f4:	b672      	cpsid	i
 80101f6:	f383 8811 	msr	BASEPRI, r3
 80101fa:	f3bf 8f6f 	isb	sy
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	b662      	cpsie	i
 8010204:	60fb      	str	r3, [r7, #12]
 8010206:	e7fe      	b.n	8010206 <prvDeleteTCB+0x56>
	}
 8010208:	bf00      	nop
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010216:	4b0c      	ldr	r3, [pc, #48]	; (8010248 <prvResetNextTaskUnblockTime+0x38>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d104      	bne.n	801022a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010220:	4b0a      	ldr	r3, [pc, #40]	; (801024c <prvResetNextTaskUnblockTime+0x3c>)
 8010222:	f04f 32ff 	mov.w	r2, #4294967295
 8010226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010228:	e008      	b.n	801023c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801022a:	4b07      	ldr	r3, [pc, #28]	; (8010248 <prvResetNextTaskUnblockTime+0x38>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	4a04      	ldr	r2, [pc, #16]	; (801024c <prvResetNextTaskUnblockTime+0x3c>)
 801023a:	6013      	str	r3, [r2, #0]
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	20003e80 	.word	0x20003e80
 801024c:	20003ee8 	.word	0x20003ee8

08010250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010256:	4b0b      	ldr	r3, [pc, #44]	; (8010284 <xTaskGetSchedulerState+0x34>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d102      	bne.n	8010264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801025e:	2301      	movs	r3, #1
 8010260:	607b      	str	r3, [r7, #4]
 8010262:	e008      	b.n	8010276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010264:	4b08      	ldr	r3, [pc, #32]	; (8010288 <xTaskGetSchedulerState+0x38>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d102      	bne.n	8010272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801026c:	2302      	movs	r3, #2
 801026e:	607b      	str	r3, [r7, #4]
 8010270:	e001      	b.n	8010276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010272:	2300      	movs	r3, #0
 8010274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010276:	687b      	ldr	r3, [r7, #4]
	}
 8010278:	4618      	mov	r0, r3
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	20003ed4 	.word	0x20003ed4
 8010288:	20003ef0 	.word	0x20003ef0

0801028c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010298:	2300      	movs	r3, #0
 801029a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d058      	beq.n	8010354 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80102a2:	4b2f      	ldr	r3, [pc, #188]	; (8010360 <xTaskPriorityDisinherit+0xd4>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	693a      	ldr	r2, [r7, #16]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d00b      	beq.n	80102c4 <xTaskPriorityDisinherit+0x38>
 80102ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b0:	b672      	cpsid	i
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	b662      	cpsie	i
 80102c0:	60fb      	str	r3, [r7, #12]
 80102c2:	e7fe      	b.n	80102c2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d10b      	bne.n	80102e4 <xTaskPriorityDisinherit+0x58>
 80102cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d0:	b672      	cpsid	i
 80102d2:	f383 8811 	msr	BASEPRI, r3
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	b662      	cpsie	i
 80102e0:	60bb      	str	r3, [r7, #8]
 80102e2:	e7fe      	b.n	80102e2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102e8:	1e5a      	subs	r2, r3, #1
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d02c      	beq.n	8010354 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d128      	bne.n	8010354 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	3304      	adds	r3, #4
 8010306:	4618      	mov	r0, r3
 8010308:	f7fe fbe6 	bl	800ead8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010318:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010324:	4b0f      	ldr	r3, [pc, #60]	; (8010364 <xTaskPriorityDisinherit+0xd8>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	429a      	cmp	r2, r3
 801032a:	d903      	bls.n	8010334 <xTaskPriorityDisinherit+0xa8>
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010330:	4a0c      	ldr	r2, [pc, #48]	; (8010364 <xTaskPriorityDisinherit+0xd8>)
 8010332:	6013      	str	r3, [r2, #0]
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010338:	4613      	mov	r3, r2
 801033a:	009b      	lsls	r3, r3, #2
 801033c:	4413      	add	r3, r2
 801033e:	009b      	lsls	r3, r3, #2
 8010340:	4a09      	ldr	r2, [pc, #36]	; (8010368 <xTaskPriorityDisinherit+0xdc>)
 8010342:	441a      	add	r2, r3
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	3304      	adds	r3, #4
 8010348:	4619      	mov	r1, r3
 801034a:	4610      	mov	r0, r2
 801034c:	f7fe fb67 	bl	800ea1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010350:	2301      	movs	r3, #1
 8010352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010354:	697b      	ldr	r3, [r7, #20]
	}
 8010356:	4618      	mov	r0, r3
 8010358:	3718      	adds	r7, #24
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	200039f4 	.word	0x200039f4
 8010364:	20003ed0 	.word	0x20003ed0
 8010368:	200039f8 	.word	0x200039f8

0801036c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801036c:	b580      	push	{r7, lr}
 801036e:	b086      	sub	sp, #24
 8010370:	af00      	add	r7, sp, #0
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
 8010378:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801037a:	f000 fdbd 	bl	8010ef8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801037e:	4b26      	ldr	r3, [pc, #152]	; (8010418 <xTaskNotifyWait+0xac>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010386:	b2db      	uxtb	r3, r3
 8010388:	2b02      	cmp	r3, #2
 801038a:	d01a      	beq.n	80103c2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801038c:	4b22      	ldr	r3, [pc, #136]	; (8010418 <xTaskNotifyWait+0xac>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010392:	68fa      	ldr	r2, [r7, #12]
 8010394:	43d2      	mvns	r2, r2
 8010396:	400a      	ands	r2, r1
 8010398:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801039a:	4b1f      	ldr	r3, [pc, #124]	; (8010418 <xTaskNotifyWait+0xac>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2201      	movs	r2, #1
 80103a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00b      	beq.n	80103c2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80103aa:	2101      	movs	r1, #1
 80103ac:	6838      	ldr	r0, [r7, #0]
 80103ae:	f000 f8f1 	bl	8010594 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80103b2:	4b1a      	ldr	r3, [pc, #104]	; (801041c <xTaskNotifyWait+0xb0>)
 80103b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103b8:	601a      	str	r2, [r3, #0]
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80103c2:	f000 fdcb 	bl	8010f5c <vPortExitCritical>

		taskENTER_CRITICAL();
 80103c6:	f000 fd97 	bl	8010ef8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d004      	beq.n	80103da <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80103d0:	4b11      	ldr	r3, [pc, #68]	; (8010418 <xTaskNotifyWait+0xac>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80103da:	4b0f      	ldr	r3, [pc, #60]	; (8010418 <xTaskNotifyWait+0xac>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	d002      	beq.n	80103ee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80103e8:	2300      	movs	r3, #0
 80103ea:	617b      	str	r3, [r7, #20]
 80103ec:	e008      	b.n	8010400 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80103ee:	4b0a      	ldr	r3, [pc, #40]	; (8010418 <xTaskNotifyWait+0xac>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80103f4:	68ba      	ldr	r2, [r7, #8]
 80103f6:	43d2      	mvns	r2, r2
 80103f8:	400a      	ands	r2, r1
 80103fa:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80103fc:	2301      	movs	r3, #1
 80103fe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010400:	4b05      	ldr	r3, [pc, #20]	; (8010418 <xTaskNotifyWait+0xac>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2200      	movs	r2, #0
 8010406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801040a:	f000 fda7 	bl	8010f5c <vPortExitCritical>

		return xReturn;
 801040e:	697b      	ldr	r3, [r7, #20]
	}
 8010410:	4618      	mov	r0, r3
 8010412:	3718      	adds	r7, #24
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	200039f4 	.word	0x200039f4
 801041c:	e000ed04 	.word	0xe000ed04

08010420 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010420:	b580      	push	{r7, lr}
 8010422:	b08a      	sub	sp, #40	; 0x28
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	603b      	str	r3, [r7, #0]
 801042c:	4613      	mov	r3, r2
 801042e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010430:	2301      	movs	r3, #1
 8010432:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d10b      	bne.n	8010452 <xTaskGenericNotify+0x32>
 801043a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801043e:	b672      	cpsid	i
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	b662      	cpsie	i
 801044e:	61bb      	str	r3, [r7, #24]
 8010450:	e7fe      	b.n	8010450 <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010456:	f000 fd4f 	bl	8010ef8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d003      	beq.n	8010468 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010460:	6a3b      	ldr	r3, [r7, #32]
 8010462:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010468:	6a3b      	ldr	r3, [r7, #32]
 801046a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801046e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	2202      	movs	r2, #2
 8010474:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010478:	79fb      	ldrb	r3, [r7, #7]
 801047a:	2b04      	cmp	r3, #4
 801047c:	d827      	bhi.n	80104ce <xTaskGenericNotify+0xae>
 801047e:	a201      	add	r2, pc, #4	; (adr r2, 8010484 <xTaskGenericNotify+0x64>)
 8010480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010484:	080104f1 	.word	0x080104f1
 8010488:	08010499 	.word	0x08010499
 801048c:	080104a7 	.word	0x080104a7
 8010490:	080104b3 	.word	0x080104b3
 8010494:	080104bb 	.word	0x080104bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010498:	6a3b      	ldr	r3, [r7, #32]
 801049a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	431a      	orrs	r2, r3
 80104a0:	6a3b      	ldr	r3, [r7, #32]
 80104a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80104a4:	e027      	b.n	80104f6 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80104a6:	6a3b      	ldr	r3, [r7, #32]
 80104a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104aa:	1c5a      	adds	r2, r3, #1
 80104ac:	6a3b      	ldr	r3, [r7, #32]
 80104ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80104b0:	e021      	b.n	80104f6 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80104b2:	6a3b      	ldr	r3, [r7, #32]
 80104b4:	68ba      	ldr	r2, [r7, #8]
 80104b6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80104b8:	e01d      	b.n	80104f6 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80104ba:	7ffb      	ldrb	r3, [r7, #31]
 80104bc:	2b02      	cmp	r3, #2
 80104be:	d003      	beq.n	80104c8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80104c0:	6a3b      	ldr	r3, [r7, #32]
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80104c6:	e016      	b.n	80104f6 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80104c8:	2300      	movs	r3, #0
 80104ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80104cc:	e013      	b.n	80104f6 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d6:	d00d      	beq.n	80104f4 <xTaskGenericNotify+0xd4>
 80104d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104dc:	b672      	cpsid	i
 80104de:	f383 8811 	msr	BASEPRI, r3
 80104e2:	f3bf 8f6f 	isb	sy
 80104e6:	f3bf 8f4f 	dsb	sy
 80104ea:	b662      	cpsie	i
 80104ec:	617b      	str	r3, [r7, #20]
 80104ee:	e7fe      	b.n	80104ee <xTaskGenericNotify+0xce>
					break;
 80104f0:	bf00      	nop
 80104f2:	e000      	b.n	80104f6 <xTaskGenericNotify+0xd6>

					break;
 80104f4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80104f6:	7ffb      	ldrb	r3, [r7, #31]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d13b      	bne.n	8010574 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104fc:	6a3b      	ldr	r3, [r7, #32]
 80104fe:	3304      	adds	r3, #4
 8010500:	4618      	mov	r0, r3
 8010502:	f7fe fae9 	bl	800ead8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010506:	6a3b      	ldr	r3, [r7, #32]
 8010508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801050a:	4b1e      	ldr	r3, [pc, #120]	; (8010584 <xTaskGenericNotify+0x164>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	429a      	cmp	r2, r3
 8010510:	d903      	bls.n	801051a <xTaskGenericNotify+0xfa>
 8010512:	6a3b      	ldr	r3, [r7, #32]
 8010514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010516:	4a1b      	ldr	r2, [pc, #108]	; (8010584 <xTaskGenericNotify+0x164>)
 8010518:	6013      	str	r3, [r2, #0]
 801051a:	6a3b      	ldr	r3, [r7, #32]
 801051c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801051e:	4613      	mov	r3, r2
 8010520:	009b      	lsls	r3, r3, #2
 8010522:	4413      	add	r3, r2
 8010524:	009b      	lsls	r3, r3, #2
 8010526:	4a18      	ldr	r2, [pc, #96]	; (8010588 <xTaskGenericNotify+0x168>)
 8010528:	441a      	add	r2, r3
 801052a:	6a3b      	ldr	r3, [r7, #32]
 801052c:	3304      	adds	r3, #4
 801052e:	4619      	mov	r1, r3
 8010530:	4610      	mov	r0, r2
 8010532:	f7fe fa74 	bl	800ea1e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010536:	6a3b      	ldr	r3, [r7, #32]
 8010538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00b      	beq.n	8010556 <xTaskGenericNotify+0x136>
 801053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010542:	b672      	cpsid	i
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	b662      	cpsie	i
 8010552:	613b      	str	r3, [r7, #16]
 8010554:	e7fe      	b.n	8010554 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010556:	6a3b      	ldr	r3, [r7, #32]
 8010558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801055a:	4b0c      	ldr	r3, [pc, #48]	; (801058c <xTaskGenericNotify+0x16c>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010560:	429a      	cmp	r2, r3
 8010562:	d907      	bls.n	8010574 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010564:	4b0a      	ldr	r3, [pc, #40]	; (8010590 <xTaskGenericNotify+0x170>)
 8010566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056a:	601a      	str	r2, [r3, #0]
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010574:	f000 fcf2 	bl	8010f5c <vPortExitCritical>

		return xReturn;
 8010578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801057a:	4618      	mov	r0, r3
 801057c:	3728      	adds	r7, #40	; 0x28
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	20003ed0 	.word	0x20003ed0
 8010588:	200039f8 	.word	0x200039f8
 801058c:	200039f4 	.word	0x200039f4
 8010590:	e000ed04 	.word	0xe000ed04

08010594 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801059e:	4b21      	ldr	r3, [pc, #132]	; (8010624 <prvAddCurrentTaskToDelayedList+0x90>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105a4:	4b20      	ldr	r3, [pc, #128]	; (8010628 <prvAddCurrentTaskToDelayedList+0x94>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	3304      	adds	r3, #4
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fe fa94 	bl	800ead8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b6:	d10a      	bne.n	80105ce <prvAddCurrentTaskToDelayedList+0x3a>
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d007      	beq.n	80105ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105be:	4b1a      	ldr	r3, [pc, #104]	; (8010628 <prvAddCurrentTaskToDelayedList+0x94>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3304      	adds	r3, #4
 80105c4:	4619      	mov	r1, r3
 80105c6:	4819      	ldr	r0, [pc, #100]	; (801062c <prvAddCurrentTaskToDelayedList+0x98>)
 80105c8:	f7fe fa29 	bl	800ea1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80105cc:	e026      	b.n	801061c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4413      	add	r3, r2
 80105d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80105d6:	4b14      	ldr	r3, [pc, #80]	; (8010628 <prvAddCurrentTaskToDelayedList+0x94>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	68ba      	ldr	r2, [r7, #8]
 80105dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80105de:	68ba      	ldr	r2, [r7, #8]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d209      	bcs.n	80105fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105e6:	4b12      	ldr	r3, [pc, #72]	; (8010630 <prvAddCurrentTaskToDelayedList+0x9c>)
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	4b0f      	ldr	r3, [pc, #60]	; (8010628 <prvAddCurrentTaskToDelayedList+0x94>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	3304      	adds	r3, #4
 80105f0:	4619      	mov	r1, r3
 80105f2:	4610      	mov	r0, r2
 80105f4:	f7fe fa37 	bl	800ea66 <vListInsert>
}
 80105f8:	e010      	b.n	801061c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105fa:	4b0e      	ldr	r3, [pc, #56]	; (8010634 <prvAddCurrentTaskToDelayedList+0xa0>)
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	4b0a      	ldr	r3, [pc, #40]	; (8010628 <prvAddCurrentTaskToDelayedList+0x94>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	3304      	adds	r3, #4
 8010604:	4619      	mov	r1, r3
 8010606:	4610      	mov	r0, r2
 8010608:	f7fe fa2d 	bl	800ea66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801060c:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <prvAddCurrentTaskToDelayedList+0xa4>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	429a      	cmp	r2, r3
 8010614:	d202      	bcs.n	801061c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010616:	4a08      	ldr	r2, [pc, #32]	; (8010638 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	6013      	str	r3, [r2, #0]
}
 801061c:	bf00      	nop
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	20003ecc 	.word	0x20003ecc
 8010628:	200039f4 	.word	0x200039f4
 801062c:	20003eb4 	.word	0x20003eb4
 8010630:	20003e84 	.word	0x20003e84
 8010634:	20003e80 	.word	0x20003e80
 8010638:	20003ee8 	.word	0x20003ee8

0801063c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b08a      	sub	sp, #40	; 0x28
 8010640:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010642:	2300      	movs	r3, #0
 8010644:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010646:	f000 fb0d 	bl	8010c64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801064a:	4b1d      	ldr	r3, [pc, #116]	; (80106c0 <xTimerCreateTimerTask+0x84>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d021      	beq.n	8010696 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010652:	2300      	movs	r3, #0
 8010654:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010656:	2300      	movs	r3, #0
 8010658:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801065a:	1d3a      	adds	r2, r7, #4
 801065c:	f107 0108 	add.w	r1, r7, #8
 8010660:	f107 030c 	add.w	r3, r7, #12
 8010664:	4618      	mov	r0, r3
 8010666:	f7fe f993 	bl	800e990 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801066a:	6879      	ldr	r1, [r7, #4]
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	68fa      	ldr	r2, [r7, #12]
 8010670:	9202      	str	r2, [sp, #8]
 8010672:	9301      	str	r3, [sp, #4]
 8010674:	2302      	movs	r3, #2
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	2300      	movs	r3, #0
 801067a:	460a      	mov	r2, r1
 801067c:	4911      	ldr	r1, [pc, #68]	; (80106c4 <xTimerCreateTimerTask+0x88>)
 801067e:	4812      	ldr	r0, [pc, #72]	; (80106c8 <xTimerCreateTimerTask+0x8c>)
 8010680:	f7fe ff4a 	bl	800f518 <xTaskCreateStatic>
 8010684:	4602      	mov	r2, r0
 8010686:	4b11      	ldr	r3, [pc, #68]	; (80106cc <xTimerCreateTimerTask+0x90>)
 8010688:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801068a:	4b10      	ldr	r3, [pc, #64]	; (80106cc <xTimerCreateTimerTask+0x90>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d001      	beq.n	8010696 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010692:	2301      	movs	r3, #1
 8010694:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d10b      	bne.n	80106b4 <xTimerCreateTimerTask+0x78>
 801069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a0:	b672      	cpsid	i
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	b662      	cpsie	i
 80106b0:	613b      	str	r3, [r7, #16]
 80106b2:	e7fe      	b.n	80106b2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80106b4:	697b      	ldr	r3, [r7, #20]
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3718      	adds	r7, #24
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	20003f24 	.word	0x20003f24
 80106c4:	08015ba8 	.word	0x08015ba8
 80106c8:	08010809 	.word	0x08010809
 80106cc:	20003f28 	.word	0x20003f28

080106d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b08a      	sub	sp, #40	; 0x28
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
 80106dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80106de:	2300      	movs	r3, #0
 80106e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d10b      	bne.n	8010700 <xTimerGenericCommand+0x30>
 80106e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ec:	b672      	cpsid	i
 80106ee:	f383 8811 	msr	BASEPRI, r3
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	f3bf 8f4f 	dsb	sy
 80106fa:	b662      	cpsie	i
 80106fc:	623b      	str	r3, [r7, #32]
 80106fe:	e7fe      	b.n	80106fe <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010700:	4b19      	ldr	r3, [pc, #100]	; (8010768 <xTimerGenericCommand+0x98>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d02a      	beq.n	801075e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	2b05      	cmp	r3, #5
 8010718:	dc18      	bgt.n	801074c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801071a:	f7ff fd99 	bl	8010250 <xTaskGetSchedulerState>
 801071e:	4603      	mov	r3, r0
 8010720:	2b02      	cmp	r3, #2
 8010722:	d109      	bne.n	8010738 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010724:	4b10      	ldr	r3, [pc, #64]	; (8010768 <xTimerGenericCommand+0x98>)
 8010726:	6818      	ldr	r0, [r3, #0]
 8010728:	f107 0110 	add.w	r1, r7, #16
 801072c:	2300      	movs	r3, #0
 801072e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010730:	f7fe fb06 	bl	800ed40 <xQueueGenericSend>
 8010734:	6278      	str	r0, [r7, #36]	; 0x24
 8010736:	e012      	b.n	801075e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010738:	4b0b      	ldr	r3, [pc, #44]	; (8010768 <xTimerGenericCommand+0x98>)
 801073a:	6818      	ldr	r0, [r3, #0]
 801073c:	f107 0110 	add.w	r1, r7, #16
 8010740:	2300      	movs	r3, #0
 8010742:	2200      	movs	r2, #0
 8010744:	f7fe fafc 	bl	800ed40 <xQueueGenericSend>
 8010748:	6278      	str	r0, [r7, #36]	; 0x24
 801074a:	e008      	b.n	801075e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801074c:	4b06      	ldr	r3, [pc, #24]	; (8010768 <xTimerGenericCommand+0x98>)
 801074e:	6818      	ldr	r0, [r3, #0]
 8010750:	f107 0110 	add.w	r1, r7, #16
 8010754:	2300      	movs	r3, #0
 8010756:	683a      	ldr	r2, [r7, #0]
 8010758:	f7fe fbf4 	bl	800ef44 <xQueueGenericSendFromISR>
 801075c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010760:	4618      	mov	r0, r3
 8010762:	3728      	adds	r7, #40	; 0x28
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	20003f24 	.word	0x20003f24

0801076c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b088      	sub	sp, #32
 8010770:	af02      	add	r7, sp, #8
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010776:	4b23      	ldr	r3, [pc, #140]	; (8010804 <prvProcessExpiredTimer+0x98>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	3304      	adds	r3, #4
 8010784:	4618      	mov	r0, r3
 8010786:	f7fe f9a7 	bl	800ead8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010790:	f003 0304 	and.w	r3, r3, #4
 8010794:	2b00      	cmp	r3, #0
 8010796:	d023      	beq.n	80107e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	699a      	ldr	r2, [r3, #24]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	18d1      	adds	r1, r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	683a      	ldr	r2, [r7, #0]
 80107a4:	6978      	ldr	r0, [r7, #20]
 80107a6:	f000 f8d3 	bl	8010950 <prvInsertTimerInActiveList>
 80107aa:	4603      	mov	r3, r0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d020      	beq.n	80107f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107b0:	2300      	movs	r3, #0
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	2300      	movs	r3, #0
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	2100      	movs	r1, #0
 80107ba:	6978      	ldr	r0, [r7, #20]
 80107bc:	f7ff ff88 	bl	80106d0 <xTimerGenericCommand>
 80107c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d114      	bne.n	80107f2 <prvProcessExpiredTimer+0x86>
 80107c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107cc:	b672      	cpsid	i
 80107ce:	f383 8811 	msr	BASEPRI, r3
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	f3bf 8f4f 	dsb	sy
 80107da:	b662      	cpsie	i
 80107dc:	60fb      	str	r3, [r7, #12]
 80107de:	e7fe      	b.n	80107de <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107e6:	f023 0301 	bic.w	r3, r3, #1
 80107ea:	b2da      	uxtb	r2, r3
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	6a1b      	ldr	r3, [r3, #32]
 80107f6:	6978      	ldr	r0, [r7, #20]
 80107f8:	4798      	blx	r3
}
 80107fa:	bf00      	nop
 80107fc:	3718      	adds	r7, #24
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	20003f1c 	.word	0x20003f1c

08010808 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010810:	f107 0308 	add.w	r3, r7, #8
 8010814:	4618      	mov	r0, r3
 8010816:	f000 f857 	bl	80108c8 <prvGetNextExpireTime>
 801081a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	4619      	mov	r1, r3
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	f000 f803 	bl	801082c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010826:	f000 f8d5 	bl	80109d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801082a:	e7f1      	b.n	8010810 <prvTimerTask+0x8>

0801082c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010836:	f7ff f927 	bl	800fa88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801083a:	f107 0308 	add.w	r3, r7, #8
 801083e:	4618      	mov	r0, r3
 8010840:	f000 f866 	bl	8010910 <prvSampleTimeNow>
 8010844:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d130      	bne.n	80108ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d10a      	bne.n	8010868 <prvProcessTimerOrBlockTask+0x3c>
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	429a      	cmp	r2, r3
 8010858:	d806      	bhi.n	8010868 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801085a:	f7ff f923 	bl	800faa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801085e:	68f9      	ldr	r1, [r7, #12]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff ff83 	bl	801076c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010866:	e024      	b.n	80108b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d008      	beq.n	8010880 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801086e:	4b13      	ldr	r3, [pc, #76]	; (80108bc <prvProcessTimerOrBlockTask+0x90>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d101      	bne.n	801087c <prvProcessTimerOrBlockTask+0x50>
 8010878:	2301      	movs	r3, #1
 801087a:	e000      	b.n	801087e <prvProcessTimerOrBlockTask+0x52>
 801087c:	2300      	movs	r3, #0
 801087e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010880:	4b0f      	ldr	r3, [pc, #60]	; (80108c0 <prvProcessTimerOrBlockTask+0x94>)
 8010882:	6818      	ldr	r0, [r3, #0]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	683a      	ldr	r2, [r7, #0]
 801088c:	4619      	mov	r1, r3
 801088e:	f7fe fe0f 	bl	800f4b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010892:	f7ff f907 	bl	800faa4 <xTaskResumeAll>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10a      	bne.n	80108b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801089c:	4b09      	ldr	r3, [pc, #36]	; (80108c4 <prvProcessTimerOrBlockTask+0x98>)
 801089e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108a2:	601a      	str	r2, [r3, #0]
 80108a4:	f3bf 8f4f 	dsb	sy
 80108a8:	f3bf 8f6f 	isb	sy
}
 80108ac:	e001      	b.n	80108b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80108ae:	f7ff f8f9 	bl	800faa4 <xTaskResumeAll>
}
 80108b2:	bf00      	nop
 80108b4:	3710      	adds	r7, #16
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	20003f20 	.word	0x20003f20
 80108c0:	20003f24 	.word	0x20003f24
 80108c4:	e000ed04 	.word	0xe000ed04

080108c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80108d0:	4b0e      	ldr	r3, [pc, #56]	; (801090c <prvGetNextExpireTime+0x44>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d101      	bne.n	80108de <prvGetNextExpireTime+0x16>
 80108da:	2201      	movs	r2, #1
 80108dc:	e000      	b.n	80108e0 <prvGetNextExpireTime+0x18>
 80108de:	2200      	movs	r2, #0
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d105      	bne.n	80108f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80108ec:	4b07      	ldr	r3, [pc, #28]	; (801090c <prvGetNextExpireTime+0x44>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	e001      	b.n	80108fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80108f8:	2300      	movs	r3, #0
 80108fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80108fc:	68fb      	ldr	r3, [r7, #12]
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3714      	adds	r7, #20
 8010902:	46bd      	mov	sp, r7
 8010904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010908:	4770      	bx	lr
 801090a:	bf00      	nop
 801090c:	20003f1c 	.word	0x20003f1c

08010910 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010918:	f7ff f962 	bl	800fbe0 <xTaskGetTickCount>
 801091c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801091e:	4b0b      	ldr	r3, [pc, #44]	; (801094c <prvSampleTimeNow+0x3c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	429a      	cmp	r2, r3
 8010926:	d205      	bcs.n	8010934 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010928:	f000 f936 	bl	8010b98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2201      	movs	r2, #1
 8010930:	601a      	str	r2, [r3, #0]
 8010932:	e002      	b.n	801093a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801093a:	4a04      	ldr	r2, [pc, #16]	; (801094c <prvSampleTimeNow+0x3c>)
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010940:	68fb      	ldr	r3, [r7, #12]
}
 8010942:	4618      	mov	r0, r3
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	20003f2c 	.word	0x20003f2c

08010950 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b086      	sub	sp, #24
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
 801095c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801095e:	2300      	movs	r3, #0
 8010960:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	68ba      	ldr	r2, [r7, #8]
 8010966:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	68fa      	ldr	r2, [r7, #12]
 801096c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801096e:	68ba      	ldr	r2, [r7, #8]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	429a      	cmp	r2, r3
 8010974:	d812      	bhi.n	801099c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	1ad2      	subs	r2, r2, r3
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	699b      	ldr	r3, [r3, #24]
 8010980:	429a      	cmp	r2, r3
 8010982:	d302      	bcc.n	801098a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010984:	2301      	movs	r3, #1
 8010986:	617b      	str	r3, [r7, #20]
 8010988:	e01b      	b.n	80109c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801098a:	4b10      	ldr	r3, [pc, #64]	; (80109cc <prvInsertTimerInActiveList+0x7c>)
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	3304      	adds	r3, #4
 8010992:	4619      	mov	r1, r3
 8010994:	4610      	mov	r0, r2
 8010996:	f7fe f866 	bl	800ea66 <vListInsert>
 801099a:	e012      	b.n	80109c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d206      	bcs.n	80109b2 <prvInsertTimerInActiveList+0x62>
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d302      	bcc.n	80109b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80109ac:	2301      	movs	r3, #1
 80109ae:	617b      	str	r3, [r7, #20]
 80109b0:	e007      	b.n	80109c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109b2:	4b07      	ldr	r3, [pc, #28]	; (80109d0 <prvInsertTimerInActiveList+0x80>)
 80109b4:	681a      	ldr	r2, [r3, #0]
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	3304      	adds	r3, #4
 80109ba:	4619      	mov	r1, r3
 80109bc:	4610      	mov	r0, r2
 80109be:	f7fe f852 	bl	800ea66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80109c2:	697b      	ldr	r3, [r7, #20]
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3718      	adds	r7, #24
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	20003f20 	.word	0x20003f20
 80109d0:	20003f1c 	.word	0x20003f1c

080109d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b08e      	sub	sp, #56	; 0x38
 80109d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109da:	e0cc      	b.n	8010b76 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	da19      	bge.n	8010a16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80109e2:	1d3b      	adds	r3, r7, #4
 80109e4:	3304      	adds	r3, #4
 80109e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80109e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d10b      	bne.n	8010a06 <prvProcessReceivedCommands+0x32>
 80109ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f2:	b672      	cpsid	i
 80109f4:	f383 8811 	msr	BASEPRI, r3
 80109f8:	f3bf 8f6f 	isb	sy
 80109fc:	f3bf 8f4f 	dsb	sy
 8010a00:	b662      	cpsie	i
 8010a02:	61fb      	str	r3, [r7, #28]
 8010a04:	e7fe      	b.n	8010a04 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a0c:	6850      	ldr	r0, [r2, #4]
 8010a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a10:	6892      	ldr	r2, [r2, #8]
 8010a12:	4611      	mov	r1, r2
 8010a14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f2c0 80ab 	blt.w	8010b74 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a24:	695b      	ldr	r3, [r3, #20]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d004      	beq.n	8010a34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fe f852 	bl	800ead8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a34:	463b      	mov	r3, r7
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7ff ff6a 	bl	8010910 <prvSampleTimeNow>
 8010a3c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2b09      	cmp	r3, #9
 8010a42:	f200 8098 	bhi.w	8010b76 <prvProcessReceivedCommands+0x1a2>
 8010a46:	a201      	add	r2, pc, #4	; (adr r2, 8010a4c <prvProcessReceivedCommands+0x78>)
 8010a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4c:	08010a75 	.word	0x08010a75
 8010a50:	08010a75 	.word	0x08010a75
 8010a54:	08010a75 	.word	0x08010a75
 8010a58:	08010aeb 	.word	0x08010aeb
 8010a5c:	08010aff 	.word	0x08010aff
 8010a60:	08010b4b 	.word	0x08010b4b
 8010a64:	08010a75 	.word	0x08010a75
 8010a68:	08010a75 	.word	0x08010a75
 8010a6c:	08010aeb 	.word	0x08010aeb
 8010a70:	08010aff 	.word	0x08010aff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a7a:	f043 0301 	orr.w	r3, r3, #1
 8010a7e:	b2da      	uxtb	r2, r3
 8010a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010a86:	68ba      	ldr	r2, [r7, #8]
 8010a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8a:	699b      	ldr	r3, [r3, #24]
 8010a8c:	18d1      	adds	r1, r2, r3
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a94:	f7ff ff5c 	bl	8010950 <prvInsertTimerInActiveList>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d06b      	beq.n	8010b76 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa0:	6a1b      	ldr	r3, [r3, #32]
 8010aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010aa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010aac:	f003 0304 	and.w	r3, r3, #4
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d060      	beq.n	8010b76 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010ab4:	68ba      	ldr	r2, [r7, #8]
 8010ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab8:	699b      	ldr	r3, [r3, #24]
 8010aba:	441a      	add	r2, r3
 8010abc:	2300      	movs	r3, #0
 8010abe:	9300      	str	r3, [sp, #0]
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	2100      	movs	r1, #0
 8010ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ac6:	f7ff fe03 	bl	80106d0 <xTimerGenericCommand>
 8010aca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010acc:	6a3b      	ldr	r3, [r7, #32]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d151      	bne.n	8010b76 <prvProcessReceivedCommands+0x1a2>
 8010ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad6:	b672      	cpsid	i
 8010ad8:	f383 8811 	msr	BASEPRI, r3
 8010adc:	f3bf 8f6f 	isb	sy
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	b662      	cpsie	i
 8010ae6:	61bb      	str	r3, [r7, #24]
 8010ae8:	e7fe      	b.n	8010ae8 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010af0:	f023 0301 	bic.w	r3, r3, #1
 8010af4:	b2da      	uxtb	r2, r3
 8010af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010afc:	e03b      	b.n	8010b76 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b04:	f043 0301 	orr.w	r3, r3, #1
 8010b08:	b2da      	uxtb	r2, r3
 8010b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b10:	68ba      	ldr	r2, [r7, #8]
 8010b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b18:	699b      	ldr	r3, [r3, #24]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d10b      	bne.n	8010b36 <prvProcessReceivedCommands+0x162>
 8010b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b22:	b672      	cpsid	i
 8010b24:	f383 8811 	msr	BASEPRI, r3
 8010b28:	f3bf 8f6f 	isb	sy
 8010b2c:	f3bf 8f4f 	dsb	sy
 8010b30:	b662      	cpsie	i
 8010b32:	617b      	str	r3, [r7, #20]
 8010b34:	e7fe      	b.n	8010b34 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b38:	699a      	ldr	r2, [r3, #24]
 8010b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3c:	18d1      	adds	r1, r2, r3
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b44:	f7ff ff04 	bl	8010950 <prvInsertTimerInActiveList>
					break;
 8010b48:	e015      	b.n	8010b76 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b50:	f003 0302 	and.w	r3, r3, #2
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d103      	bne.n	8010b60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b5a:	f000 fbb7 	bl	80112cc <vPortFree>
 8010b5e:	e00a      	b.n	8010b76 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b66:	f023 0301 	bic.w	r3, r3, #1
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010b72:	e000      	b.n	8010b76 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010b74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b76:	4b07      	ldr	r3, [pc, #28]	; (8010b94 <prvProcessReceivedCommands+0x1c0>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	1d39      	adds	r1, r7, #4
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fe fa7c 	bl	800f07c <xQueueReceive>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f47f af28 	bne.w	80109dc <prvProcessReceivedCommands+0x8>
	}
}
 8010b8c:	bf00      	nop
 8010b8e:	3730      	adds	r7, #48	; 0x30
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	20003f24 	.word	0x20003f24

08010b98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b088      	sub	sp, #32
 8010b9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b9e:	e049      	b.n	8010c34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ba0:	4b2e      	ldr	r3, [pc, #184]	; (8010c5c <prvSwitchTimerLists+0xc4>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010baa:	4b2c      	ldr	r3, [pc, #176]	; (8010c5c <prvSwitchTimerLists+0xc4>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	3304      	adds	r3, #4
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7fd ff8d 	bl	800ead8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6a1b      	ldr	r3, [r3, #32]
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bcc:	f003 0304 	and.w	r3, r3, #4
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d02f      	beq.n	8010c34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	699b      	ldr	r3, [r3, #24]
 8010bd8:	693a      	ldr	r2, [r7, #16]
 8010bda:	4413      	add	r3, r2
 8010bdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010bde:	68ba      	ldr	r2, [r7, #8]
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d90e      	bls.n	8010c04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bf2:	4b1a      	ldr	r3, [pc, #104]	; (8010c5c <prvSwitchTimerLists+0xc4>)
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	4610      	mov	r0, r2
 8010bfe:	f7fd ff32 	bl	800ea66 <vListInsert>
 8010c02:	e017      	b.n	8010c34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c04:	2300      	movs	r3, #0
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	2300      	movs	r3, #0
 8010c0a:	693a      	ldr	r2, [r7, #16]
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	68f8      	ldr	r0, [r7, #12]
 8010c10:	f7ff fd5e 	bl	80106d0 <xTimerGenericCommand>
 8010c14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10b      	bne.n	8010c34 <prvSwitchTimerLists+0x9c>
 8010c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c20:	b672      	cpsid	i
 8010c22:	f383 8811 	msr	BASEPRI, r3
 8010c26:	f3bf 8f6f 	isb	sy
 8010c2a:	f3bf 8f4f 	dsb	sy
 8010c2e:	b662      	cpsie	i
 8010c30:	603b      	str	r3, [r7, #0]
 8010c32:	e7fe      	b.n	8010c32 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c34:	4b09      	ldr	r3, [pc, #36]	; (8010c5c <prvSwitchTimerLists+0xc4>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1b0      	bne.n	8010ba0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010c3e:	4b07      	ldr	r3, [pc, #28]	; (8010c5c <prvSwitchTimerLists+0xc4>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010c44:	4b06      	ldr	r3, [pc, #24]	; (8010c60 <prvSwitchTimerLists+0xc8>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	4a04      	ldr	r2, [pc, #16]	; (8010c5c <prvSwitchTimerLists+0xc4>)
 8010c4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010c4c:	4a04      	ldr	r2, [pc, #16]	; (8010c60 <prvSwitchTimerLists+0xc8>)
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	6013      	str	r3, [r2, #0]
}
 8010c52:	bf00      	nop
 8010c54:	3718      	adds	r7, #24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	20003f1c 	.word	0x20003f1c
 8010c60:	20003f20 	.word	0x20003f20

08010c64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010c6a:	f000 f945 	bl	8010ef8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010c6e:	4b15      	ldr	r3, [pc, #84]	; (8010cc4 <prvCheckForValidListAndQueue+0x60>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d120      	bne.n	8010cb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010c76:	4814      	ldr	r0, [pc, #80]	; (8010cc8 <prvCheckForValidListAndQueue+0x64>)
 8010c78:	f7fd fea4 	bl	800e9c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010c7c:	4813      	ldr	r0, [pc, #76]	; (8010ccc <prvCheckForValidListAndQueue+0x68>)
 8010c7e:	f7fd fea1 	bl	800e9c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010c82:	4b13      	ldr	r3, [pc, #76]	; (8010cd0 <prvCheckForValidListAndQueue+0x6c>)
 8010c84:	4a10      	ldr	r2, [pc, #64]	; (8010cc8 <prvCheckForValidListAndQueue+0x64>)
 8010c86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010c88:	4b12      	ldr	r3, [pc, #72]	; (8010cd4 <prvCheckForValidListAndQueue+0x70>)
 8010c8a:	4a10      	ldr	r2, [pc, #64]	; (8010ccc <prvCheckForValidListAndQueue+0x68>)
 8010c8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010c8e:	2300      	movs	r3, #0
 8010c90:	9300      	str	r3, [sp, #0]
 8010c92:	4b11      	ldr	r3, [pc, #68]	; (8010cd8 <prvCheckForValidListAndQueue+0x74>)
 8010c94:	4a11      	ldr	r2, [pc, #68]	; (8010cdc <prvCheckForValidListAndQueue+0x78>)
 8010c96:	2110      	movs	r1, #16
 8010c98:	200a      	movs	r0, #10
 8010c9a:	f7fd ffb1 	bl	800ec00 <xQueueGenericCreateStatic>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	4b08      	ldr	r3, [pc, #32]	; (8010cc4 <prvCheckForValidListAndQueue+0x60>)
 8010ca2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ca4:	4b07      	ldr	r3, [pc, #28]	; (8010cc4 <prvCheckForValidListAndQueue+0x60>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d005      	beq.n	8010cb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010cac:	4b05      	ldr	r3, [pc, #20]	; (8010cc4 <prvCheckForValidListAndQueue+0x60>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	490b      	ldr	r1, [pc, #44]	; (8010ce0 <prvCheckForValidListAndQueue+0x7c>)
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fe fbd4 	bl	800f460 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010cb8:	f000 f950 	bl	8010f5c <vPortExitCritical>
}
 8010cbc:	bf00      	nop
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	20003f24 	.word	0x20003f24
 8010cc8:	20003ef4 	.word	0x20003ef4
 8010ccc:	20003f08 	.word	0x20003f08
 8010cd0:	20003f1c 	.word	0x20003f1c
 8010cd4:	20003f20 	.word	0x20003f20
 8010cd8:	20003fd0 	.word	0x20003fd0
 8010cdc:	20003f30 	.word	0x20003f30
 8010ce0:	08015bb0 	.word	0x08015bb0

08010ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	60f8      	str	r0, [r7, #12]
 8010cec:	60b9      	str	r1, [r7, #8]
 8010cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	3b04      	subs	r3, #4
 8010cf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	3b04      	subs	r3, #4
 8010d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	f023 0201 	bic.w	r2, r3, #1
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	3b04      	subs	r3, #4
 8010d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d14:	4a0c      	ldr	r2, [pc, #48]	; (8010d48 <pxPortInitialiseStack+0x64>)
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	3b14      	subs	r3, #20
 8010d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	3b04      	subs	r3, #4
 8010d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f06f 0202 	mvn.w	r2, #2
 8010d32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	3b20      	subs	r3, #32
 8010d38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3714      	adds	r7, #20
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	08010d4d 	.word	0x08010d4d

08010d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d52:	2300      	movs	r3, #0
 8010d54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d56:	4b13      	ldr	r3, [pc, #76]	; (8010da4 <prvTaskExitError+0x58>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d5e:	d00b      	beq.n	8010d78 <prvTaskExitError+0x2c>
 8010d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d64:	b672      	cpsid	i
 8010d66:	f383 8811 	msr	BASEPRI, r3
 8010d6a:	f3bf 8f6f 	isb	sy
 8010d6e:	f3bf 8f4f 	dsb	sy
 8010d72:	b662      	cpsie	i
 8010d74:	60fb      	str	r3, [r7, #12]
 8010d76:	e7fe      	b.n	8010d76 <prvTaskExitError+0x2a>
 8010d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7c:	b672      	cpsid	i
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	b662      	cpsie	i
 8010d8c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010d8e:	bf00      	nop
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d0fc      	beq.n	8010d90 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010d96:	bf00      	nop
 8010d98:	3714      	adds	r7, #20
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da0:	4770      	bx	lr
 8010da2:	bf00      	nop
 8010da4:	2000017c 	.word	0x2000017c
	...

08010db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010db0:	4b07      	ldr	r3, [pc, #28]	; (8010dd0 <pxCurrentTCBConst2>)
 8010db2:	6819      	ldr	r1, [r3, #0]
 8010db4:	6808      	ldr	r0, [r1, #0]
 8010db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dba:	f380 8809 	msr	PSP, r0
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	f04f 0000 	mov.w	r0, #0
 8010dc6:	f380 8811 	msr	BASEPRI, r0
 8010dca:	4770      	bx	lr
 8010dcc:	f3af 8000 	nop.w

08010dd0 <pxCurrentTCBConst2>:
 8010dd0:	200039f4 	.word	0x200039f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010dd4:	bf00      	nop
 8010dd6:	bf00      	nop

08010dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010dd8:	4808      	ldr	r0, [pc, #32]	; (8010dfc <prvPortStartFirstTask+0x24>)
 8010dda:	6800      	ldr	r0, [r0, #0]
 8010ddc:	6800      	ldr	r0, [r0, #0]
 8010dde:	f380 8808 	msr	MSP, r0
 8010de2:	f04f 0000 	mov.w	r0, #0
 8010de6:	f380 8814 	msr	CONTROL, r0
 8010dea:	b662      	cpsie	i
 8010dec:	b661      	cpsie	f
 8010dee:	f3bf 8f4f 	dsb	sy
 8010df2:	f3bf 8f6f 	isb	sy
 8010df6:	df00      	svc	0
 8010df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010dfa:	bf00      	nop
 8010dfc:	e000ed08 	.word	0xe000ed08

08010e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e06:	4b36      	ldr	r3, [pc, #216]	; (8010ee0 <xPortStartScheduler+0xe0>)
 8010e08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	22ff      	movs	r2, #255	; 0xff
 8010e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010e20:	78fb      	ldrb	r3, [r7, #3]
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e28:	b2da      	uxtb	r2, r3
 8010e2a:	4b2e      	ldr	r3, [pc, #184]	; (8010ee4 <xPortStartScheduler+0xe4>)
 8010e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010e2e:	4b2e      	ldr	r3, [pc, #184]	; (8010ee8 <xPortStartScheduler+0xe8>)
 8010e30:	2207      	movs	r2, #7
 8010e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e34:	e009      	b.n	8010e4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010e36:	4b2c      	ldr	r3, [pc, #176]	; (8010ee8 <xPortStartScheduler+0xe8>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	4a2a      	ldr	r2, [pc, #168]	; (8010ee8 <xPortStartScheduler+0xe8>)
 8010e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010e40:	78fb      	ldrb	r3, [r7, #3]
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e4a:	78fb      	ldrb	r3, [r7, #3]
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e52:	2b80      	cmp	r3, #128	; 0x80
 8010e54:	d0ef      	beq.n	8010e36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010e56:	4b24      	ldr	r3, [pc, #144]	; (8010ee8 <xPortStartScheduler+0xe8>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f1c3 0307 	rsb	r3, r3, #7
 8010e5e:	2b04      	cmp	r3, #4
 8010e60:	d00b      	beq.n	8010e7a <xPortStartScheduler+0x7a>
 8010e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e66:	b672      	cpsid	i
 8010e68:	f383 8811 	msr	BASEPRI, r3
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	f3bf 8f4f 	dsb	sy
 8010e74:	b662      	cpsie	i
 8010e76:	60bb      	str	r3, [r7, #8]
 8010e78:	e7fe      	b.n	8010e78 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010e7a:	4b1b      	ldr	r3, [pc, #108]	; (8010ee8 <xPortStartScheduler+0xe8>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	021b      	lsls	r3, r3, #8
 8010e80:	4a19      	ldr	r2, [pc, #100]	; (8010ee8 <xPortStartScheduler+0xe8>)
 8010e82:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010e84:	4b18      	ldr	r3, [pc, #96]	; (8010ee8 <xPortStartScheduler+0xe8>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010e8c:	4a16      	ldr	r2, [pc, #88]	; (8010ee8 <xPortStartScheduler+0xe8>)
 8010e8e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	b2da      	uxtb	r2, r3
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010e98:	4b14      	ldr	r3, [pc, #80]	; (8010eec <xPortStartScheduler+0xec>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a13      	ldr	r2, [pc, #76]	; (8010eec <xPortStartScheduler+0xec>)
 8010e9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ea2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ea4:	4b11      	ldr	r3, [pc, #68]	; (8010eec <xPortStartScheduler+0xec>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4a10      	ldr	r2, [pc, #64]	; (8010eec <xPortStartScheduler+0xec>)
 8010eaa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010eae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010eb0:	f000 f8d4 	bl	801105c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010eb4:	4b0e      	ldr	r3, [pc, #56]	; (8010ef0 <xPortStartScheduler+0xf0>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010eba:	f000 f8f3 	bl	80110a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010ebe:	4b0d      	ldr	r3, [pc, #52]	; (8010ef4 <xPortStartScheduler+0xf4>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a0c      	ldr	r2, [pc, #48]	; (8010ef4 <xPortStartScheduler+0xf4>)
 8010ec4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010ec8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010eca:	f7ff ff85 	bl	8010dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010ece:	f7fe ff51 	bl	800fd74 <vTaskSwitchContext>
	prvTaskExitError();
 8010ed2:	f7ff ff3b 	bl	8010d4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010ed6:	2300      	movs	r3, #0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	e000e400 	.word	0xe000e400
 8010ee4:	20004020 	.word	0x20004020
 8010ee8:	20004024 	.word	0x20004024
 8010eec:	e000ed20 	.word	0xe000ed20
 8010ef0:	2000017c 	.word	0x2000017c
 8010ef4:	e000ef34 	.word	0xe000ef34

08010ef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	b672      	cpsid	i
 8010f04:	f383 8811 	msr	BASEPRI, r3
 8010f08:	f3bf 8f6f 	isb	sy
 8010f0c:	f3bf 8f4f 	dsb	sy
 8010f10:	b662      	cpsie	i
 8010f12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f14:	4b0f      	ldr	r3, [pc, #60]	; (8010f54 <vPortEnterCritical+0x5c>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	4a0e      	ldr	r2, [pc, #56]	; (8010f54 <vPortEnterCritical+0x5c>)
 8010f1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010f1e:	4b0d      	ldr	r3, [pc, #52]	; (8010f54 <vPortEnterCritical+0x5c>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2b01      	cmp	r3, #1
 8010f24:	d110      	bne.n	8010f48 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010f26:	4b0c      	ldr	r3, [pc, #48]	; (8010f58 <vPortEnterCritical+0x60>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00b      	beq.n	8010f48 <vPortEnterCritical+0x50>
 8010f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f34:	b672      	cpsid	i
 8010f36:	f383 8811 	msr	BASEPRI, r3
 8010f3a:	f3bf 8f6f 	isb	sy
 8010f3e:	f3bf 8f4f 	dsb	sy
 8010f42:	b662      	cpsie	i
 8010f44:	603b      	str	r3, [r7, #0]
 8010f46:	e7fe      	b.n	8010f46 <vPortEnterCritical+0x4e>
	}
}
 8010f48:	bf00      	nop
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	2000017c 	.word	0x2000017c
 8010f58:	e000ed04 	.word	0xe000ed04

08010f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010f62:	4b12      	ldr	r3, [pc, #72]	; (8010fac <vPortExitCritical+0x50>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d10b      	bne.n	8010f82 <vPortExitCritical+0x26>
 8010f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6e:	b672      	cpsid	i
 8010f70:	f383 8811 	msr	BASEPRI, r3
 8010f74:	f3bf 8f6f 	isb	sy
 8010f78:	f3bf 8f4f 	dsb	sy
 8010f7c:	b662      	cpsie	i
 8010f7e:	607b      	str	r3, [r7, #4]
 8010f80:	e7fe      	b.n	8010f80 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8010f82:	4b0a      	ldr	r3, [pc, #40]	; (8010fac <vPortExitCritical+0x50>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	3b01      	subs	r3, #1
 8010f88:	4a08      	ldr	r2, [pc, #32]	; (8010fac <vPortExitCritical+0x50>)
 8010f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010f8c:	4b07      	ldr	r3, [pc, #28]	; (8010fac <vPortExitCritical+0x50>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d104      	bne.n	8010f9e <vPortExitCritical+0x42>
 8010f94:	2300      	movs	r3, #0
 8010f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010f9e:	bf00      	nop
 8010fa0:	370c      	adds	r7, #12
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	2000017c 	.word	0x2000017c

08010fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010fb0:	f3ef 8009 	mrs	r0, PSP
 8010fb4:	f3bf 8f6f 	isb	sy
 8010fb8:	4b15      	ldr	r3, [pc, #84]	; (8011010 <pxCurrentTCBConst>)
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	f01e 0f10 	tst.w	lr, #16
 8010fc0:	bf08      	it	eq
 8010fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fca:	6010      	str	r0, [r2, #0]
 8010fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010fd4:	b672      	cpsid	i
 8010fd6:	f380 8811 	msr	BASEPRI, r0
 8010fda:	f3bf 8f4f 	dsb	sy
 8010fde:	f3bf 8f6f 	isb	sy
 8010fe2:	b662      	cpsie	i
 8010fe4:	f7fe fec6 	bl	800fd74 <vTaskSwitchContext>
 8010fe8:	f04f 0000 	mov.w	r0, #0
 8010fec:	f380 8811 	msr	BASEPRI, r0
 8010ff0:	bc09      	pop	{r0, r3}
 8010ff2:	6819      	ldr	r1, [r3, #0]
 8010ff4:	6808      	ldr	r0, [r1, #0]
 8010ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffa:	f01e 0f10 	tst.w	lr, #16
 8010ffe:	bf08      	it	eq
 8011000:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011004:	f380 8809 	msr	PSP, r0
 8011008:	f3bf 8f6f 	isb	sy
 801100c:	4770      	bx	lr
 801100e:	bf00      	nop

08011010 <pxCurrentTCBConst>:
 8011010:	200039f4 	.word	0x200039f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011014:	bf00      	nop
 8011016:	bf00      	nop

08011018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
	__asm volatile
 801101e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011022:	b672      	cpsid	i
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	b662      	cpsie	i
 8011032:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011034:	f7fe fde4 	bl	800fc00 <xTaskIncrementTick>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d003      	beq.n	8011046 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801103e:	4b06      	ldr	r3, [pc, #24]	; (8011058 <SysTick_Handler+0x40>)
 8011040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011044:	601a      	str	r2, [r3, #0]
 8011046:	2300      	movs	r3, #0
 8011048:	603b      	str	r3, [r7, #0]
	__asm volatile
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011050:	bf00      	nop
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	e000ed04 	.word	0xe000ed04

0801105c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801105c:	b480      	push	{r7}
 801105e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011060:	4b0b      	ldr	r3, [pc, #44]	; (8011090 <vPortSetupTimerInterrupt+0x34>)
 8011062:	2200      	movs	r2, #0
 8011064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011066:	4b0b      	ldr	r3, [pc, #44]	; (8011094 <vPortSetupTimerInterrupt+0x38>)
 8011068:	2200      	movs	r2, #0
 801106a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801106c:	4b0a      	ldr	r3, [pc, #40]	; (8011098 <vPortSetupTimerInterrupt+0x3c>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a0a      	ldr	r2, [pc, #40]	; (801109c <vPortSetupTimerInterrupt+0x40>)
 8011072:	fba2 2303 	umull	r2, r3, r2, r3
 8011076:	099b      	lsrs	r3, r3, #6
 8011078:	4a09      	ldr	r2, [pc, #36]	; (80110a0 <vPortSetupTimerInterrupt+0x44>)
 801107a:	3b01      	subs	r3, #1
 801107c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801107e:	4b04      	ldr	r3, [pc, #16]	; (8011090 <vPortSetupTimerInterrupt+0x34>)
 8011080:	2207      	movs	r2, #7
 8011082:	601a      	str	r2, [r3, #0]
}
 8011084:	bf00      	nop
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	e000e010 	.word	0xe000e010
 8011094:	e000e018 	.word	0xe000e018
 8011098:	20000170 	.word	0x20000170
 801109c:	10624dd3 	.word	0x10624dd3
 80110a0:	e000e014 	.word	0xe000e014

080110a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80110a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80110b4 <vPortEnableVFP+0x10>
 80110a8:	6801      	ldr	r1, [r0, #0]
 80110aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80110ae:	6001      	str	r1, [r0, #0]
 80110b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80110b2:	bf00      	nop
 80110b4:	e000ed88 	.word	0xe000ed88

080110b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80110b8:	b480      	push	{r7}
 80110ba:	b085      	sub	sp, #20
 80110bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80110be:	f3ef 8305 	mrs	r3, IPSR
 80110c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2b0f      	cmp	r3, #15
 80110c8:	d915      	bls.n	80110f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80110ca:	4a18      	ldr	r2, [pc, #96]	; (801112c <vPortValidateInterruptPriority+0x74>)
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	4413      	add	r3, r2
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80110d4:	4b16      	ldr	r3, [pc, #88]	; (8011130 <vPortValidateInterruptPriority+0x78>)
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	7afa      	ldrb	r2, [r7, #11]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d20b      	bcs.n	80110f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80110de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e2:	b672      	cpsid	i
 80110e4:	f383 8811 	msr	BASEPRI, r3
 80110e8:	f3bf 8f6f 	isb	sy
 80110ec:	f3bf 8f4f 	dsb	sy
 80110f0:	b662      	cpsie	i
 80110f2:	607b      	str	r3, [r7, #4]
 80110f4:	e7fe      	b.n	80110f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80110f6:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <vPortValidateInterruptPriority+0x7c>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80110fe:	4b0e      	ldr	r3, [pc, #56]	; (8011138 <vPortValidateInterruptPriority+0x80>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	429a      	cmp	r2, r3
 8011104:	d90b      	bls.n	801111e <vPortValidateInterruptPriority+0x66>
 8011106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110a:	b672      	cpsid	i
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	b662      	cpsie	i
 801111a:	603b      	str	r3, [r7, #0]
 801111c:	e7fe      	b.n	801111c <vPortValidateInterruptPriority+0x64>
	}
 801111e:	bf00      	nop
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	e000e3f0 	.word	0xe000e3f0
 8011130:	20004020 	.word	0x20004020
 8011134:	e000ed0c 	.word	0xe000ed0c
 8011138:	20004024 	.word	0x20004024

0801113c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b08a      	sub	sp, #40	; 0x28
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011144:	2300      	movs	r3, #0
 8011146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011148:	f7fe fc9e 	bl	800fa88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801114c:	4b5a      	ldr	r3, [pc, #360]	; (80112b8 <pvPortMalloc+0x17c>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d101      	bne.n	8011158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011154:	f000 f916 	bl	8011384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011158:	4b58      	ldr	r3, [pc, #352]	; (80112bc <pvPortMalloc+0x180>)
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	4013      	ands	r3, r2
 8011160:	2b00      	cmp	r3, #0
 8011162:	f040 8090 	bne.w	8011286 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d01e      	beq.n	80111aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801116c:	2208      	movs	r2, #8
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4413      	add	r3, r2
 8011172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f003 0307 	and.w	r3, r3, #7
 801117a:	2b00      	cmp	r3, #0
 801117c:	d015      	beq.n	80111aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f023 0307 	bic.w	r3, r3, #7
 8011184:	3308      	adds	r3, #8
 8011186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f003 0307 	and.w	r3, r3, #7
 801118e:	2b00      	cmp	r3, #0
 8011190:	d00b      	beq.n	80111aa <pvPortMalloc+0x6e>
 8011192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011196:	b672      	cpsid	i
 8011198:	f383 8811 	msr	BASEPRI, r3
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	b662      	cpsie	i
 80111a6:	617b      	str	r3, [r7, #20]
 80111a8:	e7fe      	b.n	80111a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d06a      	beq.n	8011286 <pvPortMalloc+0x14a>
 80111b0:	4b43      	ldr	r3, [pc, #268]	; (80112c0 <pvPortMalloc+0x184>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	687a      	ldr	r2, [r7, #4]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d865      	bhi.n	8011286 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80111ba:	4b42      	ldr	r3, [pc, #264]	; (80112c4 <pvPortMalloc+0x188>)
 80111bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80111be:	4b41      	ldr	r3, [pc, #260]	; (80112c4 <pvPortMalloc+0x188>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80111c4:	e004      	b.n	80111d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80111c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80111ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80111d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	687a      	ldr	r2, [r7, #4]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d903      	bls.n	80111e2 <pvPortMalloc+0xa6>
 80111da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d1f1      	bne.n	80111c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80111e2:	4b35      	ldr	r3, [pc, #212]	; (80112b8 <pvPortMalloc+0x17c>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d04c      	beq.n	8011286 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80111ec:	6a3b      	ldr	r3, [r7, #32]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2208      	movs	r2, #8
 80111f2:	4413      	add	r3, r2
 80111f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80111f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f8:	681a      	ldr	r2, [r3, #0]
 80111fa:	6a3b      	ldr	r3, [r7, #32]
 80111fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80111fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011200:	685a      	ldr	r2, [r3, #4]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	1ad2      	subs	r2, r2, r3
 8011206:	2308      	movs	r3, #8
 8011208:	005b      	lsls	r3, r3, #1
 801120a:	429a      	cmp	r2, r3
 801120c:	d920      	bls.n	8011250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801120e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	4413      	add	r3, r2
 8011214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	f003 0307 	and.w	r3, r3, #7
 801121c:	2b00      	cmp	r3, #0
 801121e:	d00b      	beq.n	8011238 <pvPortMalloc+0xfc>
 8011220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011224:	b672      	cpsid	i
 8011226:	f383 8811 	msr	BASEPRI, r3
 801122a:	f3bf 8f6f 	isb	sy
 801122e:	f3bf 8f4f 	dsb	sy
 8011232:	b662      	cpsie	i
 8011234:	613b      	str	r3, [r7, #16]
 8011236:	e7fe      	b.n	8011236 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	685a      	ldr	r2, [r3, #4]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	1ad2      	subs	r2, r2, r3
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801124a:	69b8      	ldr	r0, [r7, #24]
 801124c:	f000 f8fe 	bl	801144c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011250:	4b1b      	ldr	r3, [pc, #108]	; (80112c0 <pvPortMalloc+0x184>)
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	4a19      	ldr	r2, [pc, #100]	; (80112c0 <pvPortMalloc+0x184>)
 801125c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801125e:	4b18      	ldr	r3, [pc, #96]	; (80112c0 <pvPortMalloc+0x184>)
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	4b19      	ldr	r3, [pc, #100]	; (80112c8 <pvPortMalloc+0x18c>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	429a      	cmp	r2, r3
 8011268:	d203      	bcs.n	8011272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801126a:	4b15      	ldr	r3, [pc, #84]	; (80112c0 <pvPortMalloc+0x184>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	4a16      	ldr	r2, [pc, #88]	; (80112c8 <pvPortMalloc+0x18c>)
 8011270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011274:	685a      	ldr	r2, [r3, #4]
 8011276:	4b11      	ldr	r3, [pc, #68]	; (80112bc <pvPortMalloc+0x180>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	431a      	orrs	r2, r3
 801127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	2200      	movs	r2, #0
 8011284:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011286:	f7fe fc0d 	bl	800faa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	f003 0307 	and.w	r3, r3, #7
 8011290:	2b00      	cmp	r3, #0
 8011292:	d00b      	beq.n	80112ac <pvPortMalloc+0x170>
 8011294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011298:	b672      	cpsid	i
 801129a:	f383 8811 	msr	BASEPRI, r3
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f3bf 8f4f 	dsb	sy
 80112a6:	b662      	cpsie	i
 80112a8:	60fb      	str	r3, [r7, #12]
 80112aa:	e7fe      	b.n	80112aa <pvPortMalloc+0x16e>
	return pvReturn;
 80112ac:	69fb      	ldr	r3, [r7, #28]
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3728      	adds	r7, #40	; 0x28
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	20028a20 	.word	0x20028a20
 80112bc:	20028a2c 	.word	0x20028a2c
 80112c0:	20028a24 	.word	0x20028a24
 80112c4:	20028a18 	.word	0x20028a18
 80112c8:	20028a28 	.word	0x20028a28

080112cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d04a      	beq.n	8011374 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80112de:	2308      	movs	r3, #8
 80112e0:	425b      	negs	r3, r3
 80112e2:	697a      	ldr	r2, [r7, #20]
 80112e4:	4413      	add	r3, r2
 80112e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	685a      	ldr	r2, [r3, #4]
 80112f0:	4b22      	ldr	r3, [pc, #136]	; (801137c <vPortFree+0xb0>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4013      	ands	r3, r2
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d10b      	bne.n	8011312 <vPortFree+0x46>
 80112fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fe:	b672      	cpsid	i
 8011300:	f383 8811 	msr	BASEPRI, r3
 8011304:	f3bf 8f6f 	isb	sy
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	b662      	cpsie	i
 801130e:	60fb      	str	r3, [r7, #12]
 8011310:	e7fe      	b.n	8011310 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00b      	beq.n	8011332 <vPortFree+0x66>
 801131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131e:	b672      	cpsid	i
 8011320:	f383 8811 	msr	BASEPRI, r3
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	f3bf 8f4f 	dsb	sy
 801132c:	b662      	cpsie	i
 801132e:	60bb      	str	r3, [r7, #8]
 8011330:	e7fe      	b.n	8011330 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	685a      	ldr	r2, [r3, #4]
 8011336:	4b11      	ldr	r3, [pc, #68]	; (801137c <vPortFree+0xb0>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4013      	ands	r3, r2
 801133c:	2b00      	cmp	r3, #0
 801133e:	d019      	beq.n	8011374 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d115      	bne.n	8011374 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	685a      	ldr	r2, [r3, #4]
 801134c:	4b0b      	ldr	r3, [pc, #44]	; (801137c <vPortFree+0xb0>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	43db      	mvns	r3, r3
 8011352:	401a      	ands	r2, r3
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011358:	f7fe fb96 	bl	800fa88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	685a      	ldr	r2, [r3, #4]
 8011360:	4b07      	ldr	r3, [pc, #28]	; (8011380 <vPortFree+0xb4>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	4413      	add	r3, r2
 8011366:	4a06      	ldr	r2, [pc, #24]	; (8011380 <vPortFree+0xb4>)
 8011368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801136a:	6938      	ldr	r0, [r7, #16]
 801136c:	f000 f86e 	bl	801144c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011370:	f7fe fb98 	bl	800faa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011374:	bf00      	nop
 8011376:	3718      	adds	r7, #24
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	20028a2c 	.word	0x20028a2c
 8011380:	20028a24 	.word	0x20028a24

08011384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011384:	b480      	push	{r7}
 8011386:	b085      	sub	sp, #20
 8011388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801138a:	4b29      	ldr	r3, [pc, #164]	; (8011430 <prvHeapInit+0xac>)
 801138c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801138e:	4b29      	ldr	r3, [pc, #164]	; (8011434 <prvHeapInit+0xb0>)
 8011390:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	f003 0307 	and.w	r3, r3, #7
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00c      	beq.n	80113b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	3307      	adds	r3, #7
 80113a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	f023 0307 	bic.w	r3, r3, #7
 80113a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80113aa:	68ba      	ldr	r2, [r7, #8]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	4a20      	ldr	r2, [pc, #128]	; (8011434 <prvHeapInit+0xb0>)
 80113b2:	4413      	add	r3, r2
 80113b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80113ba:	4a1f      	ldr	r2, [pc, #124]	; (8011438 <prvHeapInit+0xb4>)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80113c0:	4b1d      	ldr	r3, [pc, #116]	; (8011438 <prvHeapInit+0xb4>)
 80113c2:	2200      	movs	r2, #0
 80113c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	68ba      	ldr	r2, [r7, #8]
 80113ca:	4413      	add	r3, r2
 80113cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80113ce:	2208      	movs	r2, #8
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	1a9b      	subs	r3, r3, r2
 80113d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f023 0307 	bic.w	r3, r3, #7
 80113dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	4a16      	ldr	r2, [pc, #88]	; (801143c <prvHeapInit+0xb8>)
 80113e2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80113e4:	4b15      	ldr	r3, [pc, #84]	; (801143c <prvHeapInit+0xb8>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2200      	movs	r2, #0
 80113ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80113ec:	4b13      	ldr	r3, [pc, #76]	; (801143c <prvHeapInit+0xb8>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2200      	movs	r2, #0
 80113f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	68fa      	ldr	r2, [r7, #12]
 80113fc:	1ad2      	subs	r2, r2, r3
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011402:	4b0e      	ldr	r3, [pc, #56]	; (801143c <prvHeapInit+0xb8>)
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	4a0c      	ldr	r2, [pc, #48]	; (8011440 <prvHeapInit+0xbc>)
 8011410:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	4a0b      	ldr	r2, [pc, #44]	; (8011444 <prvHeapInit+0xc0>)
 8011418:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801141a:	4b0b      	ldr	r3, [pc, #44]	; (8011448 <prvHeapInit+0xc4>)
 801141c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011420:	601a      	str	r2, [r3, #0]
}
 8011422:	bf00      	nop
 8011424:	3714      	adds	r7, #20
 8011426:	46bd      	mov	sp, r7
 8011428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop
 8011430:	000249f0 	.word	0x000249f0
 8011434:	20004028 	.word	0x20004028
 8011438:	20028a18 	.word	0x20028a18
 801143c:	20028a20 	.word	0x20028a20
 8011440:	20028a28 	.word	0x20028a28
 8011444:	20028a24 	.word	0x20028a24
 8011448:	20028a2c 	.word	0x20028a2c

0801144c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801144c:	b480      	push	{r7}
 801144e:	b085      	sub	sp, #20
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011454:	4b28      	ldr	r3, [pc, #160]	; (80114f8 <prvInsertBlockIntoFreeList+0xac>)
 8011456:	60fb      	str	r3, [r7, #12]
 8011458:	e002      	b.n	8011460 <prvInsertBlockIntoFreeList+0x14>
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	60fb      	str	r3, [r7, #12]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	429a      	cmp	r2, r3
 8011468:	d8f7      	bhi.n	801145a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	68ba      	ldr	r2, [r7, #8]
 8011474:	4413      	add	r3, r2
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	429a      	cmp	r2, r3
 801147a:	d108      	bne.n	801148e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	685a      	ldr	r2, [r3, #4]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	441a      	add	r2, r3
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	68ba      	ldr	r2, [r7, #8]
 8011498:	441a      	add	r2, r3
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d118      	bne.n	80114d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	4b15      	ldr	r3, [pc, #84]	; (80114fc <prvInsertBlockIntoFreeList+0xb0>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d00d      	beq.n	80114ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685a      	ldr	r2, [r3, #4]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	441a      	add	r2, r3
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	601a      	str	r2, [r3, #0]
 80114c8:	e008      	b.n	80114dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80114ca:	4b0c      	ldr	r3, [pc, #48]	; (80114fc <prvInsertBlockIntoFreeList+0xb0>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	601a      	str	r2, [r3, #0]
 80114d2:	e003      	b.n	80114dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80114dc:	68fa      	ldr	r2, [r7, #12]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d002      	beq.n	80114ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114ea:	bf00      	nop
 80114ec:	3714      	adds	r7, #20
 80114ee:	46bd      	mov	sp, r7
 80114f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop
 80114f8:	20028a18 	.word	0x20028a18
 80114fc:	20028a20 	.word	0x20028a20

08011500 <__errno>:
 8011500:	4b01      	ldr	r3, [pc, #4]	; (8011508 <__errno+0x8>)
 8011502:	6818      	ldr	r0, [r3, #0]
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop
 8011508:	20000180 	.word	0x20000180

0801150c <__libc_init_array>:
 801150c:	b570      	push	{r4, r5, r6, lr}
 801150e:	4e0d      	ldr	r6, [pc, #52]	; (8011544 <__libc_init_array+0x38>)
 8011510:	4c0d      	ldr	r4, [pc, #52]	; (8011548 <__libc_init_array+0x3c>)
 8011512:	1ba4      	subs	r4, r4, r6
 8011514:	10a4      	asrs	r4, r4, #2
 8011516:	2500      	movs	r5, #0
 8011518:	42a5      	cmp	r5, r4
 801151a:	d109      	bne.n	8011530 <__libc_init_array+0x24>
 801151c:	4e0b      	ldr	r6, [pc, #44]	; (801154c <__libc_init_array+0x40>)
 801151e:	4c0c      	ldr	r4, [pc, #48]	; (8011550 <__libc_init_array+0x44>)
 8011520:	f004 f840 	bl	80155a4 <_init>
 8011524:	1ba4      	subs	r4, r4, r6
 8011526:	10a4      	asrs	r4, r4, #2
 8011528:	2500      	movs	r5, #0
 801152a:	42a5      	cmp	r5, r4
 801152c:	d105      	bne.n	801153a <__libc_init_array+0x2e>
 801152e:	bd70      	pop	{r4, r5, r6, pc}
 8011530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011534:	4798      	blx	r3
 8011536:	3501      	adds	r5, #1
 8011538:	e7ee      	b.n	8011518 <__libc_init_array+0xc>
 801153a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801153e:	4798      	blx	r3
 8011540:	3501      	adds	r5, #1
 8011542:	e7f2      	b.n	801152a <__libc_init_array+0x1e>
 8011544:	080166a0 	.word	0x080166a0
 8011548:	080166a0 	.word	0x080166a0
 801154c:	080166a0 	.word	0x080166a0
 8011550:	080166a4 	.word	0x080166a4

08011554 <memcpy>:
 8011554:	b510      	push	{r4, lr}
 8011556:	1e43      	subs	r3, r0, #1
 8011558:	440a      	add	r2, r1
 801155a:	4291      	cmp	r1, r2
 801155c:	d100      	bne.n	8011560 <memcpy+0xc>
 801155e:	bd10      	pop	{r4, pc}
 8011560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011568:	e7f7      	b.n	801155a <memcpy+0x6>

0801156a <memset>:
 801156a:	4402      	add	r2, r0
 801156c:	4603      	mov	r3, r0
 801156e:	4293      	cmp	r3, r2
 8011570:	d100      	bne.n	8011574 <memset+0xa>
 8011572:	4770      	bx	lr
 8011574:	f803 1b01 	strb.w	r1, [r3], #1
 8011578:	e7f9      	b.n	801156e <memset+0x4>

0801157a <__cvt>:
 801157a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801157c:	ed2d 8b02 	vpush	{d8}
 8011580:	eeb0 8b40 	vmov.f64	d8, d0
 8011584:	b085      	sub	sp, #20
 8011586:	4617      	mov	r7, r2
 8011588:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801158a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801158c:	ee18 2a90 	vmov	r2, s17
 8011590:	f025 0520 	bic.w	r5, r5, #32
 8011594:	2a00      	cmp	r2, #0
 8011596:	bfb6      	itet	lt
 8011598:	222d      	movlt	r2, #45	; 0x2d
 801159a:	2200      	movge	r2, #0
 801159c:	eeb1 8b40 	vneglt.f64	d8, d0
 80115a0:	2d46      	cmp	r5, #70	; 0x46
 80115a2:	460c      	mov	r4, r1
 80115a4:	701a      	strb	r2, [r3, #0]
 80115a6:	d004      	beq.n	80115b2 <__cvt+0x38>
 80115a8:	2d45      	cmp	r5, #69	; 0x45
 80115aa:	d100      	bne.n	80115ae <__cvt+0x34>
 80115ac:	3401      	adds	r4, #1
 80115ae:	2102      	movs	r1, #2
 80115b0:	e000      	b.n	80115b4 <__cvt+0x3a>
 80115b2:	2103      	movs	r1, #3
 80115b4:	ab03      	add	r3, sp, #12
 80115b6:	9301      	str	r3, [sp, #4]
 80115b8:	ab02      	add	r3, sp, #8
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	4622      	mov	r2, r4
 80115be:	4633      	mov	r3, r6
 80115c0:	eeb0 0b48 	vmov.f64	d0, d8
 80115c4:	f001 fe44 	bl	8013250 <_dtoa_r>
 80115c8:	2d47      	cmp	r5, #71	; 0x47
 80115ca:	d101      	bne.n	80115d0 <__cvt+0x56>
 80115cc:	07fb      	lsls	r3, r7, #31
 80115ce:	d51e      	bpl.n	801160e <__cvt+0x94>
 80115d0:	2d46      	cmp	r5, #70	; 0x46
 80115d2:	eb00 0304 	add.w	r3, r0, r4
 80115d6:	d10c      	bne.n	80115f2 <__cvt+0x78>
 80115d8:	7802      	ldrb	r2, [r0, #0]
 80115da:	2a30      	cmp	r2, #48	; 0x30
 80115dc:	d107      	bne.n	80115ee <__cvt+0x74>
 80115de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e6:	bf1c      	itt	ne
 80115e8:	f1c4 0401 	rsbne	r4, r4, #1
 80115ec:	6034      	strne	r4, [r6, #0]
 80115ee:	6832      	ldr	r2, [r6, #0]
 80115f0:	4413      	add	r3, r2
 80115f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115fa:	d007      	beq.n	801160c <__cvt+0x92>
 80115fc:	2130      	movs	r1, #48	; 0x30
 80115fe:	9a03      	ldr	r2, [sp, #12]
 8011600:	429a      	cmp	r2, r3
 8011602:	d204      	bcs.n	801160e <__cvt+0x94>
 8011604:	1c54      	adds	r4, r2, #1
 8011606:	9403      	str	r4, [sp, #12]
 8011608:	7011      	strb	r1, [r2, #0]
 801160a:	e7f8      	b.n	80115fe <__cvt+0x84>
 801160c:	9303      	str	r3, [sp, #12]
 801160e:	9b03      	ldr	r3, [sp, #12]
 8011610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011612:	1a1b      	subs	r3, r3, r0
 8011614:	6013      	str	r3, [r2, #0]
 8011616:	b005      	add	sp, #20
 8011618:	ecbd 8b02 	vpop	{d8}
 801161c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801161e <__exponent>:
 801161e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011620:	2900      	cmp	r1, #0
 8011622:	4604      	mov	r4, r0
 8011624:	bfba      	itte	lt
 8011626:	4249      	neglt	r1, r1
 8011628:	232d      	movlt	r3, #45	; 0x2d
 801162a:	232b      	movge	r3, #43	; 0x2b
 801162c:	2909      	cmp	r1, #9
 801162e:	f804 2b02 	strb.w	r2, [r4], #2
 8011632:	7043      	strb	r3, [r0, #1]
 8011634:	dd20      	ble.n	8011678 <__exponent+0x5a>
 8011636:	f10d 0307 	add.w	r3, sp, #7
 801163a:	461f      	mov	r7, r3
 801163c:	260a      	movs	r6, #10
 801163e:	fb91 f5f6 	sdiv	r5, r1, r6
 8011642:	fb06 1115 	mls	r1, r6, r5, r1
 8011646:	3130      	adds	r1, #48	; 0x30
 8011648:	2d09      	cmp	r5, #9
 801164a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801164e:	f103 32ff 	add.w	r2, r3, #4294967295
 8011652:	4629      	mov	r1, r5
 8011654:	dc09      	bgt.n	801166a <__exponent+0x4c>
 8011656:	3130      	adds	r1, #48	; 0x30
 8011658:	3b02      	subs	r3, #2
 801165a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801165e:	42bb      	cmp	r3, r7
 8011660:	4622      	mov	r2, r4
 8011662:	d304      	bcc.n	801166e <__exponent+0x50>
 8011664:	1a10      	subs	r0, r2, r0
 8011666:	b003      	add	sp, #12
 8011668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801166a:	4613      	mov	r3, r2
 801166c:	e7e7      	b.n	801163e <__exponent+0x20>
 801166e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011672:	f804 2b01 	strb.w	r2, [r4], #1
 8011676:	e7f2      	b.n	801165e <__exponent+0x40>
 8011678:	2330      	movs	r3, #48	; 0x30
 801167a:	4419      	add	r1, r3
 801167c:	7083      	strb	r3, [r0, #2]
 801167e:	1d02      	adds	r2, r0, #4
 8011680:	70c1      	strb	r1, [r0, #3]
 8011682:	e7ef      	b.n	8011664 <__exponent+0x46>
 8011684:	0000      	movs	r0, r0
	...

08011688 <_printf_float>:
 8011688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801168c:	b08d      	sub	sp, #52	; 0x34
 801168e:	460c      	mov	r4, r1
 8011690:	4616      	mov	r6, r2
 8011692:	461f      	mov	r7, r3
 8011694:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011698:	4605      	mov	r5, r0
 801169a:	f002 ffcb 	bl	8014634 <_localeconv_r>
 801169e:	f8d0 b000 	ldr.w	fp, [r0]
 80116a2:	4658      	mov	r0, fp
 80116a4:	f7ee fdcc 	bl	8000240 <strlen>
 80116a8:	2300      	movs	r3, #0
 80116aa:	930a      	str	r3, [sp, #40]	; 0x28
 80116ac:	f8d8 3000 	ldr.w	r3, [r8]
 80116b0:	9005      	str	r0, [sp, #20]
 80116b2:	3307      	adds	r3, #7
 80116b4:	f023 0307 	bic.w	r3, r3, #7
 80116b8:	f103 0108 	add.w	r1, r3, #8
 80116bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80116c0:	6822      	ldr	r2, [r4, #0]
 80116c2:	f8c8 1000 	str.w	r1, [r8]
 80116c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80116ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80116ce:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8011958 <_printf_float+0x2d0>
 80116d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80116d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80116da:	eeb4 6b47 	vcmp.f64	d6, d7
 80116de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e2:	dd24      	ble.n	801172e <_printf_float+0xa6>
 80116e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80116e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ec:	d502      	bpl.n	80116f4 <_printf_float+0x6c>
 80116ee:	232d      	movs	r3, #45	; 0x2d
 80116f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116f4:	499a      	ldr	r1, [pc, #616]	; (8011960 <_printf_float+0x2d8>)
 80116f6:	4b9b      	ldr	r3, [pc, #620]	; (8011964 <_printf_float+0x2dc>)
 80116f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80116fc:	bf8c      	ite	hi
 80116fe:	4688      	movhi	r8, r1
 8011700:	4698      	movls	r8, r3
 8011702:	f022 0204 	bic.w	r2, r2, #4
 8011706:	2303      	movs	r3, #3
 8011708:	6123      	str	r3, [r4, #16]
 801170a:	6022      	str	r2, [r4, #0]
 801170c:	f04f 0a00 	mov.w	sl, #0
 8011710:	9700      	str	r7, [sp, #0]
 8011712:	4633      	mov	r3, r6
 8011714:	aa0b      	add	r2, sp, #44	; 0x2c
 8011716:	4621      	mov	r1, r4
 8011718:	4628      	mov	r0, r5
 801171a:	f000 f9e1 	bl	8011ae0 <_printf_common>
 801171e:	3001      	adds	r0, #1
 8011720:	f040 8089 	bne.w	8011836 <_printf_float+0x1ae>
 8011724:	f04f 30ff 	mov.w	r0, #4294967295
 8011728:	b00d      	add	sp, #52	; 0x34
 801172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011736:	d702      	bvc.n	801173e <_printf_float+0xb6>
 8011738:	498b      	ldr	r1, [pc, #556]	; (8011968 <_printf_float+0x2e0>)
 801173a:	4b8c      	ldr	r3, [pc, #560]	; (801196c <_printf_float+0x2e4>)
 801173c:	e7dc      	b.n	80116f8 <_printf_float+0x70>
 801173e:	6861      	ldr	r1, [r4, #4]
 8011740:	1c4b      	adds	r3, r1, #1
 8011742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011746:	ab0a      	add	r3, sp, #40	; 0x28
 8011748:	a809      	add	r0, sp, #36	; 0x24
 801174a:	d13b      	bne.n	80117c4 <_printf_float+0x13c>
 801174c:	2106      	movs	r1, #6
 801174e:	6061      	str	r1, [r4, #4]
 8011750:	f04f 0c00 	mov.w	ip, #0
 8011754:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8011758:	e9cd 0900 	strd	r0, r9, [sp]
 801175c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011760:	6022      	str	r2, [r4, #0]
 8011762:	6861      	ldr	r1, [r4, #4]
 8011764:	4628      	mov	r0, r5
 8011766:	f7ff ff08 	bl	801157a <__cvt>
 801176a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801176e:	2b47      	cmp	r3, #71	; 0x47
 8011770:	4680      	mov	r8, r0
 8011772:	d109      	bne.n	8011788 <_printf_float+0x100>
 8011774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011776:	1cd8      	adds	r0, r3, #3
 8011778:	db02      	blt.n	8011780 <_printf_float+0xf8>
 801177a:	6862      	ldr	r2, [r4, #4]
 801177c:	4293      	cmp	r3, r2
 801177e:	dd47      	ble.n	8011810 <_printf_float+0x188>
 8011780:	f1a9 0902 	sub.w	r9, r9, #2
 8011784:	fa5f f989 	uxtb.w	r9, r9
 8011788:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801178c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801178e:	d824      	bhi.n	80117da <_printf_float+0x152>
 8011790:	3901      	subs	r1, #1
 8011792:	464a      	mov	r2, r9
 8011794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011798:	9109      	str	r1, [sp, #36]	; 0x24
 801179a:	f7ff ff40 	bl	801161e <__exponent>
 801179e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117a0:	1813      	adds	r3, r2, r0
 80117a2:	2a01      	cmp	r2, #1
 80117a4:	4682      	mov	sl, r0
 80117a6:	6123      	str	r3, [r4, #16]
 80117a8:	dc02      	bgt.n	80117b0 <_printf_float+0x128>
 80117aa:	6822      	ldr	r2, [r4, #0]
 80117ac:	07d1      	lsls	r1, r2, #31
 80117ae:	d501      	bpl.n	80117b4 <_printf_float+0x12c>
 80117b0:	3301      	adds	r3, #1
 80117b2:	6123      	str	r3, [r4, #16]
 80117b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d0a9      	beq.n	8011710 <_printf_float+0x88>
 80117bc:	232d      	movs	r3, #45	; 0x2d
 80117be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117c2:	e7a5      	b.n	8011710 <_printf_float+0x88>
 80117c4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80117c8:	f000 8178 	beq.w	8011abc <_printf_float+0x434>
 80117cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80117d0:	d1be      	bne.n	8011750 <_printf_float+0xc8>
 80117d2:	2900      	cmp	r1, #0
 80117d4:	d1bc      	bne.n	8011750 <_printf_float+0xc8>
 80117d6:	2101      	movs	r1, #1
 80117d8:	e7b9      	b.n	801174e <_printf_float+0xc6>
 80117da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80117de:	d119      	bne.n	8011814 <_printf_float+0x18c>
 80117e0:	2900      	cmp	r1, #0
 80117e2:	6863      	ldr	r3, [r4, #4]
 80117e4:	dd0c      	ble.n	8011800 <_printf_float+0x178>
 80117e6:	6121      	str	r1, [r4, #16]
 80117e8:	b913      	cbnz	r3, 80117f0 <_printf_float+0x168>
 80117ea:	6822      	ldr	r2, [r4, #0]
 80117ec:	07d2      	lsls	r2, r2, #31
 80117ee:	d502      	bpl.n	80117f6 <_printf_float+0x16e>
 80117f0:	3301      	adds	r3, #1
 80117f2:	440b      	add	r3, r1
 80117f4:	6123      	str	r3, [r4, #16]
 80117f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80117fa:	f04f 0a00 	mov.w	sl, #0
 80117fe:	e7d9      	b.n	80117b4 <_printf_float+0x12c>
 8011800:	b913      	cbnz	r3, 8011808 <_printf_float+0x180>
 8011802:	6822      	ldr	r2, [r4, #0]
 8011804:	07d0      	lsls	r0, r2, #31
 8011806:	d501      	bpl.n	801180c <_printf_float+0x184>
 8011808:	3302      	adds	r3, #2
 801180a:	e7f3      	b.n	80117f4 <_printf_float+0x16c>
 801180c:	2301      	movs	r3, #1
 801180e:	e7f1      	b.n	80117f4 <_printf_float+0x16c>
 8011810:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011814:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011818:	4293      	cmp	r3, r2
 801181a:	db05      	blt.n	8011828 <_printf_float+0x1a0>
 801181c:	6822      	ldr	r2, [r4, #0]
 801181e:	6123      	str	r3, [r4, #16]
 8011820:	07d1      	lsls	r1, r2, #31
 8011822:	d5e8      	bpl.n	80117f6 <_printf_float+0x16e>
 8011824:	3301      	adds	r3, #1
 8011826:	e7e5      	b.n	80117f4 <_printf_float+0x16c>
 8011828:	2b00      	cmp	r3, #0
 801182a:	bfd4      	ite	le
 801182c:	f1c3 0302 	rsble	r3, r3, #2
 8011830:	2301      	movgt	r3, #1
 8011832:	4413      	add	r3, r2
 8011834:	e7de      	b.n	80117f4 <_printf_float+0x16c>
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	055a      	lsls	r2, r3, #21
 801183a:	d407      	bmi.n	801184c <_printf_float+0x1c4>
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	4642      	mov	r2, r8
 8011840:	4631      	mov	r1, r6
 8011842:	4628      	mov	r0, r5
 8011844:	47b8      	blx	r7
 8011846:	3001      	adds	r0, #1
 8011848:	d12a      	bne.n	80118a0 <_printf_float+0x218>
 801184a:	e76b      	b.n	8011724 <_printf_float+0x9c>
 801184c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011850:	f240 80de 	bls.w	8011a10 <_printf_float+0x388>
 8011854:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011858:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011860:	d133      	bne.n	80118ca <_printf_float+0x242>
 8011862:	2301      	movs	r3, #1
 8011864:	4a42      	ldr	r2, [pc, #264]	; (8011970 <_printf_float+0x2e8>)
 8011866:	4631      	mov	r1, r6
 8011868:	4628      	mov	r0, r5
 801186a:	47b8      	blx	r7
 801186c:	3001      	adds	r0, #1
 801186e:	f43f af59 	beq.w	8011724 <_printf_float+0x9c>
 8011872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011876:	429a      	cmp	r2, r3
 8011878:	db02      	blt.n	8011880 <_printf_float+0x1f8>
 801187a:	6823      	ldr	r3, [r4, #0]
 801187c:	07d8      	lsls	r0, r3, #31
 801187e:	d50f      	bpl.n	80118a0 <_printf_float+0x218>
 8011880:	9b05      	ldr	r3, [sp, #20]
 8011882:	465a      	mov	r2, fp
 8011884:	4631      	mov	r1, r6
 8011886:	4628      	mov	r0, r5
 8011888:	47b8      	blx	r7
 801188a:	3001      	adds	r0, #1
 801188c:	f43f af4a 	beq.w	8011724 <_printf_float+0x9c>
 8011890:	f04f 0800 	mov.w	r8, #0
 8011894:	f104 091a 	add.w	r9, r4, #26
 8011898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801189a:	3b01      	subs	r3, #1
 801189c:	4543      	cmp	r3, r8
 801189e:	dc09      	bgt.n	80118b4 <_printf_float+0x22c>
 80118a0:	6823      	ldr	r3, [r4, #0]
 80118a2:	079b      	lsls	r3, r3, #30
 80118a4:	f100 8105 	bmi.w	8011ab2 <_printf_float+0x42a>
 80118a8:	68e0      	ldr	r0, [r4, #12]
 80118aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118ac:	4298      	cmp	r0, r3
 80118ae:	bfb8      	it	lt
 80118b0:	4618      	movlt	r0, r3
 80118b2:	e739      	b.n	8011728 <_printf_float+0xa0>
 80118b4:	2301      	movs	r3, #1
 80118b6:	464a      	mov	r2, r9
 80118b8:	4631      	mov	r1, r6
 80118ba:	4628      	mov	r0, r5
 80118bc:	47b8      	blx	r7
 80118be:	3001      	adds	r0, #1
 80118c0:	f43f af30 	beq.w	8011724 <_printf_float+0x9c>
 80118c4:	f108 0801 	add.w	r8, r8, #1
 80118c8:	e7e6      	b.n	8011898 <_printf_float+0x210>
 80118ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	dc2b      	bgt.n	8011928 <_printf_float+0x2a0>
 80118d0:	2301      	movs	r3, #1
 80118d2:	4a27      	ldr	r2, [pc, #156]	; (8011970 <_printf_float+0x2e8>)
 80118d4:	4631      	mov	r1, r6
 80118d6:	4628      	mov	r0, r5
 80118d8:	47b8      	blx	r7
 80118da:	3001      	adds	r0, #1
 80118dc:	f43f af22 	beq.w	8011724 <_printf_float+0x9c>
 80118e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e2:	b923      	cbnz	r3, 80118ee <_printf_float+0x266>
 80118e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118e6:	b913      	cbnz	r3, 80118ee <_printf_float+0x266>
 80118e8:	6823      	ldr	r3, [r4, #0]
 80118ea:	07d9      	lsls	r1, r3, #31
 80118ec:	d5d8      	bpl.n	80118a0 <_printf_float+0x218>
 80118ee:	9b05      	ldr	r3, [sp, #20]
 80118f0:	465a      	mov	r2, fp
 80118f2:	4631      	mov	r1, r6
 80118f4:	4628      	mov	r0, r5
 80118f6:	47b8      	blx	r7
 80118f8:	3001      	adds	r0, #1
 80118fa:	f43f af13 	beq.w	8011724 <_printf_float+0x9c>
 80118fe:	f04f 0900 	mov.w	r9, #0
 8011902:	f104 0a1a 	add.w	sl, r4, #26
 8011906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011908:	425b      	negs	r3, r3
 801190a:	454b      	cmp	r3, r9
 801190c:	dc01      	bgt.n	8011912 <_printf_float+0x28a>
 801190e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011910:	e795      	b.n	801183e <_printf_float+0x1b6>
 8011912:	2301      	movs	r3, #1
 8011914:	4652      	mov	r2, sl
 8011916:	4631      	mov	r1, r6
 8011918:	4628      	mov	r0, r5
 801191a:	47b8      	blx	r7
 801191c:	3001      	adds	r0, #1
 801191e:	f43f af01 	beq.w	8011724 <_printf_float+0x9c>
 8011922:	f109 0901 	add.w	r9, r9, #1
 8011926:	e7ee      	b.n	8011906 <_printf_float+0x27e>
 8011928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801192a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801192c:	429a      	cmp	r2, r3
 801192e:	bfa8      	it	ge
 8011930:	461a      	movge	r2, r3
 8011932:	2a00      	cmp	r2, #0
 8011934:	4691      	mov	r9, r2
 8011936:	dd07      	ble.n	8011948 <_printf_float+0x2c0>
 8011938:	4613      	mov	r3, r2
 801193a:	4631      	mov	r1, r6
 801193c:	4642      	mov	r2, r8
 801193e:	4628      	mov	r0, r5
 8011940:	47b8      	blx	r7
 8011942:	3001      	adds	r0, #1
 8011944:	f43f aeee 	beq.w	8011724 <_printf_float+0x9c>
 8011948:	f104 031a 	add.w	r3, r4, #26
 801194c:	f04f 0a00 	mov.w	sl, #0
 8011950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011954:	9307      	str	r3, [sp, #28]
 8011956:	e017      	b.n	8011988 <_printf_float+0x300>
 8011958:	ffffffff 	.word	0xffffffff
 801195c:	7fefffff 	.word	0x7fefffff
 8011960:	0801637c 	.word	0x0801637c
 8011964:	08016378 	.word	0x08016378
 8011968:	08016384 	.word	0x08016384
 801196c:	08016380 	.word	0x08016380
 8011970:	08016388 	.word	0x08016388
 8011974:	2301      	movs	r3, #1
 8011976:	9a07      	ldr	r2, [sp, #28]
 8011978:	4631      	mov	r1, r6
 801197a:	4628      	mov	r0, r5
 801197c:	47b8      	blx	r7
 801197e:	3001      	adds	r0, #1
 8011980:	f43f aed0 	beq.w	8011724 <_printf_float+0x9c>
 8011984:	f10a 0a01 	add.w	sl, sl, #1
 8011988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801198a:	9306      	str	r3, [sp, #24]
 801198c:	eba3 0309 	sub.w	r3, r3, r9
 8011990:	4553      	cmp	r3, sl
 8011992:	dcef      	bgt.n	8011974 <_printf_float+0x2ec>
 8011994:	9b06      	ldr	r3, [sp, #24]
 8011996:	4498      	add	r8, r3
 8011998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801199c:	429a      	cmp	r2, r3
 801199e:	db15      	blt.n	80119cc <_printf_float+0x344>
 80119a0:	6823      	ldr	r3, [r4, #0]
 80119a2:	07da      	lsls	r2, r3, #31
 80119a4:	d412      	bmi.n	80119cc <_printf_float+0x344>
 80119a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119a8:	9a06      	ldr	r2, [sp, #24]
 80119aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119ac:	1a9a      	subs	r2, r3, r2
 80119ae:	eba3 0a01 	sub.w	sl, r3, r1
 80119b2:	4592      	cmp	sl, r2
 80119b4:	bfa8      	it	ge
 80119b6:	4692      	movge	sl, r2
 80119b8:	f1ba 0f00 	cmp.w	sl, #0
 80119bc:	dc0e      	bgt.n	80119dc <_printf_float+0x354>
 80119be:	f04f 0800 	mov.w	r8, #0
 80119c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119c6:	f104 091a 	add.w	r9, r4, #26
 80119ca:	e019      	b.n	8011a00 <_printf_float+0x378>
 80119cc:	9b05      	ldr	r3, [sp, #20]
 80119ce:	465a      	mov	r2, fp
 80119d0:	4631      	mov	r1, r6
 80119d2:	4628      	mov	r0, r5
 80119d4:	47b8      	blx	r7
 80119d6:	3001      	adds	r0, #1
 80119d8:	d1e5      	bne.n	80119a6 <_printf_float+0x31e>
 80119da:	e6a3      	b.n	8011724 <_printf_float+0x9c>
 80119dc:	4653      	mov	r3, sl
 80119de:	4642      	mov	r2, r8
 80119e0:	4631      	mov	r1, r6
 80119e2:	4628      	mov	r0, r5
 80119e4:	47b8      	blx	r7
 80119e6:	3001      	adds	r0, #1
 80119e8:	d1e9      	bne.n	80119be <_printf_float+0x336>
 80119ea:	e69b      	b.n	8011724 <_printf_float+0x9c>
 80119ec:	2301      	movs	r3, #1
 80119ee:	464a      	mov	r2, r9
 80119f0:	4631      	mov	r1, r6
 80119f2:	4628      	mov	r0, r5
 80119f4:	47b8      	blx	r7
 80119f6:	3001      	adds	r0, #1
 80119f8:	f43f ae94 	beq.w	8011724 <_printf_float+0x9c>
 80119fc:	f108 0801 	add.w	r8, r8, #1
 8011a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a04:	1a9b      	subs	r3, r3, r2
 8011a06:	eba3 030a 	sub.w	r3, r3, sl
 8011a0a:	4543      	cmp	r3, r8
 8011a0c:	dcee      	bgt.n	80119ec <_printf_float+0x364>
 8011a0e:	e747      	b.n	80118a0 <_printf_float+0x218>
 8011a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a12:	2a01      	cmp	r2, #1
 8011a14:	dc01      	bgt.n	8011a1a <_printf_float+0x392>
 8011a16:	07db      	lsls	r3, r3, #31
 8011a18:	d539      	bpl.n	8011a8e <_printf_float+0x406>
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	4642      	mov	r2, r8
 8011a1e:	4631      	mov	r1, r6
 8011a20:	4628      	mov	r0, r5
 8011a22:	47b8      	blx	r7
 8011a24:	3001      	adds	r0, #1
 8011a26:	f43f ae7d 	beq.w	8011724 <_printf_float+0x9c>
 8011a2a:	9b05      	ldr	r3, [sp, #20]
 8011a2c:	465a      	mov	r2, fp
 8011a2e:	4631      	mov	r1, r6
 8011a30:	4628      	mov	r0, r5
 8011a32:	47b8      	blx	r7
 8011a34:	3001      	adds	r0, #1
 8011a36:	f108 0801 	add.w	r8, r8, #1
 8011a3a:	f43f ae73 	beq.w	8011724 <_printf_float+0x9c>
 8011a3e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a50:	d018      	beq.n	8011a84 <_printf_float+0x3fc>
 8011a52:	4642      	mov	r2, r8
 8011a54:	4631      	mov	r1, r6
 8011a56:	4628      	mov	r0, r5
 8011a58:	47b8      	blx	r7
 8011a5a:	3001      	adds	r0, #1
 8011a5c:	d10e      	bne.n	8011a7c <_printf_float+0x3f4>
 8011a5e:	e661      	b.n	8011724 <_printf_float+0x9c>
 8011a60:	2301      	movs	r3, #1
 8011a62:	464a      	mov	r2, r9
 8011a64:	4631      	mov	r1, r6
 8011a66:	4628      	mov	r0, r5
 8011a68:	47b8      	blx	r7
 8011a6a:	3001      	adds	r0, #1
 8011a6c:	f43f ae5a 	beq.w	8011724 <_printf_float+0x9c>
 8011a70:	f108 0801 	add.w	r8, r8, #1
 8011a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a76:	3b01      	subs	r3, #1
 8011a78:	4543      	cmp	r3, r8
 8011a7a:	dcf1      	bgt.n	8011a60 <_printf_float+0x3d8>
 8011a7c:	4653      	mov	r3, sl
 8011a7e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a82:	e6dd      	b.n	8011840 <_printf_float+0x1b8>
 8011a84:	f04f 0800 	mov.w	r8, #0
 8011a88:	f104 091a 	add.w	r9, r4, #26
 8011a8c:	e7f2      	b.n	8011a74 <_printf_float+0x3ec>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e7df      	b.n	8011a52 <_printf_float+0x3ca>
 8011a92:	2301      	movs	r3, #1
 8011a94:	464a      	mov	r2, r9
 8011a96:	4631      	mov	r1, r6
 8011a98:	4628      	mov	r0, r5
 8011a9a:	47b8      	blx	r7
 8011a9c:	3001      	adds	r0, #1
 8011a9e:	f43f ae41 	beq.w	8011724 <_printf_float+0x9c>
 8011aa2:	f108 0801 	add.w	r8, r8, #1
 8011aa6:	68e3      	ldr	r3, [r4, #12]
 8011aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011aaa:	1a9b      	subs	r3, r3, r2
 8011aac:	4543      	cmp	r3, r8
 8011aae:	dcf0      	bgt.n	8011a92 <_printf_float+0x40a>
 8011ab0:	e6fa      	b.n	80118a8 <_printf_float+0x220>
 8011ab2:	f04f 0800 	mov.w	r8, #0
 8011ab6:	f104 0919 	add.w	r9, r4, #25
 8011aba:	e7f4      	b.n	8011aa6 <_printf_float+0x41e>
 8011abc:	2900      	cmp	r1, #0
 8011abe:	f43f ae8a 	beq.w	80117d6 <_printf_float+0x14e>
 8011ac2:	f04f 0c00 	mov.w	ip, #0
 8011ac6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8011aca:	e9cd 0900 	strd	r0, r9, [sp]
 8011ace:	6022      	str	r2, [r4, #0]
 8011ad0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	f7ff fd50 	bl	801157a <__cvt>
 8011ada:	4680      	mov	r8, r0
 8011adc:	e64a      	b.n	8011774 <_printf_float+0xec>
 8011ade:	bf00      	nop

08011ae0 <_printf_common>:
 8011ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ae4:	4691      	mov	r9, r2
 8011ae6:	461f      	mov	r7, r3
 8011ae8:	688a      	ldr	r2, [r1, #8]
 8011aea:	690b      	ldr	r3, [r1, #16]
 8011aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011af0:	4293      	cmp	r3, r2
 8011af2:	bfb8      	it	lt
 8011af4:	4613      	movlt	r3, r2
 8011af6:	f8c9 3000 	str.w	r3, [r9]
 8011afa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011afe:	4606      	mov	r6, r0
 8011b00:	460c      	mov	r4, r1
 8011b02:	b112      	cbz	r2, 8011b0a <_printf_common+0x2a>
 8011b04:	3301      	adds	r3, #1
 8011b06:	f8c9 3000 	str.w	r3, [r9]
 8011b0a:	6823      	ldr	r3, [r4, #0]
 8011b0c:	0699      	lsls	r1, r3, #26
 8011b0e:	bf42      	ittt	mi
 8011b10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011b14:	3302      	addmi	r3, #2
 8011b16:	f8c9 3000 	strmi.w	r3, [r9]
 8011b1a:	6825      	ldr	r5, [r4, #0]
 8011b1c:	f015 0506 	ands.w	r5, r5, #6
 8011b20:	d107      	bne.n	8011b32 <_printf_common+0x52>
 8011b22:	f104 0a19 	add.w	sl, r4, #25
 8011b26:	68e3      	ldr	r3, [r4, #12]
 8011b28:	f8d9 2000 	ldr.w	r2, [r9]
 8011b2c:	1a9b      	subs	r3, r3, r2
 8011b2e:	42ab      	cmp	r3, r5
 8011b30:	dc28      	bgt.n	8011b84 <_printf_common+0xa4>
 8011b32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011b36:	6822      	ldr	r2, [r4, #0]
 8011b38:	3300      	adds	r3, #0
 8011b3a:	bf18      	it	ne
 8011b3c:	2301      	movne	r3, #1
 8011b3e:	0692      	lsls	r2, r2, #26
 8011b40:	d42d      	bmi.n	8011b9e <_printf_common+0xbe>
 8011b42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b46:	4639      	mov	r1, r7
 8011b48:	4630      	mov	r0, r6
 8011b4a:	47c0      	blx	r8
 8011b4c:	3001      	adds	r0, #1
 8011b4e:	d020      	beq.n	8011b92 <_printf_common+0xb2>
 8011b50:	6823      	ldr	r3, [r4, #0]
 8011b52:	68e5      	ldr	r5, [r4, #12]
 8011b54:	f8d9 2000 	ldr.w	r2, [r9]
 8011b58:	f003 0306 	and.w	r3, r3, #6
 8011b5c:	2b04      	cmp	r3, #4
 8011b5e:	bf08      	it	eq
 8011b60:	1aad      	subeq	r5, r5, r2
 8011b62:	68a3      	ldr	r3, [r4, #8]
 8011b64:	6922      	ldr	r2, [r4, #16]
 8011b66:	bf0c      	ite	eq
 8011b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b6c:	2500      	movne	r5, #0
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	bfc4      	itt	gt
 8011b72:	1a9b      	subgt	r3, r3, r2
 8011b74:	18ed      	addgt	r5, r5, r3
 8011b76:	f04f 0900 	mov.w	r9, #0
 8011b7a:	341a      	adds	r4, #26
 8011b7c:	454d      	cmp	r5, r9
 8011b7e:	d11a      	bne.n	8011bb6 <_printf_common+0xd6>
 8011b80:	2000      	movs	r0, #0
 8011b82:	e008      	b.n	8011b96 <_printf_common+0xb6>
 8011b84:	2301      	movs	r3, #1
 8011b86:	4652      	mov	r2, sl
 8011b88:	4639      	mov	r1, r7
 8011b8a:	4630      	mov	r0, r6
 8011b8c:	47c0      	blx	r8
 8011b8e:	3001      	adds	r0, #1
 8011b90:	d103      	bne.n	8011b9a <_printf_common+0xba>
 8011b92:	f04f 30ff 	mov.w	r0, #4294967295
 8011b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b9a:	3501      	adds	r5, #1
 8011b9c:	e7c3      	b.n	8011b26 <_printf_common+0x46>
 8011b9e:	18e1      	adds	r1, r4, r3
 8011ba0:	1c5a      	adds	r2, r3, #1
 8011ba2:	2030      	movs	r0, #48	; 0x30
 8011ba4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ba8:	4422      	add	r2, r4
 8011baa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011bae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011bb2:	3302      	adds	r3, #2
 8011bb4:	e7c5      	b.n	8011b42 <_printf_common+0x62>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	4622      	mov	r2, r4
 8011bba:	4639      	mov	r1, r7
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	47c0      	blx	r8
 8011bc0:	3001      	adds	r0, #1
 8011bc2:	d0e6      	beq.n	8011b92 <_printf_common+0xb2>
 8011bc4:	f109 0901 	add.w	r9, r9, #1
 8011bc8:	e7d8      	b.n	8011b7c <_printf_common+0x9c>
	...

08011bcc <_printf_i>:
 8011bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011bd4:	460c      	mov	r4, r1
 8011bd6:	7e09      	ldrb	r1, [r1, #24]
 8011bd8:	b085      	sub	sp, #20
 8011bda:	296e      	cmp	r1, #110	; 0x6e
 8011bdc:	4617      	mov	r7, r2
 8011bde:	4606      	mov	r6, r0
 8011be0:	4698      	mov	r8, r3
 8011be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011be4:	f000 80b3 	beq.w	8011d4e <_printf_i+0x182>
 8011be8:	d822      	bhi.n	8011c30 <_printf_i+0x64>
 8011bea:	2963      	cmp	r1, #99	; 0x63
 8011bec:	d036      	beq.n	8011c5c <_printf_i+0x90>
 8011bee:	d80a      	bhi.n	8011c06 <_printf_i+0x3a>
 8011bf0:	2900      	cmp	r1, #0
 8011bf2:	f000 80b9 	beq.w	8011d68 <_printf_i+0x19c>
 8011bf6:	2958      	cmp	r1, #88	; 0x58
 8011bf8:	f000 8083 	beq.w	8011d02 <_printf_i+0x136>
 8011bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011c04:	e032      	b.n	8011c6c <_printf_i+0xa0>
 8011c06:	2964      	cmp	r1, #100	; 0x64
 8011c08:	d001      	beq.n	8011c0e <_printf_i+0x42>
 8011c0a:	2969      	cmp	r1, #105	; 0x69
 8011c0c:	d1f6      	bne.n	8011bfc <_printf_i+0x30>
 8011c0e:	6820      	ldr	r0, [r4, #0]
 8011c10:	6813      	ldr	r3, [r2, #0]
 8011c12:	0605      	lsls	r5, r0, #24
 8011c14:	f103 0104 	add.w	r1, r3, #4
 8011c18:	d52a      	bpl.n	8011c70 <_printf_i+0xa4>
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	6011      	str	r1, [r2, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	da03      	bge.n	8011c2a <_printf_i+0x5e>
 8011c22:	222d      	movs	r2, #45	; 0x2d
 8011c24:	425b      	negs	r3, r3
 8011c26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011c2a:	486f      	ldr	r0, [pc, #444]	; (8011de8 <_printf_i+0x21c>)
 8011c2c:	220a      	movs	r2, #10
 8011c2e:	e039      	b.n	8011ca4 <_printf_i+0xd8>
 8011c30:	2973      	cmp	r1, #115	; 0x73
 8011c32:	f000 809d 	beq.w	8011d70 <_printf_i+0x1a4>
 8011c36:	d808      	bhi.n	8011c4a <_printf_i+0x7e>
 8011c38:	296f      	cmp	r1, #111	; 0x6f
 8011c3a:	d020      	beq.n	8011c7e <_printf_i+0xb2>
 8011c3c:	2970      	cmp	r1, #112	; 0x70
 8011c3e:	d1dd      	bne.n	8011bfc <_printf_i+0x30>
 8011c40:	6823      	ldr	r3, [r4, #0]
 8011c42:	f043 0320 	orr.w	r3, r3, #32
 8011c46:	6023      	str	r3, [r4, #0]
 8011c48:	e003      	b.n	8011c52 <_printf_i+0x86>
 8011c4a:	2975      	cmp	r1, #117	; 0x75
 8011c4c:	d017      	beq.n	8011c7e <_printf_i+0xb2>
 8011c4e:	2978      	cmp	r1, #120	; 0x78
 8011c50:	d1d4      	bne.n	8011bfc <_printf_i+0x30>
 8011c52:	2378      	movs	r3, #120	; 0x78
 8011c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c58:	4864      	ldr	r0, [pc, #400]	; (8011dec <_printf_i+0x220>)
 8011c5a:	e055      	b.n	8011d08 <_printf_i+0x13c>
 8011c5c:	6813      	ldr	r3, [r2, #0]
 8011c5e:	1d19      	adds	r1, r3, #4
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	6011      	str	r1, [r2, #0]
 8011c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	e08c      	b.n	8011d8a <_printf_i+0x1be>
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	6011      	str	r1, [r2, #0]
 8011c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c78:	bf18      	it	ne
 8011c7a:	b21b      	sxthne	r3, r3
 8011c7c:	e7cf      	b.n	8011c1e <_printf_i+0x52>
 8011c7e:	6813      	ldr	r3, [r2, #0]
 8011c80:	6825      	ldr	r5, [r4, #0]
 8011c82:	1d18      	adds	r0, r3, #4
 8011c84:	6010      	str	r0, [r2, #0]
 8011c86:	0628      	lsls	r0, r5, #24
 8011c88:	d501      	bpl.n	8011c8e <_printf_i+0xc2>
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	e002      	b.n	8011c94 <_printf_i+0xc8>
 8011c8e:	0668      	lsls	r0, r5, #25
 8011c90:	d5fb      	bpl.n	8011c8a <_printf_i+0xbe>
 8011c92:	881b      	ldrh	r3, [r3, #0]
 8011c94:	4854      	ldr	r0, [pc, #336]	; (8011de8 <_printf_i+0x21c>)
 8011c96:	296f      	cmp	r1, #111	; 0x6f
 8011c98:	bf14      	ite	ne
 8011c9a:	220a      	movne	r2, #10
 8011c9c:	2208      	moveq	r2, #8
 8011c9e:	2100      	movs	r1, #0
 8011ca0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011ca4:	6865      	ldr	r5, [r4, #4]
 8011ca6:	60a5      	str	r5, [r4, #8]
 8011ca8:	2d00      	cmp	r5, #0
 8011caa:	f2c0 8095 	blt.w	8011dd8 <_printf_i+0x20c>
 8011cae:	6821      	ldr	r1, [r4, #0]
 8011cb0:	f021 0104 	bic.w	r1, r1, #4
 8011cb4:	6021      	str	r1, [r4, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d13d      	bne.n	8011d36 <_printf_i+0x16a>
 8011cba:	2d00      	cmp	r5, #0
 8011cbc:	f040 808e 	bne.w	8011ddc <_printf_i+0x210>
 8011cc0:	4665      	mov	r5, ip
 8011cc2:	2a08      	cmp	r2, #8
 8011cc4:	d10b      	bne.n	8011cde <_printf_i+0x112>
 8011cc6:	6823      	ldr	r3, [r4, #0]
 8011cc8:	07db      	lsls	r3, r3, #31
 8011cca:	d508      	bpl.n	8011cde <_printf_i+0x112>
 8011ccc:	6923      	ldr	r3, [r4, #16]
 8011cce:	6862      	ldr	r2, [r4, #4]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	bfde      	ittt	le
 8011cd4:	2330      	movle	r3, #48	; 0x30
 8011cd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011cda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011cde:	ebac 0305 	sub.w	r3, ip, r5
 8011ce2:	6123      	str	r3, [r4, #16]
 8011ce4:	f8cd 8000 	str.w	r8, [sp]
 8011ce8:	463b      	mov	r3, r7
 8011cea:	aa03      	add	r2, sp, #12
 8011cec:	4621      	mov	r1, r4
 8011cee:	4630      	mov	r0, r6
 8011cf0:	f7ff fef6 	bl	8011ae0 <_printf_common>
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	d14d      	bne.n	8011d94 <_printf_i+0x1c8>
 8011cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfc:	b005      	add	sp, #20
 8011cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d02:	4839      	ldr	r0, [pc, #228]	; (8011de8 <_printf_i+0x21c>)
 8011d04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011d08:	6813      	ldr	r3, [r2, #0]
 8011d0a:	6821      	ldr	r1, [r4, #0]
 8011d0c:	1d1d      	adds	r5, r3, #4
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	6015      	str	r5, [r2, #0]
 8011d12:	060a      	lsls	r2, r1, #24
 8011d14:	d50b      	bpl.n	8011d2e <_printf_i+0x162>
 8011d16:	07ca      	lsls	r2, r1, #31
 8011d18:	bf44      	itt	mi
 8011d1a:	f041 0120 	orrmi.w	r1, r1, #32
 8011d1e:	6021      	strmi	r1, [r4, #0]
 8011d20:	b91b      	cbnz	r3, 8011d2a <_printf_i+0x15e>
 8011d22:	6822      	ldr	r2, [r4, #0]
 8011d24:	f022 0220 	bic.w	r2, r2, #32
 8011d28:	6022      	str	r2, [r4, #0]
 8011d2a:	2210      	movs	r2, #16
 8011d2c:	e7b7      	b.n	8011c9e <_printf_i+0xd2>
 8011d2e:	064d      	lsls	r5, r1, #25
 8011d30:	bf48      	it	mi
 8011d32:	b29b      	uxthmi	r3, r3
 8011d34:	e7ef      	b.n	8011d16 <_printf_i+0x14a>
 8011d36:	4665      	mov	r5, ip
 8011d38:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d3c:	fb02 3311 	mls	r3, r2, r1, r3
 8011d40:	5cc3      	ldrb	r3, [r0, r3]
 8011d42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011d46:	460b      	mov	r3, r1
 8011d48:	2900      	cmp	r1, #0
 8011d4a:	d1f5      	bne.n	8011d38 <_printf_i+0x16c>
 8011d4c:	e7b9      	b.n	8011cc2 <_printf_i+0xf6>
 8011d4e:	6813      	ldr	r3, [r2, #0]
 8011d50:	6825      	ldr	r5, [r4, #0]
 8011d52:	6961      	ldr	r1, [r4, #20]
 8011d54:	1d18      	adds	r0, r3, #4
 8011d56:	6010      	str	r0, [r2, #0]
 8011d58:	0628      	lsls	r0, r5, #24
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	d501      	bpl.n	8011d62 <_printf_i+0x196>
 8011d5e:	6019      	str	r1, [r3, #0]
 8011d60:	e002      	b.n	8011d68 <_printf_i+0x19c>
 8011d62:	066a      	lsls	r2, r5, #25
 8011d64:	d5fb      	bpl.n	8011d5e <_printf_i+0x192>
 8011d66:	8019      	strh	r1, [r3, #0]
 8011d68:	2300      	movs	r3, #0
 8011d6a:	6123      	str	r3, [r4, #16]
 8011d6c:	4665      	mov	r5, ip
 8011d6e:	e7b9      	b.n	8011ce4 <_printf_i+0x118>
 8011d70:	6813      	ldr	r3, [r2, #0]
 8011d72:	1d19      	adds	r1, r3, #4
 8011d74:	6011      	str	r1, [r2, #0]
 8011d76:	681d      	ldr	r5, [r3, #0]
 8011d78:	6862      	ldr	r2, [r4, #4]
 8011d7a:	2100      	movs	r1, #0
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	f7ee fa67 	bl	8000250 <memchr>
 8011d82:	b108      	cbz	r0, 8011d88 <_printf_i+0x1bc>
 8011d84:	1b40      	subs	r0, r0, r5
 8011d86:	6060      	str	r0, [r4, #4]
 8011d88:	6863      	ldr	r3, [r4, #4]
 8011d8a:	6123      	str	r3, [r4, #16]
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d92:	e7a7      	b.n	8011ce4 <_printf_i+0x118>
 8011d94:	6923      	ldr	r3, [r4, #16]
 8011d96:	462a      	mov	r2, r5
 8011d98:	4639      	mov	r1, r7
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	47c0      	blx	r8
 8011d9e:	3001      	adds	r0, #1
 8011da0:	d0aa      	beq.n	8011cf8 <_printf_i+0x12c>
 8011da2:	6823      	ldr	r3, [r4, #0]
 8011da4:	079b      	lsls	r3, r3, #30
 8011da6:	d413      	bmi.n	8011dd0 <_printf_i+0x204>
 8011da8:	68e0      	ldr	r0, [r4, #12]
 8011daa:	9b03      	ldr	r3, [sp, #12]
 8011dac:	4298      	cmp	r0, r3
 8011dae:	bfb8      	it	lt
 8011db0:	4618      	movlt	r0, r3
 8011db2:	e7a3      	b.n	8011cfc <_printf_i+0x130>
 8011db4:	2301      	movs	r3, #1
 8011db6:	464a      	mov	r2, r9
 8011db8:	4639      	mov	r1, r7
 8011dba:	4630      	mov	r0, r6
 8011dbc:	47c0      	blx	r8
 8011dbe:	3001      	adds	r0, #1
 8011dc0:	d09a      	beq.n	8011cf8 <_printf_i+0x12c>
 8011dc2:	3501      	adds	r5, #1
 8011dc4:	68e3      	ldr	r3, [r4, #12]
 8011dc6:	9a03      	ldr	r2, [sp, #12]
 8011dc8:	1a9b      	subs	r3, r3, r2
 8011dca:	42ab      	cmp	r3, r5
 8011dcc:	dcf2      	bgt.n	8011db4 <_printf_i+0x1e8>
 8011dce:	e7eb      	b.n	8011da8 <_printf_i+0x1dc>
 8011dd0:	2500      	movs	r5, #0
 8011dd2:	f104 0919 	add.w	r9, r4, #25
 8011dd6:	e7f5      	b.n	8011dc4 <_printf_i+0x1f8>
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d1ac      	bne.n	8011d36 <_printf_i+0x16a>
 8011ddc:	7803      	ldrb	r3, [r0, #0]
 8011dde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011de6:	e76c      	b.n	8011cc2 <_printf_i+0xf6>
 8011de8:	0801638a 	.word	0x0801638a
 8011dec:	0801639b 	.word	0x0801639b

08011df0 <_scanf_float>:
 8011df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df4:	469a      	mov	sl, r3
 8011df6:	688b      	ldr	r3, [r1, #8]
 8011df8:	4616      	mov	r6, r2
 8011dfa:	1e5a      	subs	r2, r3, #1
 8011dfc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011e00:	b087      	sub	sp, #28
 8011e02:	bf83      	ittte	hi
 8011e04:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011e08:	189b      	addhi	r3, r3, r2
 8011e0a:	9301      	strhi	r3, [sp, #4]
 8011e0c:	2300      	movls	r3, #0
 8011e0e:	bf86      	itte	hi
 8011e10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011e14:	608b      	strhi	r3, [r1, #8]
 8011e16:	9301      	strls	r3, [sp, #4]
 8011e18:	680b      	ldr	r3, [r1, #0]
 8011e1a:	4688      	mov	r8, r1
 8011e1c:	f04f 0b00 	mov.w	fp, #0
 8011e20:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011e24:	f848 3b1c 	str.w	r3, [r8], #28
 8011e28:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011e2c:	4607      	mov	r7, r0
 8011e2e:	460c      	mov	r4, r1
 8011e30:	4645      	mov	r5, r8
 8011e32:	465a      	mov	r2, fp
 8011e34:	46d9      	mov	r9, fp
 8011e36:	f8cd b008 	str.w	fp, [sp, #8]
 8011e3a:	68a1      	ldr	r1, [r4, #8]
 8011e3c:	b181      	cbz	r1, 8011e60 <_scanf_float+0x70>
 8011e3e:	6833      	ldr	r3, [r6, #0]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	2b49      	cmp	r3, #73	; 0x49
 8011e44:	d071      	beq.n	8011f2a <_scanf_float+0x13a>
 8011e46:	d84d      	bhi.n	8011ee4 <_scanf_float+0xf4>
 8011e48:	2b39      	cmp	r3, #57	; 0x39
 8011e4a:	d840      	bhi.n	8011ece <_scanf_float+0xde>
 8011e4c:	2b31      	cmp	r3, #49	; 0x31
 8011e4e:	f080 8088 	bcs.w	8011f62 <_scanf_float+0x172>
 8011e52:	2b2d      	cmp	r3, #45	; 0x2d
 8011e54:	f000 8090 	beq.w	8011f78 <_scanf_float+0x188>
 8011e58:	d815      	bhi.n	8011e86 <_scanf_float+0x96>
 8011e5a:	2b2b      	cmp	r3, #43	; 0x2b
 8011e5c:	f000 808c 	beq.w	8011f78 <_scanf_float+0x188>
 8011e60:	f1b9 0f00 	cmp.w	r9, #0
 8011e64:	d003      	beq.n	8011e6e <_scanf_float+0x7e>
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e6c:	6023      	str	r3, [r4, #0]
 8011e6e:	3a01      	subs	r2, #1
 8011e70:	2a01      	cmp	r2, #1
 8011e72:	f200 80ea 	bhi.w	801204a <_scanf_float+0x25a>
 8011e76:	4545      	cmp	r5, r8
 8011e78:	f200 80dc 	bhi.w	8012034 <_scanf_float+0x244>
 8011e7c:	2601      	movs	r6, #1
 8011e7e:	4630      	mov	r0, r6
 8011e80:	b007      	add	sp, #28
 8011e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e86:	2b2e      	cmp	r3, #46	; 0x2e
 8011e88:	f000 809f 	beq.w	8011fca <_scanf_float+0x1da>
 8011e8c:	2b30      	cmp	r3, #48	; 0x30
 8011e8e:	d1e7      	bne.n	8011e60 <_scanf_float+0x70>
 8011e90:	6820      	ldr	r0, [r4, #0]
 8011e92:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011e96:	d064      	beq.n	8011f62 <_scanf_float+0x172>
 8011e98:	9b01      	ldr	r3, [sp, #4]
 8011e9a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011e9e:	6020      	str	r0, [r4, #0]
 8011ea0:	f109 0901 	add.w	r9, r9, #1
 8011ea4:	b11b      	cbz	r3, 8011eae <_scanf_float+0xbe>
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	3101      	adds	r1, #1
 8011eaa:	9301      	str	r3, [sp, #4]
 8011eac:	60a1      	str	r1, [r4, #8]
 8011eae:	68a3      	ldr	r3, [r4, #8]
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	60a3      	str	r3, [r4, #8]
 8011eb4:	6923      	ldr	r3, [r4, #16]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	6123      	str	r3, [r4, #16]
 8011eba:	6873      	ldr	r3, [r6, #4]
 8011ebc:	3b01      	subs	r3, #1
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	6073      	str	r3, [r6, #4]
 8011ec2:	f340 80ac 	ble.w	801201e <_scanf_float+0x22e>
 8011ec6:	6833      	ldr	r3, [r6, #0]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	6033      	str	r3, [r6, #0]
 8011ecc:	e7b5      	b.n	8011e3a <_scanf_float+0x4a>
 8011ece:	2b45      	cmp	r3, #69	; 0x45
 8011ed0:	f000 8085 	beq.w	8011fde <_scanf_float+0x1ee>
 8011ed4:	2b46      	cmp	r3, #70	; 0x46
 8011ed6:	d06a      	beq.n	8011fae <_scanf_float+0x1be>
 8011ed8:	2b41      	cmp	r3, #65	; 0x41
 8011eda:	d1c1      	bne.n	8011e60 <_scanf_float+0x70>
 8011edc:	2a01      	cmp	r2, #1
 8011ede:	d1bf      	bne.n	8011e60 <_scanf_float+0x70>
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	e046      	b.n	8011f72 <_scanf_float+0x182>
 8011ee4:	2b65      	cmp	r3, #101	; 0x65
 8011ee6:	d07a      	beq.n	8011fde <_scanf_float+0x1ee>
 8011ee8:	d818      	bhi.n	8011f1c <_scanf_float+0x12c>
 8011eea:	2b54      	cmp	r3, #84	; 0x54
 8011eec:	d066      	beq.n	8011fbc <_scanf_float+0x1cc>
 8011eee:	d811      	bhi.n	8011f14 <_scanf_float+0x124>
 8011ef0:	2b4e      	cmp	r3, #78	; 0x4e
 8011ef2:	d1b5      	bne.n	8011e60 <_scanf_float+0x70>
 8011ef4:	2a00      	cmp	r2, #0
 8011ef6:	d146      	bne.n	8011f86 <_scanf_float+0x196>
 8011ef8:	f1b9 0f00 	cmp.w	r9, #0
 8011efc:	d145      	bne.n	8011f8a <_scanf_float+0x19a>
 8011efe:	6821      	ldr	r1, [r4, #0]
 8011f00:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011f04:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011f08:	d13f      	bne.n	8011f8a <_scanf_float+0x19a>
 8011f0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011f0e:	6021      	str	r1, [r4, #0]
 8011f10:	2201      	movs	r2, #1
 8011f12:	e02e      	b.n	8011f72 <_scanf_float+0x182>
 8011f14:	2b59      	cmp	r3, #89	; 0x59
 8011f16:	d01e      	beq.n	8011f56 <_scanf_float+0x166>
 8011f18:	2b61      	cmp	r3, #97	; 0x61
 8011f1a:	e7de      	b.n	8011eda <_scanf_float+0xea>
 8011f1c:	2b6e      	cmp	r3, #110	; 0x6e
 8011f1e:	d0e9      	beq.n	8011ef4 <_scanf_float+0x104>
 8011f20:	d815      	bhi.n	8011f4e <_scanf_float+0x15e>
 8011f22:	2b66      	cmp	r3, #102	; 0x66
 8011f24:	d043      	beq.n	8011fae <_scanf_float+0x1be>
 8011f26:	2b69      	cmp	r3, #105	; 0x69
 8011f28:	d19a      	bne.n	8011e60 <_scanf_float+0x70>
 8011f2a:	f1bb 0f00 	cmp.w	fp, #0
 8011f2e:	d138      	bne.n	8011fa2 <_scanf_float+0x1b2>
 8011f30:	f1b9 0f00 	cmp.w	r9, #0
 8011f34:	d197      	bne.n	8011e66 <_scanf_float+0x76>
 8011f36:	6821      	ldr	r1, [r4, #0]
 8011f38:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011f3c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011f40:	d195      	bne.n	8011e6e <_scanf_float+0x7e>
 8011f42:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011f46:	6021      	str	r1, [r4, #0]
 8011f48:	f04f 0b01 	mov.w	fp, #1
 8011f4c:	e011      	b.n	8011f72 <_scanf_float+0x182>
 8011f4e:	2b74      	cmp	r3, #116	; 0x74
 8011f50:	d034      	beq.n	8011fbc <_scanf_float+0x1cc>
 8011f52:	2b79      	cmp	r3, #121	; 0x79
 8011f54:	d184      	bne.n	8011e60 <_scanf_float+0x70>
 8011f56:	f1bb 0f07 	cmp.w	fp, #7
 8011f5a:	d181      	bne.n	8011e60 <_scanf_float+0x70>
 8011f5c:	f04f 0b08 	mov.w	fp, #8
 8011f60:	e007      	b.n	8011f72 <_scanf_float+0x182>
 8011f62:	eb12 0f0b 	cmn.w	r2, fp
 8011f66:	f47f af7b 	bne.w	8011e60 <_scanf_float+0x70>
 8011f6a:	6821      	ldr	r1, [r4, #0]
 8011f6c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011f70:	6021      	str	r1, [r4, #0]
 8011f72:	702b      	strb	r3, [r5, #0]
 8011f74:	3501      	adds	r5, #1
 8011f76:	e79a      	b.n	8011eae <_scanf_float+0xbe>
 8011f78:	6821      	ldr	r1, [r4, #0]
 8011f7a:	0608      	lsls	r0, r1, #24
 8011f7c:	f57f af70 	bpl.w	8011e60 <_scanf_float+0x70>
 8011f80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011f84:	e7f4      	b.n	8011f70 <_scanf_float+0x180>
 8011f86:	2a02      	cmp	r2, #2
 8011f88:	d047      	beq.n	801201a <_scanf_float+0x22a>
 8011f8a:	f1bb 0f01 	cmp.w	fp, #1
 8011f8e:	d003      	beq.n	8011f98 <_scanf_float+0x1a8>
 8011f90:	f1bb 0f04 	cmp.w	fp, #4
 8011f94:	f47f af64 	bne.w	8011e60 <_scanf_float+0x70>
 8011f98:	f10b 0b01 	add.w	fp, fp, #1
 8011f9c:	fa5f fb8b 	uxtb.w	fp, fp
 8011fa0:	e7e7      	b.n	8011f72 <_scanf_float+0x182>
 8011fa2:	f1bb 0f03 	cmp.w	fp, #3
 8011fa6:	d0f7      	beq.n	8011f98 <_scanf_float+0x1a8>
 8011fa8:	f1bb 0f05 	cmp.w	fp, #5
 8011fac:	e7f2      	b.n	8011f94 <_scanf_float+0x1a4>
 8011fae:	f1bb 0f02 	cmp.w	fp, #2
 8011fb2:	f47f af55 	bne.w	8011e60 <_scanf_float+0x70>
 8011fb6:	f04f 0b03 	mov.w	fp, #3
 8011fba:	e7da      	b.n	8011f72 <_scanf_float+0x182>
 8011fbc:	f1bb 0f06 	cmp.w	fp, #6
 8011fc0:	f47f af4e 	bne.w	8011e60 <_scanf_float+0x70>
 8011fc4:	f04f 0b07 	mov.w	fp, #7
 8011fc8:	e7d3      	b.n	8011f72 <_scanf_float+0x182>
 8011fca:	6821      	ldr	r1, [r4, #0]
 8011fcc:	0588      	lsls	r0, r1, #22
 8011fce:	f57f af47 	bpl.w	8011e60 <_scanf_float+0x70>
 8011fd2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8011fd6:	6021      	str	r1, [r4, #0]
 8011fd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8011fdc:	e7c9      	b.n	8011f72 <_scanf_float+0x182>
 8011fde:	6821      	ldr	r1, [r4, #0]
 8011fe0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011fe4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011fe8:	d006      	beq.n	8011ff8 <_scanf_float+0x208>
 8011fea:	0548      	lsls	r0, r1, #21
 8011fec:	f57f af38 	bpl.w	8011e60 <_scanf_float+0x70>
 8011ff0:	f1b9 0f00 	cmp.w	r9, #0
 8011ff4:	f43f af3b 	beq.w	8011e6e <_scanf_float+0x7e>
 8011ff8:	0588      	lsls	r0, r1, #22
 8011ffa:	bf58      	it	pl
 8011ffc:	9802      	ldrpl	r0, [sp, #8]
 8011ffe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012002:	bf58      	it	pl
 8012004:	eba9 0000 	subpl.w	r0, r9, r0
 8012008:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801200c:	bf58      	it	pl
 801200e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012012:	6021      	str	r1, [r4, #0]
 8012014:	f04f 0900 	mov.w	r9, #0
 8012018:	e7ab      	b.n	8011f72 <_scanf_float+0x182>
 801201a:	2203      	movs	r2, #3
 801201c:	e7a9      	b.n	8011f72 <_scanf_float+0x182>
 801201e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012022:	9205      	str	r2, [sp, #20]
 8012024:	4631      	mov	r1, r6
 8012026:	4638      	mov	r0, r7
 8012028:	4798      	blx	r3
 801202a:	9a05      	ldr	r2, [sp, #20]
 801202c:	2800      	cmp	r0, #0
 801202e:	f43f af04 	beq.w	8011e3a <_scanf_float+0x4a>
 8012032:	e715      	b.n	8011e60 <_scanf_float+0x70>
 8012034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012038:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801203c:	4632      	mov	r2, r6
 801203e:	4638      	mov	r0, r7
 8012040:	4798      	blx	r3
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	3b01      	subs	r3, #1
 8012046:	6123      	str	r3, [r4, #16]
 8012048:	e715      	b.n	8011e76 <_scanf_float+0x86>
 801204a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801204e:	2b06      	cmp	r3, #6
 8012050:	d80a      	bhi.n	8012068 <_scanf_float+0x278>
 8012052:	f1bb 0f02 	cmp.w	fp, #2
 8012056:	d966      	bls.n	8012126 <_scanf_float+0x336>
 8012058:	f1ab 0b03 	sub.w	fp, fp, #3
 801205c:	fa5f fb8b 	uxtb.w	fp, fp
 8012060:	eba5 0b0b 	sub.w	fp, r5, fp
 8012064:	455d      	cmp	r5, fp
 8012066:	d149      	bne.n	80120fc <_scanf_float+0x30c>
 8012068:	6823      	ldr	r3, [r4, #0]
 801206a:	05da      	lsls	r2, r3, #23
 801206c:	d51f      	bpl.n	80120ae <_scanf_float+0x2be>
 801206e:	055b      	lsls	r3, r3, #21
 8012070:	d466      	bmi.n	8012140 <_scanf_float+0x350>
 8012072:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012076:	6923      	ldr	r3, [r4, #16]
 8012078:	2965      	cmp	r1, #101	; 0x65
 801207a:	f103 33ff 	add.w	r3, r3, #4294967295
 801207e:	f105 3bff 	add.w	fp, r5, #4294967295
 8012082:	6123      	str	r3, [r4, #16]
 8012084:	d00d      	beq.n	80120a2 <_scanf_float+0x2b2>
 8012086:	2945      	cmp	r1, #69	; 0x45
 8012088:	d00b      	beq.n	80120a2 <_scanf_float+0x2b2>
 801208a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801208e:	4632      	mov	r2, r6
 8012090:	4638      	mov	r0, r7
 8012092:	4798      	blx	r3
 8012094:	6923      	ldr	r3, [r4, #16]
 8012096:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801209a:	3b01      	subs	r3, #1
 801209c:	f1a5 0b02 	sub.w	fp, r5, #2
 80120a0:	6123      	str	r3, [r4, #16]
 80120a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120a6:	4632      	mov	r2, r6
 80120a8:	4638      	mov	r0, r7
 80120aa:	4798      	blx	r3
 80120ac:	465d      	mov	r5, fp
 80120ae:	6826      	ldr	r6, [r4, #0]
 80120b0:	f016 0610 	ands.w	r6, r6, #16
 80120b4:	d170      	bne.n	8012198 <_scanf_float+0x3a8>
 80120b6:	702e      	strb	r6, [r5, #0]
 80120b8:	6823      	ldr	r3, [r4, #0]
 80120ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80120be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80120c2:	d140      	bne.n	8012146 <_scanf_float+0x356>
 80120c4:	9b02      	ldr	r3, [sp, #8]
 80120c6:	eba9 0303 	sub.w	r3, r9, r3
 80120ca:	425a      	negs	r2, r3
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d147      	bne.n	8012160 <_scanf_float+0x370>
 80120d0:	2200      	movs	r2, #0
 80120d2:	4638      	mov	r0, r7
 80120d4:	4641      	mov	r1, r8
 80120d6:	f000 fecf 	bl	8012e78 <_strtod_r>
 80120da:	6820      	ldr	r0, [r4, #0]
 80120dc:	f8da 3000 	ldr.w	r3, [sl]
 80120e0:	f010 0f02 	tst.w	r0, #2
 80120e4:	f103 0204 	add.w	r2, r3, #4
 80120e8:	f8ca 2000 	str.w	r2, [sl]
 80120ec:	d043      	beq.n	8012176 <_scanf_float+0x386>
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	ed83 0b00 	vstr	d0, [r3]
 80120f4:	68e3      	ldr	r3, [r4, #12]
 80120f6:	3301      	adds	r3, #1
 80120f8:	60e3      	str	r3, [r4, #12]
 80120fa:	e6c0      	b.n	8011e7e <_scanf_float+0x8e>
 80120fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012100:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012104:	4632      	mov	r2, r6
 8012106:	4638      	mov	r0, r7
 8012108:	4798      	blx	r3
 801210a:	6923      	ldr	r3, [r4, #16]
 801210c:	3b01      	subs	r3, #1
 801210e:	6123      	str	r3, [r4, #16]
 8012110:	e7a8      	b.n	8012064 <_scanf_float+0x274>
 8012112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012116:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801211a:	4632      	mov	r2, r6
 801211c:	4638      	mov	r0, r7
 801211e:	4798      	blx	r3
 8012120:	6923      	ldr	r3, [r4, #16]
 8012122:	3b01      	subs	r3, #1
 8012124:	6123      	str	r3, [r4, #16]
 8012126:	4545      	cmp	r5, r8
 8012128:	d8f3      	bhi.n	8012112 <_scanf_float+0x322>
 801212a:	e6a7      	b.n	8011e7c <_scanf_float+0x8c>
 801212c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012130:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012134:	4632      	mov	r2, r6
 8012136:	4638      	mov	r0, r7
 8012138:	4798      	blx	r3
 801213a:	6923      	ldr	r3, [r4, #16]
 801213c:	3b01      	subs	r3, #1
 801213e:	6123      	str	r3, [r4, #16]
 8012140:	4545      	cmp	r5, r8
 8012142:	d8f3      	bhi.n	801212c <_scanf_float+0x33c>
 8012144:	e69a      	b.n	8011e7c <_scanf_float+0x8c>
 8012146:	9b03      	ldr	r3, [sp, #12]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d0c1      	beq.n	80120d0 <_scanf_float+0x2e0>
 801214c:	9904      	ldr	r1, [sp, #16]
 801214e:	230a      	movs	r3, #10
 8012150:	4632      	mov	r2, r6
 8012152:	3101      	adds	r1, #1
 8012154:	4638      	mov	r0, r7
 8012156:	f000 ff1b 	bl	8012f90 <_strtol_r>
 801215a:	9b03      	ldr	r3, [sp, #12]
 801215c:	9d04      	ldr	r5, [sp, #16]
 801215e:	1ac2      	subs	r2, r0, r3
 8012160:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012164:	429d      	cmp	r5, r3
 8012166:	bf28      	it	cs
 8012168:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801216c:	490b      	ldr	r1, [pc, #44]	; (801219c <_scanf_float+0x3ac>)
 801216e:	4628      	mov	r0, r5
 8012170:	f000 f880 	bl	8012274 <siprintf>
 8012174:	e7ac      	b.n	80120d0 <_scanf_float+0x2e0>
 8012176:	f010 0004 	ands.w	r0, r0, #4
 801217a:	d1b8      	bne.n	80120ee <_scanf_float+0x2fe>
 801217c:	eeb4 0b40 	vcmp.f64	d0, d0
 8012180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012184:	681d      	ldr	r5, [r3, #0]
 8012186:	d704      	bvc.n	8012192 <_scanf_float+0x3a2>
 8012188:	f000 f86e 	bl	8012268 <nanf>
 801218c:	ed85 0a00 	vstr	s0, [r5]
 8012190:	e7b0      	b.n	80120f4 <_scanf_float+0x304>
 8012192:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012196:	e7f9      	b.n	801218c <_scanf_float+0x39c>
 8012198:	2600      	movs	r6, #0
 801219a:	e670      	b.n	8011e7e <_scanf_float+0x8e>
 801219c:	080163ac 	.word	0x080163ac

080121a0 <_puts_r>:
 80121a0:	b570      	push	{r4, r5, r6, lr}
 80121a2:	460e      	mov	r6, r1
 80121a4:	4605      	mov	r5, r0
 80121a6:	b118      	cbz	r0, 80121b0 <_puts_r+0x10>
 80121a8:	6983      	ldr	r3, [r0, #24]
 80121aa:	b90b      	cbnz	r3, 80121b0 <_puts_r+0x10>
 80121ac:	f001 fe8c 	bl	8013ec8 <__sinit>
 80121b0:	69ab      	ldr	r3, [r5, #24]
 80121b2:	68ac      	ldr	r4, [r5, #8]
 80121b4:	b913      	cbnz	r3, 80121bc <_puts_r+0x1c>
 80121b6:	4628      	mov	r0, r5
 80121b8:	f001 fe86 	bl	8013ec8 <__sinit>
 80121bc:	4b23      	ldr	r3, [pc, #140]	; (801224c <_puts_r+0xac>)
 80121be:	429c      	cmp	r4, r3
 80121c0:	d117      	bne.n	80121f2 <_puts_r+0x52>
 80121c2:	686c      	ldr	r4, [r5, #4]
 80121c4:	89a3      	ldrh	r3, [r4, #12]
 80121c6:	071b      	lsls	r3, r3, #28
 80121c8:	d51d      	bpl.n	8012206 <_puts_r+0x66>
 80121ca:	6923      	ldr	r3, [r4, #16]
 80121cc:	b1db      	cbz	r3, 8012206 <_puts_r+0x66>
 80121ce:	3e01      	subs	r6, #1
 80121d0:	68a3      	ldr	r3, [r4, #8]
 80121d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80121d6:	3b01      	subs	r3, #1
 80121d8:	60a3      	str	r3, [r4, #8]
 80121da:	b9e9      	cbnz	r1, 8012218 <_puts_r+0x78>
 80121dc:	2b00      	cmp	r3, #0
 80121de:	da2e      	bge.n	801223e <_puts_r+0x9e>
 80121e0:	4622      	mov	r2, r4
 80121e2:	210a      	movs	r1, #10
 80121e4:	4628      	mov	r0, r5
 80121e6:	f000 fee5 	bl	8012fb4 <__swbuf_r>
 80121ea:	3001      	adds	r0, #1
 80121ec:	d011      	beq.n	8012212 <_puts_r+0x72>
 80121ee:	200a      	movs	r0, #10
 80121f0:	e011      	b.n	8012216 <_puts_r+0x76>
 80121f2:	4b17      	ldr	r3, [pc, #92]	; (8012250 <_puts_r+0xb0>)
 80121f4:	429c      	cmp	r4, r3
 80121f6:	d101      	bne.n	80121fc <_puts_r+0x5c>
 80121f8:	68ac      	ldr	r4, [r5, #8]
 80121fa:	e7e3      	b.n	80121c4 <_puts_r+0x24>
 80121fc:	4b15      	ldr	r3, [pc, #84]	; (8012254 <_puts_r+0xb4>)
 80121fe:	429c      	cmp	r4, r3
 8012200:	bf08      	it	eq
 8012202:	68ec      	ldreq	r4, [r5, #12]
 8012204:	e7de      	b.n	80121c4 <_puts_r+0x24>
 8012206:	4621      	mov	r1, r4
 8012208:	4628      	mov	r0, r5
 801220a:	f000 ff25 	bl	8013058 <__swsetup_r>
 801220e:	2800      	cmp	r0, #0
 8012210:	d0dd      	beq.n	80121ce <_puts_r+0x2e>
 8012212:	f04f 30ff 	mov.w	r0, #4294967295
 8012216:	bd70      	pop	{r4, r5, r6, pc}
 8012218:	2b00      	cmp	r3, #0
 801221a:	da04      	bge.n	8012226 <_puts_r+0x86>
 801221c:	69a2      	ldr	r2, [r4, #24]
 801221e:	429a      	cmp	r2, r3
 8012220:	dc06      	bgt.n	8012230 <_puts_r+0x90>
 8012222:	290a      	cmp	r1, #10
 8012224:	d004      	beq.n	8012230 <_puts_r+0x90>
 8012226:	6823      	ldr	r3, [r4, #0]
 8012228:	1c5a      	adds	r2, r3, #1
 801222a:	6022      	str	r2, [r4, #0]
 801222c:	7019      	strb	r1, [r3, #0]
 801222e:	e7cf      	b.n	80121d0 <_puts_r+0x30>
 8012230:	4622      	mov	r2, r4
 8012232:	4628      	mov	r0, r5
 8012234:	f000 febe 	bl	8012fb4 <__swbuf_r>
 8012238:	3001      	adds	r0, #1
 801223a:	d1c9      	bne.n	80121d0 <_puts_r+0x30>
 801223c:	e7e9      	b.n	8012212 <_puts_r+0x72>
 801223e:	6823      	ldr	r3, [r4, #0]
 8012240:	200a      	movs	r0, #10
 8012242:	1c5a      	adds	r2, r3, #1
 8012244:	6022      	str	r2, [r4, #0]
 8012246:	7018      	strb	r0, [r3, #0]
 8012248:	e7e5      	b.n	8012216 <_puts_r+0x76>
 801224a:	bf00      	nop
 801224c:	08016438 	.word	0x08016438
 8012250:	08016458 	.word	0x08016458
 8012254:	08016418 	.word	0x08016418

08012258 <puts>:
 8012258:	4b02      	ldr	r3, [pc, #8]	; (8012264 <puts+0xc>)
 801225a:	4601      	mov	r1, r0
 801225c:	6818      	ldr	r0, [r3, #0]
 801225e:	f7ff bf9f 	b.w	80121a0 <_puts_r>
 8012262:	bf00      	nop
 8012264:	20000180 	.word	0x20000180

08012268 <nanf>:
 8012268:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012270 <nanf+0x8>
 801226c:	4770      	bx	lr
 801226e:	bf00      	nop
 8012270:	7fc00000 	.word	0x7fc00000

08012274 <siprintf>:
 8012274:	b40e      	push	{r1, r2, r3}
 8012276:	b500      	push	{lr}
 8012278:	b09c      	sub	sp, #112	; 0x70
 801227a:	ab1d      	add	r3, sp, #116	; 0x74
 801227c:	9002      	str	r0, [sp, #8]
 801227e:	9006      	str	r0, [sp, #24]
 8012280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012284:	4809      	ldr	r0, [pc, #36]	; (80122ac <siprintf+0x38>)
 8012286:	9107      	str	r1, [sp, #28]
 8012288:	9104      	str	r1, [sp, #16]
 801228a:	4909      	ldr	r1, [pc, #36]	; (80122b0 <siprintf+0x3c>)
 801228c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012290:	9105      	str	r1, [sp, #20]
 8012292:	6800      	ldr	r0, [r0, #0]
 8012294:	9301      	str	r3, [sp, #4]
 8012296:	a902      	add	r1, sp, #8
 8012298:	f002 ff68 	bl	801516c <_svfiprintf_r>
 801229c:	9b02      	ldr	r3, [sp, #8]
 801229e:	2200      	movs	r2, #0
 80122a0:	701a      	strb	r2, [r3, #0]
 80122a2:	b01c      	add	sp, #112	; 0x70
 80122a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80122a8:	b003      	add	sp, #12
 80122aa:	4770      	bx	lr
 80122ac:	20000180 	.word	0x20000180
 80122b0:	ffff0208 	.word	0xffff0208

080122b4 <sulp>:
 80122b4:	b570      	push	{r4, r5, r6, lr}
 80122b6:	4604      	mov	r4, r0
 80122b8:	460d      	mov	r5, r1
 80122ba:	4616      	mov	r6, r2
 80122bc:	ec45 4b10 	vmov	d0, r4, r5
 80122c0:	f002 fd10 	bl	8014ce4 <__ulp>
 80122c4:	b17e      	cbz	r6, 80122e6 <sulp+0x32>
 80122c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80122ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	dd09      	ble.n	80122e6 <sulp+0x32>
 80122d2:	051b      	lsls	r3, r3, #20
 80122d4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80122d8:	2000      	movs	r0, #0
 80122da:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80122de:	ec41 0b17 	vmov	d7, r0, r1
 80122e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80122e6:	bd70      	pop	{r4, r5, r6, pc}

080122e8 <_strtod_l>:
 80122e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ec:	ed2d 8b0c 	vpush	{d8-d13}
 80122f0:	4698      	mov	r8, r3
 80122f2:	b09d      	sub	sp, #116	; 0x74
 80122f4:	2300      	movs	r3, #0
 80122f6:	4604      	mov	r4, r0
 80122f8:	4640      	mov	r0, r8
 80122fa:	460e      	mov	r6, r1
 80122fc:	9214      	str	r2, [sp, #80]	; 0x50
 80122fe:	9318      	str	r3, [sp, #96]	; 0x60
 8012300:	f002 f995 	bl	801462e <__localeconv_l>
 8012304:	4681      	mov	r9, r0
 8012306:	6800      	ldr	r0, [r0, #0]
 8012308:	f7ed ff9a 	bl	8000240 <strlen>
 801230c:	f04f 0a00 	mov.w	sl, #0
 8012310:	4607      	mov	r7, r0
 8012312:	f04f 0b00 	mov.w	fp, #0
 8012316:	9617      	str	r6, [sp, #92]	; 0x5c
 8012318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801231a:	781a      	ldrb	r2, [r3, #0]
 801231c:	2a0d      	cmp	r2, #13
 801231e:	d834      	bhi.n	801238a <_strtod_l+0xa2>
 8012320:	2a09      	cmp	r2, #9
 8012322:	d238      	bcs.n	8012396 <_strtod_l+0xae>
 8012324:	2a00      	cmp	r2, #0
 8012326:	d040      	beq.n	80123aa <_strtod_l+0xc2>
 8012328:	2300      	movs	r3, #0
 801232a:	930d      	str	r3, [sp, #52]	; 0x34
 801232c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801232e:	782b      	ldrb	r3, [r5, #0]
 8012330:	2b30      	cmp	r3, #48	; 0x30
 8012332:	f040 80b3 	bne.w	801249c <_strtod_l+0x1b4>
 8012336:	786b      	ldrb	r3, [r5, #1]
 8012338:	2b58      	cmp	r3, #88	; 0x58
 801233a:	d001      	beq.n	8012340 <_strtod_l+0x58>
 801233c:	2b78      	cmp	r3, #120	; 0x78
 801233e:	d169      	bne.n	8012414 <_strtod_l+0x12c>
 8012340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012342:	9301      	str	r3, [sp, #4]
 8012344:	ab18      	add	r3, sp, #96	; 0x60
 8012346:	9300      	str	r3, [sp, #0]
 8012348:	f8cd 8008 	str.w	r8, [sp, #8]
 801234c:	ab19      	add	r3, sp, #100	; 0x64
 801234e:	4a8f      	ldr	r2, [pc, #572]	; (801258c <_strtod_l+0x2a4>)
 8012350:	a917      	add	r1, sp, #92	; 0x5c
 8012352:	4620      	mov	r0, r4
 8012354:	f001 fe91 	bl	801407a <__gethex>
 8012358:	f010 0607 	ands.w	r6, r0, #7
 801235c:	4607      	mov	r7, r0
 801235e:	d005      	beq.n	801236c <_strtod_l+0x84>
 8012360:	2e06      	cmp	r6, #6
 8012362:	d12c      	bne.n	80123be <_strtod_l+0xd6>
 8012364:	3501      	adds	r5, #1
 8012366:	2300      	movs	r3, #0
 8012368:	9517      	str	r5, [sp, #92]	; 0x5c
 801236a:	930d      	str	r3, [sp, #52]	; 0x34
 801236c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801236e:	2b00      	cmp	r3, #0
 8012370:	f040 855e 	bne.w	8012e30 <_strtod_l+0xb48>
 8012374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012376:	b1eb      	cbz	r3, 80123b4 <_strtod_l+0xcc>
 8012378:	ec4b ab17 	vmov	d7, sl, fp
 801237c:	eeb1 0b47 	vneg.f64	d0, d7
 8012380:	b01d      	add	sp, #116	; 0x74
 8012382:	ecbd 8b0c 	vpop	{d8-d13}
 8012386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238a:	2a2b      	cmp	r2, #43	; 0x2b
 801238c:	d015      	beq.n	80123ba <_strtod_l+0xd2>
 801238e:	2a2d      	cmp	r2, #45	; 0x2d
 8012390:	d004      	beq.n	801239c <_strtod_l+0xb4>
 8012392:	2a20      	cmp	r2, #32
 8012394:	d1c8      	bne.n	8012328 <_strtod_l+0x40>
 8012396:	3301      	adds	r3, #1
 8012398:	9317      	str	r3, [sp, #92]	; 0x5c
 801239a:	e7bd      	b.n	8012318 <_strtod_l+0x30>
 801239c:	2201      	movs	r2, #1
 801239e:	920d      	str	r2, [sp, #52]	; 0x34
 80123a0:	1c5a      	adds	r2, r3, #1
 80123a2:	9217      	str	r2, [sp, #92]	; 0x5c
 80123a4:	785b      	ldrb	r3, [r3, #1]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d1c0      	bne.n	801232c <_strtod_l+0x44>
 80123aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	f040 853c 	bne.w	8012e2c <_strtod_l+0xb44>
 80123b4:	ec4b ab10 	vmov	d0, sl, fp
 80123b8:	e7e2      	b.n	8012380 <_strtod_l+0x98>
 80123ba:	2200      	movs	r2, #0
 80123bc:	e7ef      	b.n	801239e <_strtod_l+0xb6>
 80123be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80123c0:	b13a      	cbz	r2, 80123d2 <_strtod_l+0xea>
 80123c2:	2135      	movs	r1, #53	; 0x35
 80123c4:	a81a      	add	r0, sp, #104	; 0x68
 80123c6:	f002 fd86 	bl	8014ed6 <__copybits>
 80123ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80123cc:	4620      	mov	r0, r4
 80123ce:	f002 f9f1 	bl	80147b4 <_Bfree>
 80123d2:	3e01      	subs	r6, #1
 80123d4:	2e04      	cmp	r6, #4
 80123d6:	d806      	bhi.n	80123e6 <_strtod_l+0xfe>
 80123d8:	e8df f006 	tbb	[pc, r6]
 80123dc:	1714030a 	.word	0x1714030a
 80123e0:	0a          	.byte	0x0a
 80123e1:	00          	.byte	0x00
 80123e2:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80123e6:	073b      	lsls	r3, r7, #28
 80123e8:	d5c0      	bpl.n	801236c <_strtod_l+0x84>
 80123ea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80123ee:	e7bd      	b.n	801236c <_strtod_l+0x84>
 80123f0:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80123f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80123f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80123fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80123fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012402:	e7f0      	b.n	80123e6 <_strtod_l+0xfe>
 8012404:	f8df b188 	ldr.w	fp, [pc, #392]	; 8012590 <_strtod_l+0x2a8>
 8012408:	e7ed      	b.n	80123e6 <_strtod_l+0xfe>
 801240a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801240e:	f04f 3aff 	mov.w	sl, #4294967295
 8012412:	e7e8      	b.n	80123e6 <_strtod_l+0xfe>
 8012414:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012416:	1c5a      	adds	r2, r3, #1
 8012418:	9217      	str	r2, [sp, #92]	; 0x5c
 801241a:	785b      	ldrb	r3, [r3, #1]
 801241c:	2b30      	cmp	r3, #48	; 0x30
 801241e:	d0f9      	beq.n	8012414 <_strtod_l+0x12c>
 8012420:	2b00      	cmp	r3, #0
 8012422:	d0a3      	beq.n	801236c <_strtod_l+0x84>
 8012424:	2301      	movs	r3, #1
 8012426:	930a      	str	r3, [sp, #40]	; 0x28
 8012428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801242a:	930c      	str	r3, [sp, #48]	; 0x30
 801242c:	2300      	movs	r3, #0
 801242e:	9306      	str	r3, [sp, #24]
 8012430:	9308      	str	r3, [sp, #32]
 8012432:	461d      	mov	r5, r3
 8012434:	220a      	movs	r2, #10
 8012436:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012438:	f890 8000 	ldrb.w	r8, [r0]
 801243c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8012440:	b2d9      	uxtb	r1, r3
 8012442:	2909      	cmp	r1, #9
 8012444:	d92c      	bls.n	80124a0 <_strtod_l+0x1b8>
 8012446:	463a      	mov	r2, r7
 8012448:	f8d9 1000 	ldr.w	r1, [r9]
 801244c:	f002 ffd9 	bl	8015402 <strncmp>
 8012450:	2800      	cmp	r0, #0
 8012452:	d035      	beq.n	80124c0 <_strtod_l+0x1d8>
 8012454:	2000      	movs	r0, #0
 8012456:	4642      	mov	r2, r8
 8012458:	462b      	mov	r3, r5
 801245a:	4601      	mov	r1, r0
 801245c:	9004      	str	r0, [sp, #16]
 801245e:	2a65      	cmp	r2, #101	; 0x65
 8012460:	d001      	beq.n	8012466 <_strtod_l+0x17e>
 8012462:	2a45      	cmp	r2, #69	; 0x45
 8012464:	d117      	bne.n	8012496 <_strtod_l+0x1ae>
 8012466:	b923      	cbnz	r3, 8012472 <_strtod_l+0x18a>
 8012468:	b910      	cbnz	r0, 8012470 <_strtod_l+0x188>
 801246a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801246c:	2b00      	cmp	r3, #0
 801246e:	d09c      	beq.n	80123aa <_strtod_l+0xc2>
 8012470:	2300      	movs	r3, #0
 8012472:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012474:	1c72      	adds	r2, r6, #1
 8012476:	9217      	str	r2, [sp, #92]	; 0x5c
 8012478:	7872      	ldrb	r2, [r6, #1]
 801247a:	2a2b      	cmp	r2, #43	; 0x2b
 801247c:	f000 8082 	beq.w	8012584 <_strtod_l+0x29c>
 8012480:	2a2d      	cmp	r2, #45	; 0x2d
 8012482:	d079      	beq.n	8012578 <_strtod_l+0x290>
 8012484:	f04f 0e00 	mov.w	lr, #0
 8012488:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801248c:	f1bc 0f09 	cmp.w	ip, #9
 8012490:	f240 8086 	bls.w	80125a0 <_strtod_l+0x2b8>
 8012494:	9617      	str	r6, [sp, #92]	; 0x5c
 8012496:	f04f 0800 	mov.w	r8, #0
 801249a:	e0a8      	b.n	80125ee <_strtod_l+0x306>
 801249c:	2300      	movs	r3, #0
 801249e:	e7c2      	b.n	8012426 <_strtod_l+0x13e>
 80124a0:	2d08      	cmp	r5, #8
 80124a2:	bfd5      	itete	le
 80124a4:	9908      	ldrle	r1, [sp, #32]
 80124a6:	9906      	ldrgt	r1, [sp, #24]
 80124a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80124ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80124b0:	f100 0001 	add.w	r0, r0, #1
 80124b4:	bfd4      	ite	le
 80124b6:	9308      	strle	r3, [sp, #32]
 80124b8:	9306      	strgt	r3, [sp, #24]
 80124ba:	3501      	adds	r5, #1
 80124bc:	9017      	str	r0, [sp, #92]	; 0x5c
 80124be:	e7ba      	b.n	8012436 <_strtod_l+0x14e>
 80124c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124c2:	19da      	adds	r2, r3, r7
 80124c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80124c6:	5dda      	ldrb	r2, [r3, r7]
 80124c8:	2d00      	cmp	r5, #0
 80124ca:	d038      	beq.n	801253e <_strtod_l+0x256>
 80124cc:	4601      	mov	r1, r0
 80124ce:	462b      	mov	r3, r5
 80124d0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80124d4:	2f09      	cmp	r7, #9
 80124d6:	d913      	bls.n	8012500 <_strtod_l+0x218>
 80124d8:	2701      	movs	r7, #1
 80124da:	9704      	str	r7, [sp, #16]
 80124dc:	e7bf      	b.n	801245e <_strtod_l+0x176>
 80124de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124e0:	1c5a      	adds	r2, r3, #1
 80124e2:	9217      	str	r2, [sp, #92]	; 0x5c
 80124e4:	785a      	ldrb	r2, [r3, #1]
 80124e6:	3001      	adds	r0, #1
 80124e8:	2a30      	cmp	r2, #48	; 0x30
 80124ea:	d0f8      	beq.n	80124de <_strtod_l+0x1f6>
 80124ec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80124f0:	2b08      	cmp	r3, #8
 80124f2:	f200 84a2 	bhi.w	8012e3a <_strtod_l+0xb52>
 80124f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124f8:	930c      	str	r3, [sp, #48]	; 0x30
 80124fa:	4601      	mov	r1, r0
 80124fc:	2000      	movs	r0, #0
 80124fe:	4603      	mov	r3, r0
 8012500:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8012504:	f100 0701 	add.w	r7, r0, #1
 8012508:	d013      	beq.n	8012532 <_strtod_l+0x24a>
 801250a:	4439      	add	r1, r7
 801250c:	eb00 0e03 	add.w	lr, r0, r3
 8012510:	461f      	mov	r7, r3
 8012512:	f04f 0c0a 	mov.w	ip, #10
 8012516:	45be      	cmp	lr, r7
 8012518:	d113      	bne.n	8012542 <_strtod_l+0x25a>
 801251a:	181f      	adds	r7, r3, r0
 801251c:	2f08      	cmp	r7, #8
 801251e:	f103 0301 	add.w	r3, r3, #1
 8012522:	4403      	add	r3, r0
 8012524:	dc1d      	bgt.n	8012562 <_strtod_l+0x27a>
 8012526:	9a08      	ldr	r2, [sp, #32]
 8012528:	200a      	movs	r0, #10
 801252a:	fb00 8202 	mla	r2, r0, r2, r8
 801252e:	9208      	str	r2, [sp, #32]
 8012530:	2700      	movs	r7, #0
 8012532:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012534:	1c50      	adds	r0, r2, #1
 8012536:	9017      	str	r0, [sp, #92]	; 0x5c
 8012538:	7852      	ldrb	r2, [r2, #1]
 801253a:	4638      	mov	r0, r7
 801253c:	e7c8      	b.n	80124d0 <_strtod_l+0x1e8>
 801253e:	4628      	mov	r0, r5
 8012540:	e7d2      	b.n	80124e8 <_strtod_l+0x200>
 8012542:	2f08      	cmp	r7, #8
 8012544:	f107 0701 	add.w	r7, r7, #1
 8012548:	dc04      	bgt.n	8012554 <_strtod_l+0x26c>
 801254a:	9a08      	ldr	r2, [sp, #32]
 801254c:	fb0c f202 	mul.w	r2, ip, r2
 8012550:	9208      	str	r2, [sp, #32]
 8012552:	e7e0      	b.n	8012516 <_strtod_l+0x22e>
 8012554:	2f10      	cmp	r7, #16
 8012556:	bfde      	ittt	le
 8012558:	9a06      	ldrle	r2, [sp, #24]
 801255a:	fb0c f202 	mulle.w	r2, ip, r2
 801255e:	9206      	strle	r2, [sp, #24]
 8012560:	e7d9      	b.n	8012516 <_strtod_l+0x22e>
 8012562:	2b10      	cmp	r3, #16
 8012564:	bfdf      	itttt	le
 8012566:	9a06      	ldrle	r2, [sp, #24]
 8012568:	200a      	movle	r0, #10
 801256a:	fb00 8202 	mlale	r2, r0, r2, r8
 801256e:	9206      	strle	r2, [sp, #24]
 8012570:	e7de      	b.n	8012530 <_strtod_l+0x248>
 8012572:	2301      	movs	r3, #1
 8012574:	9304      	str	r3, [sp, #16]
 8012576:	e777      	b.n	8012468 <_strtod_l+0x180>
 8012578:	f04f 0e01 	mov.w	lr, #1
 801257c:	1cb2      	adds	r2, r6, #2
 801257e:	9217      	str	r2, [sp, #92]	; 0x5c
 8012580:	78b2      	ldrb	r2, [r6, #2]
 8012582:	e781      	b.n	8012488 <_strtod_l+0x1a0>
 8012584:	f04f 0e00 	mov.w	lr, #0
 8012588:	e7f8      	b.n	801257c <_strtod_l+0x294>
 801258a:	bf00      	nop
 801258c:	080163b4 	.word	0x080163b4
 8012590:	7ff00000 	.word	0x7ff00000
 8012594:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012596:	f102 0c01 	add.w	ip, r2, #1
 801259a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801259e:	7852      	ldrb	r2, [r2, #1]
 80125a0:	2a30      	cmp	r2, #48	; 0x30
 80125a2:	d0f7      	beq.n	8012594 <_strtod_l+0x2ac>
 80125a4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80125a8:	f1bc 0f08 	cmp.w	ip, #8
 80125ac:	f63f af73 	bhi.w	8012496 <_strtod_l+0x1ae>
 80125b0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80125b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80125b6:	920e      	str	r2, [sp, #56]	; 0x38
 80125b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80125ba:	f102 0c01 	add.w	ip, r2, #1
 80125be:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80125c2:	7852      	ldrb	r2, [r2, #1]
 80125c4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80125c8:	f1b9 0f09 	cmp.w	r9, #9
 80125cc:	d939      	bls.n	8012642 <_strtod_l+0x35a>
 80125ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80125d0:	ebac 0c07 	sub.w	ip, ip, r7
 80125d4:	f1bc 0f08 	cmp.w	ip, #8
 80125d8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 80125dc:	dc37      	bgt.n	801264e <_strtod_l+0x366>
 80125de:	45e0      	cmp	r8, ip
 80125e0:	bfa8      	it	ge
 80125e2:	46e0      	movge	r8, ip
 80125e4:	f1be 0f00 	cmp.w	lr, #0
 80125e8:	d001      	beq.n	80125ee <_strtod_l+0x306>
 80125ea:	f1c8 0800 	rsb	r8, r8, #0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d151      	bne.n	8012696 <_strtod_l+0x3ae>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	f47f aeba 	bne.w	801236c <_strtod_l+0x84>
 80125f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	f47f aeb6 	bne.w	801236c <_strtod_l+0x84>
 8012600:	9b04      	ldr	r3, [sp, #16]
 8012602:	2b00      	cmp	r3, #0
 8012604:	f47f aed1 	bne.w	80123aa <_strtod_l+0xc2>
 8012608:	2a4e      	cmp	r2, #78	; 0x4e
 801260a:	d027      	beq.n	801265c <_strtod_l+0x374>
 801260c:	dc21      	bgt.n	8012652 <_strtod_l+0x36a>
 801260e:	2a49      	cmp	r2, #73	; 0x49
 8012610:	f47f aecb 	bne.w	80123aa <_strtod_l+0xc2>
 8012614:	499a      	ldr	r1, [pc, #616]	; (8012880 <_strtod_l+0x598>)
 8012616:	a817      	add	r0, sp, #92	; 0x5c
 8012618:	f001 ff62 	bl	80144e0 <__match>
 801261c:	2800      	cmp	r0, #0
 801261e:	f43f aec4 	beq.w	80123aa <_strtod_l+0xc2>
 8012622:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012624:	4997      	ldr	r1, [pc, #604]	; (8012884 <_strtod_l+0x59c>)
 8012626:	3b01      	subs	r3, #1
 8012628:	a817      	add	r0, sp, #92	; 0x5c
 801262a:	9317      	str	r3, [sp, #92]	; 0x5c
 801262c:	f001 ff58 	bl	80144e0 <__match>
 8012630:	b910      	cbnz	r0, 8012638 <_strtod_l+0x350>
 8012632:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012634:	3301      	adds	r3, #1
 8012636:	9317      	str	r3, [sp, #92]	; 0x5c
 8012638:	f8df b260 	ldr.w	fp, [pc, #608]	; 801289c <_strtod_l+0x5b4>
 801263c:	f04f 0a00 	mov.w	sl, #0
 8012640:	e694      	b.n	801236c <_strtod_l+0x84>
 8012642:	270a      	movs	r7, #10
 8012644:	fb07 2808 	mla	r8, r7, r8, r2
 8012648:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 801264c:	e7b4      	b.n	80125b8 <_strtod_l+0x2d0>
 801264e:	46e0      	mov	r8, ip
 8012650:	e7c8      	b.n	80125e4 <_strtod_l+0x2fc>
 8012652:	2a69      	cmp	r2, #105	; 0x69
 8012654:	d0de      	beq.n	8012614 <_strtod_l+0x32c>
 8012656:	2a6e      	cmp	r2, #110	; 0x6e
 8012658:	f47f aea7 	bne.w	80123aa <_strtod_l+0xc2>
 801265c:	498a      	ldr	r1, [pc, #552]	; (8012888 <_strtod_l+0x5a0>)
 801265e:	a817      	add	r0, sp, #92	; 0x5c
 8012660:	f001 ff3e 	bl	80144e0 <__match>
 8012664:	2800      	cmp	r0, #0
 8012666:	f43f aea0 	beq.w	80123aa <_strtod_l+0xc2>
 801266a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	2b28      	cmp	r3, #40	; 0x28
 8012670:	d10e      	bne.n	8012690 <_strtod_l+0x3a8>
 8012672:	aa1a      	add	r2, sp, #104	; 0x68
 8012674:	4985      	ldr	r1, [pc, #532]	; (801288c <_strtod_l+0x5a4>)
 8012676:	a817      	add	r0, sp, #92	; 0x5c
 8012678:	f001 ff46 	bl	8014508 <__hexnan>
 801267c:	2805      	cmp	r0, #5
 801267e:	d107      	bne.n	8012690 <_strtod_l+0x3a8>
 8012680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012682:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012686:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801268a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801268e:	e66d      	b.n	801236c <_strtod_l+0x84>
 8012690:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80128a0 <_strtod_l+0x5b8>
 8012694:	e7d2      	b.n	801263c <_strtod_l+0x354>
 8012696:	eddd 7a08 	vldr	s15, [sp, #32]
 801269a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801269e:	eba8 0201 	sub.w	r2, r8, r1
 80126a2:	2d00      	cmp	r5, #0
 80126a4:	bf08      	it	eq
 80126a6:	461d      	moveq	r5, r3
 80126a8:	2b10      	cmp	r3, #16
 80126aa:	9204      	str	r2, [sp, #16]
 80126ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80126b0:	461a      	mov	r2, r3
 80126b2:	bfa8      	it	ge
 80126b4:	2210      	movge	r2, #16
 80126b6:	2b09      	cmp	r3, #9
 80126b8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80126bc:	dc14      	bgt.n	80126e8 <_strtod_l+0x400>
 80126be:	9904      	ldr	r1, [sp, #16]
 80126c0:	2900      	cmp	r1, #0
 80126c2:	f43f ae53 	beq.w	801236c <_strtod_l+0x84>
 80126c6:	9904      	ldr	r1, [sp, #16]
 80126c8:	dd72      	ble.n	80127b0 <_strtod_l+0x4c8>
 80126ca:	2916      	cmp	r1, #22
 80126cc:	dc5a      	bgt.n	8012784 <_strtod_l+0x49c>
 80126ce:	4970      	ldr	r1, [pc, #448]	; (8012890 <_strtod_l+0x5a8>)
 80126d0:	9b04      	ldr	r3, [sp, #16]
 80126d2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80126d6:	ed91 7b00 	vldr	d7, [r1]
 80126da:	ec4b ab16 	vmov	d6, sl, fp
 80126de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80126e2:	ec5b ab17 	vmov	sl, fp, d7
 80126e6:	e641      	b.n	801236c <_strtod_l+0x84>
 80126e8:	4969      	ldr	r1, [pc, #420]	; (8012890 <_strtod_l+0x5a8>)
 80126ea:	eddd 7a06 	vldr	s15, [sp, #24]
 80126ee:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80126f2:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80126f6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80126fa:	2b0f      	cmp	r3, #15
 80126fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012700:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012704:	ec5b ab17 	vmov	sl, fp, d7
 8012708:	ddd9      	ble.n	80126be <_strtod_l+0x3d6>
 801270a:	9904      	ldr	r1, [sp, #16]
 801270c:	1a9a      	subs	r2, r3, r2
 801270e:	440a      	add	r2, r1
 8012710:	2a00      	cmp	r2, #0
 8012712:	f340 8096 	ble.w	8012842 <_strtod_l+0x55a>
 8012716:	f012 000f 	ands.w	r0, r2, #15
 801271a:	d00a      	beq.n	8012732 <_strtod_l+0x44a>
 801271c:	495c      	ldr	r1, [pc, #368]	; (8012890 <_strtod_l+0x5a8>)
 801271e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012722:	ed91 7b00 	vldr	d7, [r1]
 8012726:	ec4b ab16 	vmov	d6, sl, fp
 801272a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801272e:	ec5b ab17 	vmov	sl, fp, d7
 8012732:	f032 020f 	bics.w	r2, r2, #15
 8012736:	d072      	beq.n	801281e <_strtod_l+0x536>
 8012738:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801273c:	dd45      	ble.n	80127ca <_strtod_l+0x4e2>
 801273e:	2500      	movs	r5, #0
 8012740:	46a8      	mov	r8, r5
 8012742:	9506      	str	r5, [sp, #24]
 8012744:	46a9      	mov	r9, r5
 8012746:	2322      	movs	r3, #34	; 0x22
 8012748:	f8df b150 	ldr.w	fp, [pc, #336]	; 801289c <_strtod_l+0x5b4>
 801274c:	6023      	str	r3, [r4, #0]
 801274e:	f04f 0a00 	mov.w	sl, #0
 8012752:	9b06      	ldr	r3, [sp, #24]
 8012754:	2b00      	cmp	r3, #0
 8012756:	f43f ae09 	beq.w	801236c <_strtod_l+0x84>
 801275a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801275c:	4620      	mov	r0, r4
 801275e:	f002 f829 	bl	80147b4 <_Bfree>
 8012762:	4649      	mov	r1, r9
 8012764:	4620      	mov	r0, r4
 8012766:	f002 f825 	bl	80147b4 <_Bfree>
 801276a:	4641      	mov	r1, r8
 801276c:	4620      	mov	r0, r4
 801276e:	f002 f821 	bl	80147b4 <_Bfree>
 8012772:	9906      	ldr	r1, [sp, #24]
 8012774:	4620      	mov	r0, r4
 8012776:	f002 f81d 	bl	80147b4 <_Bfree>
 801277a:	4629      	mov	r1, r5
 801277c:	4620      	mov	r0, r4
 801277e:	f002 f819 	bl	80147b4 <_Bfree>
 8012782:	e5f3      	b.n	801236c <_strtod_l+0x84>
 8012784:	9804      	ldr	r0, [sp, #16]
 8012786:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801278a:	4281      	cmp	r1, r0
 801278c:	dbbd      	blt.n	801270a <_strtod_l+0x422>
 801278e:	4a40      	ldr	r2, [pc, #256]	; (8012890 <_strtod_l+0x5a8>)
 8012790:	f1c3 030f 	rsb	r3, r3, #15
 8012794:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012798:	ed91 7b00 	vldr	d7, [r1]
 801279c:	ec4b ab16 	vmov	d6, sl, fp
 80127a0:	1ac3      	subs	r3, r0, r3
 80127a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80127a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127aa:	ed92 6b00 	vldr	d6, [r2]
 80127ae:	e796      	b.n	80126de <_strtod_l+0x3f6>
 80127b0:	3116      	adds	r1, #22
 80127b2:	dbaa      	blt.n	801270a <_strtod_l+0x422>
 80127b4:	4936      	ldr	r1, [pc, #216]	; (8012890 <_strtod_l+0x5a8>)
 80127b6:	9b04      	ldr	r3, [sp, #16]
 80127b8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80127bc:	ed91 7b00 	vldr	d7, [r1]
 80127c0:	ec4b ab16 	vmov	d6, sl, fp
 80127c4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80127c8:	e78b      	b.n	80126e2 <_strtod_l+0x3fa>
 80127ca:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80127ce:	2000      	movs	r0, #0
 80127d0:	4e30      	ldr	r6, [pc, #192]	; (8012894 <_strtod_l+0x5ac>)
 80127d2:	1112      	asrs	r2, r2, #4
 80127d4:	4601      	mov	r1, r0
 80127d6:	2a01      	cmp	r2, #1
 80127d8:	dc23      	bgt.n	8012822 <_strtod_l+0x53a>
 80127da:	b108      	cbz	r0, 80127e0 <_strtod_l+0x4f8>
 80127dc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80127e0:	4a2c      	ldr	r2, [pc, #176]	; (8012894 <_strtod_l+0x5ac>)
 80127e2:	482d      	ldr	r0, [pc, #180]	; (8012898 <_strtod_l+0x5b0>)
 80127e4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80127e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80127ec:	ed91 7b00 	vldr	d7, [r1]
 80127f0:	ec4b ab16 	vmov	d6, sl, fp
 80127f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80127fc:	9907      	ldr	r1, [sp, #28]
 80127fe:	4a27      	ldr	r2, [pc, #156]	; (801289c <_strtod_l+0x5b4>)
 8012800:	400a      	ands	r2, r1
 8012802:	4282      	cmp	r2, r0
 8012804:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012808:	d899      	bhi.n	801273e <_strtod_l+0x456>
 801280a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801280e:	4282      	cmp	r2, r0
 8012810:	bf86      	itte	hi
 8012812:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80128a4 <_strtod_l+0x5bc>
 8012816:	f04f 3aff 	movhi.w	sl, #4294967295
 801281a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801281e:	2700      	movs	r7, #0
 8012820:	e070      	b.n	8012904 <_strtod_l+0x61c>
 8012822:	07d7      	lsls	r7, r2, #31
 8012824:	d50a      	bpl.n	801283c <_strtod_l+0x554>
 8012826:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 801282a:	ed90 7b00 	vldr	d7, [r0]
 801282e:	ed9d 6b06 	vldr	d6, [sp, #24]
 8012832:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012836:	ed8d 7b06 	vstr	d7, [sp, #24]
 801283a:	2001      	movs	r0, #1
 801283c:	3101      	adds	r1, #1
 801283e:	1052      	asrs	r2, r2, #1
 8012840:	e7c9      	b.n	80127d6 <_strtod_l+0x4ee>
 8012842:	d0ec      	beq.n	801281e <_strtod_l+0x536>
 8012844:	4252      	negs	r2, r2
 8012846:	f012 000f 	ands.w	r0, r2, #15
 801284a:	d00a      	beq.n	8012862 <_strtod_l+0x57a>
 801284c:	4910      	ldr	r1, [pc, #64]	; (8012890 <_strtod_l+0x5a8>)
 801284e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012852:	ed91 7b00 	vldr	d7, [r1]
 8012856:	ec4b ab16 	vmov	d6, sl, fp
 801285a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801285e:	ec5b ab17 	vmov	sl, fp, d7
 8012862:	1112      	asrs	r2, r2, #4
 8012864:	d0db      	beq.n	801281e <_strtod_l+0x536>
 8012866:	2a1f      	cmp	r2, #31
 8012868:	dd1e      	ble.n	80128a8 <_strtod_l+0x5c0>
 801286a:	2500      	movs	r5, #0
 801286c:	46a8      	mov	r8, r5
 801286e:	9506      	str	r5, [sp, #24]
 8012870:	46a9      	mov	r9, r5
 8012872:	2322      	movs	r3, #34	; 0x22
 8012874:	f04f 0a00 	mov.w	sl, #0
 8012878:	f04f 0b00 	mov.w	fp, #0
 801287c:	6023      	str	r3, [r4, #0]
 801287e:	e768      	b.n	8012752 <_strtod_l+0x46a>
 8012880:	0801637d 	.word	0x0801637d
 8012884:	0801640b 	.word	0x0801640b
 8012888:	08016385 	.word	0x08016385
 801288c:	080163c8 	.word	0x080163c8
 8012890:	080164b0 	.word	0x080164b0
 8012894:	08016488 	.word	0x08016488
 8012898:	7ca00000 	.word	0x7ca00000
 801289c:	7ff00000 	.word	0x7ff00000
 80128a0:	fff80000 	.word	0xfff80000
 80128a4:	7fefffff 	.word	0x7fefffff
 80128a8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80128ac:	f012 0710 	ands.w	r7, r2, #16
 80128b0:	49ab      	ldr	r1, [pc, #684]	; (8012b60 <_strtod_l+0x878>)
 80128b2:	bf18      	it	ne
 80128b4:	276a      	movne	r7, #106	; 0x6a
 80128b6:	2000      	movs	r0, #0
 80128b8:	2a00      	cmp	r2, #0
 80128ba:	f300 8113 	bgt.w	8012ae4 <_strtod_l+0x7fc>
 80128be:	b108      	cbz	r0, 80128c4 <_strtod_l+0x5dc>
 80128c0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80128c4:	b1bf      	cbz	r7, 80128f6 <_strtod_l+0x60e>
 80128c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80128ca:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80128ce:	2a00      	cmp	r2, #0
 80128d0:	4659      	mov	r1, fp
 80128d2:	dd10      	ble.n	80128f6 <_strtod_l+0x60e>
 80128d4:	2a1f      	cmp	r2, #31
 80128d6:	f340 8113 	ble.w	8012b00 <_strtod_l+0x818>
 80128da:	2a34      	cmp	r2, #52	; 0x34
 80128dc:	bfde      	ittt	le
 80128de:	3a20      	suble	r2, #32
 80128e0:	f04f 30ff 	movle.w	r0, #4294967295
 80128e4:	fa00 f202 	lslle.w	r2, r0, r2
 80128e8:	f04f 0a00 	mov.w	sl, #0
 80128ec:	bfcc      	ite	gt
 80128ee:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80128f2:	ea02 0b01 	andle.w	fp, r2, r1
 80128f6:	ec4b ab17 	vmov	d7, sl, fp
 80128fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80128fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012902:	d0b2      	beq.n	801286a <_strtod_l+0x582>
 8012904:	9a08      	ldr	r2, [sp, #32]
 8012906:	9200      	str	r2, [sp, #0]
 8012908:	990c      	ldr	r1, [sp, #48]	; 0x30
 801290a:	462a      	mov	r2, r5
 801290c:	4620      	mov	r0, r4
 801290e:	f001 ffa3 	bl	8014858 <__s2b>
 8012912:	9006      	str	r0, [sp, #24]
 8012914:	2800      	cmp	r0, #0
 8012916:	f43f af12 	beq.w	801273e <_strtod_l+0x456>
 801291a:	9a04      	ldr	r2, [sp, #16]
 801291c:	9b04      	ldr	r3, [sp, #16]
 801291e:	2a00      	cmp	r2, #0
 8012920:	f1c3 0300 	rsb	r3, r3, #0
 8012924:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8012b48 <_strtod_l+0x860>
 8012928:	bfa8      	it	ge
 801292a:	2300      	movge	r3, #0
 801292c:	ed9f ab88 	vldr	d10, [pc, #544]	; 8012b50 <_strtod_l+0x868>
 8012930:	ed9f bb89 	vldr	d11, [pc, #548]	; 8012b58 <_strtod_l+0x870>
 8012934:	930e      	str	r3, [sp, #56]	; 0x38
 8012936:	2500      	movs	r5, #0
 8012938:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801293c:	9310      	str	r3, [sp, #64]	; 0x40
 801293e:	46a8      	mov	r8, r5
 8012940:	9b06      	ldr	r3, [sp, #24]
 8012942:	4620      	mov	r0, r4
 8012944:	6859      	ldr	r1, [r3, #4]
 8012946:	f001 ff01 	bl	801474c <_Balloc>
 801294a:	4681      	mov	r9, r0
 801294c:	2800      	cmp	r0, #0
 801294e:	f43f aefa 	beq.w	8012746 <_strtod_l+0x45e>
 8012952:	9b06      	ldr	r3, [sp, #24]
 8012954:	691a      	ldr	r2, [r3, #16]
 8012956:	3202      	adds	r2, #2
 8012958:	f103 010c 	add.w	r1, r3, #12
 801295c:	0092      	lsls	r2, r2, #2
 801295e:	300c      	adds	r0, #12
 8012960:	f7fe fdf8 	bl	8011554 <memcpy>
 8012964:	aa1a      	add	r2, sp, #104	; 0x68
 8012966:	a919      	add	r1, sp, #100	; 0x64
 8012968:	ec4b ab10 	vmov	d0, sl, fp
 801296c:	4620      	mov	r0, r4
 801296e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012972:	f002 fa2d 	bl	8014dd0 <__d2b>
 8012976:	9018      	str	r0, [sp, #96]	; 0x60
 8012978:	2800      	cmp	r0, #0
 801297a:	f43f aee4 	beq.w	8012746 <_strtod_l+0x45e>
 801297e:	2101      	movs	r1, #1
 8012980:	4620      	mov	r0, r4
 8012982:	f001 fff5 	bl	8014970 <__i2b>
 8012986:	4680      	mov	r8, r0
 8012988:	2800      	cmp	r0, #0
 801298a:	f43f aedc 	beq.w	8012746 <_strtod_l+0x45e>
 801298e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012990:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012992:	2e00      	cmp	r6, #0
 8012994:	bfb1      	iteee	lt
 8012996:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8012998:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801299a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 801299c:	18f3      	addge	r3, r6, r3
 801299e:	bfba      	itte	lt
 80129a0:	1b98      	sublt	r0, r3, r6
 80129a2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80129a4:	9308      	strge	r3, [sp, #32]
 80129a6:	eba6 0607 	sub.w	r6, r6, r7
 80129aa:	bfb8      	it	lt
 80129ac:	9308      	strlt	r3, [sp, #32]
 80129ae:	4416      	add	r6, r2
 80129b0:	4b6c      	ldr	r3, [pc, #432]	; (8012b64 <_strtod_l+0x87c>)
 80129b2:	3e01      	subs	r6, #1
 80129b4:	429e      	cmp	r6, r3
 80129b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80129ba:	f280 80b4 	bge.w	8012b26 <_strtod_l+0x83e>
 80129be:	1b9b      	subs	r3, r3, r6
 80129c0:	2b1f      	cmp	r3, #31
 80129c2:	eba2 0203 	sub.w	r2, r2, r3
 80129c6:	f04f 0101 	mov.w	r1, #1
 80129ca:	f300 80a0 	bgt.w	8012b0e <_strtod_l+0x826>
 80129ce:	fa01 f303 	lsl.w	r3, r1, r3
 80129d2:	9311      	str	r3, [sp, #68]	; 0x44
 80129d4:	2300      	movs	r3, #0
 80129d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80129d8:	9b08      	ldr	r3, [sp, #32]
 80129da:	4413      	add	r3, r2
 80129dc:	4402      	add	r2, r0
 80129de:	18be      	adds	r6, r7, r2
 80129e0:	9a08      	ldr	r2, [sp, #32]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	bfa8      	it	ge
 80129e6:	461a      	movge	r2, r3
 80129e8:	42b2      	cmp	r2, r6
 80129ea:	bfa8      	it	ge
 80129ec:	4632      	movge	r2, r6
 80129ee:	2a00      	cmp	r2, #0
 80129f0:	dd04      	ble.n	80129fc <_strtod_l+0x714>
 80129f2:	9908      	ldr	r1, [sp, #32]
 80129f4:	1a9b      	subs	r3, r3, r2
 80129f6:	1ab6      	subs	r6, r6, r2
 80129f8:	1a8a      	subs	r2, r1, r2
 80129fa:	9208      	str	r2, [sp, #32]
 80129fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129fe:	b1c2      	cbz	r2, 8012a32 <_strtod_l+0x74a>
 8012a00:	4641      	mov	r1, r8
 8012a02:	4620      	mov	r0, r4
 8012a04:	9315      	str	r3, [sp, #84]	; 0x54
 8012a06:	f002 f853 	bl	8014ab0 <__pow5mult>
 8012a0a:	4680      	mov	r8, r0
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	f43f ae9a 	beq.w	8012746 <_strtod_l+0x45e>
 8012a12:	4601      	mov	r1, r0
 8012a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012a16:	4620      	mov	r0, r4
 8012a18:	f001 ffb3 	bl	8014982 <__multiply>
 8012a1c:	900c      	str	r0, [sp, #48]	; 0x30
 8012a1e:	2800      	cmp	r0, #0
 8012a20:	f43f ae91 	beq.w	8012746 <_strtod_l+0x45e>
 8012a24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012a26:	4620      	mov	r0, r4
 8012a28:	f001 fec4 	bl	80147b4 <_Bfree>
 8012a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a30:	9218      	str	r2, [sp, #96]	; 0x60
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	dc7c      	bgt.n	8012b30 <_strtod_l+0x848>
 8012a36:	9b04      	ldr	r3, [sp, #16]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	dd08      	ble.n	8012a4e <_strtod_l+0x766>
 8012a3c:	4649      	mov	r1, r9
 8012a3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a40:	4620      	mov	r0, r4
 8012a42:	f002 f835 	bl	8014ab0 <__pow5mult>
 8012a46:	4681      	mov	r9, r0
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	f43f ae7c 	beq.w	8012746 <_strtod_l+0x45e>
 8012a4e:	2e00      	cmp	r6, #0
 8012a50:	dd08      	ble.n	8012a64 <_strtod_l+0x77c>
 8012a52:	4649      	mov	r1, r9
 8012a54:	4632      	mov	r2, r6
 8012a56:	4620      	mov	r0, r4
 8012a58:	f002 f878 	bl	8014b4c <__lshift>
 8012a5c:	4681      	mov	r9, r0
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	f43f ae71 	beq.w	8012746 <_strtod_l+0x45e>
 8012a64:	9b08      	ldr	r3, [sp, #32]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	dd08      	ble.n	8012a7c <_strtod_l+0x794>
 8012a6a:	4641      	mov	r1, r8
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f002 f86c 	bl	8014b4c <__lshift>
 8012a74:	4680      	mov	r8, r0
 8012a76:	2800      	cmp	r0, #0
 8012a78:	f43f ae65 	beq.w	8012746 <_strtod_l+0x45e>
 8012a7c:	464a      	mov	r2, r9
 8012a7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012a80:	4620      	mov	r0, r4
 8012a82:	f002 f8d1 	bl	8014c28 <__mdiff>
 8012a86:	4605      	mov	r5, r0
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	f43f ae5c 	beq.w	8012746 <_strtod_l+0x45e>
 8012a8e:	68c3      	ldr	r3, [r0, #12]
 8012a90:	930c      	str	r3, [sp, #48]	; 0x30
 8012a92:	2300      	movs	r3, #0
 8012a94:	60c3      	str	r3, [r0, #12]
 8012a96:	4641      	mov	r1, r8
 8012a98:	f002 f8ac 	bl	8014bf4 <__mcmp>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	da63      	bge.n	8012b68 <_strtod_l+0x880>
 8012aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012aa2:	b9e3      	cbnz	r3, 8012ade <_strtod_l+0x7f6>
 8012aa4:	f1ba 0f00 	cmp.w	sl, #0
 8012aa8:	d119      	bne.n	8012ade <_strtod_l+0x7f6>
 8012aaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012aae:	b9b3      	cbnz	r3, 8012ade <_strtod_l+0x7f6>
 8012ab0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012ab4:	0d1b      	lsrs	r3, r3, #20
 8012ab6:	051b      	lsls	r3, r3, #20
 8012ab8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012abc:	d90f      	bls.n	8012ade <_strtod_l+0x7f6>
 8012abe:	696b      	ldr	r3, [r5, #20]
 8012ac0:	b913      	cbnz	r3, 8012ac8 <_strtod_l+0x7e0>
 8012ac2:	692b      	ldr	r3, [r5, #16]
 8012ac4:	2b01      	cmp	r3, #1
 8012ac6:	dd0a      	ble.n	8012ade <_strtod_l+0x7f6>
 8012ac8:	4629      	mov	r1, r5
 8012aca:	2201      	movs	r2, #1
 8012acc:	4620      	mov	r0, r4
 8012ace:	f002 f83d 	bl	8014b4c <__lshift>
 8012ad2:	4641      	mov	r1, r8
 8012ad4:	4605      	mov	r5, r0
 8012ad6:	f002 f88d 	bl	8014bf4 <__mcmp>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	dc75      	bgt.n	8012bca <_strtod_l+0x8e2>
 8012ade:	2f00      	cmp	r7, #0
 8012ae0:	d17f      	bne.n	8012be2 <_strtod_l+0x8fa>
 8012ae2:	e63a      	b.n	801275a <_strtod_l+0x472>
 8012ae4:	07d6      	lsls	r6, r2, #31
 8012ae6:	d508      	bpl.n	8012afa <_strtod_l+0x812>
 8012ae8:	ed9d 6b06 	vldr	d6, [sp, #24]
 8012aec:	ed91 7b00 	vldr	d7, [r1]
 8012af0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012af4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012af8:	2001      	movs	r0, #1
 8012afa:	1052      	asrs	r2, r2, #1
 8012afc:	3108      	adds	r1, #8
 8012afe:	e6db      	b.n	80128b8 <_strtod_l+0x5d0>
 8012b00:	f04f 31ff 	mov.w	r1, #4294967295
 8012b04:	fa01 f202 	lsl.w	r2, r1, r2
 8012b08:	ea02 0a0a 	and.w	sl, r2, sl
 8012b0c:	e6f3      	b.n	80128f6 <_strtod_l+0x60e>
 8012b0e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012b12:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012b16:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012b1a:	36e2      	adds	r6, #226	; 0xe2
 8012b1c:	fa01 f306 	lsl.w	r3, r1, r6
 8012b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b22:	9111      	str	r1, [sp, #68]	; 0x44
 8012b24:	e758      	b.n	80129d8 <_strtod_l+0x6f0>
 8012b26:	2300      	movs	r3, #0
 8012b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	9311      	str	r3, [sp, #68]	; 0x44
 8012b2e:	e753      	b.n	80129d8 <_strtod_l+0x6f0>
 8012b30:	461a      	mov	r2, r3
 8012b32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012b34:	4620      	mov	r0, r4
 8012b36:	f002 f809 	bl	8014b4c <__lshift>
 8012b3a:	9018      	str	r0, [sp, #96]	; 0x60
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	f47f af7a 	bne.w	8012a36 <_strtod_l+0x74e>
 8012b42:	e600      	b.n	8012746 <_strtod_l+0x45e>
 8012b44:	f3af 8000 	nop.w
 8012b48:	94a03595 	.word	0x94a03595
 8012b4c:	3fdfffff 	.word	0x3fdfffff
 8012b50:	35afe535 	.word	0x35afe535
 8012b54:	3fe00000 	.word	0x3fe00000
 8012b58:	94a03595 	.word	0x94a03595
 8012b5c:	3fcfffff 	.word	0x3fcfffff
 8012b60:	080163e0 	.word	0x080163e0
 8012b64:	fffffc02 	.word	0xfffffc02
 8012b68:	f8cd b020 	str.w	fp, [sp, #32]
 8012b6c:	f040 8085 	bne.w	8012c7a <_strtod_l+0x992>
 8012b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012b76:	b322      	cbz	r2, 8012bc2 <_strtod_l+0x8da>
 8012b78:	4ab7      	ldr	r2, [pc, #732]	; (8012e58 <_strtod_l+0xb70>)
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d154      	bne.n	8012c28 <_strtod_l+0x940>
 8012b7e:	4651      	mov	r1, sl
 8012b80:	b1e7      	cbz	r7, 8012bbc <_strtod_l+0x8d4>
 8012b82:	4bb6      	ldr	r3, [pc, #728]	; (8012e5c <_strtod_l+0xb74>)
 8012b84:	465a      	mov	r2, fp
 8012b86:	4013      	ands	r3, r2
 8012b88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b90:	d803      	bhi.n	8012b9a <_strtod_l+0x8b2>
 8012b92:	0d1b      	lsrs	r3, r3, #20
 8012b94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012b98:	409a      	lsls	r2, r3
 8012b9a:	4291      	cmp	r1, r2
 8012b9c:	d144      	bne.n	8012c28 <_strtod_l+0x940>
 8012b9e:	4bb0      	ldr	r3, [pc, #704]	; (8012e60 <_strtod_l+0xb78>)
 8012ba0:	9a08      	ldr	r2, [sp, #32]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d102      	bne.n	8012bac <_strtod_l+0x8c4>
 8012ba6:	3101      	adds	r1, #1
 8012ba8:	f43f adcd 	beq.w	8012746 <_strtod_l+0x45e>
 8012bac:	4bab      	ldr	r3, [pc, #684]	; (8012e5c <_strtod_l+0xb74>)
 8012bae:	9a08      	ldr	r2, [sp, #32]
 8012bb0:	401a      	ands	r2, r3
 8012bb2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8012bb6:	f04f 0a00 	mov.w	sl, #0
 8012bba:	e790      	b.n	8012ade <_strtod_l+0x7f6>
 8012bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8012bc0:	e7eb      	b.n	8012b9a <_strtod_l+0x8b2>
 8012bc2:	bb8b      	cbnz	r3, 8012c28 <_strtod_l+0x940>
 8012bc4:	f1ba 0f00 	cmp.w	sl, #0
 8012bc8:	d12e      	bne.n	8012c28 <_strtod_l+0x940>
 8012bca:	465b      	mov	r3, fp
 8012bcc:	4aa3      	ldr	r2, [pc, #652]	; (8012e5c <_strtod_l+0xb74>)
 8012bce:	b30f      	cbz	r7, 8012c14 <_strtod_l+0x92c>
 8012bd0:	ea02 010b 	and.w	r1, r2, fp
 8012bd4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012bd8:	dc1c      	bgt.n	8012c14 <_strtod_l+0x92c>
 8012bda:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012bde:	f77f ae48 	ble.w	8012872 <_strtod_l+0x58a>
 8012be2:	4aa0      	ldr	r2, [pc, #640]	; (8012e64 <_strtod_l+0xb7c>)
 8012be4:	2300      	movs	r3, #0
 8012be6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8012bea:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8012bee:	ec4b ab17 	vmov	d7, sl, fp
 8012bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012bf6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012bfa:	9b05      	ldr	r3, [sp, #20]
 8012bfc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	f47f adaa 	bne.w	801275a <_strtod_l+0x472>
 8012c06:	9b04      	ldr	r3, [sp, #16]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f47f ada6 	bne.w	801275a <_strtod_l+0x472>
 8012c0e:	2322      	movs	r3, #34	; 0x22
 8012c10:	6023      	str	r3, [r4, #0]
 8012c12:	e5a2      	b.n	801275a <_strtod_l+0x472>
 8012c14:	4013      	ands	r3, r2
 8012c16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012c1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012c1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012c22:	f04f 3aff 	mov.w	sl, #4294967295
 8012c26:	e75a      	b.n	8012ade <_strtod_l+0x7f6>
 8012c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c2a:	b18b      	cbz	r3, 8012c50 <_strtod_l+0x968>
 8012c2c:	9a08      	ldr	r2, [sp, #32]
 8012c2e:	4213      	tst	r3, r2
 8012c30:	f43f af55 	beq.w	8012ade <_strtod_l+0x7f6>
 8012c34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c36:	463a      	mov	r2, r7
 8012c38:	4650      	mov	r0, sl
 8012c3a:	4659      	mov	r1, fp
 8012c3c:	b163      	cbz	r3, 8012c58 <_strtod_l+0x970>
 8012c3e:	f7ff fb39 	bl	80122b4 <sulp>
 8012c42:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012c46:	ee37 7b00 	vadd.f64	d7, d7, d0
 8012c4a:	ec5b ab17 	vmov	sl, fp, d7
 8012c4e:	e746      	b.n	8012ade <_strtod_l+0x7f6>
 8012c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c52:	ea13 0f0a 	tst.w	r3, sl
 8012c56:	e7eb      	b.n	8012c30 <_strtod_l+0x948>
 8012c58:	f7ff fb2c 	bl	80122b4 <sulp>
 8012c5c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012c60:	ee37 7b40 	vsub.f64	d7, d7, d0
 8012c64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012c68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c70:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012c74:	f43f adfd 	beq.w	8012872 <_strtod_l+0x58a>
 8012c78:	e731      	b.n	8012ade <_strtod_l+0x7f6>
 8012c7a:	4641      	mov	r1, r8
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f002 f8f6 	bl	8014e6e <__ratio>
 8012c82:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012c86:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c8e:	d869      	bhi.n	8012d64 <_strtod_l+0xa7c>
 8012c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d045      	beq.n	8012d22 <_strtod_l+0xa3a>
 8012c96:	4b74      	ldr	r3, [pc, #464]	; (8012e68 <_strtod_l+0xb80>)
 8012c98:	2200      	movs	r2, #0
 8012c9a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8012c9e:	9808      	ldr	r0, [sp, #32]
 8012ca0:	496e      	ldr	r1, [pc, #440]	; (8012e5c <_strtod_l+0xb74>)
 8012ca2:	ea00 0601 	and.w	r6, r0, r1
 8012ca6:	4871      	ldr	r0, [pc, #452]	; (8012e6c <_strtod_l+0xb84>)
 8012ca8:	4286      	cmp	r6, r0
 8012caa:	f040 8089 	bne.w	8012dc0 <_strtod_l+0xad8>
 8012cae:	910f      	str	r1, [sp, #60]	; 0x3c
 8012cb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012cb4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012cb8:	9908      	ldr	r1, [sp, #32]
 8012cba:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8012cbe:	ec4b ab10 	vmov	d0, sl, fp
 8012cc2:	ec43 2b1c 	vmov	d12, r2, r3
 8012cc6:	f002 f80d 	bl	8014ce4 <__ulp>
 8012cca:	ec4b ab1d 	vmov	d13, sl, fp
 8012cce:	eeac db00 	vfma.f64	d13, d12, d0
 8012cd2:	ed8d db08 	vstr	d13, [sp, #32]
 8012cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012cda:	4a65      	ldr	r2, [pc, #404]	; (8012e70 <_strtod_l+0xb88>)
 8012cdc:	4019      	ands	r1, r3
 8012cde:	4291      	cmp	r1, r2
 8012ce0:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8012ce4:	d948      	bls.n	8012d78 <_strtod_l+0xa90>
 8012ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ce8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012cec:	4293      	cmp	r3, r2
 8012cee:	d103      	bne.n	8012cf8 <_strtod_l+0xa10>
 8012cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	f43f ad27 	beq.w	8012746 <_strtod_l+0x45e>
 8012cf8:	f8df b164 	ldr.w	fp, [pc, #356]	; 8012e60 <_strtod_l+0xb78>
 8012cfc:	f04f 3aff 	mov.w	sl, #4294967295
 8012d00:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d02:	4620      	mov	r0, r4
 8012d04:	f001 fd56 	bl	80147b4 <_Bfree>
 8012d08:	4649      	mov	r1, r9
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	f001 fd52 	bl	80147b4 <_Bfree>
 8012d10:	4641      	mov	r1, r8
 8012d12:	4620      	mov	r0, r4
 8012d14:	f001 fd4e 	bl	80147b4 <_Bfree>
 8012d18:	4629      	mov	r1, r5
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	f001 fd4a 	bl	80147b4 <_Bfree>
 8012d20:	e60e      	b.n	8012940 <_strtod_l+0x658>
 8012d22:	f1ba 0f00 	cmp.w	sl, #0
 8012d26:	d113      	bne.n	8012d50 <_strtod_l+0xa68>
 8012d28:	9b08      	ldr	r3, [sp, #32]
 8012d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d2e:	b9b3      	cbnz	r3, 8012d5e <_strtod_l+0xa76>
 8012d30:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012d34:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012d40:	d401      	bmi.n	8012d46 <_strtod_l+0xa5e>
 8012d42:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012d46:	eeb1 7b48 	vneg.f64	d7, d8
 8012d4a:	ec53 2b17 	vmov	r2, r3, d7
 8012d4e:	e7a6      	b.n	8012c9e <_strtod_l+0x9b6>
 8012d50:	f1ba 0f01 	cmp.w	sl, #1
 8012d54:	d103      	bne.n	8012d5e <_strtod_l+0xa76>
 8012d56:	9b08      	ldr	r3, [sp, #32]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	f43f ad8a 	beq.w	8012872 <_strtod_l+0x58a>
 8012d5e:	2200      	movs	r2, #0
 8012d60:	4b44      	ldr	r3, [pc, #272]	; (8012e74 <_strtod_l+0xb8c>)
 8012d62:	e79a      	b.n	8012c9a <_strtod_l+0x9b2>
 8012d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d66:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012d6a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d0e9      	beq.n	8012d46 <_strtod_l+0xa5e>
 8012d72:	ec53 2b18 	vmov	r2, r3, d8
 8012d76:	e792      	b.n	8012c9e <_strtod_l+0x9b6>
 8012d78:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012d7c:	2f00      	cmp	r7, #0
 8012d7e:	d1bf      	bne.n	8012d00 <_strtod_l+0xa18>
 8012d80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012d84:	0d1b      	lsrs	r3, r3, #20
 8012d86:	051b      	lsls	r3, r3, #20
 8012d88:	429e      	cmp	r6, r3
 8012d8a:	d1b9      	bne.n	8012d00 <_strtod_l+0xa18>
 8012d8c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8012d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d92:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8012d96:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012d9a:	b92b      	cbnz	r3, 8012da8 <_strtod_l+0xac0>
 8012d9c:	f1ba 0f00 	cmp.w	sl, #0
 8012da0:	d102      	bne.n	8012da8 <_strtod_l+0xac0>
 8012da2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8012da6:	b3d2      	cbz	r2, 8012e1e <_strtod_l+0xb36>
 8012da8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012db0:	f53f acd3 	bmi.w	801275a <_strtod_l+0x472>
 8012db4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8012db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dbc:	dda0      	ble.n	8012d00 <_strtod_l+0xa18>
 8012dbe:	e4cc      	b.n	801275a <_strtod_l+0x472>
 8012dc0:	b1ef      	cbz	r7, 8012dfe <_strtod_l+0xb16>
 8012dc2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8012dc6:	d81a      	bhi.n	8012dfe <_strtod_l+0xb16>
 8012dc8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8012e50 <_strtod_l+0xb68>
 8012dcc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd4:	d810      	bhi.n	8012df8 <_strtod_l+0xb10>
 8012dd6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8012dda:	ee17 3a90 	vmov	r3, s15
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	bf08      	it	eq
 8012de2:	2301      	moveq	r3, #1
 8012de4:	ee07 3a90 	vmov	s15, r3
 8012de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dea:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8012dee:	b99b      	cbnz	r3, 8012e18 <_strtod_l+0xb30>
 8012df0:	eeb1 7b48 	vneg.f64	d7, d8
 8012df4:	ec53 2b17 	vmov	r2, r3, d7
 8012df8:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8012dfc:	1b8b      	subs	r3, r1, r6
 8012dfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012e02:	ec43 2b1c 	vmov	d12, r2, r3
 8012e06:	f001 ff6d 	bl	8014ce4 <__ulp>
 8012e0a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012e0e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8012e12:	ec5b ab17 	vmov	sl, fp, d7
 8012e16:	e7b1      	b.n	8012d7c <_strtod_l+0xa94>
 8012e18:	ec53 2b18 	vmov	r2, r3, d8
 8012e1c:	e7ec      	b.n	8012df8 <_strtod_l+0xb10>
 8012e1e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8012e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e26:	f57f af6b 	bpl.w	8012d00 <_strtod_l+0xa18>
 8012e2a:	e496      	b.n	801275a <_strtod_l+0x472>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	930d      	str	r3, [sp, #52]	; 0x34
 8012e30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e34:	6013      	str	r3, [r2, #0]
 8012e36:	f7ff ba9d 	b.w	8012374 <_strtod_l+0x8c>
 8012e3a:	2a65      	cmp	r2, #101	; 0x65
 8012e3c:	f04f 0100 	mov.w	r1, #0
 8012e40:	f43f ab97 	beq.w	8012572 <_strtod_l+0x28a>
 8012e44:	2701      	movs	r7, #1
 8012e46:	460b      	mov	r3, r1
 8012e48:	9704      	str	r7, [sp, #16]
 8012e4a:	f7ff bb0a 	b.w	8012462 <_strtod_l+0x17a>
 8012e4e:	bf00      	nop
 8012e50:	ffc00000 	.word	0xffc00000
 8012e54:	41dfffff 	.word	0x41dfffff
 8012e58:	000fffff 	.word	0x000fffff
 8012e5c:	7ff00000 	.word	0x7ff00000
 8012e60:	7fefffff 	.word	0x7fefffff
 8012e64:	39500000 	.word	0x39500000
 8012e68:	3ff00000 	.word	0x3ff00000
 8012e6c:	7fe00000 	.word	0x7fe00000
 8012e70:	7c9fffff 	.word	0x7c9fffff
 8012e74:	bff00000 	.word	0xbff00000

08012e78 <_strtod_r>:
 8012e78:	4b05      	ldr	r3, [pc, #20]	; (8012e90 <_strtod_r+0x18>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	b410      	push	{r4}
 8012e7e:	6a1b      	ldr	r3, [r3, #32]
 8012e80:	4c04      	ldr	r4, [pc, #16]	; (8012e94 <_strtod_r+0x1c>)
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	bf08      	it	eq
 8012e86:	4623      	moveq	r3, r4
 8012e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e8c:	f7ff ba2c 	b.w	80122e8 <_strtod_l>
 8012e90:	20000180 	.word	0x20000180
 8012e94:	200001e4 	.word	0x200001e4

08012e98 <_strtol_l.isra.0>:
 8012e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e9c:	4680      	mov	r8, r0
 8012e9e:	4689      	mov	r9, r1
 8012ea0:	4692      	mov	sl, r2
 8012ea2:	461e      	mov	r6, r3
 8012ea4:	460f      	mov	r7, r1
 8012ea6:	463d      	mov	r5, r7
 8012ea8:	9808      	ldr	r0, [sp, #32]
 8012eaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012eae:	f001 fbbb 	bl	8014628 <__locale_ctype_ptr_l>
 8012eb2:	4420      	add	r0, r4
 8012eb4:	7843      	ldrb	r3, [r0, #1]
 8012eb6:	f013 0308 	ands.w	r3, r3, #8
 8012eba:	d132      	bne.n	8012f22 <_strtol_l.isra.0+0x8a>
 8012ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8012ebe:	d132      	bne.n	8012f26 <_strtol_l.isra.0+0x8e>
 8012ec0:	787c      	ldrb	r4, [r7, #1]
 8012ec2:	1cbd      	adds	r5, r7, #2
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	2e00      	cmp	r6, #0
 8012ec8:	d05d      	beq.n	8012f86 <_strtol_l.isra.0+0xee>
 8012eca:	2e10      	cmp	r6, #16
 8012ecc:	d109      	bne.n	8012ee2 <_strtol_l.isra.0+0x4a>
 8012ece:	2c30      	cmp	r4, #48	; 0x30
 8012ed0:	d107      	bne.n	8012ee2 <_strtol_l.isra.0+0x4a>
 8012ed2:	782b      	ldrb	r3, [r5, #0]
 8012ed4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012ed8:	2b58      	cmp	r3, #88	; 0x58
 8012eda:	d14f      	bne.n	8012f7c <_strtol_l.isra.0+0xe4>
 8012edc:	786c      	ldrb	r4, [r5, #1]
 8012ede:	2610      	movs	r6, #16
 8012ee0:	3502      	adds	r5, #2
 8012ee2:	2a00      	cmp	r2, #0
 8012ee4:	bf14      	ite	ne
 8012ee6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012eea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012eee:	2700      	movs	r7, #0
 8012ef0:	fbb1 fcf6 	udiv	ip, r1, r6
 8012ef4:	4638      	mov	r0, r7
 8012ef6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012efa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012efe:	2b09      	cmp	r3, #9
 8012f00:	d817      	bhi.n	8012f32 <_strtol_l.isra.0+0x9a>
 8012f02:	461c      	mov	r4, r3
 8012f04:	42a6      	cmp	r6, r4
 8012f06:	dd23      	ble.n	8012f50 <_strtol_l.isra.0+0xb8>
 8012f08:	1c7b      	adds	r3, r7, #1
 8012f0a:	d007      	beq.n	8012f1c <_strtol_l.isra.0+0x84>
 8012f0c:	4584      	cmp	ip, r0
 8012f0e:	d31c      	bcc.n	8012f4a <_strtol_l.isra.0+0xb2>
 8012f10:	d101      	bne.n	8012f16 <_strtol_l.isra.0+0x7e>
 8012f12:	45a6      	cmp	lr, r4
 8012f14:	db19      	blt.n	8012f4a <_strtol_l.isra.0+0xb2>
 8012f16:	fb00 4006 	mla	r0, r0, r6, r4
 8012f1a:	2701      	movs	r7, #1
 8012f1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f20:	e7eb      	b.n	8012efa <_strtol_l.isra.0+0x62>
 8012f22:	462f      	mov	r7, r5
 8012f24:	e7bf      	b.n	8012ea6 <_strtol_l.isra.0+0xe>
 8012f26:	2c2b      	cmp	r4, #43	; 0x2b
 8012f28:	bf04      	itt	eq
 8012f2a:	1cbd      	addeq	r5, r7, #2
 8012f2c:	787c      	ldrbeq	r4, [r7, #1]
 8012f2e:	461a      	mov	r2, r3
 8012f30:	e7c9      	b.n	8012ec6 <_strtol_l.isra.0+0x2e>
 8012f32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012f36:	2b19      	cmp	r3, #25
 8012f38:	d801      	bhi.n	8012f3e <_strtol_l.isra.0+0xa6>
 8012f3a:	3c37      	subs	r4, #55	; 0x37
 8012f3c:	e7e2      	b.n	8012f04 <_strtol_l.isra.0+0x6c>
 8012f3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012f42:	2b19      	cmp	r3, #25
 8012f44:	d804      	bhi.n	8012f50 <_strtol_l.isra.0+0xb8>
 8012f46:	3c57      	subs	r4, #87	; 0x57
 8012f48:	e7dc      	b.n	8012f04 <_strtol_l.isra.0+0x6c>
 8012f4a:	f04f 37ff 	mov.w	r7, #4294967295
 8012f4e:	e7e5      	b.n	8012f1c <_strtol_l.isra.0+0x84>
 8012f50:	1c7b      	adds	r3, r7, #1
 8012f52:	d108      	bne.n	8012f66 <_strtol_l.isra.0+0xce>
 8012f54:	2322      	movs	r3, #34	; 0x22
 8012f56:	f8c8 3000 	str.w	r3, [r8]
 8012f5a:	4608      	mov	r0, r1
 8012f5c:	f1ba 0f00 	cmp.w	sl, #0
 8012f60:	d107      	bne.n	8012f72 <_strtol_l.isra.0+0xda>
 8012f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f66:	b102      	cbz	r2, 8012f6a <_strtol_l.isra.0+0xd2>
 8012f68:	4240      	negs	r0, r0
 8012f6a:	f1ba 0f00 	cmp.w	sl, #0
 8012f6e:	d0f8      	beq.n	8012f62 <_strtol_l.isra.0+0xca>
 8012f70:	b10f      	cbz	r7, 8012f76 <_strtol_l.isra.0+0xde>
 8012f72:	f105 39ff 	add.w	r9, r5, #4294967295
 8012f76:	f8ca 9000 	str.w	r9, [sl]
 8012f7a:	e7f2      	b.n	8012f62 <_strtol_l.isra.0+0xca>
 8012f7c:	2430      	movs	r4, #48	; 0x30
 8012f7e:	2e00      	cmp	r6, #0
 8012f80:	d1af      	bne.n	8012ee2 <_strtol_l.isra.0+0x4a>
 8012f82:	2608      	movs	r6, #8
 8012f84:	e7ad      	b.n	8012ee2 <_strtol_l.isra.0+0x4a>
 8012f86:	2c30      	cmp	r4, #48	; 0x30
 8012f88:	d0a3      	beq.n	8012ed2 <_strtol_l.isra.0+0x3a>
 8012f8a:	260a      	movs	r6, #10
 8012f8c:	e7a9      	b.n	8012ee2 <_strtol_l.isra.0+0x4a>
	...

08012f90 <_strtol_r>:
 8012f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f92:	4c06      	ldr	r4, [pc, #24]	; (8012fac <_strtol_r+0x1c>)
 8012f94:	4d06      	ldr	r5, [pc, #24]	; (8012fb0 <_strtol_r+0x20>)
 8012f96:	6824      	ldr	r4, [r4, #0]
 8012f98:	6a24      	ldr	r4, [r4, #32]
 8012f9a:	2c00      	cmp	r4, #0
 8012f9c:	bf08      	it	eq
 8012f9e:	462c      	moveq	r4, r5
 8012fa0:	9400      	str	r4, [sp, #0]
 8012fa2:	f7ff ff79 	bl	8012e98 <_strtol_l.isra.0>
 8012fa6:	b003      	add	sp, #12
 8012fa8:	bd30      	pop	{r4, r5, pc}
 8012faa:	bf00      	nop
 8012fac:	20000180 	.word	0x20000180
 8012fb0:	200001e4 	.word	0x200001e4

08012fb4 <__swbuf_r>:
 8012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb6:	460e      	mov	r6, r1
 8012fb8:	4614      	mov	r4, r2
 8012fba:	4605      	mov	r5, r0
 8012fbc:	b118      	cbz	r0, 8012fc6 <__swbuf_r+0x12>
 8012fbe:	6983      	ldr	r3, [r0, #24]
 8012fc0:	b90b      	cbnz	r3, 8012fc6 <__swbuf_r+0x12>
 8012fc2:	f000 ff81 	bl	8013ec8 <__sinit>
 8012fc6:	4b21      	ldr	r3, [pc, #132]	; (801304c <__swbuf_r+0x98>)
 8012fc8:	429c      	cmp	r4, r3
 8012fca:	d12a      	bne.n	8013022 <__swbuf_r+0x6e>
 8012fcc:	686c      	ldr	r4, [r5, #4]
 8012fce:	69a3      	ldr	r3, [r4, #24]
 8012fd0:	60a3      	str	r3, [r4, #8]
 8012fd2:	89a3      	ldrh	r3, [r4, #12]
 8012fd4:	071a      	lsls	r2, r3, #28
 8012fd6:	d52e      	bpl.n	8013036 <__swbuf_r+0x82>
 8012fd8:	6923      	ldr	r3, [r4, #16]
 8012fda:	b363      	cbz	r3, 8013036 <__swbuf_r+0x82>
 8012fdc:	6923      	ldr	r3, [r4, #16]
 8012fde:	6820      	ldr	r0, [r4, #0]
 8012fe0:	1ac0      	subs	r0, r0, r3
 8012fe2:	6963      	ldr	r3, [r4, #20]
 8012fe4:	b2f6      	uxtb	r6, r6
 8012fe6:	4283      	cmp	r3, r0
 8012fe8:	4637      	mov	r7, r6
 8012fea:	dc04      	bgt.n	8012ff6 <__swbuf_r+0x42>
 8012fec:	4621      	mov	r1, r4
 8012fee:	4628      	mov	r0, r5
 8012ff0:	f000 ff00 	bl	8013df4 <_fflush_r>
 8012ff4:	bb28      	cbnz	r0, 8013042 <__swbuf_r+0x8e>
 8012ff6:	68a3      	ldr	r3, [r4, #8]
 8012ff8:	3b01      	subs	r3, #1
 8012ffa:	60a3      	str	r3, [r4, #8]
 8012ffc:	6823      	ldr	r3, [r4, #0]
 8012ffe:	1c5a      	adds	r2, r3, #1
 8013000:	6022      	str	r2, [r4, #0]
 8013002:	701e      	strb	r6, [r3, #0]
 8013004:	6963      	ldr	r3, [r4, #20]
 8013006:	3001      	adds	r0, #1
 8013008:	4283      	cmp	r3, r0
 801300a:	d004      	beq.n	8013016 <__swbuf_r+0x62>
 801300c:	89a3      	ldrh	r3, [r4, #12]
 801300e:	07db      	lsls	r3, r3, #31
 8013010:	d519      	bpl.n	8013046 <__swbuf_r+0x92>
 8013012:	2e0a      	cmp	r6, #10
 8013014:	d117      	bne.n	8013046 <__swbuf_r+0x92>
 8013016:	4621      	mov	r1, r4
 8013018:	4628      	mov	r0, r5
 801301a:	f000 feeb 	bl	8013df4 <_fflush_r>
 801301e:	b190      	cbz	r0, 8013046 <__swbuf_r+0x92>
 8013020:	e00f      	b.n	8013042 <__swbuf_r+0x8e>
 8013022:	4b0b      	ldr	r3, [pc, #44]	; (8013050 <__swbuf_r+0x9c>)
 8013024:	429c      	cmp	r4, r3
 8013026:	d101      	bne.n	801302c <__swbuf_r+0x78>
 8013028:	68ac      	ldr	r4, [r5, #8]
 801302a:	e7d0      	b.n	8012fce <__swbuf_r+0x1a>
 801302c:	4b09      	ldr	r3, [pc, #36]	; (8013054 <__swbuf_r+0xa0>)
 801302e:	429c      	cmp	r4, r3
 8013030:	bf08      	it	eq
 8013032:	68ec      	ldreq	r4, [r5, #12]
 8013034:	e7cb      	b.n	8012fce <__swbuf_r+0x1a>
 8013036:	4621      	mov	r1, r4
 8013038:	4628      	mov	r0, r5
 801303a:	f000 f80d 	bl	8013058 <__swsetup_r>
 801303e:	2800      	cmp	r0, #0
 8013040:	d0cc      	beq.n	8012fdc <__swbuf_r+0x28>
 8013042:	f04f 37ff 	mov.w	r7, #4294967295
 8013046:	4638      	mov	r0, r7
 8013048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801304a:	bf00      	nop
 801304c:	08016438 	.word	0x08016438
 8013050:	08016458 	.word	0x08016458
 8013054:	08016418 	.word	0x08016418

08013058 <__swsetup_r>:
 8013058:	4b32      	ldr	r3, [pc, #200]	; (8013124 <__swsetup_r+0xcc>)
 801305a:	b570      	push	{r4, r5, r6, lr}
 801305c:	681d      	ldr	r5, [r3, #0]
 801305e:	4606      	mov	r6, r0
 8013060:	460c      	mov	r4, r1
 8013062:	b125      	cbz	r5, 801306e <__swsetup_r+0x16>
 8013064:	69ab      	ldr	r3, [r5, #24]
 8013066:	b913      	cbnz	r3, 801306e <__swsetup_r+0x16>
 8013068:	4628      	mov	r0, r5
 801306a:	f000 ff2d 	bl	8013ec8 <__sinit>
 801306e:	4b2e      	ldr	r3, [pc, #184]	; (8013128 <__swsetup_r+0xd0>)
 8013070:	429c      	cmp	r4, r3
 8013072:	d10f      	bne.n	8013094 <__swsetup_r+0x3c>
 8013074:	686c      	ldr	r4, [r5, #4]
 8013076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801307a:	b29a      	uxth	r2, r3
 801307c:	0715      	lsls	r5, r2, #28
 801307e:	d42c      	bmi.n	80130da <__swsetup_r+0x82>
 8013080:	06d0      	lsls	r0, r2, #27
 8013082:	d411      	bmi.n	80130a8 <__swsetup_r+0x50>
 8013084:	2209      	movs	r2, #9
 8013086:	6032      	str	r2, [r6, #0]
 8013088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801308c:	81a3      	strh	r3, [r4, #12]
 801308e:	f04f 30ff 	mov.w	r0, #4294967295
 8013092:	e03e      	b.n	8013112 <__swsetup_r+0xba>
 8013094:	4b25      	ldr	r3, [pc, #148]	; (801312c <__swsetup_r+0xd4>)
 8013096:	429c      	cmp	r4, r3
 8013098:	d101      	bne.n	801309e <__swsetup_r+0x46>
 801309a:	68ac      	ldr	r4, [r5, #8]
 801309c:	e7eb      	b.n	8013076 <__swsetup_r+0x1e>
 801309e:	4b24      	ldr	r3, [pc, #144]	; (8013130 <__swsetup_r+0xd8>)
 80130a0:	429c      	cmp	r4, r3
 80130a2:	bf08      	it	eq
 80130a4:	68ec      	ldreq	r4, [r5, #12]
 80130a6:	e7e6      	b.n	8013076 <__swsetup_r+0x1e>
 80130a8:	0751      	lsls	r1, r2, #29
 80130aa:	d512      	bpl.n	80130d2 <__swsetup_r+0x7a>
 80130ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130ae:	b141      	cbz	r1, 80130c2 <__swsetup_r+0x6a>
 80130b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130b4:	4299      	cmp	r1, r3
 80130b6:	d002      	beq.n	80130be <__swsetup_r+0x66>
 80130b8:	4630      	mov	r0, r6
 80130ba:	f001 ff55 	bl	8014f68 <_free_r>
 80130be:	2300      	movs	r3, #0
 80130c0:	6363      	str	r3, [r4, #52]	; 0x34
 80130c2:	89a3      	ldrh	r3, [r4, #12]
 80130c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80130c8:	81a3      	strh	r3, [r4, #12]
 80130ca:	2300      	movs	r3, #0
 80130cc:	6063      	str	r3, [r4, #4]
 80130ce:	6923      	ldr	r3, [r4, #16]
 80130d0:	6023      	str	r3, [r4, #0]
 80130d2:	89a3      	ldrh	r3, [r4, #12]
 80130d4:	f043 0308 	orr.w	r3, r3, #8
 80130d8:	81a3      	strh	r3, [r4, #12]
 80130da:	6923      	ldr	r3, [r4, #16]
 80130dc:	b94b      	cbnz	r3, 80130f2 <__swsetup_r+0x9a>
 80130de:	89a3      	ldrh	r3, [r4, #12]
 80130e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80130e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130e8:	d003      	beq.n	80130f2 <__swsetup_r+0x9a>
 80130ea:	4621      	mov	r1, r4
 80130ec:	4630      	mov	r0, r6
 80130ee:	f001 fad3 	bl	8014698 <__smakebuf_r>
 80130f2:	89a2      	ldrh	r2, [r4, #12]
 80130f4:	f012 0301 	ands.w	r3, r2, #1
 80130f8:	d00c      	beq.n	8013114 <__swsetup_r+0xbc>
 80130fa:	2300      	movs	r3, #0
 80130fc:	60a3      	str	r3, [r4, #8]
 80130fe:	6963      	ldr	r3, [r4, #20]
 8013100:	425b      	negs	r3, r3
 8013102:	61a3      	str	r3, [r4, #24]
 8013104:	6923      	ldr	r3, [r4, #16]
 8013106:	b953      	cbnz	r3, 801311e <__swsetup_r+0xc6>
 8013108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801310c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013110:	d1ba      	bne.n	8013088 <__swsetup_r+0x30>
 8013112:	bd70      	pop	{r4, r5, r6, pc}
 8013114:	0792      	lsls	r2, r2, #30
 8013116:	bf58      	it	pl
 8013118:	6963      	ldrpl	r3, [r4, #20]
 801311a:	60a3      	str	r3, [r4, #8]
 801311c:	e7f2      	b.n	8013104 <__swsetup_r+0xac>
 801311e:	2000      	movs	r0, #0
 8013120:	e7f7      	b.n	8013112 <__swsetup_r+0xba>
 8013122:	bf00      	nop
 8013124:	20000180 	.word	0x20000180
 8013128:	08016438 	.word	0x08016438
 801312c:	08016458 	.word	0x08016458
 8013130:	08016418 	.word	0x08016418

08013134 <quorem>:
 8013134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013138:	6903      	ldr	r3, [r0, #16]
 801313a:	690c      	ldr	r4, [r1, #16]
 801313c:	42a3      	cmp	r3, r4
 801313e:	4680      	mov	r8, r0
 8013140:	f2c0 8082 	blt.w	8013248 <quorem+0x114>
 8013144:	3c01      	subs	r4, #1
 8013146:	f101 0714 	add.w	r7, r1, #20
 801314a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801314e:	f100 0614 	add.w	r6, r0, #20
 8013152:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013156:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801315a:	eb06 030c 	add.w	r3, r6, ip
 801315e:	3501      	adds	r5, #1
 8013160:	eb07 090c 	add.w	r9, r7, ip
 8013164:	9301      	str	r3, [sp, #4]
 8013166:	fbb0 f5f5 	udiv	r5, r0, r5
 801316a:	b395      	cbz	r5, 80131d2 <quorem+0x9e>
 801316c:	f04f 0a00 	mov.w	sl, #0
 8013170:	4638      	mov	r0, r7
 8013172:	46b6      	mov	lr, r6
 8013174:	46d3      	mov	fp, sl
 8013176:	f850 2b04 	ldr.w	r2, [r0], #4
 801317a:	b293      	uxth	r3, r2
 801317c:	fb05 a303 	mla	r3, r5, r3, sl
 8013180:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013184:	b29b      	uxth	r3, r3
 8013186:	ebab 0303 	sub.w	r3, fp, r3
 801318a:	0c12      	lsrs	r2, r2, #16
 801318c:	f8de b000 	ldr.w	fp, [lr]
 8013190:	fb05 a202 	mla	r2, r5, r2, sl
 8013194:	fa13 f38b 	uxtah	r3, r3, fp
 8013198:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801319c:	fa1f fb82 	uxth.w	fp, r2
 80131a0:	f8de 2000 	ldr.w	r2, [lr]
 80131a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80131a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131ac:	b29b      	uxth	r3, r3
 80131ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131b2:	4581      	cmp	r9, r0
 80131b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80131b8:	f84e 3b04 	str.w	r3, [lr], #4
 80131bc:	d2db      	bcs.n	8013176 <quorem+0x42>
 80131be:	f856 300c 	ldr.w	r3, [r6, ip]
 80131c2:	b933      	cbnz	r3, 80131d2 <quorem+0x9e>
 80131c4:	9b01      	ldr	r3, [sp, #4]
 80131c6:	3b04      	subs	r3, #4
 80131c8:	429e      	cmp	r6, r3
 80131ca:	461a      	mov	r2, r3
 80131cc:	d330      	bcc.n	8013230 <quorem+0xfc>
 80131ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80131d2:	4640      	mov	r0, r8
 80131d4:	f001 fd0e 	bl	8014bf4 <__mcmp>
 80131d8:	2800      	cmp	r0, #0
 80131da:	db25      	blt.n	8013228 <quorem+0xf4>
 80131dc:	3501      	adds	r5, #1
 80131de:	4630      	mov	r0, r6
 80131e0:	f04f 0c00 	mov.w	ip, #0
 80131e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80131e8:	f8d0 e000 	ldr.w	lr, [r0]
 80131ec:	b293      	uxth	r3, r2
 80131ee:	ebac 0303 	sub.w	r3, ip, r3
 80131f2:	0c12      	lsrs	r2, r2, #16
 80131f4:	fa13 f38e 	uxtah	r3, r3, lr
 80131f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80131fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013200:	b29b      	uxth	r3, r3
 8013202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013206:	45b9      	cmp	r9, r7
 8013208:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801320c:	f840 3b04 	str.w	r3, [r0], #4
 8013210:	d2e8      	bcs.n	80131e4 <quorem+0xb0>
 8013212:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013216:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801321a:	b92a      	cbnz	r2, 8013228 <quorem+0xf4>
 801321c:	3b04      	subs	r3, #4
 801321e:	429e      	cmp	r6, r3
 8013220:	461a      	mov	r2, r3
 8013222:	d30b      	bcc.n	801323c <quorem+0x108>
 8013224:	f8c8 4010 	str.w	r4, [r8, #16]
 8013228:	4628      	mov	r0, r5
 801322a:	b003      	add	sp, #12
 801322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013230:	6812      	ldr	r2, [r2, #0]
 8013232:	3b04      	subs	r3, #4
 8013234:	2a00      	cmp	r2, #0
 8013236:	d1ca      	bne.n	80131ce <quorem+0x9a>
 8013238:	3c01      	subs	r4, #1
 801323a:	e7c5      	b.n	80131c8 <quorem+0x94>
 801323c:	6812      	ldr	r2, [r2, #0]
 801323e:	3b04      	subs	r3, #4
 8013240:	2a00      	cmp	r2, #0
 8013242:	d1ef      	bne.n	8013224 <quorem+0xf0>
 8013244:	3c01      	subs	r4, #1
 8013246:	e7ea      	b.n	801321e <quorem+0xea>
 8013248:	2000      	movs	r0, #0
 801324a:	e7ee      	b.n	801322a <quorem+0xf6>
 801324c:	0000      	movs	r0, r0
	...

08013250 <_dtoa_r>:
 8013250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013254:	ec57 6b10 	vmov	r6, r7, d0
 8013258:	b095      	sub	sp, #84	; 0x54
 801325a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801325c:	9108      	str	r1, [sp, #32]
 801325e:	4604      	mov	r4, r0
 8013260:	920a      	str	r2, [sp, #40]	; 0x28
 8013262:	9311      	str	r3, [sp, #68]	; 0x44
 8013264:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8013268:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801326c:	b93d      	cbnz	r5, 801327e <_dtoa_r+0x2e>
 801326e:	2010      	movs	r0, #16
 8013270:	f001 fa52 	bl	8014718 <malloc>
 8013274:	6260      	str	r0, [r4, #36]	; 0x24
 8013276:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801327a:	6005      	str	r5, [r0, #0]
 801327c:	60c5      	str	r5, [r0, #12]
 801327e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013280:	6819      	ldr	r1, [r3, #0]
 8013282:	b151      	cbz	r1, 801329a <_dtoa_r+0x4a>
 8013284:	685a      	ldr	r2, [r3, #4]
 8013286:	604a      	str	r2, [r1, #4]
 8013288:	2301      	movs	r3, #1
 801328a:	4093      	lsls	r3, r2
 801328c:	608b      	str	r3, [r1, #8]
 801328e:	4620      	mov	r0, r4
 8013290:	f001 fa90 	bl	80147b4 <_Bfree>
 8013294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013296:	2200      	movs	r2, #0
 8013298:	601a      	str	r2, [r3, #0]
 801329a:	1e3b      	subs	r3, r7, #0
 801329c:	bfb9      	ittee	lt
 801329e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80132a2:	9303      	strlt	r3, [sp, #12]
 80132a4:	2300      	movge	r3, #0
 80132a6:	f8c8 3000 	strge.w	r3, [r8]
 80132aa:	9d03      	ldr	r5, [sp, #12]
 80132ac:	4bac      	ldr	r3, [pc, #688]	; (8013560 <_dtoa_r+0x310>)
 80132ae:	bfbc      	itt	lt
 80132b0:	2201      	movlt	r2, #1
 80132b2:	f8c8 2000 	strlt.w	r2, [r8]
 80132b6:	43ab      	bics	r3, r5
 80132b8:	d11b      	bne.n	80132f2 <_dtoa_r+0xa2>
 80132ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80132bc:	f242 730f 	movw	r3, #9999	; 0x270f
 80132c0:	6013      	str	r3, [r2, #0]
 80132c2:	9b02      	ldr	r3, [sp, #8]
 80132c4:	b923      	cbnz	r3, 80132d0 <_dtoa_r+0x80>
 80132c6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80132ca:	2d00      	cmp	r5, #0
 80132cc:	f000 84dd 	beq.w	8013c8a <_dtoa_r+0xa3a>
 80132d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80132d2:	b953      	cbnz	r3, 80132ea <_dtoa_r+0x9a>
 80132d4:	4ba3      	ldr	r3, [pc, #652]	; (8013564 <_dtoa_r+0x314>)
 80132d6:	e020      	b.n	801331a <_dtoa_r+0xca>
 80132d8:	4ba3      	ldr	r3, [pc, #652]	; (8013568 <_dtoa_r+0x318>)
 80132da:	9304      	str	r3, [sp, #16]
 80132dc:	3308      	adds	r3, #8
 80132de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80132e0:	6013      	str	r3, [r2, #0]
 80132e2:	9804      	ldr	r0, [sp, #16]
 80132e4:	b015      	add	sp, #84	; 0x54
 80132e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ea:	4b9e      	ldr	r3, [pc, #632]	; (8013564 <_dtoa_r+0x314>)
 80132ec:	9304      	str	r3, [sp, #16]
 80132ee:	3303      	adds	r3, #3
 80132f0:	e7f5      	b.n	80132de <_dtoa_r+0x8e>
 80132f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80132fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013302:	d10c      	bne.n	801331e <_dtoa_r+0xce>
 8013304:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013306:	2301      	movs	r3, #1
 8013308:	6013      	str	r3, [r2, #0]
 801330a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801330c:	2b00      	cmp	r3, #0
 801330e:	f000 84b9 	beq.w	8013c84 <_dtoa_r+0xa34>
 8013312:	4b96      	ldr	r3, [pc, #600]	; (801356c <_dtoa_r+0x31c>)
 8013314:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013316:	6013      	str	r3, [r2, #0]
 8013318:	3b01      	subs	r3, #1
 801331a:	9304      	str	r3, [sp, #16]
 801331c:	e7e1      	b.n	80132e2 <_dtoa_r+0x92>
 801331e:	a913      	add	r1, sp, #76	; 0x4c
 8013320:	aa12      	add	r2, sp, #72	; 0x48
 8013322:	ed9d 0b04 	vldr	d0, [sp, #16]
 8013326:	4620      	mov	r0, r4
 8013328:	f001 fd52 	bl	8014dd0 <__d2b>
 801332c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8013330:	9001      	str	r0, [sp, #4]
 8013332:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013334:	2e00      	cmp	r6, #0
 8013336:	d046      	beq.n	80133c6 <_dtoa_r+0x176>
 8013338:	9805      	ldr	r0, [sp, #20]
 801333a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801333e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013342:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8013346:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801334a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801334e:	2700      	movs	r7, #0
 8013350:	ee07 aa90 	vmov	s15, sl
 8013354:	ec43 2b16 	vmov	d6, r2, r3
 8013358:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801335c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8013548 <_dtoa_r+0x2f8>
 8013360:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013364:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013368:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8013550 <_dtoa_r+0x300>
 801336c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8013370:	eeb0 7b46 	vmov.f64	d7, d6
 8013374:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8013558 <_dtoa_r+0x308>
 8013378:	eea5 7b06 	vfma.f64	d7, d5, d6
 801337c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013380:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013388:	ee16 ba90 	vmov	fp, s13
 801338c:	d508      	bpl.n	80133a0 <_dtoa_r+0x150>
 801338e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013392:	eeb4 6b47 	vcmp.f64	d6, d7
 8013396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339a:	bf18      	it	ne
 801339c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80133a0:	f1bb 0f16 	cmp.w	fp, #22
 80133a4:	d834      	bhi.n	8013410 <_dtoa_r+0x1c0>
 80133a6:	4b72      	ldr	r3, [pc, #456]	; (8013570 <_dtoa_r+0x320>)
 80133a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80133ac:	ed93 7b00 	vldr	d7, [r3]
 80133b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80133b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80133b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133bc:	dd01      	ble.n	80133c2 <_dtoa_r+0x172>
 80133be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80133c2:	2300      	movs	r3, #0
 80133c4:	e025      	b.n	8013412 <_dtoa_r+0x1c2>
 80133c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133c8:	eb01 0a03 	add.w	sl, r1, r3
 80133cc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80133d0:	2b20      	cmp	r3, #32
 80133d2:	dd17      	ble.n	8013404 <_dtoa_r+0x1b4>
 80133d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80133d8:	9a02      	ldr	r2, [sp, #8]
 80133da:	409d      	lsls	r5, r3
 80133dc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80133e0:	fa22 f303 	lsr.w	r3, r2, r3
 80133e4:	432b      	orrs	r3, r5
 80133e6:	ee07 3a90 	vmov	s15, r3
 80133ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80133ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80133f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80133f6:	9805      	ldr	r0, [sp, #20]
 80133f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133fc:	2701      	movs	r7, #1
 80133fe:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8013402:	e7a5      	b.n	8013350 <_dtoa_r+0x100>
 8013404:	9a02      	ldr	r2, [sp, #8]
 8013406:	f1c3 0320 	rsb	r3, r3, #32
 801340a:	fa02 f303 	lsl.w	r3, r2, r3
 801340e:	e7ea      	b.n	80133e6 <_dtoa_r+0x196>
 8013410:	2301      	movs	r3, #1
 8013412:	eba1 0a0a 	sub.w	sl, r1, sl
 8013416:	9310      	str	r3, [sp, #64]	; 0x40
 8013418:	f1ba 0301 	subs.w	r3, sl, #1
 801341c:	9307      	str	r3, [sp, #28]
 801341e:	bf43      	ittte	mi
 8013420:	2300      	movmi	r3, #0
 8013422:	f1ca 0a01 	rsbmi	sl, sl, #1
 8013426:	9307      	strmi	r3, [sp, #28]
 8013428:	f04f 0a00 	movpl.w	sl, #0
 801342c:	f1bb 0f00 	cmp.w	fp, #0
 8013430:	db19      	blt.n	8013466 <_dtoa_r+0x216>
 8013432:	9b07      	ldr	r3, [sp, #28]
 8013434:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013438:	445b      	add	r3, fp
 801343a:	9307      	str	r3, [sp, #28]
 801343c:	f04f 0800 	mov.w	r8, #0
 8013440:	9b08      	ldr	r3, [sp, #32]
 8013442:	2b09      	cmp	r3, #9
 8013444:	d866      	bhi.n	8013514 <_dtoa_r+0x2c4>
 8013446:	2b05      	cmp	r3, #5
 8013448:	bfc4      	itt	gt
 801344a:	3b04      	subgt	r3, #4
 801344c:	9308      	strgt	r3, [sp, #32]
 801344e:	9b08      	ldr	r3, [sp, #32]
 8013450:	f1a3 0302 	sub.w	r3, r3, #2
 8013454:	bfcc      	ite	gt
 8013456:	2500      	movgt	r5, #0
 8013458:	2501      	movle	r5, #1
 801345a:	2b03      	cmp	r3, #3
 801345c:	d866      	bhi.n	801352c <_dtoa_r+0x2dc>
 801345e:	e8df f003 	tbb	[pc, r3]
 8013462:	5755      	.short	0x5755
 8013464:	4909      	.short	0x4909
 8013466:	2300      	movs	r3, #0
 8013468:	ebaa 0a0b 	sub.w	sl, sl, fp
 801346c:	f1cb 0800 	rsb	r8, fp, #0
 8013470:	930b      	str	r3, [sp, #44]	; 0x2c
 8013472:	e7e5      	b.n	8013440 <_dtoa_r+0x1f0>
 8013474:	2301      	movs	r3, #1
 8013476:	9309      	str	r3, [sp, #36]	; 0x24
 8013478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801347a:	2b00      	cmp	r3, #0
 801347c:	dd59      	ble.n	8013532 <_dtoa_r+0x2e2>
 801347e:	9306      	str	r3, [sp, #24]
 8013480:	4699      	mov	r9, r3
 8013482:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013484:	2200      	movs	r2, #0
 8013486:	6072      	str	r2, [r6, #4]
 8013488:	2204      	movs	r2, #4
 801348a:	f102 0014 	add.w	r0, r2, #20
 801348e:	4298      	cmp	r0, r3
 8013490:	6871      	ldr	r1, [r6, #4]
 8013492:	d953      	bls.n	801353c <_dtoa_r+0x2ec>
 8013494:	4620      	mov	r0, r4
 8013496:	f001 f959 	bl	801474c <_Balloc>
 801349a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801349c:	6030      	str	r0, [r6, #0]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	9304      	str	r3, [sp, #16]
 80134a2:	f1b9 0f0e 	cmp.w	r9, #14
 80134a6:	f200 80c2 	bhi.w	801362e <_dtoa_r+0x3de>
 80134aa:	2d00      	cmp	r5, #0
 80134ac:	f000 80bf 	beq.w	801362e <_dtoa_r+0x3de>
 80134b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80134b4:	f1bb 0f00 	cmp.w	fp, #0
 80134b8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80134bc:	f340 80e6 	ble.w	801368c <_dtoa_r+0x43c>
 80134c0:	4a2b      	ldr	r2, [pc, #172]	; (8013570 <_dtoa_r+0x320>)
 80134c2:	f00b 030f 	and.w	r3, fp, #15
 80134c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80134ca:	ed93 7b00 	vldr	d7, [r3]
 80134ce:	ea4f 132b 	mov.w	r3, fp, asr #4
 80134d2:	06da      	lsls	r2, r3, #27
 80134d4:	f140 80d8 	bpl.w	8013688 <_dtoa_r+0x438>
 80134d8:	4a26      	ldr	r2, [pc, #152]	; (8013574 <_dtoa_r+0x324>)
 80134da:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80134de:	ed92 6b08 	vldr	d6, [r2, #32]
 80134e2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80134e6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80134ea:	f003 030f 	and.w	r3, r3, #15
 80134ee:	2203      	movs	r2, #3
 80134f0:	4920      	ldr	r1, [pc, #128]	; (8013574 <_dtoa_r+0x324>)
 80134f2:	e04a      	b.n	801358a <_dtoa_r+0x33a>
 80134f4:	2301      	movs	r3, #1
 80134f6:	9309      	str	r3, [sp, #36]	; 0x24
 80134f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134fa:	445b      	add	r3, fp
 80134fc:	f103 0901 	add.w	r9, r3, #1
 8013500:	9306      	str	r3, [sp, #24]
 8013502:	464b      	mov	r3, r9
 8013504:	2b01      	cmp	r3, #1
 8013506:	bfb8      	it	lt
 8013508:	2301      	movlt	r3, #1
 801350a:	e7ba      	b.n	8013482 <_dtoa_r+0x232>
 801350c:	2300      	movs	r3, #0
 801350e:	e7b2      	b.n	8013476 <_dtoa_r+0x226>
 8013510:	2300      	movs	r3, #0
 8013512:	e7f0      	b.n	80134f6 <_dtoa_r+0x2a6>
 8013514:	2501      	movs	r5, #1
 8013516:	2300      	movs	r3, #0
 8013518:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801351c:	f04f 33ff 	mov.w	r3, #4294967295
 8013520:	9306      	str	r3, [sp, #24]
 8013522:	4699      	mov	r9, r3
 8013524:	2200      	movs	r2, #0
 8013526:	2312      	movs	r3, #18
 8013528:	920a      	str	r2, [sp, #40]	; 0x28
 801352a:	e7aa      	b.n	8013482 <_dtoa_r+0x232>
 801352c:	2301      	movs	r3, #1
 801352e:	9309      	str	r3, [sp, #36]	; 0x24
 8013530:	e7f4      	b.n	801351c <_dtoa_r+0x2cc>
 8013532:	2301      	movs	r3, #1
 8013534:	9306      	str	r3, [sp, #24]
 8013536:	4699      	mov	r9, r3
 8013538:	461a      	mov	r2, r3
 801353a:	e7f5      	b.n	8013528 <_dtoa_r+0x2d8>
 801353c:	3101      	adds	r1, #1
 801353e:	6071      	str	r1, [r6, #4]
 8013540:	0052      	lsls	r2, r2, #1
 8013542:	e7a2      	b.n	801348a <_dtoa_r+0x23a>
 8013544:	f3af 8000 	nop.w
 8013548:	636f4361 	.word	0x636f4361
 801354c:	3fd287a7 	.word	0x3fd287a7
 8013550:	8b60c8b3 	.word	0x8b60c8b3
 8013554:	3fc68a28 	.word	0x3fc68a28
 8013558:	509f79fb 	.word	0x509f79fb
 801355c:	3fd34413 	.word	0x3fd34413
 8013560:	7ff00000 	.word	0x7ff00000
 8013564:	08016411 	.word	0x08016411
 8013568:	08016408 	.word	0x08016408
 801356c:	08016389 	.word	0x08016389
 8013570:	080164b0 	.word	0x080164b0
 8013574:	08016488 	.word	0x08016488
 8013578:	07de      	lsls	r6, r3, #31
 801357a:	d504      	bpl.n	8013586 <_dtoa_r+0x336>
 801357c:	ed91 6b00 	vldr	d6, [r1]
 8013580:	3201      	adds	r2, #1
 8013582:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013586:	105b      	asrs	r3, r3, #1
 8013588:	3108      	adds	r1, #8
 801358a:	2b00      	cmp	r3, #0
 801358c:	d1f4      	bne.n	8013578 <_dtoa_r+0x328>
 801358e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013592:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013596:	ed8d 7b02 	vstr	d7, [sp, #8]
 801359a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801359c:	2b00      	cmp	r3, #0
 801359e:	f000 80a7 	beq.w	80136f0 <_dtoa_r+0x4a0>
 80135a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80135a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80135ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b2:	f140 809d 	bpl.w	80136f0 <_dtoa_r+0x4a0>
 80135b6:	f1b9 0f00 	cmp.w	r9, #0
 80135ba:	f000 8099 	beq.w	80136f0 <_dtoa_r+0x4a0>
 80135be:	9b06      	ldr	r3, [sp, #24]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	dd30      	ble.n	8013626 <_dtoa_r+0x3d6>
 80135c4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80135c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80135cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80135d0:	9d06      	ldr	r5, [sp, #24]
 80135d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80135d6:	3201      	adds	r2, #1
 80135d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80135dc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80135e0:	ee07 2a90 	vmov	s15, r2
 80135e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80135e8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80135ec:	ed8d 5b02 	vstr	d5, [sp, #8]
 80135f0:	9a03      	ldr	r2, [sp, #12]
 80135f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135f6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80135fa:	2d00      	cmp	r5, #0
 80135fc:	d17b      	bne.n	80136f6 <_dtoa_r+0x4a6>
 80135fe:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013602:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013606:	ec41 0b17 	vmov	d7, r0, r1
 801360a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013612:	f300 8253 	bgt.w	8013abc <_dtoa_r+0x86c>
 8013616:	eeb1 7b47 	vneg.f64	d7, d7
 801361a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013622:	f100 8249 	bmi.w	8013ab8 <_dtoa_r+0x868>
 8013626:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801362a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801362e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013630:	2b00      	cmp	r3, #0
 8013632:	f2c0 8119 	blt.w	8013868 <_dtoa_r+0x618>
 8013636:	f1bb 0f0e 	cmp.w	fp, #14
 801363a:	f300 8115 	bgt.w	8013868 <_dtoa_r+0x618>
 801363e:	4bc3      	ldr	r3, [pc, #780]	; (801394c <_dtoa_r+0x6fc>)
 8013640:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013644:	ed93 6b00 	vldr	d6, [r3]
 8013648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801364a:	2b00      	cmp	r3, #0
 801364c:	f280 80ba 	bge.w	80137c4 <_dtoa_r+0x574>
 8013650:	f1b9 0f00 	cmp.w	r9, #0
 8013654:	f300 80b6 	bgt.w	80137c4 <_dtoa_r+0x574>
 8013658:	f040 822d 	bne.w	8013ab6 <_dtoa_r+0x866>
 801365c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013660:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013664:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013668:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013670:	464d      	mov	r5, r9
 8013672:	464f      	mov	r7, r9
 8013674:	f280 8204 	bge.w	8013a80 <_dtoa_r+0x830>
 8013678:	9b04      	ldr	r3, [sp, #16]
 801367a:	9a04      	ldr	r2, [sp, #16]
 801367c:	1c5e      	adds	r6, r3, #1
 801367e:	2331      	movs	r3, #49	; 0x31
 8013680:	7013      	strb	r3, [r2, #0]
 8013682:	f10b 0b01 	add.w	fp, fp, #1
 8013686:	e1ff      	b.n	8013a88 <_dtoa_r+0x838>
 8013688:	2202      	movs	r2, #2
 801368a:	e731      	b.n	80134f0 <_dtoa_r+0x2a0>
 801368c:	d02e      	beq.n	80136ec <_dtoa_r+0x49c>
 801368e:	f1cb 0300 	rsb	r3, fp, #0
 8013692:	4aae      	ldr	r2, [pc, #696]	; (801394c <_dtoa_r+0x6fc>)
 8013694:	f003 010f 	and.w	r1, r3, #15
 8013698:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801369c:	ed92 7b00 	vldr	d7, [r2]
 80136a0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80136a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80136a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80136ac:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80136b0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80136b4:	49a6      	ldr	r1, [pc, #664]	; (8013950 <_dtoa_r+0x700>)
 80136b6:	111b      	asrs	r3, r3, #4
 80136b8:	2000      	movs	r0, #0
 80136ba:	2202      	movs	r2, #2
 80136bc:	b93b      	cbnz	r3, 80136ce <_dtoa_r+0x47e>
 80136be:	2800      	cmp	r0, #0
 80136c0:	f43f af6b 	beq.w	801359a <_dtoa_r+0x34a>
 80136c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80136c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136cc:	e765      	b.n	801359a <_dtoa_r+0x34a>
 80136ce:	07dd      	lsls	r5, r3, #31
 80136d0:	d509      	bpl.n	80136e6 <_dtoa_r+0x496>
 80136d2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80136d6:	ed91 7b00 	vldr	d7, [r1]
 80136da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80136de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80136e2:	3201      	adds	r2, #1
 80136e4:	2001      	movs	r0, #1
 80136e6:	105b      	asrs	r3, r3, #1
 80136e8:	3108      	adds	r1, #8
 80136ea:	e7e7      	b.n	80136bc <_dtoa_r+0x46c>
 80136ec:	2202      	movs	r2, #2
 80136ee:	e754      	b.n	801359a <_dtoa_r+0x34a>
 80136f0:	465b      	mov	r3, fp
 80136f2:	464d      	mov	r5, r9
 80136f4:	e770      	b.n	80135d8 <_dtoa_r+0x388>
 80136f6:	4a95      	ldr	r2, [pc, #596]	; (801394c <_dtoa_r+0x6fc>)
 80136f8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80136fc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013702:	ec41 0b17 	vmov	d7, r0, r1
 8013706:	b35a      	cbz	r2, 8013760 <_dtoa_r+0x510>
 8013708:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801370c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013710:	9e04      	ldr	r6, [sp, #16]
 8013712:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013716:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801371a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801371e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013722:	ee14 2a90 	vmov	r2, s9
 8013726:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801372a:	3230      	adds	r2, #48	; 0x30
 801372c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013730:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013738:	f806 2b01 	strb.w	r2, [r6], #1
 801373c:	d43b      	bmi.n	80137b6 <_dtoa_r+0x566>
 801373e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013742:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801374a:	d472      	bmi.n	8013832 <_dtoa_r+0x5e2>
 801374c:	9a04      	ldr	r2, [sp, #16]
 801374e:	1ab2      	subs	r2, r6, r2
 8013750:	4295      	cmp	r5, r2
 8013752:	f77f af68 	ble.w	8013626 <_dtoa_r+0x3d6>
 8013756:	ee27 7b03 	vmul.f64	d7, d7, d3
 801375a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801375e:	e7de      	b.n	801371e <_dtoa_r+0x4ce>
 8013760:	9a04      	ldr	r2, [sp, #16]
 8013762:	ee24 7b07 	vmul.f64	d7, d4, d7
 8013766:	1956      	adds	r6, r2, r5
 8013768:	4611      	mov	r1, r2
 801376a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801376e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013772:	ee14 2a90 	vmov	r2, s9
 8013776:	3230      	adds	r2, #48	; 0x30
 8013778:	f801 2b01 	strb.w	r2, [r1], #1
 801377c:	42b1      	cmp	r1, r6
 801377e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013782:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013786:	d11a      	bne.n	80137be <_dtoa_r+0x56e>
 8013788:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801378c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013790:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	dc4b      	bgt.n	8013832 <_dtoa_r+0x5e2>
 801379a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801379e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80137a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a6:	f57f af3e 	bpl.w	8013626 <_dtoa_r+0x3d6>
 80137aa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80137ae:	2a30      	cmp	r2, #48	; 0x30
 80137b0:	f106 31ff 	add.w	r1, r6, #4294967295
 80137b4:	d001      	beq.n	80137ba <_dtoa_r+0x56a>
 80137b6:	469b      	mov	fp, r3
 80137b8:	e02a      	b.n	8013810 <_dtoa_r+0x5c0>
 80137ba:	460e      	mov	r6, r1
 80137bc:	e7f5      	b.n	80137aa <_dtoa_r+0x55a>
 80137be:	ee26 6b03 	vmul.f64	d6, d6, d3
 80137c2:	e7d4      	b.n	801376e <_dtoa_r+0x51e>
 80137c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137c8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80137cc:	9e04      	ldr	r6, [sp, #16]
 80137ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80137d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80137d6:	ee15 3a10 	vmov	r3, s10
 80137da:	3330      	adds	r3, #48	; 0x30
 80137dc:	f806 3b01 	strb.w	r3, [r6], #1
 80137e0:	9b04      	ldr	r3, [sp, #16]
 80137e2:	1af3      	subs	r3, r6, r3
 80137e4:	4599      	cmp	r9, r3
 80137e6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80137ea:	eea3 7b46 	vfms.f64	d7, d3, d6
 80137ee:	d133      	bne.n	8013858 <_dtoa_r+0x608>
 80137f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80137f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80137f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137fc:	dc18      	bgt.n	8013830 <_dtoa_r+0x5e0>
 80137fe:	eeb4 7b46 	vcmp.f64	d7, d6
 8013802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013806:	d103      	bne.n	8013810 <_dtoa_r+0x5c0>
 8013808:	ee15 3a10 	vmov	r3, s10
 801380c:	07db      	lsls	r3, r3, #31
 801380e:	d40f      	bmi.n	8013830 <_dtoa_r+0x5e0>
 8013810:	9901      	ldr	r1, [sp, #4]
 8013812:	4620      	mov	r0, r4
 8013814:	f000 ffce 	bl	80147b4 <_Bfree>
 8013818:	2300      	movs	r3, #0
 801381a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801381c:	7033      	strb	r3, [r6, #0]
 801381e:	f10b 0301 	add.w	r3, fp, #1
 8013822:	6013      	str	r3, [r2, #0]
 8013824:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013826:	2b00      	cmp	r3, #0
 8013828:	f43f ad5b 	beq.w	80132e2 <_dtoa_r+0x92>
 801382c:	601e      	str	r6, [r3, #0]
 801382e:	e558      	b.n	80132e2 <_dtoa_r+0x92>
 8013830:	465b      	mov	r3, fp
 8013832:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013836:	2939      	cmp	r1, #57	; 0x39
 8013838:	f106 32ff 	add.w	r2, r6, #4294967295
 801383c:	d106      	bne.n	801384c <_dtoa_r+0x5fc>
 801383e:	9904      	ldr	r1, [sp, #16]
 8013840:	4291      	cmp	r1, r2
 8013842:	d107      	bne.n	8013854 <_dtoa_r+0x604>
 8013844:	2230      	movs	r2, #48	; 0x30
 8013846:	700a      	strb	r2, [r1, #0]
 8013848:	3301      	adds	r3, #1
 801384a:	460a      	mov	r2, r1
 801384c:	7811      	ldrb	r1, [r2, #0]
 801384e:	3101      	adds	r1, #1
 8013850:	7011      	strb	r1, [r2, #0]
 8013852:	e7b0      	b.n	80137b6 <_dtoa_r+0x566>
 8013854:	4616      	mov	r6, r2
 8013856:	e7ec      	b.n	8013832 <_dtoa_r+0x5e2>
 8013858:	ee27 7b04 	vmul.f64	d7, d7, d4
 801385c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013864:	d1b3      	bne.n	80137ce <_dtoa_r+0x57e>
 8013866:	e7d3      	b.n	8013810 <_dtoa_r+0x5c0>
 8013868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801386a:	2a00      	cmp	r2, #0
 801386c:	f000 808d 	beq.w	801398a <_dtoa_r+0x73a>
 8013870:	9a08      	ldr	r2, [sp, #32]
 8013872:	2a01      	cmp	r2, #1
 8013874:	dc72      	bgt.n	801395c <_dtoa_r+0x70c>
 8013876:	2f00      	cmp	r7, #0
 8013878:	d06c      	beq.n	8013954 <_dtoa_r+0x704>
 801387a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801387e:	4645      	mov	r5, r8
 8013880:	4656      	mov	r6, sl
 8013882:	9a07      	ldr	r2, [sp, #28]
 8013884:	2101      	movs	r1, #1
 8013886:	441a      	add	r2, r3
 8013888:	4620      	mov	r0, r4
 801388a:	449a      	add	sl, r3
 801388c:	9207      	str	r2, [sp, #28]
 801388e:	f001 f86f 	bl	8014970 <__i2b>
 8013892:	4607      	mov	r7, r0
 8013894:	2e00      	cmp	r6, #0
 8013896:	dd0b      	ble.n	80138b0 <_dtoa_r+0x660>
 8013898:	9b07      	ldr	r3, [sp, #28]
 801389a:	2b00      	cmp	r3, #0
 801389c:	dd08      	ble.n	80138b0 <_dtoa_r+0x660>
 801389e:	42b3      	cmp	r3, r6
 80138a0:	9a07      	ldr	r2, [sp, #28]
 80138a2:	bfa8      	it	ge
 80138a4:	4633      	movge	r3, r6
 80138a6:	ebaa 0a03 	sub.w	sl, sl, r3
 80138aa:	1af6      	subs	r6, r6, r3
 80138ac:	1ad3      	subs	r3, r2, r3
 80138ae:	9307      	str	r3, [sp, #28]
 80138b0:	f1b8 0f00 	cmp.w	r8, #0
 80138b4:	d01d      	beq.n	80138f2 <_dtoa_r+0x6a2>
 80138b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d06a      	beq.n	8013992 <_dtoa_r+0x742>
 80138bc:	b18d      	cbz	r5, 80138e2 <_dtoa_r+0x692>
 80138be:	4639      	mov	r1, r7
 80138c0:	462a      	mov	r2, r5
 80138c2:	4620      	mov	r0, r4
 80138c4:	f001 f8f4 	bl	8014ab0 <__pow5mult>
 80138c8:	9a01      	ldr	r2, [sp, #4]
 80138ca:	4601      	mov	r1, r0
 80138cc:	4607      	mov	r7, r0
 80138ce:	4620      	mov	r0, r4
 80138d0:	f001 f857 	bl	8014982 <__multiply>
 80138d4:	9901      	ldr	r1, [sp, #4]
 80138d6:	900c      	str	r0, [sp, #48]	; 0x30
 80138d8:	4620      	mov	r0, r4
 80138da:	f000 ff6b 	bl	80147b4 <_Bfree>
 80138de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138e0:	9301      	str	r3, [sp, #4]
 80138e2:	ebb8 0205 	subs.w	r2, r8, r5
 80138e6:	d004      	beq.n	80138f2 <_dtoa_r+0x6a2>
 80138e8:	9901      	ldr	r1, [sp, #4]
 80138ea:	4620      	mov	r0, r4
 80138ec:	f001 f8e0 	bl	8014ab0 <__pow5mult>
 80138f0:	9001      	str	r0, [sp, #4]
 80138f2:	2101      	movs	r1, #1
 80138f4:	4620      	mov	r0, r4
 80138f6:	f001 f83b 	bl	8014970 <__i2b>
 80138fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138fc:	4605      	mov	r5, r0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f000 81ca 	beq.w	8013c98 <_dtoa_r+0xa48>
 8013904:	461a      	mov	r2, r3
 8013906:	4601      	mov	r1, r0
 8013908:	4620      	mov	r0, r4
 801390a:	f001 f8d1 	bl	8014ab0 <__pow5mult>
 801390e:	9b08      	ldr	r3, [sp, #32]
 8013910:	2b01      	cmp	r3, #1
 8013912:	4605      	mov	r5, r0
 8013914:	dc44      	bgt.n	80139a0 <_dtoa_r+0x750>
 8013916:	9b02      	ldr	r3, [sp, #8]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d13c      	bne.n	8013996 <_dtoa_r+0x746>
 801391c:	9b03      	ldr	r3, [sp, #12]
 801391e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013922:	2b00      	cmp	r3, #0
 8013924:	d137      	bne.n	8013996 <_dtoa_r+0x746>
 8013926:	9b03      	ldr	r3, [sp, #12]
 8013928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801392c:	0d1b      	lsrs	r3, r3, #20
 801392e:	051b      	lsls	r3, r3, #20
 8013930:	2b00      	cmp	r3, #0
 8013932:	d033      	beq.n	801399c <_dtoa_r+0x74c>
 8013934:	9b07      	ldr	r3, [sp, #28]
 8013936:	3301      	adds	r3, #1
 8013938:	f10a 0a01 	add.w	sl, sl, #1
 801393c:	9307      	str	r3, [sp, #28]
 801393e:	f04f 0801 	mov.w	r8, #1
 8013942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013944:	bb73      	cbnz	r3, 80139a4 <_dtoa_r+0x754>
 8013946:	2001      	movs	r0, #1
 8013948:	e034      	b.n	80139b4 <_dtoa_r+0x764>
 801394a:	bf00      	nop
 801394c:	080164b0 	.word	0x080164b0
 8013950:	08016488 	.word	0x08016488
 8013954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801395a:	e790      	b.n	801387e <_dtoa_r+0x62e>
 801395c:	f109 35ff 	add.w	r5, r9, #4294967295
 8013960:	45a8      	cmp	r8, r5
 8013962:	bfbf      	itttt	lt
 8013964:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8013966:	eba5 0808 	sublt.w	r8, r5, r8
 801396a:	4443      	addlt	r3, r8
 801396c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801396e:	bfb6      	itet	lt
 8013970:	46a8      	movlt	r8, r5
 8013972:	eba8 0505 	subge.w	r5, r8, r5
 8013976:	2500      	movlt	r5, #0
 8013978:	f1b9 0f00 	cmp.w	r9, #0
 801397c:	bfb9      	ittee	lt
 801397e:	ebaa 0609 	sublt.w	r6, sl, r9
 8013982:	2300      	movlt	r3, #0
 8013984:	4656      	movge	r6, sl
 8013986:	464b      	movge	r3, r9
 8013988:	e77b      	b.n	8013882 <_dtoa_r+0x632>
 801398a:	4645      	mov	r5, r8
 801398c:	4656      	mov	r6, sl
 801398e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013990:	e780      	b.n	8013894 <_dtoa_r+0x644>
 8013992:	4642      	mov	r2, r8
 8013994:	e7a8      	b.n	80138e8 <_dtoa_r+0x698>
 8013996:	f04f 0800 	mov.w	r8, #0
 801399a:	e7d2      	b.n	8013942 <_dtoa_r+0x6f2>
 801399c:	4698      	mov	r8, r3
 801399e:	e7d0      	b.n	8013942 <_dtoa_r+0x6f2>
 80139a0:	f04f 0800 	mov.w	r8, #0
 80139a4:	692b      	ldr	r3, [r5, #16]
 80139a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80139aa:	6918      	ldr	r0, [r3, #16]
 80139ac:	f000 ff92 	bl	80148d4 <__hi0bits>
 80139b0:	f1c0 0020 	rsb	r0, r0, #32
 80139b4:	9b07      	ldr	r3, [sp, #28]
 80139b6:	4418      	add	r0, r3
 80139b8:	f010 001f 	ands.w	r0, r0, #31
 80139bc:	d047      	beq.n	8013a4e <_dtoa_r+0x7fe>
 80139be:	f1c0 0320 	rsb	r3, r0, #32
 80139c2:	2b04      	cmp	r3, #4
 80139c4:	dd3b      	ble.n	8013a3e <_dtoa_r+0x7ee>
 80139c6:	9b07      	ldr	r3, [sp, #28]
 80139c8:	f1c0 001c 	rsb	r0, r0, #28
 80139cc:	4482      	add	sl, r0
 80139ce:	4406      	add	r6, r0
 80139d0:	4403      	add	r3, r0
 80139d2:	9307      	str	r3, [sp, #28]
 80139d4:	f1ba 0f00 	cmp.w	sl, #0
 80139d8:	dd05      	ble.n	80139e6 <_dtoa_r+0x796>
 80139da:	4652      	mov	r2, sl
 80139dc:	9901      	ldr	r1, [sp, #4]
 80139de:	4620      	mov	r0, r4
 80139e0:	f001 f8b4 	bl	8014b4c <__lshift>
 80139e4:	9001      	str	r0, [sp, #4]
 80139e6:	9b07      	ldr	r3, [sp, #28]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	dd05      	ble.n	80139f8 <_dtoa_r+0x7a8>
 80139ec:	4629      	mov	r1, r5
 80139ee:	461a      	mov	r2, r3
 80139f0:	4620      	mov	r0, r4
 80139f2:	f001 f8ab 	bl	8014b4c <__lshift>
 80139f6:	4605      	mov	r5, r0
 80139f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80139fa:	b353      	cbz	r3, 8013a52 <_dtoa_r+0x802>
 80139fc:	4629      	mov	r1, r5
 80139fe:	9801      	ldr	r0, [sp, #4]
 8013a00:	f001 f8f8 	bl	8014bf4 <__mcmp>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	da24      	bge.n	8013a52 <_dtoa_r+0x802>
 8013a08:	2300      	movs	r3, #0
 8013a0a:	220a      	movs	r2, #10
 8013a0c:	9901      	ldr	r1, [sp, #4]
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f000 fee7 	bl	80147e2 <__multadd>
 8013a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a16:	9001      	str	r0, [sp, #4]
 8013a18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	f000 8142 	beq.w	8013ca6 <_dtoa_r+0xa56>
 8013a22:	2300      	movs	r3, #0
 8013a24:	4639      	mov	r1, r7
 8013a26:	220a      	movs	r2, #10
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f000 feda 	bl	80147e2 <__multadd>
 8013a2e:	9b06      	ldr	r3, [sp, #24]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	4607      	mov	r7, r0
 8013a34:	dc4b      	bgt.n	8013ace <_dtoa_r+0x87e>
 8013a36:	9b08      	ldr	r3, [sp, #32]
 8013a38:	2b02      	cmp	r3, #2
 8013a3a:	dd48      	ble.n	8013ace <_dtoa_r+0x87e>
 8013a3c:	e011      	b.n	8013a62 <_dtoa_r+0x812>
 8013a3e:	d0c9      	beq.n	80139d4 <_dtoa_r+0x784>
 8013a40:	9a07      	ldr	r2, [sp, #28]
 8013a42:	331c      	adds	r3, #28
 8013a44:	441a      	add	r2, r3
 8013a46:	449a      	add	sl, r3
 8013a48:	441e      	add	r6, r3
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	e7c1      	b.n	80139d2 <_dtoa_r+0x782>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	e7f6      	b.n	8013a40 <_dtoa_r+0x7f0>
 8013a52:	f1b9 0f00 	cmp.w	r9, #0
 8013a56:	dc34      	bgt.n	8013ac2 <_dtoa_r+0x872>
 8013a58:	9b08      	ldr	r3, [sp, #32]
 8013a5a:	2b02      	cmp	r3, #2
 8013a5c:	dd31      	ble.n	8013ac2 <_dtoa_r+0x872>
 8013a5e:	f8cd 9018 	str.w	r9, [sp, #24]
 8013a62:	9b06      	ldr	r3, [sp, #24]
 8013a64:	b963      	cbnz	r3, 8013a80 <_dtoa_r+0x830>
 8013a66:	4629      	mov	r1, r5
 8013a68:	2205      	movs	r2, #5
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f000 feb9 	bl	80147e2 <__multadd>
 8013a70:	4601      	mov	r1, r0
 8013a72:	4605      	mov	r5, r0
 8013a74:	9801      	ldr	r0, [sp, #4]
 8013a76:	f001 f8bd 	bl	8014bf4 <__mcmp>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	f73f adfc 	bgt.w	8013678 <_dtoa_r+0x428>
 8013a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a82:	9e04      	ldr	r6, [sp, #16]
 8013a84:	ea6f 0b03 	mvn.w	fp, r3
 8013a88:	f04f 0900 	mov.w	r9, #0
 8013a8c:	4629      	mov	r1, r5
 8013a8e:	4620      	mov	r0, r4
 8013a90:	f000 fe90 	bl	80147b4 <_Bfree>
 8013a94:	2f00      	cmp	r7, #0
 8013a96:	f43f aebb 	beq.w	8013810 <_dtoa_r+0x5c0>
 8013a9a:	f1b9 0f00 	cmp.w	r9, #0
 8013a9e:	d005      	beq.n	8013aac <_dtoa_r+0x85c>
 8013aa0:	45b9      	cmp	r9, r7
 8013aa2:	d003      	beq.n	8013aac <_dtoa_r+0x85c>
 8013aa4:	4649      	mov	r1, r9
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	f000 fe84 	bl	80147b4 <_Bfree>
 8013aac:	4639      	mov	r1, r7
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f000 fe80 	bl	80147b4 <_Bfree>
 8013ab4:	e6ac      	b.n	8013810 <_dtoa_r+0x5c0>
 8013ab6:	2500      	movs	r5, #0
 8013ab8:	462f      	mov	r7, r5
 8013aba:	e7e1      	b.n	8013a80 <_dtoa_r+0x830>
 8013abc:	469b      	mov	fp, r3
 8013abe:	462f      	mov	r7, r5
 8013ac0:	e5da      	b.n	8013678 <_dtoa_r+0x428>
 8013ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ac4:	f8cd 9018 	str.w	r9, [sp, #24]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	f000 80f3 	beq.w	8013cb4 <_dtoa_r+0xa64>
 8013ace:	2e00      	cmp	r6, #0
 8013ad0:	dd05      	ble.n	8013ade <_dtoa_r+0x88e>
 8013ad2:	4639      	mov	r1, r7
 8013ad4:	4632      	mov	r2, r6
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f001 f838 	bl	8014b4c <__lshift>
 8013adc:	4607      	mov	r7, r0
 8013ade:	f1b8 0f00 	cmp.w	r8, #0
 8013ae2:	d04c      	beq.n	8013b7e <_dtoa_r+0x92e>
 8013ae4:	6879      	ldr	r1, [r7, #4]
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	f000 fe30 	bl	801474c <_Balloc>
 8013aec:	693a      	ldr	r2, [r7, #16]
 8013aee:	3202      	adds	r2, #2
 8013af0:	4606      	mov	r6, r0
 8013af2:	0092      	lsls	r2, r2, #2
 8013af4:	f107 010c 	add.w	r1, r7, #12
 8013af8:	300c      	adds	r0, #12
 8013afa:	f7fd fd2b 	bl	8011554 <memcpy>
 8013afe:	2201      	movs	r2, #1
 8013b00:	4631      	mov	r1, r6
 8013b02:	4620      	mov	r0, r4
 8013b04:	f001 f822 	bl	8014b4c <__lshift>
 8013b08:	9b02      	ldr	r3, [sp, #8]
 8013b0a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013b0e:	f003 0301 	and.w	r3, r3, #1
 8013b12:	46b9      	mov	r9, r7
 8013b14:	9307      	str	r3, [sp, #28]
 8013b16:	4607      	mov	r7, r0
 8013b18:	4629      	mov	r1, r5
 8013b1a:	9801      	ldr	r0, [sp, #4]
 8013b1c:	f7ff fb0a 	bl	8013134 <quorem>
 8013b20:	4649      	mov	r1, r9
 8013b22:	4606      	mov	r6, r0
 8013b24:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013b28:	9801      	ldr	r0, [sp, #4]
 8013b2a:	f001 f863 	bl	8014bf4 <__mcmp>
 8013b2e:	463a      	mov	r2, r7
 8013b30:	9002      	str	r0, [sp, #8]
 8013b32:	4629      	mov	r1, r5
 8013b34:	4620      	mov	r0, r4
 8013b36:	f001 f877 	bl	8014c28 <__mdiff>
 8013b3a:	68c3      	ldr	r3, [r0, #12]
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	bb03      	cbnz	r3, 8013b82 <_dtoa_r+0x932>
 8013b40:	4601      	mov	r1, r0
 8013b42:	9009      	str	r0, [sp, #36]	; 0x24
 8013b44:	9801      	ldr	r0, [sp, #4]
 8013b46:	f001 f855 	bl	8014bf4 <__mcmp>
 8013b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	4611      	mov	r1, r2
 8013b50:	4620      	mov	r0, r4
 8013b52:	9309      	str	r3, [sp, #36]	; 0x24
 8013b54:	f000 fe2e 	bl	80147b4 <_Bfree>
 8013b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b5a:	b9a3      	cbnz	r3, 8013b86 <_dtoa_r+0x936>
 8013b5c:	9a08      	ldr	r2, [sp, #32]
 8013b5e:	b992      	cbnz	r2, 8013b86 <_dtoa_r+0x936>
 8013b60:	9a07      	ldr	r2, [sp, #28]
 8013b62:	b982      	cbnz	r2, 8013b86 <_dtoa_r+0x936>
 8013b64:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013b68:	d029      	beq.n	8013bbe <_dtoa_r+0x96e>
 8013b6a:	9b02      	ldr	r3, [sp, #8]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	dd01      	ble.n	8013b74 <_dtoa_r+0x924>
 8013b70:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8013b74:	f10a 0601 	add.w	r6, sl, #1
 8013b78:	f88a 8000 	strb.w	r8, [sl]
 8013b7c:	e786      	b.n	8013a8c <_dtoa_r+0x83c>
 8013b7e:	4638      	mov	r0, r7
 8013b80:	e7c2      	b.n	8013b08 <_dtoa_r+0x8b8>
 8013b82:	2301      	movs	r3, #1
 8013b84:	e7e3      	b.n	8013b4e <_dtoa_r+0x8fe>
 8013b86:	9a02      	ldr	r2, [sp, #8]
 8013b88:	2a00      	cmp	r2, #0
 8013b8a:	db04      	blt.n	8013b96 <_dtoa_r+0x946>
 8013b8c:	d124      	bne.n	8013bd8 <_dtoa_r+0x988>
 8013b8e:	9a08      	ldr	r2, [sp, #32]
 8013b90:	bb12      	cbnz	r2, 8013bd8 <_dtoa_r+0x988>
 8013b92:	9a07      	ldr	r2, [sp, #28]
 8013b94:	bb02      	cbnz	r2, 8013bd8 <_dtoa_r+0x988>
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	ddec      	ble.n	8013b74 <_dtoa_r+0x924>
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	9901      	ldr	r1, [sp, #4]
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	f000 ffd4 	bl	8014b4c <__lshift>
 8013ba4:	4629      	mov	r1, r5
 8013ba6:	9001      	str	r0, [sp, #4]
 8013ba8:	f001 f824 	bl	8014bf4 <__mcmp>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	dc03      	bgt.n	8013bb8 <_dtoa_r+0x968>
 8013bb0:	d1e0      	bne.n	8013b74 <_dtoa_r+0x924>
 8013bb2:	f018 0f01 	tst.w	r8, #1
 8013bb6:	d0dd      	beq.n	8013b74 <_dtoa_r+0x924>
 8013bb8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013bbc:	d1d8      	bne.n	8013b70 <_dtoa_r+0x920>
 8013bbe:	2339      	movs	r3, #57	; 0x39
 8013bc0:	f10a 0601 	add.w	r6, sl, #1
 8013bc4:	f88a 3000 	strb.w	r3, [sl]
 8013bc8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013bcc:	2b39      	cmp	r3, #57	; 0x39
 8013bce:	f106 32ff 	add.w	r2, r6, #4294967295
 8013bd2:	d04c      	beq.n	8013c6e <_dtoa_r+0xa1e>
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	e051      	b.n	8013c7c <_dtoa_r+0xa2c>
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f10a 0601 	add.w	r6, sl, #1
 8013bde:	dd05      	ble.n	8013bec <_dtoa_r+0x99c>
 8013be0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013be4:	d0eb      	beq.n	8013bbe <_dtoa_r+0x96e>
 8013be6:	f108 0801 	add.w	r8, r8, #1
 8013bea:	e7c5      	b.n	8013b78 <_dtoa_r+0x928>
 8013bec:	9b04      	ldr	r3, [sp, #16]
 8013bee:	9a06      	ldr	r2, [sp, #24]
 8013bf0:	f806 8c01 	strb.w	r8, [r6, #-1]
 8013bf4:	1af3      	subs	r3, r6, r3
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d021      	beq.n	8013c3e <_dtoa_r+0x9ee>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	220a      	movs	r2, #10
 8013bfe:	9901      	ldr	r1, [sp, #4]
 8013c00:	4620      	mov	r0, r4
 8013c02:	f000 fdee 	bl	80147e2 <__multadd>
 8013c06:	45b9      	cmp	r9, r7
 8013c08:	9001      	str	r0, [sp, #4]
 8013c0a:	f04f 0300 	mov.w	r3, #0
 8013c0e:	f04f 020a 	mov.w	r2, #10
 8013c12:	4649      	mov	r1, r9
 8013c14:	4620      	mov	r0, r4
 8013c16:	d105      	bne.n	8013c24 <_dtoa_r+0x9d4>
 8013c18:	f000 fde3 	bl	80147e2 <__multadd>
 8013c1c:	4681      	mov	r9, r0
 8013c1e:	4607      	mov	r7, r0
 8013c20:	46b2      	mov	sl, r6
 8013c22:	e779      	b.n	8013b18 <_dtoa_r+0x8c8>
 8013c24:	f000 fddd 	bl	80147e2 <__multadd>
 8013c28:	4639      	mov	r1, r7
 8013c2a:	4681      	mov	r9, r0
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	220a      	movs	r2, #10
 8013c30:	4620      	mov	r0, r4
 8013c32:	f000 fdd6 	bl	80147e2 <__multadd>
 8013c36:	4607      	mov	r7, r0
 8013c38:	e7f2      	b.n	8013c20 <_dtoa_r+0x9d0>
 8013c3a:	f04f 0900 	mov.w	r9, #0
 8013c3e:	2201      	movs	r2, #1
 8013c40:	9901      	ldr	r1, [sp, #4]
 8013c42:	4620      	mov	r0, r4
 8013c44:	f000 ff82 	bl	8014b4c <__lshift>
 8013c48:	4629      	mov	r1, r5
 8013c4a:	9001      	str	r0, [sp, #4]
 8013c4c:	f000 ffd2 	bl	8014bf4 <__mcmp>
 8013c50:	2800      	cmp	r0, #0
 8013c52:	dcb9      	bgt.n	8013bc8 <_dtoa_r+0x978>
 8013c54:	d102      	bne.n	8013c5c <_dtoa_r+0xa0c>
 8013c56:	f018 0f01 	tst.w	r8, #1
 8013c5a:	d1b5      	bne.n	8013bc8 <_dtoa_r+0x978>
 8013c5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013c60:	2b30      	cmp	r3, #48	; 0x30
 8013c62:	f106 32ff 	add.w	r2, r6, #4294967295
 8013c66:	f47f af11 	bne.w	8013a8c <_dtoa_r+0x83c>
 8013c6a:	4616      	mov	r6, r2
 8013c6c:	e7f6      	b.n	8013c5c <_dtoa_r+0xa0c>
 8013c6e:	9b04      	ldr	r3, [sp, #16]
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d105      	bne.n	8013c80 <_dtoa_r+0xa30>
 8013c74:	9a04      	ldr	r2, [sp, #16]
 8013c76:	f10b 0b01 	add.w	fp, fp, #1
 8013c7a:	2331      	movs	r3, #49	; 0x31
 8013c7c:	7013      	strb	r3, [r2, #0]
 8013c7e:	e705      	b.n	8013a8c <_dtoa_r+0x83c>
 8013c80:	4616      	mov	r6, r2
 8013c82:	e7a1      	b.n	8013bc8 <_dtoa_r+0x978>
 8013c84:	4b16      	ldr	r3, [pc, #88]	; (8013ce0 <_dtoa_r+0xa90>)
 8013c86:	f7ff bb48 	b.w	801331a <_dtoa_r+0xca>
 8013c8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	f47f ab23 	bne.w	80132d8 <_dtoa_r+0x88>
 8013c92:	4b14      	ldr	r3, [pc, #80]	; (8013ce4 <_dtoa_r+0xa94>)
 8013c94:	f7ff bb41 	b.w	801331a <_dtoa_r+0xca>
 8013c98:	9b08      	ldr	r3, [sp, #32]
 8013c9a:	2b01      	cmp	r3, #1
 8013c9c:	f77f ae3b 	ble.w	8013916 <_dtoa_r+0x6c6>
 8013ca0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8013ca4:	e64f      	b.n	8013946 <_dtoa_r+0x6f6>
 8013ca6:	9b06      	ldr	r3, [sp, #24]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	dc03      	bgt.n	8013cb4 <_dtoa_r+0xa64>
 8013cac:	9b08      	ldr	r3, [sp, #32]
 8013cae:	2b02      	cmp	r3, #2
 8013cb0:	f73f aed7 	bgt.w	8013a62 <_dtoa_r+0x812>
 8013cb4:	9e04      	ldr	r6, [sp, #16]
 8013cb6:	9801      	ldr	r0, [sp, #4]
 8013cb8:	4629      	mov	r1, r5
 8013cba:	f7ff fa3b 	bl	8013134 <quorem>
 8013cbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013cc2:	f806 8b01 	strb.w	r8, [r6], #1
 8013cc6:	9b04      	ldr	r3, [sp, #16]
 8013cc8:	9a06      	ldr	r2, [sp, #24]
 8013cca:	1af3      	subs	r3, r6, r3
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	ddb4      	ble.n	8013c3a <_dtoa_r+0x9ea>
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	220a      	movs	r2, #10
 8013cd4:	9901      	ldr	r1, [sp, #4]
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	f000 fd83 	bl	80147e2 <__multadd>
 8013cdc:	9001      	str	r0, [sp, #4]
 8013cde:	e7ea      	b.n	8013cb6 <_dtoa_r+0xa66>
 8013ce0:	08016388 	.word	0x08016388
 8013ce4:	08016408 	.word	0x08016408

08013ce8 <__sflush_r>:
 8013ce8:	898a      	ldrh	r2, [r1, #12]
 8013cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cee:	4605      	mov	r5, r0
 8013cf0:	0710      	lsls	r0, r2, #28
 8013cf2:	460c      	mov	r4, r1
 8013cf4:	d458      	bmi.n	8013da8 <__sflush_r+0xc0>
 8013cf6:	684b      	ldr	r3, [r1, #4]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	dc05      	bgt.n	8013d08 <__sflush_r+0x20>
 8013cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	dc02      	bgt.n	8013d08 <__sflush_r+0x20>
 8013d02:	2000      	movs	r0, #0
 8013d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d0a:	2e00      	cmp	r6, #0
 8013d0c:	d0f9      	beq.n	8013d02 <__sflush_r+0x1a>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d14:	682f      	ldr	r7, [r5, #0]
 8013d16:	6a21      	ldr	r1, [r4, #32]
 8013d18:	602b      	str	r3, [r5, #0]
 8013d1a:	d032      	beq.n	8013d82 <__sflush_r+0x9a>
 8013d1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d1e:	89a3      	ldrh	r3, [r4, #12]
 8013d20:	075a      	lsls	r2, r3, #29
 8013d22:	d505      	bpl.n	8013d30 <__sflush_r+0x48>
 8013d24:	6863      	ldr	r3, [r4, #4]
 8013d26:	1ac0      	subs	r0, r0, r3
 8013d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d2a:	b10b      	cbz	r3, 8013d30 <__sflush_r+0x48>
 8013d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d2e:	1ac0      	subs	r0, r0, r3
 8013d30:	2300      	movs	r3, #0
 8013d32:	4602      	mov	r2, r0
 8013d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d36:	6a21      	ldr	r1, [r4, #32]
 8013d38:	4628      	mov	r0, r5
 8013d3a:	47b0      	blx	r6
 8013d3c:	1c43      	adds	r3, r0, #1
 8013d3e:	89a3      	ldrh	r3, [r4, #12]
 8013d40:	d106      	bne.n	8013d50 <__sflush_r+0x68>
 8013d42:	6829      	ldr	r1, [r5, #0]
 8013d44:	291d      	cmp	r1, #29
 8013d46:	d848      	bhi.n	8013dda <__sflush_r+0xf2>
 8013d48:	4a29      	ldr	r2, [pc, #164]	; (8013df0 <__sflush_r+0x108>)
 8013d4a:	40ca      	lsrs	r2, r1
 8013d4c:	07d6      	lsls	r6, r2, #31
 8013d4e:	d544      	bpl.n	8013dda <__sflush_r+0xf2>
 8013d50:	2200      	movs	r2, #0
 8013d52:	6062      	str	r2, [r4, #4]
 8013d54:	04d9      	lsls	r1, r3, #19
 8013d56:	6922      	ldr	r2, [r4, #16]
 8013d58:	6022      	str	r2, [r4, #0]
 8013d5a:	d504      	bpl.n	8013d66 <__sflush_r+0x7e>
 8013d5c:	1c42      	adds	r2, r0, #1
 8013d5e:	d101      	bne.n	8013d64 <__sflush_r+0x7c>
 8013d60:	682b      	ldr	r3, [r5, #0]
 8013d62:	b903      	cbnz	r3, 8013d66 <__sflush_r+0x7e>
 8013d64:	6560      	str	r0, [r4, #84]	; 0x54
 8013d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d68:	602f      	str	r7, [r5, #0]
 8013d6a:	2900      	cmp	r1, #0
 8013d6c:	d0c9      	beq.n	8013d02 <__sflush_r+0x1a>
 8013d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d72:	4299      	cmp	r1, r3
 8013d74:	d002      	beq.n	8013d7c <__sflush_r+0x94>
 8013d76:	4628      	mov	r0, r5
 8013d78:	f001 f8f6 	bl	8014f68 <_free_r>
 8013d7c:	2000      	movs	r0, #0
 8013d7e:	6360      	str	r0, [r4, #52]	; 0x34
 8013d80:	e7c0      	b.n	8013d04 <__sflush_r+0x1c>
 8013d82:	2301      	movs	r3, #1
 8013d84:	4628      	mov	r0, r5
 8013d86:	47b0      	blx	r6
 8013d88:	1c41      	adds	r1, r0, #1
 8013d8a:	d1c8      	bne.n	8013d1e <__sflush_r+0x36>
 8013d8c:	682b      	ldr	r3, [r5, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d0c5      	beq.n	8013d1e <__sflush_r+0x36>
 8013d92:	2b1d      	cmp	r3, #29
 8013d94:	d001      	beq.n	8013d9a <__sflush_r+0xb2>
 8013d96:	2b16      	cmp	r3, #22
 8013d98:	d101      	bne.n	8013d9e <__sflush_r+0xb6>
 8013d9a:	602f      	str	r7, [r5, #0]
 8013d9c:	e7b1      	b.n	8013d02 <__sflush_r+0x1a>
 8013d9e:	89a3      	ldrh	r3, [r4, #12]
 8013da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013da4:	81a3      	strh	r3, [r4, #12]
 8013da6:	e7ad      	b.n	8013d04 <__sflush_r+0x1c>
 8013da8:	690f      	ldr	r7, [r1, #16]
 8013daa:	2f00      	cmp	r7, #0
 8013dac:	d0a9      	beq.n	8013d02 <__sflush_r+0x1a>
 8013dae:	0793      	lsls	r3, r2, #30
 8013db0:	680e      	ldr	r6, [r1, #0]
 8013db2:	bf08      	it	eq
 8013db4:	694b      	ldreq	r3, [r1, #20]
 8013db6:	600f      	str	r7, [r1, #0]
 8013db8:	bf18      	it	ne
 8013dba:	2300      	movne	r3, #0
 8013dbc:	eba6 0807 	sub.w	r8, r6, r7
 8013dc0:	608b      	str	r3, [r1, #8]
 8013dc2:	f1b8 0f00 	cmp.w	r8, #0
 8013dc6:	dd9c      	ble.n	8013d02 <__sflush_r+0x1a>
 8013dc8:	4643      	mov	r3, r8
 8013dca:	463a      	mov	r2, r7
 8013dcc:	6a21      	ldr	r1, [r4, #32]
 8013dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	47b0      	blx	r6
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	dc06      	bgt.n	8013de6 <__sflush_r+0xfe>
 8013dd8:	89a3      	ldrh	r3, [r4, #12]
 8013dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dde:	81a3      	strh	r3, [r4, #12]
 8013de0:	f04f 30ff 	mov.w	r0, #4294967295
 8013de4:	e78e      	b.n	8013d04 <__sflush_r+0x1c>
 8013de6:	4407      	add	r7, r0
 8013de8:	eba8 0800 	sub.w	r8, r8, r0
 8013dec:	e7e9      	b.n	8013dc2 <__sflush_r+0xda>
 8013dee:	bf00      	nop
 8013df0:	20400001 	.word	0x20400001

08013df4 <_fflush_r>:
 8013df4:	b538      	push	{r3, r4, r5, lr}
 8013df6:	690b      	ldr	r3, [r1, #16]
 8013df8:	4605      	mov	r5, r0
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	b1db      	cbz	r3, 8013e36 <_fflush_r+0x42>
 8013dfe:	b118      	cbz	r0, 8013e08 <_fflush_r+0x14>
 8013e00:	6983      	ldr	r3, [r0, #24]
 8013e02:	b90b      	cbnz	r3, 8013e08 <_fflush_r+0x14>
 8013e04:	f000 f860 	bl	8013ec8 <__sinit>
 8013e08:	4b0c      	ldr	r3, [pc, #48]	; (8013e3c <_fflush_r+0x48>)
 8013e0a:	429c      	cmp	r4, r3
 8013e0c:	d109      	bne.n	8013e22 <_fflush_r+0x2e>
 8013e0e:	686c      	ldr	r4, [r5, #4]
 8013e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e14:	b17b      	cbz	r3, 8013e36 <_fflush_r+0x42>
 8013e16:	4621      	mov	r1, r4
 8013e18:	4628      	mov	r0, r5
 8013e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e1e:	f7ff bf63 	b.w	8013ce8 <__sflush_r>
 8013e22:	4b07      	ldr	r3, [pc, #28]	; (8013e40 <_fflush_r+0x4c>)
 8013e24:	429c      	cmp	r4, r3
 8013e26:	d101      	bne.n	8013e2c <_fflush_r+0x38>
 8013e28:	68ac      	ldr	r4, [r5, #8]
 8013e2a:	e7f1      	b.n	8013e10 <_fflush_r+0x1c>
 8013e2c:	4b05      	ldr	r3, [pc, #20]	; (8013e44 <_fflush_r+0x50>)
 8013e2e:	429c      	cmp	r4, r3
 8013e30:	bf08      	it	eq
 8013e32:	68ec      	ldreq	r4, [r5, #12]
 8013e34:	e7ec      	b.n	8013e10 <_fflush_r+0x1c>
 8013e36:	2000      	movs	r0, #0
 8013e38:	bd38      	pop	{r3, r4, r5, pc}
 8013e3a:	bf00      	nop
 8013e3c:	08016438 	.word	0x08016438
 8013e40:	08016458 	.word	0x08016458
 8013e44:	08016418 	.word	0x08016418

08013e48 <std>:
 8013e48:	2300      	movs	r3, #0
 8013e4a:	b510      	push	{r4, lr}
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8013e52:	6083      	str	r3, [r0, #8]
 8013e54:	8181      	strh	r1, [r0, #12]
 8013e56:	6643      	str	r3, [r0, #100]	; 0x64
 8013e58:	81c2      	strh	r2, [r0, #14]
 8013e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013e5e:	6183      	str	r3, [r0, #24]
 8013e60:	4619      	mov	r1, r3
 8013e62:	2208      	movs	r2, #8
 8013e64:	305c      	adds	r0, #92	; 0x5c
 8013e66:	f7fd fb80 	bl	801156a <memset>
 8013e6a:	4b05      	ldr	r3, [pc, #20]	; (8013e80 <std+0x38>)
 8013e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8013e6e:	4b05      	ldr	r3, [pc, #20]	; (8013e84 <std+0x3c>)
 8013e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8013e72:	4b05      	ldr	r3, [pc, #20]	; (8013e88 <std+0x40>)
 8013e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013e76:	4b05      	ldr	r3, [pc, #20]	; (8013e8c <std+0x44>)
 8013e78:	6224      	str	r4, [r4, #32]
 8013e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8013e7c:	bd10      	pop	{r4, pc}
 8013e7e:	bf00      	nop
 8013e80:	0801537d 	.word	0x0801537d
 8013e84:	0801539f 	.word	0x0801539f
 8013e88:	080153d7 	.word	0x080153d7
 8013e8c:	080153fb 	.word	0x080153fb

08013e90 <_cleanup_r>:
 8013e90:	4901      	ldr	r1, [pc, #4]	; (8013e98 <_cleanup_r+0x8>)
 8013e92:	f000 b885 	b.w	8013fa0 <_fwalk_reent>
 8013e96:	bf00      	nop
 8013e98:	08013df5 	.word	0x08013df5

08013e9c <__sfmoreglue>:
 8013e9c:	b570      	push	{r4, r5, r6, lr}
 8013e9e:	1e4a      	subs	r2, r1, #1
 8013ea0:	2568      	movs	r5, #104	; 0x68
 8013ea2:	4355      	muls	r5, r2
 8013ea4:	460e      	mov	r6, r1
 8013ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013eaa:	f001 f8ab 	bl	8015004 <_malloc_r>
 8013eae:	4604      	mov	r4, r0
 8013eb0:	b140      	cbz	r0, 8013ec4 <__sfmoreglue+0x28>
 8013eb2:	2100      	movs	r1, #0
 8013eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8013eb8:	300c      	adds	r0, #12
 8013eba:	60a0      	str	r0, [r4, #8]
 8013ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013ec0:	f7fd fb53 	bl	801156a <memset>
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	bd70      	pop	{r4, r5, r6, pc}

08013ec8 <__sinit>:
 8013ec8:	6983      	ldr	r3, [r0, #24]
 8013eca:	b510      	push	{r4, lr}
 8013ecc:	4604      	mov	r4, r0
 8013ece:	bb33      	cbnz	r3, 8013f1e <__sinit+0x56>
 8013ed0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013ed4:	6503      	str	r3, [r0, #80]	; 0x50
 8013ed6:	4b12      	ldr	r3, [pc, #72]	; (8013f20 <__sinit+0x58>)
 8013ed8:	4a12      	ldr	r2, [pc, #72]	; (8013f24 <__sinit+0x5c>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	6282      	str	r2, [r0, #40]	; 0x28
 8013ede:	4298      	cmp	r0, r3
 8013ee0:	bf04      	itt	eq
 8013ee2:	2301      	moveq	r3, #1
 8013ee4:	6183      	streq	r3, [r0, #24]
 8013ee6:	f000 f81f 	bl	8013f28 <__sfp>
 8013eea:	6060      	str	r0, [r4, #4]
 8013eec:	4620      	mov	r0, r4
 8013eee:	f000 f81b 	bl	8013f28 <__sfp>
 8013ef2:	60a0      	str	r0, [r4, #8]
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	f000 f817 	bl	8013f28 <__sfp>
 8013efa:	2200      	movs	r2, #0
 8013efc:	60e0      	str	r0, [r4, #12]
 8013efe:	2104      	movs	r1, #4
 8013f00:	6860      	ldr	r0, [r4, #4]
 8013f02:	f7ff ffa1 	bl	8013e48 <std>
 8013f06:	2201      	movs	r2, #1
 8013f08:	2109      	movs	r1, #9
 8013f0a:	68a0      	ldr	r0, [r4, #8]
 8013f0c:	f7ff ff9c 	bl	8013e48 <std>
 8013f10:	2202      	movs	r2, #2
 8013f12:	2112      	movs	r1, #18
 8013f14:	68e0      	ldr	r0, [r4, #12]
 8013f16:	f7ff ff97 	bl	8013e48 <std>
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	61a3      	str	r3, [r4, #24]
 8013f1e:	bd10      	pop	{r4, pc}
 8013f20:	08016374 	.word	0x08016374
 8013f24:	08013e91 	.word	0x08013e91

08013f28 <__sfp>:
 8013f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f2a:	4b1b      	ldr	r3, [pc, #108]	; (8013f98 <__sfp+0x70>)
 8013f2c:	681e      	ldr	r6, [r3, #0]
 8013f2e:	69b3      	ldr	r3, [r6, #24]
 8013f30:	4607      	mov	r7, r0
 8013f32:	b913      	cbnz	r3, 8013f3a <__sfp+0x12>
 8013f34:	4630      	mov	r0, r6
 8013f36:	f7ff ffc7 	bl	8013ec8 <__sinit>
 8013f3a:	3648      	adds	r6, #72	; 0x48
 8013f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013f40:	3b01      	subs	r3, #1
 8013f42:	d503      	bpl.n	8013f4c <__sfp+0x24>
 8013f44:	6833      	ldr	r3, [r6, #0]
 8013f46:	b133      	cbz	r3, 8013f56 <__sfp+0x2e>
 8013f48:	6836      	ldr	r6, [r6, #0]
 8013f4a:	e7f7      	b.n	8013f3c <__sfp+0x14>
 8013f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013f50:	b16d      	cbz	r5, 8013f6e <__sfp+0x46>
 8013f52:	3468      	adds	r4, #104	; 0x68
 8013f54:	e7f4      	b.n	8013f40 <__sfp+0x18>
 8013f56:	2104      	movs	r1, #4
 8013f58:	4638      	mov	r0, r7
 8013f5a:	f7ff ff9f 	bl	8013e9c <__sfmoreglue>
 8013f5e:	6030      	str	r0, [r6, #0]
 8013f60:	2800      	cmp	r0, #0
 8013f62:	d1f1      	bne.n	8013f48 <__sfp+0x20>
 8013f64:	230c      	movs	r3, #12
 8013f66:	603b      	str	r3, [r7, #0]
 8013f68:	4604      	mov	r4, r0
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f6e:	4b0b      	ldr	r3, [pc, #44]	; (8013f9c <__sfp+0x74>)
 8013f70:	6665      	str	r5, [r4, #100]	; 0x64
 8013f72:	e9c4 5500 	strd	r5, r5, [r4]
 8013f76:	60a5      	str	r5, [r4, #8]
 8013f78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013f7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013f80:	2208      	movs	r2, #8
 8013f82:	4629      	mov	r1, r5
 8013f84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f88:	f7fd faef 	bl	801156a <memset>
 8013f8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013f90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013f94:	e7e9      	b.n	8013f6a <__sfp+0x42>
 8013f96:	bf00      	nop
 8013f98:	08016374 	.word	0x08016374
 8013f9c:	ffff0001 	.word	0xffff0001

08013fa0 <_fwalk_reent>:
 8013fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fa4:	4680      	mov	r8, r0
 8013fa6:	4689      	mov	r9, r1
 8013fa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013fac:	2600      	movs	r6, #0
 8013fae:	b914      	cbnz	r4, 8013fb6 <_fwalk_reent+0x16>
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013fba:	3f01      	subs	r7, #1
 8013fbc:	d501      	bpl.n	8013fc2 <_fwalk_reent+0x22>
 8013fbe:	6824      	ldr	r4, [r4, #0]
 8013fc0:	e7f5      	b.n	8013fae <_fwalk_reent+0xe>
 8013fc2:	89ab      	ldrh	r3, [r5, #12]
 8013fc4:	2b01      	cmp	r3, #1
 8013fc6:	d907      	bls.n	8013fd8 <_fwalk_reent+0x38>
 8013fc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013fcc:	3301      	adds	r3, #1
 8013fce:	d003      	beq.n	8013fd8 <_fwalk_reent+0x38>
 8013fd0:	4629      	mov	r1, r5
 8013fd2:	4640      	mov	r0, r8
 8013fd4:	47c8      	blx	r9
 8013fd6:	4306      	orrs	r6, r0
 8013fd8:	3568      	adds	r5, #104	; 0x68
 8013fda:	e7ee      	b.n	8013fba <_fwalk_reent+0x1a>

08013fdc <rshift>:
 8013fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fde:	6906      	ldr	r6, [r0, #16]
 8013fe0:	114b      	asrs	r3, r1, #5
 8013fe2:	429e      	cmp	r6, r3
 8013fe4:	f100 0414 	add.w	r4, r0, #20
 8013fe8:	dd30      	ble.n	801404c <rshift+0x70>
 8013fea:	f011 011f 	ands.w	r1, r1, #31
 8013fee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013ff2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013ff6:	d108      	bne.n	801400a <rshift+0x2e>
 8013ff8:	4621      	mov	r1, r4
 8013ffa:	42b2      	cmp	r2, r6
 8013ffc:	460b      	mov	r3, r1
 8013ffe:	d211      	bcs.n	8014024 <rshift+0x48>
 8014000:	f852 3b04 	ldr.w	r3, [r2], #4
 8014004:	f841 3b04 	str.w	r3, [r1], #4
 8014008:	e7f7      	b.n	8013ffa <rshift+0x1e>
 801400a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801400e:	f1c1 0c20 	rsb	ip, r1, #32
 8014012:	40cd      	lsrs	r5, r1
 8014014:	3204      	adds	r2, #4
 8014016:	4623      	mov	r3, r4
 8014018:	42b2      	cmp	r2, r6
 801401a:	4617      	mov	r7, r2
 801401c:	d30c      	bcc.n	8014038 <rshift+0x5c>
 801401e:	601d      	str	r5, [r3, #0]
 8014020:	b105      	cbz	r5, 8014024 <rshift+0x48>
 8014022:	3304      	adds	r3, #4
 8014024:	1b1a      	subs	r2, r3, r4
 8014026:	42a3      	cmp	r3, r4
 8014028:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801402c:	bf08      	it	eq
 801402e:	2300      	moveq	r3, #0
 8014030:	6102      	str	r2, [r0, #16]
 8014032:	bf08      	it	eq
 8014034:	6143      	streq	r3, [r0, #20]
 8014036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014038:	683f      	ldr	r7, [r7, #0]
 801403a:	fa07 f70c 	lsl.w	r7, r7, ip
 801403e:	433d      	orrs	r5, r7
 8014040:	f843 5b04 	str.w	r5, [r3], #4
 8014044:	f852 5b04 	ldr.w	r5, [r2], #4
 8014048:	40cd      	lsrs	r5, r1
 801404a:	e7e5      	b.n	8014018 <rshift+0x3c>
 801404c:	4623      	mov	r3, r4
 801404e:	e7e9      	b.n	8014024 <rshift+0x48>

08014050 <__hexdig_fun>:
 8014050:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014054:	2b09      	cmp	r3, #9
 8014056:	d802      	bhi.n	801405e <__hexdig_fun+0xe>
 8014058:	3820      	subs	r0, #32
 801405a:	b2c0      	uxtb	r0, r0
 801405c:	4770      	bx	lr
 801405e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014062:	2b05      	cmp	r3, #5
 8014064:	d801      	bhi.n	801406a <__hexdig_fun+0x1a>
 8014066:	3847      	subs	r0, #71	; 0x47
 8014068:	e7f7      	b.n	801405a <__hexdig_fun+0xa>
 801406a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801406e:	2b05      	cmp	r3, #5
 8014070:	d801      	bhi.n	8014076 <__hexdig_fun+0x26>
 8014072:	3827      	subs	r0, #39	; 0x27
 8014074:	e7f1      	b.n	801405a <__hexdig_fun+0xa>
 8014076:	2000      	movs	r0, #0
 8014078:	4770      	bx	lr

0801407a <__gethex>:
 801407a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801407e:	b08b      	sub	sp, #44	; 0x2c
 8014080:	468a      	mov	sl, r1
 8014082:	9002      	str	r0, [sp, #8]
 8014084:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014086:	9306      	str	r3, [sp, #24]
 8014088:	4690      	mov	r8, r2
 801408a:	f000 fad0 	bl	801462e <__localeconv_l>
 801408e:	6803      	ldr	r3, [r0, #0]
 8014090:	9303      	str	r3, [sp, #12]
 8014092:	4618      	mov	r0, r3
 8014094:	f7ec f8d4 	bl	8000240 <strlen>
 8014098:	9b03      	ldr	r3, [sp, #12]
 801409a:	9001      	str	r0, [sp, #4]
 801409c:	4403      	add	r3, r0
 801409e:	f04f 0b00 	mov.w	fp, #0
 80140a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80140a6:	9307      	str	r3, [sp, #28]
 80140a8:	f8da 3000 	ldr.w	r3, [sl]
 80140ac:	3302      	adds	r3, #2
 80140ae:	461f      	mov	r7, r3
 80140b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80140b4:	2830      	cmp	r0, #48	; 0x30
 80140b6:	d06c      	beq.n	8014192 <__gethex+0x118>
 80140b8:	f7ff ffca 	bl	8014050 <__hexdig_fun>
 80140bc:	4604      	mov	r4, r0
 80140be:	2800      	cmp	r0, #0
 80140c0:	d16a      	bne.n	8014198 <__gethex+0x11e>
 80140c2:	9a01      	ldr	r2, [sp, #4]
 80140c4:	9903      	ldr	r1, [sp, #12]
 80140c6:	4638      	mov	r0, r7
 80140c8:	f001 f99b 	bl	8015402 <strncmp>
 80140cc:	2800      	cmp	r0, #0
 80140ce:	d166      	bne.n	801419e <__gethex+0x124>
 80140d0:	9b01      	ldr	r3, [sp, #4]
 80140d2:	5cf8      	ldrb	r0, [r7, r3]
 80140d4:	18fe      	adds	r6, r7, r3
 80140d6:	f7ff ffbb 	bl	8014050 <__hexdig_fun>
 80140da:	2800      	cmp	r0, #0
 80140dc:	d062      	beq.n	80141a4 <__gethex+0x12a>
 80140de:	4633      	mov	r3, r6
 80140e0:	7818      	ldrb	r0, [r3, #0]
 80140e2:	2830      	cmp	r0, #48	; 0x30
 80140e4:	461f      	mov	r7, r3
 80140e6:	f103 0301 	add.w	r3, r3, #1
 80140ea:	d0f9      	beq.n	80140e0 <__gethex+0x66>
 80140ec:	f7ff ffb0 	bl	8014050 <__hexdig_fun>
 80140f0:	fab0 f580 	clz	r5, r0
 80140f4:	096d      	lsrs	r5, r5, #5
 80140f6:	4634      	mov	r4, r6
 80140f8:	f04f 0b01 	mov.w	fp, #1
 80140fc:	463a      	mov	r2, r7
 80140fe:	4616      	mov	r6, r2
 8014100:	3201      	adds	r2, #1
 8014102:	7830      	ldrb	r0, [r6, #0]
 8014104:	f7ff ffa4 	bl	8014050 <__hexdig_fun>
 8014108:	2800      	cmp	r0, #0
 801410a:	d1f8      	bne.n	80140fe <__gethex+0x84>
 801410c:	9a01      	ldr	r2, [sp, #4]
 801410e:	9903      	ldr	r1, [sp, #12]
 8014110:	4630      	mov	r0, r6
 8014112:	f001 f976 	bl	8015402 <strncmp>
 8014116:	b950      	cbnz	r0, 801412e <__gethex+0xb4>
 8014118:	b954      	cbnz	r4, 8014130 <__gethex+0xb6>
 801411a:	9b01      	ldr	r3, [sp, #4]
 801411c:	18f4      	adds	r4, r6, r3
 801411e:	4622      	mov	r2, r4
 8014120:	4616      	mov	r6, r2
 8014122:	3201      	adds	r2, #1
 8014124:	7830      	ldrb	r0, [r6, #0]
 8014126:	f7ff ff93 	bl	8014050 <__hexdig_fun>
 801412a:	2800      	cmp	r0, #0
 801412c:	d1f8      	bne.n	8014120 <__gethex+0xa6>
 801412e:	b10c      	cbz	r4, 8014134 <__gethex+0xba>
 8014130:	1ba4      	subs	r4, r4, r6
 8014132:	00a4      	lsls	r4, r4, #2
 8014134:	7833      	ldrb	r3, [r6, #0]
 8014136:	2b50      	cmp	r3, #80	; 0x50
 8014138:	d001      	beq.n	801413e <__gethex+0xc4>
 801413a:	2b70      	cmp	r3, #112	; 0x70
 801413c:	d140      	bne.n	80141c0 <__gethex+0x146>
 801413e:	7873      	ldrb	r3, [r6, #1]
 8014140:	2b2b      	cmp	r3, #43	; 0x2b
 8014142:	d031      	beq.n	80141a8 <__gethex+0x12e>
 8014144:	2b2d      	cmp	r3, #45	; 0x2d
 8014146:	d033      	beq.n	80141b0 <__gethex+0x136>
 8014148:	1c71      	adds	r1, r6, #1
 801414a:	f04f 0900 	mov.w	r9, #0
 801414e:	7808      	ldrb	r0, [r1, #0]
 8014150:	f7ff ff7e 	bl	8014050 <__hexdig_fun>
 8014154:	1e43      	subs	r3, r0, #1
 8014156:	b2db      	uxtb	r3, r3
 8014158:	2b18      	cmp	r3, #24
 801415a:	d831      	bhi.n	80141c0 <__gethex+0x146>
 801415c:	f1a0 0210 	sub.w	r2, r0, #16
 8014160:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014164:	f7ff ff74 	bl	8014050 <__hexdig_fun>
 8014168:	1e43      	subs	r3, r0, #1
 801416a:	b2db      	uxtb	r3, r3
 801416c:	2b18      	cmp	r3, #24
 801416e:	d922      	bls.n	80141b6 <__gethex+0x13c>
 8014170:	f1b9 0f00 	cmp.w	r9, #0
 8014174:	d000      	beq.n	8014178 <__gethex+0xfe>
 8014176:	4252      	negs	r2, r2
 8014178:	4414      	add	r4, r2
 801417a:	f8ca 1000 	str.w	r1, [sl]
 801417e:	b30d      	cbz	r5, 80141c4 <__gethex+0x14a>
 8014180:	f1bb 0f00 	cmp.w	fp, #0
 8014184:	bf0c      	ite	eq
 8014186:	2706      	moveq	r7, #6
 8014188:	2700      	movne	r7, #0
 801418a:	4638      	mov	r0, r7
 801418c:	b00b      	add	sp, #44	; 0x2c
 801418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014192:	f10b 0b01 	add.w	fp, fp, #1
 8014196:	e78a      	b.n	80140ae <__gethex+0x34>
 8014198:	2500      	movs	r5, #0
 801419a:	462c      	mov	r4, r5
 801419c:	e7ae      	b.n	80140fc <__gethex+0x82>
 801419e:	463e      	mov	r6, r7
 80141a0:	2501      	movs	r5, #1
 80141a2:	e7c7      	b.n	8014134 <__gethex+0xba>
 80141a4:	4604      	mov	r4, r0
 80141a6:	e7fb      	b.n	80141a0 <__gethex+0x126>
 80141a8:	f04f 0900 	mov.w	r9, #0
 80141ac:	1cb1      	adds	r1, r6, #2
 80141ae:	e7ce      	b.n	801414e <__gethex+0xd4>
 80141b0:	f04f 0901 	mov.w	r9, #1
 80141b4:	e7fa      	b.n	80141ac <__gethex+0x132>
 80141b6:	230a      	movs	r3, #10
 80141b8:	fb03 0202 	mla	r2, r3, r2, r0
 80141bc:	3a10      	subs	r2, #16
 80141be:	e7cf      	b.n	8014160 <__gethex+0xe6>
 80141c0:	4631      	mov	r1, r6
 80141c2:	e7da      	b.n	801417a <__gethex+0x100>
 80141c4:	1bf3      	subs	r3, r6, r7
 80141c6:	3b01      	subs	r3, #1
 80141c8:	4629      	mov	r1, r5
 80141ca:	2b07      	cmp	r3, #7
 80141cc:	dc49      	bgt.n	8014262 <__gethex+0x1e8>
 80141ce:	9802      	ldr	r0, [sp, #8]
 80141d0:	f000 fabc 	bl	801474c <_Balloc>
 80141d4:	9b01      	ldr	r3, [sp, #4]
 80141d6:	f100 0914 	add.w	r9, r0, #20
 80141da:	f04f 0b00 	mov.w	fp, #0
 80141de:	f1c3 0301 	rsb	r3, r3, #1
 80141e2:	4605      	mov	r5, r0
 80141e4:	f8cd 9010 	str.w	r9, [sp, #16]
 80141e8:	46da      	mov	sl, fp
 80141ea:	9308      	str	r3, [sp, #32]
 80141ec:	42b7      	cmp	r7, r6
 80141ee:	d33b      	bcc.n	8014268 <__gethex+0x1ee>
 80141f0:	9804      	ldr	r0, [sp, #16]
 80141f2:	f840 ab04 	str.w	sl, [r0], #4
 80141f6:	eba0 0009 	sub.w	r0, r0, r9
 80141fa:	1080      	asrs	r0, r0, #2
 80141fc:	6128      	str	r0, [r5, #16]
 80141fe:	0147      	lsls	r7, r0, #5
 8014200:	4650      	mov	r0, sl
 8014202:	f000 fb67 	bl	80148d4 <__hi0bits>
 8014206:	f8d8 6000 	ldr.w	r6, [r8]
 801420a:	1a3f      	subs	r7, r7, r0
 801420c:	42b7      	cmp	r7, r6
 801420e:	dd64      	ble.n	80142da <__gethex+0x260>
 8014210:	1bbf      	subs	r7, r7, r6
 8014212:	4639      	mov	r1, r7
 8014214:	4628      	mov	r0, r5
 8014216:	f000 fe78 	bl	8014f0a <__any_on>
 801421a:	4682      	mov	sl, r0
 801421c:	b178      	cbz	r0, 801423e <__gethex+0x1c4>
 801421e:	1e7b      	subs	r3, r7, #1
 8014220:	1159      	asrs	r1, r3, #5
 8014222:	f003 021f 	and.w	r2, r3, #31
 8014226:	f04f 0a01 	mov.w	sl, #1
 801422a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801422e:	fa0a f202 	lsl.w	r2, sl, r2
 8014232:	420a      	tst	r2, r1
 8014234:	d003      	beq.n	801423e <__gethex+0x1c4>
 8014236:	4553      	cmp	r3, sl
 8014238:	dc46      	bgt.n	80142c8 <__gethex+0x24e>
 801423a:	f04f 0a02 	mov.w	sl, #2
 801423e:	4639      	mov	r1, r7
 8014240:	4628      	mov	r0, r5
 8014242:	f7ff fecb 	bl	8013fdc <rshift>
 8014246:	443c      	add	r4, r7
 8014248:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801424c:	42a3      	cmp	r3, r4
 801424e:	da52      	bge.n	80142f6 <__gethex+0x27c>
 8014250:	4629      	mov	r1, r5
 8014252:	9802      	ldr	r0, [sp, #8]
 8014254:	f000 faae 	bl	80147b4 <_Bfree>
 8014258:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801425a:	2300      	movs	r3, #0
 801425c:	6013      	str	r3, [r2, #0]
 801425e:	27a3      	movs	r7, #163	; 0xa3
 8014260:	e793      	b.n	801418a <__gethex+0x110>
 8014262:	3101      	adds	r1, #1
 8014264:	105b      	asrs	r3, r3, #1
 8014266:	e7b0      	b.n	80141ca <__gethex+0x150>
 8014268:	1e73      	subs	r3, r6, #1
 801426a:	9305      	str	r3, [sp, #20]
 801426c:	9a07      	ldr	r2, [sp, #28]
 801426e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014272:	4293      	cmp	r3, r2
 8014274:	d018      	beq.n	80142a8 <__gethex+0x22e>
 8014276:	f1bb 0f20 	cmp.w	fp, #32
 801427a:	d107      	bne.n	801428c <__gethex+0x212>
 801427c:	9b04      	ldr	r3, [sp, #16]
 801427e:	f8c3 a000 	str.w	sl, [r3]
 8014282:	3304      	adds	r3, #4
 8014284:	f04f 0a00 	mov.w	sl, #0
 8014288:	9304      	str	r3, [sp, #16]
 801428a:	46d3      	mov	fp, sl
 801428c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014290:	f7ff fede 	bl	8014050 <__hexdig_fun>
 8014294:	f000 000f 	and.w	r0, r0, #15
 8014298:	fa00 f00b 	lsl.w	r0, r0, fp
 801429c:	ea4a 0a00 	orr.w	sl, sl, r0
 80142a0:	f10b 0b04 	add.w	fp, fp, #4
 80142a4:	9b05      	ldr	r3, [sp, #20]
 80142a6:	e00d      	b.n	80142c4 <__gethex+0x24a>
 80142a8:	9b05      	ldr	r3, [sp, #20]
 80142aa:	9a08      	ldr	r2, [sp, #32]
 80142ac:	4413      	add	r3, r2
 80142ae:	42bb      	cmp	r3, r7
 80142b0:	d3e1      	bcc.n	8014276 <__gethex+0x1fc>
 80142b2:	4618      	mov	r0, r3
 80142b4:	9a01      	ldr	r2, [sp, #4]
 80142b6:	9903      	ldr	r1, [sp, #12]
 80142b8:	9309      	str	r3, [sp, #36]	; 0x24
 80142ba:	f001 f8a2 	bl	8015402 <strncmp>
 80142be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142c0:	2800      	cmp	r0, #0
 80142c2:	d1d8      	bne.n	8014276 <__gethex+0x1fc>
 80142c4:	461e      	mov	r6, r3
 80142c6:	e791      	b.n	80141ec <__gethex+0x172>
 80142c8:	1eb9      	subs	r1, r7, #2
 80142ca:	4628      	mov	r0, r5
 80142cc:	f000 fe1d 	bl	8014f0a <__any_on>
 80142d0:	2800      	cmp	r0, #0
 80142d2:	d0b2      	beq.n	801423a <__gethex+0x1c0>
 80142d4:	f04f 0a03 	mov.w	sl, #3
 80142d8:	e7b1      	b.n	801423e <__gethex+0x1c4>
 80142da:	da09      	bge.n	80142f0 <__gethex+0x276>
 80142dc:	1bf7      	subs	r7, r6, r7
 80142de:	4629      	mov	r1, r5
 80142e0:	463a      	mov	r2, r7
 80142e2:	9802      	ldr	r0, [sp, #8]
 80142e4:	f000 fc32 	bl	8014b4c <__lshift>
 80142e8:	1be4      	subs	r4, r4, r7
 80142ea:	4605      	mov	r5, r0
 80142ec:	f100 0914 	add.w	r9, r0, #20
 80142f0:	f04f 0a00 	mov.w	sl, #0
 80142f4:	e7a8      	b.n	8014248 <__gethex+0x1ce>
 80142f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80142fa:	42a0      	cmp	r0, r4
 80142fc:	dd6a      	ble.n	80143d4 <__gethex+0x35a>
 80142fe:	1b04      	subs	r4, r0, r4
 8014300:	42a6      	cmp	r6, r4
 8014302:	dc2e      	bgt.n	8014362 <__gethex+0x2e8>
 8014304:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014308:	2b02      	cmp	r3, #2
 801430a:	d022      	beq.n	8014352 <__gethex+0x2d8>
 801430c:	2b03      	cmp	r3, #3
 801430e:	d024      	beq.n	801435a <__gethex+0x2e0>
 8014310:	2b01      	cmp	r3, #1
 8014312:	d115      	bne.n	8014340 <__gethex+0x2c6>
 8014314:	42a6      	cmp	r6, r4
 8014316:	d113      	bne.n	8014340 <__gethex+0x2c6>
 8014318:	2e01      	cmp	r6, #1
 801431a:	dc0b      	bgt.n	8014334 <__gethex+0x2ba>
 801431c:	9a06      	ldr	r2, [sp, #24]
 801431e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014322:	6013      	str	r3, [r2, #0]
 8014324:	2301      	movs	r3, #1
 8014326:	612b      	str	r3, [r5, #16]
 8014328:	f8c9 3000 	str.w	r3, [r9]
 801432c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801432e:	2762      	movs	r7, #98	; 0x62
 8014330:	601d      	str	r5, [r3, #0]
 8014332:	e72a      	b.n	801418a <__gethex+0x110>
 8014334:	1e71      	subs	r1, r6, #1
 8014336:	4628      	mov	r0, r5
 8014338:	f000 fde7 	bl	8014f0a <__any_on>
 801433c:	2800      	cmp	r0, #0
 801433e:	d1ed      	bne.n	801431c <__gethex+0x2a2>
 8014340:	4629      	mov	r1, r5
 8014342:	9802      	ldr	r0, [sp, #8]
 8014344:	f000 fa36 	bl	80147b4 <_Bfree>
 8014348:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801434a:	2300      	movs	r3, #0
 801434c:	6013      	str	r3, [r2, #0]
 801434e:	2750      	movs	r7, #80	; 0x50
 8014350:	e71b      	b.n	801418a <__gethex+0x110>
 8014352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014354:	2b00      	cmp	r3, #0
 8014356:	d0e1      	beq.n	801431c <__gethex+0x2a2>
 8014358:	e7f2      	b.n	8014340 <__gethex+0x2c6>
 801435a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801435c:	2b00      	cmp	r3, #0
 801435e:	d1dd      	bne.n	801431c <__gethex+0x2a2>
 8014360:	e7ee      	b.n	8014340 <__gethex+0x2c6>
 8014362:	1e67      	subs	r7, r4, #1
 8014364:	f1ba 0f00 	cmp.w	sl, #0
 8014368:	d131      	bne.n	80143ce <__gethex+0x354>
 801436a:	b127      	cbz	r7, 8014376 <__gethex+0x2fc>
 801436c:	4639      	mov	r1, r7
 801436e:	4628      	mov	r0, r5
 8014370:	f000 fdcb 	bl	8014f0a <__any_on>
 8014374:	4682      	mov	sl, r0
 8014376:	117a      	asrs	r2, r7, #5
 8014378:	2301      	movs	r3, #1
 801437a:	f007 071f 	and.w	r7, r7, #31
 801437e:	fa03 f707 	lsl.w	r7, r3, r7
 8014382:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8014386:	4621      	mov	r1, r4
 8014388:	421f      	tst	r7, r3
 801438a:	4628      	mov	r0, r5
 801438c:	bf18      	it	ne
 801438e:	f04a 0a02 	orrne.w	sl, sl, #2
 8014392:	1b36      	subs	r6, r6, r4
 8014394:	f7ff fe22 	bl	8013fdc <rshift>
 8014398:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801439c:	2702      	movs	r7, #2
 801439e:	f1ba 0f00 	cmp.w	sl, #0
 80143a2:	d048      	beq.n	8014436 <__gethex+0x3bc>
 80143a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80143a8:	2b02      	cmp	r3, #2
 80143aa:	d015      	beq.n	80143d8 <__gethex+0x35e>
 80143ac:	2b03      	cmp	r3, #3
 80143ae:	d017      	beq.n	80143e0 <__gethex+0x366>
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d109      	bne.n	80143c8 <__gethex+0x34e>
 80143b4:	f01a 0f02 	tst.w	sl, #2
 80143b8:	d006      	beq.n	80143c8 <__gethex+0x34e>
 80143ba:	f8d9 3000 	ldr.w	r3, [r9]
 80143be:	ea4a 0a03 	orr.w	sl, sl, r3
 80143c2:	f01a 0f01 	tst.w	sl, #1
 80143c6:	d10e      	bne.n	80143e6 <__gethex+0x36c>
 80143c8:	f047 0710 	orr.w	r7, r7, #16
 80143cc:	e033      	b.n	8014436 <__gethex+0x3bc>
 80143ce:	f04f 0a01 	mov.w	sl, #1
 80143d2:	e7d0      	b.n	8014376 <__gethex+0x2fc>
 80143d4:	2701      	movs	r7, #1
 80143d6:	e7e2      	b.n	801439e <__gethex+0x324>
 80143d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143da:	f1c3 0301 	rsb	r3, r3, #1
 80143de:	9315      	str	r3, [sp, #84]	; 0x54
 80143e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d0f0      	beq.n	80143c8 <__gethex+0x34e>
 80143e6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80143ea:	f105 0314 	add.w	r3, r5, #20
 80143ee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80143f2:	eb03 010a 	add.w	r1, r3, sl
 80143f6:	f04f 0c00 	mov.w	ip, #0
 80143fa:	4618      	mov	r0, r3
 80143fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014400:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014404:	d01c      	beq.n	8014440 <__gethex+0x3c6>
 8014406:	3201      	adds	r2, #1
 8014408:	6002      	str	r2, [r0, #0]
 801440a:	2f02      	cmp	r7, #2
 801440c:	f105 0314 	add.w	r3, r5, #20
 8014410:	d138      	bne.n	8014484 <__gethex+0x40a>
 8014412:	f8d8 2000 	ldr.w	r2, [r8]
 8014416:	3a01      	subs	r2, #1
 8014418:	42b2      	cmp	r2, r6
 801441a:	d10a      	bne.n	8014432 <__gethex+0x3b8>
 801441c:	1171      	asrs	r1, r6, #5
 801441e:	2201      	movs	r2, #1
 8014420:	f006 061f 	and.w	r6, r6, #31
 8014424:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014428:	fa02 f606 	lsl.w	r6, r2, r6
 801442c:	421e      	tst	r6, r3
 801442e:	bf18      	it	ne
 8014430:	4617      	movne	r7, r2
 8014432:	f047 0720 	orr.w	r7, r7, #32
 8014436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014438:	601d      	str	r5, [r3, #0]
 801443a:	9b06      	ldr	r3, [sp, #24]
 801443c:	601c      	str	r4, [r3, #0]
 801443e:	e6a4      	b.n	801418a <__gethex+0x110>
 8014440:	4299      	cmp	r1, r3
 8014442:	f843 cc04 	str.w	ip, [r3, #-4]
 8014446:	d8d8      	bhi.n	80143fa <__gethex+0x380>
 8014448:	68ab      	ldr	r3, [r5, #8]
 801444a:	4599      	cmp	r9, r3
 801444c:	db12      	blt.n	8014474 <__gethex+0x3fa>
 801444e:	6869      	ldr	r1, [r5, #4]
 8014450:	9802      	ldr	r0, [sp, #8]
 8014452:	3101      	adds	r1, #1
 8014454:	f000 f97a 	bl	801474c <_Balloc>
 8014458:	692a      	ldr	r2, [r5, #16]
 801445a:	3202      	adds	r2, #2
 801445c:	f105 010c 	add.w	r1, r5, #12
 8014460:	4683      	mov	fp, r0
 8014462:	0092      	lsls	r2, r2, #2
 8014464:	300c      	adds	r0, #12
 8014466:	f7fd f875 	bl	8011554 <memcpy>
 801446a:	4629      	mov	r1, r5
 801446c:	9802      	ldr	r0, [sp, #8]
 801446e:	f000 f9a1 	bl	80147b4 <_Bfree>
 8014472:	465d      	mov	r5, fp
 8014474:	692b      	ldr	r3, [r5, #16]
 8014476:	1c5a      	adds	r2, r3, #1
 8014478:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801447c:	612a      	str	r2, [r5, #16]
 801447e:	2201      	movs	r2, #1
 8014480:	615a      	str	r2, [r3, #20]
 8014482:	e7c2      	b.n	801440a <__gethex+0x390>
 8014484:	692a      	ldr	r2, [r5, #16]
 8014486:	454a      	cmp	r2, r9
 8014488:	dd0b      	ble.n	80144a2 <__gethex+0x428>
 801448a:	2101      	movs	r1, #1
 801448c:	4628      	mov	r0, r5
 801448e:	f7ff fda5 	bl	8013fdc <rshift>
 8014492:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014496:	3401      	adds	r4, #1
 8014498:	42a3      	cmp	r3, r4
 801449a:	f6ff aed9 	blt.w	8014250 <__gethex+0x1d6>
 801449e:	2701      	movs	r7, #1
 80144a0:	e7c7      	b.n	8014432 <__gethex+0x3b8>
 80144a2:	f016 061f 	ands.w	r6, r6, #31
 80144a6:	d0fa      	beq.n	801449e <__gethex+0x424>
 80144a8:	449a      	add	sl, r3
 80144aa:	f1c6 0620 	rsb	r6, r6, #32
 80144ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80144b2:	f000 fa0f 	bl	80148d4 <__hi0bits>
 80144b6:	42b0      	cmp	r0, r6
 80144b8:	dbe7      	blt.n	801448a <__gethex+0x410>
 80144ba:	e7f0      	b.n	801449e <__gethex+0x424>

080144bc <L_shift>:
 80144bc:	f1c2 0208 	rsb	r2, r2, #8
 80144c0:	0092      	lsls	r2, r2, #2
 80144c2:	b570      	push	{r4, r5, r6, lr}
 80144c4:	f1c2 0620 	rsb	r6, r2, #32
 80144c8:	6843      	ldr	r3, [r0, #4]
 80144ca:	6804      	ldr	r4, [r0, #0]
 80144cc:	fa03 f506 	lsl.w	r5, r3, r6
 80144d0:	432c      	orrs	r4, r5
 80144d2:	40d3      	lsrs	r3, r2
 80144d4:	6004      	str	r4, [r0, #0]
 80144d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80144da:	4288      	cmp	r0, r1
 80144dc:	d3f4      	bcc.n	80144c8 <L_shift+0xc>
 80144de:	bd70      	pop	{r4, r5, r6, pc}

080144e0 <__match>:
 80144e0:	b530      	push	{r4, r5, lr}
 80144e2:	6803      	ldr	r3, [r0, #0]
 80144e4:	3301      	adds	r3, #1
 80144e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80144ea:	b914      	cbnz	r4, 80144f2 <__match+0x12>
 80144ec:	6003      	str	r3, [r0, #0]
 80144ee:	2001      	movs	r0, #1
 80144f0:	bd30      	pop	{r4, r5, pc}
 80144f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80144fa:	2d19      	cmp	r5, #25
 80144fc:	bf98      	it	ls
 80144fe:	3220      	addls	r2, #32
 8014500:	42a2      	cmp	r2, r4
 8014502:	d0f0      	beq.n	80144e6 <__match+0x6>
 8014504:	2000      	movs	r0, #0
 8014506:	e7f3      	b.n	80144f0 <__match+0x10>

08014508 <__hexnan>:
 8014508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801450c:	680b      	ldr	r3, [r1, #0]
 801450e:	6801      	ldr	r1, [r0, #0]
 8014510:	115f      	asrs	r7, r3, #5
 8014512:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8014516:	f013 031f 	ands.w	r3, r3, #31
 801451a:	b087      	sub	sp, #28
 801451c:	bf18      	it	ne
 801451e:	3704      	addne	r7, #4
 8014520:	2500      	movs	r5, #0
 8014522:	1f3e      	subs	r6, r7, #4
 8014524:	4682      	mov	sl, r0
 8014526:	4690      	mov	r8, r2
 8014528:	9301      	str	r3, [sp, #4]
 801452a:	f847 5c04 	str.w	r5, [r7, #-4]
 801452e:	46b1      	mov	r9, r6
 8014530:	4634      	mov	r4, r6
 8014532:	9502      	str	r5, [sp, #8]
 8014534:	46ab      	mov	fp, r5
 8014536:	784a      	ldrb	r2, [r1, #1]
 8014538:	1c4b      	adds	r3, r1, #1
 801453a:	9303      	str	r3, [sp, #12]
 801453c:	b342      	cbz	r2, 8014590 <__hexnan+0x88>
 801453e:	4610      	mov	r0, r2
 8014540:	9105      	str	r1, [sp, #20]
 8014542:	9204      	str	r2, [sp, #16]
 8014544:	f7ff fd84 	bl	8014050 <__hexdig_fun>
 8014548:	2800      	cmp	r0, #0
 801454a:	d143      	bne.n	80145d4 <__hexnan+0xcc>
 801454c:	9a04      	ldr	r2, [sp, #16]
 801454e:	9905      	ldr	r1, [sp, #20]
 8014550:	2a20      	cmp	r2, #32
 8014552:	d818      	bhi.n	8014586 <__hexnan+0x7e>
 8014554:	9b02      	ldr	r3, [sp, #8]
 8014556:	459b      	cmp	fp, r3
 8014558:	dd13      	ble.n	8014582 <__hexnan+0x7a>
 801455a:	454c      	cmp	r4, r9
 801455c:	d206      	bcs.n	801456c <__hexnan+0x64>
 801455e:	2d07      	cmp	r5, #7
 8014560:	dc04      	bgt.n	801456c <__hexnan+0x64>
 8014562:	462a      	mov	r2, r5
 8014564:	4649      	mov	r1, r9
 8014566:	4620      	mov	r0, r4
 8014568:	f7ff ffa8 	bl	80144bc <L_shift>
 801456c:	4544      	cmp	r4, r8
 801456e:	d944      	bls.n	80145fa <__hexnan+0xf2>
 8014570:	2300      	movs	r3, #0
 8014572:	f1a4 0904 	sub.w	r9, r4, #4
 8014576:	f844 3c04 	str.w	r3, [r4, #-4]
 801457a:	f8cd b008 	str.w	fp, [sp, #8]
 801457e:	464c      	mov	r4, r9
 8014580:	461d      	mov	r5, r3
 8014582:	9903      	ldr	r1, [sp, #12]
 8014584:	e7d7      	b.n	8014536 <__hexnan+0x2e>
 8014586:	2a29      	cmp	r2, #41	; 0x29
 8014588:	d14a      	bne.n	8014620 <__hexnan+0x118>
 801458a:	3102      	adds	r1, #2
 801458c:	f8ca 1000 	str.w	r1, [sl]
 8014590:	f1bb 0f00 	cmp.w	fp, #0
 8014594:	d044      	beq.n	8014620 <__hexnan+0x118>
 8014596:	454c      	cmp	r4, r9
 8014598:	d206      	bcs.n	80145a8 <__hexnan+0xa0>
 801459a:	2d07      	cmp	r5, #7
 801459c:	dc04      	bgt.n	80145a8 <__hexnan+0xa0>
 801459e:	462a      	mov	r2, r5
 80145a0:	4649      	mov	r1, r9
 80145a2:	4620      	mov	r0, r4
 80145a4:	f7ff ff8a 	bl	80144bc <L_shift>
 80145a8:	4544      	cmp	r4, r8
 80145aa:	d928      	bls.n	80145fe <__hexnan+0xf6>
 80145ac:	4643      	mov	r3, r8
 80145ae:	f854 2b04 	ldr.w	r2, [r4], #4
 80145b2:	f843 2b04 	str.w	r2, [r3], #4
 80145b6:	42a6      	cmp	r6, r4
 80145b8:	d2f9      	bcs.n	80145ae <__hexnan+0xa6>
 80145ba:	2200      	movs	r2, #0
 80145bc:	f843 2b04 	str.w	r2, [r3], #4
 80145c0:	429e      	cmp	r6, r3
 80145c2:	d2fb      	bcs.n	80145bc <__hexnan+0xb4>
 80145c4:	6833      	ldr	r3, [r6, #0]
 80145c6:	b91b      	cbnz	r3, 80145d0 <__hexnan+0xc8>
 80145c8:	4546      	cmp	r6, r8
 80145ca:	d127      	bne.n	801461c <__hexnan+0x114>
 80145cc:	2301      	movs	r3, #1
 80145ce:	6033      	str	r3, [r6, #0]
 80145d0:	2005      	movs	r0, #5
 80145d2:	e026      	b.n	8014622 <__hexnan+0x11a>
 80145d4:	3501      	adds	r5, #1
 80145d6:	2d08      	cmp	r5, #8
 80145d8:	f10b 0b01 	add.w	fp, fp, #1
 80145dc:	dd06      	ble.n	80145ec <__hexnan+0xe4>
 80145de:	4544      	cmp	r4, r8
 80145e0:	d9cf      	bls.n	8014582 <__hexnan+0x7a>
 80145e2:	2300      	movs	r3, #0
 80145e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80145e8:	2501      	movs	r5, #1
 80145ea:	3c04      	subs	r4, #4
 80145ec:	6822      	ldr	r2, [r4, #0]
 80145ee:	f000 000f 	and.w	r0, r0, #15
 80145f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80145f6:	6020      	str	r0, [r4, #0]
 80145f8:	e7c3      	b.n	8014582 <__hexnan+0x7a>
 80145fa:	2508      	movs	r5, #8
 80145fc:	e7c1      	b.n	8014582 <__hexnan+0x7a>
 80145fe:	9b01      	ldr	r3, [sp, #4]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d0df      	beq.n	80145c4 <__hexnan+0xbc>
 8014604:	f04f 32ff 	mov.w	r2, #4294967295
 8014608:	f1c3 0320 	rsb	r3, r3, #32
 801460c:	fa22 f303 	lsr.w	r3, r2, r3
 8014610:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014614:	401a      	ands	r2, r3
 8014616:	f847 2c04 	str.w	r2, [r7, #-4]
 801461a:	e7d3      	b.n	80145c4 <__hexnan+0xbc>
 801461c:	3e04      	subs	r6, #4
 801461e:	e7d1      	b.n	80145c4 <__hexnan+0xbc>
 8014620:	2004      	movs	r0, #4
 8014622:	b007      	add	sp, #28
 8014624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014628 <__locale_ctype_ptr_l>:
 8014628:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801462c:	4770      	bx	lr

0801462e <__localeconv_l>:
 801462e:	30f0      	adds	r0, #240	; 0xf0
 8014630:	4770      	bx	lr
	...

08014634 <_localeconv_r>:
 8014634:	4b04      	ldr	r3, [pc, #16]	; (8014648 <_localeconv_r+0x14>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	6a18      	ldr	r0, [r3, #32]
 801463a:	4b04      	ldr	r3, [pc, #16]	; (801464c <_localeconv_r+0x18>)
 801463c:	2800      	cmp	r0, #0
 801463e:	bf08      	it	eq
 8014640:	4618      	moveq	r0, r3
 8014642:	30f0      	adds	r0, #240	; 0xf0
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop
 8014648:	20000180 	.word	0x20000180
 801464c:	200001e4 	.word	0x200001e4

08014650 <__swhatbuf_r>:
 8014650:	b570      	push	{r4, r5, r6, lr}
 8014652:	460e      	mov	r6, r1
 8014654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014658:	2900      	cmp	r1, #0
 801465a:	b096      	sub	sp, #88	; 0x58
 801465c:	4614      	mov	r4, r2
 801465e:	461d      	mov	r5, r3
 8014660:	da07      	bge.n	8014672 <__swhatbuf_r+0x22>
 8014662:	2300      	movs	r3, #0
 8014664:	602b      	str	r3, [r5, #0]
 8014666:	89b3      	ldrh	r3, [r6, #12]
 8014668:	061a      	lsls	r2, r3, #24
 801466a:	d410      	bmi.n	801468e <__swhatbuf_r+0x3e>
 801466c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014670:	e00e      	b.n	8014690 <__swhatbuf_r+0x40>
 8014672:	466a      	mov	r2, sp
 8014674:	f000 ff06 	bl	8015484 <_fstat_r>
 8014678:	2800      	cmp	r0, #0
 801467a:	dbf2      	blt.n	8014662 <__swhatbuf_r+0x12>
 801467c:	9a01      	ldr	r2, [sp, #4]
 801467e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014682:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014686:	425a      	negs	r2, r3
 8014688:	415a      	adcs	r2, r3
 801468a:	602a      	str	r2, [r5, #0]
 801468c:	e7ee      	b.n	801466c <__swhatbuf_r+0x1c>
 801468e:	2340      	movs	r3, #64	; 0x40
 8014690:	2000      	movs	r0, #0
 8014692:	6023      	str	r3, [r4, #0]
 8014694:	b016      	add	sp, #88	; 0x58
 8014696:	bd70      	pop	{r4, r5, r6, pc}

08014698 <__smakebuf_r>:
 8014698:	898b      	ldrh	r3, [r1, #12]
 801469a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801469c:	079d      	lsls	r5, r3, #30
 801469e:	4606      	mov	r6, r0
 80146a0:	460c      	mov	r4, r1
 80146a2:	d507      	bpl.n	80146b4 <__smakebuf_r+0x1c>
 80146a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80146a8:	6023      	str	r3, [r4, #0]
 80146aa:	6123      	str	r3, [r4, #16]
 80146ac:	2301      	movs	r3, #1
 80146ae:	6163      	str	r3, [r4, #20]
 80146b0:	b002      	add	sp, #8
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	ab01      	add	r3, sp, #4
 80146b6:	466a      	mov	r2, sp
 80146b8:	f7ff ffca 	bl	8014650 <__swhatbuf_r>
 80146bc:	9900      	ldr	r1, [sp, #0]
 80146be:	4605      	mov	r5, r0
 80146c0:	4630      	mov	r0, r6
 80146c2:	f000 fc9f 	bl	8015004 <_malloc_r>
 80146c6:	b948      	cbnz	r0, 80146dc <__smakebuf_r+0x44>
 80146c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146cc:	059a      	lsls	r2, r3, #22
 80146ce:	d4ef      	bmi.n	80146b0 <__smakebuf_r+0x18>
 80146d0:	f023 0303 	bic.w	r3, r3, #3
 80146d4:	f043 0302 	orr.w	r3, r3, #2
 80146d8:	81a3      	strh	r3, [r4, #12]
 80146da:	e7e3      	b.n	80146a4 <__smakebuf_r+0xc>
 80146dc:	4b0d      	ldr	r3, [pc, #52]	; (8014714 <__smakebuf_r+0x7c>)
 80146de:	62b3      	str	r3, [r6, #40]	; 0x28
 80146e0:	89a3      	ldrh	r3, [r4, #12]
 80146e2:	6020      	str	r0, [r4, #0]
 80146e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146e8:	81a3      	strh	r3, [r4, #12]
 80146ea:	9b00      	ldr	r3, [sp, #0]
 80146ec:	6163      	str	r3, [r4, #20]
 80146ee:	9b01      	ldr	r3, [sp, #4]
 80146f0:	6120      	str	r0, [r4, #16]
 80146f2:	b15b      	cbz	r3, 801470c <__smakebuf_r+0x74>
 80146f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146f8:	4630      	mov	r0, r6
 80146fa:	f000 fed5 	bl	80154a8 <_isatty_r>
 80146fe:	b128      	cbz	r0, 801470c <__smakebuf_r+0x74>
 8014700:	89a3      	ldrh	r3, [r4, #12]
 8014702:	f023 0303 	bic.w	r3, r3, #3
 8014706:	f043 0301 	orr.w	r3, r3, #1
 801470a:	81a3      	strh	r3, [r4, #12]
 801470c:	89a3      	ldrh	r3, [r4, #12]
 801470e:	431d      	orrs	r5, r3
 8014710:	81a5      	strh	r5, [r4, #12]
 8014712:	e7cd      	b.n	80146b0 <__smakebuf_r+0x18>
 8014714:	08013e91 	.word	0x08013e91

08014718 <malloc>:
 8014718:	4b02      	ldr	r3, [pc, #8]	; (8014724 <malloc+0xc>)
 801471a:	4601      	mov	r1, r0
 801471c:	6818      	ldr	r0, [r3, #0]
 801471e:	f000 bc71 	b.w	8015004 <_malloc_r>
 8014722:	bf00      	nop
 8014724:	20000180 	.word	0x20000180

08014728 <__ascii_mbtowc>:
 8014728:	b082      	sub	sp, #8
 801472a:	b901      	cbnz	r1, 801472e <__ascii_mbtowc+0x6>
 801472c:	a901      	add	r1, sp, #4
 801472e:	b142      	cbz	r2, 8014742 <__ascii_mbtowc+0x1a>
 8014730:	b14b      	cbz	r3, 8014746 <__ascii_mbtowc+0x1e>
 8014732:	7813      	ldrb	r3, [r2, #0]
 8014734:	600b      	str	r3, [r1, #0]
 8014736:	7812      	ldrb	r2, [r2, #0]
 8014738:	1c10      	adds	r0, r2, #0
 801473a:	bf18      	it	ne
 801473c:	2001      	movne	r0, #1
 801473e:	b002      	add	sp, #8
 8014740:	4770      	bx	lr
 8014742:	4610      	mov	r0, r2
 8014744:	e7fb      	b.n	801473e <__ascii_mbtowc+0x16>
 8014746:	f06f 0001 	mvn.w	r0, #1
 801474a:	e7f8      	b.n	801473e <__ascii_mbtowc+0x16>

0801474c <_Balloc>:
 801474c:	b570      	push	{r4, r5, r6, lr}
 801474e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014750:	4604      	mov	r4, r0
 8014752:	460e      	mov	r6, r1
 8014754:	b93d      	cbnz	r5, 8014766 <_Balloc+0x1a>
 8014756:	2010      	movs	r0, #16
 8014758:	f7ff ffde 	bl	8014718 <malloc>
 801475c:	6260      	str	r0, [r4, #36]	; 0x24
 801475e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014762:	6005      	str	r5, [r0, #0]
 8014764:	60c5      	str	r5, [r0, #12]
 8014766:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014768:	68eb      	ldr	r3, [r5, #12]
 801476a:	b183      	cbz	r3, 801478e <_Balloc+0x42>
 801476c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014774:	b9b8      	cbnz	r0, 80147a6 <_Balloc+0x5a>
 8014776:	2101      	movs	r1, #1
 8014778:	fa01 f506 	lsl.w	r5, r1, r6
 801477c:	1d6a      	adds	r2, r5, #5
 801477e:	0092      	lsls	r2, r2, #2
 8014780:	4620      	mov	r0, r4
 8014782:	f000 fbe3 	bl	8014f4c <_calloc_r>
 8014786:	b160      	cbz	r0, 80147a2 <_Balloc+0x56>
 8014788:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801478c:	e00e      	b.n	80147ac <_Balloc+0x60>
 801478e:	2221      	movs	r2, #33	; 0x21
 8014790:	2104      	movs	r1, #4
 8014792:	4620      	mov	r0, r4
 8014794:	f000 fbda 	bl	8014f4c <_calloc_r>
 8014798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801479a:	60e8      	str	r0, [r5, #12]
 801479c:	68db      	ldr	r3, [r3, #12]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d1e4      	bne.n	801476c <_Balloc+0x20>
 80147a2:	2000      	movs	r0, #0
 80147a4:	bd70      	pop	{r4, r5, r6, pc}
 80147a6:	6802      	ldr	r2, [r0, #0]
 80147a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80147ac:	2300      	movs	r3, #0
 80147ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80147b2:	e7f7      	b.n	80147a4 <_Balloc+0x58>

080147b4 <_Bfree>:
 80147b4:	b570      	push	{r4, r5, r6, lr}
 80147b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80147b8:	4606      	mov	r6, r0
 80147ba:	460d      	mov	r5, r1
 80147bc:	b93c      	cbnz	r4, 80147ce <_Bfree+0x1a>
 80147be:	2010      	movs	r0, #16
 80147c0:	f7ff ffaa 	bl	8014718 <malloc>
 80147c4:	6270      	str	r0, [r6, #36]	; 0x24
 80147c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80147ca:	6004      	str	r4, [r0, #0]
 80147cc:	60c4      	str	r4, [r0, #12]
 80147ce:	b13d      	cbz	r5, 80147e0 <_Bfree+0x2c>
 80147d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80147d2:	686a      	ldr	r2, [r5, #4]
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80147da:	6029      	str	r1, [r5, #0]
 80147dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80147e0:	bd70      	pop	{r4, r5, r6, pc}

080147e2 <__multadd>:
 80147e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147e6:	690d      	ldr	r5, [r1, #16]
 80147e8:	461f      	mov	r7, r3
 80147ea:	4606      	mov	r6, r0
 80147ec:	460c      	mov	r4, r1
 80147ee:	f101 0c14 	add.w	ip, r1, #20
 80147f2:	2300      	movs	r3, #0
 80147f4:	f8dc 0000 	ldr.w	r0, [ip]
 80147f8:	b281      	uxth	r1, r0
 80147fa:	fb02 7101 	mla	r1, r2, r1, r7
 80147fe:	0c0f      	lsrs	r7, r1, #16
 8014800:	0c00      	lsrs	r0, r0, #16
 8014802:	fb02 7000 	mla	r0, r2, r0, r7
 8014806:	b289      	uxth	r1, r1
 8014808:	3301      	adds	r3, #1
 801480a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801480e:	429d      	cmp	r5, r3
 8014810:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014814:	f84c 1b04 	str.w	r1, [ip], #4
 8014818:	dcec      	bgt.n	80147f4 <__multadd+0x12>
 801481a:	b1d7      	cbz	r7, 8014852 <__multadd+0x70>
 801481c:	68a3      	ldr	r3, [r4, #8]
 801481e:	42ab      	cmp	r3, r5
 8014820:	dc12      	bgt.n	8014848 <__multadd+0x66>
 8014822:	6861      	ldr	r1, [r4, #4]
 8014824:	4630      	mov	r0, r6
 8014826:	3101      	adds	r1, #1
 8014828:	f7ff ff90 	bl	801474c <_Balloc>
 801482c:	6922      	ldr	r2, [r4, #16]
 801482e:	3202      	adds	r2, #2
 8014830:	f104 010c 	add.w	r1, r4, #12
 8014834:	4680      	mov	r8, r0
 8014836:	0092      	lsls	r2, r2, #2
 8014838:	300c      	adds	r0, #12
 801483a:	f7fc fe8b 	bl	8011554 <memcpy>
 801483e:	4621      	mov	r1, r4
 8014840:	4630      	mov	r0, r6
 8014842:	f7ff ffb7 	bl	80147b4 <_Bfree>
 8014846:	4644      	mov	r4, r8
 8014848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801484c:	3501      	adds	r5, #1
 801484e:	615f      	str	r7, [r3, #20]
 8014850:	6125      	str	r5, [r4, #16]
 8014852:	4620      	mov	r0, r4
 8014854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014858 <__s2b>:
 8014858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801485c:	460c      	mov	r4, r1
 801485e:	4615      	mov	r5, r2
 8014860:	461f      	mov	r7, r3
 8014862:	2209      	movs	r2, #9
 8014864:	3308      	adds	r3, #8
 8014866:	4606      	mov	r6, r0
 8014868:	fb93 f3f2 	sdiv	r3, r3, r2
 801486c:	2100      	movs	r1, #0
 801486e:	2201      	movs	r2, #1
 8014870:	429a      	cmp	r2, r3
 8014872:	db20      	blt.n	80148b6 <__s2b+0x5e>
 8014874:	4630      	mov	r0, r6
 8014876:	f7ff ff69 	bl	801474c <_Balloc>
 801487a:	9b08      	ldr	r3, [sp, #32]
 801487c:	6143      	str	r3, [r0, #20]
 801487e:	2d09      	cmp	r5, #9
 8014880:	f04f 0301 	mov.w	r3, #1
 8014884:	6103      	str	r3, [r0, #16]
 8014886:	dd19      	ble.n	80148bc <__s2b+0x64>
 8014888:	f104 0809 	add.w	r8, r4, #9
 801488c:	46c1      	mov	r9, r8
 801488e:	442c      	add	r4, r5
 8014890:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014894:	4601      	mov	r1, r0
 8014896:	3b30      	subs	r3, #48	; 0x30
 8014898:	220a      	movs	r2, #10
 801489a:	4630      	mov	r0, r6
 801489c:	f7ff ffa1 	bl	80147e2 <__multadd>
 80148a0:	45a1      	cmp	r9, r4
 80148a2:	d1f5      	bne.n	8014890 <__s2b+0x38>
 80148a4:	eb08 0405 	add.w	r4, r8, r5
 80148a8:	3c08      	subs	r4, #8
 80148aa:	1b2d      	subs	r5, r5, r4
 80148ac:	1963      	adds	r3, r4, r5
 80148ae:	42bb      	cmp	r3, r7
 80148b0:	db07      	blt.n	80148c2 <__s2b+0x6a>
 80148b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148b6:	0052      	lsls	r2, r2, #1
 80148b8:	3101      	adds	r1, #1
 80148ba:	e7d9      	b.n	8014870 <__s2b+0x18>
 80148bc:	340a      	adds	r4, #10
 80148be:	2509      	movs	r5, #9
 80148c0:	e7f3      	b.n	80148aa <__s2b+0x52>
 80148c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80148c6:	4601      	mov	r1, r0
 80148c8:	3b30      	subs	r3, #48	; 0x30
 80148ca:	220a      	movs	r2, #10
 80148cc:	4630      	mov	r0, r6
 80148ce:	f7ff ff88 	bl	80147e2 <__multadd>
 80148d2:	e7eb      	b.n	80148ac <__s2b+0x54>

080148d4 <__hi0bits>:
 80148d4:	0c02      	lsrs	r2, r0, #16
 80148d6:	0412      	lsls	r2, r2, #16
 80148d8:	4603      	mov	r3, r0
 80148da:	b9b2      	cbnz	r2, 801490a <__hi0bits+0x36>
 80148dc:	0403      	lsls	r3, r0, #16
 80148de:	2010      	movs	r0, #16
 80148e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80148e4:	bf04      	itt	eq
 80148e6:	021b      	lsleq	r3, r3, #8
 80148e8:	3008      	addeq	r0, #8
 80148ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80148ee:	bf04      	itt	eq
 80148f0:	011b      	lsleq	r3, r3, #4
 80148f2:	3004      	addeq	r0, #4
 80148f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80148f8:	bf04      	itt	eq
 80148fa:	009b      	lsleq	r3, r3, #2
 80148fc:	3002      	addeq	r0, #2
 80148fe:	2b00      	cmp	r3, #0
 8014900:	db06      	blt.n	8014910 <__hi0bits+0x3c>
 8014902:	005b      	lsls	r3, r3, #1
 8014904:	d503      	bpl.n	801490e <__hi0bits+0x3a>
 8014906:	3001      	adds	r0, #1
 8014908:	4770      	bx	lr
 801490a:	2000      	movs	r0, #0
 801490c:	e7e8      	b.n	80148e0 <__hi0bits+0xc>
 801490e:	2020      	movs	r0, #32
 8014910:	4770      	bx	lr

08014912 <__lo0bits>:
 8014912:	6803      	ldr	r3, [r0, #0]
 8014914:	f013 0207 	ands.w	r2, r3, #7
 8014918:	4601      	mov	r1, r0
 801491a:	d00b      	beq.n	8014934 <__lo0bits+0x22>
 801491c:	07da      	lsls	r2, r3, #31
 801491e:	d423      	bmi.n	8014968 <__lo0bits+0x56>
 8014920:	0798      	lsls	r0, r3, #30
 8014922:	bf49      	itett	mi
 8014924:	085b      	lsrmi	r3, r3, #1
 8014926:	089b      	lsrpl	r3, r3, #2
 8014928:	2001      	movmi	r0, #1
 801492a:	600b      	strmi	r3, [r1, #0]
 801492c:	bf5c      	itt	pl
 801492e:	600b      	strpl	r3, [r1, #0]
 8014930:	2002      	movpl	r0, #2
 8014932:	4770      	bx	lr
 8014934:	b298      	uxth	r0, r3
 8014936:	b9a8      	cbnz	r0, 8014964 <__lo0bits+0x52>
 8014938:	0c1b      	lsrs	r3, r3, #16
 801493a:	2010      	movs	r0, #16
 801493c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014940:	bf04      	itt	eq
 8014942:	0a1b      	lsreq	r3, r3, #8
 8014944:	3008      	addeq	r0, #8
 8014946:	071a      	lsls	r2, r3, #28
 8014948:	bf04      	itt	eq
 801494a:	091b      	lsreq	r3, r3, #4
 801494c:	3004      	addeq	r0, #4
 801494e:	079a      	lsls	r2, r3, #30
 8014950:	bf04      	itt	eq
 8014952:	089b      	lsreq	r3, r3, #2
 8014954:	3002      	addeq	r0, #2
 8014956:	07da      	lsls	r2, r3, #31
 8014958:	d402      	bmi.n	8014960 <__lo0bits+0x4e>
 801495a:	085b      	lsrs	r3, r3, #1
 801495c:	d006      	beq.n	801496c <__lo0bits+0x5a>
 801495e:	3001      	adds	r0, #1
 8014960:	600b      	str	r3, [r1, #0]
 8014962:	4770      	bx	lr
 8014964:	4610      	mov	r0, r2
 8014966:	e7e9      	b.n	801493c <__lo0bits+0x2a>
 8014968:	2000      	movs	r0, #0
 801496a:	4770      	bx	lr
 801496c:	2020      	movs	r0, #32
 801496e:	4770      	bx	lr

08014970 <__i2b>:
 8014970:	b510      	push	{r4, lr}
 8014972:	460c      	mov	r4, r1
 8014974:	2101      	movs	r1, #1
 8014976:	f7ff fee9 	bl	801474c <_Balloc>
 801497a:	2201      	movs	r2, #1
 801497c:	6144      	str	r4, [r0, #20]
 801497e:	6102      	str	r2, [r0, #16]
 8014980:	bd10      	pop	{r4, pc}

08014982 <__multiply>:
 8014982:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014986:	4614      	mov	r4, r2
 8014988:	690a      	ldr	r2, [r1, #16]
 801498a:	6923      	ldr	r3, [r4, #16]
 801498c:	429a      	cmp	r2, r3
 801498e:	bfb8      	it	lt
 8014990:	460b      	movlt	r3, r1
 8014992:	4688      	mov	r8, r1
 8014994:	bfbc      	itt	lt
 8014996:	46a0      	movlt	r8, r4
 8014998:	461c      	movlt	r4, r3
 801499a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801499e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80149a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80149a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80149aa:	eb07 0609 	add.w	r6, r7, r9
 80149ae:	42b3      	cmp	r3, r6
 80149b0:	bfb8      	it	lt
 80149b2:	3101      	addlt	r1, #1
 80149b4:	f7ff feca 	bl	801474c <_Balloc>
 80149b8:	f100 0514 	add.w	r5, r0, #20
 80149bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80149c0:	462b      	mov	r3, r5
 80149c2:	2200      	movs	r2, #0
 80149c4:	4573      	cmp	r3, lr
 80149c6:	d316      	bcc.n	80149f6 <__multiply+0x74>
 80149c8:	f104 0214 	add.w	r2, r4, #20
 80149cc:	f108 0114 	add.w	r1, r8, #20
 80149d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80149d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80149d8:	9300      	str	r3, [sp, #0]
 80149da:	9b00      	ldr	r3, [sp, #0]
 80149dc:	9201      	str	r2, [sp, #4]
 80149de:	4293      	cmp	r3, r2
 80149e0:	d80c      	bhi.n	80149fc <__multiply+0x7a>
 80149e2:	2e00      	cmp	r6, #0
 80149e4:	dd03      	ble.n	80149ee <__multiply+0x6c>
 80149e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d05d      	beq.n	8014aaa <__multiply+0x128>
 80149ee:	6106      	str	r6, [r0, #16]
 80149f0:	b003      	add	sp, #12
 80149f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f6:	f843 2b04 	str.w	r2, [r3], #4
 80149fa:	e7e3      	b.n	80149c4 <__multiply+0x42>
 80149fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8014a00:	f1bb 0f00 	cmp.w	fp, #0
 8014a04:	d023      	beq.n	8014a4e <__multiply+0xcc>
 8014a06:	4689      	mov	r9, r1
 8014a08:	46ac      	mov	ip, r5
 8014a0a:	f04f 0800 	mov.w	r8, #0
 8014a0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8014a12:	f8dc a000 	ldr.w	sl, [ip]
 8014a16:	b2a3      	uxth	r3, r4
 8014a18:	fa1f fa8a 	uxth.w	sl, sl
 8014a1c:	fb0b a303 	mla	r3, fp, r3, sl
 8014a20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014a24:	f8dc 4000 	ldr.w	r4, [ip]
 8014a28:	4443      	add	r3, r8
 8014a2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014a2e:	fb0b 840a 	mla	r4, fp, sl, r8
 8014a32:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014a36:	46e2      	mov	sl, ip
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014a3e:	454f      	cmp	r7, r9
 8014a40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014a44:	f84a 3b04 	str.w	r3, [sl], #4
 8014a48:	d82b      	bhi.n	8014aa2 <__multiply+0x120>
 8014a4a:	f8cc 8004 	str.w	r8, [ip, #4]
 8014a4e:	9b01      	ldr	r3, [sp, #4]
 8014a50:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014a54:	3204      	adds	r2, #4
 8014a56:	f1ba 0f00 	cmp.w	sl, #0
 8014a5a:	d020      	beq.n	8014a9e <__multiply+0x11c>
 8014a5c:	682b      	ldr	r3, [r5, #0]
 8014a5e:	4689      	mov	r9, r1
 8014a60:	46a8      	mov	r8, r5
 8014a62:	f04f 0b00 	mov.w	fp, #0
 8014a66:	f8b9 c000 	ldrh.w	ip, [r9]
 8014a6a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014a6e:	fb0a 440c 	mla	r4, sl, ip, r4
 8014a72:	445c      	add	r4, fp
 8014a74:	46c4      	mov	ip, r8
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014a7c:	f84c 3b04 	str.w	r3, [ip], #4
 8014a80:	f859 3b04 	ldr.w	r3, [r9], #4
 8014a84:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014a88:	0c1b      	lsrs	r3, r3, #16
 8014a8a:	fb0a b303 	mla	r3, sl, r3, fp
 8014a8e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014a92:	454f      	cmp	r7, r9
 8014a94:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014a98:	d805      	bhi.n	8014aa6 <__multiply+0x124>
 8014a9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8014a9e:	3504      	adds	r5, #4
 8014aa0:	e79b      	b.n	80149da <__multiply+0x58>
 8014aa2:	46d4      	mov	ip, sl
 8014aa4:	e7b3      	b.n	8014a0e <__multiply+0x8c>
 8014aa6:	46e0      	mov	r8, ip
 8014aa8:	e7dd      	b.n	8014a66 <__multiply+0xe4>
 8014aaa:	3e01      	subs	r6, #1
 8014aac:	e799      	b.n	80149e2 <__multiply+0x60>
	...

08014ab0 <__pow5mult>:
 8014ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ab4:	4615      	mov	r5, r2
 8014ab6:	f012 0203 	ands.w	r2, r2, #3
 8014aba:	4606      	mov	r6, r0
 8014abc:	460f      	mov	r7, r1
 8014abe:	d007      	beq.n	8014ad0 <__pow5mult+0x20>
 8014ac0:	3a01      	subs	r2, #1
 8014ac2:	4c21      	ldr	r4, [pc, #132]	; (8014b48 <__pow5mult+0x98>)
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014aca:	f7ff fe8a 	bl	80147e2 <__multadd>
 8014ace:	4607      	mov	r7, r0
 8014ad0:	10ad      	asrs	r5, r5, #2
 8014ad2:	d035      	beq.n	8014b40 <__pow5mult+0x90>
 8014ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014ad6:	b93c      	cbnz	r4, 8014ae8 <__pow5mult+0x38>
 8014ad8:	2010      	movs	r0, #16
 8014ada:	f7ff fe1d 	bl	8014718 <malloc>
 8014ade:	6270      	str	r0, [r6, #36]	; 0x24
 8014ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ae4:	6004      	str	r4, [r0, #0]
 8014ae6:	60c4      	str	r4, [r0, #12]
 8014ae8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014af0:	b94c      	cbnz	r4, 8014b06 <__pow5mult+0x56>
 8014af2:	f240 2171 	movw	r1, #625	; 0x271
 8014af6:	4630      	mov	r0, r6
 8014af8:	f7ff ff3a 	bl	8014970 <__i2b>
 8014afc:	2300      	movs	r3, #0
 8014afe:	f8c8 0008 	str.w	r0, [r8, #8]
 8014b02:	4604      	mov	r4, r0
 8014b04:	6003      	str	r3, [r0, #0]
 8014b06:	f04f 0800 	mov.w	r8, #0
 8014b0a:	07eb      	lsls	r3, r5, #31
 8014b0c:	d50a      	bpl.n	8014b24 <__pow5mult+0x74>
 8014b0e:	4639      	mov	r1, r7
 8014b10:	4622      	mov	r2, r4
 8014b12:	4630      	mov	r0, r6
 8014b14:	f7ff ff35 	bl	8014982 <__multiply>
 8014b18:	4639      	mov	r1, r7
 8014b1a:	4681      	mov	r9, r0
 8014b1c:	4630      	mov	r0, r6
 8014b1e:	f7ff fe49 	bl	80147b4 <_Bfree>
 8014b22:	464f      	mov	r7, r9
 8014b24:	106d      	asrs	r5, r5, #1
 8014b26:	d00b      	beq.n	8014b40 <__pow5mult+0x90>
 8014b28:	6820      	ldr	r0, [r4, #0]
 8014b2a:	b938      	cbnz	r0, 8014b3c <__pow5mult+0x8c>
 8014b2c:	4622      	mov	r2, r4
 8014b2e:	4621      	mov	r1, r4
 8014b30:	4630      	mov	r0, r6
 8014b32:	f7ff ff26 	bl	8014982 <__multiply>
 8014b36:	6020      	str	r0, [r4, #0]
 8014b38:	f8c0 8000 	str.w	r8, [r0]
 8014b3c:	4604      	mov	r4, r0
 8014b3e:	e7e4      	b.n	8014b0a <__pow5mult+0x5a>
 8014b40:	4638      	mov	r0, r7
 8014b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b46:	bf00      	nop
 8014b48:	08016578 	.word	0x08016578

08014b4c <__lshift>:
 8014b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b50:	460c      	mov	r4, r1
 8014b52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014b56:	6923      	ldr	r3, [r4, #16]
 8014b58:	6849      	ldr	r1, [r1, #4]
 8014b5a:	eb0a 0903 	add.w	r9, sl, r3
 8014b5e:	68a3      	ldr	r3, [r4, #8]
 8014b60:	4607      	mov	r7, r0
 8014b62:	4616      	mov	r6, r2
 8014b64:	f109 0501 	add.w	r5, r9, #1
 8014b68:	42ab      	cmp	r3, r5
 8014b6a:	db32      	blt.n	8014bd2 <__lshift+0x86>
 8014b6c:	4638      	mov	r0, r7
 8014b6e:	f7ff fded 	bl	801474c <_Balloc>
 8014b72:	2300      	movs	r3, #0
 8014b74:	4680      	mov	r8, r0
 8014b76:	f100 0114 	add.w	r1, r0, #20
 8014b7a:	461a      	mov	r2, r3
 8014b7c:	4553      	cmp	r3, sl
 8014b7e:	db2b      	blt.n	8014bd8 <__lshift+0x8c>
 8014b80:	6920      	ldr	r0, [r4, #16]
 8014b82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014b86:	f104 0314 	add.w	r3, r4, #20
 8014b8a:	f016 021f 	ands.w	r2, r6, #31
 8014b8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014b92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014b96:	d025      	beq.n	8014be4 <__lshift+0x98>
 8014b98:	f1c2 0e20 	rsb	lr, r2, #32
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	681e      	ldr	r6, [r3, #0]
 8014ba0:	468a      	mov	sl, r1
 8014ba2:	4096      	lsls	r6, r2
 8014ba4:	4330      	orrs	r0, r6
 8014ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8014baa:	f853 0b04 	ldr.w	r0, [r3], #4
 8014bae:	459c      	cmp	ip, r3
 8014bb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8014bb4:	d814      	bhi.n	8014be0 <__lshift+0x94>
 8014bb6:	6048      	str	r0, [r1, #4]
 8014bb8:	b108      	cbz	r0, 8014bbe <__lshift+0x72>
 8014bba:	f109 0502 	add.w	r5, r9, #2
 8014bbe:	3d01      	subs	r5, #1
 8014bc0:	4638      	mov	r0, r7
 8014bc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8014bc6:	4621      	mov	r1, r4
 8014bc8:	f7ff fdf4 	bl	80147b4 <_Bfree>
 8014bcc:	4640      	mov	r0, r8
 8014bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bd2:	3101      	adds	r1, #1
 8014bd4:	005b      	lsls	r3, r3, #1
 8014bd6:	e7c7      	b.n	8014b68 <__lshift+0x1c>
 8014bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014bdc:	3301      	adds	r3, #1
 8014bde:	e7cd      	b.n	8014b7c <__lshift+0x30>
 8014be0:	4651      	mov	r1, sl
 8014be2:	e7dc      	b.n	8014b9e <__lshift+0x52>
 8014be4:	3904      	subs	r1, #4
 8014be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bea:	f841 2f04 	str.w	r2, [r1, #4]!
 8014bee:	459c      	cmp	ip, r3
 8014bf0:	d8f9      	bhi.n	8014be6 <__lshift+0x9a>
 8014bf2:	e7e4      	b.n	8014bbe <__lshift+0x72>

08014bf4 <__mcmp>:
 8014bf4:	6903      	ldr	r3, [r0, #16]
 8014bf6:	690a      	ldr	r2, [r1, #16]
 8014bf8:	1a9b      	subs	r3, r3, r2
 8014bfa:	b530      	push	{r4, r5, lr}
 8014bfc:	d10c      	bne.n	8014c18 <__mcmp+0x24>
 8014bfe:	0092      	lsls	r2, r2, #2
 8014c00:	3014      	adds	r0, #20
 8014c02:	3114      	adds	r1, #20
 8014c04:	1884      	adds	r4, r0, r2
 8014c06:	4411      	add	r1, r2
 8014c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014c10:	4295      	cmp	r5, r2
 8014c12:	d003      	beq.n	8014c1c <__mcmp+0x28>
 8014c14:	d305      	bcc.n	8014c22 <__mcmp+0x2e>
 8014c16:	2301      	movs	r3, #1
 8014c18:	4618      	mov	r0, r3
 8014c1a:	bd30      	pop	{r4, r5, pc}
 8014c1c:	42a0      	cmp	r0, r4
 8014c1e:	d3f3      	bcc.n	8014c08 <__mcmp+0x14>
 8014c20:	e7fa      	b.n	8014c18 <__mcmp+0x24>
 8014c22:	f04f 33ff 	mov.w	r3, #4294967295
 8014c26:	e7f7      	b.n	8014c18 <__mcmp+0x24>

08014c28 <__mdiff>:
 8014c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c2c:	460d      	mov	r5, r1
 8014c2e:	4607      	mov	r7, r0
 8014c30:	4611      	mov	r1, r2
 8014c32:	4628      	mov	r0, r5
 8014c34:	4614      	mov	r4, r2
 8014c36:	f7ff ffdd 	bl	8014bf4 <__mcmp>
 8014c3a:	1e06      	subs	r6, r0, #0
 8014c3c:	d108      	bne.n	8014c50 <__mdiff+0x28>
 8014c3e:	4631      	mov	r1, r6
 8014c40:	4638      	mov	r0, r7
 8014c42:	f7ff fd83 	bl	801474c <_Balloc>
 8014c46:	2301      	movs	r3, #1
 8014c48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c50:	bfa4      	itt	ge
 8014c52:	4623      	movge	r3, r4
 8014c54:	462c      	movge	r4, r5
 8014c56:	4638      	mov	r0, r7
 8014c58:	6861      	ldr	r1, [r4, #4]
 8014c5a:	bfa6      	itte	ge
 8014c5c:	461d      	movge	r5, r3
 8014c5e:	2600      	movge	r6, #0
 8014c60:	2601      	movlt	r6, #1
 8014c62:	f7ff fd73 	bl	801474c <_Balloc>
 8014c66:	692b      	ldr	r3, [r5, #16]
 8014c68:	60c6      	str	r6, [r0, #12]
 8014c6a:	6926      	ldr	r6, [r4, #16]
 8014c6c:	f105 0914 	add.w	r9, r5, #20
 8014c70:	f104 0214 	add.w	r2, r4, #20
 8014c74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014c78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014c7c:	f100 0514 	add.w	r5, r0, #20
 8014c80:	f04f 0e00 	mov.w	lr, #0
 8014c84:	f852 ab04 	ldr.w	sl, [r2], #4
 8014c88:	f859 4b04 	ldr.w	r4, [r9], #4
 8014c8c:	fa1e f18a 	uxtah	r1, lr, sl
 8014c90:	b2a3      	uxth	r3, r4
 8014c92:	1ac9      	subs	r1, r1, r3
 8014c94:	0c23      	lsrs	r3, r4, #16
 8014c96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014c9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014c9e:	b289      	uxth	r1, r1
 8014ca0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014ca4:	45c8      	cmp	r8, r9
 8014ca6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014caa:	4694      	mov	ip, r2
 8014cac:	f845 3b04 	str.w	r3, [r5], #4
 8014cb0:	d8e8      	bhi.n	8014c84 <__mdiff+0x5c>
 8014cb2:	45bc      	cmp	ip, r7
 8014cb4:	d304      	bcc.n	8014cc0 <__mdiff+0x98>
 8014cb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014cba:	b183      	cbz	r3, 8014cde <__mdiff+0xb6>
 8014cbc:	6106      	str	r6, [r0, #16]
 8014cbe:	e7c5      	b.n	8014c4c <__mdiff+0x24>
 8014cc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014cc4:	fa1e f381 	uxtah	r3, lr, r1
 8014cc8:	141a      	asrs	r2, r3, #16
 8014cca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014cd8:	f845 3b04 	str.w	r3, [r5], #4
 8014cdc:	e7e9      	b.n	8014cb2 <__mdiff+0x8a>
 8014cde:	3e01      	subs	r6, #1
 8014ce0:	e7e9      	b.n	8014cb6 <__mdiff+0x8e>
	...

08014ce4 <__ulp>:
 8014ce4:	4b12      	ldr	r3, [pc, #72]	; (8014d30 <__ulp+0x4c>)
 8014ce6:	ee10 2a90 	vmov	r2, s1
 8014cea:	401a      	ands	r2, r3
 8014cec:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	dd04      	ble.n	8014cfe <__ulp+0x1a>
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	ec41 0b10 	vmov	d0, r0, r1
 8014cfc:	4770      	bx	lr
 8014cfe:	425b      	negs	r3, r3
 8014d00:	151b      	asrs	r3, r3, #20
 8014d02:	2b13      	cmp	r3, #19
 8014d04:	f04f 0000 	mov.w	r0, #0
 8014d08:	f04f 0100 	mov.w	r1, #0
 8014d0c:	dc04      	bgt.n	8014d18 <__ulp+0x34>
 8014d0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014d12:	fa42 f103 	asr.w	r1, r2, r3
 8014d16:	e7ef      	b.n	8014cf8 <__ulp+0x14>
 8014d18:	3b14      	subs	r3, #20
 8014d1a:	2b1e      	cmp	r3, #30
 8014d1c:	f04f 0201 	mov.w	r2, #1
 8014d20:	bfda      	itte	le
 8014d22:	f1c3 031f 	rsble	r3, r3, #31
 8014d26:	fa02 f303 	lslle.w	r3, r2, r3
 8014d2a:	4613      	movgt	r3, r2
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	e7e3      	b.n	8014cf8 <__ulp+0x14>
 8014d30:	7ff00000 	.word	0x7ff00000

08014d34 <__b2d>:
 8014d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d36:	6905      	ldr	r5, [r0, #16]
 8014d38:	f100 0714 	add.w	r7, r0, #20
 8014d3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014d40:	1f2e      	subs	r6, r5, #4
 8014d42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014d46:	4620      	mov	r0, r4
 8014d48:	f7ff fdc4 	bl	80148d4 <__hi0bits>
 8014d4c:	f1c0 0320 	rsb	r3, r0, #32
 8014d50:	280a      	cmp	r0, #10
 8014d52:	600b      	str	r3, [r1, #0]
 8014d54:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014dcc <__b2d+0x98>
 8014d58:	dc14      	bgt.n	8014d84 <__b2d+0x50>
 8014d5a:	f1c0 0e0b 	rsb	lr, r0, #11
 8014d5e:	fa24 f10e 	lsr.w	r1, r4, lr
 8014d62:	42b7      	cmp	r7, r6
 8014d64:	ea41 030c 	orr.w	r3, r1, ip
 8014d68:	bf34      	ite	cc
 8014d6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014d6e:	2100      	movcs	r1, #0
 8014d70:	3015      	adds	r0, #21
 8014d72:	fa04 f000 	lsl.w	r0, r4, r0
 8014d76:	fa21 f10e 	lsr.w	r1, r1, lr
 8014d7a:	ea40 0201 	orr.w	r2, r0, r1
 8014d7e:	ec43 2b10 	vmov	d0, r2, r3
 8014d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d84:	42b7      	cmp	r7, r6
 8014d86:	bf3a      	itte	cc
 8014d88:	f1a5 0608 	subcc.w	r6, r5, #8
 8014d8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014d90:	2100      	movcs	r1, #0
 8014d92:	380b      	subs	r0, #11
 8014d94:	d015      	beq.n	8014dc2 <__b2d+0x8e>
 8014d96:	4084      	lsls	r4, r0
 8014d98:	f1c0 0520 	rsb	r5, r0, #32
 8014d9c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8014da0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014da4:	42be      	cmp	r6, r7
 8014da6:	fa21 fc05 	lsr.w	ip, r1, r5
 8014daa:	ea44 030c 	orr.w	r3, r4, ip
 8014dae:	bf8c      	ite	hi
 8014db0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014db4:	2400      	movls	r4, #0
 8014db6:	fa01 f000 	lsl.w	r0, r1, r0
 8014dba:	40ec      	lsrs	r4, r5
 8014dbc:	ea40 0204 	orr.w	r2, r0, r4
 8014dc0:	e7dd      	b.n	8014d7e <__b2d+0x4a>
 8014dc2:	ea44 030c 	orr.w	r3, r4, ip
 8014dc6:	460a      	mov	r2, r1
 8014dc8:	e7d9      	b.n	8014d7e <__b2d+0x4a>
 8014dca:	bf00      	nop
 8014dcc:	3ff00000 	.word	0x3ff00000

08014dd0 <__d2b>:
 8014dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014dd4:	460e      	mov	r6, r1
 8014dd6:	2101      	movs	r1, #1
 8014dd8:	ec59 8b10 	vmov	r8, r9, d0
 8014ddc:	4615      	mov	r5, r2
 8014dde:	f7ff fcb5 	bl	801474c <_Balloc>
 8014de2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014de6:	4607      	mov	r7, r0
 8014de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014dec:	bb34      	cbnz	r4, 8014e3c <__d2b+0x6c>
 8014dee:	9301      	str	r3, [sp, #4]
 8014df0:	f1b8 0300 	subs.w	r3, r8, #0
 8014df4:	d027      	beq.n	8014e46 <__d2b+0x76>
 8014df6:	a802      	add	r0, sp, #8
 8014df8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014dfc:	f7ff fd89 	bl	8014912 <__lo0bits>
 8014e00:	9900      	ldr	r1, [sp, #0]
 8014e02:	b1f0      	cbz	r0, 8014e42 <__d2b+0x72>
 8014e04:	9a01      	ldr	r2, [sp, #4]
 8014e06:	f1c0 0320 	rsb	r3, r0, #32
 8014e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8014e0e:	430b      	orrs	r3, r1
 8014e10:	40c2      	lsrs	r2, r0
 8014e12:	617b      	str	r3, [r7, #20]
 8014e14:	9201      	str	r2, [sp, #4]
 8014e16:	9b01      	ldr	r3, [sp, #4]
 8014e18:	61bb      	str	r3, [r7, #24]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	bf14      	ite	ne
 8014e1e:	2102      	movne	r1, #2
 8014e20:	2101      	moveq	r1, #1
 8014e22:	6139      	str	r1, [r7, #16]
 8014e24:	b1c4      	cbz	r4, 8014e58 <__d2b+0x88>
 8014e26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014e2a:	4404      	add	r4, r0
 8014e2c:	6034      	str	r4, [r6, #0]
 8014e2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014e32:	6028      	str	r0, [r5, #0]
 8014e34:	4638      	mov	r0, r7
 8014e36:	b003      	add	sp, #12
 8014e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014e40:	e7d5      	b.n	8014dee <__d2b+0x1e>
 8014e42:	6179      	str	r1, [r7, #20]
 8014e44:	e7e7      	b.n	8014e16 <__d2b+0x46>
 8014e46:	a801      	add	r0, sp, #4
 8014e48:	f7ff fd63 	bl	8014912 <__lo0bits>
 8014e4c:	9b01      	ldr	r3, [sp, #4]
 8014e4e:	617b      	str	r3, [r7, #20]
 8014e50:	2101      	movs	r1, #1
 8014e52:	6139      	str	r1, [r7, #16]
 8014e54:	3020      	adds	r0, #32
 8014e56:	e7e5      	b.n	8014e24 <__d2b+0x54>
 8014e58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014e5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014e60:	6030      	str	r0, [r6, #0]
 8014e62:	6918      	ldr	r0, [r3, #16]
 8014e64:	f7ff fd36 	bl	80148d4 <__hi0bits>
 8014e68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014e6c:	e7e1      	b.n	8014e32 <__d2b+0x62>

08014e6e <__ratio>:
 8014e6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e72:	4688      	mov	r8, r1
 8014e74:	4669      	mov	r1, sp
 8014e76:	4681      	mov	r9, r0
 8014e78:	f7ff ff5c 	bl	8014d34 <__b2d>
 8014e7c:	a901      	add	r1, sp, #4
 8014e7e:	4640      	mov	r0, r8
 8014e80:	ec57 6b10 	vmov	r6, r7, d0
 8014e84:	ee10 4a10 	vmov	r4, s0
 8014e88:	f7ff ff54 	bl	8014d34 <__b2d>
 8014e8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014e90:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014e94:	eba3 0c02 	sub.w	ip, r3, r2
 8014e98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014e9c:	1a9b      	subs	r3, r3, r2
 8014e9e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014ea2:	ec51 0b10 	vmov	r0, r1, d0
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	ee10 aa10 	vmov	sl, s0
 8014eac:	bfce      	itee	gt
 8014eae:	463a      	movgt	r2, r7
 8014eb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014eb4:	460a      	movle	r2, r1
 8014eb6:	463d      	mov	r5, r7
 8014eb8:	468b      	mov	fp, r1
 8014eba:	bfcc      	ite	gt
 8014ebc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8014ec0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014ec4:	ec45 4b17 	vmov	d7, r4, r5
 8014ec8:	ec4b ab16 	vmov	d6, sl, fp
 8014ecc:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8014ed0:	b003      	add	sp, #12
 8014ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ed6 <__copybits>:
 8014ed6:	3901      	subs	r1, #1
 8014ed8:	b510      	push	{r4, lr}
 8014eda:	1149      	asrs	r1, r1, #5
 8014edc:	6914      	ldr	r4, [r2, #16]
 8014ede:	3101      	adds	r1, #1
 8014ee0:	f102 0314 	add.w	r3, r2, #20
 8014ee4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014ee8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014eec:	42a3      	cmp	r3, r4
 8014eee:	4602      	mov	r2, r0
 8014ef0:	d303      	bcc.n	8014efa <__copybits+0x24>
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	428a      	cmp	r2, r1
 8014ef6:	d305      	bcc.n	8014f04 <__copybits+0x2e>
 8014ef8:	bd10      	pop	{r4, pc}
 8014efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8014efe:	f840 2b04 	str.w	r2, [r0], #4
 8014f02:	e7f3      	b.n	8014eec <__copybits+0x16>
 8014f04:	f842 3b04 	str.w	r3, [r2], #4
 8014f08:	e7f4      	b.n	8014ef4 <__copybits+0x1e>

08014f0a <__any_on>:
 8014f0a:	f100 0214 	add.w	r2, r0, #20
 8014f0e:	6900      	ldr	r0, [r0, #16]
 8014f10:	114b      	asrs	r3, r1, #5
 8014f12:	4298      	cmp	r0, r3
 8014f14:	b510      	push	{r4, lr}
 8014f16:	db11      	blt.n	8014f3c <__any_on+0x32>
 8014f18:	dd0a      	ble.n	8014f30 <__any_on+0x26>
 8014f1a:	f011 011f 	ands.w	r1, r1, #31
 8014f1e:	d007      	beq.n	8014f30 <__any_on+0x26>
 8014f20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014f24:	fa24 f001 	lsr.w	r0, r4, r1
 8014f28:	fa00 f101 	lsl.w	r1, r0, r1
 8014f2c:	428c      	cmp	r4, r1
 8014f2e:	d10b      	bne.n	8014f48 <__any_on+0x3e>
 8014f30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014f34:	4293      	cmp	r3, r2
 8014f36:	d803      	bhi.n	8014f40 <__any_on+0x36>
 8014f38:	2000      	movs	r0, #0
 8014f3a:	bd10      	pop	{r4, pc}
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	e7f7      	b.n	8014f30 <__any_on+0x26>
 8014f40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014f44:	2900      	cmp	r1, #0
 8014f46:	d0f5      	beq.n	8014f34 <__any_on+0x2a>
 8014f48:	2001      	movs	r0, #1
 8014f4a:	e7f6      	b.n	8014f3a <__any_on+0x30>

08014f4c <_calloc_r>:
 8014f4c:	b538      	push	{r3, r4, r5, lr}
 8014f4e:	fb02 f401 	mul.w	r4, r2, r1
 8014f52:	4621      	mov	r1, r4
 8014f54:	f000 f856 	bl	8015004 <_malloc_r>
 8014f58:	4605      	mov	r5, r0
 8014f5a:	b118      	cbz	r0, 8014f64 <_calloc_r+0x18>
 8014f5c:	4622      	mov	r2, r4
 8014f5e:	2100      	movs	r1, #0
 8014f60:	f7fc fb03 	bl	801156a <memset>
 8014f64:	4628      	mov	r0, r5
 8014f66:	bd38      	pop	{r3, r4, r5, pc}

08014f68 <_free_r>:
 8014f68:	b538      	push	{r3, r4, r5, lr}
 8014f6a:	4605      	mov	r5, r0
 8014f6c:	2900      	cmp	r1, #0
 8014f6e:	d045      	beq.n	8014ffc <_free_r+0x94>
 8014f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f74:	1f0c      	subs	r4, r1, #4
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	bfb8      	it	lt
 8014f7a:	18e4      	addlt	r4, r4, r3
 8014f7c:	f000 facf 	bl	801551e <__malloc_lock>
 8014f80:	4a1f      	ldr	r2, [pc, #124]	; (8015000 <_free_r+0x98>)
 8014f82:	6813      	ldr	r3, [r2, #0]
 8014f84:	4610      	mov	r0, r2
 8014f86:	b933      	cbnz	r3, 8014f96 <_free_r+0x2e>
 8014f88:	6063      	str	r3, [r4, #4]
 8014f8a:	6014      	str	r4, [r2, #0]
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f92:	f000 bac5 	b.w	8015520 <__malloc_unlock>
 8014f96:	42a3      	cmp	r3, r4
 8014f98:	d90c      	bls.n	8014fb4 <_free_r+0x4c>
 8014f9a:	6821      	ldr	r1, [r4, #0]
 8014f9c:	1862      	adds	r2, r4, r1
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	bf04      	itt	eq
 8014fa2:	681a      	ldreq	r2, [r3, #0]
 8014fa4:	685b      	ldreq	r3, [r3, #4]
 8014fa6:	6063      	str	r3, [r4, #4]
 8014fa8:	bf04      	itt	eq
 8014faa:	1852      	addeq	r2, r2, r1
 8014fac:	6022      	streq	r2, [r4, #0]
 8014fae:	6004      	str	r4, [r0, #0]
 8014fb0:	e7ec      	b.n	8014f8c <_free_r+0x24>
 8014fb2:	4613      	mov	r3, r2
 8014fb4:	685a      	ldr	r2, [r3, #4]
 8014fb6:	b10a      	cbz	r2, 8014fbc <_free_r+0x54>
 8014fb8:	42a2      	cmp	r2, r4
 8014fba:	d9fa      	bls.n	8014fb2 <_free_r+0x4a>
 8014fbc:	6819      	ldr	r1, [r3, #0]
 8014fbe:	1858      	adds	r0, r3, r1
 8014fc0:	42a0      	cmp	r0, r4
 8014fc2:	d10b      	bne.n	8014fdc <_free_r+0x74>
 8014fc4:	6820      	ldr	r0, [r4, #0]
 8014fc6:	4401      	add	r1, r0
 8014fc8:	1858      	adds	r0, r3, r1
 8014fca:	4282      	cmp	r2, r0
 8014fcc:	6019      	str	r1, [r3, #0]
 8014fce:	d1dd      	bne.n	8014f8c <_free_r+0x24>
 8014fd0:	6810      	ldr	r0, [r2, #0]
 8014fd2:	6852      	ldr	r2, [r2, #4]
 8014fd4:	605a      	str	r2, [r3, #4]
 8014fd6:	4401      	add	r1, r0
 8014fd8:	6019      	str	r1, [r3, #0]
 8014fda:	e7d7      	b.n	8014f8c <_free_r+0x24>
 8014fdc:	d902      	bls.n	8014fe4 <_free_r+0x7c>
 8014fde:	230c      	movs	r3, #12
 8014fe0:	602b      	str	r3, [r5, #0]
 8014fe2:	e7d3      	b.n	8014f8c <_free_r+0x24>
 8014fe4:	6820      	ldr	r0, [r4, #0]
 8014fe6:	1821      	adds	r1, r4, r0
 8014fe8:	428a      	cmp	r2, r1
 8014fea:	bf04      	itt	eq
 8014fec:	6811      	ldreq	r1, [r2, #0]
 8014fee:	6852      	ldreq	r2, [r2, #4]
 8014ff0:	6062      	str	r2, [r4, #4]
 8014ff2:	bf04      	itt	eq
 8014ff4:	1809      	addeq	r1, r1, r0
 8014ff6:	6021      	streq	r1, [r4, #0]
 8014ff8:	605c      	str	r4, [r3, #4]
 8014ffa:	e7c7      	b.n	8014f8c <_free_r+0x24>
 8014ffc:	bd38      	pop	{r3, r4, r5, pc}
 8014ffe:	bf00      	nop
 8015000:	20028a30 	.word	0x20028a30

08015004 <_malloc_r>:
 8015004:	b570      	push	{r4, r5, r6, lr}
 8015006:	1ccd      	adds	r5, r1, #3
 8015008:	f025 0503 	bic.w	r5, r5, #3
 801500c:	3508      	adds	r5, #8
 801500e:	2d0c      	cmp	r5, #12
 8015010:	bf38      	it	cc
 8015012:	250c      	movcc	r5, #12
 8015014:	2d00      	cmp	r5, #0
 8015016:	4606      	mov	r6, r0
 8015018:	db01      	blt.n	801501e <_malloc_r+0x1a>
 801501a:	42a9      	cmp	r1, r5
 801501c:	d903      	bls.n	8015026 <_malloc_r+0x22>
 801501e:	230c      	movs	r3, #12
 8015020:	6033      	str	r3, [r6, #0]
 8015022:	2000      	movs	r0, #0
 8015024:	bd70      	pop	{r4, r5, r6, pc}
 8015026:	f000 fa7a 	bl	801551e <__malloc_lock>
 801502a:	4a21      	ldr	r2, [pc, #132]	; (80150b0 <_malloc_r+0xac>)
 801502c:	6814      	ldr	r4, [r2, #0]
 801502e:	4621      	mov	r1, r4
 8015030:	b991      	cbnz	r1, 8015058 <_malloc_r+0x54>
 8015032:	4c20      	ldr	r4, [pc, #128]	; (80150b4 <_malloc_r+0xb0>)
 8015034:	6823      	ldr	r3, [r4, #0]
 8015036:	b91b      	cbnz	r3, 8015040 <_malloc_r+0x3c>
 8015038:	4630      	mov	r0, r6
 801503a:	f000 f98f 	bl	801535c <_sbrk_r>
 801503e:	6020      	str	r0, [r4, #0]
 8015040:	4629      	mov	r1, r5
 8015042:	4630      	mov	r0, r6
 8015044:	f000 f98a 	bl	801535c <_sbrk_r>
 8015048:	1c43      	adds	r3, r0, #1
 801504a:	d124      	bne.n	8015096 <_malloc_r+0x92>
 801504c:	230c      	movs	r3, #12
 801504e:	6033      	str	r3, [r6, #0]
 8015050:	4630      	mov	r0, r6
 8015052:	f000 fa65 	bl	8015520 <__malloc_unlock>
 8015056:	e7e4      	b.n	8015022 <_malloc_r+0x1e>
 8015058:	680b      	ldr	r3, [r1, #0]
 801505a:	1b5b      	subs	r3, r3, r5
 801505c:	d418      	bmi.n	8015090 <_malloc_r+0x8c>
 801505e:	2b0b      	cmp	r3, #11
 8015060:	d90f      	bls.n	8015082 <_malloc_r+0x7e>
 8015062:	600b      	str	r3, [r1, #0]
 8015064:	50cd      	str	r5, [r1, r3]
 8015066:	18cc      	adds	r4, r1, r3
 8015068:	4630      	mov	r0, r6
 801506a:	f000 fa59 	bl	8015520 <__malloc_unlock>
 801506e:	f104 000b 	add.w	r0, r4, #11
 8015072:	1d23      	adds	r3, r4, #4
 8015074:	f020 0007 	bic.w	r0, r0, #7
 8015078:	1ac3      	subs	r3, r0, r3
 801507a:	d0d3      	beq.n	8015024 <_malloc_r+0x20>
 801507c:	425a      	negs	r2, r3
 801507e:	50e2      	str	r2, [r4, r3]
 8015080:	e7d0      	b.n	8015024 <_malloc_r+0x20>
 8015082:	428c      	cmp	r4, r1
 8015084:	684b      	ldr	r3, [r1, #4]
 8015086:	bf16      	itet	ne
 8015088:	6063      	strne	r3, [r4, #4]
 801508a:	6013      	streq	r3, [r2, #0]
 801508c:	460c      	movne	r4, r1
 801508e:	e7eb      	b.n	8015068 <_malloc_r+0x64>
 8015090:	460c      	mov	r4, r1
 8015092:	6849      	ldr	r1, [r1, #4]
 8015094:	e7cc      	b.n	8015030 <_malloc_r+0x2c>
 8015096:	1cc4      	adds	r4, r0, #3
 8015098:	f024 0403 	bic.w	r4, r4, #3
 801509c:	42a0      	cmp	r0, r4
 801509e:	d005      	beq.n	80150ac <_malloc_r+0xa8>
 80150a0:	1a21      	subs	r1, r4, r0
 80150a2:	4630      	mov	r0, r6
 80150a4:	f000 f95a 	bl	801535c <_sbrk_r>
 80150a8:	3001      	adds	r0, #1
 80150aa:	d0cf      	beq.n	801504c <_malloc_r+0x48>
 80150ac:	6025      	str	r5, [r4, #0]
 80150ae:	e7db      	b.n	8015068 <_malloc_r+0x64>
 80150b0:	20028a30 	.word	0x20028a30
 80150b4:	20028a34 	.word	0x20028a34

080150b8 <__ssputs_r>:
 80150b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150bc:	688e      	ldr	r6, [r1, #8]
 80150be:	429e      	cmp	r6, r3
 80150c0:	4682      	mov	sl, r0
 80150c2:	460c      	mov	r4, r1
 80150c4:	4690      	mov	r8, r2
 80150c6:	4699      	mov	r9, r3
 80150c8:	d837      	bhi.n	801513a <__ssputs_r+0x82>
 80150ca:	898a      	ldrh	r2, [r1, #12]
 80150cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80150d0:	d031      	beq.n	8015136 <__ssputs_r+0x7e>
 80150d2:	6825      	ldr	r5, [r4, #0]
 80150d4:	6909      	ldr	r1, [r1, #16]
 80150d6:	1a6f      	subs	r7, r5, r1
 80150d8:	6965      	ldr	r5, [r4, #20]
 80150da:	2302      	movs	r3, #2
 80150dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80150e4:	f109 0301 	add.w	r3, r9, #1
 80150e8:	443b      	add	r3, r7
 80150ea:	429d      	cmp	r5, r3
 80150ec:	bf38      	it	cc
 80150ee:	461d      	movcc	r5, r3
 80150f0:	0553      	lsls	r3, r2, #21
 80150f2:	d530      	bpl.n	8015156 <__ssputs_r+0x9e>
 80150f4:	4629      	mov	r1, r5
 80150f6:	f7ff ff85 	bl	8015004 <_malloc_r>
 80150fa:	4606      	mov	r6, r0
 80150fc:	b950      	cbnz	r0, 8015114 <__ssputs_r+0x5c>
 80150fe:	230c      	movs	r3, #12
 8015100:	f8ca 3000 	str.w	r3, [sl]
 8015104:	89a3      	ldrh	r3, [r4, #12]
 8015106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801510a:	81a3      	strh	r3, [r4, #12]
 801510c:	f04f 30ff 	mov.w	r0, #4294967295
 8015110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015114:	463a      	mov	r2, r7
 8015116:	6921      	ldr	r1, [r4, #16]
 8015118:	f7fc fa1c 	bl	8011554 <memcpy>
 801511c:	89a3      	ldrh	r3, [r4, #12]
 801511e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015126:	81a3      	strh	r3, [r4, #12]
 8015128:	6126      	str	r6, [r4, #16]
 801512a:	6165      	str	r5, [r4, #20]
 801512c:	443e      	add	r6, r7
 801512e:	1bed      	subs	r5, r5, r7
 8015130:	6026      	str	r6, [r4, #0]
 8015132:	60a5      	str	r5, [r4, #8]
 8015134:	464e      	mov	r6, r9
 8015136:	454e      	cmp	r6, r9
 8015138:	d900      	bls.n	801513c <__ssputs_r+0x84>
 801513a:	464e      	mov	r6, r9
 801513c:	4632      	mov	r2, r6
 801513e:	4641      	mov	r1, r8
 8015140:	6820      	ldr	r0, [r4, #0]
 8015142:	f000 f9d3 	bl	80154ec <memmove>
 8015146:	68a3      	ldr	r3, [r4, #8]
 8015148:	1b9b      	subs	r3, r3, r6
 801514a:	60a3      	str	r3, [r4, #8]
 801514c:	6823      	ldr	r3, [r4, #0]
 801514e:	441e      	add	r6, r3
 8015150:	6026      	str	r6, [r4, #0]
 8015152:	2000      	movs	r0, #0
 8015154:	e7dc      	b.n	8015110 <__ssputs_r+0x58>
 8015156:	462a      	mov	r2, r5
 8015158:	f000 f9e3 	bl	8015522 <_realloc_r>
 801515c:	4606      	mov	r6, r0
 801515e:	2800      	cmp	r0, #0
 8015160:	d1e2      	bne.n	8015128 <__ssputs_r+0x70>
 8015162:	6921      	ldr	r1, [r4, #16]
 8015164:	4650      	mov	r0, sl
 8015166:	f7ff feff 	bl	8014f68 <_free_r>
 801516a:	e7c8      	b.n	80150fe <__ssputs_r+0x46>

0801516c <_svfiprintf_r>:
 801516c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015170:	461d      	mov	r5, r3
 8015172:	898b      	ldrh	r3, [r1, #12]
 8015174:	061f      	lsls	r7, r3, #24
 8015176:	b09d      	sub	sp, #116	; 0x74
 8015178:	4680      	mov	r8, r0
 801517a:	460c      	mov	r4, r1
 801517c:	4616      	mov	r6, r2
 801517e:	d50f      	bpl.n	80151a0 <_svfiprintf_r+0x34>
 8015180:	690b      	ldr	r3, [r1, #16]
 8015182:	b96b      	cbnz	r3, 80151a0 <_svfiprintf_r+0x34>
 8015184:	2140      	movs	r1, #64	; 0x40
 8015186:	f7ff ff3d 	bl	8015004 <_malloc_r>
 801518a:	6020      	str	r0, [r4, #0]
 801518c:	6120      	str	r0, [r4, #16]
 801518e:	b928      	cbnz	r0, 801519c <_svfiprintf_r+0x30>
 8015190:	230c      	movs	r3, #12
 8015192:	f8c8 3000 	str.w	r3, [r8]
 8015196:	f04f 30ff 	mov.w	r0, #4294967295
 801519a:	e0c8      	b.n	801532e <_svfiprintf_r+0x1c2>
 801519c:	2340      	movs	r3, #64	; 0x40
 801519e:	6163      	str	r3, [r4, #20]
 80151a0:	2300      	movs	r3, #0
 80151a2:	9309      	str	r3, [sp, #36]	; 0x24
 80151a4:	2320      	movs	r3, #32
 80151a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151aa:	2330      	movs	r3, #48	; 0x30
 80151ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80151b0:	9503      	str	r5, [sp, #12]
 80151b2:	f04f 0b01 	mov.w	fp, #1
 80151b6:	4637      	mov	r7, r6
 80151b8:	463d      	mov	r5, r7
 80151ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80151be:	b10b      	cbz	r3, 80151c4 <_svfiprintf_r+0x58>
 80151c0:	2b25      	cmp	r3, #37	; 0x25
 80151c2:	d13e      	bne.n	8015242 <_svfiprintf_r+0xd6>
 80151c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80151c8:	d00b      	beq.n	80151e2 <_svfiprintf_r+0x76>
 80151ca:	4653      	mov	r3, sl
 80151cc:	4632      	mov	r2, r6
 80151ce:	4621      	mov	r1, r4
 80151d0:	4640      	mov	r0, r8
 80151d2:	f7ff ff71 	bl	80150b8 <__ssputs_r>
 80151d6:	3001      	adds	r0, #1
 80151d8:	f000 80a4 	beq.w	8015324 <_svfiprintf_r+0x1b8>
 80151dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151de:	4453      	add	r3, sl
 80151e0:	9309      	str	r3, [sp, #36]	; 0x24
 80151e2:	783b      	ldrb	r3, [r7, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f000 809d 	beq.w	8015324 <_svfiprintf_r+0x1b8>
 80151ea:	2300      	movs	r3, #0
 80151ec:	f04f 32ff 	mov.w	r2, #4294967295
 80151f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151f4:	9304      	str	r3, [sp, #16]
 80151f6:	9307      	str	r3, [sp, #28]
 80151f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151fc:	931a      	str	r3, [sp, #104]	; 0x68
 80151fe:	462f      	mov	r7, r5
 8015200:	2205      	movs	r2, #5
 8015202:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015206:	4850      	ldr	r0, [pc, #320]	; (8015348 <_svfiprintf_r+0x1dc>)
 8015208:	f7eb f822 	bl	8000250 <memchr>
 801520c:	9b04      	ldr	r3, [sp, #16]
 801520e:	b9d0      	cbnz	r0, 8015246 <_svfiprintf_r+0xda>
 8015210:	06d9      	lsls	r1, r3, #27
 8015212:	bf44      	itt	mi
 8015214:	2220      	movmi	r2, #32
 8015216:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801521a:	071a      	lsls	r2, r3, #28
 801521c:	bf44      	itt	mi
 801521e:	222b      	movmi	r2, #43	; 0x2b
 8015220:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015224:	782a      	ldrb	r2, [r5, #0]
 8015226:	2a2a      	cmp	r2, #42	; 0x2a
 8015228:	d015      	beq.n	8015256 <_svfiprintf_r+0xea>
 801522a:	9a07      	ldr	r2, [sp, #28]
 801522c:	462f      	mov	r7, r5
 801522e:	2000      	movs	r0, #0
 8015230:	250a      	movs	r5, #10
 8015232:	4639      	mov	r1, r7
 8015234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015238:	3b30      	subs	r3, #48	; 0x30
 801523a:	2b09      	cmp	r3, #9
 801523c:	d94d      	bls.n	80152da <_svfiprintf_r+0x16e>
 801523e:	b1b8      	cbz	r0, 8015270 <_svfiprintf_r+0x104>
 8015240:	e00f      	b.n	8015262 <_svfiprintf_r+0xf6>
 8015242:	462f      	mov	r7, r5
 8015244:	e7b8      	b.n	80151b8 <_svfiprintf_r+0x4c>
 8015246:	4a40      	ldr	r2, [pc, #256]	; (8015348 <_svfiprintf_r+0x1dc>)
 8015248:	1a80      	subs	r0, r0, r2
 801524a:	fa0b f000 	lsl.w	r0, fp, r0
 801524e:	4318      	orrs	r0, r3
 8015250:	9004      	str	r0, [sp, #16]
 8015252:	463d      	mov	r5, r7
 8015254:	e7d3      	b.n	80151fe <_svfiprintf_r+0x92>
 8015256:	9a03      	ldr	r2, [sp, #12]
 8015258:	1d11      	adds	r1, r2, #4
 801525a:	6812      	ldr	r2, [r2, #0]
 801525c:	9103      	str	r1, [sp, #12]
 801525e:	2a00      	cmp	r2, #0
 8015260:	db01      	blt.n	8015266 <_svfiprintf_r+0xfa>
 8015262:	9207      	str	r2, [sp, #28]
 8015264:	e004      	b.n	8015270 <_svfiprintf_r+0x104>
 8015266:	4252      	negs	r2, r2
 8015268:	f043 0302 	orr.w	r3, r3, #2
 801526c:	9207      	str	r2, [sp, #28]
 801526e:	9304      	str	r3, [sp, #16]
 8015270:	783b      	ldrb	r3, [r7, #0]
 8015272:	2b2e      	cmp	r3, #46	; 0x2e
 8015274:	d10c      	bne.n	8015290 <_svfiprintf_r+0x124>
 8015276:	787b      	ldrb	r3, [r7, #1]
 8015278:	2b2a      	cmp	r3, #42	; 0x2a
 801527a:	d133      	bne.n	80152e4 <_svfiprintf_r+0x178>
 801527c:	9b03      	ldr	r3, [sp, #12]
 801527e:	1d1a      	adds	r2, r3, #4
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	9203      	str	r2, [sp, #12]
 8015284:	2b00      	cmp	r3, #0
 8015286:	bfb8      	it	lt
 8015288:	f04f 33ff 	movlt.w	r3, #4294967295
 801528c:	3702      	adds	r7, #2
 801528e:	9305      	str	r3, [sp, #20]
 8015290:	4d2e      	ldr	r5, [pc, #184]	; (801534c <_svfiprintf_r+0x1e0>)
 8015292:	7839      	ldrb	r1, [r7, #0]
 8015294:	2203      	movs	r2, #3
 8015296:	4628      	mov	r0, r5
 8015298:	f7ea ffda 	bl	8000250 <memchr>
 801529c:	b138      	cbz	r0, 80152ae <_svfiprintf_r+0x142>
 801529e:	2340      	movs	r3, #64	; 0x40
 80152a0:	1b40      	subs	r0, r0, r5
 80152a2:	fa03 f000 	lsl.w	r0, r3, r0
 80152a6:	9b04      	ldr	r3, [sp, #16]
 80152a8:	4303      	orrs	r3, r0
 80152aa:	3701      	adds	r7, #1
 80152ac:	9304      	str	r3, [sp, #16]
 80152ae:	7839      	ldrb	r1, [r7, #0]
 80152b0:	4827      	ldr	r0, [pc, #156]	; (8015350 <_svfiprintf_r+0x1e4>)
 80152b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80152b6:	2206      	movs	r2, #6
 80152b8:	1c7e      	adds	r6, r7, #1
 80152ba:	f7ea ffc9 	bl	8000250 <memchr>
 80152be:	2800      	cmp	r0, #0
 80152c0:	d038      	beq.n	8015334 <_svfiprintf_r+0x1c8>
 80152c2:	4b24      	ldr	r3, [pc, #144]	; (8015354 <_svfiprintf_r+0x1e8>)
 80152c4:	bb13      	cbnz	r3, 801530c <_svfiprintf_r+0x1a0>
 80152c6:	9b03      	ldr	r3, [sp, #12]
 80152c8:	3307      	adds	r3, #7
 80152ca:	f023 0307 	bic.w	r3, r3, #7
 80152ce:	3308      	adds	r3, #8
 80152d0:	9303      	str	r3, [sp, #12]
 80152d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d4:	444b      	add	r3, r9
 80152d6:	9309      	str	r3, [sp, #36]	; 0x24
 80152d8:	e76d      	b.n	80151b6 <_svfiprintf_r+0x4a>
 80152da:	fb05 3202 	mla	r2, r5, r2, r3
 80152de:	2001      	movs	r0, #1
 80152e0:	460f      	mov	r7, r1
 80152e2:	e7a6      	b.n	8015232 <_svfiprintf_r+0xc6>
 80152e4:	2300      	movs	r3, #0
 80152e6:	3701      	adds	r7, #1
 80152e8:	9305      	str	r3, [sp, #20]
 80152ea:	4619      	mov	r1, r3
 80152ec:	250a      	movs	r5, #10
 80152ee:	4638      	mov	r0, r7
 80152f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152f4:	3a30      	subs	r2, #48	; 0x30
 80152f6:	2a09      	cmp	r2, #9
 80152f8:	d903      	bls.n	8015302 <_svfiprintf_r+0x196>
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d0c8      	beq.n	8015290 <_svfiprintf_r+0x124>
 80152fe:	9105      	str	r1, [sp, #20]
 8015300:	e7c6      	b.n	8015290 <_svfiprintf_r+0x124>
 8015302:	fb05 2101 	mla	r1, r5, r1, r2
 8015306:	2301      	movs	r3, #1
 8015308:	4607      	mov	r7, r0
 801530a:	e7f0      	b.n	80152ee <_svfiprintf_r+0x182>
 801530c:	ab03      	add	r3, sp, #12
 801530e:	9300      	str	r3, [sp, #0]
 8015310:	4622      	mov	r2, r4
 8015312:	4b11      	ldr	r3, [pc, #68]	; (8015358 <_svfiprintf_r+0x1ec>)
 8015314:	a904      	add	r1, sp, #16
 8015316:	4640      	mov	r0, r8
 8015318:	f7fc f9b6 	bl	8011688 <_printf_float>
 801531c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015320:	4681      	mov	r9, r0
 8015322:	d1d6      	bne.n	80152d2 <_svfiprintf_r+0x166>
 8015324:	89a3      	ldrh	r3, [r4, #12]
 8015326:	065b      	lsls	r3, r3, #25
 8015328:	f53f af35 	bmi.w	8015196 <_svfiprintf_r+0x2a>
 801532c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801532e:	b01d      	add	sp, #116	; 0x74
 8015330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015334:	ab03      	add	r3, sp, #12
 8015336:	9300      	str	r3, [sp, #0]
 8015338:	4622      	mov	r2, r4
 801533a:	4b07      	ldr	r3, [pc, #28]	; (8015358 <_svfiprintf_r+0x1ec>)
 801533c:	a904      	add	r1, sp, #16
 801533e:	4640      	mov	r0, r8
 8015340:	f7fc fc44 	bl	8011bcc <_printf_i>
 8015344:	e7ea      	b.n	801531c <_svfiprintf_r+0x1b0>
 8015346:	bf00      	nop
 8015348:	08016584 	.word	0x08016584
 801534c:	0801658a 	.word	0x0801658a
 8015350:	0801658e 	.word	0x0801658e
 8015354:	08011689 	.word	0x08011689
 8015358:	080150b9 	.word	0x080150b9

0801535c <_sbrk_r>:
 801535c:	b538      	push	{r3, r4, r5, lr}
 801535e:	4c06      	ldr	r4, [pc, #24]	; (8015378 <_sbrk_r+0x1c>)
 8015360:	2300      	movs	r3, #0
 8015362:	4605      	mov	r5, r0
 8015364:	4608      	mov	r0, r1
 8015366:	6023      	str	r3, [r4, #0]
 8015368:	f7f2 fb6a 	bl	8007a40 <_sbrk>
 801536c:	1c43      	adds	r3, r0, #1
 801536e:	d102      	bne.n	8015376 <_sbrk_r+0x1a>
 8015370:	6823      	ldr	r3, [r4, #0]
 8015372:	b103      	cbz	r3, 8015376 <_sbrk_r+0x1a>
 8015374:	602b      	str	r3, [r5, #0]
 8015376:	bd38      	pop	{r3, r4, r5, pc}
 8015378:	20030b08 	.word	0x20030b08

0801537c <__sread>:
 801537c:	b510      	push	{r4, lr}
 801537e:	460c      	mov	r4, r1
 8015380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015384:	f000 f8f4 	bl	8015570 <_read_r>
 8015388:	2800      	cmp	r0, #0
 801538a:	bfab      	itete	ge
 801538c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801538e:	89a3      	ldrhlt	r3, [r4, #12]
 8015390:	181b      	addge	r3, r3, r0
 8015392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015396:	bfac      	ite	ge
 8015398:	6563      	strge	r3, [r4, #84]	; 0x54
 801539a:	81a3      	strhlt	r3, [r4, #12]
 801539c:	bd10      	pop	{r4, pc}

0801539e <__swrite>:
 801539e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a2:	461f      	mov	r7, r3
 80153a4:	898b      	ldrh	r3, [r1, #12]
 80153a6:	05db      	lsls	r3, r3, #23
 80153a8:	4605      	mov	r5, r0
 80153aa:	460c      	mov	r4, r1
 80153ac:	4616      	mov	r6, r2
 80153ae:	d505      	bpl.n	80153bc <__swrite+0x1e>
 80153b0:	2302      	movs	r3, #2
 80153b2:	2200      	movs	r2, #0
 80153b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153b8:	f000 f886 	bl	80154c8 <_lseek_r>
 80153bc:	89a3      	ldrh	r3, [r4, #12]
 80153be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80153c6:	81a3      	strh	r3, [r4, #12]
 80153c8:	4632      	mov	r2, r6
 80153ca:	463b      	mov	r3, r7
 80153cc:	4628      	mov	r0, r5
 80153ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153d2:	f000 b835 	b.w	8015440 <_write_r>

080153d6 <__sseek>:
 80153d6:	b510      	push	{r4, lr}
 80153d8:	460c      	mov	r4, r1
 80153da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153de:	f000 f873 	bl	80154c8 <_lseek_r>
 80153e2:	1c43      	adds	r3, r0, #1
 80153e4:	89a3      	ldrh	r3, [r4, #12]
 80153e6:	bf15      	itete	ne
 80153e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80153ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80153ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80153f2:	81a3      	strheq	r3, [r4, #12]
 80153f4:	bf18      	it	ne
 80153f6:	81a3      	strhne	r3, [r4, #12]
 80153f8:	bd10      	pop	{r4, pc}

080153fa <__sclose>:
 80153fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153fe:	f000 b831 	b.w	8015464 <_close_r>

08015402 <strncmp>:
 8015402:	b510      	push	{r4, lr}
 8015404:	b16a      	cbz	r2, 8015422 <strncmp+0x20>
 8015406:	3901      	subs	r1, #1
 8015408:	1884      	adds	r4, r0, r2
 801540a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801540e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015412:	4293      	cmp	r3, r2
 8015414:	d103      	bne.n	801541e <strncmp+0x1c>
 8015416:	42a0      	cmp	r0, r4
 8015418:	d001      	beq.n	801541e <strncmp+0x1c>
 801541a:	2b00      	cmp	r3, #0
 801541c:	d1f5      	bne.n	801540a <strncmp+0x8>
 801541e:	1a98      	subs	r0, r3, r2
 8015420:	bd10      	pop	{r4, pc}
 8015422:	4610      	mov	r0, r2
 8015424:	e7fc      	b.n	8015420 <strncmp+0x1e>

08015426 <__ascii_wctomb>:
 8015426:	b149      	cbz	r1, 801543c <__ascii_wctomb+0x16>
 8015428:	2aff      	cmp	r2, #255	; 0xff
 801542a:	bf85      	ittet	hi
 801542c:	238a      	movhi	r3, #138	; 0x8a
 801542e:	6003      	strhi	r3, [r0, #0]
 8015430:	700a      	strbls	r2, [r1, #0]
 8015432:	f04f 30ff 	movhi.w	r0, #4294967295
 8015436:	bf98      	it	ls
 8015438:	2001      	movls	r0, #1
 801543a:	4770      	bx	lr
 801543c:	4608      	mov	r0, r1
 801543e:	4770      	bx	lr

08015440 <_write_r>:
 8015440:	b538      	push	{r3, r4, r5, lr}
 8015442:	4c07      	ldr	r4, [pc, #28]	; (8015460 <_write_r+0x20>)
 8015444:	4605      	mov	r5, r0
 8015446:	4608      	mov	r0, r1
 8015448:	4611      	mov	r1, r2
 801544a:	2200      	movs	r2, #0
 801544c:	6022      	str	r2, [r4, #0]
 801544e:	461a      	mov	r2, r3
 8015450:	f7f2 faa5 	bl	800799e <_write>
 8015454:	1c43      	adds	r3, r0, #1
 8015456:	d102      	bne.n	801545e <_write_r+0x1e>
 8015458:	6823      	ldr	r3, [r4, #0]
 801545a:	b103      	cbz	r3, 801545e <_write_r+0x1e>
 801545c:	602b      	str	r3, [r5, #0]
 801545e:	bd38      	pop	{r3, r4, r5, pc}
 8015460:	20030b08 	.word	0x20030b08

08015464 <_close_r>:
 8015464:	b538      	push	{r3, r4, r5, lr}
 8015466:	4c06      	ldr	r4, [pc, #24]	; (8015480 <_close_r+0x1c>)
 8015468:	2300      	movs	r3, #0
 801546a:	4605      	mov	r5, r0
 801546c:	4608      	mov	r0, r1
 801546e:	6023      	str	r3, [r4, #0]
 8015470:	f7f2 fab1 	bl	80079d6 <_close>
 8015474:	1c43      	adds	r3, r0, #1
 8015476:	d102      	bne.n	801547e <_close_r+0x1a>
 8015478:	6823      	ldr	r3, [r4, #0]
 801547a:	b103      	cbz	r3, 801547e <_close_r+0x1a>
 801547c:	602b      	str	r3, [r5, #0]
 801547e:	bd38      	pop	{r3, r4, r5, pc}
 8015480:	20030b08 	.word	0x20030b08

08015484 <_fstat_r>:
 8015484:	b538      	push	{r3, r4, r5, lr}
 8015486:	4c07      	ldr	r4, [pc, #28]	; (80154a4 <_fstat_r+0x20>)
 8015488:	2300      	movs	r3, #0
 801548a:	4605      	mov	r5, r0
 801548c:	4608      	mov	r0, r1
 801548e:	4611      	mov	r1, r2
 8015490:	6023      	str	r3, [r4, #0]
 8015492:	f7f2 faac 	bl	80079ee <_fstat>
 8015496:	1c43      	adds	r3, r0, #1
 8015498:	d102      	bne.n	80154a0 <_fstat_r+0x1c>
 801549a:	6823      	ldr	r3, [r4, #0]
 801549c:	b103      	cbz	r3, 80154a0 <_fstat_r+0x1c>
 801549e:	602b      	str	r3, [r5, #0]
 80154a0:	bd38      	pop	{r3, r4, r5, pc}
 80154a2:	bf00      	nop
 80154a4:	20030b08 	.word	0x20030b08

080154a8 <_isatty_r>:
 80154a8:	b538      	push	{r3, r4, r5, lr}
 80154aa:	4c06      	ldr	r4, [pc, #24]	; (80154c4 <_isatty_r+0x1c>)
 80154ac:	2300      	movs	r3, #0
 80154ae:	4605      	mov	r5, r0
 80154b0:	4608      	mov	r0, r1
 80154b2:	6023      	str	r3, [r4, #0]
 80154b4:	f7f2 faab 	bl	8007a0e <_isatty>
 80154b8:	1c43      	adds	r3, r0, #1
 80154ba:	d102      	bne.n	80154c2 <_isatty_r+0x1a>
 80154bc:	6823      	ldr	r3, [r4, #0]
 80154be:	b103      	cbz	r3, 80154c2 <_isatty_r+0x1a>
 80154c0:	602b      	str	r3, [r5, #0]
 80154c2:	bd38      	pop	{r3, r4, r5, pc}
 80154c4:	20030b08 	.word	0x20030b08

080154c8 <_lseek_r>:
 80154c8:	b538      	push	{r3, r4, r5, lr}
 80154ca:	4c07      	ldr	r4, [pc, #28]	; (80154e8 <_lseek_r+0x20>)
 80154cc:	4605      	mov	r5, r0
 80154ce:	4608      	mov	r0, r1
 80154d0:	4611      	mov	r1, r2
 80154d2:	2200      	movs	r2, #0
 80154d4:	6022      	str	r2, [r4, #0]
 80154d6:	461a      	mov	r2, r3
 80154d8:	f7f2 faa4 	bl	8007a24 <_lseek>
 80154dc:	1c43      	adds	r3, r0, #1
 80154de:	d102      	bne.n	80154e6 <_lseek_r+0x1e>
 80154e0:	6823      	ldr	r3, [r4, #0]
 80154e2:	b103      	cbz	r3, 80154e6 <_lseek_r+0x1e>
 80154e4:	602b      	str	r3, [r5, #0]
 80154e6:	bd38      	pop	{r3, r4, r5, pc}
 80154e8:	20030b08 	.word	0x20030b08

080154ec <memmove>:
 80154ec:	4288      	cmp	r0, r1
 80154ee:	b510      	push	{r4, lr}
 80154f0:	eb01 0302 	add.w	r3, r1, r2
 80154f4:	d807      	bhi.n	8015506 <memmove+0x1a>
 80154f6:	1e42      	subs	r2, r0, #1
 80154f8:	4299      	cmp	r1, r3
 80154fa:	d00a      	beq.n	8015512 <memmove+0x26>
 80154fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015500:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015504:	e7f8      	b.n	80154f8 <memmove+0xc>
 8015506:	4283      	cmp	r3, r0
 8015508:	d9f5      	bls.n	80154f6 <memmove+0xa>
 801550a:	1881      	adds	r1, r0, r2
 801550c:	1ad2      	subs	r2, r2, r3
 801550e:	42d3      	cmn	r3, r2
 8015510:	d100      	bne.n	8015514 <memmove+0x28>
 8015512:	bd10      	pop	{r4, pc}
 8015514:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015518:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801551c:	e7f7      	b.n	801550e <memmove+0x22>

0801551e <__malloc_lock>:
 801551e:	4770      	bx	lr

08015520 <__malloc_unlock>:
 8015520:	4770      	bx	lr

08015522 <_realloc_r>:
 8015522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015524:	4607      	mov	r7, r0
 8015526:	4614      	mov	r4, r2
 8015528:	460e      	mov	r6, r1
 801552a:	b921      	cbnz	r1, 8015536 <_realloc_r+0x14>
 801552c:	4611      	mov	r1, r2
 801552e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015532:	f7ff bd67 	b.w	8015004 <_malloc_r>
 8015536:	b922      	cbnz	r2, 8015542 <_realloc_r+0x20>
 8015538:	f7ff fd16 	bl	8014f68 <_free_r>
 801553c:	4625      	mov	r5, r4
 801553e:	4628      	mov	r0, r5
 8015540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015542:	f000 f827 	bl	8015594 <_malloc_usable_size_r>
 8015546:	42a0      	cmp	r0, r4
 8015548:	d20f      	bcs.n	801556a <_realloc_r+0x48>
 801554a:	4621      	mov	r1, r4
 801554c:	4638      	mov	r0, r7
 801554e:	f7ff fd59 	bl	8015004 <_malloc_r>
 8015552:	4605      	mov	r5, r0
 8015554:	2800      	cmp	r0, #0
 8015556:	d0f2      	beq.n	801553e <_realloc_r+0x1c>
 8015558:	4631      	mov	r1, r6
 801555a:	4622      	mov	r2, r4
 801555c:	f7fb fffa 	bl	8011554 <memcpy>
 8015560:	4631      	mov	r1, r6
 8015562:	4638      	mov	r0, r7
 8015564:	f7ff fd00 	bl	8014f68 <_free_r>
 8015568:	e7e9      	b.n	801553e <_realloc_r+0x1c>
 801556a:	4635      	mov	r5, r6
 801556c:	e7e7      	b.n	801553e <_realloc_r+0x1c>
	...

08015570 <_read_r>:
 8015570:	b538      	push	{r3, r4, r5, lr}
 8015572:	4c07      	ldr	r4, [pc, #28]	; (8015590 <_read_r+0x20>)
 8015574:	4605      	mov	r5, r0
 8015576:	4608      	mov	r0, r1
 8015578:	4611      	mov	r1, r2
 801557a:	2200      	movs	r2, #0
 801557c:	6022      	str	r2, [r4, #0]
 801557e:	461a      	mov	r2, r3
 8015580:	f7f2 f9f0 	bl	8007964 <_read>
 8015584:	1c43      	adds	r3, r0, #1
 8015586:	d102      	bne.n	801558e <_read_r+0x1e>
 8015588:	6823      	ldr	r3, [r4, #0]
 801558a:	b103      	cbz	r3, 801558e <_read_r+0x1e>
 801558c:	602b      	str	r3, [r5, #0]
 801558e:	bd38      	pop	{r3, r4, r5, pc}
 8015590:	20030b08 	.word	0x20030b08

08015594 <_malloc_usable_size_r>:
 8015594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015598:	1f18      	subs	r0, r3, #4
 801559a:	2b00      	cmp	r3, #0
 801559c:	bfbc      	itt	lt
 801559e:	580b      	ldrlt	r3, [r1, r0]
 80155a0:	18c0      	addlt	r0, r0, r3
 80155a2:	4770      	bx	lr

080155a4 <_init>:
 80155a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155a6:	bf00      	nop
 80155a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155aa:	bc08      	pop	{r3}
 80155ac:	469e      	mov	lr, r3
 80155ae:	4770      	bx	lr

080155b0 <_fini>:
 80155b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155b2:	bf00      	nop
 80155b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155b6:	bc08      	pop	{r3}
 80155b8:	469e      	mov	lr, r3
 80155ba:	4770      	bx	lr
